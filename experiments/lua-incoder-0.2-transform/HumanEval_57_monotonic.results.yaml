language: lua
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiiw3aeyk.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpiiw3aeyk.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpiiw3aeyk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotfmd94h.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpotfmd94h.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpotfmd94h.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\
    \ return false end\n    if l[i] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaev4qkri.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaev4qkri.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpaev4qkri.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4o5wnwj.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn4o5wnwj.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpn4o5wnwj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiiw3aeyk.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpiiw3aeyk.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpiiw3aeyk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  return l[1] == l[2]\
    \ or is_monotonic(l[1])\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj29xyxem.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj29xyxem.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n     \
    \ else\n        i = m\n      end\n      n = m\n    end\n    if i < j then\n  \
    \    j = i\n    end\n    i = m\n  end\n  return i <= j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1y6ct01.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpc1y6ct01.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpc1y6ct01.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n        m = m + 1\n        n = n + 1\n\
    \      elseif l[m] > l[n] then\n        local t = l[m]\n        l[m] = l[n]\n\
    \        l[n] = t\n        n = n - 1\n      else\n        local t = l[m]\n   \
    \     l[m] = l[n]\n        l[n] = t\n        i = i + 1\n        n = n - 1\n  \
    \    end\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplmel3euv.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmplmel3euv.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmplmel3euv.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxhzfl2re.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxhzfl2re.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpxhzfl2re.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function helper(l, i, j)\n    if i == j then return true end\n    if\
    \ l[i] > l[j] then return helper(l, i, j+1) else return helper(l, i+1, j) end\n\
    \  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2cb6wsq6.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2cb6wsq6.lua:11:\
    \ in function </tmp/tmp2cb6wsq6.lua:9>\n\t(tail call): ?\n\t(tail call): ?\n\t\
    (tail call): ?\n\t/tmp/tmp2cb6wsq6.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v > l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvh2vjimf.lua:89: ''end'' expected (to close ''function'' at
    line 8) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = false\n  local\
    \ max_i = #l\n  local max_j = #l\n  local max_k = #l\n  while i <= max_i and j\
    \ <= max_j and k <= max_k do\n    if l[i] < l[j] then\n      i = i + 1\n     \
    \ k = k + 1\n    elseif l[i] > l[j] then\n      j = j + 1\n      k = k + 1\n \
    \   else\n      monotonic = true\n      break\n    end\n  end\n  return monotonic\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6d095l4.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy6d095l4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp171msmxh.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp171msmxh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp171msmxh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function compare(x, y)\n    if x < y then\n      return -1\n    elseif\
    \ x > y then\n      return 1\n    else\n      return 0\n    end\n  end\n  local\
    \ function is_monotonic(l, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if i == j - 1 then\n      return compare(l, l[i + 1]) <= 0\n    end\n   \
    \ return is_monotonic(l, i, j - 1)\n  end\n  local function is_monotonic_helper(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if i == j - 1 then\n\
    \      return compare(l, l[i + 1]) <= 0\n    end\n    return is_monotonic_helper(l,\
    \ i, j - 1)\n  end\n  local function is_monotonic_helper2(l, i, j)\n    if i ==\
    \ j then\n      return true\n    end\n    if i == j - 1 then\n      return compare(l,\
    \ l[i + 1]) <= 0\n    end\n    return is_monotonic_helper2(l, i, j - 1)\n  end\n\
    \  local function is_monotonic_helper3(l, i, j)\n    if i == j then\n      return\
    \ true\n    end\n    if i == j - 1 then\n      return compare(l, l[i + 1]) <=\
    \ 0\n    end\n    return is_monotonic_helper3(l, i, j - 1)\n  end\n  local function\
    \ is_monotonic_helper4(l, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if i == j - 1 then\n      return compare(l, l[i + 1]) <= 0\n    end\n   \
    \ return is_monotonic_helper4(l, i, j - 1)\n  end\n  local function is_monotonic_helper5(l,\
    \ i, j)\n    if i == j then\n      return true\n    end\n    if i == j - 1 then\n\
    \      return compare(l, l[i + 1]) <= 0\n    end\n    return is_monotonic_helper5(l,\
    \ i, j - 1)\n  end\n  local function is_monotonic_helper6(l, i, j)\n    if i ==\
    \ j then\n      return true\n    end\n    if i == j - 1 then\n      return compare(l,\
    \ l[i + 1]) <= 0\n    end\n    return is_monotonic_helper6(l, i, j - 1)\n  end\n\
    \  local function is_monotonic_helper7(l, i, j)\n    if i == j then\n      return\
    \ true\n    end\n    if i == j - 1 then\n      return compare(l, l[i + 1]) <=\
    \ 0\n    end\n    return is_monotonic_helper7(l, i, j - 1)\n  end\n  local function\
    \ is_monotonic_helper8(l, i, j)\n    if i == j then\n      return true\n    end\n\
    \    if i == j - 1 then\n      return compare(l, l[i + 1]) <= 0\n    end\n   \
    \ return is_monotonic_helper8(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1jeen4b2.lua:98: '')'' expected (to close ''('' at line 97)
    near ''=''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_eyfi7fo.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_eyfi7fo.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_eyfi7fo.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return\
    \ i <= j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqt3u6bbi.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqt3u6bbi.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpqt3u6bbi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v > l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v > l[2] and v > l[1]\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v < l[2] and v < l[1]\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_monotonic_or_equal(v)\n    return is_strictly_monotonic(v)\
    \ or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n \
    \   return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_equal(v)\n\
    \    return is_strictly_monotonic(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return is_strictly_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return is_strictly_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_monotonic_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppt69uu8v.lua:67: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n\
    \        l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbd9e4411.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbd9e4411.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbd9e4411.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    local current = l[i]\n\
    \    if current ~= last then\n      return false\n    end\n    last = current\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5jzuigjc.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5jzuigjc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        local t = l[k]\n        l[k]\
    \ = l[k + 1]\n        l[k + 1] = t\n      end\n      k = k + 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3tmfckv.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpi3tmfckv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpi3tmfckv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_i\
    \ = nil\n  local last_monotonic_j = nil\n  local last_monotonic_k = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_l = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l\
    \ = nil\n  local last_monotonic_l = nil\n  local last_monotonic_l = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnh2dzoh1.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_value = l[1]\n  local last_time = l[1]\n  local last_index = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last_value then\n      if last_time > l[i] then\n\
    \        monotonic = false\n      else\n        -- Increase monotonic index by\
    \ 1\n        k = k + 1\n        last_value = l[i]\n        last_time = l[i]\n\
    \        last_index = k\n      end\n    end\n  end\n  return monotonic\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfzuwlgeq.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfzuwlgeq.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotfmd94h.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpotfmd94h.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpotfmd94h.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgz09cmrv.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgz09cmrv.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpgz09cmrv.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  local last_value\n  for _, value in ipairs(l) do\n   \
    \ if value == last_value then\n      table.insert(sorted, value)\n    else\n \
    \     last_value = value\n      table.insert(sorted, value)\n    end\n  end\n\
    \  table.sort(sorted)\n  for _, value in ipairs(sorted) do\n    if value == sorted[#sorted]\
    \ then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppukba0nf.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppukba0nf.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  return sorted[1] == sorted[#sorted] and #sorted\
    \ > 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5kgh1hqs.lua:10:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmp5kgh1hqs.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp5kgh1hqs.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\
    \ return false end\n    if l[i] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaev4qkri.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaev4qkri.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpaev4qkri.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwjq4gt_.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmwjq4gt_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmwjq4gt_.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp171msmxh.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp171msmxh.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp171msmxh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_decreasing(i)\n    return l[i] > l[i + 1]\n  end\n  local\
    \ function is_increasing(i)\n    return l[i] < l[i + 1]\n  end\n  local function\
    \ is_monotonic(i)\n    return is_decreasing(i) or is_increasing(i)\n  end\n  local\
    \ function is_strictly_increasing(i)\n    return is_increasing(i) and l[i + 1]\
    \ <= l[i]\n  end\n  local function is_strictly_decreasing(i)\n    return is_decreasing(i)\
    \ and l[i + 1] >= l[i]\n  end\n  local function is_strictly_monotonic(i)\n   \
    \ return is_monotonic(i) and is_strictly_increasing(i) or is_monotonic(i) and\
    \ is_strictly_decreasing(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_decreasing(i)\n    return is_strictly_decreasing(i)\
    \ and is_strictly_monotonic(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_monotonic(i) and is_strictly_increasing(i)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\
    \ and is_strictly_increasing(i)\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_monotonic(i) and is_strictly_increasing(i)\
    \ and is_strictly_decreasing(i)\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing_strictly_increasing_strictly_decreasing(i)\n\
    \    return is_strictly_increasing(i) and is_strictly_monotonic(i) and is_strictly_decreasing(i)\
    \ and is_strictly_increasing(i) and is_strictly_decreasing(i)\n  end\n  local\
    \ function is_strictly_monot\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp78echg6c.lua:49: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v > l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9bdvv4gd.lua:88: ''end'' expected (to close ''function'' at
    line 72) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4o5wnwj.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpn4o5wnwj.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpn4o5wnwj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ max_i = #l\n  local max_j = #l\n  local max_k = #l\n  while i <= max_i and j\
    \ <= max_j and k <= max_k do\n    if l[i] < l[j] then\n      i = i + 1\n     \
    \ k = k + 1\n    elseif l[i] > l[j] then\n      j = j + 1\n      k = k + 1\n \
    \   else\n      monotonic = false\n      break\n    end\n  end\n  return monotonic\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rgl2hs9.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4rgl2hs9.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n        m, n = n, m\n      else\n    \
    \    m, n = n, m\n      end\n    end\n    i = m + 1\n    j = n\n  end\n  return\
    \ i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphkbglis5.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmphkbglis5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphkbglis5.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j and l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      l[i], l[k] = l[k], l[i]\n      i = i + 1\n    end\n    j = j - 1\n  end\n\
    \  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe6oac8k.lua:13:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpbe6oac8k.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpbe6oac8k.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ is_monotonic = false\n  local is_decreasing = false\n  local is_increasing =\
    \ false\n  local is_decreasing_or_non_increasing = false\n  local is_non_increasing\
    \ = false\n  local is_non_decreasing = false\n  local is_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing = false\n\
    \  local is_non_decreasing_or_non_increasing = false\n  local is_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing_or_non_decreasing_or_non_increasing\
    \ = false\n  local is_non_increasing_or_non_de\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj509iioz.lua:46: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        j = k\n     \
    \ elseif l[k] > l[m] then\n        i = k\n      else\n        return true\n  \
    \    end\n      k = k + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpps6_ll0y.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpps6_ll0y.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpps6_ll0y.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiiw3aeyk.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpiiw3aeyk.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpiiw3aeyk.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and v > l[2]\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and v < l[2]\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local\
    \ function is_strictly_decreasing_strictly_increasing(v)\n    return v < l[1]\
    \ and v > l[2] and v < l[3]\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v > l[1] and v < l[2] and v > l[3]\n  end\n  local function is_strictly_monotonic_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v < l[3]\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n    return\
    \ is_strictly_decreasing(v) or is_strictly_increasing(v) and v > l[3]\n  end\n\
    \  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return v < l[1] and v > l[2] and v < l[3] and v > l[4]\n  end\n  local function\
    \ is_strictly_increasing_strictly_increasing(v)\n    return v > l[1] and v < l[2]\
    \ and v > l[3]\n  end\n  local function is_strictly_decreasing_strictly_decreasing(v)\n\
    \    return v < l[1] and v > l[2] and v < l[3]\n  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v < l[3]\
    \ and v > l[4]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v) and v > l[3]\
    \ and v < l[4]\n  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increas\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4ihwxz1.lua:55: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6qzct3h.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpn6qzct3h.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpn6qzct3h.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  while\
    \ i < #l do\n    if l[i] < l[j] then\n      k = k + 1\n      if k < #l and l[i]\
    \ > l[k] then\n        monotonic = false\n      end\n    elseif l[i] > l[j] then\n\
    \      k = k + 1\n      if k < #l and l[i] < l[k] then\n        monotonic = false\n\
    \      end\n    else\n      k = k + 1\n      if k < #l and l[i] == l[k] then\n\
    \        monotonic = false\n      end\n    end\n    i = i + 1\n    j = j + 1\n\
    \  end\n  return monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3t6jkknl.lua:41:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3t6jkknl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n\
    \  local ok = true\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n\
    \    local w = x - y\n    if w < 0 then\n      ok = false\n      break\n    end\n\
    \    if w > 0 then\n      if k ~= i then\n        m[k] = l[k]\n      end\n   \
    \   k = j\n      j = i\n    else\n      if k ~= j then\n        m[k] = l[j]\n\
    \      end\n      k = i\n      i = j\n    end\n  end\n  if k ~= i then\n    m[k]\
    \ = l[i]\n  end\n  return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    while\
    \ m <= j and l[m] < l[m] do\n      m = m + 1\n    end\n    if m > i then\n   \
    \   j = m\n    else\n      i = m + 1\n    end\n  end\n  return i <= j\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1repfjxj.lua:13:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1repfjxj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp1repfjxj.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ is_decreasing = false\n  local is_increasing = false\n  local is_monotonic =\
    \ false\n  local is_decreasing_or_nondecreasing = false\n  local is_increasing_or_nonincreasing\
    \ = false\n  local is_monotonic_or_nonmonotonic = false\n  local is_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic = false\n  local is_nonmonotonic_or_nonmonotonic_increasing\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing = false\n  local\
    \ is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing = false\n  local\
    \ is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing = false\n  local\
    \ is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_decreasing_or_nonincreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic\
    \ = false\n  local is_nonmonotonic_or_nonmonotonic_increasing_or_nondecreasing_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonotonic_or_nonmonoton\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqc1uwnj.lua:48: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9m68adkh.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = l[i]\n  \
    \  local m = l[j]\n    if m > k then return false end\n    if m ~= k then return\
    \ true end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1ua5xnkp.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp1ua5xnkp.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1ua5xnkp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    i\
    \ = j\n    j = k\n    if l[i] < l[j] then\n      local t = l[i]\n      l[i] =\
    \ l[j]\n      l[j] = t\n    end\n  end\n  return l[1] < l[#l]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp465itedn.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp465itedn.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp465itedn.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in pairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp18y9ec5j.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = n\n     \
    \ elseif l[m] > l[n] then\n        i = m\n      else\n        return true\n  \
    \    end\n      n = m + 1\n    end\n    i = m + 1\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuuuqizy_.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuuuqizy_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpuuuqizy_.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  local last_index = nil\n  for index, value in ipairs(l)\
    \ do\n    if last_value ~= value then\n      last_value = value\n      last_index\
    \ = index\n    end\n  end\n  return last_index == nil or last_index == #l + 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxua393k.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbxua393k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = j\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoyu4kci0.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpoyu4kci0.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpoyu4kci0.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e7p653o.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0e7p653o.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    while\
    \ m <= j and l[m] < l[m] do\n      m = m + 1\n    end\n    if m > i then\n   \
    \   local k = i\n      while k <= m and l[k] > l[k] do\n        k = k + 1\n  \
    \    end\n      if k >= m then\n        return false\n      else\n        i =\
    \ m\n      end\n    else\n      j = m\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n\
    \    if x == y then\n      if w < 0 then\n        j = k\n      else\n        i\
    \ = k\n      end\n    elseif x == w then\n      if w < 0 then\n        j = k\n\
    \      else\n        i = k\n      end\n    elseif y < w then\n      k = j\n  \
    \    j = i\n      i = k\n    else\n      m = i\n      i = j\n      j = m\n   \
    \ end\n    k = k + 1\n  end\n  return i == m\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ elseif l[m] > l[n] then\n        i = m\n      else\n        return true\n  \
    \    end\n      m = m + 1\n      n = n + 1\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv54x1odz.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpv54x1odz.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpv54x1odz.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = m end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpce4lh9jf.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpce4lh9jf.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpce4lh9jf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n      j = j - 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyh0w14qh.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyh0w14qh.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyh0w14qh.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function helper(l, low, high)\n    if low > high then\n      return false\n\
    \    end\n    local mid = math.floor((low + high) / 2)\n    return helper(l, low,\
    \ mid) or helper(l, mid, high)\n  end\n  return helper(l, 1, #l)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxm3mz7n3.lua:13:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxm3mz7n3.lua:13: in upvalue 'helper'\n\
    \t/tmp/tmpxm3mz7n3.lua:14: in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14: in\
    \ upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14: in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14:\
    \ in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14: in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14:\
    \ in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14: in upvalue 'helper'\n\t/tmp/tmpxm3mz7n3.lua:14:\
    \ in upvalue 'helper'\n\t...\t(skipping 199973 levels)\n\t/tmp/tmpxm3mz7n3.lua:14:\
    \ in function </tmp/tmpxm3mz7n3.lua:9>\n\t(...tail calls...)\n\t/tmp/tmpxm3mz7n3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.100 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n\
    \        l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptjj3hwtj.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmptjj3hwtj.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmptjj3hwtj.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ k = j\n    while k >= m do\n      if l[m] < l[k] then\n        local t = l[m]\n\
    \        l[m] = l[k]\n        l[k] = t\n      end\n      k = k - 1\n    end\n\
    \    i = i + 1\n    j = j - 1\n  end\n  return l[1] == l[#l]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppnnqhbps.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmppnnqhbps.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppnnqhbps.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[i] then return true\
    \ end\n    i = i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3oougroi.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp3oougroi.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp3oougroi.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxow2aq1r.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxow2aq1r.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxow2aq1r.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = -1\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji5yqp28.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpji5yqp28.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ max_val = l[1]\n  local min_val = l[1]\n  local max_i = #l\n  local min_i =\
    \ #l\n  while i <= max_i and j <= min_i do\n    local val = l[i]\n    local val_prev\
    \ = l[j]\n    if val > val_prev then\n      max_val = val\n      max_i = i\n \
    \   elseif val < val_prev then\n      min_val = val\n      min_i = j\n    end\n\
    \    i = i + 1\n    j = j + 1\n    if i == max_i then\n      monotonic = false\n\
    \    end\n    if j == min_i then\n      monotonic = false\n    end\n  end\n  return\
    \ monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqivw81ug.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqivw81ug.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwzjuz0.lua:10:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmphwwzjuz0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphwwzjuz0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n \
    \   if l[m] < l[i] then return false end\n    if l[m] > l[j] then return true\
    \ end\n    i = m + 1\n    j = m + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3fldcpu.lua:13:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpr3fldcpu.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpr3fldcpu.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n\
    \  local ok = true\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n\
    \    local z = l[k]\n    if x > y then\n      if z > y then\n        ok = false\n\
    \      else\n        table.insert(m, x)\n      end\n    elseif x < y then\n  \
    \    if z < y then\n        ok = false\n      else\n        table.insert(m, y)\n\
    \      end\n    else\n      if z < y then\n        ok = false\n      else\n  \
    \      table.insert(m, z)\n      end\n    end\n    i = i + 1\n    j = j + 1\n\
    \    k = k + 1\n  end\n  return ok\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9rrvmk5.lua:50:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps9rrvmk5.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ min_value = l[1]\n  local max_value = l[1]\n  local min_i = i\n  local max_i\
    \ = i\n  local min_j = j\n  local max_j = j\n  local min_k = k\n  local max_k\
    \ = k\n  while i < #l do\n    local value = l[i]\n    local ii = i + 1\n    local\
    \ jj = j + 1\n    local kk = k + 1\n    if value < min_value then\n      min_value\
    \ = value\n      min_i = ii\n      min_j = jj\n      min_k = kk\n    end\n   \
    \ if value > max_value then\n      max_value = value\n      max_i = ii\n     \
    \ max_j = jj\n      max_k = kk\n    end\n    if value < min_value or value > max_value\
    \ then\n      if not monotonic then\n        monotonic = false\n      end\n  \
    \  end\n    if value < min_value then\n      i = ii\n      j = jj\n      k = kk\n\
    \    else\n      i = ii\n      j = jj\n      k = kk\n    end\n  end\n  if min_value\
    \ == max_value then\n    return false\n  end\n  if min_value < max_value then\n\
    \    return true\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwjv7hpp.lua:67:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvwjv7hpp.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ elseif l[m] > l[n] then\n        i = m\n      else\n        return true\n  \
    \    end\n      m = m + 1\n      n = n + 1\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv54x1odz.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpv54x1odz.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpv54x1odz.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwzjuz0.lua:10:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmphwwzjuz0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphwwzjuz0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = l[1]\n  for _, value in ipairs(l) do\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fe7t3tn.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4fe7t3tn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwzjuz0.lua:10:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmphwwzjuz0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphwwzjuz0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = false\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n\
    \  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val\
    \ = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg = nil\n\
    \  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n  local last_monotonic_neg\
    \ = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos = nil\n\
    \  local last_monotonic_neg = nil\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_val = \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprc2yj4qw.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n  local n = #l\n\
    \  while i <= n do\n    local m = {}\n    local k = i\n    while k <= n do\n \
    \     if l[k] < l[k - 1] then\n        m[k] = l[k]\n      else\n        m[k] =\
    \ l[k - 1]\n      end\n      k = k + 1\n    end\n    i = i + 1\n    for j = 1,\
    \ #m do\n      if m[j] > m[j + 1] then\n        local t = m[j]\n        m[j] =\
    \ m[j + 1]\n        m[j + 1] = t\n      end\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuuga62c_.lua:18:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuuga62c_.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpuuga62c_.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n      end\n      if l[n] >\
    \ l[m] then\n        local t = l[n]\n        l[n] = l[m]\n        l[m] = t\n \
    \     end\n      m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphf23686y.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmphf23686y.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmphf23686y.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n    else\n      if last_value < value then\n\
    \        return false\n      else\n        last_value = value\n      end\n   \
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mpeuh9_.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8mpeuh9_.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n    if l[i] >\
    \ l[j] then\n      i = m\n    end\n  end\n  return i == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxow2aq1r.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpxow2aq1r.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpxow2aq1r.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n        local t\
    \ = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ == l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn4tjf7vp.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpn4tjf7vp.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpn4tjf7vp.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpay6hf41n.lua:89: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptr8rmord.lua:10:\
    \ attempt to get length of local 'sorted' (a nil value)\nstack traceback:\n\t\
    /tmp/tmptr8rmord.lua:10: in function 'candidate'\n\t/tmp/tmptr8rmord.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  local last_index = l[1]\n  local last_value = l[1]\n  local\
    \ last_index = l[1]\n  local last_value = l[1]\n  local last_index = l[1]\n  local\
    \ last_value = l[1]\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp38pk8ryk.lua:98: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~=\
    \ sorted[i-1] then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj40lvg2k.lua:10:\
    \ attempt to get length of a nil value (local 'sorted')\nstack traceback:\n\t\
    /tmp/tmpj40lvg2k.lua:10: in local 'candidate'\n\t/tmp/tmpj40lvg2k.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if prev[v] == nil then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxp8k764o.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxp8k764o.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 0
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  while\
    \ i < #l do\n    if l[i] > l[j] then\n      k = k + 1\n      if k < #l then\n\
    \        j = i\n      else\n        monotonic = false\n        break\n      end\n\
    \    elseif l[i] < l[j] then\n      k = k - 1\n      if k < 1 then\n        j\
    \ = i\n      else\n        monotonic = false\n        break\n      end\n    end\n\
    \    i = i + 1\n  end\n  return monotonic\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6xxos22.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf6xxos22.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf6xxos22.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n\
    \      j = j - 1\n    elseif l[i] > l[j] then\n      i = i + 1\n    else\n   \
    \   j = j - 1\n    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmw83ebv2.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmw83ebv2.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpmw83ebv2.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then j = m end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf66d_gig.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpf66d_gig.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf66d_gig.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = j end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppjuipuas.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppjuipuas.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppjuipuas.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        i, j = k, m\n\
    \      else\n        m, k = k, k + 1\n      end\n    end\n    if i < j then\n\
    \      l[i], l[j] = l[j], l[i]\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2oz9we4d.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2oz9we4d.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp2oz9we4d.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(i, j)\n    return l[i] <= l[j]\n  end\n  local\
    \ function is_decreasing(i, j)\n    return l[i] >= l[j]\n  end\n  local function\
    \ is_monotonic(i, j)\n    return is_increasing(i, j) or is_decreasing(i, j)\n\
    \  end\n  local function is_monotonic_pair(i, j)\n    return is_increasing(i,\
    \ j) or is_decreasing(j, i)\n  end\n  local function is_monotonic_triple(i, j,\
    \ k)\n    return is_increasing(i, j, k) or is_decreasing(j, k, i)\n  end\n  local\
    \ function is_monotonic_triple_pair(i, j, k)\n    return is_increasing(i, j, k)\
    \ or is_decreasing(k, j, i)\n  end\n  local function is_monotonic_triple_triple(i,\
    \ j, k, l)\n    return is_increasing(i, j, k, l) or is_decreasing(k, l, i, j)\n\
    \  end\n  local function is_monotonic_triple_triple_pair(i, j, k, l)\n    return\
    \ is_increasing(i, j, k, l) or is_decreasing(l, i, k, j)\n  end\n  local function\
    \ is_monotonic_triple_triple_triple(i, j, k, l, m)\n    return is_increasing(i,\
    \ j, k, l, m) or is_decreasing(l, m, i, k, j)\n  end\n  local function is_monotonic_triple_triple_triple_pair(i,\
    \ j, k, l, m)\n    return is_increasing(i, j, k, l, m) or is_decreasing(m, i,\
    \ k, l, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_triple_triple_triple_triple_pair(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j, k, l, m, n) or is_decreasing(m,\
    \ n, i, k, l, n, j)\n  end\n  local function is_monotonic_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvfwkt0yw.lua:52: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then i = m end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpce4lh9jf.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpce4lh9jf.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpce4lh9jf.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_decreasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_increasing(v) or is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \    return is_decreasing(v) or v == l[1]\n  end\n  local function is_monotonic_or_equal(v)\n\
    \    return is_monotonic(v) or v == l[1]\n  end\n  local function is_increasing_or_equal(v)\n\
    \    return is_increasing(v) or v == l[1]\n  end\n  local function is_decreasing_or_equal(v)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8yhplws7.lua:88: ''end'' expected (to close ''function'' at
    line 72) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_monotonic = false\n  local last_monotonic_val = nil\n  local last_monotonic_pos\
    \ = nil\n  local last_monotonic_neg = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n\
    \  local last_monotonic_len = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len\
    \ = nil\n  local last_monotonic_len = nil\n  local last_monotonic_len = \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9m68adkh.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  while\
    \ i <= #l do\n    local v = l[i]\n    local w = l[j]\n    local z = v - w\n  \
    \  if z < 0 then\n      k = k + 1\n      if k < i then\n        j = j + 1\n  \
    \    else\n        i = i + 1\n        monotonic = false\n      end\n    elseif\
    \ z > 0 then\n      k = k - 1\n      if k < i then\n        j = j + 1\n      else\n\
    \        i = i + 1\n        monotonic = false\n      end\n    end\n  end\n  return\
    \ monotonic\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmp = l[i]\n      l[i] = l[j]\n      l[j] = tmp\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5v8jht9.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf5v8jht9.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpf5v8jht9.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmpi = i\n      i = j\n      j = tmpi\n    else\n      i = i + 1\n\
    \    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgm9m5d1l.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgm9m5d1l.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgm9m5d1l.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwwzjuz0.lua:10:\
    \ attempt to index a nil value (local 'sorted')\nstack traceback:\n\t/tmp/tmphwwzjuz0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmphwwzjuz0.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[#l]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1mm1leke.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmp1mm1leke.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp1mm1leke.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa6o1is2b.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpa6o1is2b.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpa6o1is2b.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: -1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n\
    \    if x > y then\n      if x < z then\n        -- Increasing monotonic list\n\
    \        j = k\n      else\n        -- Decreasing monotonic list\n        i =\
    \ k\n      end\n    elseif x < z then\n      -- Increasing monotonic list\n  \
    \    i = k\n    else\n      -- Decreasing monotonic list\n      j = k\n    end\n\
    \    k = j + 1\n    m = m + 1\n  end\n  return m == n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(i)\n    return l[i] <= l[i+1]\n  end\n  local\
    \ function is_decreasing(i)\n    return l[i] >= l[i+1]\n  end\n  local function\
    \ is_monotonic(i)\n    return is_increasing(i) or is_decreasing(i)\n  end\n  local\
    \ function is_strictly_increasing(i)\n    return is_increasing(i) and is_strictly_decreasing(i+1)\n\
    \  end\n  local function is_strictly_decreasing(i)\n    return is_decreasing(i)\
    \ and is_strictly_increasing(i-1)\n  end\n  local function is_strictly_monotonic(i)\n\
    \    return is_monotonic(i) and is_strictly_increasing(i) or is_strictly_decreasing(i)\n\
    \  end\n  local function is_strictly_strictly_increasing(i)\n    return is_strictly_increasing(i)\
    \ and is_strictly_increasing(i+1)\n  end\n  local function is_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n  end\n\
    \  local function is_strictly_strictly_monotonic(i)\n    return is_strictly_monotonic(i)\
    \ and is_strictly_increasing(i) or is_strictly_decreasing(i)\n  end\n  local function\
    \ is_strictly_strictly_strictly_increasing(i)\n    return is_strictly_strictly_increasing(i)\
    \ and is_strictly_increasing(i+1)\n  end\n  local function is_strictly_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n\
    \  end\n  local function is_strictly_strictly_strictly_monotonic(i)\n    return\
    \ is_strictly_strictly_monotonic(i) and is_strictly_increasing(i) or is_strictly_decreasing(i)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_increasing(i)\n\
    \    return is_strictly_strictly_strictly_increasing(i) and is_strictly_increasing(i+1)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_decreasing(i)\n\
    \    return is_strictly_strictly_strictly_decreasing(i) and is_strictly_decreasing(i-1)\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_monotonic(i)\n\
    \    return is_strictly_strictly_strictly_monotonic(i) and is_strictly_increasing(i)\
    \ or is_strictly_decreasing(i)\n  end\n  local function is_strictly_strictly_strictly_strictly_strict\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpztfw1wyh.lua:55: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local last_value = nil\n  for _, value in ipairs(l) do\n    if last_value ==\
    \ nil then\n      last_value = value\n      continue\n    end\n    if last_value\
    \ < value then\n      return false\n    end\n    last_value = value\n  end\n \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp35_s7f50.lua:14: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        local t = l[k]\n        l[k]\
    \ = l[k + 1]\n        l[k + 1] = t\n      end\n      k = k + 1\n    end\n    i\
    \ = i + 1\n    j = j - 1\n  end\n  return i == j\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3tmfckv.lua:14:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpi3tmfckv.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpi3tmfckv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\n  local last_index = nil\n  local last_value = nil\n  local\
    \ last_index = nil\n  local last_value = nil\n  local last_index = nil\n  local\
    \ last_value = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp16qhsa9a.lua:109: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  local curr = {}\n  local i = 1\n  for _, v in ipairs(l)\
    \ do\n    prev[i] = v\n    curr[i] = v\n    i = i + 1\n  end\n  i = i - 1\n  for\
    \ i = i + 1, #l do\n    if prev[i] > curr[i] then\n      return false\n    end\n\
    \    prev[i] = curr[i]\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu1tqkap.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvu1tqkap.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k <= j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n\
    \      k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0rae0ae.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0rae0ae.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9m20lrap.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9m20lrap.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9m20lrap.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i\
    \ = j\n    j = m\n    if l[i] < l[j] then return false end\n    if l[i] > l[j]\
    \ then j = m end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf66d_gig.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpf66d_gig.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf66d_gig.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe219nxbk.lua:15:\
    \ attempt to compare two nil values\nstack traceback:\n\t/tmp/tmpe219nxbk.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpe219nxbk.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_decreasing(v)\n    return v < l[1]\n  end\n  local function\
    \ is_increasing(v)\n    return v > l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and is_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and is_decreasing(v)\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local\
    \ function is_strictly_decreasing_strictly_increasing(v)\n    return v > l[1]\
    \ and is_decreasing(v) and is_increasing(v)\n  end\n  local function is_strictly_increasing_strictly_decreasing(v)\n\
    \    return v < l[1] and is_increasing(v) and is_decreasing(v)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_increasing(v)\n    return is_strictly_decreasing(v)\
    \ and is_increasing(v)\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v)\n  end\n  local function\
    \ is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n    return\
    \ is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n  end\n\
    \  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_decreasing(v) and is_decreasing(v) and is_increasing(v)\n\
    \  end\n  local function is_strictly_monotonic_strictly_increasing_strictly_decreas\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ezgoy9w.lua:55: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1] < l[#l]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9m20lrap.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp9m20lrap.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp9m20lrap.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt3745bon.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt3745bon.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      local tmpi = i\n      i = j\n      j = tmpi\n    else\n      i = i + 1\n\
    \    end\n  end\n  return i == j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgm9m5d1l.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpgm9m5d1l.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpgm9m5d1l.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = nil\n  local\
    \ last_monotonic = nil\n  local last_monotonic_i = nil\n  local last_monotonic_j\
    \ = nil\n  local last_monotonic_k = nil\n  local last_monotonic_l = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length =\
    \ nil\n  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n\
    \  local last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local\
    \ last_monotonic_length = nil\n  local last_monotonic_length = nil\n  local last_monotonic_length\
    \ = nil\n  local last_monotonic_length = nil\n  local last_monoton\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptems25gm.lua:82: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpupby6n4o.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpupby6n4o.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  local curr = {}\n  for _, v in ipairs(l) do\n    prev[#prev\
    \ + 1] = v\n    curr[#curr + 1] = v\n  end\n  local i = 1\n  while i <= #prev\
    \ do\n    if prev[i] < prev[i-1] then\n      return false\n    end\n    i = i\
    \ + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6dmpyrzf.lua:17:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6dmpyrzf.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp6dmpyrzf.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      else\n        local t = l[m]\n \
    \       l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n = n\
    \ + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpotfmd94h.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpotfmd94h.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpotfmd94h.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local function is_increasing(i, j)\n    return l[i] <= l[j]\n  end\n  local\
    \ function is_decreasing(i, j)\n    return l[i] >= l[j]\n  end\n  local function\
    \ is_monotonic(i, j)\n    return is_increasing(i, j) or is_decreasing(i, j)\n\
    \  end\n  local function is_monotonic_pair(i, j)\n    return is_increasing(i,\
    \ j) or is_decreasing(j, i)\n  end\n  local function is_monotonic_triple(i, j,\
    \ k)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ j)\n  end\n  local function is_monotonic_triple_pair(i, j, k)\n    return is_increasing(i,\
    \ j) or is_decreasing(j, k) or is_increasing(k, j)\n  end\n  local function is_monotonic_triple_triple(i,\
    \ j, k, l)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, j)\n  end\n  local function is_monotonic_triple_triple_pair(i,\
    \ j, k, l)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, j)\n  end\n  local function is_monotonic_triple_triple_triple(i,\
    \ j, k, l, m)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, l)\n  end\n  local function is_monotonic_triple_triple_triple_pair(i,\
    \ j, k, l, m)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, l)\n  end\n  local function is_monotonic_triple_triple_triple_triple(i,\
    \ j, k, l, m, n)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, n) or is_decreasing(n, m)\n  end\n\
    \  local function is_monotonic_triple_triple_triple_triple_pair(i, j, k, l, m,\
    \ n)\n    return is_increasing(i, j) or is_decreasing(j, k) or is_increasing(k,\
    \ l) or is_decreasing(l, m) or is_increasing(m, n) or is_decreasing(n, m)\n  end\n\
    \  local function is_monotonic_triple_triple_triple_trip\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqkse0359.lua:46: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = -1\n  for _, v in ipairs(l) do\n    if prev < v then\n      return\
    \ false\n    end\n    prev = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpji5yqp28.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpji5yqp28.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n \
    \   local n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local\
    \ t = l[m]\n        l[m] = l[i]\n        l[i] = t\n      end\n      m = m + 1\n\
    \      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i ==\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvys7jem.lua:15:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbvys7jem.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbvys7jem.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while\
    \ k < j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n \
    \     k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0hxrj7h.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw0hxrj7h.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\
    \ return false end\n    if l[i] > l[j] then return true end\n    i = i + 1\n \
    \   j = j - 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = monotonic\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 10}), true)\n    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n   \
    \ lu.assertEquals(candidate({1, 20, 4, 10}), false)\n    lu.assertEquals(candidate({4,\
    \ 1, 0, -10}), true)\n    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n   \
    \ lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaev4qkri.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpaev4qkri.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpaev4qkri.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750522
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local t = l[m]\n\
    \        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n      n =\
    \ n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jwgwdim.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp_jwgwdim.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_jwgwdim.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n\
    \  local p = 1\n  local q = 1\n  local r = 1\n  local s = l[1]\n  local t = l[1]\n\
    \  local u = 1\n  local v = 1\n  local w = 1\n  local x = l[1]\n  local y = l[1]\n\
    \  local z = 1\n  local A = 1\n  local B = 1\n  local C = 1\n  local D = 1\n \
    \ local E = 1\n  local F = 1\n  local G = 1\n  local H = 1\n  local I = 1\n  local\
    \ J = 1\n  local K = 1\n  local L = 1\n  local M = 1\n  local N = 1\n  local O\
    \ = 1\n  local P = 1\n  local Q = 1\n  local R = 1\n  local S = 1\n  local T =\
    \ 1\n  local U = 1\n  local V = 1\n  local W = 1\n  local X = 1\n  local Y = 1\n\
    \  local Z = 1\n  local a = 1\n  local b = 1\n  local c = 1\n  local d = 1\n \
    \ local e = 1\n  local f = a\n  local g = b\n  local h = c\n  local i = d\n  local\
    \ j = e\n  local k = f\n  local l = g\n  local m = h\n  local n = i\n  local o\
    \ = j\n  local p = k\n  local q = l\n  local r = m\n  local s = n\n  local t =\
    \ o\n  local u = q\n  local v = r\n  local w = s\n  local x = t\n  local y = u\n\
    \  local z = v\n  local A = w\n  local B = x\n  local C = y\n  local D = z\n \
    \ local E = A\n  local F = B\n  local G = C\n  local H = D\n  local I = E\n  local\
    \ J = F\n  local K = G\n  local L = H\n  local M = I\n  local N = J\n  local O\
    \ = K\n  local P = L\n  local Q = M\n  local R = N\n  local S = O\n  local T =\
    \ P\n  local U = Q\n  local V = R\n  local W = S\n  local X = T\n  local Y = U\n\
    \  local Z = V\n  local a = W\n  local b = X\n  local c = Y\n  local d = Z\n \
    \ local e = A\n  local f = B\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptdez_6xf.lua:123: ''end'' expected (to close ''function''
    at line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = monotonic\n    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n\
    \    lu.assertEquals(candidate({1, 2, 4, 20}), true)\n    lu.assertEquals(candidate({1,\
    \ 20, 4, 10}), false)\n    lu.assertEquals(candidate({4, 1, 0, -10}), true)\n\
    \    lu.assertEquals(candidate({4, 1, 1, 0}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 5, 60}), false)\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}),\
    \ true)\n    lu.assertEquals(candidate({9, 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9iuj5zyv.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9iuj5zyv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822243
- exit_code: 1
  program: "-- Return True is list elements are monotonically increasing or decreasing.\n\
    -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n--\
    \ false\n-- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n\
    \  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    local\
    \ m = j\n    while k <= m do\n      if l[k] < l[m] then\n        local t = l[k]\n\
    \        l[k] = l[m]\n        l[m] = t\n      end\n      k = k + 1\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return i == j\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
    \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
    \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n \
    \   lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
    \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
    \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6xxos22.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpf6xxos22.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpf6xxos22.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822243
