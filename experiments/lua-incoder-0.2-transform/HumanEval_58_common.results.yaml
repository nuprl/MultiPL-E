language: lua
name: HumanEval_58_common
results:
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] =\
    \ true\n      i2 = i2 + 1\n    else\n      common[e1] = true\n      i1 = i1 +\
    \ 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk0j0uw4.lua:30:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 34=true, 653=true}\n\
    stack traceback:\n\t/tmp/tmpmk0j0uw4.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] =\
    \ true\n      i2 = i2 + 1\n    else\n      common[e1] = true\n      i1 = i1 +\
    \ 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk0j0uw4.lua:30:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 34=true, 653=true}\n\
    stack traceback:\n\t/tmp/tmpmk0j0uw4.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      elseif l1[i1] < l2[j1]\
    \ then\n        j1 = j1 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n\
    \    while j1 <= j2 do\n      table.insert(common, l2[j1])\n      j1 = j1 + 1\n\
    \    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2oqym7q.lua:34:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmpy2oqym7q.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  local l4 = {}\n  for\
    \ _, v in ipairs(l3) do\n    table.insert(l4, v)\n  end\n  return l4\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb9xfcbs.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmpzb9xfcbs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1\n  local i2\n  for i1, l1 in ipairs(l1) do\n    for i2, l2\
    \ in ipairs(l2) do\n      if l1 == l2 then\n        common[i1] = true\n      end\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1apt8aac.lua:23:\
    \ expected: {1, 5, 653}\nactual: {true, 5=true, 7=true}\nstack traceback:\n\t\
    /tmp/tmp1apt8aac.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in pairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in pairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  local l4 = {}\n  for\
    \ _, v in pairs(l3) do\n    table.insert(l4, v)\n  end\n  return l4\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gj306aa.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmp_gj306aa.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750339
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    local e1 = l1[i1]\n    local e2 = l2[j2]\n    common[e1] = common[e1] or\
    \ e2\n    i1 = i1 + 1\n    j2 = j2 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokak5rbs.lua:23:\
    \ expected: {1, 5, 653}\nactual: {121}\nstack traceback:\n\t/tmp/tmpokak5rbs.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local v1 = l1[i1]\n\
    \    local v2 = l2[i2]\n    if v1 == v2 then\n      common[v1] = true\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif v1 < v2 then\n      i1 = i1 + 1\n  \
    \  else\n      i2 = i2 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2qehg7wb.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp2qehg7wb.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmp2qehg7wb.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = e1\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e2] == nil then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    else\n      i1 = i1 + 1\n      i2 = i2 + 1\n  \
    \  end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9teo3u0.lua:33:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmpn9teo3u0.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local j = 1\n    while j <= #l2\
    \ do\n      if l1[i] == l2[j] then\n        table.insert(common, l1[i])\n    \
    \    i = i + 1\n        break\n      else\n        j = j + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gfuaka3.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp2gfuaka3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        common[#common+1]\
    \ = l1[i1]\n        i1, i2 = i3, i3 + 1\n      else\n        i3 = i3 + 1\n   \
    \   end\n    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qz1mcyc.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp9qz1mcyc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  return table.sort(l3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zly_q3m.lua:20:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp_zly_q3m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] =\
    \ true\n      i1 = i1 + 1\n    else\n      common[e1] = true\n      i2 = i2 +\
    \ 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_jz2nsvt.lua:17:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp_jz2nsvt.lua:17: in local 'candidate'\n\
    \t/tmp/tmp_jz2nsvt.lua:30: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750339
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 - 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = e1\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e2] == nil then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    elseif common[e1] < common[e2] then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e1] > common[e2] then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2icka22e.lua:36:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmp2icka22e.lua:36: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = e1\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e2] == nil then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    else\n      common[e1] = common[e1]\n      i1 =\
    \ i1 + 1\n      common[e2] = common[e2]\n      i2 = i2 + 1\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkmw85bj.lua:35:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmpvkmw85bj.lua:35: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        common[#common+1]\
    \ = l1[i1]\n        i1, i3 = i1 + 1, i3 + 1\n      else\n        i3, i2 = i3,\
    \ i2 + 1\n      end\n    end\n    i1, i2 = i1 + 1, i2 + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1 = 0\n  local i2 = 0\n  while i1 < #l1 and i2 < #l2 do\n   \
    \ if l1[i1] == l2[i2] then\n      table.insert(common, l1[i1])\n      i1 = i1\
    \ + 1\n      i2 = i2 + 1\n    else\n      i1 = i1 + 1\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpta2p5jn3.lua:25:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmpta2p5jn3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local j = 1\n    while j <= #l2\
    \ do\n      if l1[i] == l2[j] then\n        table.insert(common, l1[i])\n    \
    \  end\n      j = j + 1\n    end\n    i = i + 1\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2c38jtc.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpq2c38jtc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local j = i\n    while j <= #l2\
    \ do\n      if l1[i] == l2[j] then\n        table.insert(common, l1[i])\n    \
    \    i = i + 1\n        break\n      elseif l1[i] > l2[j] then\n        break\n\
    \      else\n        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsi9lxao7.lua:30:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmpsi9lxao7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  local j = 1\n  while i <= #l1 and j <= #l2 do\n    if\
    \ l1[i] == l2[j] then\n      table.insert(common, l1[i])\n      i = i + 1\n  \
    \    j = j + 1\n    elseif l1[i - 1] == l2[j - 1] then\n      table.insert(common,\
    \ l1[i - 1])\n      i = i + 1\n      j = j + 1\n    elseif l1[i - 1] == l2[j]\
    \ then\n      table.insert(common, l1[i - 1])\n      i = i + 1\n    elseif l1[i\
    \ - 1] == l2[j - 1] then\n      table.insert(common, l1[i])\n      i = i + 1\n\
    \    else\n      table.insert(common, l1[i])\n      i = i + 1\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufdkp_ug.lua:36:\
    \ expected: {1, 5, 653}\nactual: {4, 3, 34, 653, 2, 5}\nstack traceback:\n\t/tmp/tmpufdkp_ug.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750339
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    if l3[v] == nil then\n      table.insert(l3,\
    \ v)\n    end\n  end\n  for _, v in ipairs(l2) do\n    if l3[v] == nil then\n\
    \      table.insert(l3, v)\n    end\n  end\n  return l3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwh7_5sbc.lua:24:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 7, 9, 653, 121}\nstack traceback:\n\
    \t/tmp/tmpwh7_5sbc.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    local e1 = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n      common[e1]\
    \ = true\n      i1 = i1 + 1\n      j2 = j2 + 1\n    elseif common[e1] then\n \
    \     common[e2] = true\n      i2 = i2 + 1\n    else\n      common[e1] = true\n\
    \      i1 = i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp94a_b5yj.lua:31:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 34=true, 653=true}\n\
    stack traceback:\n\t/tmp/tmp94a_b5yj.lua:31: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    if l3[v] then return nil end\n    l3[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    if l3[v] then return nil end\n    l3[v]\
    \ = true\n  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsvk9opn.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpwsvk9opn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local j = 1\n    while j <= #l2\
    \ do\n      if l1[i] == l2[j] then\n        table.insert(common, l1[i])\n    \
    \    i = i + 1\n        break\n      else\n        j = j + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2gfuaka3.lua:28:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5}\nstack traceback:\n\t/tmp/tmp2gfuaka3.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  return table.sort(l3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zly_q3m.lua:20:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp_zly_q3m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local found = false\n    for j\
    \ = 1, #l2 do\n      if l1[i] == l2[j] then\n        table.insert(common, l2[j])\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      table.insert(common, l1[i])\n    end\n    i = i + 1\n  end\n  return common\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f9ybxoe.lua:29:\
    \ expected: {1, 5, 653}\nactual: {1, 4, 3, 34, 653, 2, 5}\nstack traceback:\n\t\
    /tmp/tmp8f9ybxoe.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      elseif l1[i1] < l2[j1]\
    \ then\n        j1 = j1 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n\
    \    j2 = j2 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq0nyjyl.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmq0nyjyl.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmq0nyjyl.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      elseif j1 > j2 then\n        break\n   \
    \   else\n        table.insert(common, l2[j1])\n        j2 = j2 + 1\n      end\n\
    \    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        table.insert(common,\
    \ l1[i1])\n        i3 = i3 + 1\n      else\n        break\n      end\n    end\n\
    \    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwub1d6za.lua:27:\
    \ expected: {1, 5, 653}\nactual: {653}\nstack traceback:\n\t/tmp/tmpwub1d6za.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    if l3[v] then return nil end\n    l3[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    if l3[v] then return nil end\n    l3[v]\
    \ = true\n  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsvk9opn.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmpwsvk9opn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in pairs(l1) do\n    if l3[v] then return nil end\n    l3[v] = true\n\
    \  end\n  for _, v in pairs(l2) do\n    if l3[v] then return nil end\n    l3[v]\
    \ = true\n  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22z1pfc3.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp22z1pfc3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 and i <= #l2 do\n    if l1[i] == l2[i]\
    \ then\n      table.insert(common, l1[i])\n      i = i + 1\n    else\n      i\
    \ = i + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h73vu09.lua:23:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp4h73vu09.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        common[#common+1]\
    \ = l1[i1]\n        i1, i2 = i3, i3 + 1\n      else\n        i3 = i3 + 1\n   \
    \   end\n    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qz1mcyc.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp9qz1mcyc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750339
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[#common+1] = e1\n \
    \     i1 = i1 + 1\n      i2 = i2 + 1\n    elseif e1 < e2 then\n      i1 = i1 +\
    \ 1\n    else\n      i2 = i2 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyt6cmgwe.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyt6cmgwe.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpyt6cmgwe.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  return l3\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvy8oukca.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmpvy8oukca.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      else\n        j1 = j1 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6wusqo9.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmpl6wusqo9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      local i4 = i3 + 1\n      while i4 <= i2 do\n   \
    \     local i5 = i4 + 1\n        while i5 <= i2 do\n          common[#common+1]\
    \ = l1[i1]\n          common[#common+1] = l2[i2]\n          common[#common+1]\
    \ = l1[i3]\n          common[#common+1] = l2[i4]\n          common[#common+1]\
    \ = l1[i5]\n          common[#common+1] = l2[i5]\n          i5 = i5 + 1\n    \
    \    end\n        i4 = i4 + 1\n      end\n      i3 = i3 + 1\n    end\n    i1 =\
    \ i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5pc1se7.lua:36:\
    \ expected: \n{1, 5, 653}\nactual: \n{\n    1,\n    121,\n    4,\n    1,\n   \
    \ 34,\n    5,\n    1,\n    121,\n    4,\n    1,\n    653,\n    9,\n    1,\n  \
    \  121,\n    4,\n    1,\n    2,\n    653,\n    1,\n    121,\n    4,\n    1,\n\
    \    5,\n    121,\n    1,\n    121,\n    4,\n    5,\n    653,\n    9,\n    1,\n\
    \    121,\n    4,\n    5,\n    2,\n    653,\n    1,\n    121,\n    4,\n    5,\n\
    \    5,\n    121,\n    1,\n    121,\n    4,\n    9,\n    2,\n    653,\n    1,\n\
    \    121,\n    4,\n    9,\n    5,\n    121,\n    1,\n    121,\n    4,\n    653,\n\
    \    5,\n    121,\n    1,\n    121,\n    3,\n    5,\n    653,\n    9,\n    1,\n\
    \    121,\n    3,\n    5,\n    2,\n    653,\n    1,\n    121,\n    3,\n    5,\n\
    \    5,\n    121,\n    1,\n    121,\n    3,\n    9,\n    2,\n    653,\n    1,\n\
    \    121,\n    3,\n    9,\n    5,\n    121,\n    1,\n    121,\n    3,\n    653,\n\
    \    5,\n    121,\n    1,\n    121,\n    34,\n    9,\n    2,\n    653,\n    1,\n\
    \    121,\n    34,\n    9,\n    5,\n    121,\n    1,\n    121,\n    34,\n    653,\n\
    \    5,\n    121,\n    1,\n    121,\n    653,\n    653,\n    5,\n    121,\n  \
    \  4,\n    121,\n    3,\n    5,\n    653,\n    9,\n    4,\n    121,\n    3,\n\
    \    5,\n    2,\n    653,\n    4,\n    121,\n    3,\n    5,\n    5,\n    121,\n\
    \    4,\n    121,\n    3,\n    9,\n    2,\n    653,\n    4,\n    121,\n    3,\n\
    \    9,\n    5,\n    121,\n    4,\n    121,\n    3,\n    653,\n    5,\n    121,\n\
    \    4,\n    121,\n    34,\n    9,\n    2,\n    653,\n    4,\n    121,\n    34,\n\
    \    9,\n    5,\n    121,\n    4,\n    121,\n    34,\n    653,\n    5,\n    121,\n\
    \    4,\n    121,\n    653,\n    653,\n    5,\n    121,\n    3,\n    121,\n  \
    \  34,\n    9,\n    2,\n    653,\n    3,\n    121,\n    34,\n    9,\n    5,\n\
    \    121,\n    3,\n    121,\n    34,\n    653,\n    5,\n    121,\n    3,\n   \
    \ 121,\n    653,\n    653,\n    5,\n    121,\n    34,\n    121,\n    653,\n  \
    \  653,\n    5,\n    121\n}\nstack traceback:\n\t/tmp/tmpz5pc1se7.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.050 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      elseif l1[i1] < l2[j1]\
    \ then\n        j1 = j1 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n\
    \    j2 = j2 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmq0nyjyl.lua:16:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpmq0nyjyl.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmq0nyjyl.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    if l3[v] then return end\n    l3[v] = true\n\
    \  end\n  for _, v in ipairs(l2) do\n    if not l3[v] then return end\n  end\n\
    \  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zu20nbk.lua:21:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp_zu20nbk.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = e1\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e2] == nil then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    else\n      common[e1] = common[e1]\n      i1 =\
    \ i1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_604jto.lua:33:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmp2_604jto.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      elseif l1[i1] < l2[j1]\
    \ then\n        j1 = j1 + 1\n      else\n        i1 = i1 + 1\n      end\n    end\n\
    \    j1 = j1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in pairs(l1) do\n    if l3[v] then return nil end\n    l3[v] = true\n\
    \  end\n  for _, v in pairs(l2) do\n    if l3[v] then return nil end\n    l3[v]\
    \ = true\n  end\n  return l3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22z1pfc3.lua:22:\
    \ expected: {1, 5, 653}\nactual: nil\nstack traceback:\n\t/tmp/tmp22z1pfc3.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 do\n    local found = false\n    for j\
    \ = 1, #l2 do\n      if l1[i] == l2[j] then\n        table.insert(common, i)\n\
    \        found = true\n        break\n      end\n    end\n    if not found then\n\
    \      break\n    end\n    i = i + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pls9i2_.lua:29:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp2pls9i2_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        i1 = i1 + 1\n        j1 = j1 + 1\n      else\n        j2 =\
    \ j2 + 1\n      end\n    end\n    i2 = i2 + 1\n  end\n  return common\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750339
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 and i <= #l2 do\n    if l1[i] == l2[i]\
    \ then\n      table.insert(common, l1[i])\n      i = i + 1\n    else\n      i\
    \ = i + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h73vu09.lua:23:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp4h73vu09.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  local l4 = {}\n  for\
    \ _, v in ipairs(l3) do\n    table.insert(l4, v)\n  end\n  return l4\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzb9xfcbs.lua:25:\
    \ expected: {1, 5, 653}\nactual: {1, 1, 2, 3, 4, 5, 5, 5, 7, 9, 34, 121, 653,\
    \ 653}\nstack traceback:\n\t/tmp/tmpzb9xfcbs.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    local e1 = l1[i1]\n    local e2 = l2[j1]\n    if e1 == e2 then\n      common[e1]\
    \ = true\n      j1 = j1 + 1\n    elseif common[e1] then\n      common[e2] = true\n\
    \      i1 = i1 + 1\n    else\n      common[e1] = true\n      j1 = j1 + 1\n   \
    \   common[e2] = true\n      i2 = i2 + 1\n    end\n  end\n  return common\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdnp_7ale.lua:17:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpdnp_7ale.lua:17: in local 'candidate'\n\
    \t/tmp/tmpdnp_7ale.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 and i <= #l2 do\n    if l1[i] == l2[i]\
    \ then\n      table.insert(common, l1[i])\n      i = i + 1\n    else\n      i\
    \ = i + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h73vu09.lua:23:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp4h73vu09.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    while j1 <= j2 do\n      if l1[i1] == l2[j1] then\n        table.insert(common,\
    \ l1[i1])\n        j1 = j1 + 1\n      else\n        j2 = j2 + 1\n      end\n \
    \   end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        common[#common+1]\
    \ = l1[i1]\n        i1, i2 = i3, i3 + 1\n      else\n        i3 = i3 + 1\n   \
    \   end\n    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qz1mcyc.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp9qz1mcyc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i = 1\n  while i <= #l1 and i <= #l2 do\n    if l1[i] == l2[i]\
    \ then\n      table.insert(common, l1[i])\n      i = i + 1\n    else\n      i\
    \ = i + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4h73vu09.lua:23:\
    \ expected: {1, 5, 653}\nactual: {}\nstack traceback:\n\t/tmp/tmp4h73vu09.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = common[e1] or\
    \ e1\n      i1 = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n\
    \      common[e1] = e2\n      i1 = i1 + 1\n    else\n      i2 = i2 + 1\n    end\n\
    \  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpminovcy4.lua:29:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmpminovcy4.lua:29: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] =\
    \ true\n      i2 = i2 + 1\n    else\n      common[e1] = true\n      i1 = i1 +\
    \ 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk0j0uw4.lua:30:\
    \ expected: {1, 5, 653}\nactual: {true, true, true, true, true, 34=true, 653=true}\n\
    stack traceback:\n\t/tmp/tmpmk0j0uw4.lua:30: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n\
    \    local e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = e1\n      i1\
    \ = i1 + 1\n      i2 = i2 + 1\n    elseif common[e1] == nil then\n      common[e1]\
    \ = e2\n      i1 = i1 + 1\n    elseif common[e2] == nil then\n      common[e2]\
    \ = e1\n      i2 = i2 + 1\n    elseif common[e1] < common[e2] then\n      common[e1]\
    \ = e2\n      i2 = i2 + 1\n    else\n      common[e2] = e1\n      i1 = i1 + 1\n\
    \    end\n  end\n  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpljrn_cpq.lua:36:\
    \ expected: {1, 5, 653}\nactual: {121, 121, 121, 121, 121, 34=121, 653=121}\n\
    stack traceback:\n\t/tmp/tmpljrn_cpq.lua:36: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: -1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local i1, i2\
    \ = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while i1 <= i2 do\n\
    \    local e1 = l1[i1]\n    local e2 = l2[j2]\n    if e1 == e2 then\n      common[#common+1]\
    \ = e1\n      j2 = j2 + 1\n    elseif e1 < e2 then\n      i1 = i1 + 1\n    else\n\
    \      j1 = j1 + 1\n    end\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821944
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1\
    \ == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1,\
    \ 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8},\
    \ {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2,\
    \ 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bwuquii.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp8bwuquii.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      local i4 = i3 + 1\n      while i4 <= i2 do\n   \
    \     common[l2[i4]] = l2[i4]\n        i4 = i4 + 1\n      end\n      i3 = i3 +\
    \ 1\n    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi_ryt9o_.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1, 5=5, 9=9, 121=121, 653=653}\nstack traceback:\n\
    \t/tmp/tmpi_ryt9o_.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local l3 = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        l3[#l3 + 1] = v\n      end\n    end\n  end\n  return l3\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
    \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653,\
    \ 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2,\
    \ 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n  \
    \  lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70vd5ohx.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmp70vd5ohx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local i3 = i1 + 1\n\
    \    while i3 <= i2 do\n      if l1[i1] == l2[i3] then\n        common[#common+1]\
    \ = l1[i1]\n        i1, i2 = i3, i3 + 1\n      else\n        i3 = i3 + 1\n   \
    \   end\n    end\n    i1 = i1 + 1\n  end\n  return common\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = common\n    lu.assertEquals(candidate({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qz1mcyc.lua:27:\
    \ expected: {1, 5, 653}\nactual: {1}\nstack traceback:\n\t/tmp/tmp9qz1mcyc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821939
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v1 == v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n\
    \  return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2,\
    \ 5}, {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpehuvv8c7.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpehuvv8c7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
- exit_code: 1
  program: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
    \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
    \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n  local common\
    \ = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if\
    \ v == v2 then\n        table.insert(common, v)\n      end\n    end\n  end\n \
    \ return common\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = common\n    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5},\
    \ {5, 7, 1, 5, 9, 653, 121}), {1, 5, 653})\n    lu.assertEquals(candidate({5,\
    \ 3, 2, 8}, {3, 2}), {2, 3})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {3,\
    \ 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 8}, {}), {})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiyhptkhl.lua:21:\
    \ expected: {1, 5, 653}\nactual: {1, 653, 5, 5}\nstack traceback:\n\t/tmp/tmpiyhptkhl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750334
