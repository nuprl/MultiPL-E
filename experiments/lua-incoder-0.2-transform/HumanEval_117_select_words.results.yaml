language: lua
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local words = {}\n  local\
    \ i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n)\
    \ then\n      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + 1\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf29t3uqi.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpf29t3uqi.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    local c = s[i]\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n      i = i + 1\n    elseif c == 'n'\
    \ then\n      if i == #s then\n        break\n      else\n        words[i] = words[i]\
    \ .. s[i]\n        i = i + 1\n      end\n    elseif c == 's' then\n      if i\
    \ == #s then\n        break\n      else\n        words[i] = words[i] .. s[i]\n\
    \        i = i + 1\n      end\n    elseif c == 't' then\n      if i == #s then\n\
    \        break\n      else\n        words[i] = words[i] .. s[i]\n        i = i\
    \ + 1\n      end\n    elseif c == 'h' then\n      if i == #s then\n        break\n\
    \      else\n        words[i] = words[i] .. s[i]\n        i = i + 1\n      end\n\
    \    elseif c == 'l' then\n      if i == #s then\n        break\n      else\n\
    \        words[i] = words[i] .. s[i]\n        i = i + 1\n      end\n    elseif\
    \ c == 'w' then\n      if i == #s then\n        break\n      else\n        words[i]\
    \ = words[i] .. s[i]\n        i = i + 1\n      end\n    elseif c == 'd' then\n\
    \      if i == #s then\n        break\n      else\n        words[i] = words[i]\
    \ .. s[i]\n        i = i + 1\n      end\n    elseif c == 'p' then\n      if i\
    \ == #s then\n        break\n      else\n        words[i] = words[i] .. s[i]\n\
    \        i = i + 1\n      end\n    elseif c == 'y' then\n      if i == #s then\n\
    \        break\n      else\n        words[i] = words[i] .. s[i]\n        i = i\
    \ + 1\n      end\n    elseif c == 'g' then\n      if i == #s then\n        break\n\
    \      else\n        words[i] = words[i] .. s[i]\n        i = i + 1\n      end\n\
    \    elseif c == 'b' then\n      if i == #s then\n        break\n      else\n\
    \        words[i] = words[i] .. s[i]\n        i = i + 1\n      end\n    elseif\
    \ c == 'v' then\n      if i == #s then\n        break\n      else\n        words[i]\
    \ = words[i] .. s[i]\n        i = i + 1\n      end\n    elseif c == 'm' then\n\
    \      if i == #s then\n        break\n      else\n        words[i] = words[i]\
    \ .. s[i]\n        i = i + 1\n      end\n    elseif c == 'r' then\n      if i\
    \ == #s then\n        break\n      else\n        words[i] = words[i] .. s[i]\n\
    \        i = i + 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpusmlf7a9.lua:136: ''end'' expected (to close ''if'' at line
    117) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i < #s\
    \ do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n\
    \            i = i + 1\n        elseif c == 's' then\n            i = i + 1\n\
    \        elseif c == 't' then\n            i = i + 1\n        elseif c == 'h'\
    \ then\n            i = i + 1\n        elseif c == 'l' then\n            i = i\
    \ + 1\n        elseif c == 'd' then\n            i = i + 1\n        elseif c ==\
    \ 'n' then\n            i = i + 1\n        elseif c == 'c' then\n            i\
    \ = i + 1\n        elseif c == 'r' then\n            i = i + 1\n        elseif\
    \ c == 'm' then\n            i = i + 1\n        elseif c == 'a' then\n       \
    \     i = i + 1\n        elseif c == 'f' then\n            i = i + 1\n       \
    \ elseif c == 'p' then\n            i = i + 1\n        elseif c == 'v' then\n\
    \            i = i + 1\n        elseif c == 'b' then\n            i = i + 1\n\
    \        elseif c == 'g' then\n            i = i + 1\n        elseif c == 'j'\
    \ then\n            i = i + 1\n        elseif c == 'k' then\n            i = i\
    \ + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif c ==\
    \ 'z' then\n            i = i + 1\n        elseif c == 'x' then\n            i\
    \ = i + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif\
    \ c == 'z' then\n            i = i + 1\n        elseif c == 'y' then\n       \
    \     i = i + 1\n        elseif c == 'k' then\n            i = i + 1\n       \
    \ elseif c == 'j' then\n            i = i + 1\n        elseif c == 'g' then\n\
    \            i = i + 1\n        elseif c == 'b' then\n            i = i + 1\n\
    \        elseif c == 'f' then\n            i = i + 1\n        elseif c == 'v'\
    \ then\n            i = i + 1\n        elseif c == 'p' then\n            i = i\
    \ + 1\n        elseif c == 'm' then\n            i = i + 1\n        elseif c ==\
    \ 'r' then\n            i = i + 1\n        elseif c == 's' then\n            i\
    \ = i + 1\n        elseif c == 't' then\n            i = i + 1\n        elseif\
    \ c == 'h' then\n            i = i + 1\n        elseif c == 'l' then\n       \
    \     i = i + 1\n        elseif c == 'd' then\n            i = i + 1\n       \
    \ elseif c == 'n' then\n            i = i + 1\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxhg0fkdk.lua:115: ''end'' expected (to close ''if'' at line
    22) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == '' then\n    return {}\n  end\n\
    \  -- Recursive case\n  local words = select_words(s, n - 1)\n  -- Return words\
    \ that contain the nth consonant\n  for _, word in pairs(words) do\n    if string.find(word,\
    \ string.sub(s, 1, n)) then\n      table.insert(words, word)\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6hyybwgw.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\
    \t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23:\
    \ in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\
    \t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23:\
    \ in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\
    \t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23:\
    \ in function 'select_words'\n\t/tmp/tmp6hyybwgw.lua:23: in function 'select_words'\n\
    \t...\n\nRan 1 tests in 0.340 seconds, 0 successes, 1 error\n"
  timestamp: 1659750576
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i) ~= ' ' then\n      table.insert(words, string.sub(s,i,i))\n\
    \    end\n    i = i + 1\n  end\n  if #words == n then\n    return words\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pp7o_39.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6pp7o_39.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal words = {}\n\t\n\tif\
    \ s == \"\" then\n\t\treturn words\n\tend\n\t\n\tlocal i = 0\n\twhile i <= #s\
    \ do\n\t\tlocal c = s[i]\n\t\t\n\t\tif c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 's' then\n\t\t\ti = i + 1\n\t\telseif c == 'h' or c ==\
    \ 'd' or c == 'l' or c == 'm' or c == 'n' or c == 'r' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'w' then\n\t\t\ti = i + 1\n\t\telseif c == 't' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'b' then\n\t\t\ti = i + 1\n\t\telseif c == 'c' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'f' then\n\t\t\ti = i + 1\n\t\telseif c == 'g'\
    \ or c == 'p' or c == 'v' or c == 'y' then\n\t\t\ti = i + 1\n\t\telseif c == 'k'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'j' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'q' then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'x' then\n\t\t\ti = i + 1\n\t\telseif c == 'q' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\telseif c == 'x' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\telseif c == 'x'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'x' then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'x' then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'x' then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'x' then\n\t\t\ti = i + 1\n\t\telseif c == 'z'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'x' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'z' then\n\t\t\ti = i + 1\n\t\telseif c == 'x' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'z' \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzmjylo4w.lua:94: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + n\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5meus3en.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp5meus3en.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      words[#words + 1] =\
    \ {}\n    else\n      if string.sub(s,i,i) == \" \" then\n        words[#words\
    \ + 1] = {}\n      else\n        if string.sub(s,i,i) == \" \" then\n        \
    \  words[#words + 1] = {}\n        else\n          if string.sub(s,i,i) == \"\
    \ \" then\n            words[#words + 1] = {}\n          else\n            if\
    \ string.sub(s,i,i) == \" \" then\n              words[#words + 1] = {}\n    \
    \        else\n              if string.sub(s,i,i) == \" \" then\n            \
    \    words[#words + 1] = {}\n              else\n                if string.sub(s,i,i)\
    \ == \" \" then\n                  words[#words + 1] = {}\n                else\n\
    \                  if string.sub(s,i,i) == \" \" then\n                    words[#words\
    \ + 1] = {}\n                  else\n                    if string.sub(s,i,i)\
    \ == \" \" then\n                      words[#words + 1] = {}\n              \
    \      else\n                      if string.sub(s,i,i) == \" \" then\n      \
    \                  words[#words + 1] = {}\n                      else\n      \
    \                  if string.sub(s,i,i) == \" \" then\n                      \
    \    words[#words + 1] = {}\n                        else\n                  \
    \        if string.sub(s,i,i) == \" \" then\n                            words[#words\
    \ + 1] = {}\n                          else\n                            if string.sub(s,i,i)\
    \ == \" \" then\n                              words[#words + 1] = {}\n      \
    \                      else\n                              if string.sub(s,i,i)\
    \ == \" \" then\n                                words[#words + 1] = {}\n    \
    \                          else\n                                if string.sub(s,i,i)\
    \ == \" \" then\n                                  words[#words + 1] = {}\n  \
    \                              else\n                                  if string.sub(s,i,i)\
    \ == \" \" then\n                                    words[#words + 1] = {}\n\
    \                                  else\n                                    if\
    \ string.sub(s,i,i) == \" \" then\n                                      words[#words\
    \ + 1] = {}\n                                    else\n                      \
    \                if string.sub(s,i,i) == \" \" then\n                        \
    \                words[#words + 1] = {}\n                                    \
    \  else\n                                        if string.sub(s,i,i) == \" \"\
    \ then\n                                          words[#words + 1] = {}\n   \
    \                                     else\n                                 \
    \         if string.sub(s,i,i) == \" \" then\n                               \
    \             words[#words + 1] = {}\n                                       \
    \   else\n                                            if string.sub(s,i,i) ==\
    \ \" \" then\n                                              words[#words + 1]\
    \ = {}\n                                            else\n                   \
    \                           if \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp56mpjw1v.lua:85: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here.\n\tlocal words = {}\n\tlocal\
    \ i = 0\n\twhile i <= #s do\n\t\tif string.sub(s,i,i+n) == string.sub(s,i,i+n)\
    \ then\n\t\t\ttable.insert(words, string.sub(s,i,i+n))\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8t7gl2r.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpi8t7gl2r.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif\
    \ c == 's' then\n      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n   \
    \     i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i + 1\n\
    \      end\n    elseif c == 'd' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'n' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'r' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'r' do\n        i = i + 1\n      end\n    elseif c == 'm' then\n      i =\
    \ i + 1\n      while i <= #s and s[i] ~= 'm' do\n        i = i + 1\n      end\n\
    \    elseif c == 'a' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'a'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'e' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'e' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'i' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'i' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'o' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'o' do\n        i = i + 1\n      end\n    elseif c == 'u'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'u' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpob7w8mnh.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    else\n      if #words == n then\n        table.insert(words,\
    \ s)\n      end\n      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01zow1rk.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp01zow1rk.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while true do\n\
    \    local word = s:sub(1, index)\n    if word ~= '' then\n      index = index\
    \ + 1\n      if word:sub(1, n) == word then\n        table.insert(words, word)\n\
    \      end\n    end\n    if index > #s then\n      break\n    end\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfwkd2_q.lua:38:\
    \ expected: {\"little\"}\nactual: {\"M\", \"Ma\", \"Mar\", \"Mary\"}\nstack traceback:\n\
    \t/tmp/tmpxfwkd2_q.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s do\n        c = s[i]\n        if c == 'a' or c == 'e' or c\
    \ == 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n        elseif c ==\
    \ 'y' then\n          i = i + 1\n        else\n          table.insert(words, s)\n\
    \          break\n        end\n      end\n    else\n      table.insert(words,\
    \ s)\n      break\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk4lvony.lua:48:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little lamb\"}\nstack traceback:\n\
    \t/tmp/tmpxk4lvony.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then\n    return {}\n  end\n\
    \  -- Base case\n  if n == 0 then\n    return { s }\n  end\n  -- Recursive case\n\
    \  local words = select_words(s, n - 1)\n  for i = 1, #words do\n    local word\
    \ = words[i]\n    for j = 1, #s do\n      if string.sub(s,j,j) == word then\n\
    \        table.insert(words, word)\n      end\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe83588j.lua:42:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little lamb\"}\nstack traceback:\n\
    \t/tmp/tmpbe83588j.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  if s ==\
    \ \"\" then\n    return {}\n  end\n  local count = 0\n  for i = 1, #s do\n   \
    \ if string.sub(s,i,i) == \" \" then\n      count = count + 1\n      if count\
    \ == n then\n        table.insert(result, string.sub(s,1,i))\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtkzxz_9.lua:38:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little \"}\nstack traceback:\n\
    \t/tmp/tmpwtkzxz_9.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    else\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmmo7v_m9.lua:97: ''end'' expected (to close ''if'' at line
    21) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i < #s do\n    if string.sub(s,i,i) == \" \" then\n      i = i\
    \ + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n     \
    \ i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfncr0nur.lua:25: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  local i = 0\n\
    \  while i <= #s do\n    if string.sub(s,i,i) ~= \" \" then\n      if string.sub(s,i,i)\
    \ ~= \".\" then\n        if string.sub(s,i,i) ~= \"!\" then\n          if string.sub(s,i,i)\
    \ ~= \",\" then\n            if string.sub(s,i,i) ~= \"?\" then\n            \
    \  if string.sub(s,i,i) ~= \":\" then\n                if string.sub(s,i,i) ~=\
    \ \";\" then\n                  if string.sub(s,i,i) ~= \":\" then\n         \
    \           if string.sub(s,i,i) ~= \";\" then\n                      if string.sub(s,i,i)\
    \ ~= \".\" then\n                        if string.sub(s,i,i) ~= \",\" then\n\
    \                          if string.sub(s,i,i) ~= \"?\" then\n              \
    \              if string.sub(s,i,i) ~= \":\" then\n                          \
    \    if string.sub(s,i,i) ~= \";\" then\n                                if string.sub(s,i,i)\
    \ ~= \":\" then\n                                 if string.sub(s,i,i) ~= \";\"\
    \ then\n                                   if string.sub(s,i,i) ~= \".\" then\n\
    \                                    if string.sub(s,i,i) ~= \",\" then\n    \
    \                                  if string.sub(s,i,i) ~= \"?\" then\n      \
    \                                  if string.sub(s,i,i) ~= \":\" then\n      \
    \                                   if string.sub(s,i,i) ~= \";\" then\n     \
    \                                      if string.sub(s,i,i) ~= \":\" then\n  \
    \                                           if string.sub(s,i,i) ~= \";\" then\n\
    \                                               if string.sub(s,i,i) ~= \".\"\
    \ then\n                                                 if string.sub(s,i,i)\
    \ ~= \",\" then\n                                                   if string.sub(s,i,i)\
    \ ~= \"?\" then\n                                                     if string.sub(s,i,i)\
    \ ~= \":\" then\n                                                       if string.sub(s,i,i)\
    \ ~= \";\" then\n                                                         words[#words\
    \ + 1] = string.sub(s,i,i)\n                                                 \
    \      end\n                                                     end\n       \
    \                                            end\n                           \
    \                      end\n                                               end\n\
    \                                             end\n                          \
    \                 end\n                                         end\n        \
    \                               end\n                                     end\n\
    \                                   end\n                                 end\n\
    \                               end\n                             end\n      \
    \                     end\n                         end\n                    \
    \   end\n                     end\n                   end\n                 end\n\
    \               end\n             end\n           end\n         end\n       end\n\
    \     end\n   end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbbpq7eat.lua:93: ''end'' expected (to close ''while'' at line
    21) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s\
    \ do\n        if string.sub(s, i, i+n) == string.sub(s,1,n) then\n           \
    \ table.insert(words, string.sub(s,1,n))\n        end\n        i = i + 1\n   \
    \ end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pptk5b4.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_pptk5b4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  local i = 0\n\
    \  while i < #s do\n    if string.sub(s, i, i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n      i = i + n\n    end\n  \
    \  i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx48a135.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \" had \", \"a lit\", \"tle l\",\
    \ \"amb\"}\nstack traceback:\n\t/tmp/tmpwx48a135.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n    elseif c == 'n' then\n      i = i + 1\n     \
    \ while i < #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n    elseif c\
    \ == 's' then\n      i = i + 1\n      while i < #s and s[i] ~= 's' do\n      \
    \  i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'w' do\n        i = i + 1\n \
    \     end\n    elseif c == 'd' then\n      i = i + 1\n      while i < #s and s[i]\
    \ ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'p' then\n      i =\
    \ i + 1\n      while i < #s and s[i] ~= 'p' do\n        i = i + 1\n      end\n\
    \    elseif c == 'y' then\n      i = i + 1\n      while i < #s and s[i] ~= 'y'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'z' then\n      i = i + 1\n\
    \      while i < #s and s[i] ~= 'z' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'a' then\n      i = i + 1\n      while i < #s and s[i] ~= 'a' do\n    \
    \    i = i + 1\n      end\n    elseif c == 'e' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 'e' do\n        i = i + 1\n      end\n    elseif c == 'i'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'i' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'o' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'o' do\n        i = i + 1\n      end\n    elseif c == 'u' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'u' do\n        i = i + 1\n \
    \     end\n    elseif c == 'n' then\n      i = i + 1\n      while i < #\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpalg2vgfu.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local ret = {}\n  local i =\
    \ 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(ret, string.sub(s,i,i+n))\n    end\n    i = i + n\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeedc2mo2.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpeedc2mo2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) ~= '' then\n      table.insert(words,string.sub(s,i,i+n))\n\
    \    end\n    i = i+1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbr146fh7.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpbr146fh7.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        local\
    \ word = string.sub(s,i,i)\n        if string.find(word, '[^aeiou]') then\n  \
    \          table.insert(words, word)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpul2wjabo.lua:31:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"r\",\n    \"y\",\n\
    \    \" \",\n    \"h\",\n    \"d\",\n    \" \",\n    \" \",\n    \"l\",\n    \"\
    t\",\n    \"t\",\n    \"l\",\n    \" \",\n    \"l\",\n    \"m\",\n    \"b\"\n\
    }\nstack traceback:\n\t/tmp/tmpul2wjabo.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniuldaix.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpniuldaix.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local result = {}\n  local index = 1\n  while true do\n\
    \    local word = s:sub(1, index)\n    if word == \"\" then\n      break\n   \
    \ end\n    if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n      index\
    \ = index + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\"\
    , 1, index) ~= nil then\n      index = index + 1\n      continue\n    end\n  \
    \  if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n      index = index\
    \ + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\", 1, index)\
    \ ~= nil then\n      index = index + 1\n      continue\n    end\n    if string.find(word,\
    \ \"[^aeiou]\", 1, index) ~= nil then\n      index = index + 1\n      continue\n\
    \    end\n    if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n     \
    \ index = index + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\"\
    , 1, index) ~= nil then\n      index = index + 1\n      continue\n    end\n  \
    \  if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n      index = index\
    \ + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\", 1, index)\
    \ ~= nil then\n      index = index + 1\n      continue\n    end\n    if string.find(word,\
    \ \"[^aeiou]\", 1, index) ~= nil then\n      index = index + 1\n      continue\n\
    \    end\n    if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n     \
    \ index = index + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\"\
    , 1, index) ~= nil then\n      index = index + 1\n      continue\n    end\n  \
    \  if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n      index = index\
    \ + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\", 1, index)\
    \ ~= nil then\n      index = index + 1\n      continue\n    end\n    if string.find(word,\
    \ \"[^aeiou]\", 1, index) ~= nil then\n      index = index + 1\n      continue\n\
    \    end\n    if string.find(word, \"[^aeiou]\", 1, index) ~= nil then\n     \
    \ index = index + 1\n      continue\n    end\n    if string.find(word, \"[^aeiou]\"\
    , 1, index) ~\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk_t9gpiy.lua:28: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local words = string.gmatch(s,\
    \ '%w+') -- match all words in the string\n    for _, word in pairs(words) do\n\
    \        if string.find(word, string.sub(s, 1, n)) then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv1hg7og.lua:20:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpiv1hg7og.lua:20: in local 'candidate'\n\t/tmp/tmpiv1hg7og.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s,i,i+n)\
    \ then\n      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + n\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4n7a99r.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpy4n7a99r.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif\
    \ c == 's' then\n      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n   \
    \     i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i + 1\n\
    \      end\n    elseif c == 'd' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'n' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'l' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'a' then\n      i =\
    \ i + 1\n      while i <= #s and s[i] ~= 'a' do\n        i = i + 1\n      end\n\
    \    elseif c == 'm' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'm'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'p' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'p' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'e' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'e' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'r' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'r' do\n        i = i + 1\n      end\n    elseif c == 'c'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'c' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'h' then\n      i = i + 1\n      while i <=\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx1upcg6u.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      count\
    \ = count + 1\n      if count == n then\n        table.insert(words, string.sub(s,1,i))\n\
    \      end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbm8wxmah.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little \"}\nstack traceback:\n\
    \t/tmp/tmpbm8wxmah.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxufx508a.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpxufx508a.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) ~= '' then\n      table.insert(words,string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7cxr67_6.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmp7cxr67_6.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal words = {}\n\tfor i =\
    \ 1, #s do\n\t\tif string.sub(s,i,i) == \" \" then\n\t\t\twords[#words + 1] =\
    \ \"\"\n\t\telse\n\t\t\tif string.sub(s,i,i) == \" \" then\n\t\t\t\twords[#words\
    \ + 1] = \"\"\n\t\t\telse\n\t\t\t\tif string.sub(s,i,i) == \" \" then\n\t\t\t\t\
    \twords[#words + 1] = \"\"\n\t\t\t\telse\n\t\t\t\t\tlocal consonants = string.gsub(string.sub(s,i,i),\
    \ \"[^aeiouAEIOU]\", \"\")\n\t\t\t\t\tif consonants == n then\n\t\t\t\t\t\twords[#words\
    \ + 1] = string.sub(s,i,i)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjblhj79.lua:44:\
    \ expected: {\"little\"}\nactual: {\"\", \"\", \"\", \"\"}\nstack traceback:\n\
    \t/tmp/tmpfjblhj79.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i <= #s\
    \ do\n        local word = string.sub(s,i,i)\n        if string.find(word, '[^aeiou]')\
    \ then\n            i = i + #word + 1\n        else\n            table.insert(words,\
    \ word)\n        end\n        i = i + 1\n    end\n    if #words == 0 then\n  \
    \      return {}\n    end\n    local j = 0\n    while j < #words do\n        if\
    \ string.find(words[j], '[^aeiou]') then\n            j = j + 1\n        else\n\
    \            j = j + 1\n        end\n    end\n    if j == #words then\n      \
    \  return words\n    end\n    local k = 0\n    while k < #words do\n        if\
    \ string.find(words[k], '[^aeiou]') then\n            k = k + 1\n        else\n\
    \            k = k + 1\n        end\n    end\n    if k == #words then\n      \
    \  return words\n    end\n    local l = 0\n    while l < #words do\n        if\
    \ string.find(words[l], '[^aeiou]') then\n            l = l + 1\n        else\n\
    \            l = l + 1\n        end\n    end\n    if l == #words then\n      \
    \  return words\n    end\n    local m = 0\n    while m < #words do\n        if\
    \ string.find(words[m], '[^aeiou]') then\n            m = m + 1\n        else\n\
    \            m = m + 1\n        end\n    end\n    if m == #words then\n      \
    \  return words\n    end\n    local n = 0\n    while n < #words do\n        if\
    \ string.find(words[n], '[^aeiou]') then\n            n = n + 1\n        else\n\
    \            n = n + 1\n        end\n    end\n    if n == #words then\n      \
    \  return words\n    end\n    local o = 0\n    while o < #words do\n        if\
    \ string.find(words[o], '[^aeiou]') then\n            o = o + 1\n        else\n\
    \            o = o + 1\n        end\n    end\n    if o == #words then\n      \
    \  return words\n    end\n    local p = 0\n    while p < #words do\n        if\
    \ string.find(words[p], '[^aeiou]') then\n            p = p + 1\n        else\n\
    \            p = p + 1\n        end\n    end\n    if p == #words then\n      \
    \  return words\n    end\n    local q = 0\n    while q < #words do\n        if\
    \ string.find(words[q], '[^aeiou]') then\n            q = q + 1\n        else\n\
    \            q = q + 1\n        end\n    end\n    if q == #words then\n      \
    \  return words\n    end\n    local r = 0\n    while r < #words do\n        if\
    \ string.find(words[r], '[^aeiou]\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdm7p5twx.lua:122: unfinished string near ''''[^aeiou]''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i+1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1885a8f0.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmp1885a8f0.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local result = {}\n  local index = 1\n  while true do\n\
    \    local word = string.sub(s,index,index+n)\n    if word == \"\" then\n    \
    \  break\n    end\n    if string.find(word, \"[^aeiou]\") then\n      table.insert(result,\
    \ word)\n    end\n    index = index+n\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa98rplzr.lua:36:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmpa98rplzr.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i < #s do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n\
    \      table.insert(words, string.sub(s,i+1,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3v8zb1y.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmph3v8zb1y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local ret = {}\n  local i = 0\n \
    \ while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n \
    \     table.insert(ret, string.sub(s,i,i+n))\n      i = i + n\n    else\n    \
    \  i = i + 1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk89mazh5.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpk89mazh5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(words,\
    \ string.sub(s,1,i))\n    end\n  end\n  table.sort(words)\n  local count = 0\n\
    \  for i = 1, #words do\n    if string.sub(words[i],1,n) == string.sub(s,1,n)\
    \ then\n      count = count + 1\n    end\n  end\n  if count > n then\n    return\
    \ {}\n  else\n    return words\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxtxsjmv.lua:42:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpwxtxsjmv.lua:42: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local words = {}\n  local\
    \ i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n)\
    \ then\n      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i+1\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuorwd5vw.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpuorwd5vw.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpniuldaix.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpniuldaix.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n    else\n      if #words == n then\n        table.insert(words,\
    \ s)\n      end\n      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_vp62e_.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmps_vp62e_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n     \
    \ while i < #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c\
    \ == 's' then\n      i = i + 1\n      while i < #s and s[i] ~= 's' do\n      \
    \  i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'e' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'e' do\n        i = i + 1\n \
    \     end\n    elseif c == 'd' then\n      i = i + 1\n      while i < #s and s[i]\
    \ ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'l' then\n      i =\
    \ i + 1\n      while i < #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n\
    \    elseif c == 'l' then\n      i = i + 1\n      while i < #s and s[i] ~= 'l'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'p' then\n      i = i + 1\n\
    \      while i < #s and s[i] ~= 'p' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'h' then\n      i = i + 1\n      while i < #s and s[i] ~= 'h' do\n    \
    \    i = i + 1\n      end\n    elseif c == 'w' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 'w' do\n        i = i + 1\n      end\n    elseif c == 'o'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'o' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'r' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'r' do\n        i = i + 1\n      end\n    elseif c == 'a' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'a' do\n        i = i + 1\n \
    \     end\n    elseif c == 'm' then\n      i = i + 1\n      while i < #\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmdsvbbub.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n\
    \    local c = s[i]\n    local j = 1\n    while j <= #c and j + i <= #s do\n \
    \     if c[j] == ' ' then\n        j = j + 1\n      else\n        words[#words\
    \ + 1] = s:sub(i, j + 1)\n        i = j + 1\n      end\n      j = j + 1\n    end\n\
    \    i = i + 1\n  end\n  if #words == n then\n    return words\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpag9iu_iv.lua:23:\
    \ attempt to get length of a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpag9iu_iv.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpag9iu_iv.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i <= #s\
    \ do\n        local word = string.sub(s,i,i)\n        if string.find(word, \"\
    [aeiou]\") then\n            table.insert(words, word)\n        end\n        i\
    \ = i + 1\n    end\n    if #words == n then\n        return words\n    else\n\
    \        return {}\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1kmo4ec.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmph1kmo4ec.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  local i = 0\n\
    \  while i <= #s do\n    if string.sub(s,i,i+n) == \"\" then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i+1\n  end\n  return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvagqkusa.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvagqkusa.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(words, string.sub(s,1,i))\n\
    \    end\n  end\n  if #words == 0 then\n    return {}\n  end\n  local count =\
    \ 0\n  for i = 1, #words do\n    if string.sub(words[i],1,n) == string.sub(s,1,n)\
    \ then\n      count = count + 1\n    end\n  end\n  if count == n then\n    return\
    \ words\n  end\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppahgftoa.lua:43:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmppahgftoa.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local word = string.sub(s, i, i)\n    if string.find(word, '[^aeiou]') then\n\
    \      i = i + 1\n    else\n      if #word == n then\n        table.insert(words,\
    \ word)\n      else\n        i = i + 1\n      end\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxj4xqfp.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpnxj4xqfp.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  for i\
    \ = 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(result,\
    \ string.sub(s,1,i))\n    end\n  end\n  if #result == 0 then\n    return {}\n\
    \  end\n  local count = {}\n  for i = 1, #result do\n    local word = result[i]\n\
    \    if count[word] == nil then\n      count[word] = 1\n    else\n      count[word]\
    \ = count[word] + 1\n    end\n  end\n  local max = 0\n  local maxword = ''\n \
    \ for word, count in pairs(count) do\n    if count > max then\n      max = count\n\
    \      maxword = word\n    end\n  end\n  if max == n then\n    table.insert(result,\
    \ maxword)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqfvfsu3.lua:54:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpoqfvfsu3.lua:54: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplxy3i44h.lua:33: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local result = {}\n  local index = 1\n  while true do\n\
    \    local word = string.sub(s,index,index+n)\n    if word == \"\" then\n    \
    \  break\n    end\n    index = index+n\n    if string.find(word, \"[^aeiou]\"\
    ) then\n      table.insert(result, word)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01xno8tf.lua:36:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmp01xno8tf.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while true do\n\
    \    if index == n then\n      table.insert(words, s)\n      break\n    end\n\
    \    if string.sub(s,index,index+1) ~= ' ' then\n      index = index + 1\n   \
    \   continue\n    end\n    index = index + 1\n    local word = string.sub(s,index,index+1)\n\
    \    if string.find(word, '[^aeiou]') then\n      table.insert(words, word)\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ljgmiyx.lua:28: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == \"\" then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2jew7_2c.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n     \
    \ while i < #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c\
    \ == 's' then\n      i = i + 1\n      while i < #s and s[i] ~= 's' do\n      \
    \  i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'w' do\n        i = i + 1\n \
    \     end\n    elseif c == 'd' then\n      i = i + 1\n      while i < #s and s[i]\
    \ ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'n' then\n      i =\
    \ i + 1\n      while i < #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n\
    \    elseif c == 'r' then\n      i = i + 1\n      while i < #s and s[i] ~= 'r'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'c' then\n      i = i + 1\n\
    \      while i < #s and s[i] ~= 'c' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'm' then\n      i = i + 1\n      while i < #s and s[i] ~= 'm' do\n    \
    \    i = i + 1\n      end\n    elseif c == 'a' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 'a' do\n        i = i + 1\n      end\n    elseif c == 'e'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'e' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'i' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'i' do\n        i = i + 1\n      end\n    elseif c == 'o' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'o' do\n        i = i + 1\n \
    \     end\n    elseif c == 'u' then\n      i = i + 1\n      while i < #\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpphz_68oq.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while true do\n\
    \    local word = s:sub(1, index-1)\n    if word == \"\" then\n      break\n \
    \   end\n    index = index + 1\n    if word:sub(1, n) == word then\n      table.insert(words,\
    \ word)\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqkuv49b.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplqkuv49b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) == ' ' then\n      words[#words + 1] = '' -- add\
    \ an empty string at the end\n    else\n      local count = 0\n      for j = 1,\
    \ #string.sub(s,i,i) do\n        if string.sub(s,i,i)[j] == string.sub(s,i,i)[j]\
    \ then\n          count = count + 1\n        end\n      end\n      if count ==\
    \ n then\n        words[#words + 1] = string.sub(s,i,i)\n      end\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjv_ffim.lua:41:\
    \ expected: {\"little\"}\nactual: {\"\", \"\", \"\", \"\"}\nstack traceback:\n\
    \t/tmp/tmpdjv_ffim.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpswb7gsoh.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  if s ==\
    \ \"\" then\n    return result\n  end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local vowel_count = 0\n\
    \  local consonant_count = 0\n  for i = 1, #s do\n    if vowels[string.sub(s,i,i)]\
    \ then\n      vowel_count = vowel_count + 1\n    elseif consonants[string.sub(s,i,i)]\
    \ then\n      consonant_count = consonant_count + 1\n    end\n  end\n  if vowel_count\
    \ == n and consonant_count == n then\n    local words = string.gsub(s, '[^' ..\
    \ consonants .. ']+', '')\n    local words = string.gsub(words, '[' .. vowels\
    \ .. ']+', '')\n    local words = string.gsub(words, '[' .. consonants .. ']+',\
    \ '')\n    local words = string.gsub(words, '[' .. vowels .. ']+', '')\n    local\
    \ words = string.gsub(words, '[' .. consonants .. ']+', '')\n    local words =\
    \ string.gsub(words, '[' .. vowels .. ']+', '')\n    local words = string.gsub(words,\
    \ '[' .. consonants .. ']+', '')\n    local words = string.gsub(words, '[' ..\
    \ vowels .. ']+', '')\n    local words = string.gsub(words, '[' .. consonants\
    \ .. ']+', '')\n    local words = string.gsub(words, '[' .. vowels .. ']+', '')\n\
    \    local words = string.gsub(words, '[' .. consonants .. ']+', '')\n    local\
    \ words = string.gsub(words, '[' .. vowels .. ']+', '')\n    local words = string.gsub(words,\
    \ '[' .. consonants .. ']+', '')\n    local words = string.gsub(words, '[' ..\
    \ vowels .. ']+', '')\n    local words = string.gsub(words, '[' .. consonants\
    \ .. ']+', '')\n    local words = string.gsub(words, '[' .. vowels .. ']+', '')\n\
    \    local words = string.gsub(words, '[' .. consonants .. ']+', '')\n    local\
    \ words = string.gsub(words, '[' .. vowels .. ']+', '')\n    local words = string.gsub(words,\
    \ '[' .. consonants .. ']+', '')\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpek5y2ok5.lua:68: ''end'' expected (to close ''if'' at line
    34) near <eof>

    '
  stdout: ''
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local result = {}\n  local index = 1\n  while index <=\
    \ #s do\n    if string.sub(s,index,index+n) == string.sub(s,1,n) then\n      table.insert(result,\
    \ string.sub(s,1,n))\n    end\n    index = index + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj31cb22d.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpj31cb22d.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  if s ==\
    \ \"\" then\n    return words\n  end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  for i = 1, #s do\n    if vowels:find(s[i]) then\n      words[#words + 1] =\
    \ s[i]\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptheane9s.lua:25:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmptheane9s.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmptheane9s.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while index <=\
    \ #s do\n    local word = string.sub(s,index,index)\n    if string.find(word,\
    \ '[^aeiouAEIOU]') then\n      index = index + 1\n      continue\n    end\n  \
    \  index = index + 1\n    if string.find(word, '^' .. string.sub(word, 1, n) ..\
    \ '$') then\n      table.insert(words, word)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy2g_nqx3.lua:25: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\
    \tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\
    \tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal\
    \ words = {}\n\tlocal words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\t\
    local words = string.gmatch(s, '%w+')\n\tlocal words = {}\n\tlocal words = string.gmatch(s,\
    \ '%w+')\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaaxdrlqu.lua:96: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpswb7gsoh.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  if s ==\
    \ \"\" then\n    return words\n  end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  for i = 1, #s do\n    if\
    \ vowels:contains(s[i]) then\n      words[#words + 1] = s[i]\n    elseif consonants:contains(s[i])\
    \ then\n      words[#words + 1] = s[i]\n    end\n  end\n  if #words == n then\n\
    \    return words\n  end\n  return select_words(s, n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxtc95447.lua:26:\
    \ attempt to call a nil value (method 'contains')\nstack traceback:\n\t/tmp/tmpxtc95447.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpxtc95447.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i+1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1885a8f0.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmp1885a8f0.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s\
    \ do\n        local word = s:sub(i, i)\n        if select_word(word, n) then\n\
    \            table.insert(words, word)\n        end\n        i = i + 1\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwtjp5xc.lua:22:\
    \ attempt to call a nil value (global 'select_word')\nstack traceback:\n\t/tmp/tmpxwtjp5xc.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpxwtjp5xc.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while index <=\
    \ #s do\n    if string.sub(s, index, index+n) == string.sub(s, 'a', 'z') then\n\
    \      table.insert(words, string.sub(s, 'a', 'z'))\n    end\n    index = index\
    \ + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprrf1pbz3.lua:21:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmprrf1pbz3.lua:21: in local 'candidate'\n\t/tmp/tmprrf1pbz3.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    local count = 0\n    for c in string.gmatch(w, '[%S]+') do\n      count =\
    \ count + 1\n      if string.sub(c, 1, 1) == c then\n        count = count - 1\n\
    \      end\n      if count == n then\n        table.insert(words, w)\n      end\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sahy9sa.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_sahy9sa.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == ' ' then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n\
    \  if #words == 0 then\n    return {}\n  end\n  local count = 0\n  local word\n\
    \  for word in words do\n    if string.sub(word,1,n) == string.sub(s,1,n) then\n\
    \      count = count + 1\n    end\n  end\n  if count == n then\n    return words\n\
    \  end\n  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj74i05rn.lua:29:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmpj74i05rn.lua:29: in local 'candidate'\n\t/tmp/tmpj74i05rn.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i < #s\
    \ do\n        if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n           \
    \ table.insert(words, string.sub(s,i,i+n))\n        end\n        i = i + 1\n \
    \   end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpod7nj32b.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpod7nj32b.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug_umvy8.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpug_umvy8.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(words,\
    \ string.sub(s,i+1,i+n))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_vd5qjc.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpc_vd5qjc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n\
    \      table.insert(words, string.sub(s,i+1,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptds524kc.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmptds524kc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == ' ' then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n\
    \  if #words == 0 then\n    return {}\n  end\n  local counts = {}\n  for i = 1,\
    \ #words do\n    local word = words[i]\n    counts[word] = counts[word] or 0\n\
    \    counts[word] = counts[word] + 1\n  end\n  local max = 0\n  for word, count\
    \ in pairs(counts) do\n    if count > max then\n      max = count\n    end\n \
    \ end\n  if max <= n then\n    return words\n  end\n  local words = {}\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(words,\
    \ string.sub(s,1,i))\n    end\n  end\n  local counts = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    counts[word] = counts[word] or 0\n    counts[word]\
    \ = counts[word] + 1\n  end\n  local max = 0\n  for word, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n    end\n  end\n  if max <=\
    \ n then\n    return words\n  end\n  local words = {}\n  for i = 1, #s do\n  \
    \  if string.sub(s,i,i) == ' ' then\n      table.insert(words, string.sub(s,1,i))\n\
    \    end\n  end\n  local counts = {}\n  for i = 1, #words do\n    local word =\
    \ words[i]\n    counts[word] = counts[word] or 0\n    counts[word] = counts[word]\
    \ + 1\n  end\n  local max = 0\n  for word, count in pairs(counts) do\n    if count\
    \ > max then\n      max = count\n    end\n  end\n  if max <= n then\n    return\
    \ words\n  end\n  local words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == ' ' then\n      table.insert(words, string.sub(s,1,i))\n    end\n  end\n\
    \  local counts = {}\n  for i = 1, #words do\n    local word = words[i]\n    counts[word]\
    \ = counts[word] or 0\n    counts[word] = counts[word] + 1\n  end\n  local max\
    \ = 0\n  for word, count in pairs(counts) do\n    if count > max then\n      max\
    \ = count\n    end\n  end\n  if max <= n then\n    return words\n  end\n  local\
    \ words = {}\n  for i = 1, #s do\n    if string.sub(s,i,i) == ' \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwsitwy17.lua:107: unfinished string near '''' ''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Your code here\n\tlocal words = {}\n\tlocal i = 0\n\
    \twhile i <= #s do\n\t\tif string.sub(s, i, i+n) == string.sub(s, 1, n) then\n\
    \t\t\ttable.insert(words, string.sub(s, 1, n))\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputw6w9x2.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmputw6w9x2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif\
    \ c == 's' then\n      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n   \
    \     i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'l' or\
    \ c == 'o' or c == 'u' then\n      i = i + 1\n      while i <= #s and s[i] ~=\
    \ 'l' do\n        i = i + 1\n      end\n    elseif c == 'd' then\n      i = i\
    \ + 1\n      while i <= #s and s[i] ~= 'd' do\n        i = i + 1\n      end\n\
    \    elseif c == 'e' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'e'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'c' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'c' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'm' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'm' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'a' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'a' do\n        i = i + 1\n      end\n    elseif c == 'b'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'b' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'p' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'p' do\n        i = i + 1\n      end\n    elseif c == 'f' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'f' do\n        i = i + 1\n\
    \      end\n    elseif c == 'v' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'v' do\n        i = i + 1\n      end\n    elseif c == 'g' then\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp153_b7zb.lua:114: ''end'' expected (to close ''if'' at line
    22) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local char = string.sub(s,i,i)\n    if char == 'a' or char == 'e' or char\
    \ == 'i' or char == 'o' or char == 'u' then\n      i = i + 1\n    elseif char\
    \ == 'y' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'a'\
    \ do\n        i = i + 1\n      end\n    elseif char == 's' then\n      i = i +\
    \ 1\n      while i <= #s and string.sub(s,i,i) ~= 'e' do\n        i = i + 1\n\
    \      end\n    elseif char == 'h' then\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'i' do\n        i = i + 1\n      end\n    elseif char\
    \ == 'l' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'o'\
    \ do\n        i = i + 1\n      end\n    elseif char == 'w' then\n      i = i +\
    \ 1\n      while i <= #s and string.sub(s,i,i) ~= 'u' do\n        i = i + 1\n\
    \      end\n    elseif char == 'c' then\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'a' do\n        i = i + 1\n      end\n      i = i +\
    \ 1\n      while i <= #s and string.sub(s,i,i) ~= 'e' do\n        i = i + 1\n\
    \      end\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'i'\
    \ do\n        i = i + 1\n      end\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~= 'o' do\n        i = i + 1\n      end\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'u' do\n        i = i + 1\n      end\n    elseif char\
    \ == 'd' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'a'\
    \ do\n        i = i + 1\n      end\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~= 'e' do\n        i = i + 1\n      end\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'i' do\n        i = i + 1\n      end\n      i = i +\
    \ 1\n      while i <= #s and string.sub(s,i,i) ~= 'o' do\n        i = i + 1\n\
    \      end\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'u'\
    \ do\n        i = i + 1\n      end\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjsr0t18n.lua:93: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local ret = {}\n  local s =\
    \ s:lower()\n  if s == \"\" then\n    return ret\n  end\n  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  for i = 1, #s do\n    if vowels:find(s[i]) ~= nil then\n\
    \      ret[#ret + 1] = s[i]\n    end\n  end\n  if #ret > n then\n    return ret\n\
    \  end\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcvik7zr3.lua:26:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpcvik7zr3.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmpcvik7zr3.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for w in string.gmatch(s, '%a')\
    \ do\n        local count = 0\n        for c in w do\n            if string.sub(s,\
    \ 1, 1) == c then\n                count = count + 1\n            end\n      \
    \  end\n        if count == n then\n            table.insert(words, w)\n     \
    \   end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmputwoll0s.lua:21:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmputwoll0s.lua:21: in local 'candidate'\n\t/tmp/tmputwoll0s.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i <= #s\
    \ do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n\
    \            i = i + 1\n        elseif c == 's' then\n            i = i + 1\n\
    \        elseif c == 'h' then\n            i = i + 1\n        elseif c == 'l'\
    \ then\n            i = i + 1\n        elseif c == 'd' then\n            i = i\
    \ + 1\n        elseif c == 'n' then\n            i = i + 1\n        elseif c ==\
    \ 'w' then\n            i = i + 1\n        elseif c == 't' then\n            i\
    \ = i + 1\n        elseif c == 'r' then\n            i = i + 1\n        elseif\
    \ c == 'f' then\n            i = i + 1\n        elseif c == 'v' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'x' then\n            i = i + 1\n        elseif c == 'z' then\n\
    \            i = i + 1\n        elseif c == 'y' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'y'\
    \ then\n            i = i + 1\n        elseif c == 'z' then\n            i = i\
    \ + 1\n        elseif c == 'y' then\n            i = i + 1\n        elseif c ==\
    \ 'z' then\n            i = i + 1\n        elseif c == 'y' then\n            i\
    \ = i + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif\
    \ c == 'y' then\n            i = i + 1\n        elseif c == 'z' then\n       \
    \     i = i + 1\n        elseif c == 'y' then\n            i = i + 1\n       \
    \ elseif c == 'z' then\n            i = i + 1\n        elseif c == 'y' then\n\
    \            i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n\
    \        elseif c == 'y' then\n            i = i + 1\n        elseif c == 'z'\
    \ then\n            i = i + 1\n        elseif c == 'y' then\n            i = i\
    \ + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif c ==\
    \ 'y' then\n            i = i + 1\n        elseif c == 'z' then\n            i\
    \ = i + 1\n        elseif c == 'y' then\n            i = i + 1\n        elseif\
    \ c == 'z' then\n            i = i + 1\n        elseif c == 'y' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'y' then\n            i = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6dacgfw3.lua:102: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i <= #s\
    \ do\n        if string.sub(s,i,i) == ' ' then\n            i = i + 1\n      \
    \  else\n            local consonants = string.sub(s,i,i)\n            if consonants\
    \ == consonants then\n                i = i + 1\n            else\n          \
    \      table.insert(words, consonants)\n            end\n        end\n    end\n\
    \    if #words == n then\n        return words\n    else\n        return {}\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnfkj134.lua:42:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpcnfkj134.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        local\
    \ letter = s[i]\n        if letter == 'a' or letter == 'e' or letter == 'i' or\
    \ letter == 'o' or letter == 'u' then\n            words[#words + 1] = letter\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd98445dc.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpd98445dc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local char = string.sub(s,i,i)\n    if char == ' ' then\n      i = i + 1\n\
    \    elseif string.find(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(string.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjxd0dt7m.lua:25: '')'' expected (to close ''('' at line 24)
    near ''=''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        local\
    \ word = s:sub(i,i)\n        if string.find(word, \"[^aeiou]\") then\n       \
    \     table.insert(words, word)\n        end\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevx62fsp.lua:31:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"r\",\n    \"y\",\n\
    \    \" \",\n    \"h\",\n    \"d\",\n    \" \",\n    \" \",\n    \"l\",\n    \"\
    t\",\n    \"t\",\n    \"l\",\n    \" \",\n    \"l\",\n    \"m\",\n    \"b\"\n\
    }\nstack traceback:\n\t/tmp/tmpevx62fsp.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while index <=\
    \ #s do\n    if string.sub(s, index, index+n) == string.sub(s,1,n) then\n    \
    \  table.insert(words, string.sub(s,index+1, index+n))\n    end\n    index = index\
    \ + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpja4t_646.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpja4t_646.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(words, string.sub(s,1,i))\n\
    \    end\n  end\n  if #words == n then\n    return words\n  else\n    return {}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo4hnyfz5.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpo4hnyfz5.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while index <=\
    \ #s do\n    local letter = string.sub(s,index,index)\n    if letter == 'a' or\
    \ letter == 'e' or letter == 'i' or letter == 'o' or letter == 'u' then\n    \
    \  index = index + 1\n    elseif letter == 'y' then\n      index = index + 1\n\
    \      while index <= #s do\n        local letter = string.sub(s,index,index)\n\
    \        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or\
    \ letter == 'u' then\n          index = index + 1\n        elseif letter == 'y'\
    \ then\n          index = index + 1\n        else\n          index = index + 1\n\
    \        end\n      end\n    elseif letter == 'y' then\n      index = index +\
    \ 1\n      while index <= #s do\n        local letter = string.sub(s,index,index)\n\
    \        if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or\
    \ letter == 'u' then\n          index = index + 1\n        elseif letter == 'y'\
    \ then\n          index = index + 1\n        else\n          index = index + 1\n\
    \        end\n      end\n    else\n      index = index + 1\n    end\n    if index\
    \ > #s then\n      break\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7kd9ij6.lua:61:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpk7kd9ij6.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local ret = {}\n  local i =\
    \ 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(ret, string.sub(s,i,i+n))\n    end\n    i = i + n\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeedc2mo2.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpeedc2mo2.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n      i = i + n\n    else\n      i = i + 1\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84ttdcdv.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp84ttdcdv.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local words = {}\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i) ~= ' ' then\n      table.insert(words,\
    \ string.sub(s, i, i))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47epgbpx.lua:31:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \"h\",\n    \"a\",\n    \"d\",\n    \"a\",\n    \"l\",\n    \"\
    i\",\n    \"t\",\n    \"t\",\n    \"l\",\n    \"e\",\n    \"l\",\n    \"a\",\n\
    \    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmp47epgbpx.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local ret = {}\n  local i = 0\n \
    \ while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n  \
    \    table.insert(ret, string.sub(s,i,i+n))\n      i = i+n\n    else\n      i\
    \ = i+1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiflo569.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpfiflo569.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s do\n        if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or\
    \ s[i] == 'o' or s[i] == 'u' then\n          i = i + 1\n        else\n       \
    \   break\n        end\n      end\n    end\n    if i <= #s then\n      table.insert(words,\
    \ string.sub(s, 1, i))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp040r8ii9.lua:45:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"\",\n    \"M\",\n    \"Ma\",\n\
    \    \"Mar\",\n    \"Mary\",\n    \"Mary \",\n    \"Mary h\",\n    \"Mary ha\"\
    ,\n    \"Mary had\",\n    \"Mary had \",\n    \"Mary had a\",\n    \"Mary had\
    \ a \",\n    \"Mary had a l\",\n    \"Mary had a li\",\n    \"Mary had a lit\"\
    ,\n    \"Mary had a litt\",\n    \"Mary had a littl\",\n    \"Mary had a little\"\
    ,\n    \"Mary had a little \",\n    \"Mary had a little l\",\n    \"Mary had a\
    \ little la\",\n    \"Mary had a little lam\",\n    \"Mary had a little lamb\"\
    \n}\nstack traceback:\n\t/tmp/tmp040r8ii9.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif\
    \ c == 's' then\n      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n   \
    \     i = i + 1\n      end\n    elseif c == 't' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i + 1\n\
    \      end\n    elseif c == 'd' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'n' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'r' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'r' do\n        i = i + 1\n      end\n    elseif c == 'c' then\n      i =\
    \ i + 1\n      while i <= #s and s[i] ~= 'c' do\n        i = i + 1\n      end\n\
    \    elseif c == 'm' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'm'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'a' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'a' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'e' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'e' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'i' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'i' do\n        i = i + 1\n      end\n    elseif c == 'o'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'o' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'u' then\n      i = i + 1\n      while i <=\
    \ #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplhjawbgb.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for w in string.gmatch(s, '%S+')\
    \ do\n        local count = 0\n        for c in string.gmatch(w, '[%S]+') do\n\
    \            count = count + 1\n            if string.sub(c, 1, n) == string.sub(w,\
    \ 1, n) then\n                table.insert(words, w)\n            end\n      \
    \  end\n        if count == n then\n            table.insert(words, w)\n     \
    \   end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ymrpkqu.lua:37:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmp2ymrpkqu.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal words = {}\n\tlocal i = 0\n\twhile i <= #s do\n\t\
    \tlocal word = string.sub(s,i,i)\n\t\tif string.find(word, '[aeiou]') then\n\t\
    \t\ti = i + n\n\t\t\twords[#words + 1] = word\n\t\telse\n\t\t\ti = i + 1\n\t\t\
    end\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkeim040.lua:35:\
    \ expected: {\"little\"}\nactual: {\"a\", \"a\", \"i\", \"e\"}\nstack traceback:\n\
    \t/tmp/tmpbkeim040.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s do\n        local c = s[i]\n        if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n        elseif\
    \ c == 'y' then\n          i = i + 1\n        else\n          table.insert(words,\
    \ string.sub(s, 1, i))\n          i = i + 1\n        end\n      end\n    else\n\
    \      table.insert(words, string.sub(s, 1, i))\n      i = i + 1\n    end\n  end\n\
    \  if #words == 0 then\n    return {}\n  end\n  if #words == n then\n    return\
    \ words\n  end\n  return select_words(s, n)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Your code here\n\t\n\tlocal words = {}\n\t\n\tif s\
    \ == \"\" then\n\t\treturn words\n\tend\n\t\n\tlocal vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n\t\n\tfor i = 1, #s do\n\t\tlocal char = s[i]\n\t\t\n\t\tif vowels:find(char)\
    \ then\n\t\t\twords[#words + 1] = char\n\t\tend\n\tend\n\t\n\tif #words == n then\n\
    \t\treturn words\n\telse\n\t\treturn {}\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswzqnime.lua:31:\
    \ attempt to call a nil value (method 'find')\nstack traceback:\n\t/tmp/tmpswzqnime.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpswzqnime.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\n  local ret = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(ret, string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj54wpqgh.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpj54wpqgh.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i) ~= \" \" then\n      if string.sub(s,i,i)\
    \ ~= \"\" then\n        if string.sub(s,i,i) ~= \" \" then\n          if string.sub(s,i,i)\
    \ ~= \"\" then\n            if string.sub(s,i,i) ~= \" \" then\n             \
    \ if string.sub(s,i,i) ~= \"\" then\n                if string.sub(s,i,i) ~= \"\
    \" then\n                  if string.sub(s,i,i) ~= \"\" then\n               \
    \     if string.sub(s,i,i) ~= \"\" then\n                      if string.sub(s,i,i)\
    \ ~= \"\" then\n                        if string.sub(s,i,i) ~= \"\" then\n  \
    \                        if string.sub(s,i,i) ~= \"\" then\n                 \
    \           if string.sub(s,i,i) ~= \"\" then\n                              if\
    \ string.sub(s,i,i) ~= \"\" then\n                                if string.sub(s,i,i)\
    \ ~= \"\" then\n                                  if string.sub(s,i,i) ~= \"\"\
    \ then\n                                    if string.sub(s,i,i) ~= \"\" then\n\
    \                                      if string.sub(s,i,i) ~= \"\" then\n   \
    \                                     if string.sub(s,i,i) ~= \"\" then\n    \
    \                                      if string.sub(s,i,i) ~= \"\" then\n   \
    \                                         if string.sub(s,i,i) ~= \"\" then\n\
    \                                              if string.sub(s,i,i) ~= \"\" then\n\
    \                                                if string.sub(s,i,i) ~= \"\"\
    \ then\n                                                  if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                    if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                      if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                        if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                          if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                            if\
    \ string.sub(s,i,i) ~= \"\" then\n                                           \
    \                   if string.sub(s,i,i) ~= \"\" then\n                      \
    \                                          if string.sub(s,i,i) ~= \"\" then\n\
    \                                                                  if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \       if string.sub(s,i,i) ~= \"\" then\n                                  \
    \                                    if string.sub(s,i,i) ~= \"\" then\n     \
    \                                                                   if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \             if string.sub(s,i,i) ~= \"\" then\n                            \
    \                                                if string.sub(s,i,i) ~= \"\"\
    \ then\n                                                                     \
    \         if string.sub(s,i,i) ~= \"\" then\n                                \
    \                                                if string.sub(s,i,i) ~= \"\"\
    \ then\n                                                                     \
    \             if string.sub(s,i,i) ~= \"\" then\n                            \
    \                                                        if string.sub(s,i,i)\
    \ ~= \"\" then\n                                                             \
    \   \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptnrarbh0.lua:77: ''end'' expected (to close ''if'' at line
    62) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(words, w)\n  end\n  table.sort(words)\n  local count = 0\n \
    \ for _, w in ipairs(words) do\n    if string.sub(s, 1, n) == w then\n      count\
    \ = count + 1\n    end\n  end\n  if count == n then\n    return words\n  end\n\
    \  return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_rzdhubc.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_rzdhubc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c ~= 'a' and c ~= 'e' and c ~= 'i' and c ~= 'o' and\
    \ c ~= 'u' then\n      i = i + 1\n      continue\n    end\n    i = i + 1\n   \
    \ if i == n then\n      table.insert(words, s)\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbea1hpxy.lua:25: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(words,\
    \ string.sub(s, 1, n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ftlmeir.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp6ftlmeir.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n      continue\n    end\n    if c == 'y' then\n \
    \     i = i + 1\n      continue\n    end\n    if c == 's' then\n      i = i +\
    \ 1\n      continue\n    end\n    if c == 't' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'h' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'l' then\n      i = i + 1\n      continue\n    end\n    if c == 'd'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'n' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'g' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'f' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'p' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'v' then\n      i = i + 1\n      continue\n    end\n    if c == 'b'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'm' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'j' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'q' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'z' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'x' then\n      i = i + 1\n      continue\n    end\n    if c == 'c'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'v' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'w' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'u' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'r' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'p' then\n      i = i + 1\n      continue\n    end\n    if c == 'f'\
    \ then\n      i = i + 1\n      continue\n    end\n    if c == 'q' then\n     \
    \ i = i + 1\n      continue\n    end\n    if c == 'z' then\n      i = i + 1\n\
    \      continue\n    end\n    if c == 'y' then\n      i = i + 1\n      continue\n\
    \    end\n    if c == 'k' then\n      i = i + 1\n      continue\n    end\n   \
    \ if c == 'j' then\n      i = i + 1\n      \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpidgf9vx4.lua:25: syntax error near ''end''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  if s ==\
    \ \"\" then\n    return result\n  end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  for i = 1, #s do\n    if vowels[string.sub(s,i,i)] then\n      table.insert(result,\
    \ string.sub(s,i,i))\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl99teb_5.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpl99teb_5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal words = {}\n\tlocal i\
    \ = 0\n\twhile i <= #s do\n\t\tlocal c = s[i]\n\t\tif c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tif #words\
    \ == n then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\ttable.insert(words, c)\n\t\tend\n\
    \tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while index <=\
    \ #s do\n    local word = string.sub(s,index,index+n)\n    if word ~= '' then\n\
    \      table.insert(words, word)\n    end\n    index = index+n\n  end\n  return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppahj2vzk.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \" had \", \" a li\", \"ittle\"\
    , \"e lam\", \"mb\"}\nstack traceback:\n\t/tmp/tmppahj2vzk.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n      i = i + 1\n    else\n      if string.sub(s, i, i+n) == string.sub(s,\
    \ 1, n) then\n        table.insert(words, string.sub(s, 1, n))\n      end\n  \
    \    i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvatt6r_.lua:37:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpqvatt6r_.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n      i = i + n\n    else\n \
    \     i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4c5lzg21.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp4c5lzg21.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n      i = i + n\n    else\n \
    \     i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2pdwwev2.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp2pdwwev2.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal words = {}\n\tlocal i = 0\n\twhile i < #s do\n\t\
    \tlocal c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c ==\
    \ 'u' then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\t\t\
    while i < #s and s[i] ~= 'y' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c ==\
    \ 's' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 's' do\n\t\t\t\ti\
    \ = i + 1\n\t\t\tend\n\t\telseif c == 't' then\n\t\t\ti = i + 1\n\t\t\twhile i\
    \ < #s and s[i] ~= 't' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'h' then\n\
    \t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 'h' do\n\t\t\t\ti = i + 1\n\t\t\
    \tend\n\t\telseif c == 'l' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i]\
    \ ~= 'l' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'd' then\n\t\t\ti =\
    \ i + 1\n\t\t\twhile i < #s and s[i] ~= 'd' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\
    \t\telseif c == 'n' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 'n'\
    \ do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'g' then\n\t\t\ti = i + 1\n\
    \t\t\twhile i < #s and s[i] ~= 'g' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif\
    \ c == 'p' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 'p' do\n\t\t\t\
    \ti = i + 1\n\t\t\tend\n\t\telseif c == 'b' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i < #s and s[i] ~= 'b' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'v'\
    \ then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 'v' do\n\t\t\t\ti = i\
    \ + 1\n\t\t\tend\n\t\telseif c == 'm' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s\
    \ and s[i] ~= 'm' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'w' then\n\
    \t\t\ti = i + 1\n\t\t\twhile i < #s and s[i] ~= 'w' do\n\t\t\t\ti = i + 1\n\t\t\
    \tend\n\t\telseif c == 'c' then\n\t\t\ti = i + 1\n\t\t\twhile i < #s and s[i]\
    \ ~= 'c' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'r' then\n\t\t\ti =\
    \ i + 1\n\t\t\twhile i < #s and \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_1guuouz.lua:97: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    else\n      if #words == n then\n        table.insert(words,\
    \ s)\n      else\n        table.insert(words, s)\n      end\n      i = i + 1\n\
    \    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfh00r71x.lua:39:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary had a little lamb\",\n   \
    \ \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had\
    \ a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had a little lamb\"\
    ,\n    \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary\
    \ had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had a little\
    \ lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n\
    \    \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary\
    \ had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had a little\
    \ lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n\
    \    \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary\
    \ had a little lamb\"\n}\nstack traceback:\n\t/tmp/tmpfh00r71x.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\n  \n  --\
    \ Base case\n  if n == 0 then return {}\n  \n  -- Recursive case\n  local words\
    \ = select_words(s, n - 1)\n  \n  -- Base case\n  if #words == 0 then return words\
    \ end\n  \n  -- Recursive case\n  local new_words = {}\n  for i = 1, #words do\n\
    \    if words[i] ~= '' then\n      table.insert(new_words, words[i])\n    end\n\
    \  end\n  return new_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatl8iy3h.lua:25: ''end'' expected (to close ''if'' at line
    22) near ''local''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local words = {}\n  local\
    \ index = 1\n  while index <= #s do\n    local char = string.sub(s,index,index)\n\
    \    if string.find(char, \"aeiou\") then\n      index = index + 1\n    else\n\
    \      if string.find(char, \"bcdfghjklmnpqrstvwxyz\") then\n        index = index\
    \ + 1\n      else\n        if string.find(char, \"AEIOU\") then\n          index\
    \ = index + 1\n        else\n          if string.find(char, \"BCDFGHJKLMNPQRSTVWXYZ\"\
    ) then\n            index = index + 1\n          else\n            if string.find(char,\
    \ \"1234567890\") then\n              index = index + 1\n            else\n  \
    \            if string.find(char, \"!@#$%^&*()_+-={}[]|;:,./<>?\") then\n    \
    \            index = index + 1\n              else\n                table.insert(words,\
    \ char)\n              end\n            end\n          end\n        end\n    \
    \  end\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\n  local words = {}\n  local\
    \ index = 1\n  while index <= #s do\n    if string.sub(s, index, index+n) == string.sub(s,1,n)\
    \ then\n      table.insert(words, string.sub(s,index+1,index+n))\n    end\n  \
    \  index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppj4qy05i.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppj4qy05i.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n   \
    \ elseif string.sub(s,i,i) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i)\
    \ == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i) == ' ' then\n   \
    \   i = i + 1\n    else\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk90zodv3.lua:97: ''end'' expected (to close ''if'' at line
    21) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i < #s\
    \ do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n            i = i + 1\n        elseif c == 'n' then\n\
    \            if i == #s then\n                table.insert(words, s)\n       \
    \     else\n                i = i + 1\n            end\n        elseif c == 's'\
    \ then\n            if i == #s then\n                table.insert(words, s)\n\
    \            else\n                i = i + 1\n            end\n        elseif\
    \ c == 't' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'h' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'l' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'w' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'd' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'r' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'c' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'm' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'y' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'p' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'v' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'f' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'g' then\n            if i == #s then\n                table.insert(words,\
    \ s)\n            else\n                i = i + 1\n            end\n        elseif\
    \ c == 'b' then\n            if i == #s then\n                table.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgydft36k.lua:130: ''end'' expected (to close ''if'' at line
    115) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n)\
    \ then\n      table.insert(words, string.sub(s, 1, n))\n    end\n    i = i + 1\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkuv_ps0z.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpkuv_ps0z.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i) == ' ' then\n      i = i + 1\n    else\n      if string.sub(s,i,i)\
    \ == ' ' then\n        i = i + 1\n      else\n        if string.sub(s,i,i) ==\
    \ ' ' then\n          i = i + 1\n        else\n          if string.sub(s,i,i)\
    \ == ' ' then\n            i = i + 1\n          else\n            if string.sub(s,i,i)\
    \ == ' ' then\n              i = i + 1\n            else\n              if string.sub(s,i,i)\
    \ == ' ' then\n                i = i + 1\n              else\n               \
    \ if string.sub(s,i,i) == ' ' then\n                  i = i + 1\n            \
    \    else\n                  if string.sub(s,i,i) == ' ' then\n              \
    \      i = i + 1\n                  else\n                    if string.sub(s,i,i)\
    \ == ' ' then\n                      i = i + 1\n                    else\n   \
    \                   if string.sub(s,i,i) == ' ' then\n                       \
    \ i = i + 1\n                      else\n                        if string.sub(s,i,i)\
    \ == ' ' then\n                          i = i + 1\n                        else\n\
    \                          if string.sub(s,i,i) == ' ' then\n                \
    \            i = i + 1\n                          else\n                     \
    \       if string.sub(s,i,i) == ' ' then\n                              i = i\
    \ + 1\n                            else\n                              if string.sub(s,i,i)\
    \ == ' ' then\n                                i = i + 1\n                   \
    \           else\n                                if string.sub(s,i,i) == ' '\
    \ then\n                                  i = i + 1\n                        \
    \        else\n                                  if string.sub(s,i,i) == ' ' then\n\
    \                                    i = i + 1\n                             \
    \     else\n                                    if string.sub(s,i,i) == ' ' then\n\
    \                                      i = i + 1\n                           \
    \         else\n                                      if string.sub(s,i,i) ==\
    \ ' ' then\n                                        i = i + 1\n              \
    \                        else\n                                        if string.sub(s,i,i)\
    \ == ' ' then\n                                          i = i + 1\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == ' ' then\n                                       \
    \     i = i + 1\n                                          else\n            \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                    i = i + 1\n                             \
    \               else\n                                              if string.sub(s,i,i)\
    \ == ' ' then\n                                                i = i + 1\n   \
    \                                           else\n                           \
    \                     if string.sub(s,i,i) == ' ' then\n                     \
    \                             i = i + 1\n                                    \
    \            else\n                                                  if string.sub(s,i,i)\
    \ == ' ' then\n                                                    i = i + 1\n\
    \                                                  else\n                    \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                            i = i + 1\n                     \
    \                               else\n                                       \
    \               if string.sub(s,i,i) == ' ' then\n                           \
    \                             i = i + 1\n                                    \
    \                  else\n                                                    \
    \    if string.sub(s,i,i) == ' ' then\n                                      \
    \                    i = i + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9x42os8c.lua:114: ''end'' expected (to close ''if'' at line
    99) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(words,\
    \ string.sub(s,i+1,i+n))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc_vd5qjc.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpc_vd5qjc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local ret = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == \" \" then\n      ret = {}\n      break\n\
    \    end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\n      break\n \
    \   end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\n      break\n \
    \   end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\n      break\n \
    \   end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\n      break\n \
    \   end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\n      break\n \
    \   end\n    if string.sub(s,i,i) == \" \" then\n      break\n    end\n    if\
    \ string.sub(s,i,i) == \" \" then\n      break\n    end\n    if string.sub(s,i,i)\
    \ == \" \" then\n      break\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      break\n    end\n    if string.sub(s,i,i) == \" \" then\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1o7m1lfm.lua:126: ''end'' expected (to close ''if'' at line
    112) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  local i = 0\n\
    \  while i < #s do\n    if string.sub(s,i,i) == ' ' then\n      i = i + 1\n  \
    \  else\n      if string.sub(s,i,i) == ' ' then\n        i = i + 1\n      else\n\
    \        if string.sub(s,i,i) == ' ' then\n          i = i + 1\n        else\n\
    \          if string.sub(s,i,i) == ' ' then\n            i = i + 1\n         \
    \ else\n            if string.sub(s,i,i) == ' ' then\n              i = i + 1\n\
    \            else\n              if string.sub(s,i,i) == ' ' then\n          \
    \      i = i + 1\n              else\n                if string.sub(s,i,i) ==\
    \ ' ' then\n                  i = i + 1\n                else\n              \
    \    if string.sub(s,i,i) == ' ' then\n                    i = i + 1\n       \
    \           else\n                    if string.sub(s,i,i) == ' ' then\n     \
    \                 i = i + 1\n                    else\n                      if\
    \ string.sub(s,i,i) == ' ' then\n                        i = i + 1\n         \
    \             else\n                        if string.sub(s,i,i) == ' ' then\n\
    \                          i = i + 1\n                        else\n         \
    \                 if string.sub(s,i,i) == ' ' then\n                         \
    \   i = i + 1\n                          else\n                            if\
    \ string.sub(s,i,i) == ' ' then\n                              i = i + 1\n   \
    \                         else\n                              if string.sub(s,i,i)\
    \ == ' ' then\n                                i = i + 1\n                   \
    \           else\n                                if string.sub(s,i,i) == ' '\
    \ then\n                                  i = i + 1\n                        \
    \        else\n                                  if string.sub(s,i,i) == ' ' then\n\
    \                                    i = i + 1\n                             \
    \     else\n                                    if string.sub(s,i,i) == ' ' then\n\
    \                                      i = i + 1\n                           \
    \         else\n                                      if string.sub(s,i,i) ==\
    \ ' ' then\n                                        i = i + 1\n              \
    \                        else\n                                        if string.sub(s,i,i)\
    \ == ' ' then\n                                          i = i + 1\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == ' ' then\n                                       \
    \     i = i + 1\n                                          else\n            \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                    i = i + 1\n                             \
    \               else\n                                              if string.sub(s,i,i)\
    \ == ' ' then\n                                                i = i + 1\n   \
    \                                           else\n                           \
    \                     if string.sub(s,i,i) == ' ' then\n                     \
    \                             i = i + 1\n                                    \
    \            else\n                                                  if string.sub(s,i,i)\
    \ == ' ' then\n                                                    i = i + 1\n\
    \                                                  else\n                    \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                            i = i + 1\n                     \
    \                               else\n                                       \
    \               if string.sub(s,i,i) == ' ' then\n                           \
    \                             i = i + 1\n                                    \
    \                  else\n                                                    \
    \    if string.sub(s,i,i) == ' \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3tf4vws_.lua:100: unfinished string near '''' ''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i+1) == ' ' then\n      i = i + 1\n    elseif string.sub(s,i,i+1)\
    \ ~= 'a' and string.sub(s,i,i+1) ~= 'e' and string.sub(s,i,i+1) ~= 'i' and string.sub(s,i,i+1)\
    \ ~= 'o' and string.sub(s,i,i+1) ~= 'u' then\n      i = i + 1\n    else\n    \
    \  if string.sub(s,i,i+1) == ' ' then\n        i = i + 1\n      else\n       \
    \ table.insert(words, string.sub(s,i,i+1))\n        i = i + 1\n      end\n   \
    \ end\n  end\n  if #words == n then\n    return words\n  else\n    return {}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab88w87c.lua:44:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpab88w87c.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal words = {}\n\tfor i =\
    \ 1, #s do\n\t\tif string.sub(s, i, i+n) == string.sub(s, 1, n) then\n\t\t\ttable.insert(words,\
    \ string.sub(s, 1, n))\n\t\tend\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tj4tjjl.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp6tj4tjjl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local index\
    \ = 1\n  while index <= #s do\n    if string.sub(s,index,index+n) ~= \"\" then\n\
    \      table.insert(words, string.sub(s,index,index+n))\n    end\n    index =\
    \ index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky0d9swp.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary \",\n    \"ary h\",\n    \"\
    ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n    \"ad a \",\n   \
    \ \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n    \"littl\",\n\
    \    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\",\n    \"e lam\"\
    ,\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmpky0d9swp.lua:33: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    local count = 0\n    for c in w:gmatch('[%a%A]+') do\n      count = count\
    \ + 1\n      if count == n then\n        table.insert(words, w)\n      end\n \
    \   end\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5a6vose.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpx5a6vose.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(c, \"aeiou\")\
    \ then\n      table.insert(words, c)\n    end\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjz_rbnc1.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjz_rbnc1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 1\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s do\n        c = s[i]\n        if c == 'a' or c == 'e' or c\
    \ == 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n        elseif c ==\
    \ 'y' then\n          i = i + 1\n        else\n          words[#words + 1] = c\n\
    \        end\n      end\n    else\n      words[#words + 1] = c\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  local\
    \ index = 1\n  while index <= #s do\n    if string.sub(s, index, index+n) == string.sub(s,\
    \ 1, n) then\n      table.insert(result, string.sub(s, 1, n))\n    end\n    index\
    \ = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45nbh6s3.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp45nbh6s3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i) == ' ' then\n      i = i +\
    \ 1\n    else\n      if string.sub(s,i,i) == ' ' then\n        i = i + 1\n   \
    \   else\n        if string.sub(s,i,i) == ' ' then\n          i = i + 1\n    \
    \    else\n          if string.sub(s,i,i) == ' ' then\n            i = i + 1\n\
    \          else\n            if string.sub(s,i,i) == ' ' then\n              i\
    \ = i + 1\n            else\n              if string.sub(s,i,i) == ' ' then\n\
    \                i = i + 1\n              else\n                if string.sub(s,i,i)\
    \ == ' ' then\n                  i = i + 1\n                else\n           \
    \       if string.sub(s,i,i) == ' ' then\n                    i = i + 1\n    \
    \              else\n                    if string.sub(s,i,i) == ' ' then\n  \
    \                    i = i + 1\n                    else\n                   \
    \   if string.sub(s,i,i) == ' ' then\n                        i = i + 1\n    \
    \                  else\n                        if string.sub(s,i,i) == ' ' then\n\
    \                          i = i + 1\n                        else\n         \
    \                 if string.sub(s,i,i) == ' ' then\n                         \
    \   i = i + 1\n                          else\n                            if\
    \ string.sub(s,i,i) == ' ' then\n                              i = i + 1\n   \
    \                         else\n                              if string.sub(s,i,i)\
    \ == ' ' then\n                                i = i + 1\n                   \
    \           else\n                                if string.sub(s,i,i) == ' '\
    \ then\n                                  i = i + 1\n                        \
    \        else\n                                  if string.sub(s,i,i) == ' ' then\n\
    \                                    i = i + 1\n                             \
    \     else\n                                    if string.sub(s,i,i) == ' ' then\n\
    \                                      i = i + 1\n                           \
    \         else\n                                      if string.sub(s,i,i) ==\
    \ ' ' then\n                                        i = i + 1\n              \
    \                        else\n                                        if string.sub(s,i,i)\
    \ == ' ' then\n                                          i = i + 1\n         \
    \                               else\n                                       \
    \   if string.sub(s,i,i) == ' ' then\n                                       \
    \     i = i + 1\n                                          else\n            \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                    i = i + 1\n                             \
    \               else\n                                              if string.sub(s,i,i)\
    \ == ' ' then\n                                                i = i + 1\n   \
    \                                           else\n                           \
    \                     if string.sub(s,i,i) == ' ' then\n                     \
    \                             i = i + 1\n                                    \
    \            else\n                                                  if string.sub(s,i,i)\
    \ == ' ' then\n                                                    i = i + 1\n\
    \                                                  else\n                    \
    \                                if string.sub(s,i,i) == ' ' then\n          \
    \                                            i = i + 1\n                     \
    \                               else\n                                       \
    \               if string.sub(s,i,i) == ' ' then\n                           \
    \                             i = i + 1\n                                    \
    \                  else\n                                                    \
    \    if string.sub(s,i,i) == ' \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxtaf8lwf.lua:100: unfinished string near '''' ''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == '' then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpucfohbvq.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 1\n    while i <= #s\
    \ do\n        local c = s[i]\n        if c ~= 'a' and c ~= 'e' and c ~= 'i' and\
    \ c ~= 'o' and c ~= 'u' then\n            words[#words + 1] = s[i]\n        end\n\
    \        i = i + 1\n    end\n    if #words == 0 then\n        return {}\n    end\n\
    \    local j = 1\n    while j <= #words do\n        if words[j] == words[j - 1]\
    \ then\n            words[j] = words[j] .. words[j + 1]\n            words[j +\
    \ 1] = ''\n        end\n        j = j + 1\n    end\n    local k = 1\n    while\
    \ k <= #words do\n        if words[k] == words[k - 1] then\n            words[k]\
    \ = words[k] .. words[k + 1]\n            words[k + 1] = ''\n        end\n   \
    \     k = k + 1\n    end\n    if #words == n then\n        return words\n    end\n\
    \    return {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jbbbgx6.lua:55:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp0jbbbgx6.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal words = {}\n\t\n\t-- Base case\n\tif s == \"\" then\n\
    \t\treturn words\n\tend\n\t\n\t-- Recursive case\n\tlocal words = select_words(s,\
    \ n - 1)\n\t\n\t-- Add words that contain the nth consonant\n\tfor i = 1, #s do\n\
    \t\tif string.sub(s,i,i) == string.sub(s,i,i) .. string.sub(s,i,i) then\n\t\t\t\
    table.insert(words, string.sub(s,i,i))\n\t\tend\n\tend\n\t\n\treturn words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31febjmp.lua:26:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\
    \t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\t/tmp/tmp31febjmp.lua:26:\
    \ in upvalue 'select_words'\n\t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\
    \t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\t/tmp/tmp31febjmp.lua:26:\
    \ in upvalue 'select_words'\n\t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\
    \t/tmp/tmp31febjmp.lua:26: in upvalue 'select_words'\n\t/tmp/tmp31febjmp.lua:26:\
    \ in upvalue 'select_words'\n\t...\t(skipping 249970 levels)\n\t/tmp/tmp31febjmp.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp31febjmp.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.250 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    local count = 0\n    for c in string.gmatch(w, '[%S]+') do\n      if string.sub(c,\
    \ 1, 1) == c then\n        count = count + 1\n      end\n    end\n    if count\
    \ == n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml2oqrad.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpml2oqrad.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local result = {}\n  local\
    \ index = 1\n  while index <= #s do\n    if string.sub(s, index, index+n) == string.sub(s,1,n)\
    \ then\n      table.insert(result, string.sub(s,index+1, index+n))\n    end\n\
    \    index = index + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5019d3j4.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp5019d3j4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i+n)==string.sub(s,1,n) then\n      table.insert(words,string.sub(s,i+1,i+n))\n\
    \    end\n    i = i+1\n  end\n  return words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpposlb8kw.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpposlb8kw.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local index = 1\n  while true do\n\
    \    local word = s:sub(1, index)\n    if word == \"\" then\n      break\n   \
    \ end\n    if string.find(word, \"[aeiou]\") then\n      table.insert(words, word)\n\
    \    end\n    index = index + 1\n  end\n  if #words == n then\n    return words\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lmgq3ii.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmp3lmgq3ii.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local words = {}\n  local\
    \ i = 0\n  while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n)\
    \ then\n      table.insert(words, string.sub(s,i,i+n))\n      i = i + n\n    else\n\
    \      i = i + 1\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mb_2j8d.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp_mb_2j8d.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(words, w)\n  end\n  return table.sort(words)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjt8321d.lua:28:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpzjt8321d.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    else\n      if #words == n then\n        table.insert(words,\
    \ s)\n      else\n        table.insert(words, c)\n      end\n    end\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823123
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%a') do\n\
    \    local count = 0\n    for c in w do\n      if string.sub(c, 1, 1) == string.sub(c,\
    \ 1, 1) then\n        count = count + 1\n      end\n    end\n    if count == n\
    \ then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphz4oj1mp.lua:21:\
    \ attempt to call a string value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmphz4oj1mp.lua:21: in local 'candidate'\n\t/tmp/tmphz4oj1mp.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local index = 0\n    while true\
    \ do\n        local word = string.sub(s,index,index+n)\n        if word == \"\"\
    \ then\n            break\n        end\n        index = index+n\n        table.insert(words,word)\n\
    \    end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3qqgygkb.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp3qqgygkb.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(words,\
    \ string.sub(s,1,i))\n    end\n  end\n  if #words == 0 then\n    return {}\n \
    \ end\n  local count = 0\n  for i = 1, #words do\n    if string.sub(words[i],1,1)\
    \ == string.sub(words[i-1],1,1) then\n      count = count + 1\n    end\n  end\n\
    \  if count > n then\n    return {}\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo10l7_dq.lua:30:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpo10l7_dq.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmpo10l7_dq.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug_umvy8.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpug_umvy8.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Your code here\n\tlocal words = {}\n\tfor i = 1, #s\
    \ do\n\t\tif string.sub(s,i,i) == string.sub(s,i,i) .. string.sub(s,i,i) then\n\
    \t\t\ttable.insert(words, string.sub(s,i,i))\n\t\tend\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp39pb0r_e.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp39pb0r_e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s, i, i+n) == string.sub(s, 'a', i-1) then\n      table.insert(words,\
    \ string.sub(s, 'a', i))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjb6mv8_1.lua:21:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpjb6mv8_1.lua:21: in local 'candidate'\n\t/tmp/tmpjb6mv8_1.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i < #s\
    \ do\n        if string.sub(s,i,i+n) == \"\" then\n            i = i + 1\n   \
    \     else\n            table.insert(words, string.sub(s,i,i+n))\n           \
    \ i = i + n\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfry9okma.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpfry9okma.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    local count = 0\n    for c in string.gmatch(w, '[%S]+') do\n      if string.sub(c,\
    \ 1, 1) == c then\n        count = count + 1\n      end\n    end\n    if count\
    \ == n then\n      table.insert(words, w)\n    end\n  end\n  return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml2oqrad.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpml2oqrad.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(words, string.sub(s,i,i+n))\n    end\n    i = i + 1\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxufx508a.lua:33:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpxufx508a.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823117
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n    end\n    i = i+1\n  end\n  return words\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkccg9x3m.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\"\n}\n\
    stack traceback:\n\t/tmp/tmpkccg9x3m.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s,i,i) == \" \" then\n      i = i\
    \ + 1\n    else\n      if string.sub(s,i,i) == \" \" then\n        i = i + 1\n\
    \      else\n        if string.sub(s,i,i) == \" \" then\n          i = i + 1\n\
    \        else\n          if string.sub(s,i,i) == \" \" then\n            i = i\
    \ + 1\n          else\n            if string.sub(s,i,i) == \" \" then\n      \
    \        i = i + 1\n            else\n              if string.sub(s,i,i) == \"\
    \ \" then\n                i = i + 1\n              else\n                if string.sub(s,i,i)\
    \ == \" \" then\n                  i = i + 1\n                else\n         \
    \         if string.sub(s,i,i) == \" \" then\n                    i = i + 1\n\
    \                  else\n                    if string.sub(s,i,i) == \" \" then\n\
    \                      i = i + 1\n                    else\n                 \
    \     if string.sub(s,i,i) == \" \" then\n                        i = i + 1\n\
    \                      else\n                        if string.sub(s,i,i) == \"\
    \ \" then\n                          i = i + 1\n                        else\n\
    \                          if string.sub(s,i,i) == \" \" then\n              \
    \              i = i + 1\n                          else\n                   \
    \         if string.sub(s,i,i) == \" \" then\n                              i\
    \ = i + 1\n                            else\n                              if\
    \ string.sub(s,i,i) == \" \" then\n                                i = i + 1\n\
    \                              else\n                                if string.sub(s,i,i)\
    \ == \" \" then\n                                  i = i + 1\n               \
    \                 else\n                                  if string.sub(s,i,i)\
    \ == \" \" then\n                                    i = i + 1\n             \
    \                     else\n                                    if string.sub(s,i,i)\
    \ == \" \" then\n                                      i = i + 1\n           \
    \                         else\n                                      if string.sub(s,i,i)\
    \ == \" \" then\n                                        i = i + 1\n         \
    \                             else\n                                        if\
    \ string.sub(s,i,i) == \" \" then\n                                          i\
    \ = i + 1\n                                        else\n                    \
    \                      if string.sub(s,i,i) == \" \" then\n                  \
    \                          i = i + 1\n                                       \
    \   else\n                                            if string.sub(s,i,i) ==\
    \ \" \" then\n                                              i = i + 1\n      \
    \                                      else\n                                \
    \              if string.sub(s,i,i) == \" \" then\n                          \
    \                      i = i + 1\n                                           \
    \   else\n                                                if string.sub(s,i,i)\
    \ == \" \" then\n                                                  i = i + 1\n\
    \                                                else\n                      \
    \                            if string.sub(s,i,i) == \" \" then\n            \
    \                                        i = i + 1\n                         \
    \                         else\n                                             \
    \       if string.sub(s,i,i) == \" \" then\n                                 \
    \                     i = i + 1\n                                            \
    \        else\n                                                      if string.sub(s,i,i)\
    \ == \" \" then\n                                                        i = i\
    \ + 1\n                                                      else\n          \
    \                                              if string.sub(s,i,i) == \" \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa1qxy1bv.lua:100: unfinished string near ''" ''

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  local index =\
    \ 1\n  while index <= #s do\n    if string.sub(s,index,index+n) == string.sub(s,1,n)\
    \ then\n      table.insert(words,string.sub(s,index+1,index+n))\n    end\n   \
    \ index = index + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsi2liaad.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpsi2liaad.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local words = {}\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i)==string.sub(s,i,i-1) then\n      table.insert(words,string.sub(s,i,i))\n\
    \    end\n  end\n  if #words == n then\n    return words\n  else\n    return {}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj008c9a.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfj008c9a.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local i = 0\n    while i <= #s\
    \ do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n            i = i + 1\n        else\n            if\
    \ n == 0 then\n                table.insert(words, s)\n            else\n    \
    \            local count = 0\n                local j = i + 1\n              \
    \  while j <= #s do\n                    local c2 = s[j]\n                   \
    \ if c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n    \
    \                    count = count + 1\n                    else\n           \
    \             if count == n then\n                            table.insert(words,\
    \ s)\n                        end\n                        count = 0\n       \
    \             end\n                    j = j + 1\n                end\n      \
    \      end\n        end\n        i = i + 1\n    end\n    return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvqkzsszh.lua:52:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvqkzsszh.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(words,\
    \ string.sub(s, 1, n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ftlmeir.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp6ftlmeir.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  if s ==\
    \ \"\" then\n    return words\n  end\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(words,\
    \ string.sub(s, 1, n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaev9dhzi.lua:36:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpaev9dhzi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local words = string.gmatch(s, '%w+')\
    \ -- get all words\n  local i = 0\n  while i < #words do\n    local word = words[i]\n\
    \    local count = 0\n    for j = 1, #word do\n      if string.sub(word, 1, j)\
    \ == string.sub(word, 1, j) then\n        count = count + 1\n      end\n    end\n\
    \    if count == n then\n      table.insert(words, word)\n    end\n    i = i +\
    \ 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwv_8zkv.lua:21:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpzwv_8zkv.lua:21: in local 'candidate'\n\t/tmp/tmpzwv_8zkv.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i <= #s do\n\
    \    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(words,\
    \ string.sub(s, 1, n))\n    end\n    i = i + 1\n  end\n  return words\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwpap4y7.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpmwpap4y7.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    local words = string.gmatch(s,\
    \ '%w+')\n    local i = 0\n    while i < #words do\n        if string.len(words[i])\
    \ == n then\n            table.insert(words, words[i])\n        end\n        i\
    \ = i + 1\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvyx8b2f.lua:21:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmphvyx8b2f.lua:21: in local 'candidate'\n\t/tmp/tmphvyx8b2f.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for w in string.gmatch(s, '%a')\
    \ do\n        local count = 0\n        for c in w:gmatch('%[bcdfghjklmnpqrstvwxyz]')\
    \ do\n            count = count + 1\n        end\n        if count == n then\n\
    \            table.insert(words, w)\n        end\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe264fnd4.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpe264fnd4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+n) ~= '' then\n      table.insert(words,\
    \ string.sub(s, i, i+n))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpuynbo9.lua:31:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary \",\n    \"ary h\",\n    \"\
    ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n    \"ad a \",\n   \
    \ \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n    \"littl\",\n\
    \    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\",\n    \"e lam\"\
    ,\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n    \"b\"\n}\nstack\
    \ traceback:\n\t/tmp/tmpmpuynbo9.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local words = {}\n  local i = 0\n  while i < #s do\n \
    \   if string.sub(s, i, i+n) == string.sub(s,i,i+n) then\n      table.insert(words,\
    \ string.sub(s,i,i+n))\n      i = i + n\n    else\n      i = i + 1\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbpqzhbgv.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpbpqzhbgv.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphsvb5m5w.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphsvb5m5w.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local words = {}\n    for i = 1, #s do\n        local\
    \ word = s:sub(i, i)\n        if word:sub(1, n) == s then\n            table.insert(words,\
    \ word)\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfmrmqbj4.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfmrmqbj4.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwp59jo44.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpwp59jo44.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil or n == 0 then\n    return\
    \ {}\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp494fglbs.lua:35: ''end'' expected (to close ''function'' at
    line 17) near <eof>

    '
  stdout: ''
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local ret = {}\n  local i =\
    \ 0\n  while i < #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n\
    \      table.insert(ret, string.sub(s,i,i+n))\n      i = i + n\n    else\n   \
    \   i = i + 1\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pzmdmp4.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp6pzmdmp4.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(words,\
    \ string.sub(s,1,i))\n    elseif string.sub(s,i,i) == \" \" then\n      table.insert(words,\
    \ string.sub(s,i+1,i+1))\n    end\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvygsi97.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpdvygsi97.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823118
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a list of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty list.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local words = {}\n  local i\
    \ = 0\n  while i <= #s do\n    local word = string.sub(s,i,i)\n    if string.find(word,\
    \ \"[bcdfghjklmnpqrstvwxyz]\") then\n      table.insert(words, word)\n    end\n\
    \    i = i + 1\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccbih31q.lua:34:\
    \ expected: {\"little\"}\nactual: {\"r\", \"y\", \"h\", \"d\", \"l\", \"t\", \"\
    t\", \"l\", \"l\", \"m\", \"b\"}\nstack traceback:\n\t/tmp/tmpccbih31q.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823118
