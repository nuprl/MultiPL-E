name: HumanEval_126_is_sorted
language: lua
prompt: "-- Given a list of numbers, return whether or not they are sorted\n-- in\
  \ ascending order. If list has more than 1 duplicate of the same\n-- number, return\
  \ False. Assume no negative numbers and only integers.\n-- Examples\n-- >>> is_sorted({5})\n\
  -- true\n-- >>> is_sorted({1, 2, 3, 4, 5})\n-- true\n-- >>> is_sorted({1, 3, 2,\
  \ 4, 5})\n-- false\n-- >>> is_sorted({1, 2, 3, 4, 5, 6})\n-- true\n-- >>> is_sorted({1,\
  \ 2, 3, 4, 5, 6, 7})\n-- true\n-- >>> is_sorted({1, 3, 2, 4, 5, 6, 7})\n-- false\n\
  -- >>> is_sorted({1, 2, 2, 3, 3, 4})\n-- true\n-- >>> is_sorted({1, 2, 2, 2, 3,\
  \ 4})\n-- false\nlocal function is_sorted(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_sorted\n\
  \    lu.assertEquals(candidate({5}), true)\n    lu.assertEquals(candidate({1, 2,\
  \ 3, 4, 5}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5}), false)\n   \
  \ lu.assertEquals(candidate({1, 2, 3, 4, 5, 6}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7}), true)\n    lu.assertEquals(candidate({1, 3, 2, 4, 5, 6, 7}),\
  \ false)\n    lu.assertEquals(candidate({}), true)\n    lu.assertEquals(candidate({1}),\
  \ true)\n    lu.assertEquals(candidate({3, 2, 1}), false)\n    lu.assertEquals(candidate({1,\
  \ 2, 2, 2, 3, 4}), false)\n    lu.assertEquals(candidate({1, 2, 3, 3, 3, 4}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 2, 3, 3, 4}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~=\
    \ last_value then\n      return false\n    end\n    last_value = lst[i]\n  end\n\
    \  return true\nend", "  -- If list is empty, return true\n  if not lst then return\
    \ true end\n  -- If list has one element, return true\n  if #lst == 1 then return\
    \ true end\n  -- If list has two elements, return true if first is less than second\n\
    \  if #lst == 2 then\n    if lst[1] < lst[2] then return true end\n  end\n  --\
    \ If list has more than two elements, return true if first is less than second\n\
    \  for i = 2, #lst do\n    if lst[i] < lst[i - 1] or lst[i] > lst[i + 1] then\
    \ return false end\n  end\n  return true\nend", "  local last_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return false\n\
    \    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local last_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return\
    \ false\n    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local\
    \ last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n\
    \      return false\n    end\n    last_value = lst[i]\n  end\n  return true\n\
    end", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  -- If there are more than 1 duplicate number\n  if #lst > 1 then\n\
    \    return false\n  end\n  -- If there are no duplicates\n  if #lst == 1 then\n\
    \    return true\n  end\n  -- If there is only 1 number, then it is sorted\n \
    \ if #lst == 2 then\n    return true\n  end\n  -- If there is only 1 number, then\
    \ it is sorted\n  if #lst == 3 then\n    return true\n  end\n  -- If there are\
    \ 2 numbers, they are sorted\n  if #lst == 4 then\n    return true\n  end\n  --\
    \ If there are 3 numbers, they are sorted\n  if #lst == 5 then\n    return true\n\
    \  end\n  -- If there are 4 numbers, they are sorted\n  if #lst == 6 then\n  \
    \  return true\n  end\n  -- If there are 5 numbers, they are sorted\n  if #lst\
    \ == 7 then\n    return true\n  end\n  -- If there are 6 numbers, they are sorted\n\
    \  if #lst == 8 then\n    return true\n  end\n  -- If there are 7 numbers, they\
    \ are sorted\n  if #lst == 9 then\n    return true\n  end\n  -- If there are 8\
    \ numbers, they are sorted\n  if #lst == 10 then\n    return true\n  end\n  --\
    \ If there are 9 numbers, they are sorted\n  if #lst == 11 then\n    return true\n\
    \  end\n  -- If there are 10 numbers, they are sorted\n  if #lst == 12 then\n\
    \    return true\n  end\n  -- If there are 11 numbers, they are sorted\n  if #lst\
    \ == 13 then\n    return true\n  end\n  -- If there are 12 numbers, they are sorted\n\
    \  if #lst == 14 then\n    return true\n  end\n  -- If there are 13 numbers, they\
    \ are sorted\n  if #lst == 15 then\n    return true\n  end\n  -- If there are\
    \ 14 numbers, they are sorted\n  if #lst == 16 then\n    return true\n  end\n\
    \  -- If there are 15 numbers, they are sorted\n  if #lst == 17 then\n    return\
    \ true\n  end\n  -- If there are 16 numbers, they are sorted\n  if #lst == 18\
    \ then\n    return true\n  end\n  -- If there are 17 numbers, they are sorted\n\
    \  if #lst == 19 then\n    return true\n  end\n  -- If there are 18 numbers, they\
    \ are sorted\n  if #lst == 20 then\n    return true\n  end\n  -- If there are\
    \ 19 numbers, they are sorted\n  if #lst == 21 then\n    return true\n  end\n\
    \  -- If there are 20 numbers, they are ", "  -- Check for empty list\n  if #lst\
    \ == 0 then\n    return true\n  end", "  local last_value = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] ~= last_value then\n      return false\n    end\n\
    \    last_value = lst[i]\n  end\n  return true\nend", "  local last_value = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return false\n\
    \    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local last_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n      return\
    \ false\n    end\n    last_value = lst[i]\n  end\n  return true\nend", "  local\
    \ last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value then\n\
    \      return false\n    end\n    last_value = lst[i]\n  end\n  return true\n\
    end", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  local sorted = true\n  local last_value = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] ~= last_value then\n      sorted = false\n      break\n\
    \    end\n    last_value = lst[i]\n  end\n  return sorted\nend", "  local sorted\
    \ = true\n  for _, v in ipairs(lst) do\n    if v < lst[#lst] then\n      sorted\
    \ = false\n      break\n    end\n  end\n  return sorted\nend", "  -- If list is\
    \ empty, return true\n  if #lst == 0 then return true end\n  -- If list has one\
    \ element, return true\n  if #lst == 1 then return true end\n  -- If list has\
    \ two elements, compare the first and last elements\n  if lst[1] == lst[#lst]\
    \ then\n    -- If the first and last elements are the same, compare the second\
    \ and\n    -- third elements\n    return is_sorted(lst[#lst+1])\n  end\n  -- If\
    \ the first and last elements are different, return false\n  return false\nend",
  "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] ~= last_value\
    \ then\n      return false\n    end\n    last_value = lst[i]\n  end\n  return\
    \ true\nend", "  local last_value = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ ~= last_value then\n      return false\n    end\n    last_value = lst[i]\n \
    \ end\n  return true\nend", "  -- If there are more than 1 duplicate number\n\
    \  if #lst > 1 then\n    -- Sort the list\n    lst = table.sort(lst)\n    -- If\
    \ the first and last numbers are the same\n    -- return false\n    if lst[1]\
    \ == lst[#lst] then\n      return false\n    end\n  end\n  -- If there are only\
    \ 1 number, return true\n  return true\nend", "  local last_val = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] ~= last_val then\n      return false\n    end\n\
    \    last_val = lst[i]\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
