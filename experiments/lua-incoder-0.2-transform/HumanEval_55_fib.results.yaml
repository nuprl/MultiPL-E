language: lua
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error(\"\
    fib: n must be >= 0\")\n  end\n  if n == 0 or n == 1 then\n    return n\n  end\n\
    \  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then return n end\n\
    \  return fib(n-1) + fib(n-2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 1
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtvhg2w4.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmprtvhg2w4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 then\n    return 0\n  end\n  if n == 1 then\n    return\
    \ 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  end\n  if n == 0 or n == 1 then\n    return n\n  end\n  return fib(n\
    \ - 1) + fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fib\n    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1),\
    \ 1)\n    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11),\
    \ 89)\n    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 1
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ 1\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtvhg2w4.lua:19:\
    \ expected: 55, actual: 89\nstack traceback:\n\t/tmp/tmprtvhg2w4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    error('fib\
    \ arg must be non-negative')\n  end\n  if n == 0 then\n    return 0\n  end\n \
    \ if n == 1 then\n    return 1\n  end\n  return fib(n - 1) + fib(n - 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fib\n\
    \    lu.assertEquals(candidate(10), 55)\n    lu.assertEquals(candidate(1), 1)\n\
    \    lu.assertEquals(candidate(8), 21)\n    lu.assertEquals(candidate(11), 89)\n\
    \    lu.assertEquals(candidate(12), 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750255
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-1) + fib(n-2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 0 then\n    return\
    \ nil\n  elseif n == 0 then\n    return 0\n  elseif n == 1 then\n    return 1\n\
    \  else\n    return fib(n - 1) + fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
- exit_code: 0
  program: "-- Return n-th Fibonacci number.\n-- >>> fib(10)\n-- 55\n-- >>> fib(1)\n\
    -- 1\n-- >>> fib(8)\n-- 21\nlocal function fib(n)\n  if n < 2 then\n    return\
    \ n\n  else\n    return fib(n-2) + fib(n-1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fib\n    lu.assertEquals(candidate(10),\
    \ 55)\n    lu.assertEquals(candidate(1), 1)\n    lu.assertEquals(candidate(8),\
    \ 21)\n    lu.assertEquals(candidate(11), 89)\n    lu.assertEquals(candidate(12),\
    \ 144)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750234
