language: lua
name: HumanEval_31_is_prime
results:
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd and n is prime.\n  if n % 2 == 1 then\n    return not is_prime((n-1)/2)\n\
    \  end\n  -- If n is odd, then (n-1)/2 is even, and n is prime.\n  return not\
    \ is_prime((n-1)/2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppds04of6.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppds04of6.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n % 2\
    \ == 0 and n % 3 == 0 and n % 5 == 0 and n % 7 == 0 and n ~= 1 then return true\
    \ end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprz2c2fac.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprz2c2fac.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_.28Integer.29\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_trial_division.2C_and_congruence.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_squaring.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_cubing.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_triangular_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_quadratic_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_cubic_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_quartic_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hexadecimal_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.29\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test.2C_hex_primality_test.\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg3mtz_ic.lua:68: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750283
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 3 then return true end\n  if n == 5\
    \ then return true end\n  if n == 7 then return true end\n  if n == 11 then return\
    \ true end\n  if n == 13 then return true end\n  if n == 17 then return true end\n\
    \  if n == 19 then return true end\n  if n == 23 then return true end\n  if n\
    \ == 29 then return true end\n  if n == 37 then return true end\n  if n == 43\
    \ then return true end\n  if n == 47 then return true end\n  if n == 59 then return\
    \ true end\n  if n == 63 then return true end\n  if n == 67 then return true end\n\
    \  if n == 71 then return true end\n  if n == 79 then return true end\n  if n\
    \ == 87 then return true end\n  if n == 97 then return true end\n  if n == 113\
    \ then return true end\n  if n == 131 then return true end\n  if n == 139 then\
    \ return true end\n  if n == 149 then return true end\n  if n == 151 then return\
    \ true end\n  if n == 157 then return true end\n  if n == 163 then return true\
    \ end\n  if n == 171 then return true end\n  if n == 179 then return true end\n\
    \  if n == 181 then return true end\n  if n == 191 then return true end\n  if\
    \ n == 193 then return true end\n  if n == 197 then return true end\n  if n ==\
    \ 199 then return true end\n  if n == 211 then return true end\n  if n == 213\
    \ then return true end\n  if n == 217 then return true end\n  if n == 23 then\
    \ return true end\n  if n == 29 then return true end\n  if n == 37 then return\
    \ true end\n  if n == 47 then return true end\n  if n == 55 then return true end\n\
    \  if n == 59 then return true end\n  if n == 67 then return true end\n  if n\
    \ == 71 then return true end\n  if n == 79 then return true end\n  if n == 87\
    \ then return true end\n  if n == 97 then return true end\n  if n == 113 then\
    \ return true end\n  if n == 131 then return true end\n  if n == 139 then return\
    \ true end\n  if n == 149 then return true end\n  if n == 15\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnc8w2atr.lua:76: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --\
    \ -- -- -- -- -- -- -- -- -- -- -- -- -- -- \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp57oxbksx.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtnj44c3.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1.\n  if n < 1 then return false end\n  --\
    \ Check from 1 to sqrt(n).\n  for i = 1, math.floor(n*math.sqrt(n)) do\n    --\
    \ If n is divisible by i, then n is prime.\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86oqzsyg.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp86oqzsyg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750283
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5hn7hl3o.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ candidate.\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n \
    \     return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750246
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  -- http://en.wikipedia.org/wiki/Primality_test#Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Horner's_method\n  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Rabin-Mil\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa7bis65u.lua:68: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 1, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g9gmpht.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_g9gmpht.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750283
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Trial_division\n  -- http://en.wikipedia.org/wiki/Primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_primality_test\n  -- http://en.wikipedia.org/wiki/Miller%E2%80%93Rabin_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  -- http://en.wikipedia.org/wiki/Primality_test#Miller-Rabin_primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Miller-Rabin_test\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_with_conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Conditions\n  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Theorem_of_a_prime_test#Conditions#Theorem_of_a_prime_test#Conditions\n\
    \  -- http://en.wikipedia.org/wiki/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnkns6y2i.lua:67: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ i\n  for i = 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\
    \ 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\
    \ 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239,\
    \ 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337,\
    \ 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433,\
    \ 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541,\
    \ 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641,\
    \ 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743,\
    \ 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857,\
    \ 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971,\
    \ 977, 983, 991, 997\n    do\n      if n % i == 0 then return false end\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp59wkyour.lua:24: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return true end\n  if n == 2\
    \ then return false end\n  if n == 3 then return false end\n  if n == 4 then return\
    \ false end\n  if n == 5 then return false end\n  if n == 6 then return false\
    \ end\n  if n == 7 then return false end\n  if n == 8 then return false end\n\
    \  if n == 9 then return false end\n  if n % 11 == 0 then return false end\n \
    \ if n % 13 == 0 then return false end\n  if n % 17 == 0 then return false end\n\
    \  if n % 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n\
    \  if n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 141 == 0 then return\
    \ false end\n  if n % 147 == 0 then return false end\n  if n % 151 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 167 == 0 then return false end\n  if n % 171 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwfrfaeqs.lua:71: ''end'' expected (to close ''if'' at line
    70) near ''lu''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  local\
    \ m = math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy507wy8_.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy507wy8_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers.\n\
    \  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8fv401k.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  -- http://primes.utm.edu/lists/small/millions/test.html\n  -- http://primes.utm.edu/lists/small/millions/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/test.html\n  -- http://primes.utm.edu/lists/small/millions/small/\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/large/test.html\n  --\
    \ http://primes.utm.edu/lists/small/millions/medium/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/small/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/medium/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/medium/test.html\n  --\
    \ http://primes.utm.edu/lists/small/millions/medium/small/large/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/small/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/medium/medium/\n  -- http://primes.utm.edu/lists/small/millions/small/medium/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/medium/small/large\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmfzlemro.lua:61: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8fv401k.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n == 10 then return true end\n  if n == 11 then\
    \ return true end\n  if n == 12 then return true end\n  if n == 13 then return\
    \ true end\n  if n == 14 then return true end\n  if n == 15 then return true end\n\
    \  if n == 16 then return true end\n  if n == 17 then return true end\n  if n\
    \ == 18 then return true end\n  if n == 19 then return true end\n  if n == 20\
    \ then return true end\n  if n == 21 then return true end\n  if n == 22 then return\
    \ true end\n  if n == 23 then return true end\n  if n == 24 then return true end\n\
    \  if n == 25 then return true end\n  if n == 26 then return true end\n  if n\
    \ == 27 then return true end\n  if n == 28 then return true end\n  if n == 29\
    \ then return true end\n  if n == 30 then return true end\n  if n == 31 then return\
    \ true end\n  if n == 32 then return true end\n  if n == 33 then return true end\n\
    \  if n == 34 then return true end\n  if n == 35 then return true end\n  if n\
    \ == 36 then return true end\n  if n == 37 then return true end\n  if n == 38\
    \ then return true end\n  if n == 39 then return true end\n  if n == 40 then return\
    \ true end\n  if n == 41 then return true end\n  if n == 42 then return true end\n\
    \  if n == 43 then return true end\n  if n == 44 then return true end\n  if n\
    \ == 45 then return true end\n  if n == 46 then return true end\n  if n == 47\
    \ then return true end\n  if n == 48 then return true end\n  if n == 49 then return\
    \ true end\n  if n == 50 then return true end\n  if n == 51 then return true end\n\
    \  if n == 52 then return true end\n  if n == 53 then return true end\n  if n\
    \ == 54 then return true end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpumu18p3w.lua:98: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n <= 1 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7o3jfgek.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Trial_division\n  -- The\
    \ algorithm is very similar to the sieve of Eratosthenes.\n  -- The only difference\
    \ is that the divisor is divided by all odd numbers\n  -- (except the number itself)\
    \ instead of only by odd numbers.\n  -- The algorithm is also more efficient for\
    \ large numbers as it only needs to test\n  -- numbers up to sqrt(n).\n  local\
    \ function is_odd(n)\n    return n % 2 ~= 0\n  end\n  local function is_odd_or_equal(n)\n\
    \    return n % 2 == 0 or n == 2\n  end\n  local function is_even(n)\n    return\
    \ not is_odd(n)\n  end\n  local function is_even_or_equal(n)\n    return not is_odd(n)\
    \ or n == 2\n  end\n  local function is_prime_or_equal(n)\n    return not is_odd(n)\
    \ or n % 2 == 0\n  end\n  local function is_prime_or_equal_to_2(n)\n    return\
    \ not is_odd(n) or n % 2 == 0 or n == 2\n  end\n  local function is_prime_or_equal_to_3(n)\n\
    \    return not is_odd(n) or n % 3 == 0 or n == 3\n  end\n  local function is_prime_or_equal_to_5(n)\n\
    \    return not is_odd(n) or n % 5 == 0 or n == 5\n  end\n  local function is_prime_or_equal_to_7(n)\n\
    \    return not is_odd(n) or n % 7 == 0 or n == 7\n  end\n  local function is_prime_or_equal_to_11(n)\n\
    \    return not is_odd(n) or n % 11 == 0 or n == 11\n  end\n  local function is_prime_or_equal_to_13(n)\n\
    \    return not is_odd(n) or n % 13 == 0 or n == 13\n  end\n  local function is_prime_or_equal_to_17(n)\n\
    \    return not is_odd(n) or n % 17 == 0 or n == 17\n  end\n  local function is_prime_or_equal_to_19(n)\n\
    \    return not is_odd(n) or n % 19 == 0 or n == 19\n  end\n  local function is_prime_or_equal_to_23(n)\n\
    \    return not is_odd(n) or n % 23 == 0 or n == 23\n  end\n  local function is_prime_or_equal_to_29(n)\n\
    \    return not is_odd(n) or n % 29 == 0 or n == 29\n  end\n  local function is_prime_or_equal_to_31(n)\n\
    \    return not is_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1k584unl.lua:80: ''end'' expected (to close ''function'' at
    line 78) near ''lu''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 3 then return true end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  local i\n  for i = 5, n, 1 do\n    if n % i == 0\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfopkr826.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfopkr826.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test\n  if n < 2 then\n    return false\n  end\n  if n == 2 then\n\
    \    return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial\
    \ division test\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n\
    \      return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  -- If n is even, then n / 2 is also even.\n  -- If n is odd, then n / 2 is\
    \ odd.\n  -- If n is even, then n / 2 is odd.\n  -- If n is odd, then n / 2 is\
    \ even.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then n / 2\
    \ is odd.\n  -- If n is even, then n / 2 is odd.\n  -- If n is odd, then n / 2\
    \ is even.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then n /\
    \ 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then n\
    \ / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then n / 2 is even.\n  -- If n is odd, then\
    \ n / 2 is odd.\n  -- If n is even, then \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6dmt67hm.lua:79: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i=3,math.floor(n/2),2 do\n    if n % i ==\
    \ 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 169 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 185 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpua06w3io.lua:88: ''end'' expected (to close ''if'' at line
    68) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n ==\
    \ 2 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  local m = math.floor(math.sqrt(n))\n  for i = 2,\
    \ m do\n    if n % i == 0 then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtp_e57b.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqtp_e57b.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The naive prime test\n  if n <= 1 then return false end\n  if n == 2 then\
    \ return true end\n  if n % 2 == 0 then return false end\n  -- Test the odd number\n\
    \  if n % 3 == 0 then return false end\n  -- Test the even number\n  if n % 5\
    \ == 0 then return false end\n  -- If none of the above tests were true then n\
    \ is prime\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tif24nk.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2tif24nk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(n/2)\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If we get here, then\
    \ n is prime.\n  -- If n is even, then the only even prime is 2.\n  -- If n is\
    \ odd, then there are two odd primes, namely 3 and 5.\n  -- The only even prime\
    \ is 5.\n  if n % 2 == 1 then\n    return false\n  end\n  -- If n is odd, then\
    \ there are two odd primes, namely 3 and 5.\n  -- The only even prime is 5.\n\
    \  if n % 2 == 1 then\n    return false\n  end\n  -- If n is odd, then there are\
    \ two odd primes, namely 3 and 5.\n  -- The only even prime is 5.\n  if n % 2\
    \ == 1 then\n    return false\n  end\n  -- If n is odd, then there are two odd\
    \ primes, namely 3 and 5.\n  -- The only even prime is 5.\n  if n % 2 == 1 then\n\
    \    return false\n  end\n  -- If n is odd, then there are two odd primes, namely\
    \ 3 and 5.\n  -- The only even prime is 5.\n  if n % 2 == 1 then\n    return false\n\
    \  end\n  -- If n is odd, then there are two odd primes, namely 3 and 5.\n  --\
    \ The only even prime is 5.\n  if n % 2 == 1 then\n    return false\n  end\n \
    \ -- If n is odd, then there are two odd primes, namely 3 and 5.\n  -- The only\
    \ even prime is 5.\n  if n % 2 == 1 then\n    return false\n  end\n  -- If n is\
    \ odd, then there are two odd primes, namely 3 and 5.\n  -- The only even prime\
    \ is 5.\n  if n % 2 == 1 then\n    return false\n  end\n  -- If n is odd, then\
    \ there are two odd primes, namely 3 and 5.\n  -- The only even prime is 5.\n\
    \  if n % 2 == 1 then\n    return false\n  end\n  -- If n is odd, then there are\
    \ two odd primes, namely 3 and 5.\n  -- The only even prime is 5.\n  if n % 2\
    \ == 1 then\n    return false\n  end\n  -- If n is odd, then there are two odd\
    \ primes, namely 3 and 5.\n  -- The only even prime is 5.\n  if n % 2 == 1 then\n\
    \    return false\n  end\n  -- If n is odd, then there are two odd primes, namely\
    \ 3 and 5.\n  -- The only even prime is 5.\n  if n % 2 == 1 then\n    return false\n\
    \  end\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4r3xc0h1.lua:108: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100012.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100021.txt\n  -- http://primes.utm.edu/lists/small/100022.txt\n\
    \  -- http://primes.utm.edu/lists/small/100023.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100030.txt\n\
    \  -- http://primes.utm.edu/lists/small/100031.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpui9ls0z5.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  -- Check odd and even numbers since they are\
    \ special cases.\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then\
    \ return false end\n  -- Check all the numbers in between.\n  for i = 5, math.floor(n/2),\
    \ 2 do\n    if n % i == 0 then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhlikl3f.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqhlikl3f.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primeness\n  if n % 2 == 1 then\n    return not is_prime(n - 2)\n  end\n\
    \  -- Check odd-even numbers for primeness\n  if n % 3 == 0 then\n    return not\
    \ is_prime(n - 3)\n  end\n  -- Check odd-even numbers for primeness\n  if n %\
    \ 5 == 0 then\n    return not is_prime(n - 5)\n  end\n  -- Check odd-even numbers\
    \ for primeness\n  if n % 7 == 0 then\n    return not is_prime(n - 7)\n  end\n\
    \  -- Check odd-even numbers for primeness\n  if n % 11 == 0 then\n    return\
    \ not is_prime(n - 11)\n  end\n  -- Check odd-even numbers for primeness\n  if\
    \ n % 13 == 0 then\n    return not is_prime(n - 13)\n  end\n  -- Check odd-even\
    \ numbers for primeness\n  if n % 17 == 0 then\n    return not is_prime(n - 17)\n\
    \  end\n  -- Check odd-even numbers for primeness\n  if n % 19 == 0 then\n   \
    \ return not is_prime(n - 19)\n  end\n  -- Check odd-even numbers for primeness\n\
    \  if n % 23 == 0 then\n    return not is_prime(n - 23)\n  end\n  -- Check odd-even\
    \ numbers for primeness\n  if n % 29 == 0 then\n    return not is_prime(n - 29)\n\
    \  end\n  -- Check odd-even numbers for primeness\n  if n % 31 == 0 then\n   \
    \ return not is_prime(n - 31)\n  end\n  -- Check odd-even numbers for primeness\n\
    \  if n % 37 == 0 then\n    return not is_prime(n - 37)\n  end\n  -- Check odd-even\
    \ numbers for primeness\n  if n % 41 == 0 then\n    return not is_prime(n - 41)\n\
    \  end\n  -- Check odd-even numbers for primeness\n  if n % 43 == 0 then\n   \
    \ return not is_prime(n - 43)\n  end\n  -- Check odd-even numbers for primeness\n\
    \  if n % 47 == 0 then\n    return not is_prime(n - 47)\n  end\n  -- Check odd-even\
    \ numbers for primeness\n  if n % 53 == 0 then\n    return not is_prime(n - \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphwbexmkj.lua:89: '')'' expected (to close ''('' at line 88)
    near ''=''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  for i = 3, math.floor(n/2), 2 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd and n is prime.\n  if n % 2 == 1 then\n    return is_prime((n\
    \ - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is even.\n  return not is_prime((n\
    \ - 1) / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptehxp__o.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptehxp__o.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes. It is guaranteed to\n\
    \  -- terminate for composite numbers. It is also guaranteed not to take more\n\
    \  -- time than the sieve of Sieve of Atkin.\n  -- http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- http://en.wikipedia.org/wiki/Sieve_of_Atkin\n  -- http://en.wikipedia.org/wiki/Primality_test\n\
    \  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n  -- http://en.wikipedia.org/wiki/Sieve_of_Sundaram_(mathematical_algorithm)\n\
    \  -- http://en.wikipedia.org/wiki/Sieve_of_Atkin\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpehapr80h.lua:45: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  -- http://primes.utm.edu/lists/small/millions/test.html\n  -- http://primes.utm.edu/lists/small/millions/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/test.html\n  -- http://primes.utm.edu/lists/small/millions/small/\n\
    \  -- http://primes.utm.edu/lists/small/millions/small/test.html\n  -- http://primes.utm.edu/lists/small/millions/medium/large/\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/large/test.html\n  --\
    \ http://primes.utm.edu/lists/small/millions/medium/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/small/\n  -- http://primes.utm.edu/lists/small/millions/large/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/medium/\n  -- http://primes.utm.edu/lists/small/millions/medium/medium/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/large/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/large/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/medium/small/small/\n  -- http://primes.utm.edu/lists/small/millions/medium/small/small/test.html\n\
    \  -- http://primes.utm.edu/lists/small/millions/large/medium/large/\n  -- http://primes.utm.edu/lists/small/millions/large/medium/large/test.html\n\
    \  -- http://primes.utm.\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpndmc8udg.lua:62: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ n\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd, so only need to check odd numbers.\n  if n % 2 == 1 then\n \
    \   return not is_prime((n - 1) / 2)\n  end\n  -- If n is odd, then (n-1)/2 is\
    \ even, so need to check even numbers.\n  return not is_prime((n - 1) / 2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ckkl7n1.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ckkl7n1.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n == 10 then return true end\n  if n == 11 then\
    \ return true end\n  if n == 12 then return true end\n  if n == 13 then return\
    \ true end\n  if n == 14 then return true end\n  if n == 15 then return true end\n\
    \  if n == 16 then return true end\n  if n == 17 then return true end\n  if n\
    \ == 18 then return true end\n  if n == 19 then return true end\n  if n == 20\
    \ then return true end\n  if n == 21 then return true end\n  if n == 22 then return\
    \ true end\n  if n == 23 then return true end\n  if n == 24 then return true end\n\
    \  if n == 25 then return true end\n  if n == 26 then return true end\n  if n\
    \ == 27 then return true end\n  if n == 28 then return true end\n  if n == 29\
    \ then return true end\n  if n == 30 then return true end\n  if n == 31 then return\
    \ true end\n  if n == 32 then return true end\n  if n == 33 then return true end\n\
    \  if n == 34 then return true end\n  if n == 35 then return true end\n  if n\
    \ == 36 then return true end\n  if n == 37 then return true end\n  if n == 38\
    \ then return true end\n  if n == 39 then return true end\n  if n == 40 then return\
    \ true end\n  if n == 41 then return true end\n  if n == 42 then return true end\n\
    \  if n == 43 then return true end\n  if n == 44 then return true end\n  if n\
    \ == 45 then return true end\n  if n == 46 then return true end\n  if n == 47\
    \ then return true end\n  if n == 48 then return true end\n  if n == 49 then return\
    \ true end\n  if n == 51 then return true end\n  if n == 52 then return true end\n\
    \  if n == 53 then return true end\n  if n == 54 then return true end\n  if n\
    \ == 55 then return true \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpck0cq8h2.lua:78: ''end'' expected (to close ''if'' at line
    77) near ''lu''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpljd4bx6f.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  --\
    \ If we get this far, it's prime.\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxls7vjzo.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxls7vjzo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ candidate.\n  for i = 3, n, 2 do\n    if n % i == 0 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8r93sfh1.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8r93sfh1.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100012.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100021.txt\n  -- http://primes.utm.edu/lists/small/100022.txt\n\
    \  -- http://primes.utm.edu/lists/small/100023.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100030.txt\n\
    \  -- http://primes.utm.edu/lists/small/100031.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpui9ls0z5.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 115 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 143 == 0 then return false end\n  if n % 149 == 0 then return\
    \ false end\n  if n % 153 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsd6bfw3y.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd.\n  if n % 2 == 1 then\n    return not is_prime((n - 1) / 2)\n\
    \  end\n  -- If n is odd, then (n-1)/2 is even.\n  return not is_prime((n - 1)\
    \ / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoj740ux.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoj740ux.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpljd4bx6f.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_.282.29\n\
    \  -- The algorithm is very similar to trial division but much faster.\n  -- The\
    \ only difference is that the loop stops when the remainder is less than 2.\n\
    \  -- This makes the algorithm much more efficient than the one from Wikipedia.\n\
    \  -- The algorithm is also more compact and easier to read.\n  local i = 3\n\
    \  local remainder\n  while i <= math.sqrt(n) do\n    remainder = n % i\n    if\
    \ remainder == 0 then\n      return false\n    end\n    if remainder == 1 then\n\
    \      return true\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_et64py.lua:60:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw_et64py.lua:60:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-ness of\
    \ n\n  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  -- If n is odd,\
    \ then n-1 must be odd.\n  if is_odd(n) then\n    return not is_odd(n - 1)\n \
    \ end\n  -- If n is even, then n-1 must be even.\n  return not is_odd(n - 1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0hku08f.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz0hku08f.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  -- If n is odd, then it can only be prime if even\n\
    \  -- If n is even, then it can only be prime if odd\n  -- If n is odd, then it\
    \ can only be prime if even\n  -- If n is even, then it can only be prime if odd\n\
    \  -- If n is odd, then it can only be prime if even\n  -- If n is even, then\
    \ it can only be prime if odd\n  -- If n is odd, then it can only be prime if\
    \ even\n  -- If n is even, then it can only be prime if odd\n  -- If n is odd,\
    \ then it can only be prime if even\n  -- If n is even, then it can only be prime\
    \ if odd\n  -- If n is odd, then it can only be prime if even\n  -- If n is even,\
    \ then it can only be prime if odd\n  -- If n is odd, then it can only be prime\
    \ if even\n  -- If n is even, then it can only be prime if odd\n  -- If n is odd,\
    \ then it can only be prime if even\n  -- If n is even, then it can only be prime\
    \ if odd\n  -- If n is odd, then it can only be prime if even\n  -- If n is even,\
    \ then it can only be prime if odd\n  -- If n is odd, then it can only be prime\
    \ if even\n  -- If n is even, then it can only be prime if odd\n  -- If n is odd,\
    \ then it can only be prime if even\n  -- If n is even, then it can only be prime\
    \ if odd\n  -- If n is odd, then it can only be prime if even\n  -- If n is even,\
    \ then it can only be prime if odd\n  -- If n is odd, then it can only be prime\
    \ if even\n  -- If n is even, then it can only be prime if odd\n  -- If n is odd,\
    \ then it can only be prime if even\n  -- If n is even, then it can only be prime\
    \ if odd\n  -- If n is odd, then it can only be prime if even\n  -- If n is even,\
    \ then it can only be prime if odd\n  -- If n is odd, then it can only be prime\
    \ if even\n  -- If n is even, then it can only be prime if odd\n  -- If n is odd,\
    \ then it can only be prime if even\n  -- If n is even, then it can only be prime\
    \ if odd\n  -- If n is odd, then it \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsg2wagx3.lua:81: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd, so only need to check odd factors.\n  if n % 2 == 1 then\n \
    \   for i = 2, n do\n      if n % i == 0 then\n        return false\n      end\n\
    \    end\n    return true\n  end\n  -- If n is odd, then (n-1)/2 is even, so need\
    \ to check even factors.\n  local i = 3\n  while i <= math.sqrt(n) do\n    if\
    \ n % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7d5x3ty.lua:50:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmps7d5x3ty.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  if n == 1 then return false end\n  if n == 0 then\
    \ return false end\n  if n == 2 then return true end\n  if n == 3 then return\
    \ true end\n  if n == 4 then return true end\n  if n == 5 then return true end\n\
    \  if n == 6 then return true end\n  if n == 7 then return true end\n  if n ==\
    \ 8 then return true end\n  if n == 9 then return true end\n  if n % 11 == 0 then\
    \ return false end\n  if n % 13 == 0 then return false end\n  if n % 17 == 0 then\
    \ return false end\n  if n % 19 == 0 then return false end\n  if n % 23 == 0 then\
    \ return false end\n  if n % 29 == 0 then return false end\n  if n % 31 == 0 then\
    \ return false end\n  if n % 37 == 0 then return false end\n  if n % 41 == 0 then\
    \ return false end\n  if n % 43 == 0 then return false end\n  if n % 47 == 0 then\
    \ return false end\n  if n % 53 == 0 then return false end\n  if n % 59 == 0 then\
    \ return false end\n  if n % 61 == 0 then return false end\n  if n % 67 == 0 then\
    \ return false end\n  if n % 71 == 0 then return false end\n  if n % 73 == 0 then\
    \ return false end\n  if n % 79 == 0 then return false end\n  if n % 83 == 0 then\
    \ return false end\n  if n % 89 == 0 then return false end\n  if n % 97 == 0 then\
    \ return false end\n  if n % 101 == 0 then return false end\n  if n % 103 == 0\
    \ then return false end\n  if n % 107 == 0 then return false end\n  if n % 111\
    \ == 0 then return false end\n  if n % 117 == 0 then return false end\n  if n\
    \ % 121 == 0 then return false end\n  if n % 127 == 0 then return false end\n\
    \  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return false\
    \ end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29wgxflo.lua:91: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 217 == 0 then return false end\n  if n % 221 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp17tz6dmz.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100007.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000011.txt\n  -- http://primes.utm.edu/lists/small/1000019.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000029.txt\n  -- http://primes.utm.edu/lists/small/1000037.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000071.txt\n  -- http://primes.utm.edu/lists/small/1000073.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000079.txt\n  -- http://primes.utm.edu/lists/small/1000083.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000089.txt\n  -- http://primes.utm.edu/lists/small/1000091.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000093.txt\n  -- http://primes.utm.edu/lists/small/1000099.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000101.txt\n  -- http://primes.utm.edu/lists/small/1000103.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000107.txt\n  -- http://primes.utm.edu/lists/small/1000109.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000111.txt\n  -- http://primes.utm.edu/lists/small/1000113.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000117.txt\n  -- http://primes.utm.edu/lists/small/1000121.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000125.txt\n  -- http://primes.utm.edu/lists/small/1000127.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000131.txt\n  -- http://primes.utm.edu/lists/small/1000137.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000139.txt\n  -- http://primes.utm.edu/lists/small/1000141.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000143.txt\n  -- http://primes.ut\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnsfpcj4y.lua:68: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i * i <= n do\n    if n\
    \ % i == 0 then return false end\n    i = i + 2\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- If n is less than or equal to 1, then n is certainly not prime.\n  if n\
    \ <= 1 then return false end\n  -- If n is even, then n is certainly prime.\n\
    \  if n % 2 == 0 then return true end\n  -- If n is odd, then n is certainly not\
    \ prime.\n  if n % 2 == 1 then return false end\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- If\
    \ n is odd, then n is certainly prime.\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- If\
    \ n is odd, then n is certainly prime.\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- If\
    \ n is odd, then n is certainly prime.\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- If\
    \ n is odd, then n is certainly prime.\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- If\
    \ n is odd, then n is certainly prime.\n  -- If n is odd, then n is certainly\
    \ prime.\n  -- If n is odd, then n is certainly prime.\n  -- If n is odd, then\
    \ n is certainly prime.\n  -- If n is odd, then n is certainly prime.\n  -- \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplisgniij.lua:72: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zwfv7fy.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  local function is_odd(n)\n    return n % 2 ~= 0\n  end\n  -- Test if n is prime.\n\
    \  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Test if n is\
    \ prime.\n  local function is_prime(n)\n    if n < 2 then\n      return false\n\
    \    end\n    if n == 2 then\n      return true\n    end\n    -- Test if n is\
    \ prime.\n    local function is_odd(n)\n      return n % 2 ~= 0\n    end\n   \
    \ -- Test if n is prime.\n    local function is_even(n)\n      return n % 2 ==\
    \ 0\n    end\n    -- Test if n is prime.\n    local function is_prime(n)\n   \
    \   if n < 2 then\n        return false\n      end\n      if n == 2 then\n   \
    \     return true\n      end\n      -- Test if n is prime.\n      local function\
    \ is_odd(n)\n        return n % 2 ~= 0\n      end\n      -- Test if n is prime.\n\
    \      local function is_even(n)\n        return n % 2 == 0\n      end\n     \
    \ -- Test if n is prime.\n      local function is_prime(n)\n        if n < 2 then\n\
    \          return false\n        end\n        if n == 2 then\n          return\
    \ true\n        end\n        -- Test if n is prime.\n        if is_odd(n) then\n\
    \          return is_prime(n - 1)\n        end\n        -- Test if n is prime.\n\
    \        if is_even(n) then\n          return is_prime(n - 2)\n        end\n \
    \       -- Test if n is prime.\n        if is_prime(n - 1) then\n          return\
    \ is_prime(n - 3)\n        end\n        -- Test if n is prime.\n        if is_prime(n\
    \ - 2) then\n          return is_prime(n - 4)\n        end\n        -- Test if\
    \ n is prime.\n        if is_prime(n - 3) then\n          return is_prime(n -\
    \ 5)\n        end\n        -- Test if n is prime.\n        if is_prime(n - 4)\
    \ then\n          return is_prime(n - 6)\n        end\n        -- Test if n is\
    \ prime.\n        if is_prime(n - 5) then\n          return is_prime(n - 7)\n\
    \        end\n        -- Test if n is prime.\n        if is_prime(n - 6) then\n\
    \          return is_prime(n - 8)\n        end\n        -- Test if n is prime.\n\
    \        if is_prime(n - 7) then\n          return is_prime(n - 9)\n        end\n\
    \        \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsca_dqjo.lua:130: ''end'' expected (to close ''function''
    at line 67) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n ==\
    \ 2 then return false end\n  if n % 2 == 0 then return false end\n  local i =\
    \ 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then return false end\n \
    \   i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 then return false end\n  if n == 1\
    \ then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphjx48hqd.lua:39: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime test is based on the sieve of Eratosthenes. \n  -- The sieve consists\
    \ of two lists, one containing the odd numbers, \n  -- and one containing the\
    \ even numbers. \n  -- The first list is generated by starting with the number\
    \ 2, \n  -- incrementing by 2 each time. \n  -- The second list is generated by\
    \ starting with the number 3, \n  -- incrementing by 3 each time. \n  -- The sieve\
    \ is then generated by adding each number to the \n  -- appropriate list in the\
    \ appropriate order. \n  -- The final sieve is a list of all numbers in the range\
    \ \n  -- [2, n). \n  -- The first sieve is generated using the first list. \n\
    \  -- The second sieve is generated using the second list. \n  -- The final sieve\
    \ is generated using the first and second \n  -- lists. \n  -- The sieve is then\
    \ run through all numbers in the range \n  -- [2, n) by removing each number from\
    \ the appropriate list \n  -- until the list is empty. \n  -- The first sieve\
    \ is then run through all numbers in the \n  -- range [2, n) by removing each\
    \ number from the appropriate \n  -- list until the list is empty. \n  -- The\
    \ second sieve is then run through all numbers in the \n  -- range [2, n) by removing\
    \ each number from the appropriate \n  -- list until the list is empty. \n  --\
    \ The final sieve is run through all numbers in the range \n  -- [2, n) by removing\
    \ each number from the appropriate list \n  -- until the list is empty. \n  --\
    \ The final sieve is then run through all numbers in the \n  -- range [2, n) by\
    \ removing each number from the appropriate \n  -- list until the list is empty.\
    \ \n  -- The final sieve is then run through all numbers in the \n  -- range [2,\
    \ n) by removing each number from the appropriate \n  -- list until the list is\
    \ empty. \n  -- The final sieve is then run through all numbers in the \n  --\
    \ range [2, n) by removing each number from the appropriate \n  -- list until\
    \ the list is empty. \n  -- The final sieve is then run through all numbers in\
    \ the \n  -- range [2, n) by removing each number from the appropriate \n  --\
    \ list until the list is empty. \n  -- The final sieve is then run through all\
    \ numbers in the \n  -- range [2, n) by removing each number from the appropriate\
    \ \n  -- list until the list is empty. \n  -- The final sieve is then run through\
    \ all numbers in the \n  -- range [2, n) by removing each number from the appropriate\
    \ \n  -- list until the list is empty\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5nz4rv61.lua:81: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  if n % 5 == 0 then\n\
    \    return false\n  end\n  -- Check divisibility by primes up to and including\
    \ n.\n  local i = 3\n  while i <= n do\n    if n % i == 0 then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbmxsu76.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkbmxsu76.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 1, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_g9gmpht.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_g9gmpht.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750283
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zwfv7fy.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are special cases.\n  local function is_odd_or_even(n)\n\
    \    if n % 2 == 0 then\n      return true\n    end\n    return false\n  end\n\
    \  -- Check odd numbers.\n  if is_odd_or_even(n - 1) then\n    return false\n\
    \  end\n  -- Check even numbers.\n  if is_odd_or_even(n - 2) then\n    return\
    \ true\n  end\n  -- Check numbers that end in 5 or 7.\n  if n % 5 == 0 or n %\
    \ 7 == 0 then\n    return false\n  end\n  -- Check numbers that end in 5.\n  if\
    \ n % 5 == 0 then\n    return true\n  end\n  -- Check numbers that end in 7.\n\
    \  if n % 7 == 0 then\n    return true\n  end\n  -- Check numbers that end in\
    \ 6 or 9.\n  if n % 6 == 0 or n % 9 == 0 then\n    return false\n  end\n  -- Check\
    \ numbers that end in 6.\n  if n % 6 == 0 then\n    return true\n  end\n  -- Check\
    \ numbers that end in 9.\n  if n % 9 == 0 then\n    return true\n  end\n  -- Check\
    \ numbers that end in 10 or 12.\n  if n % 10 == 0 or n % 12 == 0 then\n    return\
    \ false\n  end\n  -- Check numbers that end in 10.\n  if n % 10 == 0 then\n  \
    \  return true\n  end\n  -- Check numbers that end in 12.\n  if n % 12 == 0 then\n\
    \    return true\n  end\n  -- Check numbers that end in 13 or 15.\n  if n % 13\
    \ == 0 or n % 15 == 0 then\n    return false\n  end\n  -- Check numbers that end\
    \ in 13.\n  if n % 13 == 0 then\n    return true\n  end\n  -- Check numbers that\
    \ end in 15.\n  if n % 15 == 0 then\n    return true\n  end\n  -- Check numbers\
    \ that end in 17 or 19.\n  if n % 17 == 0 or n % 19 == 0 then\n    return false\n\
    \  end\n  -- Check numbers that end in 17.\n  if n % 17 == 0 then\n    return\
    \ true\n  end\n  -- Check numbers that end in 19.\n  if n % 19 == 0 then\n   \
    \ return true\n  end\n  -- Check numbers that end in 20 or 22.\n  if n % 20 ==\
    \ 0 or n % 22 == 0 then\n    return false\n  end\n  -- Check numbers that end\
    \ in 20.\n  if n % 20 == 0 then\n    return true\n  end\n  -- Check numbers that\
    \ end in 22.\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcgtzds81.lua:129: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 5 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 7 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 11 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even numbers\n  if n % 13 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even numbers\n  if n % 17 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 19 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 23 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 29 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 31 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 37 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 41 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 43 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 47 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 53 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 59 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 61 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 67 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 71 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 73 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 79 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 83 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 89 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even numbers\n  if n % 97 == 0 then\n    return false\n  end\n  -- \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuw_iidyi.lua:142: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  if n % 5 == 0 then\n\
    \    return false\n  end\n  -- Check divisible by 3 and 5\n  if n % 3 == 0 or\
    \ n % 5 == 0 then\n    return false\n  end\n  -- Check divisible by 3 and 5\n\
    \  if n % 7 == 0 then\n    return false\n  end\n  -- Check divisible by 7\n  if\
    \ n % 11 == 0 then\n    return false\n  end\n  -- Check divisible by 11\n  if\
    \ n % 13 == 0 then\n    return false\n  end\n  -- Check divisible by 13\n  if\
    \ n % 17 == 0 then\n    return false\n  end\n  -- Check divisible by 17\n  if\
    \ n % 19 == 0 then\n    return false\n  end\n  -- Check divisible by 19\n  if\
    \ n % 23 == 0 then\n    return false\n  end\n  -- Check divisible by 23\n  if\
    \ n % 29 == 0 then\n    return false\n  end\n  -- Check divisible by 29\n  if\
    \ n % 31 == 0 then\n    return false\n  end\n  -- Check divisible by 31\n  if\
    \ n % 37 == 0 then\n    return false\n  end\n  -- Check divisible by 37\n  if\
    \ n % 41 == 0 then\n    return false\n  end\n  -- Check divisible by 41\n  if\
    \ n % 43 == 0 then\n    return false\n  end\n  -- Check divisible by 43\n  if\
    \ n % 47 == 0 then\n    return false\n  end\n  -- Check divisible by 47\n  if\
    \ n % 53 == 0 then\n    return false\n  end\n  -- Check divisible by 53\n  if\
    \ n % 59 == 0 then\n    return false\n  end\n  -- Check divisible by 59\n  if\
    \ n % 61 == 0 then\n    return false\n  end\n  -- Check divisible by 61\n  if\
    \ n % 67 == 0 then\n    return false\n  end\n  -- Check divisible by 67\n  if\
    \ n % 71 == 0 then\n    return false\n  end\n  -- Check divisible by 71\n  if\
    \ n % 73 == 0 then\n    return false\n  end\n  -- Check divisible by 73\n  if\
    \ n % 79 == 0 then\n    return false\n  end\n  -- Check divisible by 79\n  if\
    \ n % 83 == 0 then\n    return false\n  end\n  -- Check divisible by 83\n  if\
    \ n % 89 == 0 then\n    return false\n  end\n  -- Check divisible \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm0pvhaak.lua:141: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 2 or n == 3 then return true end\n  if n == 4 or n == 5 then return true\
    \ end\n  if n == 6 then return true end\n  if n == 7 then return true end\n  if\
    \ n == 11 then return true end\n  if n == 13 then return true end\n  if n == 17\
    \ then return true end\n  if n == 19 then return true end\n  if n == 25 then return\
    \ true end\n  if n == 29 then return true end\n  if n == 31 then return true end\n\
    \  if n == 37 then return true end\n  if n == 39 then return true end\n  if n\
    \ == 43 then return true end\n  if n == 47 then return true end\n  if n == 53\
    \ and n <= 59 then return true end\n  if n == 59 and n <= 61 then return true\
    \ end\n  if n == 61\n  and n % 2 == 0 then return false end\n  if n == 61\n  and\
    \ n % 3 == 0 then return false end\n  if n == 61\n  and n % 5 == 0 then return\
    \ false end\n  if n == 61\n  and n % 7 == 0 then return false end\n  if n == 61\n\
    \  and n == 2 or n == 3 then return true end\n  if n == 61\n  and n == 4 or n\
    \ == 5 then return true end\n  if n == 61\n  and n == 6 then return true end\n\
    \  if n == 61\n  and n == 7 then return true end\n  if n == 61\n  and n == 11\
    \ then return true end\n  if n == 61\n  and n == 13 then return true end\n  if\
    \ n == 61\n  and n == 17 then return true end\n  if n == 61\n  and n == 19 then\
    \ return true end\n  if n == 61\n  and n == 25 then return true end\n  if n ==\
    \ 61\n  and n == 29 then return true end\n  if n == 61\n  and n == 31 then return\
    \ true end\n  if n == 61\n  and n == 37 then return true end\n  if n == 61\n \
    \ and n == 39 then return true end\n  if n == 61\n  and n == 43 then return true\
    \ end\n  if n == 61\n  and n == 47 then return true end\n  if n == 61\n  and n\
    \ == 53 and n <= 59 then return true end\n  if n == 61\n  and n == 59 and n <=\
    \ 61 then return true end\n  if n == 61\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptqlsdf0d.lua:83: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 115 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 143 == 0 then return false end\n  if n % 149 == 0 then return\
    \ false end\n  if n % 153 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 203 == 0 then return\
    \ false end\n  if n % 209 == 0 then return false end\n  if n % 215 == 0 then return\
    \ false end\n  if n % 221 == 0 then return false end\n  if n % 227 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfzynkgm_.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/100003.txt\n\
    \  -- http://primes.utm.edu/lists/small/100004.txt\n  -- http://primes.utm.edu/lists/small/100005.txt\n\
    \  -- http://primes.utm.edu/lists/small/100006.txt\n  -- http://primes.utm.edu/lists/small/100007.txt\n\
    \  -- http://primes.utm.edu/lists/small/100008.txt\n  -- http://primes.utm.edu/lists/small/100009.txt\n\
    \  -- http://primes.utm.edu/lists/small/100010.txt\n  -- http://primes.utm.edu/lists/small/100011.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100024.txt\n  -- http://primes.utm.edu/lists/small/100025.txt\n\
    \  -- http://primes.utm.edu/lists/small/100026.txt\n  -- http://primes.utm.edu/lists/small/100027.txt\n\
    \  -- http://primes.utm.edu/lists/small/100028.txt\n  -- http://primes.utm.edu/lists/small/100029.txt\n\
    \  -- http://primes.utm.edu/lists/small/100032.txt\n  -- http://primes.utm.edu/lists/small/100033.txt\n\
    \  -- http://primes.utm.edu/lists/small/100034.txt\n  -- http://primes.utm.edu/lists/small/100035.txt\n\
    \  -- http://primes.utm.edu/lists/small/100036.txt\n  -- http://primes.utm.edu/lists/small/100037.txt\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj1t4iwlj.lua:68: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 2 or n == 3 then return true end\n  if n == 4 then return true end\n  if\
    \ n == 5 then return true end\n  if n == 7 then return true end\n  if n == 6 or\
    \ n == 9 or n == 11 then return true end\n  if n == 13 then return true end\n\
    \  if n == 17 then return true end\n  if n == 19 then return true end\n  if n\
    \ == 25 then return true end\n  if n == 29 then return true end\n  if n == 37\
    \ then return true end\n  if n == 47 then return true end\n  if n == 59 then return\
    \ true end\n  if n == 67 then return true end\n  if n == 79 then return true end\n\
    \  if n == 89 then return true end\n  if n == 97 then return true end\n  if n\
    \ == 109 then return true end\n  if n == 127 then return true end\n  if n == 131\
    \ then return true end\n  if n == 139 then return true end\n  if n == 149 then\
    \ return true end\n  if n == 151 then return true end\n  if n == 157 then return\
    \ true end\n  if n == 163 then return true end\n  if n == 171 then return true\
    \ end\n  if n == 179 then return true end\n  if n == 181 then return true end\n\
    \  if n == 191 then return true end\n  if n == 193 then return true end\n  if\
    \ n == 197 then return true end\n  if n == 199 then return true end\n  if n ==\
    \ 211 then return true end\n  if n == 213 then return true end\n  if n == 217\
    \ then return true end\n  if n == 218 then return true end\n  if n == 223 then\
    \ return true end\n  if n == 227 then return true end\n  if n == 229 then return\
    \ true end\n  if n == 233 then return true end\n  if n == 239 then return true\
    \ end\n  if n == 241 then return true end\n  if n == 243 then return true end\n\
    \  if n == 247 then return true end\n  if n == 251 then return true end\n  if\
    \ n == 253 then return true end\n  if n == 257 then return true end\n  if n ==\
    \ 263 then return true end\n  if n == 265 then return true end\n  if n == 269\
    \ then return true end\n  if n == 271 then return true end\n  if \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg07q3xjz.lua:75: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 169 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 187 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps7bfltyg.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 1 then return false end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  local i\n  for i = 7, 2, -1 do\n    if n % i == 0\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3iw7fyxp.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3iw7fyxp.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/lists/small/100033.txt\n  -- http://primes.utm.edu/lists/small/100034.txt\n\
    \  -- http://primes.utm.edu/lists/small/100035.txt\n  -- http://primes.utm.edu/lists/small/100036.txt\n\
    \  -- http://primes.utm.edu/lists/small/100037.txt\n  -- http://primes.utm.edu/lists/small/100038.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl33xvqnw.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 1 has only\
    \ two divisors: 1 and itself.\n  -- This implementation is based on the assumption\
    \ that the first two numbers in the sequence are prime\n  -- numbers. If the first\
    \ two numbers in the sequence are not prime numbers, then this implementation\
    \ will\n  -- not work.\n  -- >>> is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n\
    \  -- true\n  -- >>> is_prime(11)\n  -- true\n  -- >>> is_prime(13441)\n  -- true\n\
    \  -- >>> is_prime(61)\n  -- true\n  -- >>> is_prime(4)\n  -- false\n  -- >>>\
    \ is_prime(1)\n  -- false\n  -- >>> is_prime(13)\n  -- false\n  -- >>> is_prime(13441)\n\
    \  -- false\n  -- >>> is_prime(13442)\n  -- false\n  -- >>> is_prime(13443)\n\
    \  -- false\n  -- >>> is_prime(13444)\n  -- false\n  -- >>> is_prime(13445)\n\
    \  -- false\n  -- >>> is_prime(13446)\n  -- false\n  -- >>> is_prime(13447)\n\
    \  -- false\n  -- >>> is_prime(13448)\n  -- false\n  -- >>> is_prime(13449)\n\
    \  -- false\n  -- >>> is_prime(134410)\n  -- false\n  -- >>> is_prime(134411)\n\
    \  -- false\n  -- >>> is_prime(134412)\n  -- false\n  -- >>> is_prime(134413)\n\
    \  -- false\n  -- >>> is_prime(134414)\n  -- false\n  -- >>> is_prime(134415)\n\
    \  -- false\n  -- >>> is_prime(134416)\n  -- false\n  -- >>> is_prime(134417)\n\
    \  -- false\n  -- >>> is_prime(134418)\n  -- false\n  -- >>> is_prime(134419)\n\
    \  -- false\n  -- >>> is_prime(134420)\n  -- false\n  -- >>> is_prime(134421)\n\
    \  -- false\n  -- >>> is_prime(134422)\n  -- false\n  -- >>> is_prime(134423)\n\
    \  -- false\n  -- >>> is_prime(134424)\n  -- false\n  -- >>> is_prime(134425)\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4faaojoq.lua:106: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  local function is_odd_or_even(n)\n    return n % 2\
    \ == 0 or n % 2 == 1\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd(n)\n    return not is_odd_or_even(n)\n  end\n  -- Check even numbers\
    \ for primeness\n  local function is_even(n)\n    return not is_odd_or_even(n)\n\
    \  end\n  -- Check odd numbers for primeness\n  local function is_odd_or_even(n)\n\
    \    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check even numbers for primeness\n\
    \  local function is_even(n)\n    return not is_odd_or_even(n)\n  end\n  -- Check\
    \ odd numbers for primeness\n  local function is_odd_or_even(n)\n    return n\
    \ % 2 == 0 or n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local\
    \ function is_even(n)\n    return not is_odd_or_even(n)\n  end\n  -- Check odd\
    \ numbers for primeness\n  local function is_odd_or_even(n)\n    return n % 2\
    \ == 0 or n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local function\
    \ is_even(n)\n    return not is_odd_or_even(n)\n  end\n  -- Check odd numbers\
    \ for primeness\n  local function is_odd_or_even(n)\n    return n % 2 == 0 or\
    \ n % 2 == 1\n  end\n  -- Check even numbers for primeness\n  local function is_even(n)\n\
    \    return not is_odd_or_even(n)\n  end\n  -- Check odd numbers for primeness\n\
    \  local function is_odd_or_even(n)\n    return n % 2 == 0 or n % 2 == 1\n  end\n\
    \  -- Check even numbers for primeness\n  local function is_even(n)\n    return\
    \ not is_odd_or_even(n)\n  end\n  -- Check odd numbers for primeness\n  local\
    \ function is_odd_or_even(n)\n    return n % 2 == 0 or n % 2 == 1\n  end\n  --\
    \ Check even numbers for primeness\n  local function is_even(n)\n    return not\
    \ is_odd_or_even(n)\n  end\n  -- Check odd numbers for primeness\n  local function\
    \ is_odd_or_even(n)\n    return n % 2 == 0 or n % 2 == 1\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplroof78x.lua:90: ''end'' expected (to close ''function'' at
    line 87) near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If n is even, then\
    \ (n-1)/2 is odd.\n  if n % 2 == 1 then\n    return not is_prime((n - 1) / 2)\n\
    \  end\n  -- If n is odd, then (n-1)/2 is even.\n  return not is_prime((n - 1)\
    \ / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyoj740ux.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyoj740ux.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that no prime number is less than twice\
    \ the smallest prime number.\n  -- This is not true for very large numbers. Therefore,\
    \ it is sufficient to check only up to the square root of the number.\n  -- This\
    \ implementation is based on: http://en.wikipedia.org/wiki/Primality_test\n  --\
    \ The implementation below is based on: http://primes.utm.edu/lists/small/millions/\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Miller-Rabin_primality_test\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Lucas_primality_test\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Jacobsen_primality_test\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes_2\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Atkin\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Atkin_2\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_2\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_3\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_4\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_5\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_6\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_7\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_8\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_9\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_10\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_11\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_12\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_13\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sundaram_14\n\
    \  -- The implementation below is based on: http://en.wikipedia.org/wiki/Sieve_of_Sund\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_xie3wme.lua:62: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ can be written as the sum of two prime numbers. However, this is\n  -- not true\
    \ for prime numbers that are not factors of other primes.\n  -- Therefore, it\
    \ is sufficient to check only up to the square root of\n  -- n. An additional\
    \ check is to see if the modulo is zero which means\n  -- that the number is composite.\n\
    \  -- >>> is_prime(11)\n  -- true\n  -- >>> is_prime(12)\n  -- false\n  -- >>>\
    \ is_prime(13)\n  -- false\n  -- >>> is_prime(14)\n  -- false\n  -- >>> is_prime(15)\n\
    \  -- false\n  -- >>> is_prime(16)\n  -- false\n  -- >>> is_prime(17)\n  -- false\n\
    \  -- >>> is_prime(18)\n  -- false\n  -- >>> is_prime(19)\n  -- false\n  -- >>>\
    \ is_prime(20)\n  -- false\n  -- >>> is_prime(21)\n  -- false\n  -- >>> is_prime(22)\n\
    \  -- false\n  -- >>> is_prime(23)\n  -- false\n  -- >>> is_prime(24)\n  -- false\n\
    \  -- >>> is_prime(25)\n  -- false\n  -- >>> is_prime(26)\n  -- false\n  -- >>>\
    \ is_prime(27)\n  -- false\n  -- >>> is_prime(28)\n  -- false\n  -- >>> is_prime(29)\n\
    \  -- false\n  -- >>> is_prime(30)\n  -- false\n  -- >>> is_prime(100)\n  -- true\n\
    \  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(102)\n  -- true\n  -- >>>\
    \ is_prime(103)\n  -- true\n  -- >>> is_prime(104)\n  -- true\n  -- >>> is_prime(105)\n\
    \  -- true\n  -- >>> is_prime(106)\n  -- true\n  -- >>> is_prime(107)\n  -- true\n\
    \  -- >>> is_prime(108)\n  -- true\n  -- >>> is_prime(109)\n  -- true\n  -- >>>\
    \ is_prime(110)\n  -- true\n  -- >>> is_prime(111)\n  -- true\n  -- >>> is_prime(112)\n\
    \  -- true\n  -- >>> is_prime(113)\n  -- true\n  \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpamiy0hot.lua:111: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return false end\n  if n % 207 == 0 then return\
    \ false end\n  if n % 211 == 0 then return false end\n  if n % 217 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg0ew9fzf.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 then return false end\n  if n == 1\
    \ then return true end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphjx48hqd.lua:39: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality testing with Lua 5.2's math.gcd function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial\n\
    \  -- See http://lua-users.org/wiki/PrimalityTesting\n  -- See http://lua-users.org/wiki/PrimalityTestingWithLua\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMath\n  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibrary\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLua\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/PrimalityTestingWithLuaAndMathAndMathLibraryAndLuaAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMathAndMath\n\
    \  -- See http://lua-users.org/wiki/Pri\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi_87uvxy.lua:54: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n  --\
    \ http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Primality_test_in_computers\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division#Trial_division_algorithm\n \
    \ -- http://en.wikipedia.org/wiki/Primality_test#Trial_division_algorithm\n  --\
    \ http://en.wikipedia.org/wiki/Primal\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfci1lg8m.lua:77: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Trial division algorithm\
    \ from Wikipedia.\n  -- http://en.wikipedia.org/wiki/Trial_division\n  -- The\
    \ algorithm is very similar to that of Python's 'in' operator.\n  -- The only\
    \ difference is that it returns 'true' instead of 'false'.\n  -- This algorithm\
    \ is O(n).\n  for i = 3, math.floor(n/2), 2 do\n    if n % i == 0 then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 179 == 0 then return\
    \ false end\n  if n % 183 == 0 then return false end\n  if n % 191 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false end\n  if n % 215 == 0 then return false end\n  if n % 219 == 0 then return\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsknusz46.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(math.sqrt(n))\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primeness\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Primality test. Returns true if n is prime, and false otherwise.\n  -- >>>\
    \ is_prime(6)\n  -- false\n  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(11)\n\
    \  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n  -- true\n\
    \  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n  if n <\
    \ 2 then\n    return false\n  end\n  -- Test for primeness up to and including\
    \ n.\n  local function is_prime_upto(n)\n    if n == 2 then\n      return true\n\
    \    end\n    if n == 1 then\n      return false\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Test for primeness up to and including n.\n  local\
    \ function is_prime_upto_prime(n)\n    if n == 2 then\n      return true\n   \
    \ end\n    if n == 1 then\n      return false\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Test for primeness up to and including n.\n  local\
    \ function is_prime_upto_composite(n)\n    if n == 2 then\n      return true\n\
    \    end\n    if n == 1 then\n      return false\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Test for primeness up to and including n.\n  local\
    \ function is_prime_upto_composite2(n)\n    if n == 2 then\n      return true\n\
    \    end\n    if n == 1 then\n      return false\n    end\n    if n % 2 == 0 then\n\
    \      return false\n    end\n    local i = 3\n    while i * i <= n do\n     \
    \ if n % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n\
    \    return true\n  end\n  -- Test for primeness up to and including n.\n  local\
    \ function is_prime_upto_composite3(n)\n    if n == 2 then\n      return true\n\
    \    end\n    if n == 1 then\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpawtdggle.lua:141: ''end'' expected (to close ''if'' at line
    120) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- If we get here, then\
    \ n is odd and n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then\
    \ n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n \
    \ -- If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is\
    \ even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even, then\
    \ n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n \
    \ -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is\
    \ odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n\
    \ >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  --\
    \ If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even,\
    \ then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n\
    \  -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is\
    \ odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n\
    \ >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  --\
    \ If n is even, then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even,\
    \ then n >= 3.\n  -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n\
    \  -- If n is odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is\
    \ odd, then n >= 3.\n  -- If n is even, then n >= 3.\n  -- If n is odd, then n\
    \ >= 3.\n  -- If n is even, then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo5w2elct.lua:87: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n ==\
    \ 3 then return true end\n  if n % 2 == 0 then return false end\n  if n % 3 ==\
    \ 0 then return false end\n  if n % 5 == 0 then return false end\n  if n % 7 ==\
    \ 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if\
    \ n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpy0po8h.lua:42:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdpy0po8h.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz1othf1f.lua:88: ''end'' expected (to close ''if'' at line
    68) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local m = math.floor(n/2)\n\
    \  for i = 2, m do\n    if n % i == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers\n  if n % 3 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers in factors of 3\n  for i = 5, math.floor(n/3), 2 do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100012.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100021.txt\n  -- http://primes.utm.edu/lists/small/100022.txt\n\
    \  -- http://primes.utm.edu/lists/small/100023.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100030.txt\n\
    \  -- http://primes.utm.edu/lists/small/100031.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpui9ls0z5.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1.\n  if n < 1 then return false end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa5hzv770.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\n  -- If n is even, return false\
    \ right away\n  if n % 2 == 0 then return false end\n  -- If n is odd, return\
    \ true after checking for factors\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 113 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 1253 == 0 then return false end\n  if n % 127 == 0 then\
    \ return false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0\
    \ then return false end\n  if n % 141 == 0 then return false end\n  if n % 147\
    \ == 0 then return false end\n  if n % 151 == 0 then return false end\n  if n\
    \ % 157 == 0 then return false end\n  if n % 161 == 0 then return false end\n\
    \  if n % 165 == 0 then return false end\n  if n % 167 == 0 then return false\
    \ end\n  if n % 171 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8k51z0y3.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 4, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporivfrqx.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmporivfrqx.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 169 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 185 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwyl4cf3q.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/lists/small/100033.txt\n  -- http://primes.utm.edu/lists/small/100034.txt\n\
    \  -- http://primes.utm.edu/lists/small/100035.txt\n  -- http://primes.utm.edu/lists/small/100036.txt\n\
    \  -- http://primes.utm.edu/lists/small/100037.txt\n  -- http://primes.utm.edu/lists/small/100038.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl33xvqnw.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 that has no positive divisors other than 1 is a prime number.\n  -- http://en.wikipedia.org/wiki/Prime_number\n\
    \  -- http://mathworld.wolfram.com/PrimeNumber.html\n  -- http://primes.utm.edu/lists/small/1000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000.txt\n  -- http://primes.utm.edu/lists/small/1000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000.txt\n  -- http://primes.utm.edu/lists/small/1000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/100000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000.txt\n  -- http://primes.utm.edu/lists/small/10000000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000001.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000100.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000100000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/10000000000000000000000000000000010000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100000000000000000000000000000000100000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000000.txt\n\
    \  -- http://primes.utm.edu/lists/small/1000000000000000000000000000000001000000000000000.txt\n\
    \  -- http://primes.ut\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpapw3u5i6.lua:65: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  if n < 2 then\n    return\
    \ false\n  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- http://primes.utm.edu/lists/small/millions/\n \
    \ local function is_odd(n)\n    return n % 2 == 1\n  end\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  local function is_prime_fast(n)\n    -- http://primes.utm.edu/lists/small/millions/\n\
    \    local function is_odd_fast(n)\n      return n % 2 == 1\n    end\n    local\
    \ function is_prime_fast2(n)\n      -- http://primes.utm.edu/lists/small/millions/\n\
    \      local function is_odd_fast2(n)\n        return n % 2 == 1\n      end\n\
    \      local function is_prime_fast3(n)\n        -- http://primes.utm.edu/lists/small/millions/\n\
    \        local function is_odd_fast3(n)\n          return n % 2 == 1\n       \
    \ end\n        local function is_prime_fast4(n)\n          -- http://primes.utm.edu/lists/small/millions/\n\
    \          local function is_odd_fast4(n)\n            return n % 2 == 1\n   \
    \       end\n          local function is_prime_fast5(n)\n            -- http://primes.utm.edu/lists/small/millions/\n\
    \            local function is_odd_fast5(n)\n              return n % 2 == 1\n\
    \            end\n            local function is_prime_fast6(n)\n             \
    \ -- http://primes.utm.edu/lists/small/millions/\n              local function\
    \ is_odd_fast6(n)\n                return n % 2 == 1\n              end\n    \
    \          local function is_prime_fast7(n)\n                -- http://primes.utm.edu/lists/small/millions/\n\
    \                local function is_odd_fast7(n)\n                  return n %\
    \ 2 == 1\n                end\n                local function is_prime_fast8(n)\n\
    \                  -- http://primes.utm.edu/lists/small/millions/\n          \
    \        local function is_odd_fast8(n)\n                    return n % 2 == 1\n\
    \                  end\n                  local function is_prime_fast9(n)\n \
    \                   -- http://primes.utm.edu/lists/small/millions/\n         \
    \           local function is_odd_fast9(n)\n                      return n % 2\
    \ == 1\n                    end\n                    local function is_prime_fast10(n)\n\
    \                      -- http://primes.utm.edu/lists/small/millions/\n      \
    \                local function is_od\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp301dq_rl.lua:80: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n <= 1 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Prime numbers are greater than 1 and divisible by 3.\n  if n < 1 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  -- Check all the numbers\
    \ from 3 to sqrt(n).\n  for i = 4, math.floor(math.sqrt(n)) + 1, 4 do\n    if\
    \ n % i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj68qdfj5.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj68qdfj5.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers for primeness\n  -- The first odd number is always odd, so no need to\
    \ check it\n  -- The first even number is always even, so no need to check it\n\
    \  -- The first odd number is always odd, so no need to check it\n  -- The first\
    \ even number is always even, so no need to check it\n  -- The first odd number\
    \ is always odd, so no need to check it\n  -- The first even number is always\
    \ even, so no need to check it\n  -- The first odd number is always odd, so no\
    \ need to check it\n  -- The first even number is always even, so no need to check\
    \ it\n  -- The first odd number is always odd, so no need to check it\n  -- The\
    \ first even number is always even, so no need to check it\n  -- The first odd\
    \ number is always odd, so no need to check it\n  -- The first even number is\
    \ always even, so no need to check it\n  -- The first odd number is always odd,\
    \ so no need to check it\n  -- The first even number is always even, so no need\
    \ to check it\n  -- The first odd number is always odd, so no need to check it\n\
    \  -- The first even number is always even, so no need to check it\n  -- The first\
    \ odd number is always odd, so no need to check it\n  -- The first even number\
    \ is always even, so no need to check it\n  -- The first odd number is always\
    \ odd, so no need to check it\n  -- The first even number is always even, so no\
    \ need to check it\n  -- The first odd number is always odd, so no need to check\
    \ it\n  -- The first even number is always even, so no need to check it\n  --\
    \ The first odd number is always odd, so no need to check it\n  -- The first even\
    \ number is always even, so no need to check it\n  -- The first odd number is\
    \ always odd, so no need to check it\n  -- The first even number is always even,\
    \ so no need to check it\n  -- The first odd number is always odd, so no need\
    \ to check it\n  -- The first even number is always even, so no need to check\
    \ it\n  -- The first odd number is always odd, so no need to check it\n  -- The\
    \ first even number is always even, so no need to check it\n  -- The first odd\
    \ number is always odd, so no need to check it\n  -- The first even number is\
    \ always even, so no need to check it\n  -- The first odd number is always odd,\
    \ so no need to check it\n  -- The first even number is always even, so no need\
    \ to check it\n  -- The first odd number is always odd, \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp30kly3pg.lua:81: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primality\n  if n % 2 == 1 then\n    return true\n  end\n  -- Check odd-even\
    \ numbers for primality\n  local i = 3\n  while i * i <= n do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2wyldlzs.lua:54:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2wyldlzs.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zwfv7fy.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are the only primes less than n.\n  local function is_odd_or_even(n)\n\
    \    return n % 2 == 0 or n % 2 == 1\n  end\n  -- Check odd numbers since they\
    \ are the only primes less than n.\n  local function is_odd(n)\n    return n %\
    \ 2 == 1\n  end\n  -- Check even numbers since they are the only primes less than\
    \ n.\n  local function is_even(n)\n    return n % 2 == 0\n  end\n  -- Check all\
    \ odd numbers up to n.\n  local function is_odd_up_to_n(n)\n    return not is_odd(n)\
    \ and n <= n\n  end\n  -- Check all even numbers up to n.\n  local function is_even_up_to_n(n)\n\
    \    return not is_even(n) and n <= n\n  end\n  -- Check all odd numbers up to\
    \ n.\n  local function is_odd_up_to_n_or_even(n)\n    return not is_odd(n) or\
    \ not is_even(n) and n <= n\n  end\n  -- Check all even numbers up to n.\n  local\
    \ function is_even_up_to_n_or_even(n)\n    return not is_even(n) or not is_odd(n)\
    \ and n <= n\n  end\n  -- Check all odd numbers up to n.\n  local function is_odd_up_to_n_or_odd_or_even(n)\n\
    \    return not is_odd(n) or not is_even(n) or not is_odd_or_even(n) and n <=\
    \ n\n  end\n  -- Check all even numbers up to n.\n  local function is_even_up_to_n_or_odd_or_even(n)\n\
    \    return not is_even(n) or not is_odd(n) or not is_odd_or_even(n) and n <=\
    \ n\n  end\n  -- Check all odd numbers up to n.\n  local function is_odd_up_to_n_or_odd_or_even_or_prime(n)\n\
    \    return not is_odd(n) or not is_even(n) or not is_odd_or_even(n) or not is_prime(n)\
    \ and n <= n\n  end\n  -- Check all even numbers up to n.\n  local function is_even_up_to_n_or_odd_or_even_or_prime(n)\n\
    \    return not is_even(n) or not is_odd(n) or not is_odd_or_even(n) or not is_prime(n)\
    \ and n <= n\n  end\n  -- Check all odd numbers up to n.\n  local function is_odd_up_to_n_or_odd_or_ev\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp562ddeev.lua:72: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n == 1 then return false end\n  if n == 0 then return false end\n  if n == 2\
    \ then return true end\n  if n == 3 then return true end\n  if n == 4 then return\
    \ true end\n  if n == 5 then return true end\n  if n == 6 then return true end\n\
    \  if n == 7 then return true end\n  if n == 8 then return true end\n  if n ==\
    \ 9 then return true end\n  if n % 11 == 0 then return false end\n  if n % 13\
    \ == 0 then return false end\n  if n % 17 == 0 then return false end\n  if n %\
    \ 19 == 0 then return false end\n  if n % 23 == 0 then return false end\n  if\
    \ n % 29 == 0 then return false end\n  if n % 31 == 0 then return false end\n\
    \  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return false end\n\
    \  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return false end\n\
    \  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return false end\n\
    \  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return false end\n\
    \  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return false end\n\
    \  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return false end\n\
    \  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return false end\n\
    \  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return false\
    \ end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 117 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 123 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 161 == 0 then return false end\n  if n % 167 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgx4zq55k.lua:71: ''end'' expected (to close ''if'' at line
    70) near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 127 == 0 then return\
    \ false end\n  if n % 131 == 0 then return false end\n  if n % 137 == 0 then return\
    \ false end\n  if n % 141 == 0 then return false end\n  if n % 147 == 0 then return\
    \ false end\n  if n % 151 == 0 then return false end\n  if n % 157 == 0 then return\
    \ false end\n  if n % 163 == 0 then return false end\n  if n % 169 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 187 == 0 then return\
    \ false end\n  if n % 191 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 207 == 0 then return false end\n  if n % 211 == 0 then return\
    \ false \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppxcaqj9l.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''lu''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  for i = 3, math.floor(n/2), 2 do\n    if n %\
    \ i == 0 then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n\n  local function is_odd_prime(n)\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  if is_odd_prime(n) then\n    return false\n  end\n  -- Check\
    \ odd-even primality of n+1\n  if is_odd_prime(n + 1) then\n    return false\n\
    \  end\n  -- Check odd-even primality of n-1\n  if is_odd_prime(n - 1) then\n\
    \    return false\n  end\n  -- Check odd-even primality of n+2\n  if is_odd_prime(n\
    \ + 2) then\n    return false\n  end\n  -- Check odd-even primality of n-2\n \
    \ if is_odd_prime(n - 2) then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n+3\n  if is_odd_prime(n + 3) then\n    return false\n  end\n  -- Check odd-even\
    \ primality of n-3\n  if is_odd_prime(n - 3) then\n    return false\n  end\n \
    \ -- Check odd-even primality of n+4\n  if is_odd_prime(n + 4) then\n    return\
    \ false\n  end\n  -- Check odd-even primality of n-4\n  if is_odd_prime(n - 4)\
    \ then\n    return false\n  end\n  -- Check odd-even primality of n+5\n  if is_odd_prime(n\
    \ + 5) then\n    return false\n  end\n  -- Check odd-even primality of n-5\n \
    \ if is_odd_prime(n - 5) then\n    return false\n  end\n  -- Check odd-even primality\
    \ of n+6\n  if is_odd_prime(n + 6) then\n    return false\n  end\n  -- Check odd-even\
    \ primality of n-6\n  if is_odd_prime(n - 6) then\n    return false\n  end\n \
    \ -- Check odd-even primality of n+7\n  if is_odd_prime(n + 7) then\n    return\
    \ false\n  end\n  -- Check odd-even primality of n-7\n  if is_odd_prime(n - 7)\
    \ then\n    return false\n  end\n  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwijd7crl.lua:119: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ can be written as the sum of the only positive natural numbers\n  -- (other\
    \ than 2) that have the same remainder when divided by that number.\n  -- Thus\
    \ it can be shown that all primes are of the form 6k + 1 or 6k - 1.\n  -- For\
    \ our purposes, we shall shall use the convention that the prime 1\n  -- contributes\
    \ nothing to the sum of the other numbers. Hence all primes\n  -- must be of the\
    \ form 6k + 1.\n  -- >>> is_prime(6)\n  -- true\n  -- >>> is_prime(7)\n  -- false\n\
    \  -- >>> is_prime(8)\n  -- false\n  -- >>> is_prime(9)\n  -- false\n  -- >>>\
    \ is_prime(10)\n  -- false\n  -- >>> is_prime(11)\n  -- false\n  -- >>> is_prime(12)\n\
    \  -- false\n  -- >>> is_prime(13)\n  -- false\n  -- >>> is_prime(14)\n  -- false\n\
    \  -- >>> is_prime(15)\n  -- false\n  -- >>> is_prime(16)\n  -- false\n  -- >>>\
    \ is_prime(17)\n  -- false\n  -- >>> is_prime(18)\n  -- false\n  -- >>> is_prime(19)\n\
    \  -- false\n  -- >>> is_prime(20)\n  -- false\n  -- >>> is_prime(21)\n  -- false\n\
    \  -- >>> is_prime(22)\n  -- false\n  -- >>> is_prime(23)\n  -- false\n  -- >>>\
    \ is_prime(24)\n  -- false\n  -- >>> is_prime(25)\n  -- false\n  -- >>> is_prime(26)\n\
    \  -- false\n  -- >>> is_prime(27)\n  -- false\n  -- >>> is_prime(28)\n  -- false\n\
    \  -- >>> is_prime(29)\n  -- false\n  -- >>> is_prime(30)\n  -- false\n  -- >>>\
    \ is_prime(31)\n  -- false\n  -- >>> is_prime(32)\n  -- false\n  -- >>> is_prime(33)\n\
    \  -- false\n  -- >>> is_prime(34)\n  -- false\n  -- >>> is_prime(35)\n  -- false\n\
    \  -- >>> is_prime(36)\n  -- false\n  -- >>> is_prime(37)\n  -- false\n  -- >>>\
    \ is_prime(38)\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdf61ut6g.lua:109: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Test if n is prime.\n\
    \  -- If n is even, then n / 2 is odd, so test if n is prime.\n  if n % 2 == 1\
    \ then\n    return is_prime(n / 2)\n  end\n  -- If n is odd, then n / 2 is even,\
    \ so test if n is prime.\n  -- If n is odd, then n / 2 is even, so test if n is\
    \ prime.\n  -- If n is odd, then n / 2 is even, so test if n is prime.\n  -- If\
    \ n is odd, then n / 2 is even, so test if n is prime.\n  -- If n is odd, then\
    \ n / 2 is even, so test if n is prime.\n  -- If n is odd, then n / 2 is even,\
    \ so test if n is prime.\n  -- If n is odd, then n / 2 is even, so test if n is\
    \ prime.\n  -- If n is odd, then n / 2 is even, so test if n is prime.\n  -- If\
    \ n is odd, then n / 2 is even, so test if n is prime.\n  -- If n is odd, then\
    \ n / 2 is even, so test if n is prime.\n  -- If n is odd, then n / 2 is even,\
    \ so test if n is prime.\n  -- If n is odd, then n / 2 is even, so test if n is\
    \ prime.\n  -- If n is odd, then n / 2 is even, so test if n is prime.\n  -- If\
    \ n is odd, then n / 2 is even, so test if n is prime.\n  -- If n is odd, then\
    \ n / 2 is even, so test if n is prime.\n  -- If n is odd, then n / 2 is even,\
    \ so test if n is prime.\n  -- If n is odd, then n / 2 is even, so test if n is\
    \ prime.\n  -- If n is odd, then n / 2 is even, so test if n is prime.\n  -- If\
    \ n is odd, then n / 2 is even, so test if n is prime.\n  -- If n is odd, then\
    \ n / 2 is even, so test if n is prime.\n  -- If n is odd, then n / 2 is even,\
    \ so test \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9g7oj3xt.lua:71: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that a prime number greater than 2\n  --\
    \ is only conjectured to be composite if and only if that prime is\n  -- conjectured\
    \ to be a factor of n. Thus, a prime number greater than 2\n  -- is only conjectured\
    \ to be a factor of n if n divides it.\n  -- http://en.wikipedia.org/wiki/Prime_number_theorem\n\
    \  -- http://oeis.org/A001490\n  -- http://oeis.org/A001492\n  -- http://oeis.org/A001493\n\
    \  -- http://oeis.org/A001494\n  -- http://oeis.org/A001495\n  -- http://oeis.org/A001496\n\
    \  -- http://oeis.org/A001497\n  -- http://oeis.org/A001498\n  -- http://oeis.org/A001499\n\
    \  -- http://oeis.org/A001500\n  -- http://oeis.org/A001501\n  -- http://oeis.org/A001502\n\
    \  -- http://oeis.org/A001503\n  -- http://oeis.org/A001504\n  -- http://oeis.org/A001505\n\
    \  -- http://oeis.org/A001506\n  -- http://oeis.org/A001507\n  -- http://oeis.org/A001508\n\
    \  -- http://oeis.org/A001509\n  -- http://oeis.org/A001510\n  -- http://oeis.org/A001511\n\
    \  -- http://oeis.org/A001512\n  -- http://oeis.org/A001513\n  -- http://oeis.org/A001514\n\
    \  -- http://oeis.org/A001515\n  -- http://oeis.org/A001516\n  -- http://oeis.org/A001517\n\
    \  -- http://oeis.org/A001518\n  -- http://oeis.org/A001519\n  -- http://oeis.org/A001520\n\
    \  -- http://oeis.org/A001521\n  -- http://oeis.org/A001522\n  -- http://oeis.org/A001523\n\
    \  -- http://oeis.org/A001524\n  -- http://oeis.org/A001525\n  -- http://oeis.org/A001526\n\
    \  -- http://\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfxpme3co.lua:78: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n <= 1 then return false end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd8khzbgm.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n\
    \    if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 1 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n  if n\
    \ % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n  if\
    \ n % 11 == 0 then return false end\n  if n % 13 == 0 then return false end\n\
    \  if n % 17 == 0 then return false end\n  if n % 19 == 0 then return false end\n\
    \  if n % 23 == 0 then return false end\n  if n % 29 == 0 then return false end\n\
    \  if n % 31 == 0 then return false end\n  if n % 37 == 0 then return false end\n\
    \  if n % 41 == 0 then return false end\n  if n % 43 == 0 then return false end\n\
    \  if n % 47 == 0 then return false end\n  if n % 53 == 0 then return false end\n\
    \  if n % 59 == 0 then return false end\n  if n % 61 == 0 then return false end\n\
    \  if n % 67 == 0 then return false end\n  if n % 71 == 0 then return false end\n\
    \  if n % 73 == 0 then return false end\n  if n % 79 == 0 then return false end\n\
    \  if n % 83 == 0 then return false end\n  if n % 89 == 0 then return false end\n\
    \  if n % 97 == 0 then return false end\n  if n % 101 == 0 then return false end\n\
    \  if n % 103 == 0 then return false end\n  if n % 107 == 0 then return false\
    \ end\n  if n % 111 == 0 then return false end\n  if n % 117 == 0 then return\
    \ false end\n  if n % 121 == 0 then return false end\n  if n % 1253 == 0 then\
    \ return false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0\
    \ then return false end\n  if n % 137 == 0 then return false end\n  if n % 141\
    \ == 0 then return false end\n  if n % 147 == 0 then return false end\n  if n\
    \ % 151 == 0 then return false end\n  if n % 157 == 0 then return false end\n\
    \  if n % 161 == 0 then return false end\n  if n % 165 == 0 then return false\
    \ end\n  if n % 169 == 0 then return false end\n  if n % 173 == 0 then return\
    \ false end\n  if n % 177 == 0 then return false end\n  if n % 181 == 0 then return\
    \ false end\n  if n % 185 == 0 then return false end\n  if n % 189 == 0 then return\
    \ false end\n  if n % 193 == 0 then return false end\n  if n % 197 == 0 then return\
    \ false end\n  if n % 201 == 0 then return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7uunlc5b.lua:69: ''end'' expected (to close ''if'' at line
    68) near ''=''

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case\n  if n < 2 then\n    return false\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx8fv401k.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even numbers\
    \ for primeness\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i ==\
    \ 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 1 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd and even\
    \ numbers since they are the only ones that\n  -- are factors of primes.\n  if\
    \ n % 3 == 0 then\n    return false\n  end\n  -- Check all the odd numbers between\
    \ 2 and sqrt(n).\n  for i = 2, math.sqrt(n) + 1 do\n    if n % i == 0 then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then return false end\n  if n == 2 then return true end\n  if n %\
    \ 2 == 0 then return false end\n  -- Trial division algorithm from Wikipedia.\n\
    \  -- http://en.wikipedia.org/wiki/Trial_division\n  local i = 3\n  while i <=\
    \ math.sqrt(n) do\n    if n % i == 0 then return false end\n    i = i + 2\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- The prime number theorem states that every positive integer greater than\
    \ 1 can be expressed as the sum of a prime and a single non-prime integer. \n\
    \  -- This theorem implies that there are an infinite number of positive integers\
    \ m such that m is prime, where m > 1 and some of these integers are composite.\n\
    \  -- In fact, there are an infinite number of non-negative integers m such that\
    \ m is prime, where m > 1 and some of these integers are composite.\n  -- See\
    \ https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  -- The algorithm\
    \ used here is a modification of the Sieve of Eratosthenes algorithm\n  -- See\
    \ https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n  -- The algorithm used\
    \ here is a modification of the Sieve of Atkin\n  -- See https://en.wikipedia.org/wiki/Sieve_of_Atkin\n\
    \  -- The algorithm used here is a modification of the Sieve of Ramanujan\n  --\
    \ See https://en.wikipedia.org/wiki/Sieve_of_Ramanujan\n  -- The algorithm used\
    \ here is a modification of the Sieve of Sundaram (https://people.sc.fsu.edu/~jburkardt/f_src/Sieve-Sundaram/Sieve-Sundaram.html)\n\
    \  -- See https://en.wikipedia.org/wiki/Sieve_of_Sundaram\n  -- The algorithm\
    \ used here is a modification of the Sieve of Sundaram (https://people.sc.fsu.edu/~jburkardt/f_src/Sieve-Sundaram/Sieve-Sundaram.html)\n\
    \  -- See https://en.wikipedia.org/wiki/Sieve_of_Sundaram\n  -- The algorithm\
    \ used here is a modification of the Sieve of Sundaram (https://people.sc.fsu.edu/~jburkardt/f_src/Sieve-Sundaram/Sieve-Sundaram.html)\n\
    \  -- See https://en.wikipedia.org/wiki/Sieve_of_Sundaram\n  -- The algorithm\
    \ used here is a modification of the Sieve of Sundaram (https://people.sc.fsu.edu/~jburkardt/f_src/Sieve-Sundaram/Sieve-Sundaram.html)\n\
    \  -- See https://en.wikipedia.org/wiki/Sieve_of_Sundaram\n  -- The algorithm\
    \ used here is a modification of the Sieve of Sundaram (https://people.sc.fsu.edu/~jburkardt/f_src/Sieve-Sundaram/Sieve-Sund\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9d63r4r8.lua:55: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100013.txt\n\
    \  -- http://primes.utm.edu/lists/small/100014.txt\n  -- http://primes.utm.edu/lists/small/100015.txt\n\
    \  -- http://primes.utm.edu/lists/small/100016.txt\n  -- http://primes.utm.edu/lists/small/100017.txt\n\
    \  -- http://primes.utm.edu/lists/small/100018.txt\n  -- http://primes.utm.edu/lists/small/100019.txt\n\
    \  -- http://primes.utm.edu/lists/small/100020.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/lists/small/100033.txt\n  -- http://primes.utm.edu/lists/small/100034.txt\n\
    \  -- http://primes.utm.edu/lists/small/100035.txt\n  -- http://primes.utm.edu/lists/small/100036.txt\n\
    \  -- http://primes.utm.edu/lists/small/100037.txt\n  -- http://primes.utm.edu/lists/small/100038.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl33xvqnw.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  -- http://primes.utm.edu/lists/small/10000.txt\n\
    \  -- http://primes.utm.edu/lists/small/100003.txt\n  -- http://primes.utm.edu/lists/small/100004.txt\n\
    \  -- http://primes.utm.edu/lists/small/100005.txt\n  -- http://primes.utm.edu/lists/small/100006.txt\n\
    \  -- http://primes.utm.edu/lists/small/100007.txt\n  -- http://primes.utm.edu/lists/small/100008.txt\n\
    \  -- http://primes.utm.edu/lists/small/100009.txt\n  -- http://primes.utm.edu/lists/small/100010.txt\n\
    \  -- http://primes.utm.edu/lists/small/100011.txt\n  -- http://primes.utm.edu/lists/small/100012.txt\n\
    \  -- http://primes.utm.edu/lists/small/100013.txt\n  -- http://primes.utm.edu/lists/small/100014.txt\n\
    \  -- http://primes.utm.edu/lists/small/100015.txt\n  -- http://primes.utm.edu/lists/small/100016.txt\n\
    \  -- http://primes.utm.edu/lists/small/100017.txt\n  -- http://primes.utm.edu/lists/small/100018.txt\n\
    \  -- http://primes.utm.edu/lists/small/100019.txt\n  -- http://primes.utm.edu/lists/small/100020.txt\n\
    \  -- http://primes.utm.edu/lists/small/100021.txt\n  -- http://primes.utm.edu/lists/small/100022.txt\n\
    \  -- http://primes.utm.edu/lists/small/100023.txt\n  -- http://primes.utm.edu/lists/small/100024.txt\n\
    \  -- http://primes.utm.edu/lists/small/100025.txt\n  -- http://primes.utm.edu/lists/small/100026.txt\n\
    \  -- http://primes.utm.edu/lists/small/100027.txt\n  -- http://primes.utm.edu/lists/small/100028.txt\n\
    \  -- http://primes.utm.edu/lists/small/100029.txt\n  -- http://primes.utm.edu/lists/small/100030.txt\n\
    \  -- http://primes.utm.edu/lists/small/100031.txt\n  -- http://primes.utm.edu/lists/small/100032.txt\n\
    \  -- http://primes.utm.edu/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpui9ls0z5.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i =\
    \ i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_prime\n    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_5zais6.lua:40: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821699
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  -- http://en.wikipedia.org/wiki/Primality_test\n  if n < 2 then\n    return\
    \ false\n  end\n  if n == 1 then\n    return true\n  end\n  if n % 2 == 0 then\n\
    \    return false\n  end\n  -- http://primes.utm.edu/lists/small/millions/\n \
    \ -- >>> is_prime(6)\n  -- true\n  -- >>> is_prime(101)\n  -- true\n  -- >>> is_prime(11)\n\
    \  -- true\n  -- >>> is_prime(13441)\n  -- true\n  -- >>> is_prime(61)\n  -- true\n\
    \  -- >>> is_prime(4)\n  -- false\n  -- >>> is_prime(1)\n  -- false\n  local function\
    \ is_odd(n)\n    return not n % 2\n  end\n  -- http://primes.utm.edu/lists/small/millions/\n\
    \  -- >>> is_odd(6)\n  -- true\n  -- >>> is_odd(101)\n  -- true\n  -- >>> is_odd(11)\n\
    \  -- true\n  -- >>> is_odd(13441)\n  -- true\n  -- >>> is_odd(61)\n  -- true\n\
    \  -- >>> is_odd(4)\n  -- false\n  -- >>> is_odd(1)\n  -- false\n  local function\
    \ is_prime_fast(n)\n    local function is_odd_fast(n)\n      -- http://primes.utm.edu/lists/small/millions/\n\
    \      -- >>> is_odd_fast(6)\n      -- true\n      -- >>> is_odd_fast(101)\n \
    \     -- true\n      -- >>> is_odd_fast(11)\n      -- true\n      -- >>> is_odd_fast(13441)\n\
    \      -- true\n      -- >>> is_odd_fast(61)\n      -- true\n      -- >>> is_odd_fast(4)\n\
    \      -- false\n      -- >>> is_odd_fast(1)\n      -- false\n      return not\
    \ n % 2\n    end\n    local function is_prime_fast2(n)\n      -- http://primes.utm.edu/lists/small/millions/\n\
    \      -- >>> is_prime_fast2(6)\n      -- true\n      -- >>> is_prime_fast2(101)\n\
    \      -- true\n      -- >>> is_prime_fast2(11)\n      -- true\n      -- >>> is_prime_fast2(13441)\n\
    \      -- true\n      -- >>> is_prime_fast2(61)\n      -- true\n      -- >>> is_prime_fast2(4)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
    \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
    \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
    \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
    \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
    \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
    \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpctq09kwj.lua:112: ''end'' expected (to close ''function''
    at line 79) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
- exit_code: 0
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750245
- exit_code: 1
  program: "-- Return true if a given number is prime, and false otherwise.\n-- >>>\
    \ is_prime(6)\n-- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n\
    -- true\n-- >>> is_prime(13441)\n-- true\n-- >>> is_prime(61)\n-- true\n-- >>>\
    \ is_prime(4)\n-- false\n-- >>> is_prime(1)\n-- false\nlocal function is_prime(n)\n\
    \  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n\
    \  end\n  if n % 2 == 0 then\n    return false\n  end\n  -- Check odd-even number\n\
    \  if n % 2 == 1 then\n    return not is_prime(n - 1)\n  end\n  -- Check odd-even\
    \ number\n  if n % 3 == 0 then\n    return not is_prime(n - 2)\n  end\n  -- Check\
    \ odd-even number\n  if n % 5 == 0 then\n    return not is_prime(n - 3)\n  end\n\
    \  -- Check odd-even number\n  if n % 7 == 0 then\n    return not is_prime(n -\
    \ 4)\n  end\n  -- Check odd-even number\n  if n % 11 == 0 then\n    return not\
    \ is_prime(n - 5)\n  end\n  -- Check odd-even number\n  if n % 13 == 0 then\n\
    \    return not is_prime(n - 6)\n  end\n  -- Check odd-even number\n  if n % 17\
    \ == 0 then\n    return not is_prime(n - 7)\n  end\n  -- Check odd-even number\n\
    \  if n % 19 == 0 then\n    return not is_prime(n - 8)\n  end\n  -- Check odd-even\
    \ number\n  if n % 23 == 0 then\n    return not is_prime(n - 9)\n  end\n  -- Check\
    \ odd-even number\n  if n % 29 == 0 then\n    return not is_prime(n - 10)\n  end\n\
    \  -- Check odd-even number\n  if n % 31 == 0 then\n    return not is_prime(n\
    \ - 11)\n  end\n  -- Check odd-even number\n  if n % 37 == 0 then\n    return\
    \ not is_prime(n - 12)\n  end\n  -- Check odd-even number\n  if n % 41 == 0 then\n\
    \    return not is_prime(n - 13)\n  end\n  -- Check odd-even number\n  if n %\
    \ 43 == 0 then\n    return not is_prime(n - 14)\n  end\n  -- Check odd-even number\n\
    \  if n % 47 == 0 then\n    return not is_prime(n - 15)\n  end\n  -- Check odd-even\
    \ number\n  if n % 53 == 0 then\n    return not is_prime(n - 16)\n  end\n  --\
    \ Check odd-even number\n  if n % 59 == 0 then\n    return not is_prime(n - 17)\n\
    \  end\n  -- Check odd-even number\n  if n % 61 == 0 then\n    return not is_prime(n\
    \ - 18)\n  end\n  -- Check odd-even number\n  if n % 67 == 0 then\n    return\
    \ not is_prime(n - 19)\n  end\n  -- Check odd-even number\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_prime\n    lu.assertEquals(candidate(6),\
    \ false)\n    lu.assertEquals(candidate(101), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(13441), true)\n    lu.assertEquals(candidate(61),\
    \ true)\n    lu.assertEquals(candidate(4), false)\n    lu.assertEquals(candidate(1),\
    \ false)\n    lu.assertEquals(candidate(5), true)\n    lu.assertEquals(candidate(11),\
    \ true)\n    lu.assertEquals(candidate(17), true)\n    lu.assertEquals(candidate(85),\
    \ false)\n    lu.assertEquals(candidate(77), false)\n    lu.assertEquals(candidate(255379),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdvd5dsm0.lua:122: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659821700
