language: lua
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local t\
    \ = {}\n    for i,v in ipairs(s) do\n        if v:match('^[a-zA-Z]') then\n  \
    \          t[#t+1] = v:lower()\n        else\n            t[#t+1] = v\n      \
    \  end\n    end\n    table.sort(t)\n    local s = ''\n    for i,v in ipairs(t)\
    \ do\n        if i ~= #t then\n            s = s .. v\n        else\n        \
    \    s = s .. v\n        end\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r6tee94.lua:15:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp4r6tee94.lua:15: in function 'candidate'\n\t/tmp/tmp4r6tee94.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local ret\
    \ = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n   \
    \         ret = string.sub(s,i,i)\n        else\n            ret = string.sub(s,i,#s)\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpminuuupo.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpminuuupo.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= \"\" then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpphxhv780.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmpphxhv780.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local s =\
    \ string.lower(s)\n  local len = string.len(s)\n  local i = 0\n  while i < len\
    \ do\n    if string.sub(s,i,i) ~= nil then\n      local c = string.sub(s,i,i)\n\
    \      if string.sub(c,1,1) ~= nil then\n        local t = string.sub(c,1,1)\n\
    \        string.sub(c,1,1) = string.sub(c,2,2)\n        string.sub(c,2,2) = t\n\
    \      else\n        string.sub(c,1,1) = string.sub(c,2,2)\n        string.sub(c,2,2)\
    \ = string.sub(c,3,3)\n        string.sub(c,3,3) = string.sub(c,1,1)\n      end\n\
    \    end\n    i = i + 1\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwm7_89h3.lua:22: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)..result\n    \
    \  else\n        result = string.sub(s,i,i)..result\n      end\n    else\n   \
    \   result = string.sub(s,i,i)..result\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3nukflfp.lua:32:\
    \ expected: \"aSdF\"\nactual: \"fDsA\"\nstack traceback:\n\t/tmp/tmp3nukflfp.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local new_s\
    \ = ''\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= nil then\n     \
    \       if string.sub(s,i,i) ~= string.sub(s,i,i) then\n                new_s\
    \ = string.sub(s,i,i)\n            else\n                new_s = string.upper(string.sub(s,i,i))\n\
    \            end\n        else\n            new_s = string.sub(s,i,i)\n      \
    \  end\n    end\n    return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8x6p98pg.lua:32:\
    \ expected: \"aSdF\"\nactual: \"F\"\nstack traceback:\n\t/tmp/tmp8x6p98pg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.char(c),\"\
    a\") then\n      c = string.upper(c)\n    elseif string.find(string.char(c),\"\
    A\") then\n      c = string.lower(c)\n    end\n    result = result .. c\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppasw_yck.lua:17:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmppasw_yck.lua:17: in function 'candidate'\n\t/tmp/tmppasw_yck.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local s =\
    \ string.lower(s)\n  local t = {}\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ ~= nil then\n      table.insert(t,string.upper(string.sub(s,i,i)))\n    else\n\
    \      table.insert(t,string.lower(string.sub(s,i,i)))\n    end\n  end\n  return\
    \ table.concat(t, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjn925wjk.lua:29:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpjn925wjk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  s = string.lower(s)\n\
    \  local new_s = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n\
    \      new_s = string.sub(s,i,i) + new_s\n    else\n      new_s = string.sub(s,i,i)\
    \ + new_s\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5aa18ncl.lua:18:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp5aa18ncl.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp5aa18ncl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local s\
    \ = string.lower(s)\n    local new_s = \"\"\n    for i = 1, #s do\n        if\
    \ string.sub(s,i,i) ~= nil then\n            local c = string.sub(s,i,i)\n   \
    \         if string.sub(c,1,1) ~= nil then\n                c = string.upper(c)\n\
    \            else\n                c = string.lower(c)\n            end\n    \
    \        new_s = new_s .. c\n        else\n            new_s = new_s .. string.sub(s,i,i)\n\
    \        end\n    end\n    return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8za54pq.lua:35:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpd8za54pq.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\
    \ = \"\"\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= \"\" then\n  \
    \          local char = string.sub(s,i,i)\n            if string.sub(char,1,1)\
    \ ~= \"\" then\n                local lower = string.lower(char)\n           \
    \     local upper = string.upper(char)\n                if lower ~= upper then\n\
    \                    result = result .. upper\n                else\n        \
    \            result = result .. lower\n                end\n            else\n\
    \                result = result .. char\n            end\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll1i8kfl.lua:37:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmpll1i8kfl.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local str\
    \ = ''\n    for i=1,#s do\n        if string.sub(s,i,i) ~= nil then\n        \
    \    str = str .. string.sub(s,i,i)\n        else\n            str = str .. string.sub(s,i,#s)\n\
    \        end\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky1k60gg.lua:28:\
    \ expected: \"aSdF\"\nactual: \"AsDf\"\nstack traceback:\n\t/tmp/tmpky1k60gg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ehxv6fw.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp1ehxv6fw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(string.char(c),'a')\
    \ then\n      result = string.gsub(string.gsub(c,'a','A'),'b','B')\n    elseif\
    \ string.find(string.char(c),'b') then\n      result = string.gsub(string.gsub(c,'b','B'),'a','A')\n\
    \    else\n      result = c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzc5ey6er.lua:17:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzc5ey6er.lua:17: in function 'candidate'\n\t/tmp/tmpzc5ey6er.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ehxv6fw.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp1ehxv6fw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      if string.sub(s,i,i)\
    \ ~= string.sub(s,i,i) then\n        result = string.sub(s,i,i)\n      else\n\
    \        result = string.sub(s,i,i):lower() + result\n      end\n    else\n  \
    \    result = string.sub(s,i,i):lower() + result\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_jqkf0n.lua:20:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpa_jqkf0n.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpa_jqkf0n.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n    local result\
    \ = \"\"\n    for i = 1, #s do\n        local char = string.sub(s,i,i)\n     \
    \   if char:match(\"^[%aA]$\") then\n            char = string.upper(char)\n \
    \       else\n            char = string.lower(char)\n        end\n        result\
    \ = result .. char\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57sn_5dp.lua:30:\
    \ expected: \"aSdF\"\nactual: \"ASDF\"\nstack traceback:\n\t/tmp/tmp57sn_5dp.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = \"\"\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      result\
    \ = string.sub(s,i,i)\n    else\n      result = string.sub(s,i,#s)\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ehxv6fw.lua:28:\
    \ expected: \"aSdF\"\nactual: \"f\"\nstack traceback:\n\t/tmp/tmp1ehxv6fw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750218
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local result\
    \ = ''\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= nil then\n      local\
    \ char = string.sub(s,i,i)\n      if string.sub(s,i,i) ~= char then\n        char\
    \ = string.upper(char)\n      else\n        char = string.lower(char)\n      end\n\
    \      result = result .. char\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate('AsDf'),\
    \ 'aSdF')\n    lu.assertEquals(candidate('1234'), '4321')\n    lu.assertEquals(candidate('ab'),\
    \ 'AB')\n    lu.assertEquals(candidate('#a@C'), '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'),\
    \ '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'), '2@6#')\n    lu.assertEquals(candidate('#$a^D'),\
    \ '#$A^d')\n    lu.assertEquals(candidate('#ccc'), '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpnblaq1.lua:32:\
    \ expected: \"aSdF\"\nactual: \"asdf\"\nstack traceback:\n\t/tmp/tmpqpnblaq1.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750254
- exit_code: 1
  program: "-- You are given a string s.\n-- if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n-- otherwise keep it as it is.\n-- If the\
    \ string contains no letters, reverse the string.\n-- The function should return\
    \ the resulted string.\n-- Examples\n-- >>> solve('1234')\n-- '4321'\n-- >>> solve('ab')\n\
    -- 'AB'\n-- >>> solve('#a@C')\n-- '#A@c'\nlocal function solve(s)\n  local function\
    \ helper(s)\n    local t = {}\n    for i = 1, #s do\n      local c = string.sub(s,i,i)\n\
    \      if string.find(string.chars(),c) then\n        table.insert(t,string.upper(c))\n\
    \      else\n        table.insert(t,c)\n      end\n    end\n    return table.concat(t,\
    \ \"\")\n  end\n  return helper(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate('AsDf'), 'aSdF')\n    lu.assertEquals(candidate('1234'),\
    \ '4321')\n    lu.assertEquals(candidate('ab'), 'AB')\n    lu.assertEquals(candidate('#a@C'),\
    \ '#A@c')\n    lu.assertEquals(candidate('#AsdfW^45'), '#aSDFw^45')\n    lu.assertEquals(candidate('#6@2'),\
    \ '2@6#')\n    lu.assertEquals(candidate('#$a^D'), '#$A^d')\n    lu.assertEquals(candidate('#ccc'),\
    \ '#CCC')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovd8ah8r.lua:18:\
    \ attempt to call field 'chars' (a nil value)\nstack traceback:\n\t/tmp/tmpovd8ah8r.lua:18:\
    \ in function </tmp/tmpovd8ah8r.lua:14>\n\t(tail call): ?\n\t/tmp/tmpovd8ah8r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750254
