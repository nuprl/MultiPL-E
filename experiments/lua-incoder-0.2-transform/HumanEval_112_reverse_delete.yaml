name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a tuple containing the result string and True/False\
  \ for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n\
  -- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba',\
  \ 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- We are given two strings s and c, you have to deleted all the\
    \ characters in s that are equal to any character in c\n  -- then check if the\
    \ result string is palindrome.\n  -- A string is called palindrome if it reads\
    \ the same backward as forward.\n  -- You should return a tuple containing the\
    \ result string and True/False for the check.\n  -- Example\n  -- >>> reverse_delete('abcde',\
    \ 'ae')\n  -- {'bcd', false}\n  -- >>> reverse_delete('abcdef', 'b')\n  -- {'acdef',\
    \ false}\n  -- >>> reverse_delete('abcdedcba', 'ab')\n  -- {'cdedc', true}", " \
    \ local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if\
    \ s[i] == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome\
    \ = false\n    end\n  end\n  if #result == 0 and is_palindrome then\n    return\
    \ {'', true}\n  end\n  return {'' .. table.concat(result, ''), is_palindrome}\n\
    end", "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome\
    \ = false\n    end\n  end\n  if #result == #s then\n    return result, is_palindrome\n\
    \  else\n    return result, is_palindrome\n  end\nend", "  local result = {}\n\
    \  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] == c then\n   \
    \   table.insert(result, s[i])\n    else\n      is_palindrome = false\n    end\n\
    \  end\n  if #result == #s then\n    return { table.concat(result), is_palindrome\
    \ }\n  else\n    return { table.concat(result), is_palindrome }\n  end\nend",
  "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i]\
    \ == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome =\
    \ false\n    end\n  end\n  if is_palindrome then\n    return { table.concat(result),\
    \ is_palindrome }\n  else\n    return { table.concat(result), false }\n  end\n\
    end", "  local result = {}\n  local index = 1\n  while index <= #s do\n    if\
    \ s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  if #result == 0 then\n    return s, true\n\
    \  else\n    return result, false\n  end\nend", "  local result = {s}\n  local\
    \ i = 1\n  while i <= #s do\n    if s[i]:sub(1, #c) == c then\n      result[#result+1]\
    \ = s[i]:sub(1, #c)\n      i = i + 1\n    else\n      result[#result+1] = s[i]\n\
    \      i = i + 1\n    end\n  end\n  if result[#result+1] ~= \"\" then\n    result[#result+1]\
    \ = \"\"\n  end\n  return result, #result == #result\nend", "  -- Base case\n\
    \  if #s == 0 then\n    return s, true\n  end", "  local result = {}\n  local\
    \ is_palindrome = true\n  for i = 1, #s do\n    if s[i] ~= c then\n      result[#result\
    \ + 1] = s[i]\n    else\n      is_palindrome = false\n    end\n  end\n  if #result\
    \ == #s then\n    return { result, is_palindrome }\n  end\n  local reversed_result\
    \ = reverse_delete(result, c)\n  if reversed_result[1] == reversed_result[2] then\n\
    \    return { reversed_result[1], is_palindrome }\n  end\n  return { reversed_result[2],\
    \ is_palindrome }\nend", "  local result = {}\n  local is_palindrome = true\n\
    \  for i = 1, #s do\n    local char = s[i]\n    if char == c then\n      -- Delete\
    \ the character\n      s = s:sub(1, i - 1)\n      -- Check if the string is a\
    \ palindrome\n      is_palindrome = is_palindrome and s == reverse_delete(s, c)\n\
    \    else\n      -- Add the character to the result\n      result[#result + 1]\
    \ = char\n    end\n  end\n  return { s = s, is_palindrome = is_palindrome }, is_palindrome\n\
    end", "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome\
    \ = false\n    end\n  end\n  if is_palindrome then\n    return { table.concat(result),\
    \ is_palindrome }\n  end\n  return { s, is_palindrome }\nend", "  local result\
    \ = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] == c then\n\
    \      table.insert(result, s[i])\n    else\n      is_palindrome = false\n   \
    \ end\n  end\n  if is_palindrome then\n    return { table.concat(result), is_palindrome\
    \ }\n  else\n    return { table.concat(result), false }\n  end\nend", "  local\
    \ result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] ==\
    \ c then\n      table.insert(result, s[i])\n    else\n      is_palindrome = false\n\
    \    end\n  end\n  if #result == #s then\n    return { table.concat(result), is_palindrome\
    \ }\n  else\n    return { table.concat(result), is_palindrome }\n  end\nend",
  "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i]\
    \ == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome =\
    \ false\n    end\n  end\n  if #result == #s then\n    return { table.concat(result),\
    \ is_palindrome }\n  end\n  return nil\nend", "\tlocal result = {}\n\tlocal is_palindrome\
    \ = true\n\tfor i = 1, #s do\n\t\tif s[i] == c then\n\t\t\ttable.insert(result,\
    \ s[i])\n\t\telse\n\t\t\tis_palindrome = false\n\t\tend\n\tend\n\treturn { table.concat(result),\
    \ is_palindrome }\nend", "  local result = {}\n  local is_palindrome = true\n\
    \  for i = 1, #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \    else\n      is_palindrome = false\n    end\n  end\n  if is_palindrome then\n\
    \    return { table.concat(result), is_palindrome }\n  else\n    return { table.concat(result),\
    \ is_palindrome }\n  end\nend", "  local result = {}\n  local is_palindrome =\
    \ true\n  for i = 1, #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n    else\n      is_palindrome = false\n    end\n  end\n  if is_palindrome\
    \ then\n    return { table.concat(result), is_palindrome }\n  else\n    return\
    \ { table.concat(result), false }\n  end\nend", "  local result = ''\n  local\
    \ flag = true\n  for i = 1, #s do\n    if s[i] == c then\n      result = result\
    \ .. s[i]\n    else\n      result = result .. s[i]\n      flag = false\n    end\n\
    \  end\n  if flag == true then\n    return { result, true }\n  else\n    return\
    \ { result, false }\n  end\nend", "  local result = {}\n  local is_palindrome\
    \ = true\n  for i = 1, #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n    else\n      is_palindrome = false\n    end\n  end\n  if #result ==\
    \ #s then\n    return { table.concat(result, \"\"), is_palindrome }\n  end\n \
    \ return { table.concat(result, \"\"), is_palindrome }\nend", "  local result\
    \ = ''\n  local flag = true\n  for i = 1, #s do\n    if s[i] == c then\n     \
    \ result = result .. s[i]\n      flag = false\n    else\n      result = result\
    \ .. s[i]\n    end\n  end\n  if flag and result ~= s then\n    return { result,\
    \ false }\n  else\n    return { s, true }\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
