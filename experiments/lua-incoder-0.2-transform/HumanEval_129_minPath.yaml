name: HumanEval_129_minPath
language: lua
prompt: "-- Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n-- each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have\
  \ to find the minimum path of length k in the grid. You can start\n-- from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n-- in other words,\
  \ you can go to cells which share an edge with you current\n-- cell.\n-- Please\
  \ note that a path of length k means visiting exactly k cells (not\n-- necessarily\
  \ distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered\
  \ less than a path B (of length k) if\n-- after making the ordered lists of the\
  \ values on the cells that A and B go\n-- through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n-- than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer\
  \ is unique.\n-- Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n-- Examples:    \n-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7,\
  \ 8, 9}}, 3)\n-- {1, 2, 1}\n-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)\n\
  -- {1}\nlocal function minPath(grid, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n\
  \    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n\
  \    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n   \
  \ lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14,\
  \ 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5,\
  \ 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n  \
  \  lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3,\
  \ 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7,\
  \ 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1,\
  \ 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16,\
  \ 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2,\
  \ 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6,\
  \ 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1,\
  \ 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1,\
  \ 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal results = {}\n\tlocal current_cell\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal cell\n\tlocal cells\n\tlocal cells_len\n\tlocal cells_len2\n\
    \tlocal cells_len3\n\tlocal cells_len4\n\tlocal cells_len5\n\tlocal cells_len6\n\
    \tlocal cells_len7\n\tlocal cells_len8\n\tlocal cells_len9\n\tlocal cells_len10\n\
    \tlocal cells_len11\n\tlocal cells_len12\n\tlocal cells_len13\n\tlocal cells_len14\n\
    \tlocal cells_len15\n\tlocal cells_len16\n\tlocal cells_len17\n\tlocal cells_len18\n\
    \tlocal cells_len19\n\tlocal cells_len20\n\tlocal cells_len21\n\tlocal cells_len22\n\
    \tlocal cells_len23\n\tlocal cells_len24\n\tlocal cells_len25\n\tlocal cells_len26\n\
    \tlocal cells_len27\n\tlocal cells_len28\n\tlocal cells_len29\n\tlocal cells_len30\n\
    \tlocal cells_len31\n\tlocal cells_len32\n\tlocal cells_len33\n\tlocal cells_len34\n\
    \tlocal cells_len35\n\tlocal cells_len36\n\tlocal cells_len37\n\tlocal cells_len38\n\
    \tlocal cells_len39\n\tlocal cells_len40\n\tlocal cells_len41\n\tlocal cells_len42\n\
    \tlocal cells_len43\n\tlocal cells_len44\n\tlocal cells_len45\n\tlocal cells_len46\n\
    \tlocal cells_len47\n\tlocal cells_len48\n\tlocal cells_len49\n\tlocal cells_len50\n\
    \tlocal cells_len51\n\tlocal cells_len52\n\tlocal cells_len53\n\tlocal cells_len54\n\
    \tlocal cells_len55\n\tlocal cells_len56\n\tlocal cells_len57\n\tlocal cells_len58\n\
    \tlocal cells_len59\n\tlocal cells_len60\n\tlocal cells_len61\n\tlocal cells_len62\n\
    \tlocal cells_len63\n\tlocal cells_len64\n\tlocal cells_len65\n\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal count\
    \ = 0\n\tlocal ans = {}\n\tlocal function dfs(i, j)\n\t\tif visited[i][j] then\n\
    \t\t\treturn\n\t\tend\n\t\tvisited[i][j] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tcount = count + 1\n\t\tif i == #grid then\n\t\t\tlocal v = grid[i][j]\n\
    \t\t\tfor i = 1, #lst_A do\n\t\t\t\tif lst_A[i] > v then\n\t\t\t\t\tlst_A[i] =\
    \ v\n\t\t\t\t\tans[i] = v\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor\
    \ i = 1, #lst_B do\n\t\t\t\tif lst_B[i] > v then\n\t\t\t\t\tlst_B[i] = v\n\t\t\
    \t\t\tans[i] = v\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn\n\t\t\
    end\n\t\tlocal i1 = i + 1\n\t\tlocal j1 = j + 1\n\t\tlocal i2 = i - 1\n\t\tlocal\
    \ j2 = j - 1\n\t\tif i1 < 1 then\n\t\t\tdfs(i2, j2)\n\t\telseif j1 < 1 then\n\t\
    \t\tdfs(i1, j2)\n\t\telseif i2 >= #grid then\n\t\t\tdfs(i1, j1)\n\t\telseif j2\
    \ >= #grid then\n\t\t\tdfs(i2, j1)\n\t\telse\n\t\t\tlocal i3 = i1 + 1\n\t\t\t\
    local j3 = j1 + 1\n\t\t\tlocal i4 = i2 - 1\n\t\t\tlocal j4 = j2 - 1\n\t\t\tif\
    \ i3 < 1 then\n\t\t\t\tdfs(i4, j3)\n\t\t\telseif j3 < 1 then\n\t\t\t\tdfs(i3,\
    \ j4)\n\t\t\telseif i4 >= #grid then\n\t\t\t\tdfs(i3, j3)\n\t\t\telseif j4 >=\
    \ #grid then\n\t\t\t\tdfs(i4, j3)\n\t\t\telse\n\t\t\t\tlocal i5 = i3 + 1\n\t\t\
    \t\tlocal j5 = j3 + 1\n\t\t\t\tlocal i6 = i4 - 1\n\t\t\t\tlocal j6 = j4 - 1\n\t\
    \t\t\tif i5 < 1 then\n\t\t\t\t\tdfs(i6, j5)\n\t\t\t\telseif j5 < 1 then\n\t\t\t\
    \t\tdfs(i5, j6)\n\t\t\t\telseif i6 >= #grid then\n\t\t\t\t\tdfs(i5, j5)\n\t\t\t\
    \telseif j6 >= #grid then\n\t\t\t\t\tdfs(i6, j5)\n\t\t\t\telse\n\t\t\t\t\tlocal\
    \ i7 = i5 + 1\n\t\t\t\t\tlocal j7 = j5 + 1\n\t\t\t\t\tlocal i8 = i6 - 1\n\t\t\t\
    \t\tlocal j8 = j6 - 1\n\t\t\t\t\tif i7 < 1 then\n\t\t\t\t\t\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal function dfs(i,\
    \ j)\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlocal val = grid[i][j]\n\
    \t\tif val == nil then return end\n\t\tif lst_A[val] == nil then\n\t\t\tlst_A[val]\
    \ = j\n\t\telse\n\t\t\tlst_B[val] = j\n\t\tend\n\t\tlocal cnt = 0\n\t\tfor k =\
    \ 1, k do\n\t\t\tif visited[i + k] or visited[j + k] then break end\n\t\t\tcnt\
    \ = cnt + 1\n\t\tend\n\t\tif cnt < k then\n\t\t\tlocal tmp = lst_A[val]\n\t\t\t\
    lst_A[val] = lst_B[val]\n\t\t\tlst_B[tmp] = val\n\t\tend\n\tend\n\tfor i = 1,\
    \ #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tif not visited[i + j] then\n\t\t\
    \t\tdfs(i, j)\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #grid do\n\t\tfor j = 1,\
    \ #grid[1] do\n\t\t\tif visited[i + j] then\n\t\t\t\tans[#ans + 1] = grid[i][j]\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "  local lst_A, lst_B = {}, {}\n\
    \  local visited = {}\n  local visited_count = 0\n  local i, j = 1, 1\n  while\
    \ i <= #grid do\n    visited[i] = true\n    visited_count = visited_count + 1\n\
    \    local cell = {}\n    for k = 1, k do\n      cell[k] = grid[i][j]\n    end\n\
    \    lst_A[#lst_A + 1] = cell\n    i = i + 1\n  end\n  while j <= #grid do\n \
    \   visited[j] = true\n    visited_count = visited_count + 1\n    local cell =\
    \ {}\n    for k = 1, k do\n      cell[k] = grid[i][j]\n    end\n    lst_B[#lst_B\
    \ + 1] = cell\n    j = j + 1\n  end\n  local lst_A_size = #lst_A\n  local lst_B_size\
    \ = #lst_B\n  local lst_A_sorted = {}\n  local lst_B_sorted = {}\n  for i = 1,\
    \ lst_A_size do\n    lst_A_sorted[#lst_A_sorted + 1] = lst_A[i]\n  end\n  for\
    \ i = 1, lst_B_size do\n    lst_B_sorted[#lst_B_sorted + 1] = lst_B[i]\n  end\n\
    \  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local\
    \ lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted\
    \ = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted =\
    \ lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n\
    \  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local\
    \ lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted\
    \ = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted =\
    \ lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n\
    \  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local\
    \ lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted", "\tlocal\
    \ lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal results = {}\n\
    \tlocal count = 0\n\tlocal visited_count = 0\n\tlocal current_cell\n\tlocal current_cell_value\n\
    \tlocal current_cell_neighbors\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors\n\tlocal\
    \ current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\tlocal\
    \ current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\t\
    local current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_",
  "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n\
    \  local visited_max = 0\n  local visited_max_count = 0\n  local visited_max_value\
    \ = 0\n  local visited_max_index = 0\n  local visited_max_index2 = 0\n  local\
    \ visited_max_index3 = 0\n  local visited_max_index4 = 0\n  local visited_max_index5\
    \ = 0\n  local visited_max_index6 = 0\n  local visited_max_index7 = 0\n  local\
    \ visited_max_index8 = 0\n  local visited_max_index9 = 0\n  local visited_max_index10\
    \ = 0\n  local visited_max_index11 = 0\n  local visited_max_index12 = 0\n  local\
    \ visited_max_index13 = 0\n  local visited_max_index14 = 0\n  local visited_max_index15\
    \ = 0\n  local visited_max_index16 = 0\n  local visited_max_index17 = 0\n  local\
    \ visited_max_index18 = 0\n  local visited_max_index19 = 0\n  local visited_max_index20\
    \ = 0\n  local visited_max_index21 = 0\n  local visited_max_index22 = 0\n  local\
    \ visited_max_index23 = 0\n  local visited_max_index24 = 0\n  local visited_max_index25\
    \ = 0\n  local visited_max_index26 = 0\n  local visited_max_index27 = 0\n  local\
    \ visited_max_index28 = 0\n  local visited_max_index29 = 0\n  local visited_max_index30\
    \ = 0\n  local visited_max_index31 = 0\n  local visited_max_index32 = 0\n  local\
    \ visited_max_index33 = 0\n  local visited_max_index34 = 0\n  local visited_max_index35\
    \ = 0\n  local visited_max_index36 = 0\n  local visited_max_index37 = 0\n  local\
    \ visited_max_index38 = 0\n  local visited_max_index39 = 0\n  local visited_max_index40\
    \ = 0\n  local visited_max_index41 = 0\n  local visited_max_index42 = 0\n  local\
    \ visited_max_index43 = 0\n  local visited_max_index44 = 0\n  local visited_max_index45\
    \ = 0\n  local visited_max_index46 = 0\n  local visited_max_index47 = 0\n  local\
    \ visited_max_index48 = 0\n  local visited_max_index49 = 0\n  local visited_max_index50\
    \ = 0\n  local visited_max_index51 = 0\n  local visited_max_index52 = 0", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_count_max = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n", "\tlocal lst_A, lst_B = {}, {}\n\tfor\
    \ i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B, grid[i])\n\
    \tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal visited\
    \ = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A\
    \ do\n\t\t\tif visited[j] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvisited[j] = true\n\
    \t\t\tif lst_A[j] == lst_B[i] then\n\t\t\t\ttable.insert(ans, lst_A[j])\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\n\
    end", "  local lst_A = {}\n  local lst_B = {}\n  local index = 1\n  for i = 1,\
    \ #grid do\n    for j = 1, #grid[1] do\n      lst_A[index] = grid[i][j]\n    \
    \  lst_B[index] = grid[j][i]\n      index = index + 1\n    end\n  end\n  lst_A[index]\
    \ = grid[#grid][1][#grid[1]][1]\n  lst_B[index] = grid[#grid][#grid][#grid][#grid][#grid][1]\n\
    \  local ans = {}\n  local i = index\n  while i <= k do\n    local j = 1\n   \
    \ while j <= #lst_A do\n      if lst_A[i] < lst_B[j] then\n        ans[i] = lst_A[i]\n\
    \        break\n      elseif lst_A[i] > lst_B[j] then\n        ans[i] = lst_B[j]\n\
    \        break\n      else\n        j = j + 1\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return ans\nend", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid\
    \ do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n  end\n\
    \  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  local visited =\
    \ {}\n  local i = 1\n  while i <= k do\n    local j = 1\n    while j <= #lst_A\
    \ do\n      if visited[i] == false then\n        visited[i] = true\n        local\
    \ k = i\n        while k <= #lst_B do\n          if lst_A[k] < lst_B[k] then\n\
    \            k = k + 1\n          else\n            table.insert(ans, lst_A[k])\n\
    \            k = k + 1\n          end\n        end\n      end\n      j = j + 1\n\
    \    end\n    i = i + 1\n  end\n  return ans\nend", "  local lst_A, lst_B = {},\
    \ {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  for i = 1, k do\n    local j = k - i\n    local tmp = lst_A[j]\n    lst_A[j]\
    \ = lst_A[j + 1]\n    lst_A[j + 1] = tmp\n    tmp = lst_B[j]\n    lst_B[j] = lst_B[j\
    \ + 1]\n    lst_B[j + 1] = tmp\n    table.insert(ans, lst_A[j])\n  end\n  return\
    \ ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\twhile i\
    \ <= k and i <= #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\t\ti = i + 1\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\t\
    local ans = {}\n\tlocal j = 1\n\twhile j <= k do\n\t\tif lst_A[j] == lst_B[j]\
    \ then\n\t\t\ttable.insert(ans, lst_A[j])\n\t\t\tj = j + 1\n\t\telse\n\t\t\tj\
    \ = j + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal\
    \ row, col = unpack(grid)\n\tlocal function dfs(row, col, visited, visited_count,\
    \ min_path)\n\t\tvisited[row * col + col] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tif visited_count == k then\n\t\t\tlocal path = {}\n\t\t\tfor i = 1,\
    \ row do\n\t\t\t\tfor j = 1, col do\n\t\t\t\t\tif visited[row * col + j] then\n\
    \t\t\t\t\t\ttable.insert(path, j)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \ttable.insert(min_path, path)\n\t\telse\n\t\t\tfor i = 1, row do\n\t\t\t\tfor\
    \ j = 1, col do\n\t\t\t\t\tif visited[row * col + j] then\n\t\t\t\t\t\tlocal next_row\
    \ = row - i\n\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\tif next_row < 0\
    \ or next_col < 0 then\n\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count,\
    \ min_path)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\
    \t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\tif next_row < 0 or next_col < 0\
    \ then\n\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\t\
    local next_col = col - j\n\t\t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\
    \t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\t\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\
    \t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\tif next_row < 0 or next_col <\
    \ 0 then\n\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count,\
    \ min_path)\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tlocal next_row = row\
    \ - i\n\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\t\tif next_row\
    \ < 0 or next_col < 0 then\n\t\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited,\
    \ visited_count, min_path)\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ next_row = row - i\n\t\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\
    \t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\t\t\t\t\t\t\t\t\t\t\t\tdfs(next_row,\
    \ next_col, visited, visited_count, min_path)\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\
    \t\t\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\t\t\t\t\tlocal next_col\
    \ = col - j\n\t\t\t\t\t\t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\
    \t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal next_row = row -\
    \ i\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\tif next_row < 0 or next_col", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local index = 1\n\tlocal visited = {}\n\tlocal visited_index = {}\n\tlocal visited_index[1]\
    \ = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3] = 3\n\tlocal visited_index[4]\
    \ = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6] = 6\n\tlocal visited_index[7]\
    \ = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9] = 9\n\tlocal visited_index[10]\
    \ = 10\n\tlocal visited_index[11] = 11\n\tlocal visited_index[12] = 12\n\tlocal\
    \ visited_index[13] = 13\n\tlocal visited_index[14] = 14\n\tlocal visited_index[15]\
    \ = 15\n\tlocal visited_index[16] = 16\n\tlocal visited_index[17] = 17\n\tlocal\
    \ visited_index[18] = 18\n\tlocal visited_index[19] = 19\n\tlocal visited_index[20]\
    \ = 20\n\tlocal visited_index[21] = 21\n\tlocal visited_index[22] = 22\n\tlocal\
    \ visited_index[23] = 23\n\tlocal visited_index[24] = 24\n\tlocal visited_index[25]\
    \ = 25\n\tlocal visited_index[26] = 26\n\tlocal visited_index[27] = 27\n\tlocal\
    \ visited_index[28] = 28\n\tlocal visited_index[29] = 29\n\tlocal visited_index[30]\
    \ = 30\n\tlocal visited_index[31] = 31\n\tlocal visited_index[32] = 32\n\tlocal\
    \ visited_index[33] = 33\n\tlocal visited_index[34] = 34\n\tlocal visited_index[35]\
    \ = 35\n\tlocal visited_index[36] = 36\n\tlocal visited_index[37] = 37\n\tlocal\
    \ visited_index[38] = 38\n\tlocal visited_index[39] = 39\n\tlocal visited_index[40]\
    \ = 40\n\tlocal visited_index[41] = 41\n\tlocal visited_index[42] = 42\n\tlocal\
    \ visited_index[43] = 43\n\tlocal visited_index[44] = 44\n\tlocal visited_index[45]\
    \ = 45\n\tlocal visited_index[46] = 46\n\tlocal visited_index[47] = 47\n\tlocal\
    \ visited_index[48] = 48\n\tlocal visited_index[49] = 49\n\tlocal visited_index",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal i, j, val\n\tlocal count = 0\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1]\
    \ do\n\t\t\tval = grid[i][j]\n\t\t\tif val == nil then\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\t\tlst_A[#lst_A + 1] = val\n\t\t\tlst_B[#lst_B + 1] = val\n\t\tend\n\t\
    end\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal function dfs(i, j)\n\t\t\
    visited[#visited + 1] = true\n\t\tvisited_count = visited_count + 1\n\t\tif i\
    \ == #grid then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tif j == #grid[1]\
    \ then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tif visited[#visited\
    \ + 1] == true then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tdfs(i\
    \ + 1, j)\n\t\tdfs(i - 1, j)\n\t\tdfs(i, j + 1)\n\t\tdfs(i, j - 1)\n\tend\n\t\
    dfs(1, #grid[1])\n\tlocal path = {}\n\tlocal function dfs_helper(i, j)\n\t\tif\
    \ i == #grid then\n\t\t\tpath[#path + 1] = lst_A[i]\n\t\t\treturn\n\t\tend\n\t\
    \tif j == #grid[1] then\n\t\t\tpath[#path + 1] = lst_B[j]\n\t\t\treturn\n\t\t\
    end\n\t\tif visited[#visited + 1] == true then\n\t\t\treturn\n\t\tend\n\t\tdfs_helper(i\
    \ + 1, j)\n\t\tdfs_helper(i - 1, j)\n\t\tdfs_helper(i, j + 1)\n\t\tdfs_helper(i,\
    \ j - 1)\n\tend\n\tdfs_helper(1, #grid[1])\n\treturn path\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = #visited\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\
    \tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal\
    \ ans = {}\n\tlocal n = #grid\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\
    \tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = i\n\t\twhile j <= n do\n\t\t\t\
    if not visited[j] then\n\t\t\t\tvisited[j] = true\n\t\t\t\tlocal value = grid[i][j]\n\
    \t\t\t\tlocal ii = i - 1\n\t\t\t\tlocal jj = j - 1\n\t\t\t\tlocal ii_next = i\
    \ - 1\n\t\t\t\tlocal jj_next = j - 1\n\t\t\t\twhile ii > 0 and grid[ii][jj] ~=\
    \ value do\n\t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next\
    \ - 1\n\t\t\t\t\tjj = jj_next - 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\
    \t\t\t\tlocal jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value\
    \ do\n\t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next +\
    \ 1\n\t\t\t\t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\
    \t\t\tlocal jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\
    \t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\
    \t\t\t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\t\
    local jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\
    \t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\
    \t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal\
    \ jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\t\t\
    \tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\t\t\
    jj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal jj_next\
    \ = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\t\t\tii_next\
    \ = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\t\tjj = jj_next\
    \ + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal jj_next = j +\
    \ 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value ", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[#lst_A + 1]\
    \ = grid[i][j]\n\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\ti = i + 1\n\t\tj = j +\
    \ 1\n\t\tif j > #grid then\n\t\t\tj = 1\n\t\t\ti = i + 1\n\t\tend\n\tend\n\tlocal\
    \ lst_A_size = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal i = 1\n\twhile i <=\
    \ k do\n\t\tif lst_A[i] > lst_B[i] then\n\t\t\tlocal temp = lst_A[i]\n\t\t\tlst_A[i]\
    \ = lst_B[i]\n\t\t\tlst_B[i] = temp\n\t\tend\n\t\ti = i + 1\n\t\tif i > lst_A_size\
    \ then\n\t\t\ti = lst_A_size\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i,\
    \ j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j]\
    \ == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\telseif grid[i][j] > grid[i][j] then\n\t\t\t\tlst_B[count] = grid[i][j]\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal index = 1\n\t\
    while index <= k do\n\t\tlocal temp = lst_A[index]\n\t\tindex = index + 1\n\t\t\
    if index > k then\n\t\t\tindex = k\n\t\tend\n\t\tif index > #lst_A then\n\t\t\t\
    index = #lst_A\n\t\tend\n\t\tif lst_A[index] < lst_B[index] then\n\t\t\tlst_A[index]\
    \ = temp\n\t\tend\n\tend\n\t\n\tlocal ans = {}\n\tfor i = 1, #lst_A do\n\t\tans[#ans\
    \ + 1] = lst_A[i]\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\
    \tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "  local lst_A = {}\n  local lst_B = {}\n  local visited = {}\n  local\
    \ ans = {}\n  local n = 0\n  for i = 1, #grid do\n    local cell = grid[i]\n \
    \   local val = cell[1]\n    if visited[val] == nil then\n      visited[val] =\
    \ true\n      lst_A[#lst_A + 1] = val\n      lst_B[#lst_B + 1] = val\n      n\
    \ = n + 1\n    end\n  end\n  local i = 1\n  while i <= n do\n    local val = lst_A[i]\n\
    \    local j = i\n    while j <= n do\n      local cell = {lst_A[j], lst_B[j]}\n\
    \      if visited[cell] == nil then\n        visited[cell] = true\n        lst_A[#lst_A\
    \ + 1] = cell[1]\n        lst_B[#lst_B + 1] = cell[1]\n        j = j + 1\n   \
    \   else\n        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  for i\
    \ = 1, #ans do\n    ans[i] = lst_A[i]\n  end\n  return ans\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\t\
    table.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 0\n\twhile i <= k do\n\t\tlocal j = i\n\t\twhile\
    \ j > 0 and lst_A[j - 1] > lst_A[j] do\n\t\t\tj -= 1\n\t\tend\n\t\ttable.insert(ans,\
    \ lst_A[j])\n\t\ti = j + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_index\
    \ = {}\n\tlocal visited_index_count = 0\n\tlocal visited_index_map = {}\n\tlocal\
    \ visited_index_map_count = 0\n\tlocal visited_index_map_count_map = {}\n\tlocal\
    \ visited_index_map_count_map_map = {}\n\tlocal visited_index_map_count_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map = {}\n\tlocal visited_index_map_count_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map = {}\n\tlocal\
    \ visited_index_map_count_map_map_map_map_map_map = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map = {}\n\
    \tlocal visited_index_map_count_map_map_map_map_map_map_map_map = {}\n\tlocal\
    \ visited_index_map_count_map_map_map_map_map_map_map_map_map = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map =\
    \ {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map_map\
    \ = {}\n\tlocal visited_index_map_count_map_map_map_map_map_map_", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal min_path = {}\n\tlocal min_path_count = 0\n\tlocal\
    \ visited_lst_A, visited_lst_B = {}, {}\n\tlocal visited_lst_A_count = 0\n\tlocal\
    \ visited_lst_B_count = 0\n\tlocal min_path_lst_A, min_path_lst_B = {}, {}\n\t\
    local min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count,\
    \ min_path_lst_B_count = 0\n\tlocal min_path_lst_A_count, min_path_lst_B_count\
    \ = 0\n\tlocal min_path_lst_A_count, min_path_l", "  local lst_A, lst_B = {},\
    \ {}\n  local i, j, k\n  for i = 1, #grid do\n    for j = 1, #grid[i] do\n   \
    \   lst_A[grid[i][j]] = lst_A[grid[i][j]] or grid[i][j]\n      lst_B[grid[i][j]]\
    \ = lst_B[grid[i][j]] or grid[i][j]\n    end\n  end\n  local visited = {}\n  local\
    \ ans = {}\n  local visited_count = 0\n  local ans_count = 0\n  local visited_count_max\
    \ = 0\n  local ans_count_max = 0\n  local visited_count_max_count = 0\n  local\
    \ ans_count_max_count = 0\n  local visited_count_max_count_max = 0\n  local ans_count_max_count_max\
    \ = 0\n  local visited_count_max_count_max_count = 0\n  local ans_count_max_count_max_count\
    \ = 0\n  local visited_count_max_count_max_count_max = 0\n  local ans_count_max_count_max_count_max\
    \ = 0\n  local visited_count_max_count_max_count_max_count = 0\n  local ans_count_max_count_max_count_max_count\
    \ = 0\n  local visited_count_max_count_max_count_max_count_max = 0\n  local ans_count_max_count_max_count_max_count_max\
    \ = 0\n  local visited_count_max_count_max_count_max_count_max_count = 0\n  local\
    \ ans_count_max_count_max_count_max_count_max_count = 0\n  local visited_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local ans_count_max_count_max_count_max_count_max_count = 0\n  local\
    \ visited_count_max_count_max_count_max_count_max_count_max = 0\n  local ans_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local visited_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local ans_count_max_count_max_count_max_count_max_count_max_count = 0\n\
    \  local visited_count_max_count_max_count_max_count_max_count_max_count_max =\
    \ 0\n  local ans_count_max_count_max_count_max_count_max_count_max_count_max =\
    \ 0\n  local visited_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local ans_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local visited_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local ans_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local visited_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local ans_count_max_count_max_count_max_count_max_count_max_", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ count = 0\n\tlocal visited_index = {}\n\tlocal index = 1\n\tlocal current_cell\n\
    \tlocal current_cell_index\n\tlocal current_cell_value\n\tlocal current_cell_neighbors\n\
    \tlocal current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\t\
    local current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_count\n\tlocal current_cell_neighbors_index\n\tlocal\
    \ current_cell_neighbors_value\n\tlocal current_cell_neighbors_count\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_value\n", "  local\
    \ lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n\
    \    table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  for i = 1, k do\n    local j = #lst_A\n    while j > 0 do\n\
    \      local k = j - 1\n      local x = lst_A[k]\n      if x < lst_B[k] then\n\
    \        local y = lst_B[k]\n        lst_A[k] = lst_A[j]\n        lst_B[k] = lst_B[j]\n\
    \        lst_A[j] = x\n        lst_B[j] = y\n      else\n        j = k\n     \
    \ end\n    end\n    table.insert(ans, lst_A[i])\n  end\n  return ans\nend", " \
    \ local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n\
    \  local results = {}\n  for i = 1, #grid do\n    local cell = grid[i]\n    local\
    \ value = cell[1]\n    if visited[value] then\n      visited_count = visited_count\
    \ + 1\n      continue\n    end\n    visited[value] = true\n    visited_count =\
    \ visited_count + 1\n    lst_A[visited_count] = value\n    for j = 2, #cell do\n\
    \      local neighbor = cell[j]\n      local value = neighbor[1]\n      if visited[value]\
    \ then\n        visited_count = visited_count + 1\n        continue\n      end\n\
    \      visited[value] = true\n      visited_count = visited_count + 1\n      lst_B[visited_count]\
    \ = value\n    end\n  end\n  local lst_A_sorted = table.sort(lst_A)\n  local lst_B_sorted\
    \ = table.sort(lst_B)\n  local i = 0\n  while i < k and visited_count ~= #lst_A\
    \ do\n    i = i + 1\n    local value = lst_A_sorted[i]\n    local j = #lst_B\n\
    \    while j > 0 and lst_B_sorted[j - 1] > value do\n      j = j - 1\n    end\n\
    \    if j > 0 then\n      local neighbor = lst_B_sorted[j]\n      lst_B_sorted[j]\
    \ = neighbor\n      lst_B_sorted[j - 1] = value\n    end\n  end\n  local count\
    \ = 0\n  while i < #lst_A do\n    count = count + 1\n    local value = lst_A_sorted[i]\n\
    \    local j = #lst_B\n    while j > 0 and lst_B_sorted[j - 1] > value do\n  \
    \    j = j - 1\n    end\n    if j > 0 then\n      local neighbor = lst_B_sorted[j]\n\
    \      lst_B_sorted[j] = neighbor\n      lst_B_sorted[j - 1] = value\n    end\n\
    \  end\n  table.sort(results)\n  for i = 1, #results do\n    results[i] = results[i][1]\n\
    \  end\n  return results\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j =\
    \ 1, 1\n\twhile i <= #grid do\n\t\tlocal value = grid[i][j]\n\t\tif value == nil\
    \ then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] = value\n\t\tlst_B[#lst_B\
    \ + 1] = value\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A_size = #lst_A\n\
    \tlocal lst_B_size = #lst_B\n\tlocal lst_A_sorted = table.sort(lst_A)\n\tlocal\
    \ lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sor", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\
    \tfor i = 1, n do\n\t\tlst_A[i] = i\n\tend\n\tfor j = 1, n do\n\t\tlst_B[j] =\
    \ j\n\tend\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_lst_A\
    \ = {}\n\tlocal visited_lst_B = {}\n\tlocal visited_lst_A_index = {}\n\tlocal\
    \ visited_lst_B_index = {}\n\tlocal visited_lst_A_count = {}\n\tlocal visited_lst_B_count\
    \ = {}\n\tlocal visited_lst_A_counts = {}\n\tlocal visited_lst_B_counts = {}\n\
    \tlocal visited_lst_A_counts_index = {}\n\tlocal visited_lst_B_counts_index =\
    \ {}\n\tlocal visited_lst_A_counts_indexs = {}\n\tlocal visited_lst_B_counts_indexs\
    \ = {}\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_counts_indexs_count = 0\n\tlocal visited_lst_B_counts_indexs_count\
    \ = 0\n\tlocal visited_lst_A_count", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal ans = {}\n\tlocal n = 0\n\tlocal m = #grid\n\tlocal i = 1\n\t\
    while i <= m do\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i]\
    \ = grid[i][2]\n\t\ti = i + 1\n\tend\n\tvisited[i] = true\n\tlst_A[i] = grid[i][1]\n\
    \tlst_B[i] = grid[i][2]\n\ti = i + 1\n\twhile i <= m do\n\t\tif visited[i] ==\
    \ false then\n\t\t\tvisited[i] = true\n\t\t\tlst_A[i] = grid[i][1]\n\t\t\tlst_B[i]\
    \ = grid[i][2]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tlocal j = i\n\t\t\twhile j <=\
    \ m do\n\t\t\t\tif visited[j] == false then\n\t\t\t\t\tvisited[j] = true\n\t\t\
    \t\t\tlst_A[j] = grid[j][1]\n\t\t\t\t\tlst_B[j] = grid[j][2]\n\t\t\t\t\tj = j\
    \ + 1\n\t\t\t\telse\n\t\t\t\t\tlocal k = j\n\t\t\t\t\twhile k <= m do\n\t\t\t\t\
    \t\tif visited[k] == false then\n\t\t\t\t\t\t\tvisited[k] = true\n\t\t\t\t\t\t\
    \tlst_A[k] = grid[k][1]\n\t\t\t\t\t\t\tlst_B[k] = grid[k][2]\n\t\t\t\t\t\t\tk\
    \ = k + 1\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tif lst_A[k] < lst_A[j] then\n\t\t\t\
    \t\t\t\t\tlst_A[k] = lst_A[j]\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tlst_A[k] =\
    \ lst_A[j]\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tif lst_B[k] < lst_B[j] then\n\t\t\
    \t\t\t\t\t\tlst_B[k] = lst_B[j]\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tlst_B[k]\
    \ = lst_B[j]\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tif lst_A[k] == lst_B[k] then\n\t\
    \t\t\t\t\t\t\tif lst_A[k] < lst_B[k] then\n\t\t\t\t\t\t\t\t\tans[k] = lst_A[k]\n\
    \t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tans[k] = lst_B[k]\n\t\t\t\t\t\t\t\tend\n\
    \t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\
    \t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  for i = 1, k do\n    local j = k - i\n    local x = lst_A[i]\n    local y =\
    \ lst_B[j]\n    local new_x = lst_A[i]\n    local new_y = lst_B[j]\n    if new_x\
    \ < x then\n      x = new_x\n    end\n    if new_y < y then\n      y = new_y\n\
    \    end\n    table.insert(ans, x)\n    table.insert(ans, y)\n  end\n  return\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A,\
    \ grid[i])\n\tend\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_B, grid[i])\n\t\
    end\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal i = 1\n\
    \twhile i <= k do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A do\n\t\t\tif lst_A[j]\
    \ < lst_B[j] then\n\t\t\t\tlocal k = j\n\t\t\t\twhile k < #lst_A do\n\t\t\t\t\t\
    if lst_A[k] > lst_B[k] then\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\telse\n\t\t\t\t\t\
    \tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\ttable.insert(ans, lst_A[k])\n\t\t\
    \t\tj = k + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn ans\nend", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n\
    \  local visited_count = 0\n  local visited_count_max = math.max(#visited, k)\n\
    \  local visited_count_min = math.min(#visited, k)\n  local visited_count_min_index\
    \ = nil\n  local visited_count_max = nil\n  local visited_count_max = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_min = nil\n  local visited_count_max\
    \ = nil\n  local visited_count_max = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_max = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_max = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_min = nil\n  local visited_count_max\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_max = nil\n  local visited_count_min = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_max = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_max = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_max = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_min = nil\n  local visited_count_max\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_max = nil\n  local visited_count_min = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_max = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_max = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_max = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_min = nil\n  local visited_count_max\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_max = nil\n  local visited_count_min = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_max = nil\n  local visited_count_min = nil\n  local\
    \ visited_count_min = nil\n  local visited_count_max = nil\n  local visited_count_min\
    \ = nil\n  local visited_count_min = nil\n  local visited_count_", "  local lst_A,\
    \ lst_B = {}, {}\n  local visited = {}\n  local results = {}\n  local i, j, k\n\
    \  local n = #grid\n  for i = 1, n do\n    visited[i] = false\n  end\n  for i\
    \ = 1, n do\n    for j = 1, n do\n      if grid[i][j] == nil then\n        grid[i][j]\
    \ = k\n      end\n    end\n  end\n  local function dfs(i, j)\n    if visited[i]\
    \ and visited[j] then\n      results[#results + 1] = grid[i][j]\n      return\n\
    \    end\n    visited[i] = true\n    visited[j] = true\n    for k = 1, k do\n\
    \      if grid[i][j] > grid[i][j + 1] then\n        local tmp = grid[i][j]\n \
    \       grid[i][j] = grid[i][j + 1]\n        grid[i][j + 1] = tmp\n      end\n\
    \    end\n    for k = 1, k do\n      if grid[i][j] > grid[i + 1][j] then\n   \
    \     local tmp = grid[i][j]\n        grid[i][j] = grid[i + 1][j]\n        grid[i\
    \ + 1][j] = tmp\n      end\n    end\n    for k = 1, k do\n      if grid[i][j]\
    \ > grid[i + 1][j + 1] then\n        local tmp = grid[i][j]\n        grid[i][j]\
    \ = grid[i + 1][j + 1]\n        grid[i + 1][j + 1] = tmp\n      end\n    end\n\
    \    for k = 1, k do\n      if grid[i][j] > grid[i + 1][j + 2] then\n        local\
    \ tmp = grid[i][j]\n        grid[i][j] = grid[i + 1][j + 2]\n        grid[i +\
    \ 1][j + 2] = tmp\n      end\n    end\n    for k = 1, k do\n      if grid[i][j]\
    \ > grid[i + 1][j + 3] then\n        local tmp = grid[i][j]\n        grid[i][j]\
    \ = grid[i + 1][j + 3]\n        grid[i + 1][j + 3] = tmp\n      end\n    end\n\
    \    for k = 1, k do\n      if grid[i][j] > grid[i + 1][j + 4] then\n        local\
    \ tmp = grid[i][j]\n        grid[i][j] = grid[i + 1][j + 4]\n        grid[i +\
    \ 1][j + 4] = tmp\n      end\n    end\n    for k = 1, k do\n      if grid[i][j]\
    \ > grid[i + 1][j + 5] then\n        local tmp = grid[i][j]\n        grid[i][j]\
    \ = grid[i + 1][j + 5]\n        grid[i + 1][j + 5] = tmp\n      end\n    end\n\
    \    for k = 1, k do\n      if grid[i][j] > grid[i + 1][j + 6] then\n        local\
    \ tmp = grid[i][j]\n        grid[i][j] = grid[i + 1][j + 6]\n        grid[i +\
    \ 1][j + 6] = tmp\n      end\n    end\n    for k = 1, k do\n      if grid[i][j]\
    \ > grid", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count\
    \ = 0\n  local count = 0\n  for _, row in ipairs(grid) do\n    for _, value in\
    \ ipairs(row) do\n      count = count + 1\n      lst_A[count] = value\n      lst_B[count]\
    \ = value\n    end\n  end\n  local function dfs(i, j)\n    visited_count = visited_count\
    \ + 1\n    visited[visited_count] = true\n    if i == j then\n      local lst_A_sorted\
    \ = {}\n      for _, value in ipairs(lst_A) do\n        lst_A_sorted[value] =\
    \ true\n      end\n      local lst_B_sorted = {}\n      for _, value in ipairs(lst_B)\
    \ do\n        lst_B_sorted[value] = true\n      end\n      if lst_A_sorted < lst_B_sorted\
    \ then\n        return lst_A_sorted\n      else\n        return lst_B_sorted\n\
    \      end\n    end\n    local neighbors = grid[i][j]\n    for _, neighbor in\
    \ ipairs(neighbors) do\n      if visited[neighbor] then\n        continue\n  \
    \    end\n      local new_i = i + 1\n      local new_j = j + 1\n      if new_i\
    \ < 1 or new_i > #grid or new_j < 1 or new_j > #grid[new_i] then\n        continue\n\
    \      end\n      local new_neighbors = grid[new_i][new_j]\n      for _, neighbor\
    \ in ipairs(new_neighbors) do\n        if visited[neighbor] then\n          continue\n\
    \        end\n        local new_neighbor = neighbor + 1\n        if new_neighbor\
    \ > #neighbors then\n          new_neighbor = neighbor\n        end\n        local\
    \ new_neighbor_value = grid[new_i][new_neighbor]\n        if new_neighbor_value\
    \ < value then\n          dfs(new_i, new_neighbor)\n        end\n      end\n \
    \   end\n  end\n  local function dfs_helper(i, j)\n    visited_count = visited_count\
    \ + 1\n    visited[visited_count] = true\n    if i == j then\n      local lst_A_sorted\
    \ = {}\n      for _, value in ipairs(lst_A) do\n        lst_A_sorted[value] =\
    \ true\n      end\n      local lst_B_sorted = {}\n      for _, value in ipairs(lst_B)\
    \ do\n        lst_B_sorted[value] = true\n      end\n      if lst_A_sorted < lst_B_sorted\
    \ then\n        return lst_A_sorted\n      else\n        return lst_B_sorted\n\
    \      end\n    end\n    local ", "  local lst_A = {}\n  local lst_B = {}\n  local\
    \ visited = {}\n  local ans = {}\n  local count = 0\n  local visited_count = 0\n\
    \  for i = 1, #grid do\n    local cell = grid[i]\n    local value = cell[1]\n\
    \    local index = cell[2]\n    local neighbors = cell[3]\n    local visited_neighbors\
    \ = cell[4]\n    local visited_neighbors_count = 0\n    for j = 1, #neighbors\
    \ do\n      local neighbor = neighbors[j]\n      local neighbor_index = neighbor[1]\n\
    \      local neighbor_neighbors = neighbor[2]\n      local neighbor_visited_neighbors\
    \ = neighbor[3]\n      local neighbor_visited_neighbors_count = 0\n      for k\
    \ = 1, #neighbor_neighbors do\n        local neighbor_neighbor = neighbor_neighbors[k]\n\
    \        local neighbor_neighbor_index = neighbor_neighbor[1]\n        local neighbor_neighbor_neighbors\
    \ = neighbor_neighbor[2]\n        local neighbor_neighbor_visited_neighbors =\
    \ neighbor_neighbor[3]\n        local neighbor_neighbor_visited_neighbors_count\
    \ = 0\n        if visited_neighbors[neighbor_neighbor_index] == nil then\n   \
    \       visited_neighbors[neighbor_neighbor_index] = true\n          visited_neighbors_count\
    \ = visited_neighbors_count + 1\n        end\n        if visited_neighbors[neighbor_neighbor_index]\
    \ == true then\n          visited_neighbors_count = visited_neighbors_count +\
    \ 1\n        end\n        if visited_neighbors[neighbor_neighbor_index] == true\
    \ then\n          visited_neighbors_count = visited_neighbors_count + 1\n    \
    \    end\n        if visited_neighbors[neighbor_neighbor_index] == true then\n\
    \          visited_neighbors_count = visited_neighbors_count + 1\n        end\n\
    \        if visited_neighbors[neighbor_neighbor_index] == true then\n        \
    \  visited_neighbors_count = visited_neighbors_count + 1\n        end\n      \
    \  if visited_neighbors[neighbor_neighbor_index] == true then\n          visited_neighbors_count\
    \ = visited_neighbors_count + 1\n        end\n        if visited_neighbors[neighbor_neighbor_index]\
    \ == true then\n          visited_neighbors_count = visited_neighbors_count +\
    \ 1\n        end\n        if visited_neighbors[neighbor_neighbor_index] == true\
    \ then\n          visited_neighbors_count = visited_neighbors_count + 1\n    \
    \    end\n        if visited_neighbors[neighbor_neighbor_index] == true then\n\
    \          visited_neighbors_count = visited_neighbors_count + 1\n        end\n\
    \        if visited_neighbors[neighbor_neighbor_index] == true then\n        \
    \  visited_neighbors_count = visited_neighbors_count + 1\n        end\n      \
    \  if visited_neighbors[neighbor_neighbor_index] == ", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited = {}\n\tlocal ans =\
    \ {}\n\tvisited[#grid] = true\n\tlocal function dfs(i, j)\n\t\tvisited[i] = true\n\
    \t\tvisited[j] = true\n\t\tlst_A[i] = j\n\t\tlst_B[j] = i\n\t\tlocal count = 0\n\
    \t\tfor i = 1, n do\n\t\t\tif visited[i] then\n\t\t\t\tcount = count + 1\n\t\t\
    \t\tlocal x, y = i - 1, j - 1\n\t\t\t\twhile x >= 0 and y >= 0 and grid[x][y]\
    \ == grid[i][j] do\n\t\t\t\t\tx, y = x - 1, y - 1\n\t\t\t\tend\n\t\t\t\tif x >=\
    \ 0 and y >= 0 then\n\t\t\t\t\tcount = count + 1\n\t\t\t\t\tdfs(x, y)\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\t\tif count < k then\n\t\t\tans[#ans + 1] = lst_A[i]\n\
    \t\tend\n\tend\n\tdfs(1, n - 1)\n\treturn ans\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_list =\
    \ []\n\tlocal visited_list_count = 0\n\tlocal visited_list_index = {}\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visited_list_index_count = 0\n\tlocal visited_list_index_count = 0\n\tlocal\
    \ visite", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal i, j,\
    \ val, visited_count = 0, 0, 0\n\tlocal visited_list = nil\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_list = {}\n\tlocal visited_lists = {}\n\tlocal visited_list\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_list = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_list = {}\n\tlocal visited_lists = {}\n\tlocal visited_list\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_list = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_list = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists = {}\n\tlocal visited_lists\
    \ = {}\n\tlocal visited_lists = {}\n", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\
    \tlocal ans = {}\n\tlocal visited = {}\n\tlocal count = 0\n\tfor i = 1, #grid\
    \ do\n\t\tvisited[i] = false\n\tend\n\tvisited[grid[1][1]] = true\n\tcount = count\
    \ + 1\n\tfor i = 2, #grid do\n\t\tlocal v = grid[i][1]\n\t\tif visited[v] == false\
    \ then\n\t\t\tvisited[v] = true\n\t\t\tcount = count + 1\n\t\t\tfor j = 1, #grid\
    \ do\n\t\t\t\tif grid[j][1] == v then\n\t\t\t\t\tlst_A[count] = v\n\t\t\t\t\t\
    lst_B[count] = grid[j][1]\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal i =\
    \ 1\n\twhile i <= #lst_A do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[#ans +\
    \ 1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tans[#ans + 1] = lst_B[i]\n\t\
    \t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal\
    \ lst_B = {}\n\tlocal index = 1\n\tlocal visited = {}\n\tlocal visited_index =\
    \ {}\n\tlocal visited_index[1] = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3]\
    \ = 3\n\tlocal visited_index[4] = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6]\
    \ = 6\n\tlocal visited_index[7] = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9]\
    \ = 9\n\tlocal visited_index[10] = 10\n\tlocal visited_index[11] = 11\n\tlocal\
    \ visited_index[12] = 12\n\tlocal visited_index[13] = 13\n\tlocal visited_index[14]\
    \ = 14\n\tlocal visited_index[15] = 15\n\tlocal visited_index[16] = 16\n\tlocal\
    \ visited_index[17] = 17\n\tlocal visited_index[18] = 18\n\tlocal visited_index[19]\
    \ = 19\n\tlocal visited_index[20] = 20\n\tlocal visited_index[21] = 21\n\tlocal\
    \ visited_index[22] = 22\n\tlocal visited_index[23] = 23\n\tlocal visited_index[24]\
    \ = 24\n\tlocal visited_index[25] = 25\n\tlocal visited_index[26] = 26\n\tlocal\
    \ visited_index[27] = 27\n\tlocal visited_index[28] = 28\n\tlocal visited_index[29]\
    \ = 29\n\tlocal visited_index[30] = 30\n\tlocal visited_index[31] = 31\n\tlocal\
    \ visited_index[32] = 32\n\tlocal visited_index[33] = 33\n\tlocal visited_index[34]\
    \ = 34\n\tlocal visited_index[35] = 35\n\tlocal visited_index[36] = 36\n\tlocal\
    \ visited_index[37] = 37\n\tlocal visited_index[38] = 38\n\tlocal visited_index[39]\
    \ = 39\n\tlocal visited_index[40] = 40\n\tlocal visited_index[41] = 41\n\tlocal\
    \ visited_index[42] = 42\n\tlocal visited_index[43] = 43\n\tlocal visited_index[44]\
    \ = 44\n\tlocal visited_index[45] = 45\n\tlocal visited_index[46] = 46\n\tlocal\
    \ visited_index[47] = 47\n\tlocal visited_index[48] = 48\n\tlocal visited_index[49]\
    \ = 49\n\tlocal visited_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal count = 0\n\tlocal current_cell\n\
    \tlocal current_cell_val\n\tlocal current_cell_val_1\n\tlocal current_cell_val_2\n\
    \tlocal current_cell_val_3\n\tlocal current_cell_val_4\n\tlocal current_cell_val_5\n\
    \tlocal current_cell_val_6\n\tlocal current_cell_val_7\n\tlocal current_cell_val_8\n\
    \tlocal current_cell_val_9\n\tlocal current_cell_val_10\n\tlocal current_cell_val_11\n\
    \tlocal current_cell_val_12\n\tlocal current_cell_val_13\n\tlocal current_cell_val_14\n\
    \tlocal current_cell_val_15\n\tlocal current_cell_val_16\n\tlocal current_cell_val_17\n\
    \tlocal current_cell_val_18\n\tlocal current_cell_val_19\n\tlocal current_cell_val_20\n\
    \tlocal current_cell_val_21\n\tlocal current_cell_val_22\n\tlocal current_cell_val_23\n\
    \tlocal current_cell_val_24\n\tlocal current_cell_val_25\n\tlocal current_cell_val_26\n\
    \tlocal current_cell_val_27\n\tlocal current_cell_val_28\n\tlocal current_cell_val_29\n\
    \tlocal current_cell_val_30\n\tlocal current_cell_val_31\n\tlocal current_cell_val_32\n\
    \tlocal current_cell_val_33\n\tlocal current_cell_val_34\n\tlocal current_cell_val_35\n\
    \tlocal current_cell_val_36\n\tlocal current_cell_val_37\n\tlocal current_cell_val_38\n\
    \tlocal current_cell_val_39\n\tlocal current_cell_val_40\n\tlocal current_cell_val_41\n\
    \tlocal current_cell_val_42\n\tlocal current_cell_val_43\n\tlocal current_cell_val_44\n\
    \tlocal current_cell_val_45\n\tlocal current_cell_val_46\n\tlocal current_cell_val_47\n\
    \tlocal current_cell_val_48\n\tlocal current_cell_val_49\n\tlocal current_cell_val_50\n\
    \tlocal current_cell_val_51\n\tlocal current_cell_val_52\n\tlocal current_cell_val_53\n\
    \tlocal current_cell_val_54\n\tlocal current_cell_val_55\n\tlocal current_cell_val_56\n\
    \tlocal current_cell_val_57\n\tlocal current_cell_val_58\n\tlocal current_cell_val_59\n\
    \tlocal current_cell_val_60\n\tlocal current_cell_val_61\n\tlocal current_cell_val_62\n\
    \tlocal current_cell_val_63\n\tlocal current_cell_val_64\n\tlocal current_cell_val_65\n\
    \tlocal current_cell_val_66\n\tlocal current_cell_val_", "  local lst_A = {}\n\
    \  local lst_B = {}\n  local index = 1\n  local visited = {}\n  local visited_count\
    \ = 0\n  local visited_index = {}\n  local visited_index_count = 0\n  local visited_index_list\
    \ = []\n  local visited_index_list_count = 0\n  local visited_index_list_list\
    \ = []\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visited_index_list_list_count\
    \ = 0\n  local visited_index_list_list_count = 0\n  local visite", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tfor\
    \ i = 1, n do\n\t\tlst_A[#lst_A + 1] = i\n\tend\n\tfor j = 1, n do\n\t\tlst_B[#lst_B\
    \ + 1] = j\n\tend\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_index\
    \ = {}\n\tlocal visited_index_count = 0\n\tlocal visited_index_map = {}\n\tlocal\
    \ visited_index_map_count = 0\n\tlocal visited_index_map_map = {}\n\tlocal visited_index_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map = {}\n\tlocal visited_index_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map = {}\n\tlocal visited_index_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map = {}\n\tlocal visited_index_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map = {}\n\tlocal visited_index_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_count = 0\n\tlocal visited_index_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_map_count = 0\n\tlocal visited_index_map_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_count = 0\n\tlocal\
    \ visited_index_map_map_map_map_map_map_map_map_count = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_count = 0\n\t\
    local visited_index_map_map_map_map_map_map_map_map_map_count = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_count = 0\n\t\
    local visited_index_map_map_map_map_map_map_map_map_map_map_count = 0\n\tlocal\
    \ visited_index_map_map_map_map_map_map_map_map_map_map_count = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_map_count\
    \ = 0\n\tlocal visited_index_map_map_map_map_map_map_map_map_map_map_count = 0\n\
    \tlocal visited_index_map_map_map_map_map_map_map_map_map_map_map_count = 0\n\t\
    local visited_index_map_map_map_map_map_map_map_map_map_map_map_count = 0\n\t\
    local visited_index_map_map_map_map_map_map_map_map_map_map_map_map_count = 0\n\
    \tlocal visited_index_map_map_map_map_map_map_map_map_", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max2 = 0\n\tlocal visited_count_max3 = 0\n\tlocal\
    \ visited_count_max4 = 0\n\tlocal visited_count_max5 = 0\n\tlocal visited_count_max6\
    \ = 0\n\tlocal visited_count_max7 = 0\n\tlocal visited_count_max8 = 0\n\tlocal\
    \ visited_count_max9 = 0\n\tlocal visited_count_max10 = 0\n\tlocal visited_count_max11\
    \ = 0\n\tlocal visited_count_max12 = 0\n\tlocal visited_count_max13 = 0\n\tlocal\
    \ visited_count_max14 = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max16\
    \ = 0\n\tlocal visited_count_max17 = 0\n\tlocal visited_count_max18 = 0\n\tlocal\
    \ visited_count_max19 = 0\n\tlocal visited_count_max20 = 0\n\tlocal visited_count_max21\
    \ = 0\n\tlocal visited_count_max22 = 0\n\tlocal visited_count_max23 = 0\n\tlocal\
    \ visited_count_max24 = 0\n\tlocal visited_count_max25 = 0\n\tlocal visited_count_max26\
    \ = 0\n\tlocal visited_count_max27 = 0\n\tlocal visited_count_max28 = 0\n\tlocal\
    \ visited_count_max29 = 0\n\tlocal visited_count_max30 = 0\n\tlocal visited_count_max31\
    \ = 0\n\tlocal visited_count_max32 = 0\n\tlocal visited_count_max33 = 0\n\tlocal\
    \ visited_count_max34 = 0\n\tlocal visited_count_max35 = 0\n\tlocal visited_count_max36\
    \ = 0\n\tlocal visited_count_max37 = 0\n\tlocal visited_count_max38 = 0\n\tlocal\
    \ visited_count_max39 = 0\n\tlocal visited_count_max40 = 0\n\tlocal visited_count_max41\
    \ = 0\n\tlocal visited_count_max42 = 0\n\tlocal visited_count_max43 = 0\n\tlocal\
    \ visited_count_max44 = 0\n\tlocal visited_count_max45 = 0\n\tlocal visited_count_max46\
    \ = 0\n\tlocal visited_count_max47 = 0\n\tlocal visited_count_max48 = 0\n\tlocal\
    \ visited_count_max49 = 0\n\tlocal visited_count_max50 = 0\n\tlocal visited_count_max51\
    \ = 0\n\tlocal visited_count_max52 = 0\n\tlocal visited_count_max53 = 0\n\tlocal\
    \ visited_count_max54 = 0\n\tlocal visite", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\
    \tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tfor i, row in ipairs(grid) do\n\t\t\
    for j, value in ipairs(row) do\n\t\t\ttable.insert(lst_A, value)\n\t\t\ttable.insert(lst_B,\
    \ value)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans\
    \ = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = i\n\t\twhile j <= k do\n\
    \t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tbreak\n\t\t\telseif lst_A[j] < lst_B[i]\
    \ then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\ttable.insert(ans, lst_A[j])\n\t\t\t\
    \tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tfor i = 1, n do\n\
    \t\tlst_A[i] = i\n\tend\n\tfor j = 1, n do\n\t\tlst_B[j] = j\n\tend\n\tlocal visited\
    \ = {}\n\tlocal visited_lst, visited_lst_tmp = {}, {}\n\tlocal visited_lst_tmp\
    \ = {}\n\tlocal visited_lst_tmp2 = {}\n\tlocal visited_lst_tmp3 = {}\n\tlocal\
    \ visited_lst_tmp4 = {}\n\tlocal visited_lst_tmp5 = {}\n\tlocal visited_lst_tmp6\
    \ = {}\n\tlocal visited_lst_tmp7 = {}\n\tlocal visited_lst_tmp8 = {}\n\tlocal\
    \ visited_lst_tmp9 = {}\n\tlocal visited_lst_tmp10 = {}\n\tlocal visited_lst_tmp11\
    \ = {}\n\tlocal visited_lst_tmp12 = {}\n\tlocal visited_lst_tmp13 = {}\n\tlocal\
    \ visited_lst_tmp14 = {}\n\tlocal visited_lst_tmp15 = {}\n\tlocal visited_lst_tmp16\
    \ = {}\n\tlocal visited_lst_tmp17 = {}\n\tlocal visited_lst_tmp18 = {}\n\tlocal\
    \ visited_lst_tmp19 = {}\n\tlocal visited_lst_tmp20 = {}\n\tlocal visited_lst_tmp21\
    \ = {}\n\tlocal visited_lst_tmp22 = {}\n\tlocal visited_lst_tmp23 = {}\n\tlocal\
    \ visited_lst_tmp24 = {}\n\tlocal visited_lst_tmp25 = {}\n\tlocal visited_lst_tmp26\
    \ = {}\n\tlocal visited_lst_tmp27 = {}\n\tlocal visited_lst_tmp28 = {}\n\tlocal\
    \ visited_lst_tmp29 = {}\n\tlocal visited_lst_tmp30 = {}\n\tlocal visited_lst_tmp31\
    \ = {}\n\tlocal visited_lst_tmp32 = {}\n\tlocal visited_lst_tmp33 = {}\n\tlocal\
    \ visited_lst_tmp34 = {}\n\tlocal visited_lst_tmp35 = {}\n\tlocal visited_lst_tmp36\
    \ = {}\n\tlocal visited_lst_tmp37 = {}\n\tlocal visited_lst_tmp38 = {}\n\tlocal\
    \ visited_lst_tmp39 = {}\n\tlocal visited_lst_tmp40 = {}\n\tlocal visited_lst_tmp41\
    \ = {}\n\tlocal visited_lst_tmp42 = {}\n\tlocal visited_lst_tmp43 = {}\n\tlocal\
    \ visite", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count\
    \ = 0\n  local visited_count_max = math.max(#visited, k)\n  for i = 1, #grid do\n\
    \    local cell = grid[i]\n    visited[cell] = true\n    visited_count = visited_count\
    \ + 1\n    if visited_count == visited_count_max then\n      local cells = #visited\n\
    \      visited_count = 0\n      local min_cell_index = cells - 1\n      for j\
    \ = cells - 1, 1, -1 do\n        if visited[j] then\n          local cell = grid[j]\n\
    \          local value = cells[cell]\n          lst_A[min_cell_index] = value\n\
    \          lst_B[min_cell_index] = value\n          visited_count = visited_count\
    \ - 1\n          min_cell_index = j - 1\n        end\n      end\n    end\n  end\n\
    \  return lst_A, lst_B\nend", "  -- Base case\n  if k == 1 then\n    return grid[1]\n\
    \  end\n  -- If k is greater than or equal to number of cells, return empty list\n\
    \  if k > #grid then return end\n  -- If k is less than or equal to 1, return\
    \ empty list\n  if k < 1 then return end\n  -- Initialize a list to store the\
    \ values on the cells that we go through\n  local lst_A = {}\n  -- Initialize\
    \ a list to store the values on the cells that we go through\n  local lst_B =\
    \ {}\n  -- Initialize a list to store the values on the cells that we go through\n\
    \  local lst_C = {}\n  -- Initialize a list to store the values on the cells that\
    \ we go through\n  local lst_D = {}\n  -- Initialize a list to store the values\
    \ on the cells that we go through\n  local lst_E = {}\n  -- Initialize a list\
    \ to store the values on the cells that we go through\n  local lst_F = {}\n  --\
    \ Initialize a list to store the values on the cells that we go through\n  local\
    \ lst_G = {}\n  -- Initialize a list to store the values on the cells that we\
    \ go through\n  local lst_H = {}\n  -- Initialize a list to store the values on\
    \ the cells that we go through\n  local lst_I = {}\n  -- Initialize a list to\
    \ store the values on the cells that we go through\n  local lst_J = {}\n  -- Initialize\
    \ a list to store the values on the cells that we go through\n  local lst_K =\
    \ {}\n  -- Initialize a list to store the values on the cells that we go through\n\
    \  local lst_L = {}\n  -- Initialize a list to store the values on the cells that\
    \ we go through\n  local lst_M = {}\n  -- Initialize a list to store the values\
    \ on the cells that we go through\n  local lst_N = {}\n  -- Initialize a list\
    \ to store the values on the cells that we go through\n  local lst_O = {}\n  --\
    \ Initialize a list to store the values on the cells that we go through\n  local\
    \ lst_P = {}\n  -- Initialize a list to store the values on the cells that we\
    \ go through\n  local lst_Q = {}\n  -- Initialize a list to store the values on\
    \ the cells that we go through\n  local lst_R = {}\n  -- Initialize a list to\
    \ store the values on the cells that we go through\n  local lst_S = {}\n  -- Initialize\
    \ a list to store the values on the cells that we go through\n  local lst_T =\
    \ {}\n  -- Initialize a list to store the values on the cells that we ", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal i, j, val, visited = {}, {}, {}, {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal ", "  local lst_A, lst_B = {}, {}\n\
    \  local visited = {}\n  local visited_count = 0\n  local i, j = 0, 0\n  local\
    \ count = 0\n  local min_path = {}\n  local current_cell = {}\n  local current_cell_value\
    \ = 0\n  local current_cell_edge = {}\n  local current_cell_edge_value = 0\n \
    \ local current_cell_edge_count = 0\n  local current_cell_edge_index = {}\n  local\
    \ current_cell_edge_index_count = 0\n  local current_cell_edge_index_value = {}\n\
    \  local current_cell_edge_index_value_count = 0\n  local current_cell_edge_index_value_index\
    \ = {}\n  local current_cell_edge_index_value_index_count = 0\n  local current_cell_edge_index_value_index_value\
    \ = {}\n  local current_cell_edge_index_value_index_value_count = 0\n  local current_cell_edge_index_value_index_value_index\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_count = 0\n  local\
    \ current_cell_edge_index_value_index_value_index_value = {}\n  local current_cell_edge_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index = {}\n\
    \  local current_cell_edge_index_value_index_value_index_value_index_count = 0\n\
    \  local current_cell_edge_index_value_index_value_index_value_index_value = {}\n\
    \  local current_cell_edge_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_index\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = {}\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_count\
    \ = 0\n  local current_cell_edge_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value_index_value\
    \ = {}\n  ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_list = nil\n\tlocal visited_list_count = 0\n\tlocal visited_list_index\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value\
    \ = nil\n\tlocal visited_list_value = nil\n\tlocal visited_list_value = nil\n\t\
    local visited_list_value = nil\n\tlocal ", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal ans = {}\n\t\
    while i <= #grid do\n\t\twhile j <= #grid:gt(i) do\n\t\t\tif grid[i][j] == grid[i][j\
    \ + 1] then\n\t\t\t\tcount = count + 1\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\
    \t\tlst_B[count] = grid[i][j + 1]\n\t\t\telse\n\t\t\t\tcount = count + 1\n\t\t\
    \t\tlst_A[count] = grid[i][j + 1]\n\t\t\t\tlst_B[count] = grid[i][j]\n\t\t\tend\n\
    \t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\t\tj = 1\n\tend\n\tcount = count - 1\n\
    \ti = count + 1\n\twhile i <= k do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[#ans\
    \ + 1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tans[#ans + 1] = lst_B[i]\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = math.max(visited_count_max,\
    \ visited_count)\n\tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\
    \tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal\
    \ visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal visited_count_max\
    \ = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min = math.min(visited_count_min,\
    \ visited_count)\n\tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\
    \tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal\
    \ visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min\
    \ = math.min(visited_count_min, visited_count)\n\tlocal visited_count_max = math.max(visited_count_max,\
    \ visited_count)\n\tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\
    \tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal\
    \ visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal visited_count_max\
    \ = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min = math.min(visited_count_min,\
    \ visited_count)\n\tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\
    \tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal\
    \ visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min\
    \ = math.min(visited_count_min, visited_count)\n\tlocal visited_count_max = math.max(visited_count_max,\
    \ visited_count)\n\tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\
    \tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal\
    \ visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal visited_count_max\
    \ = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min = math.min(visited_count_min,\
    \ visited_count)\n\tlocal visited_count_max = math.max(visited_count_max, visited_count)\n\
    \tlocal visited_count_min = math.min(visited_count_min, visited_count)\n\tlocal\
    \ visited_count_max = math.max(visited_count_max, visited_count)\n\tlocal visited_count_min\
    \ = math.min(", "  -- Base case: k is 0 or 1, or k is greater than the number\
    \ of cells.\n  if k == 1 then\n    return grid[1]\n  elseif k == 2 then\n    return\
    \ grid[1] < grid[2] and grid[1] or grid[2]\n  else\n    -- Recursive case: find\
    \ all cells that share an edge with current cell,\n    -- then find the minimum\
    \ path through these cells.\n    local cells = {}\n    for i = 1, #grid do\n \
    \     for j = 1, #grid[1] do\n        if grid[i][j] == grid[i - 1][j] then\n \
    \         table.insert(cells, {i, j})\n        end\n      end\n    end\n    local\
    \ path = minPath(cells, k - 1)\n    local paths = {}\n    for i = 1, #path do\n\
    \      table.insert(paths, path[i])\n    end\n    return table.concat(paths)\n\
    \  end\nend", "  local lst_A, lst_B = {}, {}\n  local i, j = 1, 1\n  local visited\
    \ = {}\n  local visited_count = 0\n  local min_path = {}\n  local min_path_len\
    \ = 0\n  local current_cell\n  local current_cell_len\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local current_cell_len_value\n  local current_cell_len_index\n\
    \  local current_cell_len_value\n  local current_cell_len_index\n  local current_cell_len_value\n\
    \  local current_cell_len_index\n  local ", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal\
    \ max_path = {}\n\tlocal current_cell\n\tlocal current_cell_val\n\tlocal current_cell_val_i\n\
    \tlocal current_cell_val_j\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\
    \tlocal current_cell_val_k\n\tlocal current_cell_val_k\n\tlocal current_", " \
    \ local lst_A, lst_B = {}, {}\n  for _, row in ipairs(grid) do\n    for _, value\
    \ in ipairs(row) do\n      table.insert(lst_A, value)\n      table.insert(lst_B,\
    \ value)\n    end\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans\
    \ = {}\n  for i = 1, k do\n    local j = 1\n    while j < #lst_A do\n      if\
    \ lst_A[j] < lst_B[j] then\n        table.insert(ans, lst_A[j])\n        j = j\
    \ + 1\n      else\n        break\n      end\n    end\n  end\n  return ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tfor i, row in ipairs(grid) do\n\t\tfor j, value\
    \ in ipairs(row) do\n\t\t\ttable.insert(lst_A, value)\n\t\t\ttable.insert(lst_B,\
    \ value)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans\
    \ = {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal current_cell\n\
    \tlocal current_cell_val\n\tlocal current_cell_val_count\n\tlocal current_cell_val_count2\n\
    \tlocal current_cell_val_count3\n\tlocal current_cell_val_count4\n\tlocal current_cell_val_count5\n\
    \tlocal current_cell_val_count6\n\tlocal current_cell_val_count7\n\tlocal current_cell_val_count8\n\
    \tlocal current_cell_val_count9\n\tlocal current_cell_val_count10\n\tlocal current_cell_val_count11\n\
    \tlocal current_cell_val_count12\n\tlocal current_cell_val_count13\n\tlocal current_cell_val_count14\n\
    \tlocal current_cell_val_count15\n\tlocal current_cell_val_count16\n\tlocal current_cell_val_count17\n\
    \tlocal current_cell_val_count18\n\tlocal current_cell_val_count19\n\tlocal current_cell_val_count20\n\
    \tlocal current_cell_val_count21\n\tlocal current_cell_val_count22\n\tlocal current_cell_val_count23\n\
    \tlocal current_cell_val_count24\n\tlocal current_cell_val_count25\n\tlocal current_cell_val_count26\n\
    \tlocal current_cell_val_count27\n\tlocal current_cell_val_count28\n\tlocal current_cell_val_count29\n\
    \tlocal current_cell_val_count30\n\tlocal current_cell_val_count31\n\tlocal current_cell_val_count32\n\
    \tlocal current_cell_val_count33\n\tlocal current_cell_val_count34\n\tlocal current_cell_val_count35\n\
    \tlocal current_cell_val_count36\n\tlocal current_cell_val_count37\n\tlocal current_cell_val_count38\n\
    \tlocal current_cell_val_count39\n\tlocal current_cell_val_count40\n\tlocal current_cell_val_count41\n\
    \tlocal current_cell_val_count42\n\tlocal current_cell_val_count43\n\tlocal current_cell_val_count44\n\
    \tlocal current_cell_val_count45\n\tlocal current_cell_val_count46\n\tlocal current_cell_val_count47\n\
    \tlocal current_cell_val_count48\n\tlocal current_cell_val_count49\n\tlocal current_cell_val_count50\n\
    \tlocal current_cell_val_count51\n\tlocal current_cell_val_count52\n\t", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ i, j = 0, 0\n\tlocal count = 0\n\tlocal results = {}\n\twhile i < #grid do\n\
    \t\tvisited_count = visited_count + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\
    \t\tlst_B[i] = grid[i][j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tcount = count + 1\n\
    \t\tif j > #grid[1] then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile j < #grid[1] do\n\
    \t\tvisited_count = visited_count + 1\n\t\tvisited[j] = true\n\t\tlst_A[j] = grid[i][j]\n\
    \t\tlst_B[j] = grid[i][j]\n\t\tj = j + 1\n\t\tcount = count + 1\n\t\tif i > #grid[2]\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile i < #grid[2] do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\t\
    lst_B[i] = grid[i][j]\n\t\ti = i + 1\n\t\tcount = count + 1\n\t\tif i > #grid[3]\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile j < #grid[3] do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[j] = true\n\t\tlst_A[j] = grid[i][j]\n\t\t\
    lst_B[j] = grid[i][j]\n\t\tj = j + 1\n\t\tcount = count + 1\n\t\tif i > #grid[4]\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile i < #grid[4] do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\t\
    lst_B[i] = grid[i][j]\n\t\ti = i + 1\n\t\tcount = count + 1\n\t\tif i > #grid[5]\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile j < #grid[5] do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[j] = true\n\t\tlst_A[j] = grid[i][j]\n\t\t\
    lst_B[j] = grid[i][j]\n\t\tj = j + 1\n\t\tcount = count + 1\n\t\tif i > #grid[6]\
    \ then\n\t\t\tbreak\n\t\tend\n\tend\n\twhile i < #grid[6] do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\t\
    lst_B[i] = grid[i][j]\n\t\ti = i + 1\n\t\tcount = count + 1\n\t\tif i > #grid[7]\
    \ then\n\t\t\tbreak\n\t\tend", "  local lst_A, lst_B = {}, {}\n  local visited\
    \ = {}\n  local visited_count = 0\n  local visited_count_max = 0\n  local visited_count_max2\
    \ = 0\n  local visited_count_max3 = 0\n  local visited_count_max4 = 0\n  local\
    \ visited_count_max5 = 0\n  local visited_count_max6 = 0\n  local visited_count_max7\
    \ = 0\n  local visited_count_max8 = 0\n  local visited_count_max9 = 0\n  local\
    \ visited_count_max10 = 0\n  local visited_count_max11 = 0\n  local visited_count_max12\
    \ = 0\n  local visited_count_max13 = 0\n  local visited_count_max14 = 0\n  local\
    \ visited_count_max15 = 0\n  local visited_count_max16 = 0\n  local visited_count_max17\
    \ = 0\n  local visited_count_max18 = 0\n  local visited_count_max19 = 0\n  local\
    \ visited_count_max20 = 0\n  local visited_count_max21 = 0\n  local visited_count_max22\
    \ = 0\n  local visited_count_max23 = 0\n  local visited_count_max24 = 0\n  local\
    \ visited_count_max25 = 0\n  local visited_count_max26 = 0\n  local visited_count_max27\
    \ = 0\n  local visited_count_max28 = 0\n  local visited_count_max29 = 0\n  local\
    \ visited_count_max30 = 0\n  local visited_count_max31 = 0\n  local visited_count_max32\
    \ = 0\n  local visited_count_max33 = 0\n  local visited_count_max34 = 0\n  local\
    \ visited_count_max35 = 0\n  local visited_count_max36 = 0\n  local visited_count_max37\
    \ = 0\n  local visited_count_max38 = 0\n  local visited_count_max39 = 0\n  local\
    \ visited_count_max40 = 0\n  local visited_count_max41 = 0\n  local visited_count_max42\
    \ = 0\n  local visited_count_max43 = 0\n  local visited_count_max44 = 0\n  local\
    \ visited_count_max45 = 0\n  local visited_count_max46 = 0\n  local visited_count_max47\
    \ = 0\n  local visited_count_max48 = 0\n  local visited_count_max49 = 0\n  local\
    \ visited_count_max50 = 0\n  local visited_count_max51 = 0\n  local visited_count_max52\
    \ = 0\n  local visited_count_max53 = 0\n  local visited_count_max54 = 0\n  local\
    \ visite", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal count = 0\n\tlocal index = 1\n\tlocal current_cell\n\tlocal current_cell_value\n\
    \tlocal current_cell_index\n\tlocal current_cell_indexes\n\tlocal current_cell_indexes_count\n\
    \tlocal current_cell_indexes_value\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal\
    \ current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\tlocal current_cell_indexes_index\n\
    \tlocal current_cell_indexes_index", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\tlocal index = 1\n\tlocal\
    \ current_cell\n\tlocal current_cell_value\n\tlocal current_cell_neighbors\n\t\
    local current_cell_neighbors_value\n\tlocal current_cell_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_value\n\tlocal current_cell_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_value\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_value\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n",
  "  local lst_A, lst_B = {}, {}\n  local i, j = 1, 1\n  while i <= #grid do\n   \
    \ local value = grid[i]\n    if value == nil then\n      break\n    end\n    lst_A[#lst_A\
    \ + 1] = value\n    i = i + 1\n  end\n  i = j\n  while j <= #grid do\n    local\
    \ value = grid[j]\n    if value == nil then\n      break\n    end\n    lst_B[#lst_B\
    \ + 1] = value\n    j = j + 1\n  end\n  local lst_A_sorted, lst_B_sorted = {},\
    \ {}\n  for i = 1, #lst_A do\n    table.insert(lst_A_sorted, lst_A[i])\n  end\n\
    \  for j = 1, #lst_B do\n    table.insert(lst_B_sorted, lst_B[j])\n  end\n  table.sort(lst_A_sorted)\n\
    \  table.sort(lst_B_sorted)\n  local lst_A_sorted = {}\n  for i = 1, #lst_A_sorted\
    \ do\n    local value = lst_A_sorted[i]\n    if value == nil then\n      break\n\
    \    end\n    lst_A_sorted[#lst_A_sorted + 1] = value\n  end\n  table.sort(lst_B_sorted)\n\
    \  local lst_B_sorted = {}\n  for i = 1, #lst_B_sorted do\n    local value = lst_B_sorted[i]\n\
    \    if value == nil then\n      break\n    end\n    lst_B_sorted[#lst_B_sorted\
    \ + 1] = value\n  end\n  local lst_A_sorted = {}\n  for i = 1, #lst_A_sorted do\n\
    \    local value = lst_A_sorted[i]\n    if value == nil then\n      break\n  \
    \  end\n    lst_A_sorted[#lst_A_sorted + 1] = value\n  end\n  local lst_B_sorted\
    \ = {}\n  for i = 1, #lst_B_sorted do\n    local value = lst_B_sorted[i]\n   \
    \ if value == nil then\n      break\n    end\n    lst_B_sorted[#lst_B_sorted +\
    \ 1] = value\n  end\n  local lst_A_sorted = {}\n  for i = 1, #lst_A_sorted do\n\
    \    local value = lst_A_sorted[i]\n    if value == nil then\n      break\n  \
    \  end\n    lst_A_sorted[#lst_A_sorted + 1] = value\n  end\n  local lst_B_sorted\
    \ = {}\n  for i = 1, #lst_B_sorted do\n    local value = lst_B_sorted[i]\n   \
    \ if value == nil then\n      break\n    end\n    l", "\tlocal lst_A = {}\n\t\
    local lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited\
    \ = {}\n\tlocal ans = {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i]\
    \ = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j <=\
    \ #grid do\n\t\tif visited[j] == false then\n\t\t\tcount = count + 1\n\t\t\tif\
    \ count == k then\n\t\t\t\tans = lst_A\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvisited[j]\
    \ = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj =\
    \ j + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal n = #grid\n\tlocal m =\
    \ #grid[1]\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\t\tif\
    \ grid[i][j] == nil then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\tcontinue\n\t\
    \tend\n\t\tvisited[grid[i][j]] = true\n\t\tlocal neighbors = neighbors(grid, i,\
    \ j)\n\t\tfor _, neighbor in ipairs(neighbors) do\n\t\t\tif visited[neighbor]\
    \ == nil then\n\t\t\t\tlocal value = grid[i][j]\n\t\t\t\tgrid[i][j] = nil\n\t\t\
    \t\tlocal neighbors = neighbors(grid, i, j)\n\t\t\t\tfor _, neighbor in ipairs(neighbors)\
    \ do\n\t\t\t\t\tif visited[neighbor] == nil then\n\t\t\t\t\t\tgrid[i][j] = neighbor\n\
    \t\t\t\t\t\tlocal lst_A = lst_A + {value}\n\t\t\t\t\t\tlocal lst_B = lst_B + {neighbor}\n\
    \t\t\t\t\t\tif #lst_A >= k then\n\t\t\t\t\t\t\tans = lst_A\n\t\t\t\t\t\t\tbreak\n\
    \t\t\t\t\t\tend\n\t\t\t\t\t\tif #lst_B >= k then\n\t\t\t\t\t\t\tans = lst_B\n\t\
    \t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tgrid[i][j]\
    \ = value\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\treturn ans\n\
    end", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal index = 1\n\tfor _, row\
    \ in ipairs(grid) do\n\t\tfor _, value in ipairs(row) do\n\t\t\tlst_A[index] =\
    \ value\n\t\t\tlst_B[index] = value\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\
    \tlocal index = 1\n\twhile index <= k do\n\t\tlocal min_index = index\n\t\tfor\
    \ _, value in ipairs(lst_A) do\n\t\t\tif value < lst_B[min_index] then\n\t\t\t\
    \tmin_index = index\n\t\t\tend\n\t\tend\n\t\tlst_A[min_index] = lst_A[min_index]\
    \ + 1\n\t\tlst_B[min_index] = lst_B[min_index] + 1\n\t\tindex = index + 1\n\t\
    end\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max2\
    \ = 0\n\tlocal visited_count_max3 = 0\n\tlocal visited_count_max4 = 0\n\tlocal\
    \ visited_count_max5 = 0\n\tlocal visited_count_max6 = 0\n\tlocal visited_count_max7\
    \ = 0\n\tlocal visited_count_max8 = 0\n\tlocal visited_count_max9 = 0\n\tlocal\
    \ visited_count_max10 = 0\n\tlocal visited_count_max11 = 0\n\tlocal visited_count_max12\
    \ = 0\n\tlocal visited_count_max13 = 0\n\tlocal visited_count_max14 = 0\n\tlocal\
    \ visited_count_max15 = 0\n\tlocal visited_count_max16 = 0\n\tlocal visited_count_max17\
    \ = 0\n\tlocal visited_count_max18 = 0\n\tlocal visited_count_max19 = 0\n\tlocal\
    \ visited_count_max20 = 0\n\tlocal visited_count_max21 = 0\n\tlocal visited_count_max22\
    \ = 0\n\tlocal visited_count_max23 = 0\n\tlocal visited_count_max24 = 0\n\tlocal\
    \ visited_count_max25 = 0\n\tlocal visited_count_max26 = 0\n\tlocal visited_count_max27\
    \ = 0\n\tlocal visited_count_max28 = 0\n\tlocal visited_count_max29 = 0\n\tlocal\
    \ visited_count_max30 = 0\n\tlocal visited_count_max31 = 0\n\tlocal visited_count_max32\
    \ = 0\n\tlocal visited_count_max33 = 0\n\tlocal visited_count_max34 = 0\n\tlocal\
    \ visited_count_max35 = 0\n\tlocal visited_count_max36 = 0\n\tlocal visited_count_max37\
    \ = 0\n\tlocal visited_count_max38 = 0\n\tlocal visited_count_max39 = 0\n\tlocal\
    \ visited_count_max40 = 0\n\tlocal visited_count_max41 = 0\n\tlocal visited_count_max42\
    \ = 0\n\tlocal visited_count_max43 = 0\n\tlocal visited_count_max44 = 0\n\tlocal\
    \ visited_count_max45 = 0\n\tlocal visited_count_max46 = 0\n\tlocal visited_count_max47\
    \ = 0\n\tlocal visited_count_max48 = 0\n\tlocal visited_count_max49 = 0\n\tlocal\
    \ visited_count_max50 = 0\n\tlocal visited_count_max51 = 0\n\tlocal visited_count_max52\
    \ = 0\n\tlocal visited_count_max53 = 0\n\tlocal visited_count_max54 = 0\n\tlocal\
    \ visite", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_list = []\n\tlocal i, j, val\n\tlocal count = 0\n\tlocal\
    \ min_path = {}\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tval\
    \ = grid[i][j]\n\t\t\tif visited[val] == nil then\n\t\t\t\tvisited[val] = true\n\
    \t\t\t\tvisited_count = visited_count + 1\n\t\t\t\tvisited_list[visited_count]\
    \ = val\n\t\t\t\tcount = count + 1\n\t\t\t\tfor k = 1, #grid do\n\t\t\t\t\tfor\
    \ j = 1, #grid[1] do\n\t\t\t\t\t\tif grid[i][j] == val then\n\t\t\t\t\t\t\tlst_A[#lst_A\
    \ + 1] = j\n\t\t\t\t\t\t\tlst_B[#lst_B + 1] = i\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\telse\n\t\t\t\tvisited_count = visited_count + 1\n\t\t\t\tvisited_list[visited_count]\
    \ = val\n\t\t\tend\n\t\tend\n\tend\n\t\n\tif visited_count ~= #visited_list then\n\
    \t\treturn nil\n\tend\n\t\n\tlocal min_path_count = 0\n\tlocal min_path_index\
    \ = 0\n\tlocal min_path_val = nil\n\tlocal min_path_val_count = 0\n\tlocal min_path_val_count2\
    \ = 0\n\tlocal min_path_val_count3 = 0\n\tlocal min_path_val_count4 = 0\n\tlocal\
    \ min_path_val_count5 = 0\n\tlocal min_path_val_count6 = 0\n\tlocal min_path_val_count7\
    \ = 0\n\tlocal min_path_val_count8 = 0\n\tlocal min_path_val_count9 = 0\n\tlocal\
    \ min_path_val_count10 = 0\n\tlocal min_path_val_count11 = 0\n\tlocal min_path_val_count12\
    \ = 0\n\tlocal min_path_val_count13 = 0\n\tlocal min_path_val_count14 = 0\n\t\
    local min_path_val_count15 = 0\n\tlocal min_path_val_count16 = 0\n\tlocal min_path_val_count17\
    \ = 0\n\tlocal min_path_val_count18 = 0\n\tlocal min_path_val_count19 = 0\n\t\
    local min_path_val_count20 = 0\n\tlocal min_path_val_count21 = 0\n\tlocal min_path_val_count22\
    \ = 0\n\tlocal min_path_val_count23 = 0\n\tlocal min_path_val_count24 = 0\n\t\
    local min_path_val_count25 = 0\n\tlocal min_path_val_count26 = 0\n\tlocal min_path_val_count27\
    \ = 0\n\tlocal min_path_val_count28 = 0\n\tlocal min_path_val_count29 = 0\n\t\
    local min_path_val_count30 = 0\n\tlocal min_path_", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_list =\
    \ nil\n\tlocal visited_list_count = 0\n\tlocal visited_list_list = nil\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count =\
    \ 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\
    \tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal\
    \ visited_list_list_count = 0\n\tlocal visited_list_list_count = 0\n\tlocal visited_list_list_count\
    \ = 0\n\tlocal visited_list_list_count = 0\n\tlocal ", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_index\
    \ = {}\n\tlocal visited_index[1] = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3]\
    \ = 3\n\tlocal visited_index[4] = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6]\
    \ = 6\n\tlocal visited_index[7] = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9]\
    \ = 9\n\tlocal visited_index[10] = 10\n\tlocal visited_index[11] = 11\n\tlocal\
    \ visited_index[12] = 12\n\tlocal visited_index[13] = 13\n\tlocal visited_index[14]\
    \ = 14\n\tlocal visited_index[15] = 15\n\tlocal visited_index[16] = 16\n\tlocal\
    \ visited_index[17] = 17\n\tlocal visited_index[18] = 18\n\tlocal visited_index[19]\
    \ = 19\n\tlocal visited_index[20] = 20\n\tlocal visited_index[21] = 21\n\tlocal\
    \ visited_index[22] = 22\n\tlocal visited_index[23] = 23\n\tlocal visited_index[24]\
    \ = 24\n\tlocal visited_index[25] = 25\n\tlocal visited_index[26] = 26\n\tlocal\
    \ visited_index[27] = 27\n\tlocal visited_index[28] = 28\n\tlocal visited_index[29]\
    \ = 29\n\tlocal visited_index[30] = 30\n\tlocal visited_index[31] = 31\n\tlocal\
    \ visited_index[32] = 32\n\tlocal visited_index[33] = 33\n\tlocal visited_index[34]\
    \ = 34\n\tlocal visited_index[35] = 35\n\tlocal visited_index[36] = 36\n\tlocal\
    \ visited_index[37] = 37\n\tlocal visited_index[38] = 38\n\tlocal visited_index[39]\
    \ = 39\n\tlocal visited_index[40] = 40\n\tlocal visited_index[41] = 41\n\tlocal\
    \ visited_index[42] = 42\n\tlocal visited_index[43] = 43\n\tlocal visited_index[44]\
    \ = 44\n\tlocal visited_index[45] = 45\n\tlocal visited_index[46] = 46\n\tlocal\
    \ visited_index[47] = 47\n\tlocal visited_index[48] = 48\n\tlocal visited_index[49]\
    \ = 49\n\tlocal visited_index[5", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\tlocal ans\
    \ = {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\
    \t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j <= #grid do\n\t\tif\
    \ visited[j] == false then\n\t\t\tcount = count + 1\n\t\t\tvisited[j] = true\n\
    \t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj = j + 1\n\t\t\
    end\n\tend\n\twhile count < k do\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tcount = count\
    \ + 1\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlst_A[i] = grid[i][1]\n\
    \t\tlst_B[i] = grid[i][2]\n\t\tlst_A[j] = grid[j][1]\n\t\tlst_B[j] = grid[j][2]\n\
    \tend\n\twhile i <= #grid do\n\t\tif visited[i] == false then\n\t\t\tans[i] =\
    \ lst_A[i]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\twhile j <= #grid do\n\t\tif visited[j]\
    \ == false then\n\t\t\tans[j] = lst_B[j]\n\t\t\tj = j + 1\n\t\tend\n\tend\n\t\
    return ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal\
    \ j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\t\tlst_A[i] = grid[i][1]\n\t\t\
    lst_B[i] = grid[i][1]\n\t\ti = i + 1\n\tend\n\twhile j <= n do\n\t\tlst_A[j] =\
    \ grid[j][1]\n\t\tlst_B[j] = grid[j][1]\n\t\tj = j + 1\n\tend\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tgrid[i][1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telseif lst_A[i] > lst_B[i]\
    \ then\n\t\t\tgrid[i][1] = lst_B[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tgrid[i][1]\
    \ = lst_A[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tgrid[j][1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telseif lst_A[i] > lst_B[i]\
    \ then\n\t\t\tgrid[j][1] = lst_B[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tgrid[j][1]\
    \ = lst_A[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tgrid[i][1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telseif lst_A[i] > lst_B[i]\
    \ then\n\t\t\tgrid[i][1] = lst_B[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tgrid[i][1]\
    \ = lst_A[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tgrid[j][1] = lst_A[i]\n\t\t\ti = i + 1\n\t\telseif lst_A[i] > lst_B[i]\
    \ then\n\t\t\tgrid[j][1] = lst_B[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tgrid[j][1]\
    \ = lst_A[i]\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal n = #", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_dict = {}\n\tlocal visited_dict_count\
    \ = 0\n\tlocal visited_dict_lst_A = {}\n\tlocal visited_dict_lst_B = {}\n\tlocal\
    \ visited_dict_lst_A_count = 0\n\tlocal visited_dict_lst_B_count = 0\n\tlocal\
    \ visited_dict_lst_A_lst_B = {}\n\tlocal visited_dict_lst_B_lst_A = {}\n\tlocal\
    \ visited_dict_lst_A_lst_B_count = 0\n\tlocal visited_dict_lst_B_lst_A_count =\
    \ 0\n\tlocal visited_dict_lst_A_lst_B_lst_A = {}\n\tlocal visited_dict_lst_B_lst_A_lst_B\
    \ = {}\n\tlocal visited_dict_lst_A_lst_B_lst_A_count = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B = {}\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A\
    \ = {}\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_count = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_count = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_lst_A_count = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_lst_A_count = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_count =\
    \ 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_lst_B_lst_A_count\
    \ = 0\n\tlocal visited_dict_lst_B_lst_A_lst_B_lst_A_l", "  local lst_A, lst_B\
    \ = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  for i = 1, k do\n    local j = #lst_A\n    while j > 0 do\n      local k =\
    \ j - 1\n      while k > 0 do\n        if lst_A[k] > lst_B[k] then\n         \
    \ lst_A[k] = lst_B[k]\n          k = k - 1\n        else\n          break\n  \
    \      end\n      end\n      j = j - 1\n    end\n    table.insert(ans, lst_A[i])\n\
    \  end\n  return ans\nend", "  local lst_A, lst_B = {}, {}\n  local visited =\
    \ {}\n  local visited_count = 0\n  local visited_max = math.max(#visited, k)\n\
    \  for i = 1, #grid do\n    visited[i] = false\n  end\n  visited[grid[1][1]] =\
    \ true\n  visited_count = visited_count + 1\n  for i = 2, #grid do\n    local\
    \ v = grid[i][1]\n    local w = grid[i][2]\n    local a = grid[i-1][1]\n    local\
    \ b = grid[i-1][2]\n    local c = grid[i+1][1]\n    local d = grid[i+1][2]\n \
    \   local e\n    local f\n    local g\n    local h\n    if v == w then\n     \
    \ lst_A[v] = v\n      lst_B[v] = v\n      visited[v] = true\n      visited_count\
    \ = visited_count + 1\n    elseif v < w then\n      e = v\n      f = w\n     \
    \ g = 1\n      h = v\n    else\n      e = w\n      f = v\n      g = 1\n      h\
    \ = w\n    end\n    for j = 1, #visited do\n      if visited[j] then\n       \
    \ local i\n        for i = 1, #lst_A do\n          if lst_A[i] > j then\n    \
    \        lst_A[i] = j\n          end\n        end\n        for i = 1, #lst_B do\n\
    \          if lst_B[i] > j then\n            lst_B[i] = j\n          end\n   \
    \     end\n      end\n    end\n    local i\n    for i = 1, #lst_A do\n      if\
    \ visited[i] then\n        local j\n        for j = 1, #lst_B do\n          if\
    \ lst_A[i] == lst_B[j] then\n            lst_A[i] = j\n          end\n       \
    \ end\n      end\n    end\n    for i = 1, #lst_B do\n      if visited[i] then\n\
    \        local j\n        for j = 1, #lst_A do\n          if lst_B[i] == lst_A[j]\
    \ then\n            lst_B[i] = j\n          end\n        end\n      end\n    end\n\
    \    if visited_count < visited_max then\n      visited[e] = true\n      visited_count\
    \ = visited_count + 1\n      visited[f] = true\n      visited_count = visited_count\
    \ + 1\n      visited[g] = true\n      visited_count = visited_count + 1\n    \
    \  visited[h] = true\n      visited_count = visited_count + 1\n    end\n  end\n\
    \  local ans = {}\n  for i = 1, #lst_A do\n    ans[i] = lst_A[i]", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max2 = 0\n\t\
    local visited_count_max2_index = 0\n\tlocal visited_count_max3 = 0\n\tlocal visited_count_max3_index\
    \ = 0\n\tlocal visited_count_max4 = 0\n\tlocal visited_count_max4_index = 0\n\t\
    local visited_count_max5 = 0\n\tlocal visited_count_max5_index = 0\n\tlocal visited_count_max6\
    \ = 0\n\tlocal visited_count_max6_index = 0\n\tlocal visited_count_max7 = 0\n\t\
    local visited_count_max7_index = 0\n\tlocal visited_count_max8 = 0\n\tlocal visited_count_max8_index\
    \ = 0\n\tlocal visited_count_max9 = 0\n\tlocal visited_count_max9_index = 0\n\t\
    local visited_count_max10 = 0\n\tlocal visited_count_max10_index = 0\n\tlocal\
    \ visited_count_max11 = 0\n\tlocal visited_count_max11_index = 0\n\tlocal visited_count_max12\
    \ = 0\n\tlocal visited_count_max12_index = 0\n\tlocal visited_count_max13 = 0\n\
    \tlocal visited_count_max13_index = 0\n\tlocal visited_count_max14 = 0\n\tlocal\
    \ visited_count_max14_index = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max15_index\
    \ = 0\n\tlocal visited_count_max16 = 0\n\tlocal visited_count_max16_index = 0\n\
    \tlocal visited_count_max17 = 0\n\tlocal visited_count_max17_index = 0\n\tlocal\
    \ visited_count_max18 = 0\n\tlocal visited_count_max18_index = 0\n\tlocal visited_count_max19\
    \ = 0\n\tlocal visited_count_max19_index = 0\n\tlocal visited_count_max20 = 0\n\
    \tlocal visited_count_max20_index = 0\n\tlocal visited_count_max21 = 0\n\tlocal\
    \ visited_count_max21_index = 0\n\tlocal visited_count_max22 = 0\n\tlocal visited_count_max22_index\
    \ = 0\n\tlocal visited_count_max23 = 0\n\tlocal visited_count_max23_index = 0\n\
    \tlocal visited_count_max24 = 0\n\tlocal visited_count_max24_index = 0\n\tlocal\
    \ visited_count_max25 = 0\n\tlocal visited_count_max25_index = 0\n\tlocal visited_count_max26\
    \ = 0\n\tlocal visited_count_max", "  local lst_A, lst_B = {}, {}\n  local visited\
    \ = {}\n  local visited_count = 0\n  local i, j = 1, 1\n  while i <= #grid do\n\
    \    visited[i] = true\n    visited_count = visited_count + 1\n    local value\
    \ = grid[i][j]\n    local neighbors = neighbors(grid, i, j, k)\n    for _, neighbor\
    \ in ipairs(neighbors) do\n      if not visited[neighbor] then\n        lst_A[visited_count]\
    \ = neighbor\n        lst_B[visited_count] = value\n        visited[neighbor]\
    \ = true\n        visited_count = visited_count + 1\n      end\n    end\n    i\
    \ = i + 1\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  return lst_A, lst_B\n\
    end", "  local lst_A, lst_B = {}, {}\n  local i, j, val, path = {}, {}, {}, {}\n\
    \  for i = 1, #grid do\n    for j = 1, #grid[1] do\n      val = grid[i][j]\n \
    \     if val ~= nil then\n        table.insert(lst_A, val)\n        table.insert(lst_B,\
    \ val)\n      end\n    end\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  for i = 1, k do\n    table.insert(path, nil)\n    for j = 1, #lst_A do\n  \
    \    if lst_A[j] < lst_B[j] then\n        table.insert(path, j)\n      end\n \
    \   end\n  end\n  table.sort(path)\n  local ans = {}\n  for i = 1, k do\n    table.insert(ans,\
    \ lst_A[i])\n  end\n  return ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\tlocal cells =\
    \ grid:size()\n\tlocal cells_count = 0\n\tlocal cells_visited = {}\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal\
    \ cells_visited_count = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_count\
    \ = 0\n\tlocal cells_visited_count = 0\n\tlocal cells_visited_", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal count\
    \ = 0\n\tlocal visited_count = 0\n\tfor i = 1, #grid do\n\t\tvisited[i] = false\n\
    \tend\n\tvisited[grid[1][1]] = true\n\tvisited[grid[1][2]] = true\n\tvisited[grid[1][3]]\
    \ = true\n\tvisited[grid[2][1]] = true\n\tvisited[grid[2][2]] = true\n\tvisited[grid[2][3]]\
    \ = true\n\tvisited[grid[3][1]] = true\n\tvisited[grid[3][2]] = true\n\tvisited[grid[3][3]]\
    \ = true\n\twhile count < k do\n\t\tcount = count + 1\n\t\tlocal min = math.inf\n\
    \t\tfor i = 1, #grid do\n\t\t\tif visited[i] == false then\n\t\t\t\tlocal val\
    \ = grid[i][1]\n\t\t\t\tfor j = 1, #grid do\n\t\t\t\t\tif visited[j] == false\
    \ then\n\t\t\t\t\t\tif val < grid[j][1] then\n\t\t\t\t\t\t\tval = grid[j][1]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\t\tif val < grid[j][2] then\n\t\t\t\t\t\t\tval = grid[j][2]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\t\tif val < grid[j][3] then\n\t\t\t\t\t\t\tval = grid[j][3]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tvisited[i] = true\n\t\t\t\
    \tif min > val then\n\t\t\t\t\tmin = val\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\
    if min > math.inf then\n\t\t\tbreak\n\t\tend\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tlst_A[visited_count] = min\n\t\tlst_B[visited_count] = grid[min][1]\n\
    \t\tfor i = 1, #grid do\n\t\t\tif visited[i] == false then\n\t\t\t\tlocal val\
    \ = grid[i][1]\n\t\t\t\tfor j = 1, #grid do\n\t\t\t\t\tif visited[j] == false\
    \ then\n\t\t\t\t\t\tif val < grid[j][1] then\n\t\t\t\t\t\t\tval = grid[j][1]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\t\tif val < grid[j][2] then\n\t\t\t\t\t\t\tval = grid[j][2]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\t\tif val < grid[j][3] then\n\t\t\t\t\t\t\tval = grid[j][3]\n\
    \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tvisited[i] = true\n\t\t\t\
    \tif min > val then\n\t\t\t\t\tmin = val\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\
    visited[grid[min][1]] = true\n\t\tvisited[grid[min][2]] = true\n\t\tvisited[grid[min][3]]\
    \ = true\n\tend\n\tfor i = 1, #grid do\n\t\tif visited[i] == false then\n\t\t\t\
    local val = grid[i][1]\n\t\t\tfor j = 1, #grid do", "  local lst_A = {}\n  local\
    \ lst_B = {}\n  for i = 1, #grid do\n    lst_A[grid[i]] = grid[i]\n  end\n  for\
    \ i = 1, #grid do\n    lst_B[grid[i]] = grid[i]\n  end\n  local visited = {}\n\
    \  local ans = {}\n  local i = 1\n  while i <= k do\n    visited[grid[i]] = true\n\
    \    local j = 1\n    while j <= #grid do\n      if visited[grid[j]] then\n  \
    \      local k = j + 1\n        while k <= #grid do\n          visited[grid[k]]\
    \ = false\n          k = k + 1\n        end\n        local v = grid[j]\n     \
    \   grid[j] = grid[i]\n        grid[i] = v\n        local i = 1\n        while\
    \ i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n      \
    \    grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n    \
    \    while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local i = 1\n\
    \        while i <= k do\n          local v = grid[i]\n          grid[i] = grid[j]\n\
    \          grid[j] = v\n          i = i + 1\n        end\n        local ", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal function\
    \ dfs(i, j)\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlocal val = grid[i][j]\n\
    \t\tif i == j then\n\t\t\tans[#ans + 1] = val\n\t\telse\n\t\t\tfor k = 1, #grid\
    \ do\n\t\t\t\tif grid[i][k] == val then\n\t\t\t\t\tdfs(i, k)\n\t\t\t\tend\n\t\t\
    \t\tif grid[k][j] == val then\n\t\t\t\t\tdfs(k, j)\n\t\t\t\tend\n\t\t\tend\n\t\
    \tend\n\tend\n\tlocal function dfs_helper(i, j)\n\t\tif i == j then\n\t\t\treturn\n\
    \t\telse\n\t\t\tfor k = 1, #grid do\n\t\t\t\tif grid[i][k] == grid[i][j] then\n\
    \t\t\t\t\tdfs_helper(i, k)\n\t\t\t\tend\n\t\t\t\tif grid[k][j] == grid[i][j] then\n\
    \t\t\t\t\tdfs_helper(k, j)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tfor i =\
    \ 1, #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tif not visited[i] and not visited[j]\
    \ then\n\t\t\t\tdfs_helper(i, j)\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\
    \tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i = 1\n\tlocal j = 1\n\twhile\
    \ i <= n and j <= m do\n\t\tif grid[i][j] == nil then\n\t\t\ti = i + 1\n\t\t\t\
    j = 1\n\t\t\tcontinue\n\t\tend\n\t\tif visited[grid[i][j]] then\n\t\t\ti = i +\
    \ 1\n\t\t\tj = 1\n\t\t\tcontinue\n\t\tend\n\t\tvisited[grid[i][j]] = true\n\t\t\
    lst_A[#lst_A + 1] = grid[i][j]\n\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\ti = i\
    \ + 1\n\t\tj = j + 1\n\tend\n\ti = n - 1\n\tj = m - 1\n\twhile i >= 0 and j >=\
    \ 0 do\n\t\tif visited[grid[i][j]] then\n\t\t\ti = i - 1\n\t\t\tj = j - 1\n\t\t\
    \tcontinue\n\t\tend\n\t\tvisited[grid[i][j]] = true\n\t\tlst_A[#lst_A + 1] = grid[i][j]\n\
    \t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\ti = i - 1\n\t\tj = j - 1\n\tend\n\tlocal\
    \ count = 0\n\twhile count < k do\n\t\tlocal a = lst_A[count]\n\t\tlocal b = lst_B[count]\n\
    \t\tif a < b then\n\t\t\tcount = count + 1\n\t\telse\n\t\t\tcount = count - 1\n\
    \t\tend\n\tend\n\tans = lst_A\n\treturn ans\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\t\t\
    j = j + 1\n\tend\n\tlocal visited_copy = visited\n\tlocal i, j = 1, 1\n\twhile\
    \ i <= #grid do\n\t\tif visited[i] then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tlocal\
    \ min_idx = nil\n\t\t\tfor j = 1, #visited_copy do\n\t\t\t\tif visited_copy[j]\
    \ then\n\t\t\t\t\tlocal idx = i - j\n\t\t\t\t\tif min_idx == nil or lst_A[idx]\
    \ < lst_A[min_idx] then\n\t\t\t\t\t\tmin_idx = idx\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\tif min_idx ~= nil then\n\t\t\t\tlst_A[min_idx] = lst_A[i]\n\t\
    \t\t\tlst_B[min_idx] = lst_B[j]\n\t\t\t\ti = min_idx + 1\n\t\t\telse\n\t\t\t\t\
    i = i + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\
    \tlocal index = 1\n\tlocal current_cell = {}\n\tlocal current_cell_val = {}\n\t\
    local current_cell_val_count = 0\n\tlocal current_cell_val_counts = {}\n\tlocal\
    \ current_cell_val_counts_index = 1\n\tlocal current_cell_val_counts_indexs =\
    \ {}\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal current_cell_val_counts_indexs_count\
    \ = 0\n\tlocal current_cell_val_counts_indexs_count = 0\n\tlocal ", "  local lst_A,\
    \ lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n  \
    \  table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  for i = 1, k do\n    local j = 1\n    while j < #lst_A do\n\
    \      if lst_A[j] > lst_B[j] then\n        local tmp = lst_A[j]\n        lst_A[j]\
    \ = lst_B[j]\n        lst_B[j] = tmp\n      end\n      j = j + 1\n    end\n  \
    \  table.insert(ans, lst_A[1])\n  end\n  return ans\nend", "  local lst_A = {}\n\
    \  local lst_B = {}\n  local visited = {}\n  local ans = {}\n  local count = 0\n\
    \  local visited_count = 0\n  for i = 1, #grid do\n    local cell = grid[i]\n\
    \    local val = cell[1]\n    local row = cell[2]\n    local col = cell[3]\n \
    \   local neighbors = grid:neighbors(row, col)\n    for _, neighbor in ipairs(neighbors)\
    \ do\n      local neighbor = neighbor[1]\n      if not visited[neighbor] then\n\
    \        visited[neighbor] = true\n        visited_count = visited_count + 1\n\
    \        count = count + 1\n        lst_A[visited_count] = val\n        lst_B[visited_count]\
    \ = neighbor\n        ans[visited_count] = neighbor\n      end\n    end\n  end\n\
    \  local count = 0\n  for i = 1, #grid do\n    local cell = grid[i]\n    local\
    \ val = cell[1]\n    local row = cell[2]\n    local col = cell[3]\n    local neighbors\
    \ = grid:neighbors(row, col)\n    for _, neighbor in ipairs(neighbors) do\n  \
    \    local neighbor = neighbor[1]\n      if not visited[neighbor] then\n     \
    \   visited[neighbor] = true\n        visited_count = visited_count + 1\n    \
    \    count = count + 1\n        lst_A[visited_count] = val\n        lst_B[visited_count]\
    \ = neighbor\n        ans[visited_count] = neighbor\n      end\n    end\n  end\n\
    \  local i = 0\n  while i < visited_count do\n    if lst_A[i] < lst_B[i] then\n\
    \      ans[i] = lst_A[i]\n      i = i + 1\n    else\n      ans[i] = lst_B[i]\n\
    \      i = i + 1\n    end\n  end\n  return ans\nend", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\
    \tlocal current_cell\n\tlocal current_cell_value\n\tlocal current_cell_index\n\
    \tlocal current_cell_index2\n\tlocal current_cell_index3\n\tlocal current_cell_index4\n\
    \tlocal current_cell_index5\n\tlocal current_cell_index6\n\tlocal current_cell_index7\n\
    \tlocal current_cell_index8\n\tlocal current_cell_index9\n\tlocal current_cell_index10\n\
    \tlocal current_cell_index11\n\tlocal current_cell_index12\n\tlocal current_cell_index13\n\
    \tlocal current_cell_index14\n\tlocal current_cell_index15\n\tlocal current_cell_index16\n\
    \tlocal current_cell_index17\n\tlocal current_cell_index18\n\tlocal current_cell_index19\n\
    \tlocal current_cell_index20\n\tlocal current_cell_index21\n\tlocal current_cell_index22\n\
    \tlocal current_cell_index23\n\tlocal current_cell_index24\n\tlocal current_cell_index25\n\
    \tlocal current_cell_index26\n\tlocal current_cell_index27\n\tlocal current_cell_index28\n\
    \tlocal current_cell_index29\n\tlocal current_cell_index30\n\tlocal current_cell_index31\n\
    \tlocal current_cell_index32\n\tlocal current_cell_index33\n\tlocal current_cell_index34\n\
    \tlocal current_cell_index35\n\tlocal current_cell_index36\n\tlocal current_cell_index37\n\
    \tlocal current_cell_index38\n\tlocal current_cell_index39\n\tlocal current_cell_index40\n\
    \tlocal current_cell_index41\n\tlocal current_cell_index42\n\tlocal current_cell_index43\n\
    \tlocal current_cell_index44\n\tlocal current_cell_index45\n\tlocal current_cell_index46\n\
    \tlocal current_cell_index47\n\tlocal current_cell_index48\n\tlocal current_cell_index49\n\
    \tlocal current_cell_index50\n\tlocal current_cell_index51\n\tlocal current_cell_index52\n\
    \tlocal current_cell_index53\n\tlocal current_cell_index54\n\tlocal current_cell_index55\n\
    \tlocal current_cell_index56\n\tlocal current_cell_index57\n\tlocal current_cell_index58\n\
    \tlocal current_cell_index59\n\tlocal current_cell_index60\n\tlocal current_cell_index61\n\
    \tlocal current_cell_index62\n\tlocal current_cell_index63\n\tlocal current_cell_index64\n\
    \tlocal current_cell_index65\n\tlocal current_cell_index66\n\tlocal current_cell_index67\n\
    \tlocal current_cell_index", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited =\
    \ {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n", "  local\
    \ lst_A = {}\n  local lst_B = {}\n  local index = 1\n  local visited = {}\n  local\
    \ visited_index = {}\n  local visited_index[1] = 1\n  local visited_index[2] =\
    \ 2\n  local visited_index[3] = 3\n  local visited_index[4] = 4\n  local visited_index[5]\
    \ = 5\n  local visited_index[6] = 6\n  local visited_index[7] = 7\n  local visited_index[8]\
    \ = 8\n  local visited_index[9] = 9\n  local visited_index[10] = 10\n  local visited_index[11]\
    \ = 11\n  local visited_index[12] = 12\n  local visited_index[13] = 13\n  local\
    \ visited_index[14] = 14\n  local visited_index[15] = 15\n  local visited_index[16]\
    \ = 16\n  local visited_index[17] = 17\n  local visited_index[18] = 18\n  local\
    \ visited_index[19] = 19\n  local visited_index[20] = 20\n  local visited_index[21]\
    \ = 21\n  local visited_index[22] = 22\n  local visited_index[23] = 23\n  local\
    \ visited_index[24] = 24\n  local visited_index[25] = 25\n  local visited_index[26]\
    \ = 26\n  local visited_index[27] = 27\n  local visited_index[28] = 28\n  local\
    \ visited_index[29] = 29\n  local visited_index[30] = 30\n  local visited_index[31]\
    \ = 31\n  local visited_index[32] = 32\n  local visited_index[33] = 33\n  local\
    \ visited_index[34] = 34\n  local visited_index[35] = 35\n  local visited_index[36]\
    \ = 36\n  local visited_index[37] = 37\n  local visited_index[38] = 38\n  local\
    \ visited_index[39] = 39\n  local visited_index[40] = 40\n  local visited_index[41]\
    \ = 41\n  local visited_index[42] = 42\n  local visited_index[43] = 43\n  local\
    \ visited_index[44] = 44\n  local visited_index[45] = 45\n  local visited_index[46]\
    \ = 46\n  local visited_index[47] = 47\n  local visited_index[48] = 48\n  local\
    \ visited_index[49] = 49\n  local visited_index", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\
    \tlocal i, j, val = unpack(grid)\n\tlocal function dfs(i, j)\n\t\tif visited[i][j]\
    \ then\n\t\t\treturn\n\t\tend\n\t\tvisited[i][j] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tif visited_count == k then\n\t\t\ttable.insert(min_path, val)\n\t\t\
    \treturn\n\t\tend\n\t\tlocal neighbors = grid:neighbors(i, j)\n\t\tfor _, neighbor\
    \ in ipairs(neighbors) do\n\t\t\tdfs(neighbor[1], neighbor[2])\n\t\tend\n\tend\n\
    \tdfs(i, j)\n\treturn min_path\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\tlocal index =\
    \ 1\n\tlocal current_cell\n\tlocal current_cell_val\n\tlocal current_cell_val_index\n\
    \tlocal current_cell_val_index2\n\tlocal current_cell_val_index3\n\tlocal current_cell_val_index4\n\
    \tlocal current_cell_val_index5\n\tlocal current_cell_val_index6\n\tlocal current_cell_val_index7\n\
    \tlocal current_cell_val_index8\n\tlocal current_cell_val_index9\n\tlocal current_cell_val_index10\n\
    \tlocal current_cell_val_index11\n\tlocal current_cell_val_index12\n\tlocal current_cell_val_index13\n\
    \tlocal current_cell_val_index14\n\tlocal current_cell_val_index15\n\tlocal current_cell_val_index16\n\
    \tlocal current_cell_val_index17\n\tlocal current_cell_val_index18\n\tlocal current_cell_val_index19\n\
    \tlocal current_cell_val_index20\n\tlocal current_cell_val_index21\n\tlocal current_cell_val_index22\n\
    \tlocal current_cell_val_index23\n\tlocal current_cell_val_index24\n\tlocal current_cell_val_index25\n\
    \tlocal current_cell_val_index26\n\tlocal current_cell_val_index27\n\tlocal current_cell_val_index28\n\
    \tlocal current_cell_val_index29\n\tlocal current_cell_val_index30\n\tlocal current_cell_val_index31\n\
    \tlocal current_cell_val_index32\n\tlocal current_cell_val_index33\n\tlocal current_cell_val_index34\n\
    \tlocal current_cell_val_index35\n\tlocal current_cell_val_index36\n\tlocal current_cell_val_index37\n\
    \tlocal current_cell_val_index38\n\tlocal current_cell_val_index39\n\tlocal current_cell_val_index40\n\
    \tlocal current_cell_val_index41\n\tlocal current_cell_val_index42\n\tlocal current_cell_val_index43\n\
    \tlocal current_cell_val_index44\n\tlocal current_cell_val_index45\n\tlocal current_cell_val_index46\n\
    \tlocal current_cell_val_index47\n\tlocal current_cell_val_index48\n\tlocal current_cell_val_index49\n\
    \tlocal current_cell_val_index50\n\tlocal current_cell_val_index51\n\tlocal current_cell_val_index52\n\
    \tlocal current_cell_val_index53\n\tlocal current_cell_val_index54\n\tlocal current_cell_val_index55\n\
    \tlocal current_cell_val_index56\n\tlocal current_cell_val_index57\n\tlocal current_cell_val_index58\n\
    \tlocal current_cell_val", "  local lst_A = {}\n  local lst_B = {}\n  local i\
    \ = 1\n  local j = 1\n  local count = 0\n  local visited = {}\n  local ans = {}\n\
    \  while i <= #grid do\n    visited[i] = true\n    ans[i] = grid[i]\n    count\
    \ = count + 1\n    while j <= #grid do\n      if grid[i][j] == grid[i][j + 1]\
    \ then\n        count = count + 1\n      elseif grid[i][j] == grid[i][j - 1] then\n\
    \        count = count + 1\n      elseif grid[i][j] == grid[i + 1][j] then\n \
    \       count = count + 1\n      elseif grid[i][j] == grid[i - 1][j] then\n  \
    \      count = count + 1\n      else\n        count = count + 1\n      end\n \
    \     if count == k then\n        local k = k - 1\n        local ii = i - 1\n\
    \        local jj = j - 1\n        while ii > 0 and jj > 0 and grid[ii][jj] ==\
    \ grid[ii - 1][jj] do\n          ii = ii - 1\n          jj = jj - 1\n        end\n\
    \        local ii = i + 1\n        local jj = j + 1\n        while ii < #grid\
    \ and jj < #grid and grid[ii][jj] == grid[ii][jj + 1] do\n          ii = ii +\
    \ 1\n          jj = jj + 1\n        end\n        local ii = i - 1\n        local\
    \ jj = j + 1\n        while ii > 0 and jj < #grid and grid[ii][jj] == grid[ii\
    \ - 1][jj + 1] do\n          ii = ii - 1\n          jj = jj + 1\n        end\n\
    \        local ii = i + 1\n        local jj = j - 1\n        while ii < #grid\
    \ and jj > 0 and grid[ii][jj] == grid[ii - 1][jj - 1] do\n          ii = ii +\
    \ 1\n          jj = jj - 1\n        end\n        local ii = i - 1\n        local\
    \ jj = j + 1\n        while ii > 0 and jj < #grid and grid[ii][jj] == grid[ii\
    \ - 1][jj + 1] do\n          ii = ii - 1\n          jj = jj + 1\n        end\n\
    \        local ii = i + 1\n        local jj = j - 1\n        while ii < #grid\
    \ and jj > 0 and grid[ii][jj] == grid[ii - 1][jj - 1] do\n          ii = ii +\
    \ 1\n          jj = jj - 1\n        end\n        local ii = i - 1\n        local\
    \ jj = j + 1\n        while ii < #grid and jj < #grid and grid[ii][jj] == grid[ii][jj\
    \ + 1] do\n          i", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal visited_list = nil\n\tlocal current_cell =\
    \ {}\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n", "  --\
    \ Base case: empty grid\n  if #grid == 0 then\n    return {}\n  end\n  -- Base\
    \ case: k is 0\n  if k == 0 then\n    return grid[1]\n  end\n  -- Base case: k\
    \ is 1\n  if k == 1 then\n    return grid[1]\n  end\n  -- Base case: k is 2\n\
    \  if k == 2 then\n    return grid[1]\n  end\n  -- Base case: k is 3\n  if k ==\
    \ 3 then\n    return grid[1]\n  end\n  -- Base case: k is 4\n  if k == 4 then\n\
    \    return grid[1]\n  end\n  -- Base case: k is 5\n  if k == 5 then\n    return\
    \ grid[1]\n  end\n  -- Base case: k is 6\n  if k == 6 then\n    return grid[1]\n\
    \  end\n  -- Base case: k is 7\n  if k == 7 then\n    return grid[1]\n  end\n\
    \  -- Base case: k is 8\n  if k == 8 then\n    return grid[1]\n  end\n  -- Base\
    \ case: k is 9\n  if k == 9 then\n    return grid[1]\n  end\n  -- Base case: k\
    \ is 10\n  if k == 10 then\n    return grid[1]\n  end\n  -- Base case: k is 11\n\
    \  if k == 11 then\n    return grid[1]\n  end\n  -- Base case: k is 12\n  if k\
    \ == 12 then\n    return grid[1]\n  end\n  -- Base case: k is 13\n  if k == 13\
    \ then\n    return grid[1]\n  end\n  -- Base case: k is 14\n  if k == 14 then\n\
    \    return grid[1]\n  end\n  -- Base case: k is 15\n  if k == 15 then\n    return\
    \ grid[1]\n  end\n  -- Base case: k is 16\n  if k == 16 then\n    return grid[1]\n\
    \  end\n  -- Base case: k is 17\n  if k == 17 then\n    return grid[1]\n  end\n\
    \  -- Base case: k is 18\n  if k == 18 then\n    return grid[1]\n  end\n  -- Base\
    \ case: k is 19\n  if k == 19 then\n    return grid[1]\n  end\n  -- Base case:\
    \ k is 20\n  if k == 20 then\n    return grid[1]\n  end\n  -- Base case: k is\
    \ 21\n  if k == 21 then\n    return grid[1]\n  end\n  -- Base case: k is 22\n\
    \  if k == 22 then\n    return grid[1]\n  end\n  -- Base case: k is 23\n  if k\
    \ == 23 then\n    return grid[1]", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i,\
    \ j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\
    \t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\t\
    end\n\tlocal lst_A_size = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal lst_A_sorted\
    \ = {}\n\tlocal lst_B_sorted = {}\n\tlocal i = 1\n\twhile i <= lst_A_size do\n\
    \t\tlst_A_sorted[i] = lst_A[i]\n\t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile j\
    \ <= lst_B_size do\n\t\tlst_B_sorted[j] = lst_B[j]\n\t\tj = j + 1\n\tend\n\tlocal\
    \ i = 1\n\twhile i <= lst_A_size do\n\t\tlocal j = 1\n\t\twhile j <= lst_B_size\
    \ do\n\t\t\tif lst_A_sorted[i] < lst_B_sorted[j] then\n\t\t\t\tlocal k = i - 1\n\
    \t\t\t\twhile k >= 1 do\n\t\t\t\t\tlst_A[k] = lst_A[k - 1]\n\t\t\t\t\tk = k -\
    \ 1\n\t\t\t\tend\n\t\t\t\tlst_A[k] = lst_A_sorted[i]\n\t\t\t\ti = i + 1\n\t\t\t\
    elseif lst_A_sorted[i] > lst_B_sorted[j] then\n\t\t\t\tlocal k = j - 1\n\t\t\t\
    \twhile k >= 1 do\n\t\t\t\t\tlst_B[k] = lst_B[k - 1]\n\t\t\t\t\tk = k - 1\n\t\t\
    \t\tend\n\t\t\t\tlst_B[k] = lst_B_sorted[j]\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\
    \t\t\ti = i + 1\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A_size\
    \ = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal lst_A_sorted = {}\n\tlocal lst_B_sorted\
    \ = {}\n\tlocal i = 1\n\twhile i <= lst_A_size do\n\t\tlst_A_sorted[i] = lst_A[i]\n\
    \t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile j <= lst_B_size do\n\t\tlst_B_sorted[j]\
    \ = lst_B[j]\n\t\tj = j + 1\n\tend\n\tlocal i = 1\n\twhile i <= lst_A_size do\n\
    \t\tlocal j = 1\n\t\twhile j <= lst_B_size do\n\t\t\tif lst_A_sorted[i] < lst_B_sorted[j]\
    \ then\n\t\t\t\tlocal k = i - 1\n\t\t\t\twhile k >= 1 do\n\t\t\t\t\t", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited = {}\n\
    \tlocal ans = {}\n\tlocal visited_lst, ans_lst = {}, {}\n\tlocal function dfs(i,\
    \ j)\n\t\tvisited[i] = visited[i] or {}\n\t\tvisited[i][j] = true\n\t\tvisited_lst[i]\
    \ = visited_lst[i] or {}\n\t\tvisited_lst[i][j] = true\n\t\tlocal val = grid[i][j]\n\
    \t\tif val == nil then return end\n\t\tlst_A[#lst_A + 1] = val\n\t\tlst_B[#lst_B\
    \ + 1] = val\n\t\tfor k = 1, n do\n\t\t\tif grid[i][j] == grid[i][k] then\n\t\t\
    \t\tdfs(i, k)\n\t\t\tend\n\t\t\tif grid[i][j] == grid[k][j] then\n\t\t\t\tdfs(k,\
    \ j)\n\t\t\tend\n\t\tend\n\tend\n\tdfs(1, n)\n\tlocal function dfs_back(i, j)\n\
    \t\tvisited[i] = visited[i] or {}\n\t\tvisited[i][j] = true\n\t\tvisited_lst[i]\
    \ = visited_lst[i] or {}\n\t\tvisited_lst[i][j] = true\n\t\tlocal val = grid[i][j]\n\
    \t\tif val == nil then return end\n\t\tlocal ii, jj\n\t\tif i == 1 then\n\t\t\t\
    ii = j\n\t\t\tjj = k\n\t\telse\n\t\t\tii = i - 1\n\t\t\tjj = j - 1\n\t\tend\n\t\
    \tif ii > 0 then\n\t\t\tif visited_lst[ii][jj] then\n\t\t\t\tdfs_back(ii, jj)\n\
    \t\t\tend\n\t\tend\n\t\tif jj > 0 then\n\t\t\tif visited_lst[ii][jj] then\n\t\t\
    \t\tdfs_back(ii, jj)\n\t\t\tend\n\t\tend\n\tend\n\tdfs_back(1, n)\n\tlocal function\
    \ dfs_back_back(i, j)\n\t\tvisited[i] = visited[i] or {}\n\t\tvisited[i][j] =\
    \ true\n\t\tvisited_lst[i] = visited_lst[i] or {}\n\t\tvisited_lst[i][j] = true\n\
    \t\tlocal val = grid[i][j]\n\t\tif val == nil then return end\n\t\tlocal ii, jj\n\
    \t\tif i == 1 then\n\t\t\tii = j\n\t\t\tjj = k\n\t\telse\n\t\t\tii = i - 1\n\t\
    \t\tjj = j - 1\n\t\tend\n\t\tif ii > 0 then\n\t\t\tif visited_lst[ii][jj] then\n\
    \t\t\t\tdfs_back_back(ii, jj)\n\t\t\tend\n\t\tend\n\t\tif jj > 0 then\n\t\t\t\
    if visited_lst[ii", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_len = 0\n\tlocal visited_lens = {}\n\tlocal\
    \ visited_lens_count = 0\n\tlocal visited_lens_sum = 0\n\tlocal visited_lens_sums\
    \ = {}\n\tlocal visited_lens_sums_count = 0\n\tlocal visited_lens_sums_sum = 0\n\
    \tlocal visited_lens_sums_sums = {}\n\tlocal visited_lens_sums_sums_count = 0\n\
    \tlocal visited_lens_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums =\
    \ {}\n\tlocal visited_lens_sums_sums_sums_count = 0\n\tlocal visited_lens_sums_sums_sums_sum\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums = {}\n\tlocal visited_lens_sums_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_count = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sum\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_count = 0\n\t\
    local visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\
    \tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i = 1\n\tlocal j = 1\n\twhile\
    \ i <= n and j <= m do\n\t\tif grid[i][j] == nil then\n\t\t\ti = i + 1\n\t\t\t\
    j = j + 1\n\t\telse\n\t\t\tlocal x = grid[i][j]\n\t\t\tlocal y = grid[i][j + 1]\n\
    \t\t\tlocal z = grid[i + 1][j]\n\t\t\tlocal w = grid[i + 1][j + 1]\n\t\t\tif x\
    \ ~= nil and y ~= nil and z ~= nil and w ~= nil then\n\t\t\t\tif visited[x + y\
    \ * m] == nil then\n\t\t\t\t\tvisited[x + y * m] = true\n\t\t\t\t\tlst_A[#lst_A\
    \ + 1] = x\n\t\t\t\t\tlst_B[#lst_B + 1] = y\n\t\t\t\t\tlst_A[#lst_A + 1] = z\n\
    \t\t\t\t\tlst_B[#lst_B + 1] = w\n\t\t\t\telse\n\t\t\t\t\ti = i + 1\n\t\t\t\t\t\
    j = j + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\ti = i + 1\n\t\t\t\tj = j + 1\n\t\t\
    \tend\n\t\tend\n\tend\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m\
    \ do\n\t\tif grid[i][j] == nil then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\
    \t\t\tlocal x = grid[i][j]\n\t\t\tlocal y = grid[i][j + 1]\n\t\t\tlocal z = grid[i\
    \ + 1][j]\n\t\t\tlocal w = grid[i + 1][j + 1]\n\t\t\tif x ~= nil and y ~= nil\
    \ and z ~= nil and w ~= nil then\n\t\t\t\tif visited[x + y * m] == nil then\n\t\
    \t\t\t\tvisited[x + y * m] = true\n\t\t\t\t\tlst_A[#lst_A + 1] = x\n\t\t\t\t\t\
    lst_B[#lst_B + 1] = y\n\t\t\t\t\tlst_A[#lst_A + 1] = z\n\t\t\t\t\tlst_B[#lst_B\
    \ + 1] = w\n\t\t\t\telse\n\t\t\t\t\ti = i + 1\n\t\t\t\t\tj = j + 1\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\ti = i + 1\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\t\
    local i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\t\tif grid[i][j] ==\
    \ nil then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tlocal x = grid[i][j]\n\
    \t\t\tlocal y = grid[i][j + 1]\n\t\t\tlocal z = grid[i + 1][j]\n\t\t\tlocal w\
    \ = grid[i + 1][j + 1]\n\t\t\tif x ~= nil and y ", "\tlocal lst_A = {}\n\tlocal\
    \ lst_B = {}\n\tlocal i, j, val\n\tfor i, row in ipairs(grid) do\n\t\tfor j, val\
    \ in ipairs(row) do\n\t\t\ttable.insert(lst_A, val)\n\t\t\ttable.insert(lst_B,\
    \ val)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans\
    \ = {}\n\tlocal visited = {}\n\tlocal stack = {}\n\tlocal visited_count = 0\n\t\
    local stack_count = 0\n\tlocal visited_stack = {}\n\tlocal stack_visited = {}\n\
    \tlocal stack_visited_count = 0\n\tlocal min_stack = {}\n\tlocal min_stack_visited\
    \ = {}\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count\
    \ = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count\
    \ = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal\
    \ min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count\
    \ = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count\
    \ = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal\
    \ min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count\
    \ = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count\
    \ = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal\
    \ min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count\
    \ = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count\
    \ = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal\
    \ min_stack_count = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count\
    \ = 0\n\tlocal min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal\
    \ min_stack_visited_count = 0\n\tlocal min_stack_count = 0\n\tlocal min_stack_visite",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\t\
    lst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\t\ti = i + 1\n\tend\n\twhile\
    \ j <= #grid do\n\t\tlocal i = 1\n\t\twhile i <= #grid do\n\t\t\tif lst_A[i] >\
    \ lst_B[i] then\n\t\t\t\tlst_A[i], lst_B[i] = lst_B[i], lst_A[i]\n\t\t\telse\n\
    \t\t\t\ti = i + 1\n\t\t\tend\n\t\tend\n\t\tj = j + 1\n\tend\n\tlocal ans = {}\n\
    \tlocal i = 1\n\twhile i <= #grid do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\t\
    ans[i] = lst_A[i]\n\t\t\ti = i + 1\n\t\telse\n\t\t\tans[i] = lst_B[i]\n\t\t\t\
    i = i + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\
    \tlocal visited_count_max_index = 0\n\tlocal visited_count_max_index2 = 0\n\t\
    local visited_count_max_index3 = 0\n\tlocal visited_count_max_index4 = 0\n\tlocal\
    \ visited_count_max_index5 = 0\n\tlocal visited_count_max_index6 = 0\n\tlocal\
    \ visited_count_max_index7 = 0\n\tlocal visited_count_max_index8 = 0\n\tlocal\
    \ visited_count_max_index9 = 0\n\tlocal visited_count_max_index10 = 0\n\tlocal\
    \ visited_count_max_index11 = 0\n\tlocal visited_count_max_index12 = 0\n\tlocal\
    \ visited_count_max_index13 = 0\n\tlocal visited_count_max_index14 = 0\n\tlocal\
    \ visited_count_max_index15 = 0\n\tlocal visited_count_max_index16 = 0\n\tlocal\
    \ visited_count_max_index17 = 0\n\tlocal visited_count_max_index18 = 0\n\tlocal\
    \ visited_count_max_index19 = 0\n\tlocal visited_count_max_index20 = 0\n\tlocal\
    \ visited_count_max_index21 = 0\n\tlocal visited_count_max_index22 = 0\n\tlocal\
    \ visited_count_max_index23 = 0\n\tlocal visited_count_max_index24 = 0\n\tlocal\
    \ visited_count_max_index25 = 0\n\tlocal visited_count_max_index26 = 0\n\tlocal\
    \ visited_count_max_index27 = 0\n\tlocal visited_count_max_index28 = 0\n\tlocal\
    \ visited_count_max_index29 = 0\n\tlocal visited_count_max_index30 = 0\n\tlocal\
    \ visited_count_max_index31 = 0\n\tlocal visited_count_max_index32 = 0\n\tlocal\
    \ visited_count_max_index33 = 0\n\tlocal visited_count_max_index34 = 0\n\tlocal\
    \ visited_count_max_index35 = 0\n\tlocal visited_count_max_index36 = 0\n\tlocal\
    \ visited_count_max_index37 = 0\n\tlocal visited_count_max_index38 = 0\n\tlocal\
    \ visited_count_max_index39 = 0\n\tlocal visited_count_max_index40 = 0\n\tlocal\
    \ visited_count_max_index41 = 0\n\tlocal visited_count_max_index42 = 0\n\tlocal\
    \ visited_count_max_index43 = 0\n\tlocal visited_count_max_index44 = 0\n\tlocal\
    \ visited_count_max_index45 = 0\n\tlocal visited_count_max_index46 = 0\n\tlocal\
    \ visited_count_max_index47 = 0\n\tlocal visited_count_max_index48 = 0\n\t", "\t\
    local lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal results =\
    \ {}\n\tlocal count = 0\n\tlocal visited_count = 0\n\tfor _, row in ipairs(grid)\
    \ do\n\t\tfor _, cell in ipairs(row) do\n\t\t\tlst_A[count] = cell\n\t\t\tlst_B[count]\
    \ = cell\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tlocal function dfs(i, j)\n\
    \t\tif i == j then\n\t\t\tresults[i] = lst_A[i]\n\t\t\tvisited_count = visited_count\
    \ + 1\n\t\t\treturn\n\t\tend\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\
    \tfor _, cell in ipairs(grid) do\n\t\t\tif visited[cell] then\n\t\t\t\tdfs(i,\
    \ cell)\n\t\t\tend\n\t\tend\n\tend\n\tdfs(1, #grid)\n\tlocal function dfs_back(i,\
    \ j)\n\t\tif i == j then\n\t\t\tresults[i] = lst_B[i]\n\t\t\tvisited_count = visited_count\
    \ + 1\n\t\t\treturn\n\t\tend\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\
    \tfor _, cell in ipairs(grid) do\n\t\t\tif visited[cell] then\n\t\t\t\tdfs_back(cell,\
    \ j)\n\t\t\tend\n\t\tend\n\tend\n\tdfs_back(1, #grid)\n\tlocal function dfs_back_back(i,\
    \ j)\n\t\tif i == j then\n\t\t\tresults[i] = lst_A[i]\n\t\t\tvisited_count = visited_count\
    \ + 1\n\t\t\treturn\n\t\tend\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\
    \tfor _, cell in ipairs(grid) do\n\t\t\tif visited[cell] then\n\t\t\t\tdfs_back_back(cell,\
    \ j)\n\t\t\tend\n\t\tend\n\tend\n\tdfs_back_back(1, #grid)\n\treturn results\n\
    end", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\t\
    while i <= #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\t\t\
    i = i + 1\n\tend\n\ti = 2\n\twhile i <= #grid do\n\t\tlocal x = grid[i][1]\n\t\
    \tlocal y = grid[i][2]\n\t\tlocal count = 0\n\t\twhile j <= #grid do\n\t\t\tif\
    \ grid[j][1] == x and grid[j][2] == y then\n\t\t\t\tcount = count + 1\n\t\t\t\
    end\n\t\t\tj = j + 1\n\t\tend\n\t\tif count < k then\n\t\t\tlst_A[i] = x\n\t\t\
    \tlst_B[i] = y\n\t\t\ti = i + 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\t\
    local lst_C = {}\n\tlocal i = 1\n\twhile i <= #grid do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tlst_C[i] = lst_A[i]\n\t\telse\n\t\t\tlst_C[i] = lst_B[i]\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn lst_C\nend", "  local lst_A, lst_B = {}, {}\n \
    \ local i, j, n = unpack(grid)\n  local visited = {}\n  local visited_count =\
    \ 0\n  for i = 1, n do\n    visited[i] = false\n  end\n  for i = 1, n do\n   \
    \ visited_count = visited_count + 1\n    for j = 1, n do\n      if grid[i][j]\
    \ == 1 then\n        table.insert(lst_A, j)\n      else\n        table.insert(lst_B,\
    \ j)\n      end\n    end\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local\
    \ ans = {}\n  for i = 1, n do\n    if visited[i] == false then\n      visited[i]\
    \ = true\n      local count = 0\n      while count < k do\n        count = count\
    \ + 1\n        local index = math.random(#lst_A)\n        if lst_A[index] > lst_B[index]\
    \ then\n          index = index - 1\n        end\n        local tmp = lst_A[index]\n\
    \        lst_A[index] = lst_B[index]\n        lst_B[index] = tmp\n      end\n\
    \      table.insert(ans, lst_A[i])\n    end\n  end\n  return ans\nend", "\tlocal\
    \ lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\tlocal ans = {}\n\twhile i <= #grid do\n\t\tlocal cells = grid[i]\n\t\t\
    for _, cell in pairs(cells) do\n\t\t\tcount = count + 1\n\t\t\tlst_A[count] =\
    \ cell\n\t\t\tlst_B[count] = cell\n\t\tend\n\t\ti = i + 1\n\tend\n\twhile j <=\
    \ #grid do\n\t\tlocal cells = grid[j]\n\t\tfor _, cell in pairs(cells) do\n\t\t\
    \tcount = count + 1\n\t\t\tlst_A[count] = cell\n\t\t\tlst_B[count] = cell\n\t\t\
    end\n\t\tj = j + 1\n\tend\n\twhile count <= k do\n\t\tlocal cells = grid[lst_A[count]]\n\
    \t\tfor _, cell in pairs(cells) do\n\t\t\tcount = count + 1\n\t\t\tlst_A[count]\
    \ = cell\n\t\t\tlst_B[count] = cell\n\t\tend\n\tend\n\twhile count <= k do\n\t\
    \tlocal cells = grid[lst_B[count]]\n\t\tfor _, cell in pairs(cells) do\n\t\t\t\
    count = count + 1\n\t\t\tlst_A[count] = cell\n\t\t\tlst_B[count] = cell\n\t\t\
    end\n\tend\n\tfor i = 1, #lst_A do\n\t\tlocal cells = grid[lst_A[i]]\n\t\tfor\
    \ _, cell in pairs(cells) do\n\t\t\tans[#ans + 1] = cell\n\t\tend\n\tend\n\treturn\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_max = math.max(#visited, k)\n\tfor i, row in ipairs(grid)\
    \ do\n\t\tfor j, value in ipairs(row) do\n\t\t\tlst_A[#lst_A + 1] = value\n\t\t\
    \tlst_B[#lst_B + 1] = value\n\t\tend\n\tend\n\twhile visited_count < visited_max\
    \ do\n\t\tlocal min_idx = nil\n\t\tlocal min_val = nil\n\t\tfor i, val in ipairs(lst_A)\
    \ do\n\t\t\tif min_val == nil or val < min_val then\n\t\t\t\tmin_val = val\n\t\
    \t\t\tmin_idx = i\n\t\t\tend\n\t\tend\n\t\tvisited[#visited + 1] = min_idx\n\t\
    \tvisited_count = visited_count + 1\n\t\tfor i, val in ipairs(lst_B) do\n\t\t\t\
    if val == min_val then\n\t\t\t\tlst_B[#lst_B + 1] = nil\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn lst_A\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tfor _, row in ipairs(grid) do\n\t\tfor _, value\
    \ in ipairs(row) do\n\t\t\ttable.insert(lst_A, value)\n\t\tend\n\tend\n\tfor _,\
    \ row in ipairs(grid) do\n\t\tfor _, value in ipairs(row) do\n\t\t\ttable.insert(lst_B,\
    \ value)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans\
    \ = {}\n\tlocal i = 0\n\twhile i < k do\n\t\tlocal j = i\n\t\twhile j < k do\n\
    \t\t\tif lst_A[j] < lst_B[i] then\n\t\t\t\tbreak\n\t\t\telseif lst_A[j] > lst_B[i]\
    \ then\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\ttable.insert(ans, lst_A[j])\n\t\
    \t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend",
  "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n\
    \  local current_cell\n  local current_cell_index\n  local current_cell_value\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local current_cell_value_index\n  local current_cell_value_index\n\
    \  local current_cell_value_index\n  local ", "  local lst_A, lst_B = {}, {}\n\
    \  local visited = {}\n  local visited_count = 0\n  local visited_list = nil\n\
    \  local count = 0\n  local index = 1\n  local cell\n  local value\n  local i\n\
    \  \n  while index <= #grid do\n    cell = grid[index]\n    index = index + 1\n\
    \    value = cell[1]\n    \n    if visited[value] == nil then\n      visited[value]\
    \ = true\n      visited_count = visited_count + 1\n      visited_list = visited_list\
    \ .. value\n      lst_A[visited_count] = cell\n      lst_B[visited_count] = cell\n\
    \      count = count + 1\n    end\n  end\n  \n  while count > k do\n    index\
    \ = index + 1\n    cell = grid[index]\n    value = cell[1]\n    \n    if visited[value]\
    \ == nil then\n      visited[value] = true\n      visited_count = visited_count\
    \ + 1\n      visited_list = visited_list .. value\n      lst_A[visited_count]\
    \ = cell\n      lst_B[visited_count] = cell\n      count = count + 1\n    end\n\
    \  end\n  \n  while count > 1 do\n    index = index + 1\n    cell = grid[index]\n\
    \    value = cell[1]\n    \n    if visited[value] == nil then\n      visited[value]\
    \ = true\n      visited_count = visited_count + 1\n      visited_list = visited_list\
    \ .. value\n      lst_A[visited_count] = cell\n      lst_B[visited_count] = cell\n\
    \      count = count - 1\n    end\n  end\n  \n  while visited_count > 1 do\n \
    \   index = index + 1\n    cell = grid[index]\n    value = cell[1]\n    \n   \
    \ if visited[value] == nil then\n      visited[value] = true\n      visited_count\
    \ = visited_count - 1\n      visited_list = visited_list .. value\n      lst_A[visited_count]\
    \ = cell\n      lst_B[visited_count] = cell\n      count = count - 1\n    end\n\
    \  end\n  \n  return visited_list\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j, n = #grid, 1, 1\n\twhile i <= n do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i]\
    \ = grid[i]\n\t\ti = i + 1\n\tend\n\twhile j <= n do\n\t\tlocal i\n\t\tfor i =\
    \ 1, n do\n\t\t\tif lst_A[i] > lst_B[i] then\n\t\t\t\tbreak\n\t\t\telseif i ==\
    \ n then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tlst_A[i], lst_B[i] = lst_B[i], lst_A[i]\n\
    \t\t\tend\n\t\tend\n\t\tj = j + 1\n\tend\n\tlocal ans = {}\n\tfor i = 1, n do\n\
    \t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[i] = lst_A[i]\n\t\telse\n\t\t\tans[i]\
    \ = lst_B[i]\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal count = 0\n\tlocal visited_count = 0\n\tlocal\
    \ current_cell = {}\n\tlocal current_cell_index = 1\n\tlocal current_cell_val\
    \ = grid[current_cell_index]\n\tlocal current_cell_edge = grid[current_cell_index\
    \ - 1]\n\tlocal current_cell_edge_index = grid[current_cell_index + 1]\n\tlocal\
    \ current_cell_edge_value = grid[current_cell_edge_index]\n\tlocal current_cell_edge_next\
    \ = grid[current_cell_edge_index + 1]\n\tlocal current_cell_edge_next_index =\
    \ grid[current_cell_edge_index + 2]\n\tlocal current_cell_edge_next_val = grid[current_cell_edge_next_index]\n\
    \tlocal current_cell_edge_next_edge = grid[current_cell_edge_next_index + 1]\n\
    \tlocal current_cell_edge_next_edge_index = grid[current_cell_edge_next_index\
    \ + 2]\n\tlocal current_cell_edge_next_edge_val = grid[current_cell_edge_next_edge_index]\n\
    \tlocal current_cell_edge_next_edge_next = grid[current_cell_edge_next_edge_index\
    \ + 1]\n\tlocal current_cell_edge_next_edge_next_index = grid[current_cell_edge_next_edge_index\
    \ + 2]\n\tlocal current_cell_edge_next_edge_next_val = grid[current_cell_edge_next_edge_next_index]\n\
    \tlocal current_cell_edge_next_edge_next_edge = grid[current_cell_edge_next_edge_next_index\
    \ + 1]\n\tlocal current_cell_edge_next_edge_next_edge_index = grid[current_cell_edge_next_edge_next_index\
    \ + 2]\n\tlocal current_cell_edge_next_edge_next_edge_val = grid[current_cell_edge_next_edge_next_edge_index\
    \ + 1]\n\tlocal current_cell_edge_next_edge_next_edge_next = grid[current_cell_edge_next_edge_next_edge_index\
    \ + 2]\n\tlocal current_cell_edge_next_edge_next_edge_next_index = grid[current_cell_edge_next_edge_next_edge_index\
    \ + 3]\n\tlocal current_cell_edge_next_edge_next_edge_next_val = grid[current_cell_edge_next_edge_next_edge_next_index]\n\
    \tlocal current_cell_edge_next_edge_next_edge_next_edge = grid[current_cell_edge_next_edge_next_edge_next_edge_index\
    \ + 1]\n\tlocal current_cell_edge_next_edge_next_edge_next_edge_index = grid[current_cell_edge_next_edge_next_edge_next_edge_index\
    \ + 2]\n\tlocal current_cell_edge_next_edge_next_edge_next_edge_val = grid[current_cell_edge_next_edge_next_edge_next_edge_index\
    \ + 3]\n\tlocal current_cell_edge_next_edge_next_edge_next_edge_next = grid[current_cell_edge_next_edge_next_edge_next_edge_index\
    \ + 4]\n\tlocal current_cell_edge_next_edge_next_edge_next_edge_next_index = grid[current_cell_edge_next_edge_next_edge_next_edge_index\
    \ + 5]\n\tlocal current_cell_edge_next_edge_next_edge_", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n", "  local lst_A, lst_B = {}, {}\n  local\
    \ visited = {}\n  local visited_count = 0\n  local visited_count_max = 0\n  local\
    \ visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal\
    \ ans = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal n = #grid\n\twhile i <= n do\n\
    \t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\t\
    \ti = i + 1\n\tend\n\tvisited[i] = true\n\twhile j <= n do\n\t\tvisited[j] = true\n\
    \t\tlst_A[j] = grid[j][1]\n\t\tlst_B[j] = grid[j][1]\n\t\tj = j + 1\n\tend\n\t\
    while i <= n do\n\t\tif visited[i] == false then\n\t\t\ti = i - 1\n\t\telse\n\t\
    \t\tlocal k = i\n\t\t\twhile k <= n do\n\t\t\t\tif visited[k] == false then\n\t\
    \t\t\t\tk = k - 1\n\t\t\t\telse\n\t\t\t\t\tlocal m = k\n\t\t\t\t\twhile m <= n\
    \ do\n\t\t\t\t\t\tif visited[m] == false then\n\t\t\t\t\t\t\tm = m - 1\n\t\t\t\
    \t\t\telse\n\t\t\t\t\t\t\tlocal n = m\n\t\t\t\t\t\t\twhile n <= n do\n\t\t\t\t\
    \t\t\t\tif visited[n] == false then\n\t\t\t\t\t\t\t\t\tn = n - 1\n\t\t\t\t\t\t\
    \t\telse\n\t\t\t\t\t\t\t\t\tlocal k = n\n\t\t\t\t\t\t\t\t\twhile k <= n do\n\t\
    \t\t\t\t\t\t\t\t\tif visited[k] == false then\n\t\t\t\t\t\t\t\t\t\t\tk = k - 1\n\
    \t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tlocal m = k\n\t\t\t\t\t\t\t\t\t\
    \t\twhile m <= n do\n\t\t\t\t\t\t\t\t\t\t\t\tif visited[m] == false then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\tm = m - 1\n\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\tlocal n = m\n\t\t\t\t\t\t\t\t\t\t\t\t\twhile n <= n do\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tif visited[n] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tn =\
    \ n - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ k = n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile k <= n do\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tif visited[k] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tk = k\
    \ - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    local m = k\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile m <= n do\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\tif visited[m] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tm = m - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\tlocal n = m\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile\
    \ n <= n do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[n] == false then\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tn = n - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal k = n\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile k <= n do\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\tif visited[k] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tk = k - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal m = k\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\twhile m <= n do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tif visited[m] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tm = m - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal n = m", "\tlocal lst_A = {}\n\
    \tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal n = 1\n\t\
    for i = 1, #grid do\n\t\tvisited[i] = false\n\tend\n\tvisited[grid[1][1]] = true\n\
    \tlst_A[grid[1][1]] = grid[1][1]\n\tlst_B[grid[1][1]] = grid[1][1]\n\tlocal i\
    \ = 1\n\twhile i <= #grid do\n\t\tif visited[i] then\n\t\t\tlocal j = i - 1\n\t\
    \t\twhile j ~= 1 do\n\t\t\t\tif visited[j] then\n\t\t\t\t\tlocal k = j - 1\n\t\
    \t\t\t\twhile k ~= 1 do\n\t\t\t\t\t\tif visited[k] then\n\t\t\t\t\t\t\tlocal m\
    \ = k - 1\n\t\t\t\t\t\t\twhile m ~= 1 do\n\t\t\t\t\t\t\t\tif visited[m] then\n\
    \t\t\t\t\t\t\t\t\tlocal n = m - 1\n\t\t\t\t\t\t\t\t\twhile n ~= 1 do\n\t\t\t\t\
    \t\t\t\t\t\tif visited[n] then\n\t\t\t\t\t\t\t\t\t\t\tlocal o = n - 1\n\t\t\t\t\
    \t\t\t\t\t\t\twhile o ~= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\tif visited[o] then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\tlocal p = o\n\t\t\t\t\t\t\t\t\t\t\t\t\twhile p ~= 1 do\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[p] then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    local q = p\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile q ~= 1 do\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif visited[q] then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal r =\
    \ q - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile r ~= 1 do\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\tif visited[r] then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ s = r - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile s ~= 1 do\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[s] then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tlocal t = s - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile\
    \ t ~= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[t] then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal u = t - 1\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\twhile u ~= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif visited[u] then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\tlocal v = u - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile\
    \ v ~= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[v]\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal w = v - 1\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile w ~= 1 do\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[w] then\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal x = w - 1\n\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile x ~= 1 do\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[x] then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal y = x - 1\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile y ~= 1 do\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[y] then\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal z = y - 1\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile z ~= 1 do\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[z]\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal ans = {}\n\tlocal visited = {}\n\tlocal cnt = 0\n\tlocal n = #grid\n\
    \tlocal m = #grid[1]\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m\
    \ do\n\t\tif grid[i][j] == nil then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telseif\
    \ visited[grid[i][j]] == nil then\n\t\t\tvisited[grid[i][j]] = true\n\t\t\tlst_A[#lst_A\
    \ + 1] = grid[i][j]\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\tcnt = cnt + 1\n\
    \t\t\tif cnt >= k then\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\t\t\ti = i + 1\n\t\
    \t\tj = j + 1\n\t\tend\n\tend\n\tlocal cnt = 0\n\tlocal i = 1\n\tlocal j = 1\n\
    \twhile i <= n and j <= m do\n\t\tif grid[i][j] == nil then\n\t\t\ti = i + 1\n\
    \t\t\tj = j + 1\n\t\telseif visited[grid[i][j]] == nil then\n\t\t\tvisited[grid[i][j]]\
    \ = true\n\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\
    \t\t\tcnt = cnt + 1\n\t\t\tif cnt >= k then\n\t\t\t\tbreak\n\t\t\tend\n\t\telse\n\
    \t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tfor i = 1, #lst_A do\n\t\tans[#ans + 1] = lst_A[i]\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_dict = {}\n\tlocal visited_dict_count = 0\n\tlocal visited_dict_list\
    \ = []\n\tlocal visited_dict_list_count = 0\n\tlocal visited_dict_list_dict =\
    \ {}\n\tlocal visited_dict_list_dict_count = 0\n\tlocal visited_dict_list_dict_list\
    \ = []\n\tlocal visited_dict_list_dict_list_count = 0\n\tlocal visited_dict_list_dict_list_dict\
    \ = {}\n\tlocal visited_dict_list_dict_list_dict_count = 0\n\tlocal visited_dict_list_dict_list_dict_list\
    \ = []\n\tlocal visited_dict_list_dict_list_dict_list_count = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict\
    \ = {}\n\tlocal visited_dict_list_dict_list_dict_list_dict_count = 0\n\tlocal\
    \ visited_dict_list_dict_list_dict_list_dict_list = []\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict = {}\n\tlocal\
    \ visited_dict_list_dict_list_dict_list_dict_list_dict_count = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list\
    \ = []\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict\
    \ = {}\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal visited_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_dict_list_count\
    \ = 0\n\tlocal ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_list = nil\n\tlocal visited_list_count =\
    \ 0\n\tlocal visited_list_size = nil\n\tlocal visited_list_size_max = nil\n\t\
    local visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal\
    \ visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min\
    \ = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min =\
    \ nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\
    \tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal\
    \ visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max\
    \ = nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max =\
    \ nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\
    \tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal\
    \ visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min\
    \ = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min =\
    \ nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\
    \tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal\
    \ visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max\
    \ = nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max =\
    \ nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\
    \tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal\
    \ visited_list_size_min = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min\
    \ = nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min =\
    \ nil\n\tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\
    \tlocal visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal\
    \ visited_list_size_max = nil\n\tlocal visited_list_size_min = nil\n\tlocal visited_list_size_max\
    \ = nil\n\tlocal visited_list_size_min = ", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal results = {}\n\tlocal function dfs(i, j)\n\t\tvisited[i]\
    \ = true\n\t\tvisited[j] = true\n\t\tlst_A[i] = j\n\t\tlst_B[j] = i\n\t\tresults[i]\
    \ = j\n\t\tfor _, v in pairs(grid) do\n\t\t\tif v == i or v == j then\n\t\t\t\t\
    continue\n\t\t\tend\n\t\t\tif visited[v] then\n\t\t\t\tcontinue\n\t\t\tend\n\t\
    \t\tdfs(v, j)\n\t\tend\n\tend\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1]\
    \ do\n\t\t\tif grid[i][j] == i or grid[i][j] == j then\n\t\t\t\tcontinue\n\t\t\
    \tend\n\t\t\tdfs(i, j)\n\t\tend\n\tend\n\tlocal function compare(a, b)\n\t\tif\
    \ lst_A[a] < lst_B[b] then\n\t\t\treturn -1\n\t\telseif lst_A[a] > lst_B[b] then\n\
    \t\t\treturn 1\n\t\telse\n\t\t\treturn 0\n\t\tend\n\tend\n\ttable.sort(results,\
    \ compare)\n\treturn results\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i,\
    \ j, val, visited = {}, {}, {}, {}\n\tfor i, row in ipairs(grid) do\n\t\tfor j,\
    \ val in ipairs(row) do\n\t\t\tvisited[j] = false\n\t\t\tlst_A[j] = lst_A[j] or\
    \ val\n\t\t\tlst_B[j] = lst_B[j] or val\n\t\tend\n\tend\n\tlocal visited_count\
    \ = #visited\n\tlocal visited_count_max = math.max(visited_count, k)\n\tlocal\
    \ visited_count_min = visited_count - visited_count_max\n\tlocal visited_count_min\
    \ = visited_count_min or 1\n\tfor i = 1, visited_count_min do\n\t\tlocal min_idx\
    \ = i\n\t\tfor j = 1, visited_count_max do\n\t\t\tlocal min_val = lst_A[min_idx]\n\
    \t\t\tlocal min_idx_j = j\n\t\t\tfor k = 1, visited_count_max do\n\t\t\t\tlocal\
    \ min_val_j = lst_B[min_idx_j]\n\t\t\t\tif min_val > min_val_j then\n\t\t\t\t\t\
    min_val = min_val_j\n\t\t\t\t\tmin_idx_j = k\n\t\t\t\tend\n\t\t\tend\n\t\t\tmin_idx\
    \ = min_idx_j\n\t\t\tlst_A[min_idx] = lst_A[min_idx] or min_val\n\t\t\tlst_B[min_idx]\
    \ = lst_B[min_idx] or min_val\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal\
    \ lst_A = {}\n\tlocal lst_B = {}\n\tlocal i, j, val, path\n\tfor i, row in ipairs(grid)\
    \ do\n\t\tfor j, val in ipairs(row) do\n\t\t\tlst_A[j] = lst_A[j] or val\n\t\t\
    \tlst_B[j] = lst_B[j] or val\n\t\tend\n\tend\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal min_path = {}\n\tlocal min_path_len = 0\n\tlocal min_path_len_index\
    \ = 0\n\tfor i = 1, k do\n\t\tvisited_count = visited_count + 1\n\t\tlocal visited_index\
    \ = visited_count\n\t\tvisited[visited_index] = true\n\t\tlocal min_path_len =\
    \ min_path_len + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\t\
    local min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_path_len_index = min_path_len_index\
    \ + 1\n\t\tlocal min_path_len_index = min_path_len_index + 1\n\t\tlocal min_path_len_index\
    \ = min_path_len_index + 1\n\t\tlocal min_", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_dict = {}\n\tlocal\
    \ visited_dict_count = 0\n\tlocal current_cell = {}\n\tlocal current_cell_count\
    \ = 0\n\tlocal current_cell_count_dict = {}\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n\tlocal current_cell_count_dict_count = 0\n\tlocal current_cell_count_dict_count\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tfor _, row in ipairs(grid) do\n\t\t\
    for _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_A, cell)\n\t\tend\n\tend\n\
    \tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_B,\
    \ cell)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans\
    \ = {}\n\tlocal i = k\n\twhile i ~= 0 do\n\t\tlocal j = k\n\t\twhile j ~= 0 do\n\
    \t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tbreak\n\t\t\telseif lst_A[i] < lst_B[j]\
    \ then\n\t\t\t\ti = i - 1\n\t\t\telse\n\t\t\t\tans[#ans + 1] = lst_A[i]\n\t\t\t\
    \ti = i - 1\n\t\t\t\tj = j - 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_dict = {}\n\tlocal visited_dict_count = 0\n\tlocal visited_dict_lst_A\
    \ = {}\n\tlocal visited_dict_lst_B = {}\n\tlocal visited_dict_lst_A_count = 0\n\
    \tlocal visited_dict_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B = {}\n\t\
    local visited_dict_lst_A_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B = {}\n\tlocal visited_dict_lst_A_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B\
    \ = {}\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count\
    \ = 0\n\tlocal visited_dict_lst_A_lst_B_lst_B_lst_B_count = 0\n\tlocal ", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal n\
    \ = 0\n\tlocal m = #grid\n\tlocal i, j, val\n\tlocal function dfs(i, j)\n\t\t\
    visited[i] = true\n\t\tvisited[j] = true\n\t\tlst_A[#lst_A + 1] = grid[i][j]\n\
    \t\tlst_B[#lst_B + 1] = grid[j][i]\n\t\tn = n + 1\n\t\tif n == k then\n\t\t\t\
    local lst_A_sorted = table.sort(lst_A)\n\t\t\tlocal lst_B_sorted = table.sort(lst_B)\n\
    \t\t\tfor i = 1, k do\n\t\t\t\tans[#ans + 1] = lst_A_sorted[i]\n\t\t\t\tans[#ans\
    \ + 1] = lst_B_sorted[i]\n\t\t\tend\n\t\t\treturn\n\t\tend\n\t\tfor j = 1, m do\n\
    \t\t\tif grid[i][j] == grid[j][i] then\n\t\t\t\tdfs(i, j + 1)\n\t\t\tend\n\t\t\
    end\n\tend\n\tdfs(0, 0)\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_len = 0\n\tlocal\
    \ visited_len2 = 0\n\tlocal visited_len3 = 0\n\tlocal visited_len4 = 0\n\tlocal\
    \ visited_len5 = 0\n\tlocal visited_len6 = 0\n\tlocal visited_len7 = 0\n\tlocal\
    \ visited_len8 = 0\n\tlocal visited_len9 = 0\n\tlocal visited_len10 = 0\n\tlocal\
    \ visited_len11 = 0\n\tlocal visited_len12 = 0\n\tlocal visited_len13 = 0\n\t\
    local visited_len14 = 0\n\tlocal visited_len15 = 0\n\tlocal visited_len16 = 0\n\
    \tlocal visited_len17 = 0\n\tlocal visited_len18 = 0\n\tlocal visited_len19 =\
    \ 0\n\tlocal visited_len20 = 0\n\tlocal visited_len21 = 0\n\tlocal visited_len22\
    \ = 0\n\tlocal visited_len23 = 0\n\tlocal visited_len24 = 0\n\tlocal visited_len25\
    \ = 0\n\tlocal visited_len26 = 0\n\tlocal visited_len27 = 0\n\tlocal visited_len28\
    \ = 0\n\tlocal visited_len29 = 0\n\tlocal visited_len30 = 0\n\tlocal visited_len31\
    \ = 0\n\tlocal visited_len32 = 0\n\tlocal visited_len33 = 0\n\tlocal visited_len34\
    \ = 0\n\tlocal visited_len35 = 0\n\tlocal visited_len36 = 0\n\tlocal visited_len37\
    \ = 0\n\tlocal visited_len38 = 0\n\tlocal visited_len39 = 0\n\tlocal visited_len40\
    \ = 0\n\tlocal visited_len41 = 0\n\tlocal visited_len42 = 0\n\tlocal visited_len43\
    \ = 0\n\tlocal visited_len44 = 0\n\tlocal visited_len45 = 0\n\tlocal visited_len46\
    \ = 0\n\tlocal visited_len47 = 0\n\tlocal visited_len48 = 0\n\tlocal visited_len49\
    \ = 0\n\tlocal visited_len50 = 0\n\tlocal visited_len51 = 0\n\tlocal visited_len52\
    \ = 0\n\tlocal visited_len53 = 0\n\tlocal visited_len54 = 0\n\tlocal visited_len55\
    \ = 0\n\tlocal visited_len56 = 0\n\tlocal visited_len57 = 0\n\tlocal visited_len58\
    \ = 0\n\tlocal visited_len59 = 0\n\tlocal visited_len60 = 0\n\tlocal visited_len61\
    \ = 0\n\t", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A,\
    \ grid[i])\n    table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  for i = 1, k do\n    local j = i\n    while j > 0 and lst_A[j]\
    \ > lst_B[j] do\n      ans[i] = grid[j]\n      j = j - 1\n    end\n  end\n  return\
    \ ans\nend", "  local lst_A = {}\n  local lst_B = {}\n  for i = 1, #grid do\n\
    \    lst_A[grid[i]] = grid[i]\n  end\n  for i = 1, #grid do\n    lst_B[grid[i]]\
    \ = grid[i]\n  end\n  local i = 1\n  while i <= k do\n    local j = 1\n    while\
    \ j <= #grid do\n      if lst_A[lst_B[j]] > lst_B[lst_A[j]] then\n        lst_A[lst_B[j]]\
    \ = lst_A[j]\n      else\n        lst_B[lst_A[j]] = lst_B[j]\n      end\n    \
    \  j = j + 1\n    end\n    i = i + 1\n  end\n  return lst_A\nend", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal ans = {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max2 = 0\n\tlocal\
    \ visited_count_max3 = 0\n\tlocal visited_count_max4 = 0\n\tlocal visited_count_max5\
    \ = 0\n\tlocal visited_count_max6 = 0\n\tlocal visited_count_max7 = 0\n\tlocal\
    \ visited_count_max8 = 0\n\tlocal visited_count_max9 = 0\n\tlocal visited_count_max10\
    \ = 0\n\tlocal visited_count_max11 = 0\n\tlocal visited_count_max12 = 0\n\tlocal\
    \ visited_count_max13 = 0\n\tlocal visited_count_max14 = 0\n\tlocal visited_count_max15\
    \ = 0\n\tlocal visited_count_max16 = 0\n\tlocal visited_count_max17 = 0\n\tlocal\
    \ visited_count_max18 = 0\n\tlocal visited_count_max19 = 0\n\tlocal visited_count_max20\
    \ = 0\n\tlocal visited_count_max21 = 0\n\tlocal visited_count_max22 = 0\n\tlocal\
    \ visited_count_max23 = 0\n\tlocal visited_count_max24 = 0\n\tlocal visited_count_max25\
    \ = 0\n\tlocal visited_count_max26 = 0\n\tlocal visited_count_max27 = 0\n\tlocal\
    \ visited_count_max28 = 0\n\tlocal visited_count_max29 = 0\n\tlocal visited_count_max30\
    \ = 0\n\tlocal visited_count_max31 = 0\n\tlocal visited_count_max32 = 0\n\tlocal\
    \ visited_count_max33 = 0\n\tlocal visited_count_max34 = 0\n\tlocal visited_count_max35\
    \ = 0\n\tlocal visited_count_max36 = 0\n\tlocal visited_count_max37 = 0\n\tlocal\
    \ visited_count_max38 = 0\n\tlocal visited_count_max39 = 0\n\tlocal visited_count_max40\
    \ = 0\n\tlocal visited_count_max41 = 0\n\tlocal visited_count_max42 = 0\n\tlocal\
    \ visited_count_max43 = 0\n\tlocal visited_count_max44 = 0\n\tlocal visited_count_max45\
    \ = 0\n\tlocal visited_count_max46 = 0\n\tlocal visited_count_max47 = 0\n\tlocal\
    \ visited_count_max48 = 0\n\tlocal visited_count_max49 = 0\n\tlocal visited_count_max50\
    \ = 0\n\tlocal visited_count_max51 = 0\n\tlocal visited_count_max52 = 0\n\tlocal\
    \ visited_count_max53 = 0\n\tlocal visited_count_", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal results = {}\n\tlocal i, j, n = unpack(grid)\n\
    \tfor i = 1, n do\n\t\tlocal cell = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j] = grid[i][j]\n\
    \t\tend\n\t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\tend\n\
    \ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal count = 0\n\tlocal visited_count\
    \ = 0\n\twhile count < k do\n\t\tlocal cell = {}\n\t\tfor i = 1, n do\n\t\t\t\
    for j = 1, n do\n\t\t\t\tif visited[i][j] == false then\n\t\t\t\t\tvisited[i][j]\
    \ = true\n\t\t\t\t\tvisited_count = visited_count + 1\n\t\t\t\t\ttable.insert(cell,\
    \ grid[i][j])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\ttable.sort(cell)\n\t\ttable.sort(lst_A)\n\
    \t\ttable.sort(lst_B)\n\t\tif visited_count == k then\n\t\t\tbreak\n\t\tend\n\t\
    \tcount = count + 1\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, n do\n\t\t\tif visited[i][j]\
    \ == false then\n\t\t\t\tvisited[i][j] = true\n\t\t\t\ttable.insert(results, cell[j])\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn results\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\t\t\
    \ttable.insert(lst_A, cell)\n\t\tend\n\tend\n\tfor _, row in ipairs(grid) do\n\
    \t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_B, cell)\n\t\tend\n\t\
    end\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal i = 1\n\
    \twhile i <= k do\n\t\tlocal j = i\n\t\twhile j <= k do\n\t\t\tif lst_A[i] > lst_B[j]\
    \ then\n\t\t\t\tbreak\n\t\t\telseif lst_A[i] < lst_B[j] then\n\t\t\t\tj = j +\
    \ 1\n\t\t\telse\n\t\t\t\ttable.insert(ans, lst_A[i])\n\t\t\t\ti = i + 1\n\t\t\t\
    end\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B =\
    \ {}\n\tlocal ans = {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal n = #grid\n\twhile i < n do\n\t\
    \tvisited_count = visited_count + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\
    \t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j < n do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[j] = true\n\t\tlst_A[j] = grid[j][1]\n\t\t\
    lst_B[j] = grid[j][2]\n\t\tj = j + 1\n\tend\n\twhile k < visited_count do\n\t\t\
    visited_count = visited_count + 1\n\t\tvisited[k] = true\n\t\tlst_A[k] = grid[k][1]\n\
    \t\tlst_B[k] = grid[k][2]\n\t\tk = k + 1\n\tend\n\ti = k\n\twhile i < n do\n\t\
    \tif visited[i] == false then\n\t\t\ti = i + 1\n\t\telse\n\t\t\tlocal min_val\
    \ = math.min(lst_A[i], lst_B[i])\n\t\t\tans[#ans + 1] = min_val\n\t\t\tlst_A[i]\
    \ = lst_A[i] - min_val\n\t\t\tlst_B[i] = lst_B[i] - min_val\n\t\t\ti = i + 1\n\
    \t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local index = 1\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_index\
    \ = {}\n\tlocal visited_index[1] = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3]\
    \ = 3\n\tlocal visited_index[4] = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6]\
    \ = 6\n\tlocal visited_index[7] = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9]\
    \ = 9\n\tlocal visited_index[10] = 10\n\tlocal visited_index[11] = 11\n\tlocal\
    \ visited_index[12] = 12\n\tlocal visited_index[13] = 13\n\tlocal visited_index[14]\
    \ = 14\n\tlocal visited_index[15] = 15\n\tlocal visited_index[16] = 16\n\tlocal\
    \ visited_index[17] = 17\n\tlocal visited_index[18] = 18\n\tlocal visited_index[19]\
    \ = 19\n\tlocal visited_index[20] = 20\n\tlocal visited_index[21] = 21\n\tlocal\
    \ visited_index[22] = 22\n\tlocal visited_index[23] = 23\n\tlocal visited_index[24]\
    \ = 24\n\tlocal visited_index[25] = 25\n\tlocal visited_index[26] = 26\n\tlocal\
    \ visited_index[27] = 27\n\tlocal visited_index[28] = 28\n\tlocal visited_index[29]\
    \ = 29\n\tlocal visited_index[30] = 30\n\tlocal visited_index[31] = 31\n\tlocal\
    \ visited_index[32] = 32\n\tlocal visited_index[33] = 33\n\tlocal visited_index[34]\
    \ = 34\n\tlocal visited_index[35] = 35\n\tlocal visited_index[36] = 36\n\tlocal\
    \ visited_index[37] = 37\n\tlocal visited_index[38] = 38\n\tlocal visited_index[39]\
    \ = 39\n\tlocal visited_index[40] = 40\n\tlocal visited_index[41] = 41\n\tlocal\
    \ visited_index[42] = 42\n\tlocal visited_index[43] = 43\n\tlocal visited_index[44]\
    \ = 44\n\tlocal visited_index[45] = 45\n\tlocal visited_index[46] = 46\n\tlocal\
    \ visited_index[47] = 47\n\tlocal visited_index[48] = 48\n\tlocal visited_index[49]\
    \ = 49", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n", "  -- Base case\n  if k == 1 then\n \
    \   return grid[1]\n  end\n  -- Find the minimum path of length k\n  local min_path\
    \ = grid[1]\n  for i = 2, #grid do\n    -- Find the minimum path of length k-1\n\
    \    local min_path_k = minPath(grid, k-1)\n    -- Find the minimum path of length\
    \ k\n    local min_path_kk = minPath(grid, k)\n    -- Find the minimum path of\
    \ length k+1\n    local min_path_kk = minPath(grid, k+1)\n    -- If min_path_k\
    \ is lexicographically less than min_path_kk, then \n    -- min_path_k is lexicographically\
    \ less than min_path_kk\n    if min_path_k < min_path_kk then\n      min_path\
    \ = min_path_kk\n    end\n    -- If min_path_k is lexicographically less than\
    \ min_path_kk, then \n    -- min_path_k is lexicographically less than min_path_kk\n\
    \    if min_path_k < min_path_kk then\n      min_path = min_path_k\n    end\n\
    \  end\n  return min_path\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal\
    \ i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\tlocal ans =\
    \ {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\
    \t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j <= #grid do\n\t\tvisited[j]\
    \ = true\n\t\tcount = count + 1\n\t\ti = j\n\t\tj = j + 1\n\tend\n\twhile i <=\
    \ #grid do\n\t\tif visited[i] == false then\n\t\t\tcount = count - 1\n\t\t\ti\
    \ = i - 1\n\t\telse\n\t\t\tcount = count + 1\n\t\t\ti = i + 1\n\t\tend\n\t\tif\
    \ count < k then\n\t\t\tans[i] = lst_A[i]\n\t\telse\n\t\t\tans[i] = lst_B[i]\n\
    \t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i,\
    \ j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[j] = grid[j][1]\n\
    \t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A_sorted, lst_B_sorted = {},\
    \ {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tif lst_A[i] < lst_B[j] then\n\
    \t\t\tlst_A_sorted[#lst_A_sorted + 1] = lst_A[i]\n\t\telse\n\t\t\tlst_B_sorted[#lst_B_sorted\
    \ + 1] = lst_B[j]\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A_sorted\
    \ = table.sort(lst_A_sorted)\n\tlocal lst_B_sorted = table.sort(lst_B_sorted)\n\
    \tlocal lst_A_sorted = table.concat(lst_A_sorted, k)\n\tlocal lst_B_sorted = table.concat(lst_B_sorted,\
    \ k)\n\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i, j = 1, 1\n\twhile i <=\
    \ #lst_A_sorted do\n\t\tlst_A[i] = lst_A_sorted[i]\n\t\ti = i + 1\n\tend\n\twhile\
    \ j <= #lst_B_sorted do\n\t\tlst_B[j] = lst_B_sorted[j]\n\t\tj = j + 1\n\tend\n\
    \tlocal lst_A_sorted = table.sort(lst_A)\n\tlocal lst_B_sorted = table.sort(lst_B)\n\
    \tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i, j = 1, 1\n\twhile i <= #lst_A_sorted\
    \ do\n\t\tlst_A[i] = lst_A_sorted[i]\n\t\ti = i + 1\n\tend\n\twhile j <= #lst_B_sorted\
    \ do\n\t\tlst_B[j] = lst_B_sorted[j]\n\t\tj = j + 1\n\tend\n\treturn lst_A, lst_B\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_max = math.max(#grid)\n\tlocal visited_max_count = 0\n\t\
    local visited_max_val = grid[1][1]\n\tfor i = 1, #grid do\n\t\tlocal val = grid[i][1]\n\
    \t\tif visited_count < visited_max then\n\t\t\tvisited[val] = true\n\t\t\tvisited_count\
    \ = visited_count + 1\n\t\tend\n\t\tif visited_max_count < visited_max_val then\n\
    \t\t\tvisited_max_val = val\n\t\t\tvisited_max_count = visited_max_count + 1\n\
    \t\tend\n\t\tif visited_count > visited_max then\n\t\t\tbreak\n\t\tend\n\t\tif\
    \ visited_max_count > visited_max_val then\n\t\t\tbreak\n\t\tend\n\t\tlocal lst_A_tmp\
    \ = {}\n\t\tlocal lst_B_tmp = {}\n\t\tfor j = 1, #grid do\n\t\t\tif grid[j][1]\
    \ == val then\n\t\t\t\tlst_A_tmp[j] = lst_A_tmp[j] or {}\n\t\t\t\tlst_B_tmp[j]\
    \ = lst_B_tmp[j] or {}\n\t\t\t\tfor k = 1, #grid do\n\t\t\t\t\tif grid[j][k] ==\
    \ val then\n\t\t\t\t\t\tlst_A_tmp[j][k] = lst_A_tmp[j][k] or {}\n\t\t\t\t\t\t\
    lst_B_tmp[j][k] = lst_B_tmp[j][k] or {}\n\t\t\t\t\t\tlst_A_tmp[j][k][val] = true\n\
    \t\t\t\t\t\tlst_B_tmp[j][k][val] = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\
    \t\tend\n\t\tlst_A = lst_A + lst_A_tmp\n\t\tlst_B = lst_B + lst_B_tmp\n\tend\n\
    \tlocal lst_A_tmp = {}\n\tlocal lst_B_tmp = {}\n\tfor i = 1, #grid do\n\t\tif\
    \ visited[i] then\n\t\t\tlst_A_tmp[i] = lst_A_tmp[i] or {}\n\t\t\tlst_B_tmp[i]\
    \ = lst_B_tmp[i] or {}\n\t\t\tfor j = 1, #grid do\n\t\t\t\tif visited[j] then\n\
    \t\t\t\t\tlst_A_tmp[i][j] = lst_A_tmp[i][j] or {}\n\t\t\t\t\tlst_B_tmp[i][j] =\
    \ lst_B_tmp[i][j] or {}\n\t\t\t\t\tlst_A_tmp[i][j][grid[i][1]] = true\n\t\t\t\t\
    \tlst_B_tmp[i][j][grid[i][1]] = true\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \tlst_A = lst_A + lst_A_tmp\n\tlst_B = lst_B + lst_B_tmp\n\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = math.max(#visited, k)\n\tlocal visited_max_count = 0\n\tlocal visited_max_val\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx\
    \ = nil\n\tlocal visited_max_idx = nil\n\tlocal visited_max_idx = nil\n\tlocal\
    \ visited_max_", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal lst_C = {}\n\
    \tlocal lst_D = {}\n\tlocal lst_E = {}\n\tlocal lst_F = {}\n\tlocal lst_G = {}\n\
    \tlocal lst_H = {}\n\tlocal lst_I = {}\n\tlocal lst_J = {}\n\tlocal lst_K = {}\n\
    \tlocal lst_L = {}\n\tlocal lst_M = {}\n\tlocal lst_N = {}\n\tlocal lst_O = {}\n\
    \tlocal lst_P = {}\n\tlocal lst_Q = {}\n\tlocal lst_R = {}\n\tlocal lst_S = {}\n\
    \tlocal lst_T = {}\n\tlocal lst_U = {}\n\tlocal lst_V = {}\n\tlocal lst_W = {}\n\
    \tlocal lst_X = {}\n\tlocal lst_Y = {}\n\tlocal lst_Z = {}\n\tlocal lst_A1 = {}\n\
    \tlocal lst_B1 = {}\n\tlocal lst_C1 = {}\n\tlocal lst_D1 = {}\n\tlocal lst_E1\
    \ = {}\n\tlocal lst_F1 = {}\n\tlocal lst_G1 = {}\n\tlocal lst_H1 = {}\n\tlocal\
    \ lst_I1 = {}\n\tlocal lst_J1 = {}\n\tlocal lst_K1 = {}\n\tlocal lst_L1 = {}\n\
    \tlocal lst_M1 = {}\n\tlocal lst_N1 = {}\n\tlocal lst_O1 = {}\n\tlocal lst_P1\
    \ = {}\n\tlocal lst_Q1 = {}\n\tlocal lst_R1 = {}\n\tlocal lst_S1 = {}\n\tlocal\
    \ lst_T1 = {}\n\tlocal lst_U1 = {}\n\tlocal lst_V1 = {}\n\tlocal lst_W1 = {}\n\
    \tlocal lst_X1 = {}\n\tlocal lst_Y1 = {}\n\tlocal lst_Z1 = {}\n\tlocal lst_A2\
    \ = {}\n\tlocal lst_B2 = {}\n\tlocal lst_C2 = {}\n\tlocal lst_D2 = {}\n\tlocal\
    \ lst_E2 = {}\n\tlocal lst_F2 = {}\n\tlocal lst_G2 = {}\n\tlocal lst_H2 = {}\n\
    \tlocal lst_I2 = {}\n\tlocal lst_J2 = {}\n\tlocal lst_K2 = {}\n\tlocal lst_L2\
    \ = {}\n\tlocal lst_M2 = {}\n\tlocal lst_N2 = {}\n\tlocal lst_O2 = {}\n\tlocal ",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\
    \tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\t\
    visited[i] = false\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\t\
    i = i + 1\n\tend\n\ti = 2\n\twhile i <= n do\n\t\tif visited[i] == false then\n\
    \t\t\tvisited[i] = true\n\t\t\tlocal j = 1\n\t\t\twhile j <= m do\n\t\t\t\tif\
    \ lst_A[i] > lst_B[j] then\n\t\t\t\t\tlst_A[i], lst_B[j] = lst_B[j], lst_A[i]\n\
    \t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\tlocal k = i\n\t\t\twhile k <=\
    \ n do\n\t\t\t\tif visited[k] == false then\n\t\t\t\t\tvisited[k] = true\n\t\t\
    \t\t\tlocal lst_A_new = {}\n\t\t\t\t\tlocal lst_B_new = {}\n\t\t\t\t\tlocal j\
    \ = 1\n\t\t\t\t\twhile j <= m do\n\t\t\t\t\t\tif lst_A[k] > lst_B[j] then\n\t\t\
    \t\t\t\t\tlst_A_new[lst_A_new#] = lst_A[k]\n\t\t\t\t\t\t\tlst_B_new[lst_B_new#]\
    \ = lst_B[j]\n\t\t\t\t\t\tend\n\t\t\t\t\t\tj = j + 1\n\t\t\t\t\tend\n\t\t\t\t\t\
    local lst_A_new2 = {}\n\t\t\t\t\tlocal lst_B_new2 = {}\n\t\t\t\t\tlocal j = 1\n\
    \t\t\t\t\twhile j <= m do\n\t\t\t\t\t\tif lst_A[k] < lst_B[j] then\n\t\t\t\t\t\
    \t\tlst_A_new2[lst_A_new#] = lst_A[k]\n\t\t\t\t\t\t\tlst_B_new2[lst_B_new#] =\
    \ lst_B[j]\n\t\t\t\t\t\tend\n\t\t\t\t\t\tj = j + 1\n\t\t\t\t\tend\n\t\t\t\t\t\
    local lst_A_new3 = {}\n\t\t\t\t\tlocal lst_B_new3 = {}\n\t\t\t\t\tlocal j = 1\n\
    \t\t\t\t\twhile j <= m do\n\t\t\t\t\t\tif lst_A[k] == lst_B[j] then\n\t\t\t\t\t\
    \t\tlst_A_new3[lst_A_new#] = lst_A[k]\n\t\t\t\t\t\t\tlst_B_new3[lst_B_new#] =\
    \ lst_B[j]\n\t\t\t\t\t\tend\n\t\t\t\t\t\tj = j + 1\n\t\t\t\t\tend\n\t\t\t\t\t\
    local lst_A_new4 = {}\n\t\t\t\t\tlocal lst_B_new4 = {}\n\t\t\t\t\tlocal j = 1\n\
    \t\t\t\t\twhile j <= m do\n\t\t\t\t\t\tif lst_A[k] > lst_B[j] then\n\t\t\t\t\t\
    \t\tlst_A_new4[lst_A_new#] = lst_A[k]\n\t\t\t\t\t\t\tlst_B_", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = math.max(#visited, k)\n\tfor i = 1, #grid do\n\t\tvisited[i] = false\n\tend\n\
    \tvisited_count = k\n\tfor i = 1, #grid do\n\t\tlocal v = grid[i]\n\t\tif visited[v]\
    \ == false then\n\t\t\tvisited[v] = true\n\t\t\tvisited_count = visited_count\
    \ - 1\n\t\t\tif visited_count < 1 then\n\t\t\t\tlocal lst_v = lst_A\n\t\t\t\t\
    for j = 1, #lst_v do\n\t\t\t\t\tif lst_v[j] < v then\n\t\t\t\t\t\tlst_v[j] = v\n\
    \t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tlocal lst_v = lst_B\n\t\t\t\tfor j = 1, #lst_v\
    \ do\n\t\t\t\t\tif lst_v[j] < v then\n\t\t\t\t\t\tlst_v[j] = v\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\t\tlocal lst_v = lst_A\n\t\t\t\tfor j = 1, #lst_v do\n\t\t\t\
    \t\tif lst_v[j] > v then\n\t\t\t\t\t\tlst_v[j] = v\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\t\tlocal lst_v = lst_B\n\t\t\t\tfor j = 1, #lst_v do\n\t\t\t\t\tif lst_v[j]\
    \ > v then\n\t\t\t\t\t\tlst_v[j] = v\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tvisited_count\
    \ = visited_count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal n = #grid\n\
    \tlocal m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\tvisited[i] = false\n\
    \t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\t\
    visited[1] = true\n\twhile i <= n do\n\t\tlocal j = i\n\t\twhile j <= n do\n\t\
    \t\tif visited[j] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif lst_A[j] < lst_B[j]\
    \ then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvisited[j] = true\n\t\t\tlst_A[j] = lst_A[j]\
    \ + 1\n\t\t\tlst_B[j] = lst_B[j] + 1\n\t\t\tj = j + 1\n\t\tend\n\t\tans[i] = lst_A[i]\n\
    \t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B =\
    \ {}\n\tlocal ans = {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ visited_dict = {}\n\tlocal visited_dict_count = 0\n\tlocal visited_dict_key\
    \ = {}\n\tlocal visited_dict_value = {}\n\tlocal visited_dict_key_count = 0\n\t\
    local visited_dict_value_count = 0\n\tlocal visited_dict_key_dict = {}\n\tlocal\
    \ visited_dict_value_dict = {}\n\tlocal visited_dict_key_dict_count = 0\n\tlocal\
    \ visited_dict_value_dict_count = 0\n\tlocal visited_dict_key_dict_key = {}\n\t\
    local visited_dict_value_dict_key = {}\n\tlocal visited_dict_key_dict_value =\
    \ {}\n\tlocal visited_dict_value_dict_value = {}\n\tlocal visited_dict_key_dict_key_count\
    \ = 0\n\tlocal visited_dict_value_dict_key_count = 0\n\tlocal visited_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_count\
    \ = 0\n\tlocal visited_dict_value_dict_key_dict_count = 0\n\tlocal visited_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal visited_dict_value_dict_key_dict_value_dict = {}\n\tlocal visited_dict_key_dict_key_dict_value_dict\
    \ = {}\n\tlocal ", "  local lst_A = {}\n  local lst_B = {}\n  local i = 1\n  while\
    \ i <= #grid do\n    local cell = {}\n    for j = 1, i do\n      table.insert(cell,\
    \ grid[i][j])\n    end\n    table.insert(lst_A, cell)\n    table.insert(lst_B,\
    \ cell)\n    i = i + 1\n  end\n  table.sort(lst_A, function(a, b) return a[1]\
    \ < b[1] end)\n  table.sort(lst_B, function(a, b) return a[1] < b[1] end)\n  local\
    \ ans = {}\n  local i = 1\n  while i <= k do\n    local cell = {}\n    for j =\
    \ 1, i do\n      table.insert(cell, grid[i][j])\n    end\n    table.insert(ans,\
    \ cell)\n    i = i + 1\n  end\n  return ans\nend", "  local lst_A, lst_B = {},\
    \ {}\n  local visited = {}\n  local visited_count = 0\n  local visited_list =\
    \ nil\n  local visited_list_count = 0\n  local visited_list_list = nil\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count =\
    \ 0\n  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n\
    \  local visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local\
    \ visited_list_list_count = 0\n  local visited_list_list_count = 0\n  local visited_list_list_count\
    \ = 0\n  local visited_list_list_count = 0\n  local ", "\tlocal lst_A = {}\n\t\
    local lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal n = #grid\n\twhile i <=\
    \ n do\n\t\tlocal v = grid[i]\n\t\tif i == 1 then\n\t\t\tlst_A[1] = v\n\t\t\t\
    lst_B[1] = v\n\t\telse\n\t\t\tlocal v1 = grid[i-1]\n\t\t\tlocal v2 = grid[i]\n\
    \t\t\tif v1 < v2 then\n\t\t\t\tlst_A[j] = v1\n\t\t\t\tlst_B[j] = v2\n\t\t\t\t\
    j = j + 1\n\t\t\telse\n\t\t\t\tlst_A[j] = v2\n\t\t\t\tlst_B[j] = v1\n\t\t\t\t\
    j = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal ans = {}\n\tlocal\
    \ i = 1\n\twhile i <= k do\n\t\tlocal v = lst_A[i]\n\t\tif i == 1 then\n\t\t\t\
    ans[#ans + 1] = v\n\t\telse\n\t\t\tlocal v1 = lst_A[i-1]\n\t\t\tlocal v2 = lst_A[i]\n\
    \t\t\tif v1 < v2 then\n\t\t\t\tlocal v3 = lst_B[j]\n\t\t\t\tlocal v4 = lst_B[j+1]\n\
    \t\t\t\tif v3 < v4 then\n\t\t\t\t\tans[#ans + 1] = v1\n\t\t\t\t\tans[#ans + 1]\
    \ = v2\n\t\t\t\t\tans[#ans + 1] = v3\n\t\t\t\t\tans[#ans + 1] = v4\n\t\t\t\telse\n\
    \t\t\t\t\tans[#ans + 1] = v1\n\t\t\t\t\tans[#ans + 1] = v2\n\t\t\t\t\tans[#ans\
    \ + 1] = v3\n\t\t\t\t\tans[#ans + 1] = v4\n\t\t\t\t\tans[#ans + 1] = v\n\t\t\t\
    \tend\n\t\t\telse\n\t\t\t\tlocal v3 = lst_B[j]\n\t\t\t\tlocal v4 = lst_B[j+1]\n\
    \t\t\t\tif v3 < v4 then\n\t\t\t\t\tans[#ans + 1] = v1\n\t\t\t\t\tans[#ans + 1]\
    \ = v2\n\t\t\t\t\tans[#ans + 1] = v3\n\t\t\t\t\tans[#ans + 1] = v4\n\t\t\t\t\t\
    ans[#ans + 1] = v\n\t\t\t\telse\n\t\t\t\t\tans[#ans + 1] = v1\n\t\t\t\t\tans[#ans\
    \ + 1] = v2\n\t\t\t\t\tans[#ans + 1] = v3\n\t\t\t\t\tans[#ans + 1] = v4\n\t\t\t\
    \t\tans[#ans + 1] = v\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_index = {}\n\tlocal visited_index[1] = 1\n\
    \tlocal visited_index[2] = 2\n\tlocal visited_index[3] = 3\n\tlocal visited_index[4]\
    \ = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6] = 6\n\tlocal visited_index[7]\
    \ = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9] = 9\n\tlocal visited_index[10]\
    \ = 10\n\tlocal visited_index[11] = 11\n\tlocal visited_index[12] = 12\n\tlocal\
    \ visited_index[13] = 13\n\tlocal visited_index[14] = 14\n\tlocal visited_index[15]\
    \ = 15\n\tlocal visited_index[16] = 16\n\tlocal visited_index[17] = 17\n\tlocal\
    \ visited_index[18] = 18\n\tlocal visited_index[19] = 19\n\tlocal visited_index[20]\
    \ = 20\n\tlocal visited_index[21] = 21\n\tlocal visited_index[22] = 22\n\tlocal\
    \ visited_index[23] = 23\n\tlocal visited_index[24] = 24\n\tlocal visited_index[25]\
    \ = 25\n\tlocal visited_index[26] = 26\n\tlocal visited_index[27] = 27\n\tlocal\
    \ visited_index[28] = 28\n\tlocal visited_index[29] = 29\n\tlocal visited_index[30]\
    \ = 30\n\tlocal visited_index[31] = 31\n\tlocal visited_index[32] = 32\n\tlocal\
    \ visited_index[33] = 33\n\tlocal visited_index[34] = 34\n\tlocal visited_index[35]\
    \ = 35\n\tlocal visited_index[36] = 36\n\tlocal visited_index[37] = 37\n\tlocal\
    \ visited_index[38] = 38\n\tlocal visited_index[39] = 39\n\tlocal visited_index[40]\
    \ = 40\n\tlocal visited_index[41] = 41\n\tlocal visited_index[42] = 42\n\tlocal\
    \ visited_index[43] = 43\n\tlocal visited_index[44] = 44\n\tlocal visited_index[45]\
    \ = 45\n\tlocal visited_index[46] = 46\n\tlocal visited_index[47] = 47\n\tlocal\
    \ visited_index[48] = 48\n\tlocal visited_index[49] = 49\n\tlocal visited_index[5",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal path = {}\n\tlocal path_count = 0\n\tlocal path_len = 0\n\tlocal current_cell\n\
    \tlocal current_cell_value\n\tlocal current_cell_index\n\tlocal current_cell_neighbors\n\
    \tlocal current_cell_neighbors_len\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_index\n\tlocal current_cell_neighbors_neighbors\n\tlocal\
    \ current_cell_neighbors_neighbors_len\n\tlocal current_cell_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_index\n\tlocal current_cell_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_len\n\tlocal current_cell_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_index\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_len\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_index\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_len\n\t\
    local current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\t\
    local current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_index\n\t\
    local current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_len\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_index\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_len\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_index\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_len\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbor", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max_index2 = 0\n\tlocal visited_count_max_index3\
    \ = 0\n\tlocal visited_count_max_index4 = 0\n\tlocal visited_count_max_index5\
    \ = 0\n\tlocal visited_count_max_index6 = 0\n\tlocal visited_count_max_index7\
    \ = 0\n\tlocal visited_count_max_index8 = 0\n\tlocal visited_count_max_index9\
    \ = 0\n\tlocal visited_count_max_index10 = 0\n\tlocal visited_count_max_index11\
    \ = 0\n\tlocal visited_count_max_index12 = 0\n\tlocal visited_count_max_index13\
    \ = 0\n\tlocal visited_count_max_index14 = 0\n\tlocal visited_count_max_index15\
    \ = 0\n\tlocal visited_count_max_index16 = 0\n\tlocal visited_count_max_index17\
    \ = 0\n\tlocal visited_count_max_index18 = 0\n\tlocal visited_count_max_index19\
    \ = 0\n\tlocal visited_count_max_index20 = 0\n\tlocal visited_count_max_index21\
    \ = 0\n\tlocal visited_count_max_index22 = 0\n\tlocal visited_count_max_index23\
    \ = 0\n\tlocal visited_count_max_index24 = 0\n\tlocal visited_count_max_index25\
    \ = 0\n\tlocal visited_count_max_index26 = 0\n\tlocal visited_count_max_index27\
    \ = 0\n\tlocal visited_count_max_index28 = 0\n\tlocal visited_count_max_index29\
    \ = 0\n\tlocal visited_count_max_index30 = 0\n\tlocal visited_count_max_index31\
    \ = 0\n\tlocal visited_count_max_index32 = 0\n\tlocal visited_count_max_index33\
    \ = 0\n\tlocal visited_count_max_index34 = 0\n\tlocal visited_count_max_index35\
    \ = 0\n\tlocal visited_count_max_index36 = 0\n\tlocal visited_count_max_index37\
    \ = 0\n\tlocal visited_count_max_index38 = 0\n\tlocal visited_count_max_index39\
    \ = 0\n\tlocal visited_count_max_index40 = 0\n\tlocal visited_count_max_index41\
    \ = 0\n\tlocal visited_count_max_index42 = 0\n\tlocal visited_count_max_index43\
    \ = 0\n\tlocal visited_count_max_index44 = 0\n\tlocal visited_count_max_index45\
    \ = 0\n\tlocal visited_count_max_index46 = 0\n\tlocal visited_count_max_index47\
    \ = 0\n\tlocal visited_count_max_index48 = 0\n\t", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max = math.max(#visited,\
    \ k)\n\tfor i, row in ipairs(grid) do\n\t\tfor j, cell in ipairs(row) do\n\t\t\
    \tlst_A[#lst_A + 1] = cell\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\tend\n\t\
    end\n\tlocal visited_max = math.max(#visited, k)\n\tlocal visited_count = 0\n\t\
    while visited_count < visited_max do\n\t\tvisited_count = visited_count + 1\n\t\
    \tlocal min_value = nil\n\t\tfor i, row in ipairs(grid) do\n\t\t\tfor j, cell\
    \ in ipairs(row) do\n\t\t\t\tif visited[#visited + 1] == nil then\n\t\t\t\t\t\
    local value = lst_B[#lst_B + 1]\n\t\t\t\t\tvisited[#visited + 1] = true\n\t\t\t\
    \t\tif min_value == nil then\n\t\t\t\t\t\tmin_value = value\n\t\t\t\t\telse\n\t\
    \t\t\t\t\tmin_value = min_value + value\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\
    \tlocal value = lst_A[#lst_A + 1]\n\t\t\t\t\tvisited[#visited + 1] = true\n\t\t\
    \t\t\tif min_value == nil then\n\t\t\t\t\t\tmin_value = value\n\t\t\t\t\telse\n\
    \t\t\t\t\t\tmin_value = min_value + value\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    end\n\t\tend\n\t\tif min_value == nil then\n\t\t\tbreak\n\t\telse\n\t\t\tlst_A\
    \ = lst_A[#lst_A + 1]\n\t\t\tlst_B = lst_B[#lst_B + 1]\n\t\tend\n\tend\n\treturn\
    \ lst_A\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\
    \tlocal results = {}\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #grid do\n\t\t\
    visited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\t\
    i = i + 1\n\tend\n\tlocal visited_size = #visited\n\twhile j <= #grid do\n\t\t\
    local k = j\n\t\twhile k <= #grid do\n\t\t\tif visited[k] == false then\n\t\t\t\
    \tlocal tmp_A = lst_A[k]\n\t\t\t\tlocal tmp_B = lst_B[k]\n\t\t\t\tif tmp_A < tmp_B\
    \ then\n\t\t\t\t\tlst_A[k] = tmp_A\n\t\t\t\t\tlst_B[k] = tmp_B\n\t\t\t\telse\n\
    \t\t\t\t\tlst_A[k] = tmp_B\n\t\t\t\t\tlst_B[k] = tmp_A\n\t\t\t\tend\n\t\t\t\t\
    visited[k] = true\n\t\t\t\tk = k + 1\n\t\t\telse\n\t\t\t\tk = k + 1\n\t\t\tend\n\
    \t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal visited_size = #visited\n\
    \tlocal i = 1\n\twhile i <= visited_size do\n\t\tif visited[i] == true then\n\t\
    \t\tresults[i] = lst_A[i]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn results\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal count = 0\n\tlocal index = 1\n\tlocal current_cell\n\tlocal current_cell_val\n\
    \tlocal current_cell_val_index\n\tlocal current_cell_val_index2\n\tlocal current_cell_val_index3\n\
    \tlocal current_cell_val_index4\n\tlocal current_cell_val_index5\n\tlocal current_cell_val_index6\n\
    \tlocal current_cell_val_index7\n\tlocal current_cell_val_index8\n\tlocal current_cell_val_index9\n\
    \tlocal current_cell_val_index10\n\tlocal current_cell_val_index11\n\tlocal current_cell_val_index12\n\
    \tlocal current_cell_val_index13\n\tlocal current_cell_val_index14\n\tlocal current_cell_val_index15\n\
    \tlocal current_cell_val_index16\n\tlocal current_cell_val_index17\n\tlocal current_cell_val_index18\n\
    \tlocal current_cell_val_index19\n\tlocal current_cell_val_index20\n\tlocal current_cell_val_index21\n\
    \tlocal current_cell_val_index22\n\tlocal current_cell_val_index23\n\tlocal current_cell_val_index24\n\
    \tlocal current_cell_val_index25\n\tlocal current_cell_val_index26\n\tlocal current_cell_val_index27\n\
    \tlocal current_cell_val_index28\n\tlocal current_cell_val_index29\n\tlocal current_cell_val_index30\n\
    \tlocal current_cell_val_index31\n\tlocal current_cell_val_index32\n\tlocal current_cell_val_index33\n\
    \tlocal current_cell_val_index34\n\tlocal current_cell_val_index35\n\tlocal current_cell_val_index36\n\
    \tlocal current_cell_val_index37\n\tlocal current_cell_val_index38\n\tlocal current_cell_val_index39\n\
    \tlocal current_cell_val_index40\n\tlocal current_cell_val_index41\n\tlocal current_cell_val_index42\n\
    \tlocal current_cell_val_index43\n\tlocal current_cell_val_index44\n\tlocal current_cell_val_index45\n\
    \tlocal current_cell_val_index46\n\tlocal current_cell_val_index47\n\tlocal current_cell_val_index48\n\
    \tlocal current_cell_val_index49\n\tlocal current_cell_val_index50\n\tlocal current_cell_val_index51\n\
    \tlocal current_cell_val_index52\n\tlocal current_cell_val_index53\n\tlocal current_cell_val_index54\n\
    \tlocal current_cell_val_index55\n\tlocal current_cell_val_index56\n\tlocal current_cell_val_index57\n\
    \tlocal current_cell_val_index58\n\tlocal current_cell_val", "  local lst_A =\
    \ {}\n  local lst_B = {}\n  local visited = {}\n  local visited_count = 0\n  local\
    \ current_cell = {}\n  local current_cell_count = 0\n  local current_cell_val\
    \ = grid[#grid]\n  local current_cell_val_count = 0\n  local current_cell_val_val_count\
    \ = 0\n  local current_cell_val_val_val_count = 0\n  local current_cell_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_count = 0\n  local current_cell_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_count = 0\n  local current_cell_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_count = 0\n  local\
    \ current_cell_val_val_val_val_val_val_val_val_val_val_count = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_count = 0\n\
    \  local current_cell_val_val_val_val_val_val_val_val_val_val_val_count = 0\n\
    \  local current_cell_val_val_val_val_val_val_val_val_val_val_val_count = 0\n\
    \  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_count =\
    \ 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_count\
    \ = 0\n  local current_cell_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_val_",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal ans = {}\n\tlocal visited = {}\n\
    \tlocal n = 0\n\tlocal m = #grid\n\tlocal i = 1\n\twhile i <= m do\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\
    \tend\n\twhile i <= m do\n\t\tif visited[i] then\n\t\t\tlocal j = i - 1\n\t\t\t\
    while j >= 1 do\n\t\t\t\tif lst_A[j] > lst_A[i] then\n\t\t\t\t\tbreak\n\t\t\t\t\
    elseif lst_A[j] < lst_A[i] then\n\t\t\t\t\tlst_A[j] = lst_A[i]\n\t\t\t\t\tlst_B[j]\
    \ = lst_B[i]\n\t\t\t\t\tans[i] = lst_A[j]\n\t\t\t\t\ti = j\n\t\t\t\telse\n\t\t\
    \t\t\tbreak\n\t\t\t\tend\n\t\t\t\tj = j - 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor _, row in ipairs(grid)\
    \ do\n\t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_A, cell)\n\t\t\
    end\n\tend\n\tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\
    \t\t\ttable.insert(lst_B, cell)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 0\n\twhile i <= k do\n\t\tlocal j = 0\n\t\twhile\
    \ j <= k do\n\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tbreak\n\t\t\telseif i\
    \ == j then\n\t\t\t\ttable.insert(ans, lst_A[i])\n\t\t\t\ti = i + 1\n\t\t\telse\n\
    \t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\twhile i <= k and i <= #grid do\n\t\
    \tlocal j = 1\n\t\twhile j <= #grid[i] do\n\t\t\tif grid[i][j] ~= grid[i][j] then\n\
    \t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\
    \t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal lst_A_size\
    \ = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal i = 1\n\twhile i <= #lst_A do\n\
    \t\tif lst_A[i] < lst_B[i] then\n\t\t\tlocal j = 1\n\t\t\twhile j <= #lst_A do\n\
    \t\t\t\tif lst_A[j] > lst_B[j] then\n\t\t\t\t\tlst_A[#lst_A + 1] = lst_A[j]\n\t\
    \t\t\t\tlst_B[#lst_B + 1] = lst_B[j]\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\tlocal lst_A_size = #lst_A\n\tlocal lst_B_size\
    \ = #lst_B\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tif lst_A[i] < lst_B[i]\
    \ then\n\t\t\tlocal j = 1\n\t\t\twhile j <= #lst_A do\n\t\t\t\tif lst_A[j] > lst_B[j]\
    \ then\n\t\t\t\t\tlst_A[#lst_A + 1] = lst_A[j]\n\t\t\t\t\tlst_B[#lst_B + 1] =\
    \ lst_B[j]\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\tlocal lst_A_size = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal i = 1\n\
    \twhile i <= #lst_A do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tlocal j = 1\n\t\
    \t\twhile j <= #lst_A do\n\t\t\t\tif lst_A[j] > lst_B[j] then\n\t\t\t\t\tlst_A[#lst_A\
    \ + 1] = lst_A[j]\n\t\t\t\t\tlst_B[#lst_B + 1] = lst_B[j]\n\t\t\t\tend\n\t\t\t\
    \tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal lst_A_size = #lst_A\n\
    \tlocal lst_B_size = #lst_B\n\t", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_max = math.max(#visited, k)\n\
    \tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_A,\
    \ cell)\n\t\t\ttable.insert(lst_B, cell)\n\t\tend\n\tend\n\tlocal visited_max\
    \ = math.max(#visited, k)\n\tfor i = 1, visited_max do\n\t\tvisited[#visited +\
    \ 1] = i\n\tend\n\twhile #visited > 0 do\n\t\tlocal min_idx = math.min(#visited,\
    \ visited_max)\n\t\tlocal min_val = visited[min_idx]\n\t\tvisited[min_idx] = nil\n\
    \t\tfor _, cell in ipairs(lst_A) do\n\t\t\tif cell ~= min_val then\n\t\t\t\tlocal\
    \ neighbors = neighbors(grid, min_val)\n\t\t\t\tfor _, neighbor in ipairs(neighbors)\
    \ do\n\t\t\t\t\tif neighbor ~= min_val then\n\t\t\t\t\t\ttable.insert(lst_B, neighbor)\n\
    \t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tif visited_count == visited_max then\n\t\t\tbreak\n\t\tend\n\tend\n\
    \treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\t\
    local i, j = 1, #grid\n\twhile i <= j do\n\t\tvisited[i] = j\n\t\tlst_A[grid[i][j]]\
    \ = grid[i][j]\n\t\tlst_B[grid[i][j]] = grid[i][j]\n\t\ti = grid[i][j]\n\t\tj\
    \ = grid[i][j]\n\tend\n\tlocal visited_size = #visited\n\tlocal i, j, k\n\twhile\
    \ k <= visited_size do\n\t\ti = visited[k]\n\t\tj = visited[k]\n\t\tk = k + 1\n\
    \t\twhile i <= j do\n\t\t\tvisited[i] = j\n\t\t\tlst_A[grid[i][j]] = grid[i][j]\n\
    \t\t\tlst_B[grid[i][j]] = grid[i][j]\n\t\t\ti = grid[i][j]\n\t\t\tj = grid[i][j]\n\
    \t\tend\n\tend\n\tlocal visited_size = #visited\n\tlocal i, j, k\n\twhile k <=\
    \ visited_size do\n\t\ti = visited[k]\n\t\tj = visited[k]\n\t\tk = k + 1\n\t\t\
    while i <= j do\n\t\t\tvisited[i] = j\n\t\t\tlst_A[grid[i][j]] = grid[i][j]\n\t\
    \t\tlst_B[grid[i][j]] = grid[i][j]\n\t\t\ti = grid[i][j]\n\t\t\tj = grid[i][j]\n\
    \t\tend\n\tend\n\tlocal visited_size = #visited\n\tlocal i, j, k\n\twhile k <=\
    \ visited_size do\n\t\ti = visited[k]\n\t\tj = visited[k]\n\t\tk = k + 1\n\t\t\
    while i <= j do\n\t\t\tvisited[i] = j\n\t\t\tlst_A[grid[i][j]] = grid[i][j]\n\t\
    \t\tlst_B[grid[i][j]] = grid[i][j]\n\t\t\ti = grid[i][j]\n\t\t\tj = grid[i][j]\n\
    \t\tend\n\tend\n\tlocal visited_size = #visited\n\tlocal i, j, k\n\twhile k <=\
    \ visited_size do\n\t\ti = visited[k]\n\t\tj = visited[k]\n\t\tk = k + 1\n\t\t\
    while i <= j do\n\t\t\tvisited[i] = j\n\t\t\tlst_A[grid[i][j]] = grid[i][j]\n\t\
    \t\tlst_B[grid[i][j]] = grid[i][j]\n\t\t\ti = grid[i][j]\n\t\t\tj = grid[i][j]\n\
    \t\tend\n\tend\n\tlocal visited_size = #visited\n\tlocal i, j, k\n\twhile k <=\
    \ visited_size do\n\t\ti = visited[k]\n\t\tj = visited[k]\n\t\tk = k + 1\n\t\t\
    while i <= j do\n\t\t\tvisited[i] = j\n\t\t\tl", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal i, j, k\n\tlocal visited_count\
    \ = 0\n\tlocal min_path = {}\n\tlocal min_path_len = 0\n\tlocal current_cell\n\
    \tlocal current_cell_value\n\tlocal current_cell_len\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\
    \tlocal current_cell_len_value\n\tlocal current_cell_len_value\n\tlocal current_cell_len",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal count = 0\n\tlocal index = 1\n\twhile count < k do\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tvisited[visited_count] = index\n\t\tcount = count +\
    \ 1\n\t\tindex = index + 1\n\t\tfor _, cell in ipairs(grid) do\n\t\t\tif visited[visited_count]\
    \ == nil then\n\t\t\t\tvisited[visited_count] = index\n\t\t\t\tindex = index +\
    \ 1\n\t\t\tend\n\t\t\tlocal neighbors = neighbors(grid, visited[visited_count])\n\
    \t\t\tfor _, neighbor in ipairs(neighbors) do\n\t\t\t\tif lst_A[neighbor] == nil\
    \ then\n\t\t\t\t\tlst_A[neighbor] = index\n\t\t\t\t\tindex = index + 1\n\t\t\t\
    \tend\n\t\t\t\tif lst_B[neighbor] == nil then\n\t\t\t\t\tlst_B[neighbor] = index\n\
    \t\t\t\t\tindex = index + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\
    \ttable.sort(lst_B)\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal i, j, n = unpack(grid)\n\tlocal function dfs(i, j)\n\
    \t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlst_A[i] = lst_A[i] or j\n\t\
    \tlst_B[j] = lst_B[j] or i\n\t\tlocal x, y = i - 1, j - 1\n\t\twhile x >= 1 and\
    \ y >= 1 and grid[x][y] == grid[x][y] ~= nil do\n\t\t\tx, y = x - 1, y - 1\n\t\
    \tend\n\t\tif x == 1 and y == 1 then\n\t\t\tlst_A[i] = lst_B[j]\n\t\t\tlst_B[j]\
    \ = lst_A[i]\n\t\telse\n\t\t\tlocal x, y = i - 1, j + 1\n\t\t\twhile x <= n and\
    \ y <= n and grid[x][y] == grid[x][y] ~= nil do\n\t\t\t\tx, y = x + 1, y + 1\n\
    \t\t\tend\n\t\t\tif x <= n and y <= n then\n\t\t\t\tlocal x, y = i + 1, j + 1\n\
    \t\t\t\twhile x <= n and y <= n and grid[x][y] == grid[x][y] ~= nil do\n\t\t\t\
    \t\tx, y = x + 1, y + 1\n\t\t\t\tend\n\t\t\t\tif x <= n and y <= n then\n\t\t\t\
    \t\tlocal x, y = i + 1, j - 1\n\t\t\t\t\twhile x <= n and y >= 1 and grid[x][y]\
    \ == grid[x][y] ~= nil do\n\t\t\t\t\t\tx, y = x + 1, y - 1\n\t\t\t\t\tend\n\t\t\
    \t\t\tif x <= n and y >= 1 then\n\t\t\t\t\t\tlocal x, y = i - 1, j - 1\n\t\t\t\
    \t\t\twhile x >= 1 and y >= 1 and grid[x][y] == grid[x][y] ~= nil do\n\t\t\t\t\
    \t\t\tx, y = x - 1, y - 1\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif x >= 1 and y >= 1 then\n\
    \t\t\t\t\t\t\tlocal x, y = i - 1, j + 1\n\t\t\t\t\t\t\twhile x <= n and y <= n\
    \ and grid[x][y] == grid[x][y] ~= nil do\n\t\t\t\t\t\t\t\tx, y = x + 1, y + 1\n\
    \t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tif x <= n and y <= n then\n\t\t\t\t\t\t\t\tlocal\
    \ x, y = i + 1, j + 1\n\t\t\t\t\t\t\t\twhile x <= n and y <= n and grid[x][y]\
    \ == grid[x][y] ~= nil do\n\t\t\t\t\t\t\t\t\tx, y = x + 1, y + 1\n\t\t\t\t\t\t\
    \t\tend\n\t\t\t\t\t\t\t\tif x <= n and y <= n then\n\t\t\t\t\t\t\t\t\tlocal x,\
    \ y = i + 1, j - 1\n\t\t\t\t\t\t\t\t\twhile x <= n and y >= 1 and grid[x][y] ==\
    \ grid[x][y] ~= nil do\n\t\t\t\t\t\t\t\t\t\tx, y = x + 1, y - 1\n\t\t\t\t\t\t\t\
    \t\tend\n\t\t\t\t\t\t\t\t\tif x <= n and y >= 1 then\n\t\t\t\t\t\t\t\t\t\tlocal\
    \ x, y = i - 1, ", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local\
    \ visited_count = 0\n  local min_path = {}\n  local visited_list = nil\n  local\
    \ visited_list_size = nil\n  local current_cell = nil\n  local current_cell_val\
    \ = nil\n  local current_cell_row = nil\n  local current_cell_col = nil\n  local\
    \ current_cell_row_next = nil\n  local current_cell_col_next = nil\n  local current_cell_row_prev\
    \ = nil\n  local current_cell_col_prev = nil\n  local current_cell_row_next_prev\
    \ = nil\n  local current_cell_col_next_prev = nil\n  local current_cell_row_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_prev = nil\n  local current_cell_row_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_prev = nil\n  local current_cell_row_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_prev = nil\n  local current_cell_row_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_next_prev = nil\n  local\
    \ current_cell_row_next_next_next_next_next_next_prev = nil\n  local current_cell_col_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_row_next_next_next_next_next_next_next_prev = nil\n\
    \  local current_cell_col_next_next_next_next_next_next_next_prev = nil\n  local\
    \ current_cell_row_next_next_next_next_next_next_next_next_prev = nil\n  local\
    \ current_cell_col_next_next_next_next_next_next_next_next_next_prev = nil\n \
    \ local current_cell_row_next_next_next_next_next_next_next_next_next_prev = nil\n\
    \  local current_cell_col_next_next_next_next_next_next_next_next_next_prev =\
    \ nil\n  local current_cell_row_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_row_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_row_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_row_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_col_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n  local current_cell_row_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = nil\n", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\t\
    local ans = {}\n\tlocal i, j = 0, 0\n\tlocal n = #grid\n\twhile i < n do\n\t\t\
    visited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\t\
    i = i + 1\n\t\tj = j + 1\n\tend\n\twhile j < n do\n\t\ti = i + 1\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\tj = j + 1\n\
    \tend\n\twhile i < n do\n\t\tj = j + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] =\
    \ grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\ti = i + 1\n\tend\n\twhile j < n do\n\
    \t\ti = i + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i]\
    \ = grid[i][j]\n\t\tj = j + 1\n\tend\n\twhile i < n do\n\t\tj = j + 1\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\ti = i + 1\n\
    \tend\n\twhile j < n do\n\t\ti = i + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] =\
    \ grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\tj = j + 1\n\tend\n\twhile i < n do\n\
    \t\tj = j + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i]\
    \ = grid[i][j]\n\t\ti = i + 1\n\tend\n\twhile j < n do\n\t\ti = i + 1\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\tj = j + 1\n\
    \tend\n\twhile i < n do\n\t\tj = j + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] =\
    \ grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\ti = i + 1\n\tend\n\twhile j < n do\n\
    \t\ti = i + 1\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i]\
    \ = grid[i][j]\n\t\tj = j + 1\n\tend\n\twhile i < n do\n\t\tj = j + 1\n\t\tvisited[i]\
    \ = true\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[i] = grid[i][j]\n\t\ti = i + 1\n\
    \tend\n\twhile j < n do\n\t\ti = i + 1\n\t\tvisited", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\tend\n\tfor\
    \ i = 1, #grid do\n\t\ttable.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\
    \ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\t\
    local j = i\n\t\twhile j <= k do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\t\
    table.insert(ans, lst_A[j])\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  local visited = {}\n  local visited_count = 0\n  local visited_dict\
    \ = {}\n  local visited_dict_count = 0\n  local visited_dict_lst_A = {}\n  local\
    \ visited_dict_lst_B = {}\n  local visited_dict_lst_A_size = #visited_dict_lst_A\n\
    \  local visited_dict_lst_B_size = #visited_dict_lst_B\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  local visited_dict_lst_A_count\
    \ = 0\n  local visited_dict_lst_B_count = 0\n  ", "\tlocal lst_A = {}\n\tlocal\
    \ lst_B = {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max2 = 0\n\tlocal visited_count_max3 = 0\n\tlocal\
    \ visited_count_max4 = 0\n\tlocal visited_count_max5 = 0\n\tlocal visited_count_max6\
    \ = 0\n\tlocal visited_count_max7 = 0\n\tlocal visited_count_max8 = 0\n\tlocal\
    \ visited_count_max9 = 0\n\tlocal visited_count_max10 = 0\n\tlocal visited_count_max11\
    \ = 0\n\tlocal visited_count_max12 = 0\n\tlocal visited_count_max13 = 0\n\tlocal\
    \ visited_count_max14 = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max16\
    \ = 0\n\tlocal visited_count_max17 = 0\n\tlocal visited_count_max18 = 0\n\tlocal\
    \ visited_count_max19 = 0\n\tlocal visited_count_max20 = 0\n\tlocal visited_count_max21\
    \ = 0\n\tlocal visited_count_max22 = 0\n\tlocal visited_count_max23 = 0\n\tlocal\
    \ visited_count_max24 = 0\n\tlocal visited_count_max25 = 0\n\tlocal visited_count_max26\
    \ = 0\n\tlocal visited_count_max27 = 0\n\tlocal visited_count_max28 = 0\n\tlocal\
    \ visited_count_max29 = 0\n\tlocal visited_count_max30 = 0\n\tlocal visited_count_max31\
    \ = 0\n\tlocal visited_count_max32 = 0\n\tlocal visited_count_max33 = 0\n\tlocal\
    \ visited_count_max34 = 0\n\tlocal visited_count_max35 = 0\n\tlocal visited_count_max36\
    \ = 0\n\tlocal visited_count_max37 = 0\n\tlocal visited_count_max38 = 0\n\tlocal\
    \ visited_count_max39 = 0\n\tlocal visited_count_max40 = 0\n\tlocal visited_count_max41\
    \ = 0\n\tlocal visited_count_max42 = 0\n\tlocal visited_count_max43 = 0\n\tlocal\
    \ visited_count_max44 = 0\n\tlocal visited_count_max45 = 0\n\tlocal visited_count_max46\
    \ = 0\n\tlocal visited_count_max47 = 0\n\tlocal visited_count_max48 = 0\n\tlocal\
    \ visited_count_max49 = 0\n\tlocal visited_count_max50 = 0\n\tlocal visited_count_max51\
    \ = 0\n\tlocal visited_count_max52 = 0\n\tlocal visited_count_max53 = 0\n\tlocal\
    \ visited_count_max54 = 0\n\t", "\tlocal lst_A, lst_B = {}, {}\n\tfor _, row in\
    \ ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_A,\
    \ cell)\n\t\tend\n\tend\n\tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row)\
    \ do\n\t\t\ttable.insert(lst_B, cell)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\t\
    table.sort(lst_B)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal\
    \ j = i - 1\n\t\twhile j ~= 0 do\n\t\t\tif lst_A[j] < lst_B[i] then\n\t\t\t\t\
    break\n\t\t\tend\n\t\t\tj = j - 1\n\t\tend\n\t\ttable.insert(ans, lst_A[i])\n\t\
    \ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_dict = {}\n\tlocal\
    \ count = 0\n\tlocal index = 1\n\tlocal visited_index = 1\n\tlocal current_index\
    \ = 1\n\tlocal current_cell\n\tlocal current_cell_value\n\tlocal current_cell_index\n\
    \tlocal current_cell_value_index\n\tlocal current_cell_value_index2\n\tlocal current_cell_value_index3\n\
    \tlocal current_cell_value_index4\n\tlocal current_cell_value_index5\n\tlocal\
    \ current_cell_value_index6\n\tlocal current_cell_value_index7\n\tlocal current_cell_value_index8\n\
    \tlocal current_cell_value_index9\n\tlocal current_cell_value_index10\n\tlocal\
    \ current_cell_value_index11\n\tlocal current_cell_value_index12\n\tlocal current_cell_value_index13\n\
    \tlocal current_cell_value_index14\n\tlocal current_cell_value_index15\n\tlocal\
    \ current_cell_value_index16\n\tlocal current_cell_value_index17\n\tlocal current_cell_value_index18\n\
    \tlocal current_cell_value_index19\n\tlocal current_cell_value_index20\n\tlocal\
    \ current_cell_value_index21\n\tlocal current_cell_value_index22\n\tlocal current_cell_value_index23\n\
    \tlocal current_cell_value_index24\n\tlocal current_cell_value_index25\n\tlocal\
    \ current_cell_value_index26\n\tlocal current_cell_value_index27\n\tlocal current_cell_value_index28\n\
    \tlocal current_cell_value_index29\n\tlocal current_cell_value_index30\n\tlocal\
    \ current_cell_value_index31\n\tlocal current_cell_value_index32\n\tlocal current_cell_value_index33\n\
    \tlocal current_cell_value_index34\n\tlocal current_cell_value_index35\n\tlocal\
    \ current_cell_value_index36\n\tlocal current_cell_value_index37\n\tlocal current_cell_value_index38\n\
    \tlocal current_cell_value_index39\n\tlocal current_cell_value_index40\n\tlocal\
    \ current_cell_value_index41\n\tlocal current_cell_value_index42\n\tlocal current_cell_value_index43\n\
    \tlocal current_cell_value_index44\n\tlocal current_cell_value_index45\n\tlocal\
    \ current_cell_value_index46\n\tlocal current_cell_value_index47\n\tlocal current_cell_value_index48\n\
    \tlocal current_cell_value_index49\n\tlocal current_cell_value_index50\n\tlocal\
    \ current_cell_value_index51\n\tlocal current_cell_value_index52\n\tlocal current_cell_value_index53\n\
    \tlocal current_cell_value_index54\n\tlocal current_cell_value_index55\n\tlocal\
    \ current_cell", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max_index2 = 0\n\tlocal visited_count_max_index3\
    \ = 0\n\tlocal visited_count_max_index4 = 0\n\tlocal visited_count_max_index5\
    \ = 0\n\tlocal visited_count_max_index6 = 0\n\tlocal visited_count_max_index7\
    \ = 0\n\tlocal visited_count_max_index8 = 0\n\tlocal visited_count_max_index9\
    \ = 0\n\tlocal visited_count_max_index10 = 0\n\tlocal visited_count_max_index11\
    \ = 0\n\tlocal visited_count_max_index12 = 0\n\tlocal visited_count_max_index13\
    \ = 0\n\tlocal visited_count_max_index14 = 0\n\tlocal visited_count_max_index15\
    \ = 0\n\tlocal visited_count_max_index16 = 0\n\tlocal visited_count_max_index17\
    \ = 0\n\tlocal visited_count_max_index18 = 0\n\tlocal visited_count_max_index19\
    \ = 0\n\tlocal visited_count_max_index20 = 0\n\tlocal visited_count_max_index21\
    \ = 0\n\tlocal visited_count_max_index22 = 0\n\tlocal visited_count_max_index23\
    \ = 0\n\tlocal visited_count_max_index24 = 0\n\tlocal visited_count_max_index25\
    \ = 0\n\tlocal visited_count_max_index26 = 0\n\tlocal visited_count_max_index27\
    \ = 0\n\tlocal visited_count_max_index28 = 0\n\tlocal visited_count_max_index29\
    \ = 0\n\tlocal visited_count_max_index30 = 0\n\tlocal visited_count_max_index31\
    \ = 0\n\tlocal visited_count_max_index32 = 0\n\tlocal visited_count_max_index33\
    \ = 0\n\tlocal visited_count_max_index34 = 0\n\tlocal visited_count_max_index35\
    \ = 0\n\tlocal visited_count_max_index36 = 0\n\tlocal visited_count_max_index37\
    \ = 0\n\tlocal visited_count_max_index38 = 0\n\tlocal visited_count_max_index39\
    \ = 0\n\tlocal visited_count_max_index40 = 0\n\tlocal visited_count_max_index41\
    \ = 0\n\tlocal visited_count_max_index42 = 0\n\tlocal visited_count_max_index43\
    \ = 0\n\tlocal visited_count_max_index44 = 0\n\tlocal visited_count_max_index45\
    \ = 0\n\tlocal visited_count_max_index46 = 0\n\tlocal visited_count_max_index47\
    \ = 0\n\tlocal visited_count_max_index48 = 0\n\t", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal count = 0\n\tfor i, row\
    \ in ipairs(grid) do\n\t\tfor j, value in ipairs(row) do\n\t\t\tcount = count\
    \ + 1\n\t\t\tvisited[count] = true\n\t\t\tlst_A[count] = value\n\t\t\tlst_B[count]\
    \ = value\n\t\tend\n\tend\n\tlocal function dfs(i, j)\n\t\tif visited[i] and visited[j]\
    \ then\n\t\t\treturn\n\t\tend\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\
    \tlocal count = 0\n\t\tfor k, value in ipairs(grid) do\n\t\t\tif i == k then\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tif j == k then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tif count < k then\n\t\t\tlocal tmp = lst_A[count]\n\
    \t\t\tlst_A[count] = lst_B[count]\n\t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count\
    \ > k then\n\t\t\tlocal tmp = lst_A[count]\n\t\t\tlst_A[count] = lst_B[count]\n\
    \t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count < k then\n\t\t\tlocal tmp = lst_A[count]\n\
    \t\t\tlst_A[count] = lst_B[count]\n\t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count\
    \ > k then\n\t\t\tlocal tmp = lst_A[count]\n\t\t\tlst_A[count] = lst_B[count]\n\
    \t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count < k then\n\t\t\tlocal tmp = lst_A[count]\n\
    \t\t\tlst_A[count] = lst_B[count]\n\t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count\
    \ > k then\n\t\t\tlocal tmp = lst_A[count]\n\t\t\tlst_A[count] = lst_B[count]\n\
    \t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count < k then\n\t\t\tlocal tmp = lst_A[count]\n\
    \t\t\tlst_A[count] = lst_B[count]\n\t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count\
    \ > k then\n\t\t\tlocal tmp = lst_A[count]\n\t\t\tlst_A[count] = lst_B[count]\n\
    \t\t\tlst_B[count] = tmp\n\t\tend\n\t\tif count < k then\n\t\t\tlocal tmp = lst_A[count",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\tlocal temp\n\twhile i <= #grid do\n\t\twhile j <= #grid:gsub(\"%d+\"\
    , function(a) return tonumber(a) end) do\n\t\t\ttemp = grid[i][j]\n\t\t\tif temp\
    \ == nil then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tlst_A[count] = temp\n\t\t\tlst_B[count]\
    \ = grid[i][j]\n\t\t\tcount = count + 1\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i +\
    \ 1\n\tend\n\tcount = count - 1\n\twhile count >= 1 do\n\t\tif lst_A[count] <\
    \ lst_B[count] then\n\t\t\ttemp = lst_A[count]\n\t\t\tlst_A[count] = lst_B[count]\n\
    \t\t\tlst_B[count] = temp\n\t\tend\n\t\tcount = count - 1\n\tend\n\tlocal ans\
    \ = {}\n\tfor i = 1, #lst_A do\n\t\tans[i] = lst_A[i]\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal current_cell\n\tlocal current_cell_val\n\tlocal current_cell_val_index\n\
    \tlocal current_cell_val_index2\n\tlocal current_cell_val_index3\n\tlocal current_cell_val_index4\n\
    \tlocal current_cell_val_index5\n\tlocal current_cell_val_index6\n\tlocal current_cell_val_index7\n\
    \tlocal current_cell_val_index8\n\tlocal current_cell_val_index9\n\tlocal current_cell_val_index10\n\
    \tlocal current_cell_val_index11\n\tlocal current_cell_val_index12\n\tlocal current_cell_val_index13\n\
    \tlocal current_cell_val_index14\n\tlocal current_cell_val_index15\n\tlocal current_cell_val_index16\n\
    \tlocal current_cell_val_index17\n\tlocal current_cell_val_index18\n\tlocal current_cell_val_index19\n\
    \tlocal current_cell_val_index20\n\tlocal current_cell_val_index21\n\tlocal current_cell_val_index22\n\
    \tlocal current_cell_val_index23\n\tlocal current_cell_val_index24\n\tlocal current_cell_val_index25\n\
    \tlocal current_cell_val_index26\n\tlocal current_cell_val_index27\n\tlocal current_cell_val_index28\n\
    \tlocal current_cell_val_index29\n\tlocal current_cell_val_index30\n\tlocal current_cell_val_index31\n\
    \tlocal current_cell_val_index32\n\tlocal current_cell_val_index33\n\tlocal current_cell_val_index34\n\
    \tlocal current_cell_val_index35\n\tlocal current_cell_val_index36\n\tlocal current_cell_val_index37\n\
    \tlocal current_cell_val_index38\n\tlocal current_cell_val_index39\n\tlocal current_cell_val_index40\n\
    \tlocal current_cell_val_index41\n\tlocal current_cell_val_index42\n\tlocal current_cell_val_index43\n\
    \tlocal current_cell_val_index44\n\tlocal current_cell_val_index45\n\tlocal current_cell_val_index46\n\
    \tlocal current_cell_val_index47\n\tlocal current_cell_val_index48\n\tlocal current_cell_val_index49\n\
    \tlocal current_cell_val_index50\n\tlocal current_cell_val_index51\n\tlocal current_cell_val_index52\n\
    \tlocal current_cell_val_index53\n\tlocal current_cell_val_index54\n\tlocal current_cell_val_index55\n\
    \tlocal current_cell_val_index56\n\tlocal current_cell_val_index57\n\tlocal current_cell_val_index58\n\
    \tlocal current_cell_val_index59\n\tlocal current_cell_val_index", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i\
    \ = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\t\tif grid[i][j] == grid[i][j\
    \ - 1] then\n\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\ti = i + 1\n\t\telseif\
    \ grid[i][j] == grid[i - 1][j] then\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\
    \tj = j + 1\n\t\telse\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal\
    \ ans = lst_A\n\tlocal i = 1\n\twhile i <= k do\n\t\tans[#ans + 1] = lst_B[i -\
    \ 1]\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\
    \tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[j]\
    \ = grid[j][1]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A2, lst_B2 =\
    \ {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A2[i] = grid[i][1]\n\
    \t\tlst_B2[j] = grid[j][1]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A3,\
    \ lst_B3 = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A3[i] =\
    \ grid[i][1]\n\t\tlst_B3[j] = grid[j][1]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\
    \tlocal lst_A4, lst_B4 = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\
    \tlst_A4[i] = grid[i][1]\n\t\tlst_B4[j] = grid[j][1]\n\t\ti = i + 1\n\t\tj = j\
    \ + 1\n\tend\n\tlocal lst_A5, lst_B5 = {}, {}\n\tlocal i, j = 1, 1\n\twhile i\
    \ <= #grid do\n\t\tlst_A5[i] = grid[i][1]\n\t\tlst_B5[j] = grid[j][1]\n\t\ti =\
    \ i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A6, lst_B6 = {}, {}\n\tlocal i, j =\
    \ 1, 1\n\twhile i <= #grid do\n\t\tlst_A6[i] = grid[i][1]\n\t\tlst_B6[j] = grid[j][1]\n\
    \t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A7, lst_B7 = {}, {}\n\tlocal\
    \ i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A7[i] = grid[i][1]\n\t\tlst_B7[j]\
    \ = grid[j][1]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A8, lst_B8 =\
    \ {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A8[i] = grid[i][1]\n\
    \t\tlst_B8[j] = grid[j][1]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A9,\
    \ lst_B9 = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A9[i] =\
    \ grid[i][1]\n\t\tlst_B9[j] = grid", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\
    \tlocal lst_C = {}\n\tlocal lst_D = {}\n\tlocal lst_E = {}\n\tlocal lst_F = {}\n\
    \tlocal lst_G = {}\n\tlocal lst_H = {}\n\tlocal lst_I = {}\n\tlocal lst_J = {}\n\
    \tlocal lst_K = {}\n\tlocal lst_L = {}\n\tlocal lst_M = {}\n\tlocal lst_N = {}\n\
    \tlocal lst_O = {}\n\tlocal lst_P = {}\n\tlocal lst_Q = {}\n\tlocal lst_R = {}\n\
    \tlocal lst_S = {}\n\tlocal lst_T = {}\n\tlocal lst_U = {}\n\tlocal lst_V = {}\n\
    \tlocal lst_W = {}\n\tlocal lst_X = {}\n\tlocal lst_Y = {}\n\tlocal lst_Z = {}\n\
    \tlocal lst_A1 = {}\n\tlocal lst_B1 = {}\n\tlocal lst_C1 = {}\n\tlocal lst_D1\
    \ = {}\n\tlocal lst_E1 = {}\n\tlocal lst_F1 = {}\n\tlocal lst_G1 = {}\n\tlocal\
    \ lst_H1 = {}\n\tlocal lst_I1 = {}\n\tlocal lst_J1 = {}\n\tlocal lst_K1 = {}\n\
    \tlocal lst_L1 = {}\n\tlocal lst_M1 = {}\n\tlocal lst_N1 = {}\n\tlocal lst_O1\
    \ = {}\n\tlocal lst_P1 = {}\n\tlocal lst_Q1 = {}\n\tlocal lst_R1 = {}\n\tlocal\
    \ lst_S1 = {}\n\tlocal lst_T1 = {}\n\tlocal lst_U1 = {}\n\tlocal lst_V1 = {}\n\
    \tlocal lst_W1 = {}\n\tlocal lst_X1 = {}\n\tlocal lst_Y1 = {}\n\tlocal lst_Z1\
    \ = {}\n\tlocal lst_A2 = {}\n\tlocal lst_B2 = {}\n\tlocal lst_C2 = {}\n\tlocal\
    \ lst_D2 = {}\n\tlocal lst_E2 = {}\n\tlocal lst_F2 = {}\n\tlocal lst_G2 = {}\n\
    \tlocal lst_H2 = {}\n\tlocal lst_I2 = {}\n\tlocal lst_J2 = {}\n\tlocal lst_K2\
    \ = {}\n\tlocal lst_L2 = {}\n\tlocal lst_M2 = {}\n\tlocal lst_N2 = {}\n\tlocal\
    \ lst_O2 = {}\n\tlocal ", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n\
    \    lst_A[grid[i]] = grid[i]\n  end\n  for i = 1, #grid do\n    for j = 1, #grid\
    \ do\n      if grid[i] == grid[j] then\n        lst_B[grid[j]] = grid[j]\n   \
    \   end\n    end\n  end\n  local i, j, k\n  local ans = {}\n  for i = 1, k do\n\
    \    local min\n    for j = 1, #lst_A do\n      if min == nil then\n        min\
    \ = lst_A[j]\n      else\n        if min > lst_A[j] then\n          min = lst_A[j]\n\
    \        end\n      end\n    end\n    ans[i] = min\n  end\n  for i = 1, k do\n\
    \    local min\n    for j = 1, #lst_B do\n      if min == nil then\n        min\
    \ = lst_B[j]\n      else\n        if min > lst_B[j] then\n          min = lst_B[j]\n\
    \        end\n      end\n    end\n    ans[i] = min\n  end\n  return ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n", "\tlocal lst_A = {}\n\tlocal lst_B =\
    \ {}\n\tlocal index = 1\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ visited_index = {}\n\tlocal visited_index[1] = 1\n\tlocal visited_index[2] =\
    \ 2\n\tlocal visited_index[3] = 3\n\tlocal visited_index[4] = 4\n\tlocal visited_index[5]\
    \ = 5\n\tlocal visited_index[6] = 6\n\tlocal visited_index[7] = 7\n\tlocal visited_index[8]\
    \ = 8\n\tlocal visited_index[9] = 9\n\tlocal visited_index[10] = 10\n\tlocal visited_index[11]\
    \ = 11\n\tlocal visited_index[12] = 12\n\tlocal visited_index[13] = 13\n\tlocal\
    \ visited_index[14] = 14\n\tlocal visited_index[15] = 15\n\tlocal visited_index[16]\
    \ = 16\n\tlocal visited_index[17] = 17\n\tlocal visited_index[18] = 18\n\tlocal\
    \ visited_index[19] = 19\n\tlocal visited_index[20] = 20\n\tlocal visited_index[21]\
    \ = 21\n\tlocal visited_index[22] = 22\n\tlocal visited_index[23] = 23\n\tlocal\
    \ visited_index[24] = 24\n\tlocal visited_index[25] = 25\n\tlocal visited_index[26]\
    \ = 26\n\tlocal visited_index[27] = 27\n\tlocal visited_index[28] = 28\n\tlocal\
    \ visited_index[29] = 29\n\tlocal visited_index[30] = 30\n\tlocal visited_index[31]\
    \ = 31\n\tlocal visited_index[32] = 32\n\tlocal visited_index[33] = 33\n\tlocal\
    \ visited_index[34] = 34\n\tlocal visited_index[35] = 35\n\tlocal visited_index[36]\
    \ = 36\n\tlocal visited_index[37] = 37\n\tlocal visited_index[38] = 38\n\tlocal\
    \ visited_index[39] = 39\n\tlocal visited_index[40] = 40\n\tlocal visited_index[41]\
    \ = 41\n\tlocal visited_index[42] = 42\n\tlocal visited_index[43] = 43\n\tlocal\
    \ visited_index[44] = 44\n\tlocal visited_index[45] = 45\n\tlocal visited_index[46]\
    \ = 46\n\tlocal visited_index[47] = 47\n\tlocal visited_index[48] = 48\n\tlocal\
    \ visited_index[49] = 49", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal visited_max = math.max(#visited, k)\n\tlocal\
    \ visited_min = math.min(#visited, k)\n\tfor i = 1, #grid do\n\t\tlocal value\
    \ = grid[i]\n\t\tlocal index = i\n\t\tvisited[i] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\twhile visited_count > visited_max do\n\t\t\tvisited_count = visited_count\
    \ - 1\n\t\t\tindex = index - 1\n\t\t\tif index == 0 then\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\t\tlocal value = grid[index]\n\t\t\tif visited[index] then\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\t\tvisited[index] = true\n\t\t\tvisited_count = visited_count +\
    \ 1\n\t\tend\n\t\tlst_A[visited_count] = value\n\t\tvisited_count = visited_count\
    \ - 1\n\t\twhile visited_count > visited_min do\n\t\t\tvisited_count = visited_count\
    \ - 1\n\t\t\tindex = index + 1\n\t\t\tif index == #grid then\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\t\tlocal value = grid[index]\n\t\t\tif visited[index] then\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\t\tvisited[index] = true\n\t\t\tvisited_count = visited_count\
    \ + 1\n\t\tend\n\t\tlst_B[visited_count] = value\n\tend\n\tlocal lst_A_size =\
    \ #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal lst_A_sorted = {}\n\tlocal lst_B_sorted\
    \ = {}\n\tfor i = 1, lst_A_size do\n\t\tlst_A_sorted[i] = lst_A[i]\n\tend\n\t\
    for i = 1, lst_B_size do\n\t\tlst_B_sorted[i] = lst_B[i]\n\tend\n\ttable.sort(lst_A_sorted,\
    \ function(a, b) return lst_A_sorted[a] < lst_A_sorted[b] end)\n\ttable.sort(lst_B_sorted,\
    \ function(a, b) return lst_B_sorted[a] < lst_B_sorted[b] end)\n\tlocal lst_A_sorted\
    \ = {}\n\tlocal lst_B_sorted = {}\n\tfor i = 1, lst_A_size do\n\t\tlst_A_sorted[i]\
    \ = lst_A[i]\n\tend\n\tfor i = 1, lst_B_size do\n\t\tlst_B_sorted[i] = lst_B[i]\n\
    \tend\n\ttable.sort(lst_A_sorted, function(a, b) return lst_A_sorted[a] < lst_A_sorted[b]\
    \ end)\n\ttable.sort(lst_B_sorted, function(a, b) return lst_B_sorted[a] < lst_B_sorted[b] ",
  "  local lst_A = {}\n  local lst_B = {}\n  local index = 1\n  local visited = {}\n\
    \  local ans = {}\n  local function dfs(i, j)\n    if i == j then\n      table.insert(ans,\
    \ grid[i][j])\n      return\n    end\n    visited[i] = true\n    visited[j] =\
    \ true\n    for k = 1, k do\n      local ii = i + index\n      local jj = j +\
    \ index\n      if ii < 1 or ii >= #grid or jj < 1 or jj >= #grid\n        or visited[ii]\
    \ or visited[jj]\n      then\n        continue\n      end\n      local val = grid[i][j]\n\
    \      local ii = i + index\n      local jj = j + index\n      if ii < 1 or ii\
    \ >= #grid or jj < 1 or jj >= #grid\n        or visited[ii] or visited[jj]\n \
    \     then\n        continue\n      end\n      local ii = i + index\n      local\
    \ jj = j + index\n      if ii < 1 or ii >= #grid or jj < 1 or jj >= #grid\n  \
    \      or visited[ii] or visited[jj]\n      then\n        continue\n      end\n\
    \      local ii = i + index\n      local jj = j + index\n      if ii < 1 or ii\
    \ >= #grid or jj < 1 or jj >= #grid\n        or visited[ii] or visited[jj]\n \
    \     then\n        continue\n      end\n      local ii = i + index\n      local\
    \ jj = j + index\n      if ii < 1 or ii >= #grid or jj < 1 or jj >= #grid\n  \
    \      or visited[ii] or visited[jj]\n      then\n        continue\n      end\n\
    \      local ii = i + index\n      local jj = j + index\n      if ii < 1 or ii\
    \ >= #grid or jj < 1 or jj >= #grid\n        or visited[ii] or visited[jj]\n \
    \     then\n        continue\n      end\n      local ii = i + index\n      local\
    \ jj = j + index\n      if ii < 1 or ii >= #grid or jj < 1 or jj >= #grid\n  \
    \      or visited[ii] or visited[jj]\n      then\n        continue\n      end\n\
    \      local ii = i + index\n      local jj = j + index\n      if ii < 1 or ii\
    \ >= #grid or jj < 1 or jj >= #grid\n        or visited[ii] or visited[jj]\n \
    \     then\n        continue\n      end\n      local ii = i + index\n      local\
    \ jj = j + index", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_max = 0\n\tlocal visited_max_count = 0\n\t\
    local visited_max_count_max = 0\n\tlocal visited_max_count_max_count = 0\n\tlocal\
    \ visited_max_count_max_count_max = 0\n\tlocal visited_max_count_max_count_max_count\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max = 0\n\tlocal visited_max_count_max_count_max_count_max_count\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max = 0\n\tlocal\
    \ visited_max_count_max_count_max_count_max_count_max_count = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal visited_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\t\
    local visited_count_max_index = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\t\
    local visited_count_max = 0\n\tlocal visited_count_max_index = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal visited_max = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\t\
    lst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\t\ti = i + 1\n\tend\n\twhile\
    \ j <= #grid do\n\t\tlocal i = 1\n\t\twhile i <= #grid do\n\t\t\tif grid[i][j]\
    \ == grid[i][j + 1] then\n\t\t\t\tlst_A[i] = grid[i][j + 1]\n\t\t\t\tlst_B[i]\
    \ = grid[i][j + 1]\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\
    \tend\n\t\tj = j + 1\n\tend\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= #grid\
    \ do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[i] = lst_A[i]\n\t\t\ti = i +\
    \ 1\n\t\telse\n\t\t\tans[i] = lst_B[i]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_len = 0\n\tlocal visited_lens = {}\n\tlocal visited_lens_count\
    \ = 0\n\tlocal visited_lens_sum = 0\n\tlocal visited_lens_sums = {}\n\tlocal visited_lens_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sum = 0\n\tlocal visited_lens_sums_sums = {}\n\
    \tlocal visited_lens_sums_sums_count = 0\n\tlocal visited_lens_sums_sums_sum =\
    \ 0\n\tlocal visited_lens_sums_sums_sums = {}\n\tlocal visited_lens_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_count = 0\n\tlocal visited_lens_sums_sums_sums_sums_sum\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_count = 0\n\tlocal\
    \ visited_lens_sums_sums_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_count = 0\n\t\
    local visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sum = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_count\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sum\
    \ = 0\n\tlocal visited_lens_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums_sums\
    \ = {}\n", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal\
    \ visited_count_max2 = 0\n\tlocal visited_count_max3 = 0\n\tlocal visited_count_max4\
    \ = 0\n\tlocal visited_count_max5 = 0\n\tlocal visited_count_max6 = 0\n\tlocal\
    \ visited_count_max7 = 0\n\tlocal visited_count_max8 = 0\n\tlocal visited_count_max9\
    \ = 0\n\tlocal visited_count_max10 = 0\n\tlocal visited_count_max11 = 0\n\tlocal\
    \ visited_count_max12 = 0\n\tlocal visited_count_max13 = 0\n\tlocal visited_count_max14\
    \ = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max16 = 0\n\tlocal\
    \ visited_count_max17 = 0\n\tlocal visited_count_max18 = 0\n\tlocal visited_count_max19\
    \ = 0\n\tlocal visited_count_max20 = 0\n\tlocal visited_count_max21 = 0\n\tlocal\
    \ visited_count_max22 = 0\n\tlocal visited_count_max23 = 0\n\tlocal visited_count_max24\
    \ = 0\n\tlocal visited_count_max25 = 0\n\tlocal visited_count_max26 = 0\n\tlocal\
    \ visited_count_max27 = 0\n\tlocal visited_count_max28 = 0\n\tlocal visited_count_max29\
    \ = 0\n\tlocal visited_count_max30 = 0\n\tlocal visited_count_max31 = 0\n\tlocal\
    \ visited_count_max32 = 0\n\tlocal visited_count_max33 = 0\n\tlocal visited_count_max34\
    \ = 0\n\tlocal visited_count_max35 = 0\n\tlocal visited_count_max36 = 0\n\tlocal\
    \ visited_count_max37 = 0\n\tlocal visited_count_max38 = 0\n\tlocal visited_count_max39\
    \ = 0\n\tlocal visited_count_max40 = 0\n\tlocal visited_count_max41 = 0\n\tlocal\
    \ visited_count_max42 = 0\n\tlocal visited_count_max43 = 0\n\tlocal visited_count_max44\
    \ = 0\n\tlocal visited_count_max45 = 0\n\tlocal visited_count_max46 = 0\n\tlocal\
    \ visited_count_max47 = 0\n\tlocal visited_count_max48 = 0\n\tlocal visited_count_max49\
    \ = 0\n\tlocal visited_count_max50 = 0\n\tlocal visited_count_max51 = 0\n\tlocal\
    \ visited_count_max52 = 0\n\tlocal visited_count_max53 = 0\n\tlocal visited_count_max54\
    \ = 0\n\tlocal visite", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal result = {{}}\n\tlocal i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\t\
    lst_A[i] = i\n\tend\n\tfor j = 1, n do\n\t\tlst_B[j] = j\n\tend\n\tvisited[#visited\
    \ + 1] = true\n\twhile #visited > 0 do\n\t\tlocal min_idx = nil\n\t\tlocal min_val\
    \ = nil\n\t\tfor i = 1, #visited do\n\t\t\tlocal v = visited[i]\n\t\t\tif v then\n\
    \t\t\t\tlocal idx = lst_A[i]\n\t\t\t\tlocal val = grid[idx]\n\t\t\t\tif min_val\
    \ == nil then\n\t\t\t\t\tmin_idx = idx\n\t\t\t\t\tmin_val = val\n\t\t\t\telseif\
    \ val < min_val then\n\t\t\t\t\tmin_idx = idx\n\t\t\t\t\tmin_val = val\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\t\tvisited[min_idx] = nil\n\t\tresult[#result + 1]\
    \ = min_val\n\t\tfor i = 1, #visited do\n\t\t\tlocal v = visited[i]\n\t\t\tif\
    \ v then\n\t\t\t\tlocal idx = lst_A[i]\n\t\t\t\tlocal val = grid[idx]\n\t\t\t\t\
    if val < min_val then\n\t\t\t\t\tmin_idx = idx\n\t\t\t\t\tmin_val = val\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\t\tlst_A[min_idx] = nil\n\t\tlst_B[min_idx] = nil\n\
    \tend\n\treturn result\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
