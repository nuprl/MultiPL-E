name: HumanEval_129_minPath
language: lua
prompt: "-- Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n-- each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have\
  \ to find the minimum path of length k in the grid. You can start\n-- from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n-- in other words,\
  \ you can go to cells which share an edge with you current\n-- cell.\n-- Please\
  \ note that a path of length k means visiting exactly k cells (not\n-- necessarily\
  \ distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered\
  \ less than a path B (of length k) if\n-- after making the ordered lists of the\
  \ values on the cells that A and B go\n-- through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n-- than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer\
  \ is unique.\n-- Return an ordered list of the values on the cells that the minimum\
  \ path go through.\n-- Examples:    \n-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7,\
  \ 8, 9}}, 3)\n-- {1, 2, 1}\n-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)\n\
  -- {1}\nlocal function minPath(grid, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n\
  \    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n\
  \    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n   \
  \ lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14,\
  \ 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5,\
  \ 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n  \
  \  lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3,\
  \ 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7,\
  \ 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1,\
  \ 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16,\
  \ 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2,\
  \ 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6,\
  \ 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1,\
  \ 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1,\
  \ 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal results = {}\n\tlocal current_cell\n\tlocal i\n\t\
    local j\n\tlocal k\n\tlocal cell\n\tlocal cells\n\tlocal cells_len\n\tlocal cells_len2\n\
    \tlocal cells_len3\n\tlocal cells_len4\n\tlocal cells_len5\n\tlocal cells_len6\n\
    \tlocal cells_len7\n\tlocal cells_len8\n\tlocal cells_len9\n\tlocal cells_len10\n\
    \tlocal cells_len11\n\tlocal cells_len12\n\tlocal cells_len13\n\tlocal cells_len14\n\
    \tlocal cells_len15\n\tlocal cells_len16\n\tlocal cells_len17\n\tlocal cells_len18\n\
    \tlocal cells_len19\n\tlocal cells_len20\n\tlocal cells_len21\n\tlocal cells_len22\n\
    \tlocal cells_len23\n\tlocal cells_len24\n\tlocal cells_len25\n\tlocal cells_len26\n\
    \tlocal cells_len27\n\tlocal cells_len28\n\tlocal cells_len29\n\tlocal cells_len30\n\
    \tlocal cells_len31\n\tlocal cells_len32\n\tlocal cells_len33\n\tlocal cells_len34\n\
    \tlocal cells_len35\n\tlocal cells_len36\n\tlocal cells_len37\n\tlocal cells_len38\n\
    \tlocal cells_len39\n\tlocal cells_len40\n\tlocal cells_len41\n\tlocal cells_len42\n\
    \tlocal cells_len43\n\tlocal cells_len44\n\tlocal cells_len45\n\tlocal cells_len46\n\
    \tlocal cells_len47\n\tlocal cells_len48\n\tlocal cells_len49\n\tlocal cells_len50\n\
    \tlocal cells_len51\n\tlocal cells_len52\n\tlocal cells_len53\n\tlocal cells_len54\n\
    \tlocal cells_len55\n\tlocal cells_len56\n\tlocal cells_len57\n\tlocal cells_len58\n\
    \tlocal cells_len59\n\tlocal cells_len60\n\tlocal cells_len61\n\tlocal cells_len62\n\
    \tlocal cells_len63\n\tlocal cells_len64\n\tlocal cells_len65\n\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal count\
    \ = 0\n\tlocal ans = {}\n\tlocal function dfs(i, j)\n\t\tif visited[i][j] then\n\
    \t\t\treturn\n\t\tend\n\t\tvisited[i][j] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tcount = count + 1\n\t\tif i == #grid then\n\t\t\tlocal v = grid[i][j]\n\
    \t\t\tfor i = 1, #lst_A do\n\t\t\t\tif lst_A[i] > v then\n\t\t\t\t\tlst_A[i] =\
    \ v\n\t\t\t\t\tans[i] = v\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tfor\
    \ i = 1, #lst_B do\n\t\t\t\tif lst_B[i] > v then\n\t\t\t\t\tlst_B[i] = v\n\t\t\
    \t\t\tans[i] = v\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn\n\t\t\
    end\n\t\tlocal i1 = i + 1\n\t\tlocal j1 = j + 1\n\t\tlocal i2 = i - 1\n\t\tlocal\
    \ j2 = j - 1\n\t\tif i1 < 1 then\n\t\t\tdfs(i2, j2)\n\t\telseif j1 < 1 then\n\t\
    \t\tdfs(i1, j2)\n\t\telseif i2 >= #grid then\n\t\t\tdfs(i1, j1)\n\t\telseif j2\
    \ >= #grid then\n\t\t\tdfs(i2, j1)\n\t\telse\n\t\t\tlocal i3 = i1 + 1\n\t\t\t\
    local j3 = j1 + 1\n\t\t\tlocal i4 = i2 - 1\n\t\t\tlocal j4 = j2 - 1\n\t\t\tif\
    \ i3 < 1 then\n\t\t\t\tdfs(i4, j3)\n\t\t\telseif j3 < 1 then\n\t\t\t\tdfs(i3,\
    \ j4)\n\t\t\telseif i4 >= #grid then\n\t\t\t\tdfs(i3, j3)\n\t\t\telseif j4 >=\
    \ #grid then\n\t\t\t\tdfs(i4, j3)\n\t\t\telse\n\t\t\t\tlocal i5 = i3 + 1\n\t\t\
    \t\tlocal j5 = j3 + 1\n\t\t\t\tlocal i6 = i4 - 1\n\t\t\t\tlocal j6 = j4 - 1\n\t\
    \t\t\tif i5 < 1 then\n\t\t\t\t\tdfs(i6, j5)\n\t\t\t\telseif j5 < 1 then\n\t\t\t\
    \t\tdfs(i5, j6)\n\t\t\t\telseif i6 >= #grid then\n\t\t\t\t\tdfs(i5, j5)\n\t\t\t\
    \telseif j6 >= #grid then\n\t\t\t\t\tdfs(i6, j5)\n\t\t\t\telse\n\t\t\t\t\tlocal\
    \ i7 = i5 + 1\n\t\t\t\t\tlocal j7 = j5 + 1\n\t\t\t\t\tlocal i8 = i6 - 1\n\t\t\t\
    \t\tlocal j8 = j6 - 1\n\t\t\t\t\tif i7 < 1 then\n\t\t\t\t\t\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal function dfs(i,\
    \ j)\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlocal val = grid[i][j]\n\
    \t\tif val == nil then return end\n\t\tif lst_A[val] == nil then\n\t\t\tlst_A[val]\
    \ = j\n\t\telse\n\t\t\tlst_B[val] = j\n\t\tend\n\t\tlocal cnt = 0\n\t\tfor k =\
    \ 1, k do\n\t\t\tif visited[i + k] or visited[j + k] then break end\n\t\t\tcnt\
    \ = cnt + 1\n\t\tend\n\t\tif cnt < k then\n\t\t\tlocal tmp = lst_A[val]\n\t\t\t\
    lst_A[val] = lst_B[val]\n\t\t\tlst_B[tmp] = val\n\t\tend\n\tend\n\tfor i = 1,\
    \ #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tif not visited[i + j] then\n\t\t\
    \t\tdfs(i, j)\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, #grid do\n\t\tfor j = 1,\
    \ #grid[1] do\n\t\t\tif visited[i + j] then\n\t\t\t\tans[#ans + 1] = grid[i][j]\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "  local lst_A, lst_B = {}, {}\n\
    \  local visited = {}\n  local visited_count = 0\n  local i, j = 1, 1\n  while\
    \ i <= #grid do\n    visited[i] = true\n    visited_count = visited_count + 1\n\
    \    local cell = {}\n    for k = 1, k do\n      cell[k] = grid[i][j]\n    end\n\
    \    lst_A[#lst_A + 1] = cell\n    i = i + 1\n  end\n  while j <= #grid do\n \
    \   visited[j] = true\n    visited_count = visited_count + 1\n    local cell =\
    \ {}\n    for k = 1, k do\n      cell[k] = grid[i][j]\n    end\n    lst_B[#lst_B\
    \ + 1] = cell\n    j = j + 1\n  end\n  local lst_A_size = #lst_A\n  local lst_B_size\
    \ = #lst_B\n  local lst_A_sorted = {}\n  local lst_B_sorted = {}\n  for i = 1,\
    \ lst_A_size do\n    lst_A_sorted[#lst_A_sorted + 1] = lst_A[i]\n  end\n  for\
    \ i = 1, lst_B_size do\n    lst_B_sorted[#lst_B_sorted + 1] = lst_B[i]\n  end\n\
    \  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local\
    \ lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted\
    \ = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted =\
    \ lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n\
    \  local lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local\
    \ lst_B_sorted = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted\
    \ = lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted =\
    \ lst_B_sorted\n  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n\
    \  local lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted\n  local\
    \ lst_A_sorted = lst_A_sorted\n  local lst_B_sorted = lst_B_sorted", "\tlocal\
    \ lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal results = {}\n\
    \tlocal count = 0\n\tlocal visited_count = 0\n\tlocal current_cell\n\tlocal current_cell_value\n\
    \tlocal current_cell_neighbors\n\tlocal current_cell_neighbors_value\n\tlocal\
    \ current_cell_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors\n\tlocal current_cell_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors\n\tlocal\
    \ current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\tlocal\
    \ current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\t\
    local current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_value\n\
    \tlocal current_cell_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_neighbors_",
  "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n\
    \  local visited_max = 0\n  local visited_max_count = 0\n  local visited_max_value\
    \ = 0\n  local visited_max_index = 0\n  local visited_max_index2 = 0\n  local\
    \ visited_max_index3 = 0\n  local visited_max_index4 = 0\n  local visited_max_index5\
    \ = 0\n  local visited_max_index6 = 0\n  local visited_max_index7 = 0\n  local\
    \ visited_max_index8 = 0\n  local visited_max_index9 = 0\n  local visited_max_index10\
    \ = 0\n  local visited_max_index11 = 0\n  local visited_max_index12 = 0\n  local\
    \ visited_max_index13 = 0\n  local visited_max_index14 = 0\n  local visited_max_index15\
    \ = 0\n  local visited_max_index16 = 0\n  local visited_max_index17 = 0\n  local\
    \ visited_max_index18 = 0\n  local visited_max_index19 = 0\n  local visited_max_index20\
    \ = 0\n  local visited_max_index21 = 0\n  local visited_max_index22 = 0\n  local\
    \ visited_max_index23 = 0\n  local visited_max_index24 = 0\n  local visited_max_index25\
    \ = 0\n  local visited_max_index26 = 0\n  local visited_max_index27 = 0\n  local\
    \ visited_max_index28 = 0\n  local visited_max_index29 = 0\n  local visited_max_index30\
    \ = 0\n  local visited_max_index31 = 0\n  local visited_max_index32 = 0\n  local\
    \ visited_max_index33 = 0\n  local visited_max_index34 = 0\n  local visited_max_index35\
    \ = 0\n  local visited_max_index36 = 0\n  local visited_max_index37 = 0\n  local\
    \ visited_max_index38 = 0\n  local visited_max_index39 = 0\n  local visited_max_index40\
    \ = 0\n  local visited_max_index41 = 0\n  local visited_max_index42 = 0\n  local\
    \ visited_max_index43 = 0\n  local visited_max_index44 = 0\n  local visited_max_index45\
    \ = 0\n  local visited_max_index46 = 0\n  local visited_max_index47 = 0\n  local\
    \ visited_max_index48 = 0\n  local visited_max_index49 = 0\n  local visited_max_index50\
    \ = 0\n  local visited_max_index51 = 0\n  local visited_max_index52 = 0", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_count_max = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n\tlocal visited_count_max = 1\n\tlocal visited_count_cur\
    \ = 1\n\tlocal visited_count_min = 1\n", "\tlocal lst_A, lst_B = {}, {}\n\tfor\
    \ i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B, grid[i])\n\
    \tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal visited\
    \ = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A\
    \ do\n\t\t\tif visited[j] then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvisited[j] = true\n\
    \t\t\tif lst_A[j] == lst_B[i] then\n\t\t\t\ttable.insert(ans, lst_A[j])\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\n\
    end", "  local lst_A = {}\n  local lst_B = {}\n  local index = 1\n  for i = 1,\
    \ #grid do\n    for j = 1, #grid[1] do\n      lst_A[index] = grid[i][j]\n    \
    \  lst_B[index] = grid[j][i]\n      index = index + 1\n    end\n  end\n  lst_A[index]\
    \ = grid[#grid][1][#grid[1]][1]\n  lst_B[index] = grid[#grid][#grid][#grid][#grid][#grid][1]\n\
    \  local ans = {}\n  local i = index\n  while i <= k do\n    local j = 1\n   \
    \ while j <= #lst_A do\n      if lst_A[i] < lst_B[j] then\n        ans[i] = lst_A[i]\n\
    \        break\n      elseif lst_A[i] > lst_B[j] then\n        ans[i] = lst_B[j]\n\
    \        break\n      else\n        j = j + 1\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return ans\nend", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid\
    \ do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n  end\n\
    \  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  local visited =\
    \ {}\n  local i = 1\n  while i <= k do\n    local j = 1\n    while j <= #lst_A\
    \ do\n      if visited[i] == false then\n        visited[i] = true\n        local\
    \ k = i\n        while k <= #lst_B do\n          if lst_A[k] < lst_B[k] then\n\
    \            k = k + 1\n          else\n            table.insert(ans, lst_A[k])\n\
    \            k = k + 1\n          end\n        end\n      end\n      j = j + 1\n\
    \    end\n    i = i + 1\n  end\n  return ans\nend", "  local lst_A, lst_B = {},\
    \ {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  for i = 1, k do\n    local j = k - i\n    local tmp = lst_A[j]\n    lst_A[j]\
    \ = lst_A[j + 1]\n    lst_A[j + 1] = tmp\n    tmp = lst_B[j]\n    lst_B[j] = lst_B[j\
    \ + 1]\n    lst_B[j + 1] = tmp\n    table.insert(ans, lst_A[j])\n  end\n  return\
    \ ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\twhile i\
    \ <= k and i <= #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\t\ti = i + 1\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\t\
    local ans = {}\n\tlocal j = 1\n\twhile j <= k do\n\t\tif lst_A[j] == lst_B[j]\
    \ then\n\t\t\ttable.insert(ans, lst_A[j])\n\t\t\tj = j + 1\n\t\telse\n\t\t\tj\
    \ = j + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal\
    \ row, col = unpack(grid)\n\tlocal function dfs(row, col, visited, visited_count,\
    \ min_path)\n\t\tvisited[row * col + col] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tif visited_count == k then\n\t\t\tlocal path = {}\n\t\t\tfor i = 1,\
    \ row do\n\t\t\t\tfor j = 1, col do\n\t\t\t\t\tif visited[row * col + j] then\n\
    \t\t\t\t\t\ttable.insert(path, j)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \ttable.insert(min_path, path)\n\t\telse\n\t\t\tfor i = 1, row do\n\t\t\t\tfor\
    \ j = 1, col do\n\t\t\t\t\tif visited[row * col + j] then\n\t\t\t\t\t\tlocal next_row\
    \ = row - i\n\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\tif next_row < 0\
    \ or next_col < 0 then\n\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count,\
    \ min_path)\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\
    \t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\tif next_row < 0 or next_col < 0\
    \ then\n\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\t\
    local next_col = col - j\n\t\t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\
    \t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\t\
    \t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\
    \t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\tif next_row < 0 or next_col <\
    \ 0 then\n\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count,\
    \ min_path)\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tlocal next_row = row\
    \ - i\n\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\t\tif next_row\
    \ < 0 or next_col < 0 then\n\t\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited,\
    \ visited_count, min_path)\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ next_row = row - i\n\t\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\
    \t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\t\t\t\t\t\t\t\t\t\t\t\tdfs(next_row,\
    \ next_col, visited, visited_count, min_path)\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\
    \t\t\t\t\t\t\t\t\t\tlocal next_row = row - i\n\t\t\t\t\t\t\t\t\t\t\t\tlocal next_col\
    \ = col - j\n\t\t\t\t\t\t\t\t\t\t\t\tif next_row < 0 or next_col < 0 then\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\tdfs(next_row, next_col, visited, visited_count, min_path)\n\
    \t\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal next_row = row -\
    \ i\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal next_col = col - j\n\t\t\t\t\t\t\t\t\t\t\t\
    \t\tif next_row < 0 or next_col", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local index = 1\n\tlocal visited = {}\n\tlocal visited_index = {}\n\tlocal visited_index[1]\
    \ = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3] = 3\n\tlocal visited_index[4]\
    \ = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6] = 6\n\tlocal visited_index[7]\
    \ = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9] = 9\n\tlocal visited_index[10]\
    \ = 10\n\tlocal visited_index[11] = 11\n\tlocal visited_index[12] = 12\n\tlocal\
    \ visited_index[13] = 13\n\tlocal visited_index[14] = 14\n\tlocal visited_index[15]\
    \ = 15\n\tlocal visited_index[16] = 16\n\tlocal visited_index[17] = 17\n\tlocal\
    \ visited_index[18] = 18\n\tlocal visited_index[19] = 19\n\tlocal visited_index[20]\
    \ = 20\n\tlocal visited_index[21] = 21\n\tlocal visited_index[22] = 22\n\tlocal\
    \ visited_index[23] = 23\n\tlocal visited_index[24] = 24\n\tlocal visited_index[25]\
    \ = 25\n\tlocal visited_index[26] = 26\n\tlocal visited_index[27] = 27\n\tlocal\
    \ visited_index[28] = 28\n\tlocal visited_index[29] = 29\n\tlocal visited_index[30]\
    \ = 30\n\tlocal visited_index[31] = 31\n\tlocal visited_index[32] = 32\n\tlocal\
    \ visited_index[33] = 33\n\tlocal visited_index[34] = 34\n\tlocal visited_index[35]\
    \ = 35\n\tlocal visited_index[36] = 36\n\tlocal visited_index[37] = 37\n\tlocal\
    \ visited_index[38] = 38\n\tlocal visited_index[39] = 39\n\tlocal visited_index[40]\
    \ = 40\n\tlocal visited_index[41] = 41\n\tlocal visited_index[42] = 42\n\tlocal\
    \ visited_index[43] = 43\n\tlocal visited_index[44] = 44\n\tlocal visited_index[45]\
    \ = 45\n\tlocal visited_index[46] = 46\n\tlocal visited_index[47] = 47\n\tlocal\
    \ visited_index[48] = 48\n\tlocal visited_index[49] = 49\n\tlocal visited_index",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal i, j, val\n\tlocal count = 0\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1]\
    \ do\n\t\t\tval = grid[i][j]\n\t\t\tif val == nil then\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\t\tlst_A[#lst_A + 1] = val\n\t\t\tlst_B[#lst_B + 1] = val\n\t\tend\n\t\
    end\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal function dfs(i, j)\n\t\t\
    visited[#visited + 1] = true\n\t\tvisited_count = visited_count + 1\n\t\tif i\
    \ == #grid then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tif j == #grid[1]\
    \ then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tif visited[#visited\
    \ + 1] == true then\n\t\t\tcount = count + 1\n\t\t\treturn\n\t\tend\n\t\tdfs(i\
    \ + 1, j)\n\t\tdfs(i - 1, j)\n\t\tdfs(i, j + 1)\n\t\tdfs(i, j - 1)\n\tend\n\t\
    dfs(1, #grid[1])\n\tlocal path = {}\n\tlocal function dfs_helper(i, j)\n\t\tif\
    \ i == #grid then\n\t\t\tpath[#path + 1] = lst_A[i]\n\t\t\treturn\n\t\tend\n\t\
    \tif j == #grid[1] then\n\t\t\tpath[#path + 1] = lst_B[j]\n\t\t\treturn\n\t\t\
    end\n\t\tif visited[#visited + 1] == true then\n\t\t\treturn\n\t\tend\n\t\tdfs_helper(i\
    \ + 1, j)\n\t\tdfs_helper(i - 1, j)\n\t\tdfs_helper(i, j + 1)\n\t\tdfs_helper(i,\
    \ j - 1)\n\tend\n\tdfs_helper(1, #grid[1])\n\treturn path\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = #visited\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\
    \tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal\
    \ visited_max_index = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index\
    \ = -1\n\tlocal visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal\
    \ visited_max_value = nil\n\tlocal visited_max_index = -1\n\tlocal visited_max_value\
    \ = nil", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal\
    \ ans = {}\n\tlocal n = #grid\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\
    \tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = i\n\t\twhile j <= n do\n\t\t\t\
    if not visited[j] then\n\t\t\t\tvisited[j] = true\n\t\t\t\tlocal value = grid[i][j]\n\
    \t\t\t\tlocal ii = i - 1\n\t\t\t\tlocal jj = j - 1\n\t\t\t\tlocal ii_next = i\
    \ - 1\n\t\t\t\tlocal jj_next = j - 1\n\t\t\t\twhile ii > 0 and grid[ii][jj] ~=\
    \ value do\n\t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next\
    \ - 1\n\t\t\t\t\tjj = jj_next - 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\
    \t\t\t\tlocal jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value\
    \ do\n\t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next +\
    \ 1\n\t\t\t\t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\
    \t\t\tlocal jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\
    \t\t\t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\
    \t\t\t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\t\
    local jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\
    \t\t\tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\
    \t\tjj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal\
    \ jj_next = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\t\t\
    \tii_next = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\t\t\
    jj = jj_next + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal jj_next\
    \ = j + 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value do\n\t\t\t\t\tii_next\
    \ = ii\n\t\t\t\t\tjj_next = jj\n\t\t\t\t\tii = ii_next + 1\n\t\t\t\t\tjj = jj_next\
    \ + 1\n\t\t\t\tend\n\t\t\t\tlocal ii_next = i + 1\n\t\t\t\tlocal jj_next = j +\
    \ 1\n\t\t\t\twhile ii <= n and grid[ii][jj] ~= value ", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[#lst_A + 1]\
    \ = grid[i][j]\n\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\ti = i + 1\n\t\tj = j +\
    \ 1\n\t\tif j > #grid then\n\t\t\tj = 1\n\t\t\ti = i + 1\n\t\tend\n\tend\n\tlocal\
    \ lst_A_size = #lst_A\n\tlocal lst_B_size = #lst_B\n\tlocal i = 1\n\twhile i <=\
    \ k do\n\t\tif lst_A[i] > lst_B[i] then\n\t\t\tlocal temp = lst_A[i]\n\t\t\tlst_A[i]\
    \ = lst_B[i]\n\t\t\tlst_B[i] = temp\n\t\tend\n\t\ti = i + 1\n\t\tif i > lst_A_size\
    \ then\n\t\t\ti = lst_A_size\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i,\
    \ j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j]\
    \ == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\telseif grid[i][j] > grid[i][j] then\n\t\t\t\tlst_B[count] = grid[i][j]\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal index = 1\n\t\
    while index <= k do\n\t\tlocal temp = lst_A[index]\n\t\tindex = index + 1\n\t\t\
    if index > k then\n\t\t\tindex = k\n\t\tend\n\t\tif index > #lst_A then\n\t\t\t\
    index = #lst_A\n\t\tend\n\t\tif lst_A[index] < lst_B[index] then\n\t\t\tlst_A[index]\
    \ = temp\n\t\tend\n\tend\n\t\n\tlocal ans = {}\n\tfor i = 1, #lst_A do\n\t\tans[#ans\
    \ + 1] = lst_A[i]\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\
    \tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
