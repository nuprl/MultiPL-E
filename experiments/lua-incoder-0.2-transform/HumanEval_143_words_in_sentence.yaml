name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        local rest = sentence:sub(primes[i] +\
    \ 1, #sentence)\n        result = result .. \" \" .. word\n    end\n    return\
    \ result\nend", "    local result = {}\n    for w in string.gmatch(sentence, '([^\
    \ ]+)')\n    do\n        local n = tonumber(w)\n        if n ~= nil then\n   \
    \         table.insert(result, w)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:tostring()))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our function", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i) == primes[j] then\n                prime\
    \ = false\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, \" \")\nend", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i ~= primes[j] and sentence[i]\
    \ == sentence[i]:sub(1, i) then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    ", "  local prime_words = {}\n  for\
    \ i = 2, #sentence do\n    local prime_word = {}\n    for j = 2, #prime_words\
    \ do\n      if i % prime_words[j] == 0 then\n        prime_word[j] = true\n  \
    \    end\n    end\n    prime_words[#prime_words + 1] = prime_word\n  end\n  local\
    \ result = {}\n  for i = 1, #prime_words do\n    local prime_word = prime_words[i]\n\
    \    for j = 1, #sentence do\n      if prime_word[j] then\n        table.insert(result,\
    \ sentence[j])\n      end\n    end\n  end\n  return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1,\
    \ i-1) then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i+j) ~= sentence:sub(i-1, i-1) then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(i,\
    \ i+primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "  local prime_numbers = {}\n  for i = 2, 100\
    \ do\n    prime_numbers[i] = true\n  end\n  local prime_number_string = ''\n \
    \ for i = 1, #sentence do\n    local letter = sentence[i]\n    if prime_numbers[#prime_numbers\
    \ + 1] == true then\n      prime_number_string = prime_number_string .. letter\n\
    \      prime_numbers[#prime_numbers + 1] = false\n    end\n  end\n  return prime_number_string\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our function", "    local result = {}\n    for word\
    \ in string.gmatch(sentence, '([^ ]+)')\n    do\n        local prime = true\n\
    \        for i = 2, #result\n        do\n            if #word == i then\n    \
    \            prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i ~= primes[j] then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 2, #primes do\n        local prime = primes[i]\n        for\
    \ j = 2, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             local word = sentence:sub(i, i + 1)\n                table.insert(result,\
    \ word)\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test your implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test your implementation. Make sure it passes for all test cases below.",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i]:len()\
    \ - 1)\n        result = result .. word\n    end\n    return result\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "  local result = {}\n  for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n    local prime = true\n    for i = 2, #result do\n      if\
    \ #result[i] > #w then\n        prime = false\n        break\n      end\n    end\n\
    \    if prime then\n      table.insert(result, w)\n    end\n  end\n  return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n\
    \    return table.concat(result)\nend", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test your implementation. Run the cell below.", " \
    \   local primes = {}\n    for i = 2, 100 do\n        local prime = true\n   \
    \     for _, c in ipairs(sentence) do\n            if c ~= ' ' and c ~= '-' and\
    \ c ~= '!' and c ~= '?' and c ~= '!' and c ~= '?' then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for _, p in ipairs(primes) do\n        local count = 0\n        for\
    \ _, c in ipairs(sentence) do\n            if c == ' ' or c == '-' or c == '!'\
    \ or c == '?' or c == '!' or c == '?' then\n                count = count + 1\n\
    \            end\n        end\n        if count == p then\n            table.insert(result,\
    \ sentence)\n        end\n    end\n    return table.concat(result)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n \
    \       table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "  local result = {}\n\
    \  for w in string.gmatch(sentence, \"([^ ]+)\") do\n    local prime = true\n\
    \    for i = 2, #result do\n      if #result[i] ~= #w then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(result,\
    \ w)\n    end\n  end\n  return table.concat(result)\nend", "    local result =\
    \ {}\n    for w in string.gmatch(sentence, '[^ ]+') do\n        local n = tonumber(w)\n\
    \        if n ~= nil then\n            table.insert(result, w)\n        end\n\
    \    end\n    return table.concat(result,\" \")\nend", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local primes = {}\n    local primes_count = 0\n\
    \    local primes_index = {}\n    local primes_index_count = 0\n    local primes_string\
    \ = ''\n    local primes_string_count = 0\n    local primes_string_length = 0\n\
    \    local primes_string_length_count = 0\n    local primes_string_length_index\
    \ = 0\n    local primes_string_length_index_count = 0\n    local primes_string_length_string\
    \ = ''\n    local primes_string_length_string_count = 0\n    local primes_string_length_string_index\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_count = 0\n    local primes_string_length_string_index_count\
    \ = 0\n    local primes_string_length_string_index_", "    local result = {}\n\
    \    for word in string.gmatch(sentence, \"([^ ]+)\") do\n        local prime\
    \ = true\n        for i = 2, #result do\n            if #word == i then\n    \
    \            prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, 100 do\n        local prime = true\n    \
    \    for _, word in ipairs(split(sentence)) do\n            if i ~= tonumber(word)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for _, word in ipairs(split(sentence))\
    \ do\n        local prime = nil\n        for i = 1, #primes do\n            if\
    \ primes[i] < tonumber(word) then\n                prime = primes[i]\n       \
    \         break\n            end\n        end\n        if prime ~= nil then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local prime_words = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #prime_words do\n            if i % prime_words[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(prime_words,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #prime_words\
    \ do\n        table.insert(result, sentence:sub(1, prime_words[i]))\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's see how it works:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_string = ''\n    local primes_string_index\
    \ = 1\n    local primes_string_length = 1\n    local primes_string_length_index\
    \ = 1\n    local primes_string_length_string = ''\n    local primes_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length = 1\n    local primes_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string = ''\n    local primes_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length = 1\n    local\
    \ primes_string_length_string_length_string_length_index = 1\n    local primes_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 2, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]:tostring()))\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_length = #sentence\n    for i =\
    \ 1, primes_length do\n        local prime = true\n        for j = 1, primes_length\
    \ do\n            if sentence[i] == sentence[j] then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            primes[primes_index] = sentence[i]\n            primes_index\
    \ = primes_index + 1\n        end\n    end\n    local result = \"\"\n    for i\
    \ = 1, primes_length do\n        result = result .. \" \" .. primes[i]\n    end\n\
    \    return result\nend", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = \"\"\n    for i = 2, #primes do\n\
    \        result = result .. \" \" .. sentence:sub(1, primes[i])\n    end\n   \
    \ return result\nend\n</cell>\n<text>\nLet's test your implementation. Make sure\
    \ it passes the tests below.", "    local primes = {}\n    local prime_words =\
    \ {}\n    local prime_words_len = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 1, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            table.insert(prime_words, sentence[i])\n            table.insert(prime_words_len,\
    \ 1)\n        else\n            local len = #prime_words\n            for j =\
    \ 1, len do\n                if prime_words[j] == sentence[i] then\n         \
    \           prime_words_len[j] = prime_words_len[j] + 1\n                    break\n\
    \                end\n            end\n        end\n    end\n    local new_sentence\
    \ = sentence\n    for i = 1, #primes do\n        local len = prime_words_len[i]\n\
    \        for j = 1, len do\n            local index = i - j\n            if index\
    \ >= 1 then\n                new_sentence = new_sentence:sub(1, index - 1)\n \
    \           end\n        end\n    end\n    return new_sentence\nend\n</cell>\n\
    <text>\nLet's test your implementation", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i ~= primes[j] then\n                prime = false\n           \
    \     break\n            end\n        end\n        if prime then\n           \
    \ table.insert(primes, i)\n        end\n    end\n    local result = {}\n    for\
    \ i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n       \
    \ table.insert(result, word)\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend", "    local primes = {}\n    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence[i] == primes[j] then\n            \
    \    prime = false\n                break\n            end\n        end\n    \
    \    if prime then\n            table.insert(primes, sentence[i])\n        end\n\
    \    end\n    for i = 2, #primes do\n        local prime_word = sentence[i]\n\
    \        for j = 2, #prime_words do\n            if prime_word == prime_words[j]\
    \ then\n                prime_word = nil\n                break\n            end\n\
    \        end\n        if prime_word then\n            table.insert(prime_words,\
    \ prime_word)\n        end\n    end\n    return table.concat(prime_words)\nend\n\
    </cell>\n<text>\nLet's test your implementation. Make sure you get 'is' as the\
    \ only prime word in the sentence. Explain why you get 'is' as the only prime\
    \ word in the sentence.", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 2, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]:tostring()))\n    end\n\
    \    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n    local\
    \ prime_words_str_index = 0\n    local prime_words_str_len = 0\n    local prime_words_str_len_index\
    \ = 0\n    local prime_words_str_order_index = 0\n    local prime_words_str_order_index_index\
    \ = 0\n    local prime_words_str_len_index = 0\n    local prime_words_str_len_index_index\
    \ = 0\n    for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n \
    \       if prime_words_str_index == #prime_words_str then\n            prime_words_str\
    \ = prime_words_str..' '..word\n        else\n            prime_words_str = prime_words_str..'\
    \ '..word\n        end\n        if prime_words_str_len_index == #prime_words_str_len\
    \ then\n            prime_words_str_len = prime_words_str_len..' '..word\n   \
    \     else\n            prime_words_str_len = prime_words_str_len..' '..word\n\
    \        end\n        if prime_words_str_order_index == #prime_words_str_order\
    \ then\n            prime_words_str_order = prime_words_str_order..' '..word\n\
    \        else\n            prime_words_str_order = prime_words_str_order..' '..word\n\
    \        end\n        if prime_words_str_len_index == #prime_words_str_len then\n\
    \            prime_words_str_len_index = prime_words_str_len_index..' '..word\n\
    \        else\n            prime_words_str_len_index = prime_words_str_len_index..'\
    \ '..word\n        end\n        if prime_words_str_order_index_index == #prime_words_str_order\
    \ then\n            prime_words_str_order_index_index = prime_words_str_order_index_index..'\
    \ '..word\n        else\n            prime_words_str_order_index_index = prime_words_str_order_index_index..'\
    \ '..word\n        end\n        if prime_words_str_len_index_index == #prime_words_str_len\
    \ then\n            prime_words_str_len_index_index = prime_words_str_len_index_index..'\
    \ '..word\n        else\n            prime_words_str_len_index_index = prime_words_str_len_index_index..'\
    \ '..word\n        end\n    end\n    for i = 1, #prime_words_str do\n        local\
    \ prime_word = prime_words_str:sub(i,i)\n        local prime_word_len = prime_words_str_len:sub(i,i)\n\
    \        local prime_word_order = prime_words_str_order:sub(i,i)\n        local\
    \ prime_word_len", "    local primes = {}\n    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local words = sentence:gsub('[^ ]+', ' ', 'g'):gsub('\
    \ ', ' '):gsub('^ +', '')\n    for i = 2, #words do\n        local prime = true\n\
    \        for j = 1, #primes do\n            if primes[j] and primes[j] % i ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \         table.insert(prime_words, words[i])\n            table.insert(prime_words_len,\
    \ #prime_words)\n        end\n    end\n    local result = {}\n    for i = 1, #prime_words\
    \ do\n        table.insert(result, prime_words[i])\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\n</cell>\n<text>\nLet's see\
    \ how it works:", "    local primes = {}\n    for i = 2, #sentence do\n      \
    \  local prime = true\n        for j = 2, #primes do\n            if i % primes[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = {}\n    for i = 1, #primes do\n    \
    \    local word = sentence:sub(1, primes[i])\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = \"\"\n    for i = 2, #primes do\n        result = result\
    \ .. \" \" .. sentence:sub(1, primes[i])\n    end\n    return result\nend", " \
    \   local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local words = sentence:gsub(' ', ''):gsub('%a+', '')\n    for i = 2,\
    \ #words do\n        local prime = true\n        for j = 2, #primes do\n     \
    \       if primes[j] and primes[j] % i == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n            table.insert(prime_words, words[i])\n\
    \            table.insert(prime_words_len, #prime_words)\n        end\n    end\n\
    \    local new_words = {}\n    for i = 1, #prime_words do\n        local new_word\
    \ = ''\n        for j = 1, #primes do\n            if primes[j] and primes[j]\
    \ % prime_words[i] == 0 then\n                new_word = new_word .. prime_words[i]\n\
    \                break\n            end\n        end\n        table.insert(new_words,\
    \ new_word)\n    end\n    return table.concat(new_words, ' ')\nend\n</cell>\n\
    <text>\nLet's see how it works:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 2, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's\
    \ now see how to use this function:", "    local prime_words = {}\n    for i =\
    \ 2, #sentence do\n        local prime = true\n        for j = 2, #prime_words\
    \ do\n            if #sentence % prime_words[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(prime_words, #prime_words + 1)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #prime_words do\n        local\
    \ prime_word = sentence:sub(1, prime_words[i])\n        table.insert(result, prime_word)\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    local primes_count = 0\n    local primes_length = 1\n    local primes_index\
    \ = 1\n    local primes_string = ''\n    local primes_string_index = 1\n    local\
    \ primes_string_length = 1\n    local primes_string_length_index = 1\n    local\
    \ primes_string_length_string = ''\n    local primes_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length = 1\n    local primes_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string = ''\n    local primes_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length = 1\n    local\
    \ primes_string_length_string_length_string_length_index = 1\n    local primes_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 1\n    local primes_string_length_string_length_string_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 1\n    local primes_string_length_string_", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local primes = {}\n    local prime_words = {}\n\
    \    local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local i = 0\n    local j = 0\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime", "    local primes =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i, i+j)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    return table.concat(primes, \" \")\nend", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result\nend", "    local prime_words = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #prime_words\
    \ do\n            if sentence[i] == prime_words[j] then\n                prime\
    \ = false\n            end\n        end\n        if prime then\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_index = 1\n    local prime_words_index2 = 0\n    local prime_words_index3\
    \ = 0\n    local prime_words_index4 = 0\n    local prime_words_index5 = 0\n  \
    \  local prime_words_index6 = 0\n    local prime_words_index7 = 0\n    local prime_words_index8\
    \ = 0\n    local prime_words_index9 = 0\n    local prime_words_index10 = 0\n \
    \   local prime_words_index11 = 0\n    local prime_words_index12 = 0\n    local\
    \ prime_words_index13 = 0\n    local prime_words_index14 = 0\n    local prime_words_index15\
    \ = 0\n    local prime_words_index16 = 0\n    local prime_words_index17 = 0\n\
    \    local prime_words_index18 = 0\n    local prime_words_index19 = 0\n    local\
    \ prime_words_index20 = 0\n    local prime_words_index21 = 0\n    local prime_words_index22\
    \ = 0\n    local prime_words_index23 = 0\n    local prime_words_index24 = 0\n\
    \    local prime_words_index25 = 0\n    local prime_words_index26 = 0\n    local\
    \ prime_words_index27 = 0\n    local prime_words_index28 = 0\n    local prime_words_index29\
    \ = 0\n    local prime_words_index30 = 0\n    local prime_words_index31 = 0\n\
    \    local prime_words_index32 = 0\n    local prime_words_index33 = 0\n    local\
    \ prime_words_index34 = 0\n    local prime_words_index35 = 0\n    local prime_words_index36\
    \ = 0\n    local prime_words_index37 = 0\n    local prime_words_index38 = 0\n\
    \    local prime_words_index39 = 0\n    local prime_words_index40 = 0\n    local\
    \ prime_words_index41 = 0\n    local prime_words_index42 = 0\n    local prime_words_index43\
    \ = 0\n    local prime_words_index44 = 0\n    local prime_words_index45 = 0\n\
    \    local prime_words_index46 = 0\n    local prime_words_index47 = 0\n    local\
    \ prime_words_index48 = 0\n    local prime_words_index49 = 0\n    local prime_words_index50\
    \ = 0\n    local prime_words_index51 = 0\n    local prime_words_index52 = 0\n\
    \    local prime_words_index53 = 0\n", "    local prime_numbers = {}\n    local\
    \ prime_numbers_count = 0\n    local prime_numbers_index = 1\n    local prime_numbers_sum\
    \ = 0\n    local prime_numbers_sum_index = 1\n    local prime_numbers_sum_index2\
    \ = 0\n    local prime_numbers_sum_index3 = 0\n    local prime_numbers_sum_index4\
    \ = 0\n    local prime_numbers_sum_index5 = 0\n    local prime_numbers_sum_index6\
    \ = 0\n    local prime_numbers_sum_index7 = 0\n    local prime_numbers_sum_index8\
    \ = 0\n    local prime_numbers_sum_index9 = 0\n    local prime_numbers_sum_index10\
    \ = 0\n    local prime_numbers_sum_index11 = 0\n    local prime_numbers_sum_index12\
    \ = 0\n    local prime_numbers_sum_index13 = 0\n    local prime_numbers_sum_index14\
    \ = 0\n    local prime_numbers_sum_index15 = 0\n    local prime_numbers_sum_index16\
    \ = 0\n    local prime_numbers_sum_index17 = 0\n    local prime_numbers_sum_index18\
    \ = 0\n    local prime_numbers_sum_index19 = 0\n    local prime_numbers_sum_index20\
    \ = 0\n    local prime_numbers_sum_index21 = 0\n    local prime_numbers_sum_index22\
    \ = 0\n    local prime_numbers_sum_index23 = 0\n    local prime_numbers_sum_index24\
    \ = 0\n    local prime_numbers_sum_index25 = 0\n    local prime_numbers_sum_index26\
    \ = 0\n    local prime_numbers_sum_index27 = 0\n    local prime_numbers_sum_index28\
    \ = 0\n    local prime_numbers_sum_index29 = 0\n    local prime_numbers_sum_index30\
    \ = 0\n    local prime_numbers_sum_index31 = 0\n    local prime_numbers_sum_index32\
    \ = 0\n    local prime_numbers_sum_index33 = 0\n    local prime_numbers_sum_index34\
    \ = 0\n    local prime_numbers_sum_index35 = 0\n    local prime_numbers_sum_index36\
    \ = 0\n    local prime_numbers_sum_index37 = 0\n    local prime_numbers_sum_index38\
    \ = 0\n    local prime_numbers_sum_index39 = 0\n    local prime_numbers_sum_index40\
    \ = 0\n    local prime_numbers_sum_index41 = 0\n    local prime_numbers_sum_index42\
    \ = 0\n    local prime_numbers_sum_index43 = 0\n    local prime_numbers_sum",
  "    local result = {}\n    for word in string.gmatch(sentence, \"([^ ]+)\")\n \
    \   do\n        local prime = true\n        for i = 2, #result do\n          \
    \  if string.len(result[i]) > string.len(word) then\n                prime = false\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ word)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    local prime_words = {}\n    local prime_words_len = {}\n  \
    \  local prime_words_order = {}\n    local prime_words_str = ''\n    local i =\
    \ 0\n    local j = 0\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = ''\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = ''\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = ''\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = {}\n    local prime", "    local prime_words\
    \ = {}\n    for i = 1, #sentence do\n        local prime_word = {}\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             prime_word[j] = sentence:sub(i, i + 1)\n            end\n      \
    \  end\n        table.insert(prime_words, table.concat(prime_word))\n    end\n\
    \    local result = {}\n    for i = 1, #prime_words do\n        local prime_word\
    \ = prime_words[i]\n        local prime_word_length = #prime_word\n        for\
    \ j = 1, #prime_words do\n            if prime_word == prime_words[j] then\n \
    \               prime_word_length = prime_word_length - 1\n            end\n \
    \       end\n        if prime_word_length ~= 0 then\n            table.insert(result,\
    \ prime_word)\n        end\n    end\n    return table.concat(result)\nend", " \
    \   local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n    local\
    \ prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    for i = 2, 100 do\n        local prime = true\n        for _, word\
    \ in ipairs(string.gmatch(sentence, \"%S+\")) do\n            if prime then\n\
    \                prime = prime and primes[i]\n            else\n             \
    \   prime = prime and primes[word]\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for _, word in ipairs(string.gmatch(sentence, \"%S+\")) do\n     \
    \   table.insert(result, word)\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test your implementation", "    local prime_words = {}\n\
    \    for i = 2, #sentence do\n        local prime_word = {}\n        for j = 2,\
    \ #prime_words do\n            if #prime_word == 0 then\n                prime_word\
    \ = {}\n            end\n            if sentence[i] == prime_words[j] then\n \
    \               prime_word = {}\n            end\n        end\n        if #prime_word\
    \ == 0 then\n            table.insert(prime_words, sentence[i])\n        end\n\
    \    end\n    return table.concat(prime_words, \" \")\nend\n</cell>\n<text>\n\
    Let's see how it works:", "  local primes = {}\n  for i = 2, 100 do\n    local\
    \ prime = true\n    for _, word in ipairs(split(sentence)) do\n      if i % word\
    \ == 0 then\n        prime = false\n        break\n      end\n    end\n    if\
    \ prime then\n      table.insert(primes, i)\n    end\n  end\n  local result =\
    \ {}\n  for _, word in ipairs(split(sentence)) do\n    local prime = false\n \
    \   for _, prime in ipairs(primes) do\n      if prime == true then\n        table.insert(result,\
    \ word)\n        break\n      end\n    end\n  end\n  return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local prime_numbers\
    \ = {}\n    for i = 2, 100 do\n        local prime = true\n        for j = 1,\
    \ i do\n            if i % j == 0 then\n                prime = false\n      \
    \          break\n            end\n        end\n        if prime then\n      \
    \      table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #sentence do\n        local word = sentence:sub(i, i)\n\
    \        local prime_number = prime_numbers[#prime_numbers]\n        if prime_number\
    \ == 1 then\n            result = result .. word\n        else\n            local\
    \ prime_number_str = string.format(\"%#d\", prime_number)\n            local prime_number_str_length\
    \ = #prime_number_str\n            local prime_number_str_length = prime_number_str_length\
    \ + 2\n            local prime_number_str_length = prime_number_str_length + 2\n\
    \            local prime_number_str_length = prime_number_str_length + 2\n   \
    \         local prime_number_str_length = prime_number_str_length + 2\n      \
    \      local prime_number_str_length = prime_number_str_length + 2\n         \
    \   local prime_number_str_length = prime_number_str_length + 2\n            local\
    \ prime_number_str_length = prime_number_str_length + 2\n            local prime_number_str_length\
    \ = prime_number_str_length + 2\n            local prime_number_str_length = prime_number_str_length\
    \ + 2\n            local prime_number_str_length = prime_number_str_length + 2\n\
    \            local prime_number_str_length = prime_number_str_length + 2\n   \
    \         local prime_number_str_length = prime_number_str_length + 2\n      \
    \      local prime_number_str_length = prime_number_str_length + 2\n         \
    \   local prime_number_str_length = prime_number_str_length + 2\n            local\
    \ prime_number_str_length = prime_number_str_length + 2\n            local prime_number_str_length\
    \ = prime_number_str_length + 2\n            local prime_number_str_length = prime_number_str_length\
    \ + 2\n            local prime_number_str_length = prime_number_str_length + 2\n\
    \            local prime_number_str_length = prime_number_str_length + 2\n   \
    \         local prime_number_str_length = prime_number_str_length + 2\n      \
    \      local prime_number_str_length = prime_number_str_length + 2\n         \
    \   local prime_number_str_length = prime_number_str_length + 2\n            local\
    \ prime_number_str_length = prime_number_str_length + 2\n            local prime_number_str_length\
    \ = prime_number_str_length + 2\n            local prime_number_str_length = prime_number_str_length\
    \ + 2", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local prime_numbers = {}\n   \
    \ for i = 2, #sentence do\n        local prime = true\n        for j = 2, #prime_numbers\
    \ do\n            if i % prime_numbers[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 2, #prime_numbers do\n        if #result > #sentence then\n\
    \            break\n        end\n        local word = sentence:sub(1, prime_numbers[i])\n\
    \        local new_word = word:sub(1, #word)\n        if new_word ~= \"\" then\n\
    \            result = result .. new_word\n        end\n    end\n    return result\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 2, #primes do\n        local word\
    \ = sentence:sub(1, primes[i]:len() - 1)\n        local new_word = word\n    \
    \    for j = 1, #primes do\n            if primes[j] == i then\n             \
    \   new_word = new_word .. \" \" .. word\n            end\n        end\n     \
    \   result = result .. new_word\n    end\n    return result\nend", "    local\
    \ prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_string = ''\n    local prime_words_index = 1\n \
    \   local prime_words_len_index = 1\n    local prime_words_string_index = 1\n\
    \    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1\n    local prime_words_len_string_index = 1\n    local prime_words_string_index\
    \ = 1", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local words = sentence:gsub(' ', ''):gsub('[^A-Za-z]+',\
    \ '')\n    for i = 1, #words do\n        local prime = true\n        for j = 1,\
    \ #primes do\n            if words[i] == primes[j] then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, words[i])\n            table.insert(prime_words,\
    \ words[i])\n            table.insert(prime_words_len, 1)\n        else\n    \
    \        local len = 1\n            for j = 1, #prime_words do\n             \
    \   if words[i] == prime_words[j] then\n                    len = len + 1\n  \
    \              end\n            end\n            if len > 1 then\n           \
    \     local new_prime_words = {}\n                for j = 1, #prime_words do\n\
    \                    new_prime_words[j] = prime_words[j]\n                end\n\
    \                table.insert(prime_words, new_prime_words)\n                table.insert(prime_words_len,\
    \ len)\n            end\n        end\n    end\n    return table.concat(prime_words,\
    \ ' ')\nend\n</cell>\n<text>\nLet's test our implementation:", "    local primes\
    \ = {}\n    local primes_count = 0\n    for i = 1, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if sentence:len() >\
    \ i and sentence:len() % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence:len() / i)\n            primes_count\
    \ = primes_count+1\n        end\n    end\n    local result = \"\"\n    for i =\
    \ 1, #primes do\n        result = result .. sentence:sub(1, primes[i]) .. \" \"\
    \n    end\n    result = result .. sentence:sub((#sentence))\n    return result:sub(1,\
    \ #result)\nend", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\")\n    do\n        local prime = true\n        for i = 2, #result\n\
    \        do\n            if string.len(result[i]) > string.len(w) then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(result, w)\n        end\n   \
    \ end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:tostring()))\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, 100 do\n        local prime = true\n\
    \        for _, word in ipairs(split(sentence)) do\n            if i ~= tonumber(word)\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for _, word in ipairs(split(sentence))\
    \ do\n        local prime = nil\n        for i = #primes, 1, -1 do\n         \
    \   if tonumber(word) == primes[i] then\n                prime = i\n         \
    \       break\n            end\n        end\n        if prime ~= nil then\n  \
    \          table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n\
    \    return table.concat(result)\nend", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local prime_numbers = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #prime_numbers do\n          \
    \  if i % prime_numbers[j] == 0 then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(prime_numbers, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #prime_numbers do\n        local word = sentence:sub(1,\
    \ prime_numbers[i])\n        local new_word = word:gsub(\"%a+\", \"\")\n     \
    \   result = result .. new_word\n    end\n    return result\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence[i] == primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend", "    local\
    \ prime_numbers = {}\n    for i = 2, 100 do\n        local prime = true\n    \
    \    for _, letter in ipairs(sentence:gsub('%w+', '%s*')):gmatch('%s*') do\n \
    \           if prime then\n                prime = prime and prime_numbers[letter]\
    \ == nil\n            else\n                prime = prime and prime_numbers[letter]\
    \ ~= nil\n            end\n        end\n        if prime then\n            table.insert(prime_numbers,\
    \ i)\n        end\n    end\n    local result = {}\n    for _, letter in ipairs(sentence:gsub('%w+',\
    \ '%s*')):gmatch('%s*') do\n        local prime_number = prime_numbers[letter]\n\
    \        if prime_number ~= nil then\n            table.insert(result, letter)\n\
    \        end\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's see how it works:", "    local prime_words = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #prime_words do\n       \
    \     if sentence[i] == prime_words[j] then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(prime_words, sentence[i])\n        end\n    end\n   \
    \ return table.concat(prime_words, \" \")\nend\n</cell>\n<text>\nLet's see how\
    \ it works:", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local prime_numbers = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #prime_numbers\
    \ do\n            if i % prime_numbers[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #prime_numbers do\n        local prime_number = prime_numbers[i]\n\
    \        for j = 1, #sentence do\n            if sentence:len() >= prime_number\
    \ then\n                table.insert(result, sentence:sub(1, prime_number))\n\
    \                sentence = sentence:sub((prime_number + 1))\n               \
    \ break\n            end\n        end\n    end\n    return table.concat(result)\n\
    end", "  local primes = {}\n  local primes_count = 0\n  local primes_index = 1\n\
    \  local primes_length = #primes\n  local primes_string = ''\n  local primes_string_length\
    \ = #primes_string\n  local primes_index = 1\n  local primes_length = #primes\n\
    \  local primes_string = ''\n  local primes_string_length = #primes_string\n \
    \ local primes_index = 1\n  local primes_length = #primes\n  local primes_string\
    \ = ''\n  local primes_string_length = #primes_string\n  local primes_index =\
    \ 1\n  local primes_length = #primes\n  local primes_string = ''\n  local primes_string_length\
    \ = #primes_string\n  local primes_index = 1\n  local primes_length = #primes\n\
    \  local primes_string = ''\n  local primes_string_length = #primes_string\n \
    \ local primes_index = 1\n  local primes_length = #primes\n  local primes_string\
    \ = ''\n  local primes_string_length = #primes_string\n  local primes_index =\
    \ 1\n  local primes_length = #primes\n  local primes_string = ''\n  local primes_string_length\
    \ = #primes_string\n  local primes_index = 1\n  local primes_length = #primes\n\
    \  local primes_string = ''\n  local primes_string_length = #primes_string\n \
    \ local primes_index = 1\n  local primes_length = #primes\n  local primes_string\
    \ = ''\n  local primes_string_length = #primes_string\n  local primes_index =\
    \ 1\n  local primes_length = #primes\n  local primes_string = ''\n  local primes_string_length\
    \ = #primes_string\n  local primes_index = 1\n  local primes_length = #primes\n\
    \  local primes_string = ''\n  local primes_string_length = #primes_string\n \
    \ local primes_index = 1\n  local primes_length = #primes\n  local primes_string\
    \ = ''\n  local primes_string_length = #primes_string\n  local primes_index =\
    \ 1\n  local primes_length = #primes\n  local primes_string = ''\n  local primes_string_length\
    \ = #primes_string\n  local primes_index = 1\n  local primes_length = #primes\n\
    \  local primes_string = ''\n  local primes_string_length = #primes_string\n \
    \ local primes_index = 1\n  local primes_length = #primes\n  local primes_string\
    \ = ''\n  local ", "    local primes = {}\n    for i = 2, #sentence do\n     \
    \   local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i + j) ~= sentence:sub(i - j, i) then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        table.insert(result, sentence:sub(primes[i],\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local prime_numbers = {}\n    local prime_numbers_string\
    \ = ''\n    local prime_numbers_string_length = 0\n    local prime_numbers_string_length_string\
    \ = ''\n    local prime_numbers_string_length_string_length = 0\n    local prime_numbers_string_length_string_length_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_string = ''\n\
    \    local prime_numbers_string_length_string_length_prime_prime = 0\n    local\
    \ prime_numbers_string_length_string_length_prime_prime_string = ''\n    local\
    \ prime_numbers_string_length_string_length_prime_prime_prime = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_string\
    \ = ''\n    local prime_numbers_string_length_string_length_prime_prime_prime_prime_prime_prime\
    \ = 0", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local prime_words = {}\n\
    \    for i = 2, #sentence do\n        local prime_word = {}\n        for j = 2,\
    \ #prime_words do\n            if sentence:sub(i, i + j) == prime_words[j] then\n\
    \                prime_word = {}\n                break\n            end\n   \
    \     end\n        if prime_word ~= nil then\n            prime_words[#prime_words\
    \ + 1] = sentence:sub(i, i + #prime_word)\n        end\n    end\n    return table.concat(prime_words)\n\
    end", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        local prime = primes[i]\n        for\
    \ j = 1, #sentence do\n            if sentence:sub(i, i + prime) == sentence:sub(j,\
    \ j + prime) then\n                table.insert(result, sentence:sub(i, i + prime))\n\
    \            end\n        end\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n   \
    \ for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    local\
    \ primes_count = 0\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence[i] == primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            primes_count = primes_count+1\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes_count do\n        table.insert(result, primes[i])\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test your\
    \ implementation. Make sure it returns the correct results for these inputs:",
  "  local result = {}\n  local primes = {}\n  local prime_counter = 0\n  local prime_words\
    \ = {}\n  local prime_words_counter = 0\n  local prime_words_length = 1\n  local\
    \ prime_words_index = 1\n  local prime_words_index2 = 0\n  local prime_words_index3\
    \ = 0\n  local prime_words_index4 = 0\n  local prime_words_index5 = 0\n  local\
    \ prime_words_index6 = 0\n  local prime_words_index7 = 0\n  local prime_words_index8\
    \ = 0\n  local prime_words_index9 = 0\n  local prime_words_index10 = 0\n  local\
    \ prime_words_index11 = 0\n  local prime_words_index12 = 0\n  local prime_words_index13\
    \ = 0\n  local prime_words_index14 = 0\n  local prime_words_index15 = 0\n  local\
    \ prime_words_index16 = 0\n  local prime_words_index17 = 0\n  local prime_words_index18\
    \ = 0\n  local prime_words_index19 = 0\n  local prime_words_index20 = 0\n  local\
    \ prime_words_index21 = 0\n  local prime_words_index22 = 0\n  local prime_words_index23\
    \ = 0\n  local prime_words_index24 = 0\n  local prime_words_index25 = 0\n  local\
    \ prime_words_index26 = 0\n  local prime_words_index27 = 0\n  local prime_words_index28\
    \ = 0\n  local prime_words_index29 = 0\n  local prime_words_index30 = 0\n  local\
    \ prime_words_index31 = 0\n  local prime_words_index32 = 0\n  local prime_words_index33\
    \ = 0\n  local prime_words_index34 = 0\n  local prime_words_index35 = 0\n  local\
    \ prime_words_index36 = 0\n  local prime_words_index37 = 0\n  local prime_words_index38\
    \ = 0\n  local prime_words_index39 = 0\n  local prime_words_index40 = 0\n  local\
    \ prime_words_index41 = 0\n  local prime_words_index42 = 0\n  local prime_words_index43\
    \ = 0\n  local prime_words_index44 = 0\n  local prime_words_index45 = 0\n  local\
    \ prime_words_index46 = 0\n  local prime_words_index47 = 0\n  local prime_words_index48\
    \ = 0\n  local prime_words_index49 = 0\n  local prime_words_index50 = 0\n  local\
    \ prime_words_index51 = 0\n  local prime_words_index52 = 0\n  local prime_words_index53",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence[i] == primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1,\
    \ primes[i]:byte())\n        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence[i] == primes[j] then\n            \
    \    prime = false\n                break\n            end\n        end\n    \
    \    if prime then\n            table.insert(primes, sentence[i])\n          \
    \  table.insert(prime_words, sentence[i])\n            table.insert(prime_words_len,\
    \ 1)\n        else\n            local prime_words_len = prime_words_len + 1\n\
    \            for j = #prime_words, prime_words_len do\n                prime_words[j]\
    \ = prime_words[j] .. ' ' .. sentence[i]\n            end\n        end\n    end\n\
    \    return table.concat(prime_words)\nend\n</cell>\n<text>\nLet's see how it\
    \ works:", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:len() > i and sentence:len() % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, sentence:len()\
    \ / i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i] * i))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's see how it works:", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1,\
    \ primes[i])\n        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local prime_numbers\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #prime_numbers do\n            if i % prime_numbers[j] == 0 then\n    \
    \            prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(prime_numbers, i)\n        end\n\
    \    end\n    local new_sentence = sentence\n    for i = 2, #prime_numbers do\n\
    \        new_sentence = new_sentence .. ' ' .. sentence:sub(1, prime_numbers[i])\n\
    \    end\n    return new_sentence\nend", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i ~= primes[j] then\n                prime = false\n           \
    \     break\n            end\n        end\n        if prime then\n           \
    \ table.insert(primes, i)\n        end\n    end\n    local result = {}\n    for\
    \ i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local prime_numbers = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #prime_numbers do\n          \
    \  if i % prime_numbers[j] == 0 then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(prime_numbers, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #prime_numbers do\n        table.insert(result, sentence:sub(1,\
    \ prime_numbers[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ 100 do\n        local prime = true\n        for j = 1, i do\n            if\
    \ i % j == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local words = \"\"\n    for i = 1, #sentence do\n\
    \        local word = sentence:sub(i, i)\n        for _, prime in ipairs(primes)\
    \ do\n            if #word == prime then\n                words = word..\" \"\n\
    \                break\n            end\n        end\n    end\n    return words\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        result = result .. \" \" .. word\n   \
    \ end\n    return result\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i\
    \ - j, i) then\n                prime = false\n                break\n       \
    \     end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, ' ')\nend", "    local\
    \ primes = {}\n    local prime_words = {}\n    local prime_words_len = {}\n  \
    \  local prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = 0\n    local prime_words_order = {}\n    local prime_words_str = ''\n    local\
    \ prime_words_len = 0\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = 0\n    local prime_words_order = {}\n    local\
    \ prime_words_str = ''\n    local prime_words_len = 0\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = 0\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = 0\n    local prime_words_order = {}\n    local prime_words_str = ''\n    local\
    \ prime_words_len = 0\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = 0\n    local prime_words_order = {}\n    local\
    \ prime_words_str = ''\n    local prime_words_len = 0\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = 0\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = 0\n    local prime_words_order = {}\n    local prime_words_str = ''\n    local\
    \ prime_words_len = 0\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = 0\n    local prime_words_order = {}\n    local\
    \ prime_words_str = ''\n    local prime_words_len = 0\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = 0\n    local\
    \ prime_words_order = {}\n    local prime_words_str = ''\n    local prime_words_len\
    \ = 0\n    local prime_words_order = {}\n    local prime_words_str = ''\n    local\
    \ prime_words_len = 0\n    local prime_words_order = {}\n    local prime_words_str\
    \ = ''\n    local prime_words_len = 0\n    local prime_words_order = {}\n    local\
    \ prime_words_str = ''\n    local prime_words_len = 0\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_len = 0\n    local\
    \ prime_words_order = {}\n    local prime_", "    local primes = {}\n    local\
    \ prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\")\n    do\n        local n = tonumber(w)\n        if n ~= nil then\n\
    \            if math.fmod(n, 2) == 0 then\n                table.insert(result,\
    \ w)\n            end\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i]:byte())\n        table.insert(result, word)\n  \
    \  end\n    return table.concat(result)\nend", "    local prime_numbers = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #prime_numbers\
    \ do\n            if i % prime_numbers[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #prime_numbers do\n        local prime_words = {}\n   \
    \     for j = 2, #result do\n            if prime_numbers[i] == result[j] then\n\
    \                table.insert(prime_words, j)\n            end\n        end\n\
    \        for j = 2, #prime_words do\n            table.insert(result, prime_numbers[i])\n\
    \        end\n    end\n    return table.concat(result)\nend", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 2, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]:tostring()))\n    end\n    return table.concat(result)\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    local primes_count\
    \ = 0\n    local primes_index = 0\n    local primes_length = #primes\n    local\
    \ primes_string = ''\n    local primes_string_index = 0\n    local primes_string_length\
    \ = #primes_string\n    local primes_string_length_index = 0\n    local primes_string_length_string\
    \ = ''\n    local primes_string_length_string_length = 0\n    local primes_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string = ''\n    local primes_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_index = 0\n\
    \    local primes_string_length_string_length_string_length_string = ''\n    local\
    \ primes_string_length_string_length_string_length_string_length = 0\n    local\
    \ primes_string_length_string_length_string_length_string_length_index = 0\n \
    \   local primes_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n    local primes_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n    local primes_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n    local primes_string_length_string_length_string_length_string_", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1,\
    \ i+j) then\n                prime = false\n            end\n        end\n   \
    \     if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 2, #primes do\n        local word = sentence:sub(i,\
    \ i)\n        for j = 2, #primes do\n            if j == i then\n            \
    \    word = ''\n            end\n        end\n        table.insert(result, word)\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ prime_words = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i + j) ~= ' ' then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    for i = 2, #primes do\n        local prime_word = ''\n        for\
    \ j = primes[i], #sentence do\n            prime_word = prime_word .. sentence:sub(j,\
    \ j + 1)\n        end\n        table.insert(prime_words, prime_word)\n    end\n\
    \    return table.concat(prime_words)\nend\n</cell>\n<text>\nLet's test our function",
  "    local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_", "    local prime_numbers\
    \ = {}\n    for i = 2, 100 do\n        local prime = true\n        for _, letter\
    \ in ipairs(sentence:gsub('%w+', '%d')) do\n            if prime == false then\n\
    \                break\n            end\n            prime = prime and isprime(i)\n\
    \        end\n        if prime then\n            table.insert(prime_numbers, i)\n\
    \        end\n    end\n    local result = {}\n    for _, word in ipairs(sentence:gsub('%w+',\
    \ '%d')) do\n        if table.contains(prime_numbers, word:len()) then\n     \
    \       table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i + j)\
    \ ~= ' ' then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend", "    local result = {}\n    for word in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n\
    \            if result[i] ~= nil then\n                prime = prime and math.fmod(#result[i],\
    \ i) == 0 and result[i] ~= word\n            end\n        end\n        if prime\
    \ then\n            table.insert(result, word)\n        end\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i % primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        local word = sentence:sub(1, primes[i])\n        table.insert(result,\
    \ word)\n    end\n    return table.concat(result)\nend", "    local primes = {}\n\
    \    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = {}\n    local prime_words_str_len = {}\n \
    \   local prime_words_str_order = {}\n    local prime_words_str_str = {}\n   \
    \ local prime_words_str_str_len = {}\n    local prime_words_str_str_order = {}\n\
    \    local prime_words_str_str_str = {}\n    local prime_words_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_order = {}\n    local prime_words_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_order = {}\n    local prime_words_str_str_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_order = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_str_str = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_str = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_str_len = {}\n", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:sub(1)))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local prime_numbers = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #prime_numbers\
    \ do\n            if i % prime_numbers[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 2, #prime_numbers do\n        local word = sentence:sub(1,\
    \ prime_numbers[i])\n        local new_word = word:gsub(\"%a\", nil)\n       \
    \ if new_word ~= nil then\n            result = result .. new_word\n        end\n\
    \    end\n    return result\nend\n</cell>\n<text>\nLet's now see how to use this\
    \ function in an interactive Python shell:", "    local primes = {}\n    for i\
    \ = 2, #sentence do\n        local prime = true\n        for j = 2, #primes do\n\
    \            if i % primes[j] == 0 then\n                prime = false\n     \
    \           break\n            end\n        end\n        if prime then\n     \
    \       table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local prime_numbers = {}\n\
    \    local prime_numbers_index = {}\n    local prime_numbers_length = {}\n   \
    \ local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    ", "  local result = {}\n  local primes = {}\n  local prime_words =\
    \ {}\n  local prime_words_len = {}\n  for i = 1, #sentence do\n    local word\
    \ = sentence:sub(i, i)\n    local prime = true\n    for j = 1, #primes do\n  \
    \    if primes[j] == word then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      table.insert(primes, word)\n      table.insert(prime_words,\
    \ word)\n      table.insert(prime_words_len, 1)\n    else\n      local prime_words_len\
    \ = #prime_words\n      for j = 1, #prime_words do\n        if prime_words_len\
    \ > 1 then\n          prime_words_len = prime_words_len - 1\n        else\n  \
    \        table.insert(result, prime_words[j])\n          break\n        end\n\
    \      end\n    end\n  end\n  return table.concat(result)\nend", "    local result\
    \ = {}\n    for w in string.gmatch(sentence, \"([^ ]+)\") do\n        local prime\
    \ = true\n        for i = 2, #result do\n            if string.len(result[i])\
    \ > string.len(w) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if sentence:sub(i, i + j) ~= ' ' then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = \"\"\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        local new_word = word\n        for j =\
    \ 1, i do\n            new_word = new_word .. word:sub(1, 1)\n        end\n  \
    \      result = result .. new_word\n    end\n    return result\nend\n</cell>\n\
    <text>\nLet's see how it works:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence[i] == primes[j] then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n        end\n    end\n    return table.concat(primes, \" \")\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend", "    local primes = {}\n\
    \    local primes_count = 0\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            primes_count = primes_count + 1\n        end\n    end\n    local\
    \ result = {}\n    for i = 1, primes_count do\n        table.insert(result, sentence[i])\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's see how\
    \ it works:", "    local primes = {}\n    local prime_words = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_str = ''\n   \
    \ local i = 0\n    local len = #sentence\n    while i < len do\n        local\
    \ word = sentence:sub(i,i)\n        if primes[word] == nil then\n            primes[word]\
    \ = true\n            prime_words[#prime_words + 1] = word\n            prime_words_len[#prime_words_len\
    \ + 1] = 1\n            prime_words_order[#prime_words_order + 1] = word\n   \
    \     else\n            prime_words_len[#prime_words_len + 1] = prime_words_len[#prime_words_len\
    \ + 1] + 1\n        end\n        i = i + 1\n    end\n    local j = 0\n    local\
    \ k = 0\n    local prime_words_len2 = #prime_words\n    while j < prime_words_len2\
    \ do\n        if prime_words_len2[j] == 1 then\n            prime_words_str =\
    \ prime_words_str..' ' .. prime_words[j]\n            j = j + 1\n        else\n\
    \            local prime_words_len3 = prime_words_len[j + 1]\n            local\
    \ prime_words_len4 = prime_words_len[j + 2]\n            local prime_words_len5\
    \ = prime_words_len[j + 3]\n            local prime_words_len6 = prime_words_len[j\
    \ + 4]\n            local prime_words_len7 = prime_words_len[j + 5]\n        \
    \    local prime_words_len8 = prime_words_len[j + 6]\n            local prime_words_len9\
    \ = prime_words_len[j + 7]\n            local prime_words_len10 = prime_words_len[j\
    \ + 8]\n            local prime_words_len11 = prime_words_len[j + 9]\n       \
    \     local prime_words_len12 = prime_words_len[j + 10]\n            local prime_words_len13\
    \ = prime_words_len[j + 11]\n            local prime_words_len14 = prime_words_len[j\
    \ + 12]\n            local prime_words_len15 = prime_words_len[j + 13]\n     \
    \       local prime_words_len16 = prime_words_len[j + 14]\n            local prime_words_len17\
    \ = prime_words_len[j + 15]\n            local prime_words_len18 = prime_words_len[j\
    \ + 16]\n            local prime_words_len19 = prime_words_len[j + 17]\n     \
    \       local prime_words_len20 = prime_words_len[j + 18]\n            local prime_words_len2",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    local prime_words_str = {}\n    local\
    \ prime_words_str_len = {}\n    local prime_words_str_order = {}\n    local prime_words_str_str\
    \ = {}\n    local prime_words_str_str_len = {}\n    local prime_words_str_str_order\
    \ = {}\n    local prime_words_str_str_str = {}\n    local prime_words_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_order = {}\n    local prime_words_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_order = {}\n    local prime_words_str_str_str_str_str_str\
    \ = {}\n    local prime_words_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str = {}\n    local prime_words_str_str_str_str_str_str_str_str_len\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_order = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_str_order\
    \ = {}\n    local prime_words_str_str_str_str_str_str_str_str_str_str_str = {}\n\
    \    local prime_words_str_str_str_str_str_str_str_str_str_str_len = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_order = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_str = {}\n    local\
    \ prime_words_str_str_str_str_str_str_str_str_str_str_str_str_len = {}\n", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence[i] == primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if i % primes[j] == 0 then\n          \
    \      prime = false\n                break\n            end\n        end\n  \
    \      if prime then\n            table.insert(primes, i)\n        end\n    end\n\
    \    local result = {}\n    for i = 1, #primes do\n        local word = sentence:sub(1,\
    \ primes[i])\n        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, 100 do\n        local prime = true\n        for _, word in ipairs(string.gmatch(sentence,\
    \ \"([^ ]*)\")) do\n            prime = prime and primes[#primes + 1]\n      \
    \  end\n        if prime then\n            primes[#primes + 1] = i\n        end\n\
    \    end\n    local result = \"\"\n    for _, word in ipairs(string.gmatch(sentence,\
    \ \"([^ ]*)\")) do\n        result = result .. word\n    end\n    return string.gsub(result,\
    \ \" \", \"\")\nend\n</cell>\n<text>\nLet's test our implementation:", "    local\
    \ primes = {}\n    local prime_words = {}\n    local prime_words_len = {}\n  \
    \  local prime_words_order = {}\n    local prime_words_order_index = {}\n    local\
    \ prime_words_order_index2 = {}\n    local prime_words_order_index3 = {}\n   \
    \ local prime_words_order_index4 = {}\n    local prime_words_order_index5 = {}\n\
    \    local prime_words_order_index6 = {}\n    local prime_words_order_index7 =\
    \ {}\n    local prime_words_order_index8 = {}\n    local prime_words_order_index9\
    \ = {}\n    local prime_words_order_index10 = {}\n    local prime_words_order_index11\
    \ = {}\n    local prime_words_order_index12 = {}\n    local prime_words_order_index13\
    \ = {}\n    local prime_words_order_index14 = {}\n    local prime_words_order_index15\
    \ = {}\n    local prime_words_order_index16 = {}\n    local prime_words_order_index17\
    \ = {}\n    local prime_words_order_index18 = {}\n    local prime_words_order_index19\
    \ = {}\n    local prime_words_order_index20 = {}\n    local prime_words_order_index21\
    \ = {}\n    local prime_words_order_index22 = {}\n    local prime_words_order_index23\
    \ = {}\n    local prime_words_order_index24 = {}\n    local prime_words_order_index25\
    \ = {}\n    local prime_words_order_index26 = {}\n    local prime_words_order_index27\
    \ = {}\n    local prime_words_order_index28 = {}\n    local prime_words_order_index29\
    \ = {}\n    local prime_words_order_index30 = {}\n    local prime_words_order_index31\
    \ = {}\n    local prime_words_order_index32 = {}\n    local prime_words_order_index33\
    \ = {}\n    local prime_words_order_index34 = {}\n    local prime_words_order_index35\
    \ = {}\n    local prime_words_order_index36 = {}\n    local prime_words_order_index37\
    \ = {}\n    local prime_words_order_index38 = {}\n    local prime_words_order_index39\
    \ = {}\n    local prime_words_order_index40 = {}\n    local prime_words_order_index41\
    \ = {}\n    local prime_words_order_index42 = {}\n    local prime_words_order_index43\
    \ = {}\n    local prime_words_order_index44 = {}\n    local prime_words_order_index45\
    \ = {}\n    local prime_words_order_index46 = {}\n    local prime_words_order_index47\
    \ = {}\n    local prime_words_order_index48 = {}", "    local primes = {}\n  \
    \  local primes_count = 0\n    local primes_length = 1\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend", "    local primes = {}\n    local prime_words =\
    \ {}\n    for i = 2, #sentence do\n        local prime = true\n        for j =\
    \ 2, #primes do\n            if sentence[i] == primes[j] then\n              \
    \  prime = false\n                break\n            end\n        end\n      \
    \  if prime then\n            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, ' ')\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend",
  "    local primes = {}\n    local prime_words = {}\n    local prime_words_len =\
    \ {}\n    local prime_words_order = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if sentence[i] == primes[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, sentence[i])\n\
    \            table.insert(prime_words, sentence[i])\n            table.insert(prime_words_len,\
    \ 1)\n            table.insert(prime_words_order, i)\n        end\n    end\n \
    \   for i = 2, #primes do\n        for j = 2, #prime_words do\n            if\
    \ primes[i] == prime_words[j] then\n                prime_words_len[j] = prime_words_len[j]\
    \ + 1\n                if prime_words_len[j] == #prime_words then\n          \
    \          table.insert(prime_words_order, i)\n                    break\n   \
    \             end\n            end\n        end\n    end\n    return table.concat(prime_words_order,\
    \ ' ')\nend\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i + j) ~= ' ' then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend", "    local prime_words\
    \ = {}\n    for i = 2, #sentence do\n        local prime_word = {}\n        for\
    \ j = 2, #prime_words do\n            if sentence:sub(i, i + j) == prime_words[j]\
    \ then\n                table.insert(prime_word, sentence:sub(i, i + j))\n   \
    \             break\n            end\n        end\n        if #prime_word == 0\
    \ then\n            table.insert(prime_words, sentence:sub(i, i + 1))\n      \
    \  end\n    end\n    return table.concat(prime_words)\nend", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "  local prime_words = {}\n  for i = 2, #sentence\
    \ do\n    local prime = true\n    for j = 2, #prime_words do\n      if #prime_words[j]\
    \ == i then\n        prime = false\n        break\n      end\n    end\n    if\
    \ prime then\n      table.insert(prime_words, sentence[i])\n    end\n  end\n \
    \ return table.concat(prime_words)\nend", "    local primes = {}\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n            table.insert(prime_words,\
    \ sentence[i])\n            table.insert(prime_words_len, 1)\n            table.insert(prime_words_order,\
    \ i)\n        end\n    end\n    for i = 2, #primes do\n        for j = 2, #prime_words\
    \ do\n            if primes[i] == prime_words[j] then\n                prime_words_len[j]\
    \ = prime_words_len[j] + 1\n                if prime_words_len[j] == #prime_words\
    \ then\n                    table.insert(prime_words_order, i)\n             \
    \       break\n                end\n            end\n        end\n    end\n  \
    \  return table.concat(prime_words_order, ' ')\nend\n</cell>\n<text>\nLet's test\
    \ our implementation:", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence:sub(i,\
    \ i+j) ~= sentence:sub(i-1, i-1) then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        table.insert(result, sentence:sub(i, i+primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local prime_numbers = {}\n\
    \    local prime_numbers_index = {}\n    local prime_numbers_length = {}\n   \
    \ local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n\
    \    local prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local\
    \ prime_numbers_index = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index\
    \ = 1\n    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n\
    \    local prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local\
    \ prime_numbers_length = 1\n    local prime_numbers_index = 1\n    local prime_numbers_length\
    \ = 1\n    ", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    local primes_count = 0\n    local primes_index\
    \ = {}\n    local primes_index_count = 0\n    local primes_index_count = 0\n \
    \   local primes_index_count = 0\n    local primes_index_count = 0\n    local\
    \ primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_index_count = 0\n    local primes_index_count\
    \ = 0\n    local primes_index_count = 0\n    local primes_index_count = 0\n  \
    \  local primes_index_count = 0\n    local primes_", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend\n</cell>\n<text>\nLet's test our implementation:",
  "  local prime_words = {}\n  local prime_words_len = {}\n  local prime_words_index\
    \ = {}\n  local prime_words_len_index = {}\n  local prime_words_index2 = 0\n \
    \ local prime_words_len_index2 = 0\n  local prime_words_index3 = 0\n  local prime_words_len_index3\
    \ = 0\n  local prime_words_index4 = 0\n  local prime_words_len_index4 = 0\n  local\
    \ prime_words_index5 = 0\n  local prime_words_len_index5 = 0\n  local prime_words_index6\
    \ = 0\n  local prime_words_len_index6 = 0\n  local prime_words_index7 = 0\n  local\
    \ prime_words_len_index7 = 0\n  local prime_words_index8 = 0\n  local prime_words_len_index8\
    \ = 0\n  local prime_words_index9 = 0\n  local prime_words_len_index9 = 0\n  local\
    \ prime_words_index10 = 0\n  local prime_words_len_index10 = 0\n  local prime_words_index11\
    \ = 0\n  local prime_words_len_index11 = 0\n  local prime_words_index12 = 0\n\
    \  local prime_words_len_index12 = 0\n  local prime_words_index13 = 0\n  local\
    \ prime_words_len_index13 = 0\n  local prime_words_index14 = 0\n  local prime_words_len_index14\
    \ = 0\n  local prime_words_index15 = 0\n  local prime_words_len_index15 = 0\n\
    \  local prime_words_index16 = 0\n  local prime_words_len_index16 = 0\n  local\
    \ prime_words_index17 = 0\n  local prime_words_len_index17 = 0\n  local prime_words_index18\
    \ = 0\n  local prime_words_len_index18 = 0\n  local prime_words_index19 = 0\n\
    \  local prime_words_len_index19 = 0\n  local prime_words_index20 = 0\n  local\
    \ prime_words_len_index20 = 0\n  local prime_words_index21 = 0\n  local prime_words_len_index21\
    \ = 0\n  local prime_words_index22 = 0\n  local prime_words_len_index22 = 0\n\
    \  local prime_words_index23 = 0\n  local prime_words_len_index23 = 0\n  local\
    \ prime_words_index24 = 0\n  local prime_words_len_index24 = 0\n  local prime_words_index25\
    \ = 0\n  local prime_words_len_index25 = 0\n  local prime_words_index26 = 0\n\
    \  local prime_words_len_index26 = 0\n  local prime_words_", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if i % primes[j] == 0 then\n                prime\
    \ = false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = \"\"\n    for i = 1, #primes do\n        result = result .. \" \" .. sentence:sub(1,\
    \ primes[i])\n    end\n    return result:sub(2)\nend\n</cell>\n<text>\nLet's see\
    \ how it works:", "    local prime_words = {}\n    for i = 2, #sentence do\n \
    \       local prime = true\n        for j = 2, #prime_words do\n            if\
    \ sentence[i] == prime_words[j] then\n                prime = false\n        \
    \    end\n        end\n        if prime then\n            table.insert(prime_words,\
    \ sentence[i])\n        end\n    end\n    return table.concat(prime_words, \"\
    \ \")\nend", "    local primes = {}\n    for i = 2, 100 do\n        local prime\
    \ = true\n        for _, word in ipairs(split(sentence)) do\n            if i\
    \ ~= tonumber(word) then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for _, word in ipairs(split(sentence))\
    \ do\n        local prime = nil\n        for i = #primes, 1, -1 do\n         \
    \   if tonumber(word) == primes[i] then\n                prime = i\n         \
    \       break\n            end\n        end\n        if prime ~= nil then\n  \
    \          table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i + j)\
    \ ~= sentence:sub(i - j, i) then\n                prime = false\n            \
    \    break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, \" \")\nend", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:sub(1)))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 2, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if sentence:sub(i, i) ==\
    \ primes[j]:sub(1, 1) then\n                prime = false\n            end\n \
    \       end\n        if prime then\n            table.insert(primes, sentence:sub(i,\
    \ i))\n        end\n    end\n    return table.concat(primes, \" \")\nend", " \
    \   local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        local prime =\
    \ primes[i]\n        for j = 1, #sentence do\n            if sentence:sub(i, i\
    \ + 1) ~= ' ' then\n                local count = 0\n                for k = 1,\
    \ #primes do\n                    if primes[k] == prime then\n               \
    \         count = count + 1\n                    end\n                end\n  \
    \              if count == prime then\n                    table.insert(result,\
    \ sentence:sub(i, i + 1))\n                end\n            end\n        end\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    local\
    \ primes_count = 0\n    local primes_length = 0\n    local primes_string = ''\n\
    \    for i = 1, #sentence do\n        local letter = sentence:sub(i,i)\n     \
    \   if letter:sub(1,1) == '#' then\n            primes[primes_count] = letter\n\
    \            primes_count = primes_count + 1\n        end\n    end\n    for i\
    \ = 1, primes_count do\n        local prime = primes[i]\n        local prime_length\
    \ = #prime\n        if primes_length == prime_length then\n            primes_string\
    \ = primes_string .. ' ' .. prime\n        else\n            primes_length = primes_length\
    \ + 1\n        end\n    end\n    return primes_string\nend\n</cell>\n<text>\n\
    Let's test our function", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend", "    local prime_numbers = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #prime_numbers do\n     \
    \       if i % prime_numbers[j] == 0 then\n                prime = false\n   \
    \             break\n            end\n        end\n        if prime then\n   \
    \         table.insert(prime_numbers, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #prime_numbers do\n        local prime_number = prime_numbers[i]\n\
    \        for j = 1, #sentence do\n            if sentence:sub(i, i + prime_number)\
    \ == sentence:sub(j, j + prime_number) then\n                table.insert(result,\
    \ sentence:sub(i, i + prime_number))\n            end\n        end\n    end\n\
    \    return table.concat(result)\nend", "    local result = {}\n    for w in string.gmatch(sentence,\
    \ \"([^ ]+)\") do\n        local prime = true\n        for i = 2, #result do\n\
    \            if string.len(result[i]) > string.len(w) then\n                prime\
    \ = false\n            end\n        end\n        if prime then\n            table.insert(result,\
    \ w)\n        end\n    end\n    return table.concat(result)\nend", "    local\
    \ primes = {}\n    for i = 2, #sentence do\n        local prime = true\n     \
    \   for j = 2, #primes do\n            if sentence:sub(i, i + j) ~= sentence:sub(i\
    \ - j, i - 1) then\n                prime = false\n                break\n   \
    \         end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, \" \")\nend", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:sub(1)))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = {}\n    local prime_words_index = 1\n    local prime_words_index2\
    \ = 0\n    local prime_words_index3 = 0\n    local prime_words_index4 = 0\n  \
    \  local prime_words_index5 = 0\n    local prime_words_index6 = 0\n    local prime_words_index7\
    \ = 0\n    local prime_words_index8 = 0\n    local prime_words_index9 = 0\n  \
    \  local prime_words_index10 = 0\n    local prime_words_index11 = 0\n    local\
    \ prime_words_index12 = 0\n    local prime_words_index13 = 0\n    local prime_words_index14\
    \ = 0\n    local prime_words_index15 = 0\n    local prime_words_index16 = 0\n\
    \    local prime_words_index17 = 0\n    local prime_words_index18 = 0\n    local\
    \ prime_words_index19 = 0\n    local prime_words_index20 = 0\n    local prime_words_index21\
    \ = 0\n    local prime_words_index22 = 0\n    local prime_words_index23 = 0\n\
    \    local prime_words_index24 = 0\n    local prime_words_index25 = 0\n    local\
    \ prime_words_index26 = 0\n    local prime_words_index27 = 0\n    local prime_words_index28\
    \ = 0\n    local prime_words_index29 = 0\n    local prime_words_index30 = 0\n\
    \    local prime_words_index31 = 0\n    local prime_words_index32 = 0\n    local\
    \ prime_words_index33 = 0\n    local prime_words_index34 = 0\n    local prime_words_index35\
    \ = 0\n    local prime_words_index36 = 0\n    local prime_words_index37 = 0\n\
    \    local prime_words_index38 = 0\n    local prime_words_index39 = 0\n    local\
    \ prime_words_index40 = 0\n    local prime_words_index41 = 0\n    local prime_words_index42\
    \ = 0\n    local prime_words_index43 = 0\n    local prime_words_index44 = 0\n\
    \    local prime_words_index45 = 0\n    local prime_words_index46 = 0\n    local\
    \ prime_words_index47 = 0\n    local prime_words_index48 = 0\n    local prime_words_index49\
    \ = 0\n    local prime_words_index50 = 0\n    local prime_words_index51 = 0\n\
    \    local prime_words_index52 = 0\n    local prime_words_index53 = 0\n    local\
    \ prime_words_", "  local primes = {}\n  for i = 2, #sentence do\n    local prime\
    \ = true\n    for j = 2, #primes do\n      if i % primes[j] == 0 then\n      \
    \  prime = false\n        break\n      end\n    end\n    if prime then\n     \
    \ table.insert(primes, i)\n    end\n  end\n  local result = {}\n  for i = 2, #primes\
    \ do\n    table.insert(result, sentence:sub(1, primes[i]:tostring()))\n  end\n\
    \  return table.concat(result)\nend", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i + j) ~= ' ' then\n                prime = false\n        \
    \        break\n            end\n        end\n        if prime then\n        \
    \    table.insert(primes, i)\n        end\n    end\n    local result = {}\n  \
    \  for i = 2, #primes do\n        table.insert(result, sentence:sub(1, primes[i]:sub(1)))\n\
    \    end\n    return table.concat(result)\nend\n</cell>\n<text>\nLet's test our\
    \ implementation:", "    local primes = {}\n    for i = 2, #sentence do\n    \
    \    local prime = true\n        for j = 2, #primes do\n            if i % primes[j]\
    \ == 0 then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n  \
    \      result = result .. \" \" .. sentence:sub(1, primes[i])\n    end\n    return\
    \ result\nend", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i ~= primes[j] then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n\
    \    return table.concat(result)\nend", "    local prime_words = {}\n    local\
    \ prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_string\
    \ = ''\n    for i = 1, #sentence do\n        local word = sentence:sub(i,i)\n\
    \        if prime_words[word] ~= nil then\n            prime_words[word] = prime_words[word]\
    \ + 1\n        else\n            prime_words[word] = 1\n        end\n    end\n\
    \    for i = 1, #prime_words do\n        if prime_words[i] ~= 1 then\n       \
    \     prime_words_len[i] = prime_words[i]\n            prime_words_order[i] =\
    \ i\n        end\n    end\n    for i = 1, #prime_words do\n        if prime_words_len[i]\
    \ ~= #sentence then\n            prime_words_len[i] = #sentence\n            prime_words_order[i]\
    \ = #prime_words_order\n        end\n    end\n    for i = 1, #prime_words_len\
    \ do\n        if prime_words_len[i] ~= prime_words_order[i] then\n           \
    \ prime_words_string = prime_words_string .. ' ' .. prime_words_order[i]\n   \
    \     end\n    end\n    return prime_words_string\nend\n</cell>\n<text>\nLet's\
    \ now see how to use this function in an actual problem:", "    local primes =\
    \ {}\n    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_str = ''\n    local prime_words_index = 1\n    local\
    \ prime_words_index2 = 0\n    local prime_words_index3 = 0\n    local prime_words_index4\
    \ = 0\n    local prime_words_index5 = 0\n    local prime_words_index6 = 0\n  \
    \  local prime_words_index7 = 0\n    local prime_words_index8 = 0\n    local prime_words_index9\
    \ = 0\n    local prime_words_index10 = 0\n    local prime_words_index11 = 0\n\
    \    local prime_words_index12 = 0\n    local prime_words_index13 = 0\n    local\
    \ prime_words_index14 = 0\n    local prime_words_index15 = 0\n    local prime_words_index16\
    \ = 0\n    local prime_words_index17 = 0\n    local prime_words_index18 = 0\n\
    \    local prime_words_index19 = 0\n    local prime_words_index20 = 0\n    local\
    \ prime_words_index21 = 0\n    local prime_words_index22 = 0\n    local prime_words_index23\
    \ = 0\n    local prime_words_index24 = 0\n    local prime_words_index25 = 0\n\
    \    local prime_words_index26 = 0\n    local prime_words_index27 = 0\n    local\
    \ prime_words_index28 = 0\n    local prime_words_index29 = 0\n    local prime_words_index30\
    \ = 0\n    local prime_words_index31 = 0\n    local prime_words_index32 = 0\n\
    \    local prime_words_index33 = 0\n    local prime_words_index34 = 0\n    local\
    \ prime_words_index35 = 0\n    local prime_words_index36 = 0\n    local prime_words_index37\
    \ = 0\n    local prime_words_index38 = 0\n    local prime_words_index39 = 0\n\
    \    local prime_words_index40 = 0\n    local prime_words_index41 = 0\n    local\
    \ prime_words_index42 = 0\n    local prime_words_index43 = 0\n    local prime_words_index44\
    \ = 0\n    local prime_words_index45 = 0\n    local prime_words_index46 = 0\n\
    \    local prime_words_index47 = 0\n    local prime_words_index48 = 0\n    local\
    \ prime_words_index49 = 0\n    local prime_words_index50 = 0\n    local prime_words_index51\
    \ = 0\n    local prime_words_index52 = 0\n    local prime_words_index53 = 0\n",
  "  local primes = {}\n  for i = 2, #sentence do\n    local prime = true\n    for\
    \ j = 2, #primes do\n      if i % primes[j] == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(primes,\
    \ i)\n    end\n  end\n  local result = {}\n  for i = 1, #primes do\n    table.insert(result,\
    \ sentence:sub(1, primes[i]))\n  end\n  return table.concat(result)\nend", " \
    \   local prime_words = {}\n    for i = 2, #sentence do\n        local prime =\
    \ true\n        for j = 2, #prime_words do\n            if sentence[i] == prime_words[j]\
    \ then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(prime_words, sentence[i])\n\
    \        end\n    end\n    return table.concat(prime_words, \" \")\nend", "  \
    \  local primes = {}\n    local primes_count = 0\n    local primes_length = 0\n\
    \    local primes_string = ''\n    local primes_string_count = 0\n    local primes_string_length\
    \ = 0\n    local primes_string_length_count = 0\n    local primes_string_length_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_count = 0\n    local primes_string_length_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_count = 0\n    local\
    \ primes_string_length_prime_prime_prime_prime_prime_count = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count\
    \ = 0\n    local primes_string_length_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_count",
  "    local primes = {}\n    local primes_count = 0\n    local primes_sum = 0\n \
    \   local primes_sum2 = 0\n    local primes_sum3 = 0\n    local primes_sum4 =\
    \ 0\n    local primes_sum5 = 0\n    local primes_sum6 = 0\n    local primes_sum7\
    \ = 0\n    local primes_sum8 = 0\n    local primes_sum9 = 0\n    local primes_sum10\
    \ = 0\n    local primes_sum11 = 0\n    local primes_sum12 = 0\n    local primes_sum13\
    \ = 0\n    local primes_sum14 = 0\n    local primes_sum15 = 0\n    local primes_sum16\
    \ = 0\n    local primes_sum17 = 0\n    local primes_sum18 = 0\n    local primes_sum19\
    \ = 0\n    local primes_sum20 = 0\n    local primes_sum21 = 0\n    local primes_sum22\
    \ = 0\n    local primes_sum23 = 0\n    local primes_sum24 = 0\n    local primes_sum25\
    \ = 0\n    local primes_sum26 = 0\n    local primes_sum27 = 0\n    local primes_sum28\
    \ = 0\n    local primes_sum29 = 0\n    local primes_sum30 = 0\n    local primes_sum31\
    \ = 0\n    local primes_sum32 = 0\n    local primes_sum33 = 0\n    local primes_sum34\
    \ = 0\n    local primes_sum35 = 0\n    local primes_sum36 = 0\n    local primes_sum37\
    \ = 0\n    local primes_sum38 = 0\n    local primes_sum39 = 0\n    local primes_sum40\
    \ = 0\n    local primes_sum41 = 0\n    local primes_sum42 = 0\n    local primes_sum43\
    \ = 0\n    local primes_sum44 = 0\n    local primes_sum45 = 0\n    local primes_sum46\
    \ = 0\n    local primes_sum47 = 0\n    local primes_sum48 = 0\n    local primes_sum49\
    \ = 0\n    local primes_sum50 = 0\n    local primes_sum51 = 0\n    local primes_sum52\
    \ = 0\n    local primes_sum53 = 0\n    local primes_sum54 = 0\n    local primes_sum55\
    \ = 0\n    local primes_sum56 = 0\n    local primes_sum57 = 0\n    local primes_sum58\
    \ = 0\n    local primes_sum59 = 0\n    local primes_sum60 = 0\n    local primes_sum61\
    \ = 0\n    local primes_sum62 = 0\n    local primes_sum63", "    local primes\
    \ = {}\n    for i = 2, #sentence do\n        local prime = true\n        for j\
    \ = 2, #primes do\n            if sentence:sub(i, i) == primes[j] then\n     \
    \           prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    return table.concat(primes,\
    \ \" \")\nend", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n     \
    \   local word = sentence:sub(1, primes[i])\n        result = result .. word\n\
    \    end\n    return result\nend", "    local primes = {}\n    local primes_count\
    \ = 0\n    local primes_length = 1\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_",
  "    local primes = {}\n    local prime_words = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if sentence[i]\
    \ == primes[j] then\n                prime = false\n                break\n  \
    \          end\n        end\n        if prime then\n            table.insert(primes,\
    \ sentence[i])\n            table.insert(prime_words, sentence[i])\n        end\n\
    \    end\n    return table.concat(prime_words, ' ')\nend\n</cell>\n<text>\nLet's\
    \ test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ i ~= primes[j] then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our function", "    local\
    \ prime_numbers = {}\n    local prime_numbers_count = 0\n    local prime_numbers_index\
    \ = 0\n    local prime_numbers_index_count = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime = 0\n    local prime_numbers_index_count_max_prime_prime\
    \ = 0\n    local prime_numbers_index_count_min_prime_prime = 0\n    local prime_numbers_index_count_max\
    \ = 0\n    local prime_numbers_index_count_min = 0\n    local prime_numbers_index_count_max_prime\
    \ = 0\n    ", "    local primes = {}\n    for i = 2, #sentence do\n        local\
    \ prime = true\n        for j = 2, #primes do\n            if i % primes[j] ==\
    \ 0 then\n                prime = false\n                break\n            end\n\
    \        end\n        if prime then\n            table.insert(primes, i)\n   \
    \     end\n    end\n    local result = {}\n    for i = 1, #primes do\n       \
    \ table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    for i = 2, #sentence do\n        local word = sentence:sub(i,i)\n\
    \        local prime = true\n        for j = 1, #primes do\n            if primes[j]\
    \ == word then\n                prime = false\n                break\n       \
    \     end\n        end\n        if prime then\n            table.insert(primes,\
    \ word)\n            table.insert(prime_words, word)\n            table.insert(prime_words_len,\
    \ #prime_words)\n            table.insert(prime_words_order, #prime_words)\n \
    \       end\n    end\n    local result = \"\"\n    for i = 1, #prime_words do\n\
    \        local word = prime_words[i]\n        local len = #word\n        for j\
    \ = 1, #prime_words_len do\n            if prime_words_len[j] == len then\n  \
    \              local index = prime_words_order[j]\n                local word\
    \ = prime_words[index]\n                local index = #result\n              \
    \  local word = prime_words[index]\n                local index = #result\n  \
    \              local word = prime_words[index]\n                local index =\
    \ #result\n                local word = prime_words[index]\n                local\
    \ index = #result\n                local word = prime_words[index]\n         \
    \       local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = #result\n                local word = prime_words[index]\n\
    \                local index = ", "    local primes = {}\n    local prime_words\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_str = ''\n    local prime_words_index = 1\n    local prime_words_len_index\
    \ = 1\n    local prime_words_order_index = 1\n    local prime_words_str_index\
    \ = 1\n    local prime_words_index = 1\n    for word in sentence:gmatch('[^ ]+')\
    \ do\n        local prime = true\n        for i = 2, #primes do\n            if\
    \ primes[i] == word:len() then\n                prime = false\n              \
    \  break\n            end\n        end\n        if prime then\n            primes[prime_words_len_index]\
    \ = word:len()\n            prime_words_len[prime_words_len_index] = word:len()\n\
    \            prime_words_order[prime_words_order_index] = word:len()\n       \
    \     prime_words_str[prime_words_str_index] = word\n            prime_words_index\
    \ = 1\n        else\n            prime_words_len_index = prime_words_len_index\
    \ + 1\n            prime_words_order_index = prime_words_order_index + 1\n   \
    \         prime_words_str_index = prime_words_str_index + 1\n        end\n   \
    \ end\n    for i = 1, #prime_words_len do\n        if prime_words_len[i] ~= primes[i]\
    \ then\n            prime_words_index = prime_words_index + 1\n        end\n \
    \   end\n    for i = 1, #prime_words_order do\n        if prime_words_order[i]\
    \ ~= prime_words_index - 1 then\n            prime_words_index = prime_words_index\
    \ + 1\n        end\n    end\n    for i = 1, #prime_words_str do\n        if prime_words_str[i]\
    \ ~= prime_words_str[prime_words_index] then\n            prime_words_index =\
    \ prime_words_index + 1\n        end\n    end\n    for i = 1, #prime_words do\n\
    \        if prime_words[i] ~= prime_words_index - 1 then\n            prime_words_index\
    \ = prime_words_index + 1\n        end\n    end\n    for i = 1, #primes do\n \
    \       if primes[i] ~= prime_words_index - 1 then\n            prime_words_index\
    \ = prime_words_index + 1\n        end\n    end\n    for i = 1, #prime_words_str\
    \ do\n        if prime_words_str[i] ~= prime_words_str[prime_words_index] then\n\
    \            prime_words_index = prime_words_index + 1\n        end\n    end\n\
    \    for i = 1, #prime_words do\n        if prime_words[i] ~= prime_words_index\
    \ - 1 then\n            ", "    local primes = {}\n    for i = 2, #sentence do\n\
    \        local prime = true\n        for j = 2, #primes do\n            if i %\
    \ primes[j] == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = \"\"\n    for i = 1, #primes do\n\
    \        result = result .. \" \" .. sentence:sub(1, primes[i])\n    end\n   \
    \ return result:sub(2)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i % primes[j] == 0 then\n     \
    \           prime = false\n                break\n            end\n        end\n\
    \        if prime then\n            table.insert(primes, i)\n        end\n   \
    \ end\n    local result = {}\n    for i = 1, #primes do\n        local word =\
    \ sentence:sub(1, primes[i])\n        table.insert(result, word)\n    end\n  \
    \  return table.concat(result)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
