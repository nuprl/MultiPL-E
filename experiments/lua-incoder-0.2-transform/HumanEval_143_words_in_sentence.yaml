name: HumanEval_143_words_in_sentence
language: lua
prompt: "-- You are given a string representing a sentence,\n-- the sentence contains\
  \ some words separated by a space,\n-- and you have to return a string that contains\
  \ the words from the original sentence,\n-- whose lengths are prime numbers,\n--\
  \ the order of the words in the new string should be the same as the original one.\n\
  -- Example 1:\n-- >>> words_in_sentence('This is a test')\n-- 'is'\n-- Example 2:\n\
  -- >>> words_in_sentence('lets go for swimming')\n-- 'go for'\n-- Constraints:\n\
  -- * 1 <= len(sentence) <= 100\n-- * sentence contains only letters\nlocal function\
  \ words_in_sentence(sentence)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_in_sentence\n\
  \    lu.assertEquals(candidate('This is a test'), 'is')\n    lu.assertEquals(candidate('lets\
  \ go for swimming'), 'go for')\n    lu.assertEquals(candidate('there is no place\
  \ available here'), 'there is no place')\n    lu.assertEquals(candidate('Hi I am\
  \ Hussein'), 'Hi am Hussein')\n    lu.assertEquals(candidate('go for it'), 'go for\
  \ it')\n    lu.assertEquals(candidate('here'), '')\n    lu.assertEquals(candidate('here\
  \ is'), 'is')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = \"\"\n    for i = 1, #primes do\n        local word\
    \ = sentence:sub(1, primes[i])\n        local rest = sentence:sub(primes[i] +\
    \ 1, #sentence)\n        result = result .. \" \" .. word\n    end\n    return\
    \ result\nend", "    local result = {}\n    for w in string.gmatch(sentence, '([^\
    \ ]+)')\n    do\n        local n = tonumber(w)\n        if n ~= nil then\n   \
    \         table.insert(result, w)\n        end\n    end\n    return table.concat(result)\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 2, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]:tostring()))\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our function", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence[i] == primes[j] then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, sentence[i])\n        end\n    end\n    return\
    \ table.concat(primes, \" \")\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local primes = {}\n    local primes_count = 0\n    local primes_length = 1\n\
    \    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_index = 1\n    local primes_value\
    \ = 2\n    local primes_index = 1\n    local primes_value = 2\n    local primes_index\
    \ = 1\n    local primes_value = 2\n    local primes_", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        local word = sentence:sub(1, primes[i])\n\
    \        table.insert(result, word)\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test our implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if sentence:sub(i, i) == primes[j] then\n                prime\
    \ = false\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    return table.concat(primes, \" \")\nend", "  \
    \  local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if i ~= primes[j] and sentence[i]\
    \ == sentence[i]:sub(1, i) then\n                prime = false\n             \
    \   break\n            end\n        end\n        if prime then\n            table.insert(primes,\
    \ i)\n        end\n    end\n    local result = {}\n    for i = 1, #primes do\n\
    \        table.insert(result, sentence:sub(1, primes[i]))\n    end\n    return\
    \ table.concat(result)\nend\n</cell>\n<text>\nLet's test our implementation:",
  "    local prime_words = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    local prime_words_order = {}\n   \
    \ local prime_words_len = {}\n    local prime_words_order = {}\n    local prime_words_len\
    \ = {}\n    local prime_words_order = {}\n    local prime_words_len = {}\n   \
    \ local prime_words_order = {}\n    local prime_words_len = {}\n    local prime_words_order\
    \ = {}\n    local prime_words_len = {}\n    ", "  local prime_words = {}\n  for\
    \ i = 2, #sentence do\n    local prime_word = {}\n    for j = 2, #prime_words\
    \ do\n      if i % prime_words[j] == 0 then\n        prime_word[j] = true\n  \
    \    end\n    end\n    prime_words[#prime_words + 1] = prime_word\n  end\n  local\
    \ result = {}\n  for i = 1, #prime_words do\n    local prime_word = prime_words[i]\n\
    \    for j = 1, #sentence do\n      if prime_word[j] then\n        table.insert(result,\
    \ sentence[j])\n      end\n    end\n  end\n  return table.concat(result)\nend",
  "    local primes = {}\n    for i = 2, #sentence do\n        local prime = true\n\
    \        for j = 2, #primes do\n            if sentence:sub(i, i+j) ~= sentence:sub(i-1,\
    \ i-1) then\n                prime = false\n                break\n          \
    \  end\n        end\n        if prime then\n            table.insert(primes, i)\n\
    \        end\n    end\n    return table.concat(primes, \" \")\nend\n</cell>\n\
    <text>\nLet's test our implementation:", "    local primes = {}\n    for i = 2,\
    \ #sentence do\n        local prime = true\n        for j = 2, #primes do\n  \
    \          if i % primes[j] == 0 then\n                prime = false\n       \
    \         break\n            end\n        end\n        if prime then\n       \
    \     table.insert(primes, i)\n        end\n    end\n    local result = {}\n \
    \   for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "    local primes = {}\n    for i = 2, #sentence\
    \ do\n        local prime = true\n        for j = 2, #primes do\n            if\
    \ sentence:sub(i, i+j) ~= sentence:sub(i-1, i-1) then\n                prime =\
    \ false\n                break\n            end\n        end\n        if prime\
    \ then\n            table.insert(primes, i)\n        end\n    end\n    local result\
    \ = {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(i,\
    \ i+primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test our implementation:", "  local prime_numbers = {}\n  for i = 2, 100\
    \ do\n    prime_numbers[i] = true\n  end\n  local prime_number_string = ''\n \
    \ for i = 1, #sentence do\n    local letter = sentence[i]\n    if prime_numbers[#prime_numbers\
    \ + 1] == true then\n      prime_number_string = prime_number_string .. letter\n\
    \      prime_numbers[#prime_numbers + 1] = false\n    end\n  end\n  return prime_number_string\n\
    end", "    local primes = {}\n    for i = 2, #sentence do\n        local prime\
    \ = true\n        for j = 2, #primes do\n            if i % primes[j] == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(primes, i)\n        end\n\
    \    end\n    local result = {}\n    for i = 1, #primes do\n        table.insert(result,\
    \ sentence:sub(1, primes[i]))\n    end\n    return table.concat(result)\nend\n\
    </cell>\n<text>\nLet's test our function", "    local result = {}\n    for word\
    \ in string.gmatch(sentence, '([^ ]+)')\n    do\n        local prime = true\n\
    \        for i = 2, #result\n        do\n            if #word == i then\n    \
    \            prime = false\n            end\n        end\n        if prime then\n\
    \            table.insert(result, word)\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's see how it works:", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i ~= primes[j] then\n                prime = false\n    \
    \            break\n            end\n        end\n        if prime then\n    \
    \        table.insert(primes, i)\n        end\n    end\n    local result = {}\n\
    \    for i = 1, #primes do\n        table.insert(result, sentence:sub(1, primes[i]))\n\
    \    end\n    return table.concat(result)\nend", "    local primes = {}\n    for\
    \ i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 2, #primes do\n        local prime = primes[i]\n        for\
    \ j = 2, #sentence do\n            if sentence:sub(i, i + 1) ~= ' ' then\n   \
    \             local word = sentence:sub(i, i + 1)\n                table.insert(result,\
    \ word)\n            end\n        end\n    end\n    return table.concat(result)\n\
    end\n</cell>\n<text>\nLet's test your implementation:", "    local primes = {}\n\
    \    for i = 2, #sentence do\n        local prime = true\n        for j = 2, #primes\
    \ do\n            if i % primes[j] == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(primes, i)\n        end\n    end\n    local result =\
    \ {}\n    for i = 1, #primes do\n        table.insert(result, sentence:sub(1,\
    \ primes[i]))\n    end\n    return table.concat(result)\nend\n</cell>\n<text>\n\
    Let's test your implementation. Make sure it passes for all test cases below."]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
