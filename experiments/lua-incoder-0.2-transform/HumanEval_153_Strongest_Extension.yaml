name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest_extension = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    end\n  end\n  if #strongest_extension > 1 then\n\
    \    table.sort(strongest_extension)\n  end\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local max_strength = -1\n  local max_extension\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(2, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local max_strength = -1\n  local max_extension = \"\
    \"\n  for _, extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strongest_extension_strength > strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend", "\tlocal\
    \ strongest = nil\n\tlocal strongest_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > strongest_strength then\n\t\t\tstrongest = class_name\n\
    \t\t\tstrongest_strength = strength\n\t\tend\n\tend\n\treturn strongest\nend",
  "  local strongest = nil\n  local strongest_strength = -1\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local cap_strength\
    \ = cap - sm\n    if cap_strength > strongest_strength then\n      strongest =\
    \ class_name\n      strongest_strength = cap_strength\n    end\n  end\n  return\
    \ strongest\nend", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return strength\
    \ - tonumber(a) - tonumber(b) end)\n\treturn class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "\tlocal strongest_extension = {}\n\tlocal max_strength = -1\n\t\
    local max_extension = ''\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal\
    \ cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\
    \treturn string.gsub(class_name, '^' .. class_name .. '.', max_extension)\nend",
  "  local strongest = nil\n  local strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > 0 then\n      if strongest == nil then\n        strongest\
    \ = extension\n        strength = cap_diff\n      elseif strength > cap_diff then\n\
    \        strongest = extension\n        strength = cap_diff\n      end\n    end\n\
    \  end\n  return class_name .. '.' .. strongest\nend", "    local strongest_extension\
    \ = nil\n    local extension_strength = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            if extension_strength\
    \ == nil then\n                extension_strength = strength\n               \
    \ strongest_extension = extension\n            elseif extension_strength > strength\
    \ then\n                extension_strength = strength\n                strongest_extension\
    \ = extension\n            end\n        end\n    end\n    return class_name ..\
    \ '.' .. strongest_extension\nend", "\tlocal strongest = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend", "  local max_strength = -1\n  local max_extension = ''\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - #max_extension) .. max_extension\nend", "  local\
    \ strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, class_name\
    \ .. '.' .. extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension)\n\t\
    return strongest_extension[1]\nend", "  local strongest_extension = {}\n  local\
    \ cap_counter = 0\n  local sm_counter = 0\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    cap_counter = cap_counter\
    \ + cap\n    sm_counter = sm_counter + sm\n  end\n  local strength = cap_counter\
    \ - sm_counter\n  if strength > 0 then\n    local cap_counter = 0\n    local sm_counter\
    \ = 0\n    for _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      cap_counter = cap_counter + cap\n      sm_counter = sm_counter + sm\n \
    \   end\n    local strength = cap_counter - sm_counter\n    if strength > 0 then\n\
    \      strongest_extension = class_name .. '.' .. extensions[1]\n    else\n  \
    \    strongest_extension = class_name .. '.' .. extensions[2]\n    end\n  else\n\
    \    strongest_extension = class_name .. '.' .. extensions[1]\n  end\n  return\
    \ strongest_extension\nend", "\tlocal strongest = nil\n\tlocal strongest_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_strength then\n\t\t\
    \tstrongest = class_name\n\t\t\tstrongest_strength = strength\n\t\tend\n\tend\n\
    \treturn strongest\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  if #strongest == 0 then\n    return class_name\n  end\n  table.sort(strongest)\n\
    \  return class_name .. '.' .. strongest[1]\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal extension_strength = nil\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal cap_diff\
    \ = cap - sm\n\t\tif cap_diff ~= 0 then\n\t\t\tif extension_strength == nil then\n\
    \t\t\t\textension_strength = cap_diff\n\t\t\telseif extension_strength > cap_diff\
    \ then\n\t\t\t\textension_strength = cap_diff\n\t\t\t\tstrongest_extension = extension\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      strongest_extension\
    \ = extension\n      max_strength = strength\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return string.format(class_name .. '.%s', strongest_extensions[1].1)\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "    local max_strength = -1\n    local max_extension = \"\"\n    for _,\
    \ extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > max_strength then\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. max_extension\nend",
  "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[#strongest_extensions].\n         .strongest_extensions[1].\n\
    \         .strongest_extensions[#strongest_extensions].\n         .strongest_extensions[1].\n\
    \         .strongest_extensions[#strongest_extensions].\n         .strongest_extensions[1].\n\
    \         .strongest_extensions[#strongest_extensions].\n         .strongest_extensions[1].\n\
    \         .strongest_extensions[#strongest_extensions]\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \           . strongest_extensions[#strongest_extensions]\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = nil\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff ~= 0 then\n\t\t\tif strongest_extension_strength == nil\
    \ then\n\t\t\t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension\
    \ = extension\n\t\t\telseif cap_diff > strongest_extension_strength then\n\t\t\
    \t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension = extension\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = nil\n  local strength = nil\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local cap_diff\
    \ = cap - sm\n    if cap_diff > 0 then\n      if strongest == nil then\n     \
    \   strongest = extension\n        strength = cap_diff\n      elseif strength\
    \ > cap_diff then\n        strongest = extension\n        strength = cap_diff\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest\nend", "\t\
    local strongest_extensions = {}\n\tlocal max_strength = -1\n\tlocal max_extension\
    \ = ''\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength\
    \ = strength\n\t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "    local strongest = {}\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest, extension)\n        end\n    end\n    table.sort(strongest)\n\
    \    return class_name .. '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension\
    \ = nil\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    table.insert(extension_strengths, strength)\n  end\n  table.sort(extension_strengths)\n\
    \  for _, strength in ipairs(extension_strengths) do\n    if strength == 0 then\n\
    \      break\n    end\n    if strongest_extension == nil then\n      strongest_extension\
    \ = class_name\n    end\n    if strength > extension_strengths[#extension_strengths]\
    \ then\n      strongest_extension = class_name\n    end\n  end\n  return strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension > 1 then\n    table.sort(strongest_extension)\n\
    \  end\n  return string.sub(class_name, 1, #class_name-1) .. strongest_extension[1]\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = cap - sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension)\
    \ + 1) .. strongest_extension\nend", "    local max_strength = -1\n    local max_extension\
    \ = \"\"\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > max_strength then\n\
    \            max_strength = strength\n            max_extension = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. max_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local cap_strength = #cap - #sm\n        if cap_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = cap_strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extensions = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extensions,\
    \ {extension, strength})\n        end\n    end\n    table.sort(strongest_extensions,\
    \ function(a, b) return a.strength > b.strength end)\n    return class_name ..\
    \ '.' .. strongest_extensions[1].extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    elseif strength < 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    end\n  end\n  if #strongest_extension == 1 then\n\
    \    return class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    local strongest_extension_strength_i = 0\n    for\
    \ _, extension in ipairs(strongest_extension) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n        strongest_extension_strength\
    \ = strongest_extension_strength + 1\n      end\n      if strength == 0 then\n\
    \        break\n      end\n    end\n    return class_name .. '.' .. strongest_extension[strongest_extension_strength_i]\n\
    \  end\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength >= 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\n\
    \    return a.strength < b.strength\n  end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local max_strength = -1\n  local max_extension = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))..max_extension\n\
    end", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. table.concat(strongest, '.')\nend", "  local strongest_extensions = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[1]:sub(3)\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest, 1)\nend", "\tlocal strongest = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest)\n\treturn string.sub(class_name, 1, #class_name-1)\
    \ .. strongest[1]\nend", "  local max_strength = -1\n  local max_extension = ''\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local strongest = nil\n  local strongest_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_strength then\n  \
    \    strongest = class_name\n      strongest_strength = strength\n    end\n  end\n\
    \  return strongest\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest == 0 then\n        strongest[extension]\
    \ = strength\n      else\n        if strongest[extension] > strength then\n  \
    \        strongest[extension] = strength\n        end\n      end\n    end\n  end\n\
    \  local strongest_extension = nil\n  for _, extension in ipairs(extensions) do\n\
    \    if strongest[extension] == strongest[extension] then\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend", "  local strongest =\
    \ {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest[strength] == nil then\n     \
    \ strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for _, extension in ipairs(strongest)\
    \ do\n      if extension > strongest_extension then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  local capitals = {}\n  local lowercases\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals +\
    \ 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  capitals = capitals:sort()\n\
    \  lowercases = lowercases:sort()\n  local cap_strength = #capitals\n  local lc_strength\
    \ = #lowercases\n  local strength = cap_strength - lc_strength\n  for _, extension\
    \ in ipairs(extensions) do\n    if string.upper(extension:sub(1, #extension))\
    \ == capitals[cap_strength] then\n      cap_strength = cap_strength - 1\n    elseif\
    \ string.lower(extension:sub(1, #extension)) == lowercases[lc_strength] then\n\
    \      lc_strength = lc_strength - 1\n    end\n  end\n  if cap_strength > lc_strength\
    \ then\n    strongest_extension = class_name .. '.' .. capitals[cap_strength]\n\
    \  else\n    strongest_extension = class_name .. '.' .. lowercases[lc_strength]\n\
    \  end\n  return strongest_extension\nend", "  local strongest = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return string.format(class_name\
    \ .. '.%s', strongest[1])\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "    local strongest_extension = nil\n\
    \    local strongest_extension_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > strongest_extension_strength then\n      \
    \      strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n\treturn class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > 0 then\n      if strongest_extension_strength == -1 or strength > strongest_extension_strength\
    \ then\n        strongest_extension_strength = strength\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  local cap_counter = 0\n  local sm_counter\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    cap_counter = cap_counter + cap:len()\n    sm_counter = sm_counter + sm:len()\n\
    \  end\n  cap_counter = cap_counter - sm_counter\n  if cap_counter > 0 then\n\
    \    local strength = cap_counter - 1\n    for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local cap_length =\
    \ cap:len()\n      local sm_length = sm:len()\n      local ratio = cap_length\
    \ - sm_length\n      if ratio > 0 then\n        local ratio_cap = cap:sub(ratio\
    \ + 1, cap_length)\n        local ratio_sm = sm:sub(ratio + 1, sm_length)\n  \
    \      if ratio_cap == ratio_sm then\n          local ratio_cap_length = ratio_cap:len()\n\
    \          local ratio_sm_length = ratio_sm:len()\n          local ratio_cap_length\
    \ = ratio_cap_length - ratio_sm_length\n          if ratio_cap_length == 0 then\n\
    \            local ratio_cap_length = ratio_cap:len()\n            if ratio_cap_length\
    \ == 0 then\n              local ratio_cap_length = ratio_cap:len()\n        \
    \      if ratio_cap_length == 0 then\n                local ratio_cap_length =\
    \ ratio_cap:len()\n                if ratio_cap_length == 0 then\n           \
    \       local ratio_cap_length = ratio_cap:len()\n                  if ratio_cap_length\
    \ == 0 then\n                    local ratio_cap_length = ratio_cap:len()\n  \
    \                  if ratio_cap_length == 0 then\n                      local\
    \ ratio_cap_length = ratio_cap:len()\n                      if ratio_cap_length\
    \ == 0 then\n                        local ratio_cap_length = ratio_cap:len()\n\
    \                        if ratio_cap_length == 0 then\n                     \
    \     local ratio_cap_length = ratio_cap:len()\n                        end\n\
    \                      end\n                    end\n                  end\n \
    \               end\n              end\n            end\n          end\n     \
    \   end\n      end\n    end\n    local strongest_extension = class_name .. '.'\
    \ .. extensions[1]\n  end\n  return strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extension\
    \ = nil\n    local max_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extension = nil\n  local extension_strength = nil\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if extension_strength == nil then\n      extension_strength\
    \ = strength\n    elseif extension_strength > strength then\n      extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, string.len(class_name) - #strongest_extension) ..\
    \ strongest_extension\nend", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_extensions[strength] == nil then\n      strongest_extensions[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension = strongest_extensions[#strongest_extensions]\n\
    \  if strongest_extension == nil then\n    error(\"No strongest extension found\"\
    )\n  end\n  return class_name .. \".\" .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local max_strength = -1\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \           . strongest_extensions[#strongest_extensions]\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength - tonumber(a) - tonumber(b) end)\n  return class_name .. '.'\
    \ .. table.unpack(strongest_extension, 1)\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  local strongest_extension_strength_counter\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = string.upper(extension:sub(1, string.len(extension) - 1))\n    if strongest_extension_strength\
    \ == nil then\n      strongest_extension_strength = extension_strength\n     \
    \ strongest_extension_strength_counter = 1\n    elseif extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension_strength_counter\
    \ = 1\n    elseif extension_strength == strongest_extension_strength then\n  \
    \    strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ + 1\n    end\n  end\n  if strongest_extension_strength_counter == 1 then\n \
    \   strongest_extension = class_name\n  else\n    for _, extension in ipairs(extensions)\
    \ do\n      if string.upper(extension:sub(1, string.len(extension) - 1)) == strongest_extension_strength\
    \ then\n        strongest_extension = class_name..'.'..extension\n        break\n\
    \      end\n    end\n  end\n  return strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend",
  "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        local strength = cap - sm\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      strongest_extension\
    \ = extension\n      max_strength = strength\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - #strongest_extension) .. strongest_extension\nend",
  "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b)\n\
    \t\treturn string.lower(a) > string.lower(b)\n\tend)\n\treturn class_name .. '.'\
    \ .. table.concat(strongest_extension, '.')\nend", "  local strongest = {}\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest[strength] == nil then\n     \
    \ strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for _, extension in ipairs(strongest)\
    \ do\n      if extension > strongest_extension then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest = nil\n \
    \ local strongest_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > strongest_strength then\n\
    \      strongest = class_name\n      strongest_strength = strength\n    end\n\
    \  end\n  return strongest\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n\
    \    end\n  end\n  if #strongest == 1 then\n    return class_name .. '.' .. strongest[1]\n\
    \  else\n    local strongest_extensions = {}\n    for _, extension in ipairs(strongest)\
    \ do\n      table.insert(strongest_extensions, extension)\n    end\n    table.sort(strongest_extensions)\n\
    \    return class_name .. '.' .. strongest_extensions[1]\n  end\nend", "    local\
    \ strongest = nil\n    for _, extension in ipairs(extensions) do\n        local\
    \ cap = string.upper(extension:sub(1, #extension))\n        local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n        local strength = cap - sm\n        if strength > 0 then\n   \
    \         if strongest == nil then\n                strongest = extension\n  \
    \          elseif strength > strongest:len() then\n                strongest =\
    \ extension\n            end\n        end\n    end\n    return class_name .. '.'\
    \ .. strongest\nend", "    local strongest_extensions = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest_extensions, {extension, strength})\n        end\n   \
    \ end\n    table.sort(strongest_extensions, function(a, b) return a[2] > b[2]\
    \ end)\n    return class_name .. '.' .. strongest_extensions[1].\n        . strongest_extensions[1]:sub(3)\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local strongest_extension_strength_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension_strength_counter = 1\n        strongest_extension\
    \ = extension\n      elseif strength == strongest_extension_strength then\n  \
    \      strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ + 1\n      end\n    end\n  end\n  if strongest_extension_strength_counter >\
    \ 1 then\n    return class_name .. '.' .. strongest_extension\n  end\n  return\
    \ class_name\nend", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension = extension\n      elseif strength > #strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n  end\n \
    \ return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal cap_diff\
    \ = cap - sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "    local strongest_extension = nil\n\
    \    local strongest_extension_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1, #extension))\n     \
    \   local cap_diff = cap - sm\n        if cap_diff > strongest_extension_strength\
    \ then\n            strongest_extension_strength = cap_diff\n            strongest_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength >= 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. strongest[1]\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    for _, extension in ipairs(extensions) do\n    \
    \  if strongest_extension_strength > 1 then\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n          strongest_extension_strength\
    \ = strongest_extension_strength - 1\n        end\n      end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      else\n        if strength\
    \ > #strongest_extension then\n          strongest_extension = extension\n   \
    \     end\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b)\n    return a.strength < b.strength\n  end)\n  return class_name .. '.' ..\
    \ strongest_extensions[1].extension\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_strength\
    \ = cap - sm\n    if cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal cap_strength\
    \ = cap - sm\n\t\tlocal extension_strength = extension_strengths[cap_strength]\n\
    \t\tif extension_strength == nil then\n\t\t\textension_strength = cap_strength\n\
    \t\t\textension_strengths[cap_strength] = extension_strength\n\t\telseif extension_strength\
    \ > strongest_extension_strength then\n\t\t\tstrongest_extension_strength = extension_strength\n\
    \t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tlocal strongest_extension_strength_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max = -1\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\t", "  local\
    \ strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b)\n    return a.strength < b.strength\n  end)\n  return class_name .. '.' ..\
    \ strongest_extensions[1].extension\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n\
    \    end\n  end\n  if #strongest == 0 then\n    return class_name\n  else\n  \
    \  local strongest_extension = strongest[1]\n    for _, extension in ipairs(strongest)\
    \ do\n      if extension:sub(1, #strongest_extension) == strongest_extension then\n\
    \        strongest_extension = extension\n      end\n    end\n    return class_name\
    \ .. '.' .. strongest_extension\n  end\nend", "  local strongest = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extensions = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[1]:sub(3)\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest_extension[strength] == nil then\n      strongest_extension[strength]\
    \ = extension\n    end\n  end\n  local strongest_extension_strength = #strongest_extension\n\
    \  if strongest_extension_strength > 1 then\n    local strongest_extension_strength_sorted\
    \ = {}\n    for _, strongest_extension_strength in ipairs(strongest_extension_strength)\
    \ do\n      table.insert(strongest_extension_strength_sorted, strongest_extension_strength)\n\
    \    end\n    table.sort(strongest_extension_strength_sorted)\n    strongest_extension_strength\
    \ = strongest_extension_strength_sorted[1]\n  end\n  return class_name .. '.'\
    \ .. strongest_extension[strongest_extension_strength]\nend", "\tlocal strongest_extensions\
    \ = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions,\
    \ {extension, strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n\treturn class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension == 1 then\n    return class_name ..\
    \ '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    local strongest_extension_strength_i = 0\n    for\
    \ _, extension in ipairs(strongest_extension) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((#extension) + 1))\n\
    \      local strength = cap - sm\n      if strength > 0 then\n        strongest_extension_strength\
    \ = strongest_extension_strength\n        strongest_extension_strength_i = #strongest_extension\n\
    \      end\n    end\n    return class_name .. '.' .. strongest_extension[strongest_extension_strength_i]\n\
    \  end\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strength = 0\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_class = string.sub(extension, 1, string.len(extension)\
    \ - 2)\n    local extension_class_strength = string.upper(extension_class) - string.lower(extension_class)\n\
    \    if extension_class_strength > extension_strength then\n      strongest_extension\
    \ = extension\n      strongest_extension_strength = extension_class_strength\n\
    \    end\n    extension_strength = extension_strength + extension_class_strength\n\
    \  end\n  return string.sub(class_name, 1, string.len(class_name) - 2) .. '.'\
    \ .. strongest_extension\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    for _, extension in ipairs(extensions) do\n    \
    \  local cap = string.upper(extension:sub(1, #extension))\n      local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n      local strength = cap - sm\n      if strength > 0 then\n\
    \        strongest_extension_strength = strongest_extension_strength - 1\n   \
    \   end\n    end\n    return class_name .. '.' .. strongest_extension[strongest_extension_strength]\n\
    \  end\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. strongest[1]\n\
    end", "    local strongest_extension = {}\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > 0 then\n            table.insert(strongest_extension,\
    \ extension)\n        end\n    end\n    table.sort(strongest_extension, function(a,\
    \ b) return strength > b end)\n    return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[#strongest_extensions]\nend", "  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  end\n  local max_strength = #strongest_extension\n\
    \  for _, extension in ipairs(strongest_extension) do\n    if max_strength > #extension\
    \ then\n      max_strength = #extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension[max_strength]\nend", "    local strongest_extensions\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n    table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n    return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      strongest_extension\
    \ = extension\n      max_strength = strength\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff ~= 0 then\n      if extension_strength == nil then\n   \
    \     extension_strength = cap_diff\n      elseif extension_strength > cap_diff\
    \ then\n        extension_strength = cap_diff\n      end\n    end\n  end\n  if\
    \ extension_strength ~= nil then\n    strongest_extension = class_name .. '.'\
    \ .. string.lower(extensions[#extensions])\n  end\n  return strongest_extension\n\
    end", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest, function(a, b) return strength\
    \ > b end)\n\treturn class_name .. '.' .. table.unpack(strongest)[1]\nend", " \
    \ local strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)-#strongest_extension)\
    \ .. strongest_extension\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[1]:sub(3)\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = nil\n\tlocal strongest_extension_strength_pos\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil\n\tlocal strongest_extension_strength_pos_index\
    \ = nil\n\tlocal strongest_extension_strength_pos_index = nil", "\tlocal strongest_extension\
    \ = nil\n\tlocal max_strength = -1\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\t\
    end\n\treturn string.sub(class_name, 1, #class_name-1) .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \           . strongest_extensions[#strongest_extensions]\nend", "    local strongest_extension\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest_extension, extension)\n        end\n    end\n    table.sort(strongest_extension,\
    \ function(a, b) return strength > b end)\n    return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extension = {}\n  local cap_counter = 0\n  local\
    \ sm_counter = 0\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((cap+1):len()))\n\
    \    cap_counter = cap_counter + cap\n    sm_counter = sm_counter + sm\n  end\n\
    \  local strength = cap_counter - sm_counter\n  if strength > 0 then\n    for\
    \ _, extension in ipairs(extensions) do\n      local cap = string.upper(extension:sub(1,\
    \ #extension))\n      local sm = string.lower(extension:sub((cap+1):len()))\n\
    \      if cap == string.upper(class_name) and sm == string.lower(class_name) then\n\
    \        strongest_extension = extension\n      end\n    end\n  end\n  return\
    \ strongest_extension\nend", "    local strongest_extension = {}\n    for _, extension\
    \ in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest_extension, extension)\n        end\n    end\n    table.sort(strongest_extension,\
    \ function(a, b) return strength > b end)\n    return class_name .. '.' .. table.concat(strongest_extension,\
    \ '.')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_strength = string.upper(extension:sub(1, #extension)\
    \ - string.lower(extension:sub(1, #extension)))\n    extension_strengths[extension_strength]\
    \ = extension_strengths[extension_strength] or {}\n    extension_strengths[extension_strength][extension]\
    \ = true\n  end\n  for _, extension_strength in pairs(extension_strengths) do\n\
    \    if extension_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = extension_strength\n      strongest_extension = extension_strengths[extension_strength]\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension[strongest_extension_strength]\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest = nil\n  local strongest_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_strength then\n  \
    \    strongest = class_name\n      strongest_strength = strength\n    end\n  end\n\
    \  return strongest\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.concat(strongest,\
    \ '.')\nend", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension)\n  return class_name .. '.'\
    \ .. table.unpack(strongest_extension, 1)\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    elseif strength < 0 then\n      table.insert(strongest_extension,\
    \ extension)\n      break\n    end\n  end\n  if #strongest_extension == 1 then\n\
    \    return class_name .. '.' .. strongest_extension[1]\n  else\n    return class_name\
    \ .. '.' .. strongest_extension[1]\n  end\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest =\
    \ {}\n\tlocal strength = -1\n\tfor _, extension in ipairs(extensions) do\n\t\t\
    local cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal cap_diff = cap - sm\n\t\tif cap_diff > strength then\n\t\t\t\
    strength = cap_diff\n\t\t\tstrongest = extension\n\t\tend\n\tend\n\treturn string.format(class_name\
    \ .. '.%s', strongest)\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension))\
    \ + strongest_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension)\
    \ + 1) .. strongest_extension\nend", "\tlocal strongest = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength == 0 then\n\t\t\t-- The extension is a single letter\n\
    \t\t\tstrongest[extension] = extension\n\t\telseif strength > 0 then\n\t\t\t--\
    \ The extension is a capital letter\n\t\t\tstrongest[extension] = class_name ..\
    \ '.' .. extension\n\t\telseif strength < 0 then\n\t\t\t-- The extension is a\
    \ lowercase letter\n\t\t\tstrongest[extension] = class_name .. '.' .. extension\n\
    \t\tend\n\tend\n\ttable.sort(strongest)\n\treturn strongest[1]\nend", "  local\
    \ max_strength = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   max_extension = extension\n    end\n  end\n  return class_name .. \".\" ..\
    \ max_extension\nend", "  local max_strength = -1\n  local max_extension\n  for\
    \ _, extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name)-#max_extension-1) +\
    \ max_extension\nend", "  local strongest_extension = {}\n  local capitals = {}\n\
    \  local lowercases = {}\n  for _, extension in ipairs(extensions) do\n    capitals[#capitals\
    \ + 1] = string.upper(extension:sub(1, #extension))\n    lowercases[#lowercases\
    \ + 1] = string.lower(extension:sub(1, #extension))\n  end\n  local capitals_count\
    \ = #capitals\n  local lowercases_count = #lowercases\n  local capitals_strength\
    \ = #capitals - 1\n  local lowercases_strength = #lowercases - 1\n  for _, extension\
    \ in ipairs(extensions) do\n    local capitals_index = capitals[#capitals]\n \
    \   local lowercases_index = lowercases[#lowercases]\n    local capitals_extension\
    \ = string.upper(extension:sub(1, #extension))\n    local lowercases_extension\
    \ = string.lower(extension:sub(1, #extension))\n    local capitals_extension_strength\
    \ = capitals_index - capitals_extension\n    local lowercases_extension_strength\
    \ = lowercases_index - lowercases_extension\n    if capitals_extension_strength\
    \ > lowercases_extension_strength then\n      strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. capitals_extension\n    else\n      strongest_extension[#strongest_extension\
    \ + 1] = class_name .. '.' .. lowercases_extension\n    end\n  end\n  local strongest_extension_strength\
    \ = #strongest_extension\n  if strongest_extension_strength > 1 then\n    local\
    \ strongest_extension_strength_index = #strongest_extension\n    for _, extension\
    \ in ipairs(extensions) do\n      local capitals_index = capitals[#capitals]\n\
    \      local lowercases_index = lowercases[#lowercases]\n      local capitals_extension\
    \ = string.upper(extension:sub(1, #extension))\n      local lowercases_extension\
    \ = string.lower(extension:sub(1, #extension))\n      local capitals_extension_strength\
    \ = capitals_index - capitals_extension\n      local lowercases_extension_strength\
    \ = lowercases_index - lowercases_extension\n      if capitals_extension_strength\
    \ > lowercases_extension_strength then\n        strongest_extension[strongest_extension_strength_index]\
    \ = class_name .. '.' .. capitals_extension\n      else\n        strongest_extension[strongest_extension_strength_index]\
    \ = class_name .. '.' .. lowercases_extension\n      end\n      strongest_extension_strength_index\
    \ = stron", "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension, extension)\n\
    \t\tend\n\tend\n\ttable.sort(strongest_extension, function(a, b) return strength\
    \ < b end)\n\treturn class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local max_strength = -1\n  local max_extension\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local max_strength\
    \ = #strongest_extension\n    for _, extension in ipairs(strongest_extension)\
    \ do\n      if max_strength > #extension then\n        max_strength = #extension\n\
    \      end\n    end\n    return class_name .. '.' .. strongest_extension[max_strength]\n\
    \  end\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "\tlocal strongest_extension = nil\n\t\
    local strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extensions[strength] == nil then\n\
    \      strongest_extensions[strength] = extension\n    elseif strongest_extensions[strength]\
    \ < extension then\n      strongest_extensions[strength] = extension\n    end\n\
    \  end\n  local strongest_extension = strongest_extensions[#strongest_extensions]\n\
    \  if strongest_extension == nil then\n    error(\"No strongest extension found\"\
    )\n  end\n  return class_name .. \".\" .. strongest_extension\nend", "  local\
    \ strongest = {}\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for _, extension in ipairs(strongest)\
    \ do\n      if strongest_extension == extension then\n        strongest_extension\
    \ = nil\n        break\n      end\n    end\n  end\n  return class_name .. '.'\
    \ .. strongest_extension\nend", "\tlocal strongest_extensions = {}\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions,\
    \ {extension, strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a,\
    \ b)\n\t\treturn a.strength < b.strength\n\tend)\n\treturn class_name .. '.' ..\
    \ strongest_extensions[1].extension\nend", "\tlocal strongest_extension = nil\n\
    \tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff > 0 then\n\t\t\tif strongest_extension_strength == -1 or\
    \ cap_diff > strongest_extension_strength then\n\t\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\t\tstrongest_extension = extension\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[#strongest_extensions]\nend", "    local strongest_extensions\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest_extensions, {extension, strength})\n        end\n   \
    \ end\n    table.sort(strongest_extensions, function(a, b) return a[2] > b[2]\
    \ end)\n    return class_name .. '.' .. strongest_extensions[1].\n           strongest_extensions[1]:sub(1,\
    \ #strongest_extensions[1])\nend", "  local strongest_extension = nil\n  local\
    \ max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extensions\
    \ = {}\n\tlocal strongest_extension_strength = -1\n\tlocal strongest_extension_strength_found\
    \ = false\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_diff = cap - sm\n\t\tif cap_diff ~= 0 then\n\t\t\tif not strongest_extension_strength_found\
    \ then\n\t\t\t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension_strength_found\
    \ = true\n\t\t\telseif strongest_extension_strength_found then\n\t\t\t\tif cap_diff\
    \ > strongest_extension_strength then\n\t\t\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\t\t\tstrongest_extension_strength_found = true\n\t\t\t\tend\n\
    \t\t\tend\n\t\tend\n\tend\n\tif strongest_extension_strength_found then\n\t\t\
    return class_name .. '.' .. strongest_extension_strength .. extensions[#extensions]\n\
    \telse\n\t\treturn class_name\n\tend\nend", "\tlocal strongest_extensions = {}\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extensions,\
    \ {extension, strength})\n\t\tend\n\tend\n\ttable.sort(strongest_extensions, function(a,\
    \ b) return a.strength > b.strength end)\n\treturn class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. strongest[1]\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest[strength] == nil then\n      strongest[strength] = extension\n\
    \    end\n  end\n  local strongest_extension = strongest[1]\n  if #strongest >\
    \ 1 then\n    local strongests = {}\n    for _, extension in ipairs(extensions)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strongests[strength] == nil then\n        strongests[strength]\
    \ = extension\n      end\n    end\n    local strongest_extensions = strongests[1]\n\
    \    for _, extension in ipairs(strongests) do\n      if strongest_extensions\
    \ < extension then\n        strongest_extensions = extension\n      end\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   max_extension = extension\n    end\n  end\n  return class_name .. \".\" ..\
    \ max_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension)\
    \ + 1) .. strongest_extension\nend", "  local strongest = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      if strongest == nil or strength\
    \ > strongest.strength then\n        strongest = { name = extension, strength\
    \ = strength }\n      end\n    end\n  end\n  return class_name .. '.' .. strongest.name\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest_extension) + 1) .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local max_strength = -1\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      strongest_extension =\
    \ extension\n      max_strength = strength\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ 1)) - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength = cap -\
    \ sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest, extension)\n\t\t\
    end\n\tend\n\ttable.sort(strongest)\n\treturn string.sub(class_name, 1, string.len(class_name)\
    \ - 1) .. strongest[1]\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      elseif strength >\
    \ #strongest_extension then\n        strongest_extension = extension\n      end\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = {}\n  local max_strength = -1\n  local max_extension =\
    \ ''\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest_extension = {}\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n\
    \    end\n  end\n  table.sort(strongest)\n  return class_name .. '.' .. table.unpack(strongest,\
    \ 1)\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n      break\n    end\n  end\n  if #strongest_extensions > 1 then\n\
    \    table.sort(strongest_extensions)\n  end\n  return class_name .. '.' .. strongest_extensions[1]\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest_extension, '.')\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if #strongest_extension == 0 then\n    \
    \    strongest_extension.name = extension\n        strongest_extension.strength\
    \ = strength\n      elseif strength > strongest_extension.strength then\n    \
    \    strongest_extension.name = extension\n        strongest_extension.strength\
    \ = strength\n      end\n    end\n  end\n  if #strongest_extension > 0 then\n\
    \    return class_name .. '.' .. strongest_extension.name\n  end\nend", "  local\
    \ strongest = {}\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if extension_strength == nil then\n      extension_strength = strength\n\
    \    elseif extension_strength > strength then\n      extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest = nil\n  local strongest_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_strength then\n  \
    \    strongest = class_name\n      strongest_strength = strength\n    end\n  end\n\
    \  return strongest\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = #cap - #sm\n    if cap_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - #strongest_extension) + strongest_extension\nend", "    local strongest_extension\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        local strength = cap - sm\n        if strength > 0 then\n\
    \            table.insert(strongest_extension, extension)\n        end\n    end\n\
    \    local strongest_extension_strength = #strongest_extension\n    if strongest_extension_strength\
    \ > 1 then\n        local first_extension = strongest_extension[1]\n        for\
    \ _, extension in ipairs(strongest_extension) do\n            if extension:sub(1,\
    \ #extension) == first_extension then\n                strongest_extension_strength\
    \ = strongest_extension_strength - 1\n            end\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension[1]\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end", "\tlocal max_strength = -1\n\tlocal max_extension = ''\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = {}\n  local cap_counter = 0\n  local sml_counter = 0\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap_counter = cap_counter + #extension:upper()\n\
    \    local sml_counter = sml_counter + #extension:lower()\n  end\n  local strength\
    \ = cap_counter - sml_counter\n  if strength > 0 then\n    local cap_counter =\
    \ 0\n    local sml_counter = 0\n    for _, extension in ipairs(extensions) do\n\
    \      local cap_counter = cap_counter + #extension:upper()\n      local sml_counter\
    \ = sml_counter + #extension:lower()\n    end\n    local strength = cap_counter\
    \ - sml_counter\n    if strength > 0 then\n      local cap_counter = 0\n     \
    \ local sml_counter = 0\n      for _, extension in ipairs(extensions) do\n   \
    \     local cap_counter = cap_counter + #extension:upper()\n        local sml_counter\
    \ = sml_counter + #extension:lower()\n      end\n      local strength = cap_counter\
    \ - sml_counter\n      if strength > 0 then\n        local cap_counter = 0\n \
    \       local sml_counter = 0\n        for _, extension in ipairs(extensions)\
    \ do\n          local cap_counter = cap_counter + #extension:upper()\n       \
    \   local sml_counter = sml_counter + #extension:lower()\n        end\n      \
    \  local strength = cap_counter - sml_counter\n        if strength > 0 then\n\
    \          local cap_counter = 0\n          local sml_counter = 0\n          for\
    \ _, extension in ipairs(extensions) do\n            local cap_counter = cap_counter\
    \ + #extension:upper()\n            local sml_counter = sml_counter + #extension:lower()\n\
    \          end\n          local strength = cap_counter - sml_counter\n       \
    \   if strength > 0 then\n            local cap_counter = 0\n            local\
    \ sml_counter = 0\n            for _, extension in ipairs(extensions) do\n   \
    \           local cap_counter = cap_counter + #extension:upper()\n           \
    \   local sml_counter = sml_counter + #extension:lower()\n            end\n  \
    \          local strength = cap_counter - sml_counter\n            if strength\
    \ > 0 then\n              local cap_counter = 0\n              local sml_counter\
    \ = 0\n              for _, extension in ipairs(extensions) do\n             \
    \   local cap_counter = cap_counter + #extension:upper()\n                local\
    \ sml_counter = sml_counter + #extension:lower()\n              end\n        \
    \      local strength = cap", "    local strongest_extensions = {}\n    for _,\
    \ extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        local strength = cap - sm\n        if strength > 0 then\n\
    \            table.insert(strongest_extensions, {extension, strength})\n     \
    \   end\n    end\n    table.sort(strongest_extensions, function(a, b) return a[2]\
    \ > b[2] end)\n    return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = {}\n  local max_strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength == 0 then\n      table.insert(strongest, extension)\n\
    \    elseif strength > 0 then\n      table.insert(strongest, extension)\n    \
    \  table.insert(strongest, class_name .. '.' .. extension)\n    end\n  end\n \
    \ table.sort(strongest)\n  return strongest[1]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
