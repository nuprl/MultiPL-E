name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n\
    \  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = function(t, i) assert(u[i]); return\
    \ t[i] end})\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return u\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u })\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
