name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n-- the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- array = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ list is equal to the length of operand list minus one.\n-- Operand is a list of\
  \ of non-negative integers.\n-- Operator list has at least one operator, and operand\
  \ list has at least two operands.\nlocal function do_algebra(operator, operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = 0\n  local index = 1\n  while index <= #operand do\n\
    \    local operand1 = operand[index]\n    local operand2 = operand[index + 1]\n\
    \    local operator1 = operator[index]\n    local operator2 = operator[index +\
    \ 1]\n    local result = result + (operand1 * operator2) - (operand2 * operator1)\n\
    \    index = index + 2\n  end\n  return result\nend", "    local result = operand[1]\n\
    \    for i = 2, #operand do\n        result = operator[operator](result, operand[i])\n\
    \    end\n    return result\nend", "\tlocal result = 0\n\tlocal i = 0\n\tlocal\
    \ j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o\
    \ = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t =\
    \ 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\t\
    local e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 1\n\tlocal\
    \ j = 1\n\tlocal k = 1\n\tlocal l = 1\n\tlocal m = 1\n\tlocal n = 2\n\tlocal o\
    \ = 2\n\tlocal p = 3\n\tlocal q = 4\n\tlocal r = 5\n\tlocal s = 6\n\tlocal t =\
    \ 7\n\tlocal u = 8\n\tlocal v = 9\n\tlocal w = 10\n\tlocal x = 11\n\tlocal y =\
    \ 12\n\tlocal z = 13\n\tlocal a = 14\n\tlocal b = 15\n\tlocal c = 16\n\tlocal\
    \ d = 17\n\tlocal e = 18\n\tlocal f = 19\n\tlocal g = 20\n\tlocal h = 21\n\tlocal\
    \ i = 2\n\tlocal j = 2\n\tlocal k = 2\n\tlocal l = 2\n\tlocal m = 2\n\tlocal n\
    \ = 2\n\tlocal o = 2\n\tlocal p = 3\n\tlocal q = 4\n\tlocal r = 5\n\tlocal s =\
    \ 6\n\tlocal t = 7\n\tlocal u = 8\n\tlocal v = 9\n\tlocal w = 10\n\tlocal x =\
    \ 11\n\tlocal y = 12\n\tlocal z = 13\n\tlocal a = 14\n\tlocal b = 15\n\tlocal\
    \ c = 16\n\tlocal d = 17\n\tlocal e = 18\n\tlocal f = 19\n\tlocal g = 20\n\tlocal\
    \ h = 21\n\tlocal i = 2\n\tlocal j = 2\n\tlocal k = 2\n\tlocal l = 2\n\tlocal\
    \ m = 2\n\tlocal n = 2\n\tlocal o = 2\n\tlocal p = 3\n\tlocal q = 4\n\tlocal r\
    \ = 5\n\tlocal s = 6\n\tlocal t = 7\n\tlocal u = 8\n\tlocal v = 9\n\tlocal w =\
    \ 10\n\tlocal x = 11\n\tlocal y = 12\n\tlocal z = 13\n\tlocal a = 14\n\tlocal\
    \ b = 15\n\tlocal c = 16\n\tlocal d = 17\n\tlocal e = 18\n\tlocal f = 19", " \
    \   local result = nil\n    local operator_count = #operator\n    local operand_count\
    \ = #operand\n    local operator_pointer = 1\n    local operand_pointer = 1\n\
    \    local operator_pointer_limit = operator_count - 1\n    local operand_pointer_limit\
    \ = operand_count - 1\n    while operator_pointer <= operator_pointer_limit and\
    \ operand_pointer <= operand_pointer_limit do\n        local operator = operator[operator_pointer]\n\
    \        local operand = operand[operand_pointer]\n        local operator_function\
    \ = operators[operator]\n        local operand_function = operands[operand]\n\
    \        local result = operator_function:call(operand)\n        operand_pointer\
    \ = operand_pointer + 1\n    end\n    return result\nend", "  local result = operand[1]\n\
    \  for i = 2, #operand do\n    result = operator[operator](result, operand[i])\n\
    \  end\n  return result\nend", "\tlocal result = 0\n\tlocal i = 0\n\tlocal j =\
    \ 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\
    \tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\t\
    local u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal\
    \ z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e\
    \ = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j =\
    \ 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\
    \tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\t\
    local u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal\
    \ z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e\
    \ = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j =\
    \ 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\
    \tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\t\
    local u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal\
    \ z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e\
    \ = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal j =\
    \ 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\
    \tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\t\
    local u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal\
    \ z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e\
    \ = 0\n\tlocal f = 0\n\tlocal g = 0\n", "  local result = operand[1]\n  for i\
    \ = 2, #operand do\n    result = operator[operator](result, operand[i])\n  end\n\
    \  return result\nend", "    local result = 0\n    for i = 1, #operator do\n \
    \       result = result + operand[i-1] * operator[i]\n    end\n    return result\n\
    end", "\tlocal result = operand[1]\n\tfor i = 2, #operand do\n\t\tresult = operator[operator](result,\
    \ operand[i])\n\tend\n\treturn result\nend", "\tlocal result = 0\n\tlocal index\
    \ = 1\n\twhile index <= #operator do\n\t\tlocal operator = operator[index]\n\t\
    \tlocal operand = operand[index]\n\t\tresult = result + operand * operator\n\t\
    \tindex = index + 1\n\tend\n\treturn result\nend", "\tlocal result = operand[1]\n\
    \tfor i = 2, #operand do\n\t\tresult = operator[operator](result, operand[i])\n\
    \tend\n\treturn result\nend", "  local result = operand[1]\n  for i = 2, #operand\
    \ do\n    result = operator[operator](result, operand[i])\n  end\n  return result\n\
    end", "    local result = operand[1]\n    for i = 2, #operand do\n        result\
    \ = operator[operator](result, operand[i])\n    end\n    return result\nend",
  "\tlocal result = 0\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l = 0\n\
    \tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\t\
    local r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal\
    \ w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal A = 0\n\tlocal B\
    \ = 0\n\tlocal C = 0\n\tlocal D = 0\n\tlocal E = 0\n\tlocal F = 0\n\tlocal G =\
    \ 0\n\tlocal H = 0\n\tlocal I = 0\n\tlocal J = 0\n\tlocal K = 0\n\tlocal L = 0\n\
    \tlocal M = 0\n\tlocal N = 0\n\tlocal O = 0\n\tlocal P = 0\n\tlocal Q = 0\n\t\
    local R = 0\n\tlocal S = 0\n\tlocal T = 0\n\tlocal U = 0\n\tlocal V = 0\n\tlocal\
    \ W = 0\n\tlocal X = 0\n\tlocal Y = 0\n\tlocal Z = 0\n\tlocal AA = 0\n\tlocal\
    \ AB = 0\n\tlocal AC = 0\n\tlocal AD = 0\n\tlocal AE = 0\n\tlocal AF = 0\n\tlocal\
    \ AG = 0\n\tlocal AH = 0\n\tlocal AI = 0\n\tlocal AJ = 0\n\tlocal AK = 0\n\tlocal\
    \ AL = 0\n\tlocal AM = 0\n\tlocal AN = 0\n\tlocal AO = 0\n\tlocal AP = 0\n\tlocal\
    \ AQ = 0\n\tlocal AR = 0\n\tlocal AS = 0\n\tlocal AT = 0\n\tlocal AU = 0\n\tlocal\
    \ AV = 0\n\tlocal AW = 0\n\tlocal AX = 0\n\tlocal AY = 0\n\tlocal AZ = 0\n\tlocal\
    \ AA = 0\n\tlocal AB = 0\n\tlocal AC = 0\n\tlocal AD = 0\n\tlocal AE = 0\n\tlocal\
    \ AF = 0\n\tlocal AG = 0\n\tlocal AH = 0\n\tlocal AI = 0\n\tlocal AJ = 0\n\tlocal\
    \ AK = 0\n\tlocal AL = 0\n\tlocal AM = 0\n\tlocal AN = 0\n\tlocal AO = 0\n\tlocal\
    \ AP = 0\n\tlocal AQ = 0\n\tlocal AR = 0\n\tlocal AS = 0\n\tlocal AT = 0\n\tlocal\
    \ AU = 0\n\tlocal AV = 0\n\tlocal AW = 0\n\tlocal AX = 0\n\tlocal AY = 0\n\tlocal\
    \ AZ = 0\n\tlocal AA = 0\n\tlocal AB = 0\n\tlocal AC = 0\n\tlocal AD = 0\n\tlocal\
    \ AE = 0\n\tlocal ", "  local result = operand[1]\n  for i = 2, #operand do\n\
    \    result = operator[operator](result, operand[i])\n  end\n  return result\n\
    end", "    local result = nil\n    local operator_count = #operator\n    local\
    \ operand_count = #operand\n    local operator_stack = { }\n    local operand_stack\
    \ = { }\n    local operator_stack_size = #operator_stack\n    local operand_stack_size\
    \ = #operand_stack\n    local operator_stack_index = 0\n    local operand_stack_index\
    \ = 0\n    local operator_stack_value = nil\n    local operand_stack_value = nil\n\
    \    local operator_stack_value = nil\n    local operand_stack_value = nil\n \
    \   local operator_stack_pointer = nil\n    local operand_stack_pointer = nil\n\
    \    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    local operator_stack_pointer_value = nil\n    local operand_stack_pointer_value\
    \ = nil\n    ", "\tlocal result = operand[1]\n\tfor i = 2, #operand do\n\t\tresult\
    \ = operator[operator](result, operand[i])\n\tend\n\treturn result\nend", "  local\
    \ result = operand[1]\n  for i = 2, #operand do\n    result = operator[operator](result,\
    \ operand[i])\n  end\n  return result\nend", "\tlocal result = operand[1]\n\t\
    for i = 2, #operand do\n\t\tresult = operator[operator](result, operand[i])\n\t\
    end\n\treturn result\nend", "    local result = operand[1]\n    for i = 2, #operand\
    \ do\n        result = operator[operator](result, operand[i])\n    end\n    return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
