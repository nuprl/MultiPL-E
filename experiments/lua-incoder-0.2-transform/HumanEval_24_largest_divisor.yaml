name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2,\
    \ n do\n    if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend", "    local max_div = nil\n\
    \    local max_div_n = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_div == nil then\n                max_div = i\n             \
    \   max_div_n = n\n            else\n                if max_div_n * i > n then\n\
    \                    max_div = i\n                    max_div_n = n\n        \
    \        end\n            end\n        end\n    end\n    return max_div\nend",
  "    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end", "  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2,\
    \ n do\n    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend", "    local max_divisor = 1\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            if max_divisor < i then\n\
    \                max_divisor = i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_remainder\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            -- If n is\
    \ divisible by i, then n is divisible by max_divisor\n            max_divisor\
    \ = i\n            max_divisor_remainder = n % i\n        end\n    end\n    return\
    \ max_divisor\nend", "  local max_div = math.floor(n/2) + 1\n  local max_div2\
    \ = math.floor(n/max_div)\n  while max_div2 > max_div do\n    max_div = max_div2\n\
    \    max_div2 = math.floor(n/max_div)\n  end\n  return max_div\nend", "  local\
    \ max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder = n % i\n\
    \    end\n  end\n  return max_divisor\nend", "  local max_divisor = 1\n  local\
    \ max_divisor_remainder = 1\n  for i = 2, n do\n    if n % i == 0 then\n     \
    \ local divisor = i\n      local divisor_remainder = n % i\n      if divisor_remainder\
    \ > max_divisor_remainder then\n        max_divisor = divisor\n        max_divisor_remainder\
    \ = divisor_remainder\n      end\n    end\n  end\n  return max_divisor\nend",
  "  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp = 1\n\
    \  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  local max_divisor_ppppp\
    \ = 1\n  local max_divisor_pppppp = 1\n  local max_divisor_ppppppp = 1\n  local\
    \ max_divisor_pppppppp = 1\n  local max_divisor_ppppppppp = 1\n  local max_divisor_ppppppppp\
    \ = 1\n  local max_divisor_pppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n\
    \  local max_divisor_ppppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppppp = 1\n  local max_divisor_ppppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp = 1\n\
    \  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppp", "    local max_divisor =\
    \ 1\n    for i = 2, n do\n        if n % i == 0 then\n            max_divisor\
    \ = i\n        end\n    end\n    return max_divisor\nend", "    local max_divisor\
    \ = 1\n    local max_divisor_index = 1\n    for i = 2, n do\n        if n % i\
    \ == 0 then\n            if max_divisor < i then\n                max_divisor\
    \ = i\n                max_divisor_index = i\n            end\n        end\n \
    \   end\n    return max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_value\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_value\
    \ = n\n            end\n        end\n    end\n    return max_divisor_value\nend",
  "  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end", " \
    \   local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n \
    \           if max_divisor < i then\n                max_divisor = i\n       \
    \     end\n        end\n    end\n    return max_divisor\nend", "  local max_divisor\
    \ = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      local divisor_value = i\n      if divisor_value > max_divisor then\n  \
    \      max_divisor = divisor_value\n      end\n      if divisor_value == max_divisor_value\
    \ then\n        max_divisor_value = i\n      end\n    end\n  end\n  return max_divisor_value\n\
    end", "  local max_divisor = 1\n  local max_divisor_remainder = n\n  while max_divisor_remainder\
    \ > 1 do\n    max_divisor = max_divisor + 1\n    max_divisor_remainder = max_divisor_remainder\
    \ / max_divisor\n  end\n  return max_divisor\nend", "    local max_divisor = 1\n\
    \    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            local divisor = i\n            while n % divisor == 0 do\n\
    \                divisor = divisor + 1\n            end\n            if divisor\
    \ > max_divisor then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = n % divisor\n            end\n        end\n    end\n    return max_divisor\n\
    end", "    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            local divisor = i\n   \
    \         local divisor_remainder = n % i\n            if divisor_remainder >\
    \ max_divisor_remainder then\n                max_divisor = divisor\n        \
    \        max_divisor_remainder = divisor_remainder\n            end\n        end\n\
    \    end\n    return max_divisor\nend", "  local max_divisor = 1\n  local max_divisor_remainder\
    \ = 1\n  local max_divisor_remainder_pow = 1\n  for i = 2, n do\n    local divisor\
    \ = i\n    local remainder = n % divisor\n    if remainder == 0 then\n      max_divisor\
    \ = divisor\n      max_divisor_remainder = remainder\n      max_divisor_remainder_pow\
    \ = i\n    end\n  end\n  return max_divisor * max_divisor_remainder * max_divisor_remainder_pow\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
