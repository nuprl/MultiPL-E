language: lua
name: HumanEval_12_longest
results:
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == strings[longest]\
    \ then\n      longest = i\n    end\n  end\n  return strings[longest]\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqcfkj7j.lua:26:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbqcfkj7j.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750513
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750513
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = string.len(strings[i])\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wiebeql.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmp9wiebeql.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longest_len = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if longest_len > #str then\n      longest, longest_len = str, #str\n\
    \    end\n  end\n  return longest or strings[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptftha9zc.lua:24:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmptftha9zc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2lsydw2.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpj2lsydw2.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpj2lsydw2.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then return end\n  local longest_len =\
    \ strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return longest_len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n28n_dj.lua:24:\
    \ expected: \"x\"\nactual: 1\nstack traceback:\n\t/tmp/tmp0n28n_dj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #longest[1] < #strings[i][1]\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalet8vhl.lua:15:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpalet8vhl.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpalet8vhl.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_length\
    \ = strings[1]:len()\n  local longest_string = strings[1]\n  for i = 2, #strings\
    \ do\n    local current_length = strings[i]:len()\n    if current_length > longest_length\
    \ then\n      longest_length = current_length\n      longest_string = strings[i]\n\
    \    end\n  end\n  return longest_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longest_len = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if longest_len > #str then\n      longest, longest_len = str, #str\n\
    \    end\n  end\n  return longest or strings[#strings]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy_ulwsh.lua:23:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpxy_ulwsh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = -1\n  local longest_string\n  for _,\
    \ string in ipairs(strings) do\n    local len = #string\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqiiq1hs6.lua:27:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqiiq1hs6.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750513
- exit_code: 0
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in pairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      return longest\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhqc1qym.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpxhqc1qym.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
- exit_code: 1
  program: "-- Out of list of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input list is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8twbckl5.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp8twbckl5.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750513
