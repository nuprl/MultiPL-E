name: HumanEval_120_maximum
language: lua
prompt: "-- Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>>\
  \ maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4,\
  \ 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n\
  -- {2}\n-- Note:\n-- 1. The length of the array will be in the range of [1, 1000].\n\
  -- 2. The elements in the array will be in the range of [-1000, 1000].\n-- 3. 0\
  \ <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Base case\n  if k == 0 then\n    return arr\n  end", "  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      table.insert(result, max)\n      max = arr[i]\n    end\n  end\n\
    \  return result\nend", "  assert(k > 0 and k <= #arr, 'k should be greater than\
    \ 0 and less than or equal to the length of the array')\n  local max_arr = {}\n\
    \  local max_idx = 1\n  for i = 1, k do\n    local max_val = arr[i]\n    for j\
    \ = 1, i do\n      if arr[j] > max_val then\n        max_val = arr[j]\n      \
    \  max_idx = j\n      end\n    end\n    max_arr[i] = max_val\n  end\n  return\
    \ max_arr\nend", "  local result = {}\n  local max = 0\n  local i = 1\n  while\
    \ i <= k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n    i = i\
    \ + 1\n  end\n  local j = 1\n  while j <= k do\n    if arr[j] > max then\n   \
    \   max = arr[j]\n    end\n    j = j + 1\n  end\n  local i = 1\n  while i <= k\
    \ do\n    if arr[i] < max then\n      table.insert(result, max)\n    end\n   \
    \ i = i + 1\n  end\n  return result\nend", "  local result = {}\n  local max =\
    \ 0\n  local i = 1\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  local j =\
    \ 1\n  while j <= k do\n    local element = arr[j]\n    if element > max then\n\
    \      max = element\n    end\n    j = j + 1\n  end\n  local i = 1\n  while i\
    \ <= k do\n    local element = arr[i]\n    if element > max then\n      max =\
    \ element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n    i = i\
    \ + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element >\
    \ max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <= k\
    \ do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do", "  -- Base case\n  if k ==\
    \ 1 then\n    return arr\n  end\n  -- Find the max element in the array\n  local\
    \ max = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max then\n      max = arr[i]\n\
    \    end\n  end\n  -- Recursive case\n  local new_arr = {}\n  for i = 2, #arr\
    \ do\n    if arr[i] > max then\n      new_arr[i] = arr[i]\n    else\n      new_arr[i]\
    \ = max\n    end\n  end\n  return new_arr\nend", "  assert(k > 0 and k <= #arr,\
    \ \"k should be greater than 0 and less than or equal to #arr\")\n  local result\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    local element = arr[i]\n    if\
    \ element > max then\n      max = element\n    end\n  end\n  for i = 1, k do\n\
    \    table.insert(result, max)\n  end\n  return result\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element in\
    \ the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if\
    \ arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n  \n\
    \  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n \
    \ for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend", "  local results = {}\n\
    \  local max = 0\n  local index = 0\n  local size = #arr\n  while index <= size\
    \ do\n    local element = arr[index]\n    if max < element then\n      max = element\n\
    \      index = index + 1\n    end\n    if index == k then\n      results[#results+1]\
    \ = max\n      max = 0\n      index = 1\n    end\n  end\n  if max > 0 then\n \
    \   results[#results+1] = max\n  end\n  return results\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end", "  local result = {}\n  local pos =\
    \ 1\n  local len = #arr\n  local max_val = arr[pos]\n  while pos < len do\n  \
    \  if arr[pos] > max_val then\n      max_val = arr[pos]\n    end\n    pos = pos\
    \ + 1\n  end\n  \n  while k >= 1 do\n    table.insert(result, max_val)\n    k\
    \ = k - 1\n    pos = pos + 1\n    max_val = arr[pos]\n    while pos < len do\n\
    \      if arr[pos] > max_val then\n        max_val = arr[pos]\n      end\n   \
    \   pos = pos + 1\n    end\n  end\n  \n  return result\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end\n  \n  -- Get the first k elements\n\
    \  local max_arr = arr[1]\n  for i = 2, k do\n    max_arr = max_arr > arr[i] and\
    \ arr[i] or max_arr\n  end\n  \n  -- Get the remaining elements\n  local max_arr2\
    \ = arr[k]\n  for i = k + 1, #arr do\n    max_arr2 = max_arr2 > arr[i] and arr[i]\
    \ or max_arr2\n  end\n  \n  -- Return the merged array\n  return max_arr and {max_arr\
    \ or max_arr2} or max_arr\nend", "  -- Base case\n  if k == 1 then\n    return\
    \ arr\n  end\n  -- Get the middle element\n  local middle = math.floor((k - 1)\
    \ / 2)\n  -- Get the maximum element in the left half\n  local left_max = maximum(arr,\
    \ middle - 1)\n  -- Get the maximum element in the right half\n  local right_max\
    \ = maximum(arr, middle + 1)\n  -- Combine the two maximum elements\n  local max_element\
    \ = left_max > right_max and left_max or right_max\n  -- Return the combined maximum\
    \ element\n  return arr:sub(1, middle + 1):append(max_element)\nend", "  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  \n  local max_arr = {}\n  local max_idx = 1\n  \n  for i = 1, k do\n    local\
    \ max_val = arr[max_idx]\n    \n    for j = 1, #arr do\n      if arr[j] > max_val\
    \ then\n        max_val = arr[j]\n      end\n    end\n    \n    max_arr[i] = max_val\n\
    \    max_idx = max_idx + 1\n  end\n  \n  return max_arr\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end\n  -- Find the max number in the first\
    \ k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i] >\
    \ max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Find the\
    \ max number in the remaining elements\n  local max_element_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  -- Return the max element and the max element rest\n\
    \  return {max_element, {max_element_rest}}\nend", "    local max_arr = {}\n \
    \   local max_len = -1\n    for i = 1, k do\n        max_len = max_len > arr[i]\
    \ and max_len or arr[i]\n    end\n    for i = 1, k do\n        local max_element\
    \ = arr[i]\n        for j = 1, k do\n            if arr[j] > max_element then\n\
    \                max_element = arr[j]\n            end\n        end\n        max_arr[i]\
    \ = max_element\n    end\n    return max_arr\nend", "  assert(k > 0 and k <= #arr,\
    \ 'k should be an integer and greater than 0')\n  local max_arr = {}\n  local\
    \ max_idx = 1\n  for i = 1, k do\n    if arr[i] > max_arr[i] then\n      max_arr[i]\
    \ = arr[i]\n      max_idx = i\n    end\n  end\n  return max_arr\nend", "  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number in the\
    \ first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Find the\
    \ max number in the remaining elements\n  local max_element_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  -- Return the max number in the first k elements\
    \ and the max number in the remaining elements\n  return max_element, max_element_rest\n\
    end", "  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n\
    \    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  table.insert(result, max)\n  return result\n\
    end", "  assert(k > 0 and k <= #arr, 'k should be an integer and k > 0 and k <=\
    \ #arr')\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i]\
    \ > max then\n      table.insert(result, max)\n      max = arr[i]\n    end\n \
    \ end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
