name: HumanEval_125_split_words
language: lua
prompt: "-- Given a string of words, return a list of words split on whitespace, if\
  \ no whitespaces exists in the text you\n-- should split on commas ',' if no commas\
  \ exists you should return the number of lower-case letters with odd order in the\n\
  -- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n-- >>>\
  \ split_words('Hello world!')\n-- {'Hello', 'world!'}\n-- >>> split_words('Hello,world!')\n\
  -- {'Hello', 'world!'}\n-- >>> split_words('abcdef')\n-- 3\nlocal function split_words(txt)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
  \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
  \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
  \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
  \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
  \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\\
    244]*[%z\\1-\\127\\194-\\244]\", \"%z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"\
    %z\"):gsub(\"[%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"%z\")\n  local\
    \ letters = {}\n  for i = 1, #words do\n    table.insert(letters, words[i])\n\
    \  end\n  return letters\nend", "    local words = { }\n    local words = txt:gsub(\"\
    [%z\\1-\\127\\194-\\244\\377\\370-\\377\\376\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\377\\\
    377\\377\\377\\377\\377\\377\\377", "    local words = { }\n    local num_words\
    \ = 1\n    local last_word = ''\n    local last_word_len = 0\n    local last_word_is_word\n\
    \    local last_word_is_comma\n    for c in txt:gmatch('([a-z]+)(%d+)') do\n \
    \       local word_len = tonumber(c) - tonumber(last_word)\n        if word_len\
    \ > 0 then\n            if last_word_is_word then\n                table.insert(words,\
    \ last_word)\n                num_words = num_words + 1\n            end\n   \
    \         last_word_len = word_len\n            last_word_is_word = true\n   \
    \         last_word_is_comma = false\n        else\n            last_word_is_word\
    \ = false\n            last_word_is_comma = true\n        end\n        last_word\
    \ = c\n    end\n    if last_word_is_word then\n        table.insert(words, last_word)\n\
    \        num_words = num_words + 1\n    end\n    return num_words\nend", "  local\
    \ words = { }\n  for w in string.gmatch(txt, \"([^,]+)\") do\n    table.insert(words,\
    \ w)\n  end\n  return table.concat(words) or #words\nend", "  local words = {\
    \ }\n  for w in txt:gmatch(\"[^ ]+\") do\n    table.insert(words, w)\n  end\n\
    \  return table.concat(words, \" \")\nend", "  local words = { }\n  local num_letters\
    \ = 0\n  for w in txt:gmatch(\"%w+\") do\n    table.insert(words, w)\n    num_letters\
    \ = num_letters + #w\n  end\n  if num_letters % 2 ~= 0 then\n    return num_letters\
    \ / 2\n  else\n    return num_letters / 2 + 1\n  end\nend", "    local words =\
    \ {}\n    local num_words = 0\n    for word in string.gmatch(txt, \"([^ ,]+)\"\
    ) do\n        table.insert(words, word)\n        num_words = num_words + 1\n \
    \   end\n    return num_words, words\nend", "  local words = { }\n  local num_words\
    \ = 0\n  local num_letters = 0\n  local num_commas = 0\n  local num_spaces = 0\n\
    \  local num_letters_with_odd_order = 0\n  local num_spaces_with_odd_order = 0\n\
    \  local num_letters_with_even_order = 0\n  local num_spaces_with_even_order =\
    \ 0\n  for word in txt:gmatch(\"[^ ]+\") do\n    local letters = word:gsub(\"\
    %S+\", \" \")\n    local spaces = word:gsub(\"%S+\", \" \")\n    local commas\
    \ = word:gsub(\"%S+\", \",\")\n    local spaces_with_odd_order = spaces:gsub(\"\
    %S+\", \" \"):gsub(\"%S+\", \" \")\n    local spaces_with_even_order = spaces:gsub(\"\
    %S+\", \" \"):gsub(\"%S+\", \" \")\n    local letters_with_odd_order = letters:gsub(\"\
    %S+\", \" \"):gsub(\"%S+\", \" \")\n    local letters_with_even_order = letters:gsub(\"\
    %S+\", \" \"):gsub(\"%S+\", \" \")\n    local num_letters = num_letters + #letters\n\
    \    local num_spaces = num_spaces + #spaces\n    local num_commas = num_commas\
    \ + #commas\n    local num_words = num_words + 1\n    words[#words + 1] = word\n\
    \    num_letters_with_odd_order = num_letters_with_odd_order + #letters_with_odd_order\n\
    \    num_spaces_with_odd_order = num_spaces_with_odd_order + #spaces_with_odd_order\n\
    \    num_letters_with_even_order = num_letters_with_even_order + #letters_with_even_order\n\
    \    num_spaces_with_even_order = num_spaces_with_even_order + #spaces_with_even_order\n\
    \  end\n  return { words, num_words, num_letters, num_spaces, num_commas,\n  \
    \  num_letters_with_odd_order, num_spaces_with_odd_order,\n    num_letters_with_even_order,\
    \ num_spaces_with_even_order }\nend", "  local words = { }\n  local num_words\
    \ = 0\n  local num_letters = 0\n  local letters = {}\n  for c in txt:gmatch(\"\
    [%w-]+\") do\n    table.insert(letters, c)\n    table.insert(words, c)\n    num_letters\
    \ = num_letters + #c\n  end\n  if #letters > 0 then\n    num_words = num_words\
    \ + 1\n  end\n  return num_words, words\nend", "  local words = { }\n  local num_words\
    \ = 0\n  local num_letters = 0\n  for w in txt:gmatch(\"[^ ]+\") do\n    local\
    \ letters = w:gsub(\"%S+\", \"\")\n    local num_letters = num_letters + #letters\n\
    \    words[num_words] = w\n    num_words = num_words + 1\n  end\n  if num_letters\
    \ % 2 ~= 0 then\n    return num_letters / 2\n  else\n    return num_letters\n\
    \  end\nend", "  local words = { }\n  local num_letters = 0\n  for w in txt:gmatch(\"\
    [^ ]+\") do\n    table.insert(words, w)\n    num_letters = num_letters + #w\n\
    \  end\n  if num_letters % 2 ~= 0 then\n    return num_letters / 2\n  else\n \
    \   return num_letters / 2 + 1\n  end\nend", "    local words = { }\n    local\
    \ num_words = 0\n    local num_letters = 0\n    local num_commas = 0\n    local\
    \ num_spaces = 0\n    local num_letters_with_odd_order = 0\n    local num_letters_with_even_order\
    \ = 0\n    local num_letters_with_odd_order_after_comma = 0\n    local num_letters_with_even_order_after_comma\
    \ = 0\n    local num_letters_with_odd_order_after_space = 0\n    local num_letters_with_even_order_after_space\
    \ = 0\n    local num_letters_with_odd_order_after_comma_and_space = 0\n    local\
    \ num_letters_with_even_order_after_comma_and_space = 0\n    local num_letters_with_odd_order_after_space_and_comma\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma = 0\n    local\
    \ num_letters_with_odd_order_after_comma_and_space_and_space = 0\n    local num_letters_with_even_order_after_comma_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_space_and_comma_and_space =\
    \ 0\n    local num_letters_with_even_order_after_space_and_comma_and_space = 0\n\
    \    local num_letters_with_odd_order_after_comma_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_comma_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_space_and_comma_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_comma_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_space_and_comma_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma_and_space_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_comma_and_space_and_space_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma_and_space_and_space_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_space_and_comma_and_space_and_space_and_space_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_even_order_after_space_and_comma_and_space_and_space_and_space_and_space_and_space_and_space_and_space\
    \ = 0\n    local num_letters_with_odd_order_after_comma_and_space_and_space_and_space_and_space_and_space_and_space_and_",
  "    local words = { }\n    local num_letters = 0\n    for word in string.gmatch(txt,\
    \ \"([^,]+)\") do\n        table.insert(words, word)\n        num_letters = num_letters\
    \ + #word\n    end\n    return num_letters, words\nend", "  local words = txt:gsub(\"\
    [%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\194-\\244]\", \"\
    %z\"):gsub(\"[%z\\1-\\127\\194-\\244]\", \"%z\")\n  local num_words = {}\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local num_letters = #word\n\
    \    if num_letters % 2 == 1 then\n      num_letters = num_letters + 1\n    end\n\
    \    num_words[i] = num_letters\n  end\n  return num_words\nend", "    local words\
    \ = txt:gsub(\"[%z\\1-\\127\\194-\\244][%z\\1-\\127\\194-\\244]*[%z\\1-\\127\\\
    194-\\244]\", \"%1\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244][%z\\\
    1-\\127\\194-\\244]*\", \"\")\n    words = words:gsub(\"[%z\\1-\\127\\194-\\244]\"\
    , \"\")\n    words = words:gsub(\"%z\", \"\")\n    return words\nend", "  local\
    \ words = { }\n  local num_words = 0\n  local num_letters = 0\n  for word in txt:gmatch(\"\
    [^ ]+\") do\n    table.insert(words, word)\n    num_words = num_words + 1\n  \
    \  num_letters = num_letters + #word\n  end\n  if num_words == 0 then\n    return\
    \ num_letters\n  else\n    return num_letters - #txt\n  end\nend", "  local words\
    \ = { }\n  local num_letters = 0\n  for letter in string.gmatch(txt, \"([^ ,]+)\"\
    ) do\n    table.insert(words, letter)\n    num_letters = num_letters + 1\n  end\n\
    \  if num_letters % 2 ~= 0 then\n    return num_letters / 2\n  else\n    return\
    \ num_letters\n  end\nend", "  local words = { }\n  local words = string.gsub(txt,\
    \ \"[^a-zA-Z]\", \" \")\n  local words = string.gsub(words, \" \", \"+\")\n  words\
    \ = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\"\
    , \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n  words = string.gsub(words,\
    \ \"[,]+\", \" \")\n  words = string.gsub(words, \"[,]+\", \" \")\n", "  local\
    \ words = txt:gmatch(\"[%w-]+\")\n  if words == nil then\n    return nil\n  else\n\
    \    local num_words = #words\n    local num_comma = #words - num_words\n    local\
    \ num_lower = #words - num_words - num_comma\n    local num_odd = #words - num_words\
    \ - num_comma - num_lower\n    if num_comma > 0 then\n      words = words[1] ..\
    \ ',' .. words[num_comma + 1]\n    end\n    if num_lower > 0 then\n      words\
    \ = words[1] .. ',' .. words[num_lower + 1]\n    end\n    if num_odd > 0 then\n\
    \      words = words[1] .. ',' .. words[num_odd + 1]\n    end\n    return words\n\
    \  end\nend", "  local words = txt:gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \"\
    ,\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"\
    [%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\"\
    , \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"\
    ):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"\
    [%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\"\
    , \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"\
    ):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"\
    [%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\"\
    , \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"\
    ):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"\
    [%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\"\
    , \" \"):gsub(\"[%z'-]\", \",\"):gsub(\"[%z'-]\", \" \"):gsub(\"[%z'-]\", \",\"\
    ):gsub(\""]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
