name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  local result = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n\
    \      result = result * i\n    end\n    n = n / 2\n  end\n  return result\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  else\n    return 0\n  end\nend", "  if n < 10 then\n    return n\n\
    \  else\n    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n\
    \    return digits*10 + digits(remainder)\n  end\nend", "  if n < 0 then\n   \
    \ return 0\n  end\n  local product = 1\n  local digit\n  for digit = 1, n do\n\
    \    product = product * digit\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits =\
    \ math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n  end\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n   \
    \ digit = n * 10 + digit\n    n = math.floor(n/10)\n  end\n  return digit\nend",
  "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n    digits = digits ..\
    \ string.format(\"%d\", n % 10)\n    n = math.floor(n / 10)\n  end\n  if n ==\
    \ 0 then\n    return 0\n  end\n  return tonumber(digits)\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  local result = 1\n  for i = 1, n do\n\
    \    if n % 2 == 1 then\n      result = result * 2\n    end\n    n = n / 2\n \
    \ end\n  return result\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000\
    \ then\n    return n * 3\n  elseif n < 10000 then\n    return n * 5\n  elseif\
    \ n < 100000 then\n    return n * 7\n  elseif n < 1000000 then\n    return n *\
    \ 9\n  elseif n < 10000000 then\n    return n * 11\n  elseif n < 100000000 then\n\
    \    return n * 13\n  elseif n < 1000000000 then\n    return n * 17\n  else\n\
    \    return n * 19\n  end\nend", "  if n < 10 then\n    return n\n  elseif n <\
    \ 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n    return 0\n  end\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n  \
    \  return digits*10 + digits(remainder)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit\
    \ = digit * 10 + n % 10\n    n = n / 10\n  end\n  return digit\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product\
    \ * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if n < 10 then\n\
    \    return n\n  else\n    local digits = math.floor(n/10)\n    local remainder\
    \ = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n\
    \    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n % 100)\n\
    \  else\n    return 0\n  end\nend", "  if n == 0 then\n    return 0\n  end\n \
    \ local n1 = math.floor(n)\n  local n2 = n - n1\n  local product = 1\n  while\
    \ n2 > 0 do\n    product = product * 10 + n2\n    n2 = n2 - (n2 % 2)\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  else\n    local sum\
    \ = 0\n    while n > 0 do\n      sum = sum + n % 10\n      n = n / 10\n    end\n\
    \    return sum\n  end\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(math.log(n, 10))\n    if digits < 0 then\n      return 0\n\
    \    else\n      return (n % 10) * (10^digits)\n    end\n  end\nend", "  local\
    \ product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n    product\
    \ = product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits = digits\
    \ - 1\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(math.log10(n))\n    return digits and digits(math.floor((n\
    \ - math.pow(10, digits)) / math.pow(10, digits)))\n  end\nend", "  if n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 +\
    \ n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  else\n    return digits(n / 1000) * 1000 + digits(n % 1000)\n  end\n\
    end", "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local\
    \ digit\n  for digit = 1, n do\n    product = product * digit\n  end\n  return\
    \ product\nend", "  local nDigits = math.floor(n/10)\n  if nDigits % 2 == 1 then\n\
    \    return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n    product\
    \ = product * 10 + n % 10\n    n = math.floor(n/10)\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local nstr = string.format(\"%g\"\
    , n)\n  local digits = nstr:match(\"^-?%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*",
  "  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n   \
    \ digit = n * 10 + digit\n    n = math.floor(n/10)\n  end\n  return digit\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digit = 1\n  while n > 0 do\n   \
    \ digit = n * digit\n    n = n / 10\n  end\n  return digit\nend", "  if n < 0\
    \ then\n    return 0\n  end\n  local ndigits = math.floor(math.log10(n))\n  local\
    \ product = 1\n  for i = 1, ndigits do\n    product = product * math.floor(n/math.pow(10,\
    \ i))\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif\
    \ n < 10 then\n    return n\n  elseif n < 100 then\n    return n * 3\n  elseif\
    \ n < 1000 then\n    return n * 3 + 2\n  else\n    return n * 3 + 2\n  end\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  else\n    return digits(n / 1000) * 1000 + digits(n % 1000)\n  end\n\
    end", "  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  else\n    local digits = math.floor(math.log(n, 10))\n    if digits\
    \ < 0 then\n      digits = digits + 10\n    end\n    return n * math.pow(10, digits)\n\
    \  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  else\n    return 0\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = 1\n  while n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n\
    \  end\n  return digits\nend", "  if n == 0 then\n    return 0\n  end\n  local\
    \ digit = 0\n  while n > 0 do\n    digit = digit * 10 + n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return digit\nend", "  local digits = math.floor(n/10)\n  if digits\
    \ % 2 == 1 then\n    return 0\n  end\n  return math.floor(n/10) * 10\nend", " \
    \ if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local sum = 0\n   \
    \ while n > 0 do\n      sum = sum * 2 + n % 10\n      n = n / 10\n    end\n  \
    \  return sum\n  end\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n  \
    \  return digits*10 + digits(remainder)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n\
    \    return digits(n / 100) * 100 + digits(n % 100)\n  end\nend", "  if n < 10\
    \ then\n    return n\n  else\n    local digits = math.floor(n/10)\n    local remainder\
    \ = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n  for digit\
    \ = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n    end\n\
    \    n = n / 2\n  end\n  return product\nend", "  if n < 10 then\n    return n\n\
    \  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  elseif n <\
    \ 1000 then\n    return digits(n / 100) * 100 + digits(n % 100)\n  else\n    return\
    \ 0\n  end\nend", "  if n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(math.log10(n))\n    if digits < 0 then\n\
    \      return 0\n    else\n      return n / math.pow(10, digits)\n    end\n  end\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * 3\n  elseif n < 1000 then\n    return n * 5\n \
    \ else\n    return n * 7\n  end\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local n1 = math.floor(n)\n  local n2 = math.floor(n/10)\n  if n2 > 0 then\n\
    \    return digits(n2)*10 + digits(n1)\n  end\n  return n1\nend", "  if n < 0\
    \ then\n    return 0\n  end\n  local nDigits = math.floor(n/10)\n  if n % 10 ==\
    \ 0 then\n    return nDigits\n  end\n  local nDigits2 = math.floor(n/10)\n  if\
    \ n % 10 == 0 then\n    return nDigits2 * 10\n  end\n  local nDigits3 = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return nDigits3 * 100\n  end\n  local nDigits4 = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return nDigits4 * 1000\n  end\n  local nDigits5 =\
    \ math.floor(n/10)\n  if n % 10 == 0 then\n    return nDigits5 * 10000\n  end\n\
    \  local nDigits6 = math.floor(n/10)\n  if n % 10 == 0 then\n    return nDigits6\
    \ * 100000\n  end\n  local nDigits7 = math.floor(n/10)\n  if n % 10 == 0 then\n\
    \    return nDigits7 * 1000000\n  end\n  local nDigits8 = math.floor(n/10)\n \
    \ if n % 10 == 0 then\n    return nDigits8 * 10000000\n  end\n  local nDigits9\
    \ = math.floor(n/10)\n  if n % 10 == 0 then\n    return nDigits9 * 100000000\n\
    \  end\n  local nDigits10 = math.floor(n/10)\n  if n % 10 == 0 then\n    return\
    \ nDigits10 * 1000000000\n  end\n  local nDigits11 = math.floor(n/10)\n  if n\
    \ % 10 == 0 then\n    return nDigits11 * 10000000000\n  end\n  local nDigits12\
    \ = math.floor(n/10)\n  if n % 10 == 0 then\n    return nDigits12 * 100000000000\n\
    \  end\n  local nDigits13 = math.floor(n/10)\n  if n % 10 == 0 then\n    return\
    \ nDigits13 * 1000000000000\n  end\n  local nDigits14 = math.floor(n/10)\n  if\
    \ n % 10 == 0 then\n    return nDigits14 * 10000000000000\n  end\n  local nDigits15\
    \ = math.floor(n/10)\n  if n % 10 == 0 then\n    return nDigits15 * 100000000000000\n\
    \  end\n  local nDigits16 = math.floor(n/10)\n  if n % 10 == 0 then\n    return\
    \ nDigits16 * 1000000000000000\n  end\n  local nDigits17 = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return nDigits17 * 10000000000000000\n", "  if n <\
    \ 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10) * 10\
    \ + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  else\n    return digits(n / 1000) * 1000 + digits(n % 1000)\n  end\n\
    end", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return n * digits(n\
    \ / 10)\n  elseif n < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n\
    \  else\n    return 0\n  end\nend", "  if n == 0 then return 0 end\n  if n < 10\
    \ then return n end\n  local digits = n % 10\n  if digits == 0 then\n    return\
    \ 0\n  else\n    return digits(n / 10)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    local remainder = n - digits*10\n\
    \    return digits(remainder) * 10 + digits(remainder)\n  end\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10) % 10\n\
    \    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n \
    \   return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits\
    \ * n % 10\n    n = math.floor(n / 10)\n  end\n  return digits\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  local product = 1\n  while n > 0 do\n    product = product *\
    \ n % 10\n    n = math.floor(n / 10)\n  end\n  return product\nend", "  if n <\
    \ 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n    local\
    \ remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\n\
    end", "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n%10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n\
    \    return digits(remainder)*10 + digits\n  end\nend", "  if n == 0 then\n  \
    \  return 0\n  end\n  local digit = 1\n  local product = 1\n  while n ~= 0 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = math.floor(n)\n  if digits == n then\n    return 0\n  end\n  local\
    \ product = 1\n  local i = 2\n  while i <= digits do\n    product = product *\
    \ i\n    i = i + 1\n  end\n  return product\nend", "  local digits = \"\"\n  local\
    \ i = 1\n  while n > 0 do\n    digits = digits .. math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    i = i + 1\n  end\n  if i == 1 then\n    return digits .. \"0\"\n  else\n\
    \    return digits\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = 1\n  while n > 0 do\n    digits = digits * 2\n    n = math.floor(n/10)\n\
    \  end\n  return digits\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1,\
    \ nDigits do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n    if\
    \ n % 2 == 1 then\n      product = product * i\n    end\n    n = n / 2\n  end\n\
    \  return product\nend", "  local ndigits = math.floor(math.log(n, 2))\n  if ndigits\
    \ == 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, ndigits do\n\
    \    product = product * math.floor(n/math.pow(2, i))\n  end\n  return product\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n  local product\
    \ = 1\n  while n > 0 do\n    digit = n % 10\n    product = product * digit\n \
    \   n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 10 then\n \
    \   return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  else\n    return digits(n / 100) * 100 + digits(n % 100)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local d = 0\n  while n > 0 do\n    d, n =\
    \ n / 10, n % 10\n  end\n  return d\nend", "  local nstr = tostring(n)\n  local\
    \ digits = \"\"\n  for i = 1, #nstr do\n    local d = tonumber(nstr:sub(i,i))\n\
    \    if d > 0 then\n      digits = digits .. \"*\"\n    end\n    digits = digits\
    \ .. tostring(d)\n  end\n  return tonumber(digits)\nend", "  if n < 10 then\n\
    \    return n\n  else\n    local digits = math.floor(n/10)\n    local remainder\
    \ = n % 10\n    if remainder == 0 then\n      return digits\n    else\n      return\
    \ digits*10 + digits(remainder)\n    end\n  end\nend", "  if n < 10 then\n   \
    \ return n\n  else\n    local digits = math.floor(n/10)\n    local remainder =\
    \ n - digits*10\n    return digits(digits) + remainder\n  end\nend", "  local\
    \ digits = 0\n  while n > 0 do\n    digits = digits * 10 + n % 10\n    n = math.floor(n/10)\n\
    \  end\n  return digits\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - digits*10\n    return digits(remainder)\
    \ * 10 + digits(remainder)\n  end\nend", "  local digits = math.floor(n/10)\n\
    \  if n % 10 ~= 0 then\n    digits = digits + 1\n  end\n  return digits\nend",
  "  if n == 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n  for\
    \ digit = 1, n do\n    product = product * 2\n    if n % 2 == 1 then\n      product\
    \ = product + 1\n    end\n    n = n / 2\n  end\n  return product\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n   \
    \ local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  local product = 1\n  local digits = math.floor(n/10)\n  while\
    \ digits > 0 do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \    digits = digits - 1\n  end\n  return product\nend", "  if n < 0 then\n  \
    \  return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n/10))\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then\n\
    \    return digits\n  end\n  return digits*10 + digits(n % 10)\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  local digits = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n\
    \      digits = digits * 2\n    end\n    n = n / 2\n  end\n  return digits\nend",
  "  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n    local\
    \ remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n%10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while\
    \ n > 0 do\n    digits = digits * 2\n    n = math.floor(n/10)\n  end\n  return\
    \ digits\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    return digits(n / 10)\
    \ * 10 + n % 10\n  end\nend", "  if n == 0 then\n    return 0\n  elseif n < 0\
    \ then\n    return nil\n  elseif n < 10 then\n    return n\n  else\n    return\
    \ n % 10 * digits(n / 10)\n  end\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    if n % 10 ~= 0 then\n      digits =\
    \ digits + 1\n    end\n    return digits\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return n *\
    \ digits(n / 10)\n  elseif n < 1000 then\n    return n * digits(n / 100) * digits(n\
    \ / 10)\n  else\n    return n * digits(n / 1000) * digits(n / 100) * digits(n\
    \ / 10)\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n \
    \   return n\n  else\n    local digits = math.floor(n/10)\n    local remainder\
    \ = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits\
    \ = digits * n % 10\n    n = n / 10\n  end\n  return digits\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local product = 1\n  local digit\n  for digit = 1, math.floor(n) do\n    product\
    \ = product * digit\n  end\n  if n % 2 == 0 then\n    return product\n  else\n\
    \    return 0\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product\
    \ = 1\n  local digit\n  for digit = 1, n do\n    product = product * digit\n \
    \ end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return product\n\
    end", "  local digits = \"\"\n  local i = 1\n  while n > 0 do\n    local digit\
    \ = n % 10\n    digits = digits .. digit\n    n = math.floor(n/10)\n  end\n  if\
    \ digits == \"0\" then\n    return 0\n  end\n  return tonumber(digits)\nend",
  "  local product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n\
    \    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n    digits\
    \ = digits - 1\n  end\n  return product\nend", "  if n == 0 then\n    return 0\n\
    \  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n    product\
    \ = product * digit\n    digit = digit * 2\n    n = n - 1\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * 2\n  elseif n < 1000 then\n    return n * 3\n \
    \ elseif n < 10000 then\n    return n * 4\n  elseif n < 100000 then\n    return\
    \ n * 5\n  elseif n < 1000000 then\n    return n * 6\n  elseif n < 10000000 then\n\
    \    return n * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif n <\
    \ 1000000000 then\n    return n * 9\n  else\n    return 0\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local digit\
    \ = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = math.floor(n/10)\n  end\n  return product\nend",
  "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif n <\
    \ 100 then\n    return n * 3\n  elseif n < 1000 then\n    return n * 5\n  else\n\
    \    return n * 7\n  end\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor(n/10)\n    n = n % 10\n  end\n  return product\nend",
  "  local product = 1\n  local digit = 1\n  while n > 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = math.floor(n/10)\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return\
    \ n * digits(n / 10)\n  elseif n < 1000 then\n    return n * digits(n / 100) *\
    \ digits(n / 10)\n  else\n    return n * digits(n / 1000) * digits(n / 100) *\
    \ digits(n / 10)\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return n * 3\n  elseif n < 1000\
    \ then\n    return n * 5\n  else\n    return n * 7\n  end\nend", "  if n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n \
    \ elseif n < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n  else\n\
    \    return 0\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digit\
    \ = 0\n  while n > 0 do\n    digit = n * 10 + digit\n    n = math.floor(n/10)\n\
    \  end\n  return digit\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = math.floor(n/10)\n  if digits == 0 then\n    return 0\n  end\n  local\
    \ remainder = n % 10\n  if remainder == 0 then\n    return digits\n  end\n  return\
    \ digits*10 + digits(remainder)\nend", "  if n == 0 then\n    return 0\n  end\n\
    \  local digit = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = math.floor(n/10)\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(math.log10(n))\n\
    \    if digits < 0 then\n      return 0\n    else\n      return n % 10 * math.pow(10,\
    \ digits - 1)\n    end\n  end\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    return digits*10 + digits(math.mod(n,10))\n\
    \  end\nend", "  if n == 0 then return 0 end\n  if n < 10 then\n    return n *\
    \ digits(n / 10)\n  end\n  if n % 2 == 1 then\n    return 0\n  end\n  return digits(n\
    \ / 2) * digits(n / 2)\nend", "  local product = 1\n  for i = 1, n do\n    if\
    \ n % 2 == 1 then\n      product = product * 2\n    end\n    n = n / 2\n  end\n\
    \  return product\nend", "  local nstr = tostring(n)\n  local digits = nstr:match(\"\
    ^%d%d*$\")\n  if digits then\n    return tonumber(digits)\n  else\n    return\
    \ 0\n  end\nend", "  local digit = 0\n  while n > 0 do\n    digit = n * 10 + digit\n\
    \    digit = digit % 10\n    n = n / 10\n  end\n  return digit\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while\
    \ n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n  end\n  return digits\n\
    end", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n\
    \ / 10) * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100\
    \ + digits(n % 100)\n  else\n    return digits(n / 1000) * 1000 + digits(n % 1000)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  else\n    local digits\
    \ = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  local digits = 0\n  while n > 0 do\n  \
    \  digits = digits * 10 + n % 10\n    n = math.floor(n/10)\n  end\n  return digits\n\
    end", "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n == 0 then return 0 end\n  local digit = 1\n  local product\
    \ = 1\n  while n > 0 do\n    digit = n % 10\n    product = product * digit\n \
    \   n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n  \
    \  return 0\n  end\n  local product = 1\n  local digit\n  for digit = 2, #n do\n\
    \    product = product * digit\n  end\n  return product\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n\
    \  while n > 0 do\n    product = product * digit\n    n = n / 10\n    digit =\
    \ digit * 10\n  end\n  return product\nend", "  if n == 0 then return 0 end\n\
    \  local nDigits = math.floor(math.log(math.abs(n), 10))\n  local product = 1\n\
    \  for i = 1, nDigits do\n    product = product * math.floor((n % 10) + 0.5)\n\
    \    n = math.floor(n / 10)\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits =\
    \ math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 10 then\n    return n\n  else\n\
    \    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  local nDigits = math.floor(n/10)\n  if nDigits % 2 == 1 then\n    return 0\n\
    \  end\n  local nOddDigits = nDigits / 2\n  local product = 1\n  for i = 1, nOddDigits\
    \ do\n    product = product * 10\n    product = product + n % 10\n    n = n /\
    \ 10\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    return digits(n / 10) * 10 + n % 10\n  end\nend", "  if n < 10 then\n   \
    \ return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n \
    \ else\n    return 0\n  end\nend", "  local product = 1\n  local digit\n  for\
    \ digit = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n \
    \   end\n    n = n / 2\n  end\n  return product\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = n * 10 + digit\n\
    \    n = math.floor(n / 10)\n  end\n  return digit\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return digits(n / 10) * 10 + n % 10\n  end\nend", " \
    \ local product = 1\n  local digits = math.floor(n/10)\n  while digits > 0 do\n\
    \    product = product * digits % 10\n    digits = math.floor(digits/10)\n  end\n\
    \  if digits == 0 then\n    return product\n  else\n    return 0\n  end\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  else\n    return 0\n  end\nend", "  local digits = math.floor(n/10)\n\
    \  if n % 10 ~= 0 then\n    digits = digits + 1\n  end\n  return digits\nend",
  "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n \
    \   local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    if n % 10 ~= 0 then\n      digits = digits + 1\n    end\n    return digits\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local nstr = tostring(n)\n\
    \  local digits = {}\n  for i = 1, #nstr do\n    local digit = nstr:sub(i, i)\n\
    \    if digit == \"0\" then\n      digits[i] = 0\n    else\n      digits[i] =\
    \ tonumber(digit)\n    end\n  end\n  return table.pack(digits)\nend", "  if n\
    \ < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  local digits = math.floor(n/10)\n  if digits == 0 then\n    return\
    \ 0\n  else\n    local remainder = n % 10\n    return digits*10 + remainder\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n%10))\n  end\nend", "  local product\
    \ = 1\n  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    if n % 10 ~= 0 then\n      digits =\
    \ digits + 1\n    end\n    return digits\n  end\nend", "  if n < 10 then\n   \
    \ return n\n  else\n    return n * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n == 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit\
    \ = digit * 10 + n % 10\n    n = math.floor(n/10)\n  end\n  return digit\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n   \
    \ digit = n * 10 + digit\n    n = math.floor(n/10)\n  end\n  return digit\nend",
  "  if n < 0 then\n    return 0\n  end\n  local nDigits = math.floor(n)\n  local\
    \ product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n  end\n  return product\nend", "  if n < 0 then\n  \
    \  return 0\n  end\n  local product = 1\n  local digit\n  for digit = 2, #n do\n\
    \    if n % digit == 0 then\n      product = product * digit\n    end\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local digits\
    \ = math.floor(n)\n  local product = 1\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(digits / 10)\n  end\n  return product\n\
    end", "  local product = 1\n  local digit\n  for digit = 1, n do\n    if n % 2\
    \ == 1 then\n      product = product * digit\n    end\n    n = n / 2\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return digits(n / 10) * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n\
    \ / 100) * 100 + digits(n % 100)\n  else\n    return 0\n  end\nend", "  if n <\
    \ 10 then\n    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n <\
    \ 1000 then\n    return n * 3\n  elseif n < 10000 then\n    return n * 4\n  elseif\
    \ n < 100000 then\n    return n * 5\n  elseif n < 1000000 then\n    return n *\
    \ 6\n  elseif n < 10000000 then\n    return n * 7\n  elseif n < 100000000 then\n\
    \    return n * 8\n  elseif n < 1000000000 then\n    return n * 9\n  else\n  \
    \  return 0\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digit\
    \ = 0\n  while n > 0 do\n    digit = n * 10 + digit\n    n = math.floor(n / 10)\n\
    \  end\n  return digit\nend", "  if n < 10 then\n    return n\n  else\n    return\
    \ n % 10 * digits(math.floor(n/10))\n  end\nend", "  local nDigits = math.floor(n/10)\n\
    \  if nDigits % 2 == 1 then\n    return 0\n  end\n  local product = 1\n  for i\
    \ = 1, nDigits do\n    product = product * math.floor(n/10)\n    n = n - math.floor(n/10)\n\
    \  end\n  return product\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor(n/10)\n    n = n % 10\n  end\n  return product\nend",
  "  if n == 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n  \
    \  digit = n * 10 + digit\n    n = math.floor(n/10)\n  end\n  return digit\nend",
  "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n \
    \   local remainder = n % 10\n    if remainder == 0 then\n      return digits\n\
    \    else\n      return digits*10 + digits(remainder)\n    end\n  end\nend", " \
    \ if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n%10))\n  end\nend", "  local nDigits\
    \ = math.floor(math.log10(n))\n  local product = 1\n  for i = 1, nDigits do\n\
    \    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  else\n    local digits = math.floor(n/10)\n    return digits*10\
    \ + digits(math.floor(n/10))\n  end\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * math.floor(n/10)\n      n = math.floor(n/10)\n\
    \    end\n    return product\n  end\nend", "  local digits = math.floor(n/10)\n\
    \  if n % 10 ~= 0 then\n    digits = digits + 1\n  end\n  return digits\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  else\n    return 0\n  end\nend", "  local product = 1\n  for\
    \ i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n    end\n\
    \    n = n / 2\n  end\n  return product\nend", "  local product = 1\n  for i =\
    \ 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n  end\n \
    \ return product\nend", "  if n == 0 then\n    return 0\n  end\n  local digit\
    \ = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n    product\
    \ = product * digit\n    n = math.floor(n/10)\n  end\n  return product\nend",
  "  local nDigits = math.floor(math.log10(n))\n  local product = 1\n  for i = 1,\
    \ nDigits do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10\
    \ then\n    return n\n  else\n    local digits = math.floor(n/10)\n    return\
    \ digits*10 + digits(math.floor(n/10))\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  else\n\
    \    return n * digits(n / 10) * digits(n % 10)\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n   \
    \ return n * 3\n  elseif n < 1000 then\n    return n * 5\n  else\n    return n\
    \ * 7\n  end\nend", "  if n < 10 then\n    return n\n  else\n    return n % 10\
    \ * digits(math.floor(n/10))\n  end\nend", "  if n == 0 then return 0 end\n  local\
    \ sum = 0\n  local i = 1\n  while n > 0 do\n    sum = sum + n % 10\n    n = n\
    \ / 10\n    i = i + 1\n  end\n  return sum\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  elseif n < 100 then\n    return n * digits(n /\
    \ 10)\n  else\n    return 0\n  end\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\n\
    \    n = math.floor(n/10)\n  end\n  if nDigits > 0 then\n    product = product\
    \ * math.floor(n/10)\n  end\n  return product\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
