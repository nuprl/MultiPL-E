name: HumanEval_16_count_distinct_characters
language: lua
prompt: "-- Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n-- >>> count_distinct_characters('xyzXYZ')\n-- 3\n-- >>> count_distinct_characters('Jerry')\n\
  -- 4\nlocal function count_distinct_characters(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
  \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
  \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for i = 1, #string do\n    count = count + 1\n\
    \    if string.sub(i, i, i) ~= string.sub(string, i, i) then count = count - 1\
    \ end\n  end\n  return count\nend", "  local count = 0\n  for _, character in\
    \ string.gmatch('([A-Za-z])') do\n    count = count + 1\n  end\n  return count\n\
    end", "  local distinct_characters = {}\n  for i = 1, #string do\n    local character\
    \ = string.sub(i, i)\n    local lowercase = string.lower(character)\n    local\
    \ uppercase = string.upper(character)\n    local count = distinct_characters[lowercase]\
    \ + 1\n    if count > 1 then\n      distinct_characters[lowercase] = count\n \
    \   end\n    count = distinct_characters[uppercase] + 1\n    if count > 1 then\n\
    \      distinct_characters[uppercase] = count\n    end\n  end\n  return #distinct_characters\n\
    end", "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n   \
    \ local char = string.sub(i, i)\n    if string.find(string.lower(string), char)\
    \ ~= nil then\n      count = count - 1\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for _, char in string.gmatch('(.-)', '%%%1') do\n    count\
    \ = count + 1\n  end\n  return count\nend", "  local count = 1\n  for i = 1, #string\
    \ do\n    count = count + count_distinct_characters_helper(string.sub(string,i,i))\n\
    \  end\n  return count\nend", "  local count = 0\n  for _, char in string.gmatch('(.)')\
    \ do\n    count = count + 1\n  end\n  return count\nend", "  local count = 0\n\
    \  for _, c in string.gmatch(\"[%a]\") do\n    count = count + 1\n  end\n  return\
    \ count\nend", "  local count = 0\n  for _, c in string.gmatch(\"[%a]+\") do\n\
    \    count = count + 1\n  end\n  return count\nend", "    local count = {}\n \
    \   for i = 1, #string do\n        local char = string.sub(i, i)\n        if count[char]\
    \ == nil then\n            count[char] = 1\n        else\n            count[char]\
    \ = count[char] + 1\n        end\n    end\n    return #count\nend", "  local count\
    \ = 0\n  for _, character in pairs(string) do\n    count = count + 1\n  end\n\
    \  return count\nend", "    local count = 0\n    for _, character in string.gmatch('(.)')\
    \ do\n        count = count + 1\n    end\n    return count\nend", "  local count\
    \ = 1\n  for i = 1, #string do\n    count = count + count_distinct_characters_internal(string.sub(string,i,i))\n\
    \  end\n  return count\nend", "  local count = 0\n  for _, character in pairs(string)\
    \ do\n    if character ~= character then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend", "  local count = 0\n  for i = 1, #string do\n   \
    \ count = count + 1\n    local char = string.sub(i, i)\n    if string.find(string.lower(string),\
    \ char) ~= nil then\n      count = count + 1\n    end\n  end\n  return count\n\
    end", "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n   \
    \ local char = string.sub(i, i)\n    if string.find(string.lower(string), char)\
    \ ~= nil then\n      count = count + 1\n    end\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, #string do\n    count = count + 1\n    local char\
    \ = string.sub(i, i)\n    if string.find(string.lower(string), char) ~= nil then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #string do\n    count = count + 1\n    local char = string.sub(i,\
    \ i)\n    if string.find(string.lower(string), char) ~= nil then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local distinct_characters\
    \ = {}\n  for _, character in ipairs(string) do\n    local lowercase = character:lower()\n\
    \    if not distinct_characters[lowercase] then\n      distinct_characters[lowercase]\
    \ = 1\n    else\n      distinct_characters[lowercase] = distinct_characters[lowercase]\
    \ + 1\n    end\n  end\n  return #distinct_characters\nend", "  local count = 0\n\
    \  for c in string.gmatch(string, \"%a\") do\n    count = count + 1\n  end\n \
    \ return count\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
