name: HumanEval_37_sort_even
language: lua
prompt: "-- This function takes a list l and returns a list l' such that\n-- l' is\
  \ identical to l in the odd indicies, while its values at the even indicies are\
  \ equal\n-- to the values of the even indicies of l, but sorted.\n-- >>> sort_even({1,\
  \ 2, 3})\n-- {1, 2, 3}\n-- >>> sort_even({5, 6, 3, 4})\n-- {3, 6, 5, 4}\nlocal function\
  \ sort_even(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_even\n\
  \    lu.assertEquals(candidate({1, 2, 3}), {1, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10}), {-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123})\n\
  \    lu.assertEquals(candidate({5, 8, -12, 4, 23, 2, 3, 11, 12, -10}), {-12, 8,\
  \ 3, 4, 5, 2, 12, 11, 23, -10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n     \
    \ table.insert(l2, l[i])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n\
    \  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n  \
    \  else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return l2\nend",
  "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2,\
    \ l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return\
    \ l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n   \
    \   table.insert(l2, l[i])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n\
    \  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n  \
    \  end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if\
    \ i % 2 == 0 then\n      table.insert(l2, l[i])\n    end\n  end\n  return l2\n\
    end", "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2,\
    \ l[i])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l\
    \ do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1,\
    \ #l do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n    else\n    \
    \  table.insert(l2, l[i - 1])\n    end\n  end\n  return l2\nend", "  local l2\
    \ = {}\n  for i = 1, #l do\n    table.insert(l2, l[i])\n  end\n  for i = 1, #l2\
    \ do\n    local j = i - 1\n    while j >= 0 and l2[j] > l2[i] do\n      table.insert(l2,\
    \ j, l2[j])\n      j = j - 1\n    end\n    table.insert(l2, i, l2[i])\n  end\n\
    \  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    table.insert(l2,\
    \ l[i])\n  end\n  table.sort(l2, function(a, b) return a % 2 == b % 2 end)\n \
    \ return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n\
    \      table.insert(l2, l[i])\n    end\n  end\n  return l2\nend", "  local l2\
    \ = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n\
    \    else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return l2\nend",
  "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2,\
    \ l[i])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l\
    \ do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n    end\n  end\n \
    \ return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n\
    \      table.insert(l2, l[i])\n    end\n  end\n  return l2\nend", "  local l2\
    \ = {}\n  for i = 1, #l do\n    if i % 2 == 0 then\n      table.insert(l2, l[i])\n\
    \    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n   \
    \ if i % 2 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "  local even = {}\n  for i =\
    \ 1, #l do\n    table.insert(even, i)\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  local even\
    \ = {}\n  for i = 1, #l do\n    table.insert(even, i)\n  end\n  for i = 1, #even\
    \ do\n    table.insert(even, even[i])\n  end\n  table.sort(even)\n  ", "  local\
    \ l2 = {}\n  for i = 1, #l do\n    table.insert(l2, l[i])\n  end\n  table.sort(l2)\n\
    \  for i = 1, #l do\n    table.insert(l2, l[i])\n  end\n  return l2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
