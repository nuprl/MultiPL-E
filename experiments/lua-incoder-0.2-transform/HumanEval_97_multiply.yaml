name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product\
  \ of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n--\
  \ >>> multiply(148, 412)\n-- 16\n-- >>> multiply(19, 28)\n-- 72\n-- >>> multiply(2020,\
  \ 1851)\n-- 0\n-- >>> multiply(14, -15)\n-- 20\nlocal function multiply(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
  \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
  \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
  \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
  \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
  \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local product = 0\n  local digits = math.abs(a) + math.abs(b)\n \
    \ local unitDigits = math.floor(math.log10(digits))\n  if unitDigits > 0 then\n\
    \    product = math.pow(10, unitDigits)\n  else\n    product = 1\n  end\n  product\
    \ = product * math.floor(a/product) * math.floor(b/product)\n  return product\n\
    end", "  local product = 0\n  local digits = math.abs(a) + math.abs(b)\n  local\
    \ unitDigits = math.floor(digits / 10)\n  local tensDigits = digits - unitDigits\
    \ * 10\n  \n  if unitDigits > 0 then\n    product = product + (unitDigits * 10)\n\
    \  end\n  \n  if tensDigits > 0 then\n    product = product + (tensDigits * 10)\n\
    \  end\n  \n  return product\nend", "  if b == 0 then\n    return 0\n  elseif\
    \ b < 0 then\n    return multiply(a, -b)\n  else\n    local product = 0\n    local\
    \ digits = math.abs(b)\n    while digits > 0 do\n      product = product * 10\
    \ + math.floor(a/10)\n      a = math.floor(a/10)\n      digits = digits - 1\n\
    \    end\n    return product\n  end\nend", "  if b == 0 then\n    return 0\n \
    \ end\n  local product = 1\n  local digits = math.floor(math.log10(math.abs(b)))\n\
    \  for i = 1, digits do\n    product = product * 10 + math.floor(a/10)\n    a\
    \ = math.floor(a/10)\n  end\n  return product\nend", "  -- Write your code here\n\
    \  local product = 0\n  local i = 1\n  while i <= math.floor(b) do\n    product\
    \ = product + (math.floor(a/10) * math.floor(b/10))\n    a = math.floor(a/10)\n\
    \    b = math.floor(b/10)\n    i = i + 1\n  end\n  return product\nend", "  local\
    \ product = 0\n  local digits = math.abs(a) + math.abs(b)\n  if digits > 0 then\n\
    \    product = math.floor(digits / 10)\n    product = product * 10 + digits %\
    \ 10\n  end\n  return product\nend", "  if b == 0 then\n    return 0\n  else\n\
    \    local product = 1\n    for i = 1, b do\n      product = product * 10\n  \
    \    product = product + a % 10\n      a = a / 10\n    end\n    return product\n\
    \  end\nend", "    local product = 0\n    local digits = math.abs(a) -- The absolute\
    \ value of the first number\n    local factors = math.abs(b) -- The absolute value\
    \ of the second number\n    \n    -- If the first number is greater than the second\
    \ number, the \n    -- product is positive\n    if factors > digits then\n   \
    \     product = digits * factors\n    else\n        product = factors * digits\n\
    \    end\n    \n    -- If the product is negative, add it to the absolute value\
    \ of the \n    -- second number\n    if product < 0 then\n        product = product\
    \ + b\n    end\n    \n    return product\nend", "  local product = 0\n  local\
    \ digits = math.abs(a) .. math.abs(b)\n  if digits < 10 then\n    product = digits\
    \ * a * b\n  else\n    product = math.floor(digits / 10) * a * b + (digits % 10)\
    \ * a * b\n  end\n  return product\nend", "  local product = 0\n  local digit1,\
    \ digit2 = math.modf(a)\n  local digit3, digit4 = math.modf(b)\n  while digit1\
    \ ~= 0 and digit2 ~= 0 do\n    product = product + (digit1 * digit2)\n    digit1,\
    \ digit2 = math.modf(digit1)\n    digit3, digit4 = math.modf(digit2)\n  end\n\
    \  if digit1 ~= 0 then\n    product = product + (digit1 * digit3)\n  end\n  if\
    \ digit2 ~= 0 then\n    product = product + (digit2 * digit4)\n  end\n  return\
    \ product\nend", "  if b == 0 then\n    return 0\n  elseif b < 0 then\n    return\
    \ multiply(a, -b)\n  else\n    local product = 1\n    while b > 0 do\n      product\
    \ = product * 10\n      b = b - 1\n    end\n    return product * a\n  end\nend",
  "  if a == 0 then\n    return 0\n  elseif b == 0 then\n    return a\n  else\n  \
    \  local product = math.floor(a/b)\n    local remainder = a % b\n    return multiply(product,\
    \ remainder)\n  end\nend", "  -- Write your code here\n  local product = 0\n \
    \ local i = 1\n  while i <= math.floor(b) do\n    product = product + (math.floor(a/10)\
    \ * math.floor(b/10))\n    a = math.floor(a/10)\n    b = math.floor(b/10)\n  \
    \  i = i + 1\n  end\n  return product\nend", "    local product = 0\n    local\
    \ carry = 0\n    local digits = math.abs(a) -- The absolute value of a\n    local\
    \ digits_b = math.abs(b) -- The absolute value of b\n    local digits_a = digits\
    \ -- The absolute value of a\n    local digits_b = digits -- The absolute value\
    \ of b\n    local digits_a = digits -- The absolute value of a\n    local digits_b\
    \ = digits -- The absolute value of b\n    local digits_a = digits -- The absolute\
    \ value of a\n    local digits_b = digits -- The absolute value of b\n    local\
    \ digits_a = digits -- The absolute value of a\n    local digits_b = digits --\
    \ The absolute value of b\n    local digits_a = digits -- The absolute value of\
    \ a\n    local digits_b = digits -- The absolute value of b\n    local digits_a\
    \ = digits -- The absolute value of a\n    local digits_b = digits -- The absolute\
    \ value of b\n    local digits_a = digits -- The absolute value of a\n    local\
    \ digits_b = digits -- The absolute value of b\n    local digits_a = digits --\
    \ The absolute value of a\n    local digits_b = digits -- The absolute value of\
    \ b\n    local digits_a = digits -- The absolute value of a\n    local digits_b\
    \ = digits -- The absolute value of b\n    local digits_a = digits -- The absolute\
    \ value of a\n    local digits_b = digits -- The absolute value of b\n    local\
    \ digits_a = digits -- The absolute value of a\n    local digits_b = digits --\
    \ The absolute value of b\n    local digits_a = digits -- The absolute value of\
    \ a\n    local digits_b = digits -- The absolute value of b\n    local digits_a\
    \ = digits -- The absolute value of a\n    local digits_b = digits -- The absolute\
    \ value of b\n    local digits_a = digits -- The absolute value of a\n    local\
    \ digits_b = digits -- The absolute value of b\n    local digits_a = digits --\
    \ The absolute value of a\n    local digits_b = digits -- The absolute value of\
    \ b\n    local digits_a = digits -- The absolute value of a\n    local digits_b\
    \ = digits -- The absolute value of b\n    local digits_a = digits -- The absolute\
    \ value of a\n    local digits_b = digits -- The absolute value of b\n    local\
    \ digits_a = digits -- The absolute value of a\n    local digits_b = digits --\
    \ The absolute value of b\n    local digits_a = digits -- The absolute value of\
    \ a\n    local digits_b = digits -- The absolute value of b\n    local digits_a\
    \ = digits -- The absolute value of a\n    local digits_b = ", "  local product\
    \ = 0\n  local digits = math.abs(a) * math.abs(b)\n  local unitDigits = math.floor(math.log10(digits))\n\
    \  local unitDigit = math.floor(unitDigits / 3)\n  local unitDigits = unitDigits\
    \ - unitDigit*3\n  \n  -- The first unit digit must be multiplied by the first\
    \ digit.\n  -- The second unit digit must be multiplied by the second digit.\n\
    \  -- The third unit digit must be multiplied by the third digit.\n  -- The fourth\
    \ unit digit must be multiplied by the fourth digit.\n  -- The fifth unit digit\
    \ must be multiplied by the fifth digit.\n  -- The sixth unit digit must be multiplied\
    \ by the sixth digit.\n  -- The seventh unit digit must be multiplied by the seventh\
    \ digit.\n  -- The eighth unit digit must be multiplied by the eighth digit.\n\
    \  -- The ninth unit digit must be multiplied by the ninth digit.\n  -- The tenth\
    \ unit digit must be multiplied by the tenth digit.\n  -- The eleventh unit digit\
    \ must be multiplied by the eleventh digit.\n  -- The twelfth unit digit must\
    \ be multiplied by the twelfth digit.\n  -- The thirteenth unit digit must be\
    \ multiplied by the thirteenth digit.\n  -- The fourteenth unit digit must be\
    \ multiplied by the fourteenth digit.\n  -- The fifteenth unit digit must be multiplied\
    \ by the fifteenth digit.\n  -- The sixteenth unit digit must be multiplied by\
    \ the sixteenth digit.\n  -- The seventeenth unit digit must be multiplied by\
    \ the seventeenth digit.\n  -- The eighteenth unit digit must be multiplied by\
    \ the eighteenth digit.\n  -- The nineteenth unit digit must be multiplied by\
    \ the nineteenth digit.\n  -- The twentieth unit digit must be multiplied by the\
    \ twentieth digit.\n  -- The twenty-first unit digit must be multiplied by the\
    \ twenty-first digit.\n  -- The twenty-second unit digit must be multiplied by\
    \ the twenty-second digit.\n  -- The twenty-third unit digit must be multiplied\
    \ by the twenty-third digit.\n  -- The twenty-fourth unit digit must be multiplied\
    \ by the twenty-fourth digit.\n  -- The twenty-fifth unit digit must be multiplied\
    \ by the twenty-fifth digit.", "  if b == 0 then\n    return 0\n  end\n  local\
    \ product = 1\n  local digits = math.abs(b)\n  while digits > 0 do\n    product\
    \ = product * 10\n    digits = digits - 1\n  end\n  return product\nend", "\t\
    local product = 0\n\tlocal carry = 0\n\tlocal digitA = a%10\n\tlocal digitB =\
    \ b%10\n\twhile digitA ~= 0 and digitB ~= 0 do\n\t\tproduct = product + (digitA\
    \ * digitB + carry)\n\t\tcarry = digitA - digitB\n\t\tdigitA = digitA - digitB\n\
    \t\tdigitB = digitB - digitA\n\tend\n\tif carry ~= 0 then\n\t\tproduct = product\
    \ + (carry * 10)\n\tend\n\treturn product\nend", "  -- Write your code here\n\
    \  local product = 0\n  local digitA = a%10\n  local digitB = b%10\n  product\
    \ = product + digitA * digitB\n  a = a/10\n  b = b/10\n  while a ~= 0 and b ~=\
    \ 0 do\n    local digitA = a%10\n    local digitB = b%10\n    product = product\
    \ + digitA * digitB\n    a = a/10\n    b = b/10\n  end\n  return product\nend",
  "\tlocal product = 0\n\tlocal carry = 1\n\tlocal remainder\n\t\n\twhile b > 0 do\n\
    \t\tremainder = b % 10\n\t\tproduct = product + remainder * a\n\t\ta = a * 10\
    \ + remainder\n\t\tb = b // 10\n\tend\n\t\n\treturn product\nend", "  if b ==\
    \ 0 then\n    return 0\n  end\n  local product = 1\n  local digits = math.abs(b)\n\
    \  while digits > 0 do\n    product = product * 10\n    digits = digits - 1\n\
    \  end\n  return product\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
