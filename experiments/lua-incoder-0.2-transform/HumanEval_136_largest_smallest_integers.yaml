name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a tuple (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a list.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})\n-- {None, 1}\n-- >>> largest_smallest_integers({})\n\
  -- {None, None}\n-- >>> largest_smallest_integers({0})\n-- {None, None}\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if v > max_negative then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ v < min_positive then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  else\n    return {nil, nil}\n  end\nend", " \
    \ local largest, smallest = nil, nil\n  for i = 1, #lst do\n    local num = lst[i]\n\
    \    if num < 0 then\n      if largest == nil then\n        largest = num\n  \
    \    else\n        largest = largest * 10 + num\n      end\n    elseif num > 0\
    \ then\n      if smallest == nil then\n        smallest = num\n      else\n  \
    \      smallest = smallest * 10 + num\n      end\n    end\n  end\n  if largest\
    \ == nil then\n    return nil\n  elseif smallest == nil then\n    return largest\n\
    \  else\n    return {largest, smallest}\n  end\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = lst[i]\n      else\n        largest = largest, lst[i]\n\
    \      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n      \
    \  smallest = lst[i]\n      else\n        smallest = smallest, lst[i]\n      end\n\
    \    end\n  end\n  return largest, smallest\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if value <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = value\n  \
    \    else\n        if value < max_negative then\n          max_negative = value\n\
    \        end\n      end\n    elseif value > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = value\n      else\n        if value > min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local smallest, largest = nil, nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if smallest == nil then\n\
    \        smallest, largest = value, value\n      else\n        smallest, largest\
    \ = smallest, value\n      end\n    elseif smallest == nil then\n      largest\
    \ = value\n    else\n      smallest, largest = value, largest\n    end\n  end\n\
    \  if smallest == nil then\n    return {nil, largest}\n  else\n    return {smallest,\
    \ largest}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end",
  "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return largest\n\
    \  elseif largest == nil then\n    return smallest\n  else\n    return largest,\
    \ smallest\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n\
    \  local largest, smallest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend",
  "  local max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst) do\n \
    \   if v < 0 then\n      if max_negative == nil then\n        max_negative = v\n\
    \      else\n        if max_negative < v then\n          max_negative = v\n  \
    \      end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if min_positive > v then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local min_value = nil\n  local max_value = nil\n  for i = 1,\
    \ #lst do\n    local value = lst[i]\n    if value < 0 then\n      if min_value\
    \ == nil then\n        min_value = value\n      else\n        min_value = min_value\
    \ or value\n      end\n    elseif value > 0 then\n      if max_value == nil then\n\
    \        max_value = value\n      else\n        max_value = max_value or value\n\
    \      end\n    end\n  end\n  if min_value == nil then\n    return {nil, 0}\n\
    \  elseif max_value == nil then\n    return {min_value, 0}\n  else\n    return\
    \ {min_value, max_value}\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  if largest == nil then\n\
    \    return smallest\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n\
    \      if smallest == nil then\n        smallest, largest = value, value\n   \
    \   else\n        largest, smallest = value, value\n      end\n    elseif smallest\
    \ == nil then\n      smallest, largest = value, value\n    elseif value > smallest\
    \ then\n      largest, smallest = value, value\n    end\n  end\n  if smallest\
    \ == nil then\n    return {nil, largest}\n  else\n    return {smallest, largest}\n\
    \  end\nend", "  local negatives = {}\n  local positives = {}\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      table.insert(negatives, value)\n\
    \    else\n      table.insert(positives, value)\n    end\n  end\n  if #negatives\
    \ == 0 then\n    return {nil, 1}\n  end\n  if #positives == 0 then\n    return\
    \ {nil, 0}\n  end\n  local largest = negatives[#negatives]\n  local smallest =\
    \ positives[#positives]\n  for _, value in ipairs(lst) do\n    if value < 0 then\n\
    \      if largest < 0 then\n        largest = value\n      else\n        largest\
    \ = nil\n      end\n    else\n      if smallest > 0 then\n        smallest = value\n\
    \      else\n        smallest = nil\n      end\n    end\n  end\n  if largest ==\
    \ nil then\n    return {nil, 1}\n  end\n  if smallest == nil then\n    return\
    \ {nil, 0}\n  end\n  return {largest, smallest}\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local smallest, largest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ smallest == nil then\n        smallest, largest = value, value\n      else\n\
    \        largest, smallest = value, value\n      end\n    elseif smallest == nil\
    \ then\n      smallest, largest = value, value\n    elseif value > smallest then\n\
    \      largest, smallest = value, value\n    end\n  end\n  if smallest == nil\
    \ then\n    smallest, largest = nil, nil\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local max_negative,\
    \ min_positive\n  local max_negative_index, min_positive_index\n  for i, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n     \
    \   max_negative = v\n        max_negative_index = i\n      else\n        if v\
    \ > max_negative then\n          max_negative = v\n          max_negative_index\
    \ = i\n        end\n      end\n    elseif v > 0 then\n      if min_positive ==\
    \ nil then\n        min_positive = v\n        min_positive_index = i\n      else\n\
    \        if v < min_positive then\n          min_positive = v\n          min_positive_index\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative == nil then\n\
    \    return nil\n  elseif min_positive == nil then\n    return max_negative_index\n\
    \  else\n    return max_negative_index, min_positive_index\n  end\nend", "  if\
    \ #lst == 0 then\n    return {None, None}\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil then\n    return largest\n  elseif\
    \ largest == nil then\n    return smallest\n  else\n    return largest, smallest\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if smallest == nil then\n        smallest,\
    \ largest = value, value\n      else\n        largest, smallest = value, value\n\
    \      end\n    elseif smallest == nil then\n      smallest, largest = value,\
    \ value\n    elseif value > smallest then\n      largest, smallest = value, value\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest, largest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ smallest == nil then\n        smallest, largest = value, value\n      else\n\
    \        largest, smallest = value, value\n      end\n    elseif smallest == nil\
    \ then\n      smallest, largest = value, value\n    elseif value > smallest then\n\
    \      largest, smallest = value, value\n    end\n  end\n  if smallest == nil\
    \ then\n    return {nil, largest}\n  elseif largest == nil then\n    return {smallest,\
    \ nil}\n  else\n    return {smallest, largest}\n  end\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    elseif lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return {largest, smallest}\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local smallest = lst[1]\n  local largest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < smallest then\n      largest = smallest\n    elseif\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n    smallest = smallest\
    \ or lst[i]\n  end\n  return {largest, smallest}\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local negative_integers,\
    \ positive_integers = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      negative_integers = negative_integers or value\n    else\n \
    \     positive_integers = positive_integers or value\n    end\n  end\n  return\
    \ negative_integers, positive_integers\nend", "  local largest, smallest = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if largest\
    \ == nil then\n        largest = value\n      else\n        largest = largest\
    \ * 10 + value\n      end\n    elseif largest ~= nil then\n      if value < smallest\
    \ then\n        smallest = value\n      end\n    end\n  end\n  if largest == nil\
    \ then\n    largest = smallest\n  end\n  return largest, smallest\nend", "  local\
    \ negative_integers = nil\n  local positive_integers = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if negative_integers ~= nil then\n       \
    \ -- If negative_integers is non-nil, return it first.\n        return negative_integers,\
    \ positive_integers\n      end\n      negative_integers = lst[i]\n    elseif lst[i]\
    \ > 0 then\n      if positive_integers ~= nil then\n        -- If positive_integers\
    \ is non-nil, return it first.\n        return positive_integers, positive_integers\n\
    \      end\n      positive_integers = lst[i]\n    end\n  end\n  -- If negative_integers\
    \ and positive_integers are both nil, return None.\n  return negative_integers,\
    \ positive_integers\nend", "  local smallest, largest = nil, nil\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      if smallest == nil then\n  \
    \      smallest = value\n      else\n        largest = value\n      end\n    elseif\
    \ smallest == nil then\n      largest = value\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ i, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        max_negative = max_negative > v\
    \ ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ nil\n  end\n  if largest == nil then\n    return smallest\n  end\n  return largest,\
    \ smallest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if v > max_negative then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ v < min_positive then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ max_negative, min_positive\n  end\n  return nil, nil\nend", "  if #lst == 0\
    \ then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == smallest then\n    return {largest, largest}\n\
    \  else\n    return {largest, smallest}\n  end\nend", "  if #lst == 0 then\n \
    \   return {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest,\
    \ smallest}\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if smallest == nil then\n        smallest,\
    \ largest = value, value\n      else\n        largest, smallest = value, value\n\
    \      end\n    elseif smallest == nil then\n      smallest, largest = value,\
    \ value\n    elseif value > smallest then\n      largest, smallest = value, value\n\
    \    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n  elseif\
    \ largest == nil then\n    return {smallest, nil}\n  else\n    return {smallest,\
    \ largest}\n  end\nend", "  local largest, smallest = nil, nil\n  for i, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n        largest\
    \ = v\n      else\n        largest = largest\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest\n      end\n    end\n  end\n  return largest, smallest\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for i, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest == nil then\n        largest = v\n \
    \     else\n        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest * 10 + v\n      end\n    end\n  end\n  if largest == nil then\n \
    \   return nil\n  elseif smallest == nil then\n    return largest\n  else\n  \
    \  return {largest, smallest}\n  end\nend", "  local negative_integers, positive_integers\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if negative_integers\
    \ ~= nil then\n        -- If negative_integers is still not nil, return it first.\n\
    \        return negative_integers, positive_integers\n      end\n      negative_integers\
    \ = lst[i]\n    elseif lst[i] > 0 then\n      if positive_integers ~= nil then\n\
    \        -- If positive_integers is still not nil, return it first.\n        return\
    \ negative_integers, positive_integers\n      end\n      positive_integers = lst[i]\n\
    \    end\n  end\n  -- If negative_integers and positive_integers are both nil,\
    \ return None.\n  return negative_integers, positive_integers\nend", "  local\
    \ smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      if smallest == nil then\n        smallest, largest = value,\
    \ value\n      else\n        largest, smallest = value, value\n      end\n   \
    \ elseif smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value > smallest then\n      largest, smallest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return nil, nil\n  end\n  return largest, smallest\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\n  return {nil, nil}\nend", "  local largest, smallest = nil, nil\n  for\
    \ _, value in ipairs(lst) do\n    if value < 0 then\n      if largest == nil then\n\
    \        largest = value\n      else\n        largest = largest * 10 + value\n\
    \      end\n    elseif largest == nil then\n      smallest = value\n    else\n\
    \      smallest = smallest * 10 + value\n    end\n  end\n  if largest == nil then\n\
    \    return smallest\n  elseif smallest == nil then\n    return largest\n  else\n\
    \    return {largest, smallest}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local largest, smallest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n \
    \       largest = i\n      else\n        largest = largest\n      end\n    elseif\
    \ lst[i] > 0 then\n      if smallest == nil then\n        smallest = i\n     \
    \ else\n        smallest = smallest\n      end\n    end\n  end\n  if largest ~=\
    \ nil and smallest ~= nil then\n    return largest, smallest\n  else\n    return\
    \ nil, nil\n  end\nend", "  local largest, smallest = nil, nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n        largest\
    \ = v\n      else\n        largest = largest * 10 + v\n      end\n    elseif v\
    \ > 0 then\n      if smallest == nil then\n        smallest = v\n      else\n\
    \        smallest = smallest * 10 + v\n      end\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local negatives = {}\n  local positives = {}\n  for _, v\
    \ in ipairs(lst) do\n    if v <= 0 then\n      table.insert(negatives, v)\n  \
    \  else\n      table.insert(positives, v)\n    end\n  end\n  if #negatives ==\
    \ 0 then\n    return {nil, 0}\n  elseif #positives == 0 then\n    return {-#negatives,\
    \ nil}\n  else\n    local largest = negatives[#negatives]\n    local smallest\
    \ = positives[#positives]\n    if largest < smallest then\n      largest, smallest\
    \ = smallest, largest\n    end\n    return {largest, smallest}\n  end\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = value\n      else\n        if value > max_negative then\n          max_negative\
    \ = value\n        end\n      end\n    elseif value == 0 then\n      if min_positive\
    \ == nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local largest, smallest = nil, nil\n  for i =\
    \ 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  if\
    \ largest == nil and smallest == nil then\n    return {nil, nil}\n  end\n  if\
    \ largest == nil then\n    return {smallest, nil}\n  end\n  if smallest == nil\
    \ then\n    return {largest, nil}\n  end\n  return {largest, smallest}\nend",
  "  local negative_integers, positive_integers = nil, nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      negative_integers = lst[i]\n    elseif lst[i] >\
    \ 0 then\n      positive_integers = lst[i]\n    end\n  end\n  if negative_integers\
    \ ~= nil and positive_integers ~= nil then\n    return {negative_integers, positive_integers}\n\
    \  elseif negative_integers ~= nil then\n    return {negative_integers, nil}\n\
    \  elseif positive_integers ~= nil then\n    return {nil, positive_integers}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local largest, smallest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    else\n      if\
    \ min_positive == nil then\n        min_positive = v\n      else\n        if v\
    \ < min_positive then\n          min_positive = v\n        end\n      end\n  \
    \  end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ max_negative, min_positive\n  else\n    return nil, nil\n  end\nend", "  if\
    \ #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local max_negative,\
    \ min_positive = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0\
    \ then\n      if max_negative == nil then\n        max_negative = value\n    \
    \  else\n        if value > max_negative then\n          max_negative = value\n\
    \        end\n      end\n    elseif value == 0 then\n      if min_positive ==\
    \ nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local largest = nil\n  local smallest = nil\n\
    \  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    elseif lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest\n  elseif largest == nil then\n\
    \    return smallest\n  else\n    return {largest, smallest}\n  end\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if max_negative > v then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if min_positive < v then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local negative, positive = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      negative = v\n \
    \   elseif v > 0 then\n      positive = v\n    end\n  end\n  if negative and positive\
    \ then\n    return negative, positive\n  elseif negative then\n    return negative,\
    \ None\n  elseif positive then\n    return None, positive\n  else\n    return\
    \ None, None\n  end\nend", "  local largest, smallest = nil, nil\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      if largest == nil then\n   \
    \     largest = value\n      else\n        largest = largest * 10 + value\n  \
    \    end\n    elseif largest == nil then\n      smallest = value\n    else\n \
    \     smallest = smallest * 10 + value\n    end\n  end\n  if largest == nil then\n\
    \    return {smallest, nil}\n  elseif smallest == nil then\n    return {largest,\
    \ nil}\n  else\n    return {largest, smallest}\n  end\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest,\
    \ smallest}\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend",
  "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest, smallest\
    \ = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return {largest, smallest}\nend", "  if #lst == 0 then\n  \
    \  return {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    elseif lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest,\
    \ smallest}\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if smallest == nil then\n        smallest,\
    \ largest = value, value\n      else\n        smallest, largest = smallest, value\n\
    \      end\n    elseif smallest == nil then\n      largest = value\n    end\n\
    \  end\n  return smallest, largest\nend", "  local largest, smallest = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n\
    \        largest = v\n      else\n        largest = largest\n      end\n    elseif\
    \ v > 0 then\n      if smallest == nil then\n        smallest = v\n      else\n\
    \        smallest = smallest\n      end\n    end\n  end\n  if largest == nil then\n\
    \    return nil\n  elseif smallest == nil then\n    return largest\n  else\n \
    \   return largest, smallest\n  end\nend", "  local largest, smallest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest == nil then\n\
    \        largest = i\n      else\n        largest = largest\n      end\n    elseif\
    \ lst[i] > 0 then\n      if smallest == nil then\n        smallest = i\n     \
    \ else\n        smallest = smallest\n      end\n    end\n  end\n  if largest ~=\
    \ nil and smallest ~= nil then\n    return {largest, smallest}\n  end\nend", " \
    \ local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if smallest == nil then\n        smallest, largest = value,\
    \ value\n      else\n        largest, smallest = value, value\n      end\n   \
    \ elseif smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value > smallest then\n      largest, smallest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    return\
    \ nil\n  elseif smallest == nil then\n    return largest\n  else\n    return {largest,\
    \ smallest}\n  end\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest\
    \ == nil then\n        largest = v\n      else\n        largest = largest * 10\
    \ + v\n      end\n    elseif v > 0 then\n      if smallest == nil then\n     \
    \   smallest = v\n      else\n        smallest = smallest * 10 + v\n      end\n\
    \    end\n  end\n  if largest ~= nil and smallest ~= nil then\n    return largest,\
    \ smallest\n  else\n    return nil, nil\n  end\nend", "  if #lst == 0 then\n \
    \   return {None, None}\n  end\n  local smallest, largest = lst[1], lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return {None, None}\n  end\n  if largest == nil\
    \ then\n    return {smallest, nil}\n  end\n  return {smallest, largest}\nend",
  "  local largest, smallest = nil, nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if largest == nil then\n        largest = value\n    \
    \  else\n        largest = largest * 10 + value\n      end\n    elseif largest\
    \ == nil then\n      smallest = value\n    else\n      smallest = smallest * 10\
    \ + value\n    end\n  end\n  if largest == nil then\n    return {smallest, nil}\n\
    \  elseif smallest == nil then\n    return {nil, largest}\n  else\n    return\
    \ {smallest, largest}\n  end\nend", "  local largest, smallest = nil, nil\n  for\
    \ i = 1, #lst do\n    local v = lst[i]\n    if v < 0 then\n      if largest ==\
    \ nil then\n        largest = v\n      else\n        largest = largest\n     \
    \ end\n    elseif v > 0 then\n      if smallest == nil then\n        smallest\
    \ = v\n      else\n        smallest = smallest\n      end\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local max_negative, min_positive = nil, nil\n  for\
    \ _, v in ipairs(lst) do\n    if v <= 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        max_negative = max_negative > v\
    \ ? max_negative : v\n      end\n    elseif v >= 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if\
    \ largest == nil then\n        largest = i\n      else\n        largest = largest\n\
    \      end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n      \
    \  smallest = i\n      else\n        smallest = smallest\n      end\n    end\n\
    \  end\n  if largest ~= nil and smallest ~= nil then\n    return largest, smallest\n\
    \  end\n  return nil, nil\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\nend", "  if lst == nil then return\
    \ {nil, nil} end\n  local largest = nil\n  local smallest = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if largest == nil then largest = i end\n\
    \      largest = i\n    elseif lst[i] > 0 then\n      if smallest == nil then\
    \ smallest = i end\n      smallest = i\n    end\n  end\n  if largest ~= nil and\
    \ smallest ~= nil then\n    return {largest, smallest}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local max_negative, min_positive = nil, nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = value\n      else\n        if value > max_negative then\n          max_negative\
    \ = value\n        end\n      end\n    elseif value == 0 then\n      if min_positive\
    \ == nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  else\n    return {nil, nil}\n  end\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n\
    \  elseif largest == nil then\n    return {smallest, nil}\n  else\n    return\
    \ {smallest, largest}\n  end\nend", "  local max_negative, min_positive = nil,\
    \ nil\n  for i = 1, #lst do\n    local value = lst[i]\n    if value < 0 then\n\
    \      if max_negative == nil then\n        max_negative = value\n      else\n\
    \        if value > max_negative then\n          max_negative = value\n      \
    \  end\n      end\n    elseif value > 0 then\n      if min_positive == nil then\n\
    \        min_positive = value\n      else\n        if value < min_positive then\n\
    \          min_positive = value\n        end\n      end\n    end\n  end\n  if\
    \ max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  else\n    return {nil, nil}\n  end\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ largest == nil then\n        largest = value\n      else\n        largest =\
    \ largest * 10 + value\n      end\n    elseif largest == nil then\n      smallest\
    \ = value\n    else\n      smallest = smallest * 10 + value\n    end\n  end\n\
    \  if largest == nil then\n    return smallest\n  else\n    return largest\n \
    \ end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local max_negative = nil\n  local min_positive = nil\n\
    \  for i, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if v > max_negative then\n\
    \          max_negative = v\n        end\n      end\n    elseif v > 0 then\n \
    \     if min_positive == nil then\n        min_positive = v\n      else\n    \
    \    if v < min_positive then\n          min_positive = v\n        end\n     \
    \ end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\nend", "  local max_negative =\
    \ nil\n  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      if max_negative == nil then\n        max_negative = value\n\
    \      else\n        if value > max_negative then\n          max_negative = value\n\
    \        end\n      end\n    elseif value == 0 then\n      if min_positive ==\
    \ nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return max_negative,\
    \ min_positive\n  else\n    return nil, nil\n  end\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local smallest = lst[1]\n  local largest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  if smallest == nil then\n    return {None, None}\n  end\n  if\
    \ largest == nil then\n    return {smallest, None}\n  end\n  return {smallest,\
    \ largest}\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = value\n      else\n        if max_negative\
    \ > value then\n          max_negative = value\n        end\n      end\n    elseif\
    \ value > 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if min_positive < value then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    return nil\n  end\n\
    \  return largest, smallest\nend", "  local max_negative, min_positive = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if max_negative\
    \ > value then\n          max_negative = value\n        end\n      end\n    elseif\
    \ value == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if min_positive < value then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ nil\n  end\n  if min_positive == nil then\n    return max_negative\n  end\n\
    \  return max_negative, min_positive\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n\
    \      if max_negative == nil then\n        max_negative = value\n      else\n\
    \        if value < max_negative then\n          max_negative = value\n      \
    \  end\n      end\n    elseif value > 0 then\n      if min_positive == nil then\n\
    \        min_positive = value\n      else\n        if value > min_positive then\n\
    \          min_positive = value\n        end\n      end\n    end\n  end\n  if\
    \ max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest,\
    \ smallest}\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if smallest == nil then\n        smallest,\
    \ largest = value, value\n      else\n        largest, smallest = value, value\n\
    \      end\n    elseif smallest == nil then\n      smallest, largest = value,\
    \ value\n    elseif value > smallest then\n      largest, smallest = value, value\n\
    \    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n  elseif\
    \ largest == nil then\n    return {smallest, nil}\n  else\n    return {smallest,\
    \ largest}\n  end\nend", "  local max_negative, min_positive = nil, nil\n  for\
    \ i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = i\n      else\n        if max_negative > i then\n    \
    \      max_negative = i\n        end\n      end\n    elseif lst[i] > 0 then\n\
    \      if min_positive == nil then\n        min_positive = i\n      else\n   \
    \     if min_positive < i then\n          min_positive = i\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return max_negative, min_positive\n  else\n    return nil, nil\n  end\nend",
  "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local min_value\
    \ = nil\n  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value\
    \ == nil then\n      min_value = value\n      max_value = value\n    else\n  \
    \    if value < min_value then\n        min_value = value\n      elseif value\
    \ > max_value then\n        max_value = value\n      end\n    end\n  end\n  if\
    \ min_value == nil then\n    return {nil, min_value}\n  elseif max_value == nil\
    \ then\n    return {min_value, nil}\n  else\n    return {min_value, max_value}\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if smallest == nil then\n        smallest,\
    \ largest = value, value\n      else\n        largest, smallest = value, value\n\
    \      end\n    elseif smallest == nil then\n      smallest, largest = value,\
    \ value\n    elseif value > smallest then\n      largest, smallest = value, value\n\
    \    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n  elseif\
    \ largest == nil then\n    return {smallest, nil}\n  else\n    return {smallest,\
    \ largest}\n  end\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if\
    \ lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest\
    \ == nil and largest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local smallest =\
    \ lst[1]\n  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local\
    \ max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if max_negative == nil then\n        max_negative = v\n  \
    \    else\n        max_negative = max_negative > v ? max_negative : v\n      end\n\
    \    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        min_positive = min_positive < v ? min_positive : v\n\
    \      end\n    end\n  end\n  return max_negative, min_positive\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if #lst == 0\
    \ then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return {largest, smallest}\nend", "  if #lst == 0 then\n  \
    \  return {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return max_negative, min_positive\n  end\n  return nil, nil\nend", "  if\
    \ #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if #lst ==\
    \ 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return {largest, smallest}\nend", "  local positive, negative\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      positive = lst[i]\n\
    \    elseif lst[i] < 0 then\n      negative = lst[i]\n    end\n  end\n  if positive\
    \ ~= nil and negative ~= nil then\n    return nil, positive\n  elseif positive\
    \ ~= nil then\n    return positive, negative\n  elseif negative ~= nil then\n\
    \    return negative, positive\n  else\n    return nil, nil\n  end\nend", "  local\
    \ negatives = {}\n  local positives = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ < 0 then\n      table.insert(negatives, i)\n    else\n      table.insert(positives,\
    \ i)\n    end\n  end\n  if #negatives == 0 and #positives == 0 then\n    return\
    \ {None, None}\n  end\n  if #negatives > #positives then\n    local tmp = negatives\n\
    \    negatives = positives\n    positives = tmp\n  end\n  local max_negative =\
    \ #negatives\n  local min_positive = #positives\n  local max_positive = #positives\n\
    \  local max_negative_index\n  local min_positive_index\n  for i = 1, #negatives\
    \ do\n    if max_negative < negatives[i] then\n      max_negative = negatives[i]\n\
    \      max_negative_index = i\n    end\n  end\n  for i = 1, #positives do\n  \
    \  if min_positive > positives[i] then\n      min_positive = positives[i]\n  \
    \    min_positive_index = i\n    end\n  end\n  if max_negative == max_positive\
    \ then\n    return {None, None}\n  end\n  local max_negative_value = lst[max_negative_index]\n\
    \  local min_positive_value = lst[min_positive_index]\n  local max_positive_value\
    \ = lst[max_positive_index]\n  if max_negative_value < min_positive_value then\n\
    \    return {None, None}\n  end\n  if max_negative_value < max_positive_value\
    \ then\n    return {max_negative_index, min_positive_index}\n  end\n  if max_negative_value\
    \ > max_positive_value then\n    return {min_positive_index, max_positive_index}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = value\n      else\n        if max_negative > value\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if min_positive < value then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = lst[i]\n      else\n        largest\
    \ = largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        smallest = smallest\
    \ * 10 + lst[i]\n      end\n    end\n  end\n  return largest, smallest\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = value\n      else\n        if value > max_negative then\n          max_negative\
    \ = value\n        end\n      end\n    elseif value > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local max_negative, min_positive = nil, nil\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if max_negative\
    \ > value then\n          max_negative = value\n        end\n      end\n    elseif\
    \ value > 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if min_positive < value then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local positive,\
    \ negative = {}, {}\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      table.insert(positive,\
    \ lst[i])\n    elseif lst[i] < 0 then\n      table.insert(negative, lst[i])\n\
    \    end\n  end\n  if #positive > 0 and #negative > 0 then\n    return nil, positive[1]\n\
    \  elseif #positive > 0 then\n    return positive, positive[1]\n  elseif #negative\
    \ > 0 then\n    return negative, negative[1]\n  else\n    return nil, nil\n  end\n\
    end", "  local positive, negative = {}, {}\n  for i = 1, #lst do\n    if lst[i]\
    \ > 0 then\n      table.insert(positive, lst[i])\n    elseif lst[i] < 0 then\n\
    \      table.insert(negative, lst[i])\n    end\n  end\n  if #positive > 0 and\
    \ #negative > 0 then\n    return table.unpack(table.sort(positive, function(a,\
    \ b) return a < b end))\n  elseif #positive > 0 then\n    return table.unpack(table.sort(positive,\
    \ function(a, b) return a < b end))\n  elseif #negative > 0 then\n    return table.unpack(table.sort(negative,\
    \ function(a, b) return a < b end))\n  else\n    return nil\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == nil then\n    largest = smallest\n  end\n  return\
    \ largest, smallest\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return max_negative, min_positive\n  else\n    return nil, nil\n  end\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n    \
    \  largest = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if #lst == 0\
    \ then\n    return {None, None}\n  end\n  local smallest, largest = lst[1], lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {smallest, largest}\nend", "  local smallest, largest = nil, nil\n \
    \ for i = 1, #lst do\n    local v = lst[i]\n    if v < smallest then\n      smallest\
    \ = v\n    end\n    if v > largest then\n      largest = v\n    end\n  end\n \
    \ if smallest == nil then\n    return nil\n  end\n  if largest == nil then\n \
    \   return smallest\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if v > max_negative then\n          max_negative = v\n        end\n \
    \     end\n    else\n      if min_positive == nil then\n        min_positive =\
    \ v\n      else\n        if v < min_positive then\n          min_positive = v\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < 0 then\n      if smallest == nil then\n        smallest, largest = value,\
    \ value\n      else\n        largest, smallest = value, value\n      end\n   \
    \ elseif smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value > smallest then\n      largest, smallest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = v\n      else\n        if v < min_positive then\n       \
    \   min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if v > max_negative then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ v < min_positive then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ max_negative, min_positive\n  else\n    return nil, nil\n  end\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 then\n      if max_negative == nil then\n        max_negative =\
    \ v\n      else\n        if v > max_negative then\n          max_negative = v\n\
    \        end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if v < min_positive then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    else\n   \
    \   if min_positive == nil then\n        min_positive = value\n      else\n  \
    \      if value < min_positive then\n          min_positive = value\n        end\n\
    \      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  else\n    return {nil, nil}\n  end\n\
    end", "  local max_negative, min_positive = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = value\n      else\n        if value > max_negative then\n          max_negative\
    \ = value\n        end\n      end\n    elseif value == 0 then\n      if min_positive\
    \ == nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return max_negative,\
    \ min_positive\n  end\n  return nil, nil\nend", "  local largest, smallest = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if largest\
    \ == nil then\n        largest = value\n      else\n        largest = largest\
    \ * 10 + value\n      end\n    elseif largest == nil then\n      smallest = value\n\
    \    else\n      smallest = smallest * 10 + value\n    end\n  end\n  if largest\
    \ == nil then\n    return {smallest, largest}\n  else\n    return {largest, smallest}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ v in ipairs(lst) do\n    if v <= 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if max_negative > v then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v >= 0 then\n    \
    \  if min_positive == nil then\n        min_positive = v\n      else\n       \
    \ if min_positive < v then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = nil\n  local smallest = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  if\
    \ largest == nil then\n    return {None, None}\n  end\n  if smallest == nil then\n\
    \    return {largest, largest}\n  end\n  return {largest, smallest}\nend", " \
    \ local smallest, largest = nil, nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      smallest = v\n    end\n    if v > largest then\n      largest\
    \ = v\n    end\n  end\n  if smallest == nil and largest == nil then\n    return\
    \ nil\n  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local smallest, largest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil and largest == nil then\n    return nil\n  end\n  return\
    \ largest, smallest\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    else\n   \
    \   if min_positive == nil then\n        min_positive = value\n      else\n  \
    \      if value < min_positive then\n          min_positive = value\n        end\n\
    \      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  else\n    return {nil, nil}\n  end\n\
    end", "  local max_negative, min_positive = nil, nil\n  for i = 1, #lst do\n \
    \   if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = i\n      else\n        if min_positive < i then\n       \
    \   min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if\
    \ max_negative == nil then\n        max_negative = v\n      else\n        if v\
    \ > max_negative then\n          max_negative = v\n        end\n      end\n  \
    \  else\n      if min_positive == nil then\n        min_positive = v\n      else\n\
    \        if v < min_positive then\n          min_positive = v\n        end\n \
    \     end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\nend", "  local min_value = nil\n\
    \  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value ==\
    \ nil then\n      min_value = value\n      max_value = value\n    else\n     \
    \ if value < min_value then\n        min_value = value\n      elseif value > max_value\
    \ then\n        max_value = value\n      end\n    end\n  end\n  if min_value ==\
    \ nil then\n    return {nil, nil}\n  else\n    return {min_value, max_value}\n\
    \  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if value\
    \ < smallest then\n      smallest = value\n    end\n    if value > largest then\n\
    \      largest = value\n    end\n  end\n  if smallest == nil then\n    return\
    \ nil\n  elseif largest == nil then\n    return smallest\n  else\n    return {smallest,\
    \ largest}\n  end\nend", "  local smallest, largest = nil, nil\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      if smallest == nil then\n  \
    \      smallest, largest = value, value\n      else\n        smallest, largest\
    \ = smallest, value\n      end\n    elseif smallest == nil then\n      largest\
    \ = value\n    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n\
    \  else\n    return {smallest, largest}\n  end\nend", "  if #lst == 0 then\n \
    \   return {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local largest, smallest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n   \
    \ if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] >\
    \ largest then\n      largest = lst[i]\n    end\n  end\n  return {smallest, largest}\n\
    end", "  local negative = {}\n  local positive = {}\n  for _, v in ipairs(lst)\
    \ do\n    if v <= 0 then\n      table.insert(negative, v)\n    else\n      table.insert(positive,\
    \ v)\n    end\n  end\n  if #negative == 0 and #positive == 0 then\n    return\
    \ nil\n  else\n    if #negative > #positive then\n      return negative\n    else\n\
    \      return positive\n    end\n  end\nend", "  local smallest, largest = nil,\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < smallest then\n      smallest\
    \ = v\n    end\n    if v > largest then\n      largest = v\n    end\n  end\n \
    \ if smallest == nil and largest == nil then\n    return nil\n  end\n  return\
    \ largest, smallest\nend", "  local largest, smallest = nil, nil\n  for _, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n        largest\
    \ = v\n      else\n        largest = largest\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest\n      end\n    end\n  end\n  return largest, smallest\nend", " \
    \ if #lst == 0 then\n    return {None, None}\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if v > max_negative then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = value\n      else\n        if max_negative < value then\n          max_negative\
    \ = value\n        end\n      end\n    elseif value > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = value\n      else\n        if min_positive\
    \ > value then\n          min_positive = value\n        end\n      end\n    end\n\
    \  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local max_negative, min_positive = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        max_negative = max_negative\
    \ > v ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  return max_negative, min_positive\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <= 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    else\n      if min_positive == nil then\n        min_positive = v\n\
    \      else\n        if v < min_positive then\n          min_positive = v\n  \
    \      end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\n  return {nil,\
    \ nil}\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    return nil\n  elseif\
    \ smallest == nil then\n    return largest\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if\
    \ value < 0 then\n      if max_negative == nil then\n        max_negative = value\n\
    \      else\n        if max_negative < value then\n          max_negative = value\n\
    \        end\n      end\n    else\n      if min_positive == nil then\n       \
    \ min_positive = value\n      else\n        if min_positive > value then\n   \
    \       min_positive = value\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 then\n      if max_negative == nil then\n        max_negative =\
    \ v\n      else\n        if max_negative > v then\n          max_negative = v\n\
    \        end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if min_positive < v then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest == nil then\n        largest = v\n \
    \     else\n        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest * 10 + v\n      end\n    end\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i]\
    \ then\n      largest = lst[i]\n    end\n    if smallest > lst[i] then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil\n\
    \  end\n  if largest == nil then\n    return smallest\n  end\n  return largest,\
    \ smallest\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ smallest, largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return {None,\
    \ None}\n  end\n  if largest == nil then\n    return {smallest, None}\n  end\n\
    \  return {smallest, largest}\nend", "  local max_negative, min_positive = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend",
  "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ smallest then\n      smallest = v\n    end\n    if v > largest then\n      largest\
    \ = v\n    end\n  end\n  if smallest == nil then\n    return nil\n  elseif largest\
    \ == nil then\n    return smallest\n  else\n    return largest, smallest\n  end\n\
    end", "  local largest, smallest = nil, nil\n  for _, value in ipairs(lst) do\n\
    \    if value < 0 then\n      if largest == nil then\n        largest = value\n\
    \      else\n        largest = largest * 10 + value\n      end\n    elseif largest\
    \ == nil then\n      smallest = value\n    else\n      smallest = smallest * 10\
    \ + value\n    end\n  end\n  if largest == nil then\n    return {smallest, nil}\n\
    \  elseif smallest == nil then\n    return {largest, nil}\n  else\n    return\
    \ {largest, smallest}\n  end\nend", "  local smallest, largest = nil, nil\n  for\
    \ _, value in ipairs(lst) do\n    if value < 0 then\n      if smallest == nil\
    \ then\n        smallest, largest = value, value\n      else\n        largest,\
    \ smallest = value, value\n      end\n    elseif smallest == nil then\n      smallest,\
    \ largest = value, value\n    elseif value > smallest then\n      largest, smallest\
    \ = value, value\n    end\n  end\n  if smallest == nil then\n    return nil, nil\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = nil, nil\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      if smallest ==\
    \ nil then\n        smallest, largest = value, value\n      else\n        smallest,\
    \ largest = smallest, value\n      end\n    elseif smallest ~= nil then\n    \
    \  if value > largest then\n        largest = value\n      else\n        smallest,\
    \ largest = smallest, value\n      end\n    end\n  end\n  return smallest, largest\n\
    end", "  local positive, negative = {}, {}\n  for i = 1, #lst do\n    if lst[i]\
    \ > 0 then\n      table.insert(positive, lst[i])\n    elseif lst[i] < 0 then\n\
    \      table.insert(negative, -lst[i])\n    end\n  end\n  if #positive > 0 and\
    \ #negative > 0 then\n    return nil, -lst[1]\n  elseif #positive > 0 then\n \
    \   return positive, -lst[1]\n  elseif #negative > 0 then\n    return nil, -lst[1]\n\
    \  else\n    return nil, -lst[1]\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local max_negative = nil\n  local min_positive = nil\n\
    \  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = lst[i]\n      else\n        if max_negative < lst[i] then\n\
    \          max_negative = lst[i]\n        end\n      end\n    elseif lst[i] >\
    \ 0 then\n      if min_positive == nil then\n        min_positive = lst[i]\n \
    \     else\n        if min_positive > lst[i] then\n          min_positive = lst[i]\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ {min_positive, min_positive}\n  else\n    if min_positive == nil then\n    \
    \  return {max_negative, max_negative}\n    else\n      return {max_negative,\
    \ min_positive}\n    end\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for _, value in ipairs(lst) do\n    if value < smallest then\n      smallest\
    \ = value\n    end\n    if value > largest then\n      largest = value\n    end\n\
    \  end\n  if smallest == nil then\n    return nil\n  end\n  if largest == nil\
    \ then\n    return smallest\n  end\n  return largest, smallest\nend", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n\
    \    if v < 0 then\n      if max_negative == nil then\n        max_negative =\
    \ v\n      else\n        if v > max_negative then\n          max_negative = v\n\
    \        end\n      end\n    else\n      if min_positive == nil then\n       \
    \ min_positive = v\n      else\n        if v < min_positive then\n          min_positive\
    \ = v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local negative_integers,\
    \ positive_integers = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      negative_integers = lst[i]\n    elseif lst[i] > 0 then\n      positive_integers\
    \ = lst[i]\n    end\n  end\n  if negative_integers ~= nil and positive_integers\
    \ ~= nil then\n    return negative_integers, positive_integers\n  else\n    return\
    \ nil, nil\n  end\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if largest == nil then\n        largest =\
    \ i\n      else\n        largest = largest\n      end\n    elseif lst[i] > 0 then\n\
    \      if smallest == nil then\n        smallest = i\n      else\n        smallest\
    \ = smallest\n      end\n    end\n  end\n  if largest ~= nil and smallest ~= nil\
    \ then\n    return {largest, smallest}\n  end\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if value <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = value\n  \
    \    else\n        if value > max_negative then\n          max_negative = value\n\
    \        end\n      end\n    elseif value == 0 then\n      if min_positive ==\
    \ nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local largest, smallest = nil, nil\n  for _,\
    \ value in ipairs(lst) do\n    if value < 0 then\n      if largest == nil then\n\
    \        largest = value\n      else\n        largest = largest * 10 + value\n\
    \      end\n    elseif largest ~= nil then\n      if value < smallest then\n \
    \       smallest = value\n      end\n    end\n  end\n  if largest ~= nil and smallest\
    \ ~= nil then\n    return largest, smallest\n  else\n    return nil, nil\n  end\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest == nil then\n        largest = v\n \
    \     else\n        largest = largest\n      end\n    elseif v > 0 then\n    \
    \  if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest\n      end\n    end\n  end\n  if largest ~= nil and smallest ~= nil\
    \ then\n    return largest, smallest\n  end\n  return nil, nil\nend", "  local\
    \ largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest == nil then\n        largest = v\n      else\n        largest\
    \ = largest * 10 + v\n      end\n    elseif v > 0 then\n      if smallest == nil\
    \ then\n        smallest = v\n      else\n        smallest = smallest * 10 + v\n\
    \      end\n    end\n  end\n  return largest, smallest\nend", "  local positive,\
    \ negative = {}, {}\n  for i = 1, #lst do\n    if lst[i] > 0 then\n      table.insert(positive,\
    \ lst[i])\n    elseif lst[i] < 0 then\n      table.insert(negative, lst[i])\n\
    \    end\n  end\n  if #positive > 0 and #negative > 0 then\n    return table.unpack(table.sort(table.concat(positive,\
    \ negative)))\n  elseif #positive > 0 then\n    return table.unpack(table.sort(positive))\n\
    \  elseif #negative > 0 then\n    return table.unpack(table.sort(negative))\n\
    \  else\n    return nil\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      if smallest ==\
    \ nil then\n        smallest, largest = value, value\n      else\n        largest,\
    \ smallest = value, value\n      end\n    elseif smallest == nil then\n      smallest,\
    \ largest = value, value\n    elseif value > smallest then\n      largest, smallest\
    \ = value, value\n    end\n  end\n  return smallest, largest\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end", "  local max_negative, min_positive\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      max_negative =\
    \ value or max_negative\n    else\n      min_positive = value or min_positive\n\
    \    end\n  end\n  return max_negative, min_positive\nend", "  if #lst == 0 then\n\
    \    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n  \
    \  end\n  end\n  return {largest, smallest}\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ largest == nil then\n        largest = value\n      else\n        largest =\
    \ largest * 10 + value\n      end\n    elseif largest == nil then\n      smallest\
    \ = value\n    else\n      if value < smallest then\n        smallest = value\n\
    \      end\n    end\n  end\n  if largest == nil and smallest == nil then\n   \
    \ return nil\n  end\n  return largest, smallest\nend", "  local largest, smallest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ largest == nil then\n        largest = value\n      else\n        largest =\
    \ largest * 10 + value\n      end\n    elseif largest ~= nil then\n      if value\
    \ < smallest then\n        smallest = value\n      else\n        largest = largest\
    \ * 10 + value\n      end\n    end\n  end\n  if largest == nil then\n    largest\
    \ = smallest\n  end\n  return largest, smallest\nend", "  local max_negative =\
    \ nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0\
    \ then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    else\n      if min_positive == nil then\n        min_positive =\
    \ v\n      else\n        if min_positive < v then\n          min_positive = v\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local largest,\
    \ smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n     \
    \ if largest == nil then\n        largest = v\n      else\n        largest = largest\n\
    \      end\n    elseif v > 0 then\n      if smallest == nil then\n        smallest\
    \ = v\n      else\n        smallest = smallest\n      end\n    end\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
