name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are three distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,\
  \ 3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n\
  -- false\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum\
    \ = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for\
    \ _, v in pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local\
    \ s = #l\n  for i = 1, s do\n    local a, b, c = l[i], l[i + 1], l[i + 2]\n  \
    \  if a + b + c == 0 then\n      return true\n    end\n  end\n  return false\n\
    end", "  local sum = 0\n  for _, v in pairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum\
    \ = sum + v\n    if sum > 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local n = 0\n  for _, v in pairs(l) do\n    n = n + v\n  end\n\
    \  return n == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum\
    \ = sum + v\n    if sum > 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n\
    \  end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in pairs(l) do\n\
    \    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _,\
    \ v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local\
    \ n = 0\n  local s = nil\n  for _, v in ipairs(l) do\n    if v > 0 then\n    \
    \  n = n + 1\n      s = v\n    end\n  end\n  return n == 3\nend", "  local sum\
    \ = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 0\nend", "  local function helper(l, sum)\n    if #l == 0 then\n\
    \      return false\n    end\n    if sum == 0 then\n      return true\n    end\n\
    \    local first = l[1]\n    local rest = l[#l]\n    return helper(rest, sum -\
    \ first) or helper(rest, sum)\n  end\n  return helper(l, 0)\nend", "  local sum\
    \ = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end", "  local sum = 0\n  for _, v in pairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 0\nend", "  local sum = 0\n  for _, v in pairs(l) do\n    sum\
    \ = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in pairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
