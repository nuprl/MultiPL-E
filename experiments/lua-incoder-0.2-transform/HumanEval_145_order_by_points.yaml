name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given list of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ list.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
  \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  local\
    \ sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy\
    \ + 1] = sorted_nums[i]\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum\
    \ + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  if #nums == 0 then\n    return {}\n  end\n  local sums = {}\n  for i\
    \ = 1, #nums do\n    local sum = sums[#sums] + nums[i]\n    sums[#sums] = sum\n\
    \  end\n  local sorted = {}\n  for i = 1, #sums do\n    table.insert(sorted, sums[i])\n\
    \  end\n  table.sort(sorted, function(a, b)\n    return #a > #b\n  end)\n  return\
    \ sorted\nend", "  local nums_sorted = {}\n  local num_sums = {}\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    local num_sum = tonumber(string.format(\"\
    %0.1f\", num))\n    local index = num_sums[num_sum]\n    if index then\n     \
    \ nums_sorted[index] = num\n      num_sums[num_sum] = nil\n    else\n      num_sums[num_sum]\
    \ = i\n    end\n  end\n  for num_sum, index in pairs(num_sums) do\n    nums_sorted[index]\
    \ = nums[num_sum]\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n\
    \  local index = 1\n  for _, num in pairs(nums) do\n    local digits = math.floor(math.log10(num))\n\
    \    local sum = 0\n    for i = 1, digits do\n      sum = sum + num % 10\n   \
    \   num = math.floor(num / 10)\n    end\n    index = index + 1\n    if nums_sorted[sum]\
    \ == nil then\n      table.insert(nums_sorted, sum)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return a < b\n  end)\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums) do\n   \
    \ num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a < num_sum - b end)\n  return nums_sorted\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, #v do\n      sum = sum + v[i]\n    end\n    table.insert(result,\
    \ v)\n    if sum > 0 then\n      table.sort(result, function(a, b) return sum\
    \ - a < sum - b end)\n    end\n  end\n  return result\nend", "  local result =\
    \ {}\n  for _, v in pairs(nums) do\n    local sum = 0\n    for i = 1, #v do\n\
    \      sum = sum + tonumber(string.format(\"%.\" .. (#v - i) .. \"d\", v[i]))\n\
    \    end\n    table.insert(result, v)\n    if sum > 0 then\n      table.sort(result,\
    \ function(a, b)\n        return sum - tonumber(string.format(\"%.\" .. (#b -\
    \ #a) .. \"d\", b))\n      end)\n    end\n  end\n  return result\nend", "  local\
    \ nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    num_sum = num_sum + num_digits\n    if num_sum > 0 then\n      nums_sorted[num_sum]\
    \ = num\n    end\n  end\n  local num_sum = 0\n  for i = 1, #nums_sorted do\n \
    \   local num = nums_sorted[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    num_sum = num_sum + num_digits\n  end\n  if num_sum > 0\
    \ then\n    nums_sorted = table.sort(nums_sorted)\n  end\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  return nums_sorted\nend", "  local\
    \ result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1,\
    \ 10 do\n      sum = sum + math.floor(v / math.pow(10, i))\n      v = v % (math.pow(10,\
    \ i))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n \
    \ return result\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n \
    \   local sum = 0\n    for i = 1, 9 do\n      sum = sum + math.floor(v / math.pow(10,\
    \ i))\n      v = math.mod(v, math.pow(10, i))\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local result =\
    \ {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum\
    \ = sum + nums[i]:sub(j, j)\n    end\n    table.insert(result, sum)\n  end\n \
    \ return result\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n \
    \   local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10,\
    \ i))\n      v = v % (math.pow(10, i))\n    end\n    result[sum] = v\n  end\n\
    \  return result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for\
    \ _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for _, num\
    \ in ipairs(nums) do\n    local digits = num:reverse():gsub(\"%d+\", \"\"):reverse()\n\
    \    local sum_digits = tonumber(digits)\n    if sum_digits == nil then\n    \
    \  sum_digits = 0\n    end\n    local index = #nums_sorted\n    nums_sorted[index]\
    \ = num\n  end\n  return table.concat(nums_sorted)\nend", "  local result = {}\n\
    \  for _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1, 10 do\n    \
    \  sum = sum + math.floor(v / math.pow(10, i))\n      v = v % (math.pow(10, i))\n\
    \    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local digits = math.floor(math.log(num) / math.log(10))\n   \
    \ local sum_of_digits = math.fmod(num, math.pow(10, digits))\n    local index\
    \ = #nums_sorted\n    if sum_of_digits > 0 then\n      index = index + 1\n   \
    \ end\n    nums_sorted[index] = num\n  end\n  return nums_sorted\nend", "  local\
    \ result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1,\
    \ 9 do\n      sum = sum + v % 10\n      v = v // 10\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local nums_sorted\
    \ = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i):gsub(\"%d+\"\
    , \"\"):gsub(\"%d*\", \"\"):gsub(\"%d\", \"\")\n    local sum_digits = tonumber(digits)\n\
    \    if sum_digits == 0 then\n      nums_sorted[i] = nums[i]\n    else\n     \
    \ local index = #nums_sorted\n      while index > 0 and sum_digits > nums_sorted[index\
    \ - 1] do\n        index = index - 1\n      end\n      nums_sorted[index + 1]\
    \ = nums[i]\n    end\n  end\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local index = 1\n  for _, num in pairs(nums) do\n    local digits =\
    \ math.floor(math.log10(num))\n    local sum_of_digits = math.floor(math.log10(math.fmod(num,\
    \ math.pow(10, digits))))\n    local digit_index = math.floor((sum_of_digits -\
    \ digits)/3)\n    local digit_sum = (sum_of_digits - digits)/3 + digit_index*3\n\
    \    local digit_value = math.fmod(num, math.pow(10, digits))\n    local digit_key\
    \ = digit_sum + digit_index\n    local digit_index = digit_index + 1\n    local\
    \ digit_value = digit_value / math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index\n    local digit_value = digit_value\
    \ % math.pow(10, digits)\n    local digit_key = digit_key + digit_index\n    local\
    \ digit_value = digit_value % math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index\n    local digit_value = digit_value\
    \ % math.pow(10, digits)\n    local digit_key = digit_key + digit_index\n    local\
    \ digit_value = digit_value % math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index\n    local digit_value = digit_value\
    \ % math.pow(10, digits)\n    local digit_key = digit_key + digit_index\n    local\
    \ digit_value = digit_value % math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index\n    local digit_value = digit_value\
    \ % math.pow(10, digits)\n    local digit_key = digit_key + digit_index\n    local\
    \ digit_value = digit_value % math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index\n    local digit_value = digit_value\
    \ % math.pow(10, digits)\n    local digit_key = digit_key + digit_index\n    local\
    \ digit_value = digit_value % math.pow(10, digits)\n    local digit_key = digit_key\
    \ + digit_index\n    local digit_value = digit_value % math.pow(10, digits)\n\
    \    local digit_key = digit_key + digit_index", "  local nums_sorted = {}\n \
    \ for i = 1, #nums do\n    local digits = nums:sub(i, i)\n    local sum = 0\n\
    \    for j = 1, #digits do\n      sum = sum + tonumber(digits[j])\n    end\n \
    \   table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n  local\
    \ result = {}\n  for i = 1, #nums_sorted do\n    table.insert(result, nums[i])\n\
    \  end\n  return result\nend", "  local sorted_nums = {}\n  local num_sums = {}\n\
    \  for i = 1, #nums do\n    local num_sum = math.floor(math.abs(nums[i])):long()\n\
    \    if num_sum == 0 then\n      num_sum = 1\n    end\n    sorted_nums[i] = nums[i]\n\
    \    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n  local num_sums_sorted\
    \ = {}\n  for i = 1, #num_sums do\n    num_sums_sorted[i] = num_sums[i]\n  end\n\
    \  for i = 1, #nums do\n    local num_sum = num_sums_sorted[i]\n    local num\
    \ = sorted_nums[i]\n    if num_sum == 0 then\n      num_sum = 1\n    end\n   \
    \ local num_sum_index = #num_sums_sorted + 1\n    while num_sum_index > 1 do\n\
    \      local num_sum2 = num_sums_sorted[num_sum_index-1]\n      if num_sum + num_sum2\
    \ == num_sum then\n        table.insert(sorted_nums, num_sums_sorted[num_sum_index])\n\
    \        table.insert(num_sums_sorted, num_sum)\n        break\n      elseif num_sum\
    \ + num_sum2 < num_sum then\n        num_sum_index = num_sum_index - 1\n     \
    \ else\n        break\n      end\n    end\n  end\n  return sorted_nums\nend",
  "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return num_sum - a - b\n  end)\n  return nums_sorted\nend",
  "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j =\
    \ 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if nums_sorted[sum]\
    \ == nil then\n      table.insert(nums_sorted, sum)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a < b end)\n  return table.concat(nums_sorted)\nend",
  "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ digits = {}\n    for j = 1, 10 do\n      table.insert(digits, math.floor(num\
    \ / math.pow(10, j)))\n      num = num - math.floor(num / math.pow(10, j))\n \
    \   end\n    local sum_digits = #digits\n    if sum_digits > 1 then\n      table.insert(nums_sorted,\
    \ nums[i])\n      table.insert(nums_sorted, nums[i - 1])\n      table.insert(nums_sorted,\
    \ nums[i - 2])\n      table.insert(nums_sorted, nums[i - 3])\n      table.insert(nums_sorted,\
    \ nums[i - 4])\n      table.insert(nums_sorted, nums[i - 5])\n      table.insert(nums_sorted,\
    \ nums[i - 6])\n      table.insert(nums_sorted, nums[i - 7])\n      table.insert(nums_sorted,\
    \ nums[i - 8])\n      table.insert(nums_sorted, nums[i - 9])\n      table.insert(nums_sorted,\
    \ nums[i - 10])\n      table.insert(nums_sorted, nums[i - 11])\n      table.insert(nums_sorted,\
    \ nums[i - 12])\n      table.insert(nums_sorted, nums[i - 13])\n      table.insert(nums_sorted,\
    \ nums[i - 14])\n      table.insert(nums_sorted, nums[i - 15])\n      table.insert(nums_sorted,\
    \ nums[i - 16])\n      table.insert(nums_sorted, nums[i - 17])\n      table.insert(nums_sorted,\
    \ nums[i - 18])\n      table.insert(nums_sorted, nums[i - 19])\n      table.insert(nums_sorted,\
    \ nums[i - 20])\n      table.insert(nums_sorted, nums[i - 21])\n      table.insert(nums_sorted,\
    \ nums[i - 22])\n      table.insert(nums_sorted, nums[i - 23])\n      table.insert(nums_sorted,\
    \ nums[i - 24])\n      table.insert(nums_sorted, nums[i - 25])\n      table.insert(nums_sorted,\
    \ nums[i - 26])\n      table.insert(nums_sorted, nums[i - 27])\n      table.insert(nums_sorted,\
    \ nums[i - 28])\n      table.insert(nums_sorted, nums[i - 29])\n      table.insert(nums_sorted,\
    \ nums[i - 30])\n      table.insert(nums_sorted, nums[i - 31])\n      table.insert(nums_sorted,\
    \ nums[i - 32])\n      table.insert(nums_sorted, nums[i - 33])\n      table.",
  "  local nums_sorted = {}\n  for _, num in ipairs(nums) do\n    local digits = {}\n\
    \    for i = 1, 10 do\n      digits[i] = num % 10\n      num = num / 10\n    end\n\
    \    local sum_digits = #digits\n    local index = #nums_sorted\n    for i = 1,\
    \ 10 do\n      if digits[i] ~= 0 then\n        sum_digits = sum_digits + 1\n \
    \     end\n    end\n    if sum_digits > 1 then\n      table.insert(nums_sorted,\
    \ index)\n    end\n  end\n  return table.concat(nums_sorted)\nend", "  local nums_sorted\
    \ = {}\n  local index = 1\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    local index = #nums_sorted\n\
    \    if sum > 0 then\n      index = index + 1\n      table.insert(nums_sorted,\
    \ index)\n    end\n  end\n  return nums_sorted\nend", "  local result = {}\n \
    \ for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    table.insert(result, sum)\n  end\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for _, num in ipairs(nums) do\n \
    \   local digits = {}\n    for i = 1, 10 do\n      digits[i] = num % 10\n    \
    \  num = num / 10\n    end\n    local sum_digits = #digits\n    if nums_sorted[sum_digits]\
    \ then\n      nums_sorted[sum_digits] = nums_sorted[sum_digits] .. digits\n  \
    \  else\n      nums_sorted[sum_digits] = digits\n    end\n  end\n  return nums_sorted\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local digits =\
    \ math.floor(math.abs(v))\n    local sum = 0\n    for i = 1, digits do\n     \
    \ sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for i = 1,\
    \ #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n  end\n\
    \  return sorted_nums_copy\nend", "  local nums_sorted = {}\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local digit_sum = 0\n    for j = 1, #num do\n\
    \      digit_sum = digit_sum + tonumber(string.sub(num, j, j))\n    end\n    table.insert(nums_sorted,\
    \ num)\n    if digit_sum > 0 then\n      table.insert(nums_sorted, num)\n    end\n\
    \  end\n  table.sort(nums_sorted, function(a, b)\n    return order_by_digits(a)\
    \ - order_by_digits(b)\n  end)\n  return nums_sorted\nend", "  local result =\
    \ {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum\
    \ = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(result, sum)\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  local nums_sums =\
    \ {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum = 0\n    for\
    \ j = 1, #nums_sums do\n      sum = sum + nums_sums[j]\n      if sum > num then\n\
    \        break\n      end\n    end\n    if sum == num then\n      table.insert(nums_sorted,\
    \ num)\n      table.insert(nums_sums, num)\n    else\n      local index = #nums_sorted\n\
    \      nums_sums[index] = num\n      table.insert(nums_sorted, num)\n    end\n\
    \  end\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum\
    \ + num\n    nums_sorted[num_sum] = num\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return a < b end)\n  return nums_sorted\nend", "  local result = {}\n  for\
    \ _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1, 9 do\n      sum =\
    \ sum + math.floor(v / math.pow(10, i))\n      v = v % (math.pow(10, i))\n   \
    \ end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return result\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n\
    \    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n  local\
    \ result = {}\n  for i = 1, #nums_sorted do\n    table.insert(result, nums[i])\n\
    \  end\n  return result\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum + math.floor(v\
    \ / math.pow(10, i))\n      v = v % (math.pow(10, i))\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend", "  local sorted_nums = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    sorted_nums[num_sum]\
    \ = num\n  end\n  table.sort(sorted_nums)\n  return sorted_nums\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = 0\n    for j = 1, 10 do\n      num_sum = num_sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    sorted_nums[i] = num_sum\n    num_sums[num_sum] = i\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_res = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_res[num_sums[sorted_nums[i]]]\
    \ = sorted_nums[i]\n  end\n  return sorted_nums_res\nend", "  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    sorted_nums[sum] = nums[i]\n\
    \  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for i = 1,\
    \ #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_res\nend", "  if #nums == 0 then\n    return {}\n\
    \  end\n  local sums = {}\n  for i = 1, #nums do\n    local sum = sums[#sums]\n\
    \    sums[#sums + 1] = sum\n    if sum > 0 then\n      sums[#sums + 1] = sum -\
    \ nums[i]\n    end\n  end\n  local sorted = {}\n  for i = 1, #sums do\n    sorted[#sorted\
    \ + 1] = sums[i]\n  end\n  table.sort(sorted, function(a, b) return a < b end)\n\
    \  local result = {}\n  for i = 1, #sorted do\n    result[#result + 1] = sorted[i]\n\
    \  end\n  return result\nend", "  if #nums == 0 then\n    return {}\n  end\n \
    \ local sums = {}\n  for i = 1, #nums do\n    local sum = sums[#sums] + nums[i]\n\
    \    sums[#sums] = sum\n  end\n  local sorted = {}\n  for i = 1, #sums do\n  \
    \  sorted[#sorted + 1] = sums[i]\n  end\n  table.sort(sorted, function(a, b) return\
    \ a < b end)\n  local result = {}\n  for i = 1, #sorted do\n    result[#result\
    \ + 1] = sorted[i]\n  end\n  return result\nend", "  if #nums == 0 then\n    return\
    \ {}\n  end\n  local sums = {}\n  for i = 1, #nums do\n    local sum = sums[#sums]\
    \ + nums[i]\n    sums[#sums] = sum\n  end\n  table.sort(sums)\n  local result\
    \ = {}\n  for i = 1, #sums do\n    table.insert(result, sums[i])\n  end\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local digits = num:gsub('%d+', '%'):gsub('%d*', '%'):gsub('%d-',\
    \ '%d'):gsub('%d-%d*', '%d*'):gsub('%d*%d*', '%d*'):gsub('%d*%d-', '%d-'):gsub('%d-%d-',\
    \ '%d-'):gsub('%d-%d*', '%d*'):gsub('%d*%d*', '%d*'):gsub('%d*%d-', '%d-'):gsub('%d-%d-',\
    \ '%d-')\n    local sum_digits = tonumber(digits)\n    if sum_digits == 0 then\n\
    \      nums_sorted[i] = num\n    else\n      local index = #nums_sorted\n    \
    \  while index > 0 and sum_digits > nums_sorted[index - 1]:gsub('%d+', '%'):gsub('%d*',\
    \ '%'):gsub('%d-', '%d'):gsub('%d-%d*', '%d*'):gsub('%d*%d*', '%d*'):gsub('%d*%d-',\
    \ '%d-'):gsub('%d-%d-', '%d-'):gsub('%d-%d*', '%d*'):gsub('%d*%d*', '%d*'):gsub('%d*%d-',\
    \ '%d-'):gsub('%d-%d-', '%d-') then\n        index = index - 1\n      end\n  \
    \    nums_sorted[index + 1] = num\n    end\n  end\n  return nums_sorted\nend",
  "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10\
    \ do\n      sum = sum + nums[i]:byte(j) * j\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local result =\
    \ {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum\
    \ = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result, function(a, b) return a < b end)\n  return result\n\
    end", "  local sorted_nums = {}\n  local sorted_index = {}\n  local sorted_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    sorted_sum = sorted_sum\
    \ + num\n    sorted_index[sorted_sum] = i\n    sorted_nums[i] = num\n  end\n \
    \ table.sort(sorted_nums, function(a, b)\n    return a.value < b.value\n  end)\n\
    \  local sorted_nums_copy = sorted_nums\n  local sorted_index_copy = sorted_index\n\
    \  for i = 1, #sorted_nums_copy do\n    sorted_nums[sorted_index_copy[i]] = sorted_nums_copy[i]\n\
    \  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a < num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_res = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_res,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_res\nend", "  local result = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:byte(j) * j\n    end\n    table.insert(result, sum)\n  end\n  return\
    \ result\nend", "  if #nums == 0 then\n    return {}\n  end\n  local sums = {}\n\
    \  for i = 1, #nums do\n    local sum = sums[#sums] + nums[i]\n    sums[#sums]\
    \ = sum\n  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, #sums do\n\
    \    result[#result + 1] = nums[i - 1]\n  end\n  return result\nend", "  local\
    \ nums_sorted = {}\n  local nums_summed = 0\n  for _, num in ipairs(nums) do\n\
    \    nums_summed = nums_summed + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return nums_summed - a < nums_summed\
    \ - b end)\n  return nums_sorted\nend", "  if #nums == 0 then\n    return {}\n\
    \  end\n  local sums = {}\n  for i = 1, #nums do\n    local sum = tonumber(tostring(nums[i]))\n\
    \    if sum == 0 then\n      sums[i] = 0\n    else\n      sums[i] = sum\n    end\n\
    \  end\n  table.sort(sums)\n  local result = {}\n  for i = 1, #nums do\n    local\
    \ sum = tonumber(tostring(nums[i]))\n    if sum == 0 then\n      table.insert(result,\
    \ 0)\n    else\n      table.insert(result, sums[i])\n    end\n  end\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local nums_sums = {}\n  for _, num\
    \ in pairs(nums) do\n    local nums_sum = tonumber(string.format(\"%0.1f\", num))\n\
    \    if nums_sums[nums_sum] then\n      nums_sorted[#nums_sorted + 1] = nums_sums[nums_sum]\n\
    \      nums_sums[nums_sum] = nil\n    else\n      nums_sums[nums_sum] = num\n\
    \    end\n  end\n  table.sort(nums_sorted, function(a, b) return a < b end)\n\
    \  -- Reverse the order of the sorted numbers to get the original order.\n  table.sort(nums_sorted,\
    \ function(a, b) return a > b end)\n  -- Return the sorted list.\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local index = 1\n  for\
    \ _, num in pairs(nums) do\n    local digits = math.floor(math.log(num) / math.log(10))\n\
    \    local sum_of_digits = math.fmod(num, math.pow(10, digits))\n    local key\
    \ = tostring(sum_of_digits)\n    if not nums_sorted[key] then\n      nums_sorted[key]\
    \ = index\n      index = index + 1\n    end\n  end\n  return nums_sorted\nend",
  "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10\
    \ do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if result[sum]\
    \ then\n      result[sum] = result[sum] .. \",\" .. i\n    else\n      result[sum]\
    \ = i\n    end\n  end\n  table.sort(result, function(a, b) return a:tonumber()\
    \ > b:tonumber() end)\n  return result\nend", "  local result = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend", " \
    \ local nums_sorted = {}\n  local nums_sums = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local sum = 0\n    for j = 1, #num do\n      sum = sum +\
    \ num:sub(j, j)\n    end\n    local index = #nums_sorted\n    if nums_sums[sum]\
    \ == nil then\n      nums_sums[sum] = index\n      nums_sorted[index] = num\n\
    \    else\n      nums_sorted[index] = num\n      nums_sums[sum] = index\n    end\n\
    \  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local sorted_nums = {}\n  for i = 1, #nums_sorted do\n    table.insert(sorted_nums,\
    \ nums[#nums_sorted + i])\n  end\n  return sorted_nums\nend", "  local nums_sorted\
    \ = {}\n  local index = 1\n  for _, num in ipairs(nums) do\n    local digits =\
    \ math.floor(math.log10(num))\n    local sum_of_digits = math.floor(math.pow(10,\
    \ digits))\n    local sum_of_digits_index = index\n    for i = 1, digits do\n\
    \      sum_of_digits_index = sum_of_digits_index * 10 + num % 10\n      num =\
    \ num / 10\n    end\n    sum_of_digits_index = sum_of_digits_index + 1\n    sum_of_digits\
    \ = sum_of_digits - sum_of_digits_index\n    if sum_of_digits > 0 then\n     \
    \ table.insert(nums_sorted, num)\n    end\n    index = index + 1\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _,\
    \ num in ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return a < b\n  end)\n  local nums_sorted_res = {}\n  for\
    \ i = 1, #nums_sorted do\n    table.insert(nums_sorted_res, nums[i])\n  end\n\
    \  return nums_sorted_res\nend", "  if #nums == 0 then\n    return {}\n  end\n\
    \  local sums = {}\n  for i = 1, #nums do\n    local sum = sums[#sums] + nums[i]\n\
    \    sums[#sums + 1] = sum\n  end\n  local result = {}\n  for i = 1, #sums do\n\
    \    table.insert(result, sums[i])\n  end\n  table.sort(result)\n  return result\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(math.log(num) / math.log(10))\n    local sum =\
    \ 0\n    for j = 1, digits do\n      sum = sum + math.pow(10, j) * num % 10\n\
    \      num = math.floor(num / 10)\n    end\n    if nums_sorted[sum] == nil then\n\
    \      nums_sorted[sum] = i\n    end\n  end\n  table.sort(nums_sorted)\n  local\
    \ result = {}\n  for i = 1, #nums_sorted do\n    table.insert(result, nums[i])\n\
    \  end\n  return result\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n\
    \    local digits = nums:sub(i, i):gsub('%d+', '%+'):gsub('%d-', '-%-')\n    local\
    \ sum = 0\n    for _, d in ipairs(digits) do\n      sum = sum + tonumber(d)\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  local nums_summed = 0\n  for _, num in ipairs(nums) do\n    nums_summed\
    \ = nums_summed + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums_summed - a < nums_summed - b end)\n  return nums_sorted\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, 9 do\n      sum = sum + math.floor(v / math.pow(10, i))\n    \
    \  v = math.mod(v, math.pow(10, i))\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result)\n  return result\nend", "  local nums_sorted = {}\n\
    \  local nums_sums = {}\n  for _, num in ipairs(nums) do\n    local nums_sum =\
    \ tonumber(string.format(\"%.0d\", num))\n    if nums_sum == nil then\n      nums_sum\
    \ = 0\n    end\n    if nums_sums[nums_sum] == nil then\n      nums_sorted[#nums_sorted\
    \ + 1] = num\n      nums_sums[nums_sum] = 1\n    else\n      nums_sums[nums_sum]\
    \ = nums_sums[nums_sum] + 1\n    end\n  end\n  local nums_sorted = table.sort(nums_sorted)\n\
    \  for _, num in ipairs(nums_sorted) do\n    nums[#nums + 1] = num\n  end\n  return\
    \ nums\nend", "  local nums_sorted = {}\n  local nums_sums = {}\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    local sum = 0\n    for j = 1, #num do\n\
    \      sum = sum + num:sub(j, j)\n    end\n    local index = #nums_sorted\n  \
    \  if nums_sums[sum] == nil then\n      nums_sums[sum] = index\n      nums_sorted[index]\
    \ = num\n    else\n      nums_sorted[index] = nums_sorted[nums_sums[sum]]\n  \
    \    nums_sums[sum] = index\n    end\n  end\n  return nums_sorted\nend", "  local\
    \ sorted_nums = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, #num + 1 do\n      sum = sum + num:sub(i, i)\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for\
    \ _, num in ipairs(sorted_nums) do\n    table.insert(sorted_nums_res, num)\n \
    \ end\n  return sorted_nums_res\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\
    \ * 10^(j - 1)\n    end\n    table.insert(result, sum)\n  end\n  return result\n\
    end", "  local sorted_nums = {}\n  local num_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(sorted_nums, num)\n  end\n\
    \  table.sort(sorted_nums, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return sorted_nums\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a < num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local sum = 0\n    for i = 1, 9 do\n      sum = sum + math.floor(v /\
    \ math.pow(10, i))\n      v = v % (math.pow(10, i))\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i\
    \ = 1, digits do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n   \
    \ end\n    table.insert(result, sum)\n  end\n  return result\nend", "  local nums_sorted\
    \ = {}\n  local index = 1\n  for _, num in pairs(nums) do\n    local digits =\
    \ math.floor(math.log10(num))\n    local sum = 0\n    for i = 1, digits do\n \
    \     sum = sum + num / 10\n      num = num % 10\n    end\n    table.insert(nums_sorted,\
    \ index)\n    index = index + 1\n    table.insert(nums_sorted, sum)\n  end\n \
    \ table.sort(nums_sorted)\n  local result = {}\n  for _, num in pairs(nums_sorted)\
    \ do\n    table.insert(result, num)\n  end\n  return result\nend", "  local result\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    local num_digits\
    \ = math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - math.floor(math.log(a) / math.log(b)) end)\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n\
    \    local num_sum = sum((nums[i]):gsub(\"%d+\", \"\"))\n    sorted_nums[i] =\
    \ nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums, function(a,\
    \ b)\n    return num_sums[a] > num_sums[b]\n  end)\n  return sorted_nums\nend",
  "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a < num_sum - b end)\n  return nums_sorted\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local digits =\
    \ math.floor(math.abs(v))\n    local sum = 0\n    for i = 1, digits do\n     \
    \ sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    table.insert(nums_sorted, sum)\n  end\n  return table.sort(nums_sorted)\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted, function(a, b) return a < b end)\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local digits = math.floor(math.log(num) / math.log(10))\n\
    \    local sum = 0\n    for j = 1, digits do\n      sum = sum + math.pow(10, j)\
    \ * num % 10\n      num = math.floor(num / 10)\n    end\n    if nums_sorted[sum]\
    \ == nil then\n      table.insert(nums_sorted, sum)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return a < b\n  end)\n  local result = {}\n  for i = 1,\
    \ #nums_sorted do\n    table.insert(result, nums[i])\n  end\n  return result\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10, i))\n   \
    \   v = v % (math.pow(10, i))\n    end\n    table.insert(result, sum)\n  end\n\
    \  return result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n   \
    \ local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a < b end)\n  return table.concat(nums_sorted)\nend",
  "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n\
    \    local num_digits = math.floor(math.log(num) / math.log(10))\n    num_sum\
    \ = num_sum + num_digits\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - math.floor(math.log(a) / math.log(b)) end)\n\
    \  return nums_sorted\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local digits = math.floor(math.abs(v))\n    if digits == 0 then\n  \
    \    result[v] = v\n    else\n      local sum = 0\n      for i = 1, digits do\n\
    \        sum = sum + math.pow(10, i)\n      end\n      result[v] = sum\n    end\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local nums_sorted_sorted = {}\n  for i = 1, #nums_sorted do\n    table.insert(nums_sorted_sorted,\
    \ nums[i])\n  end\n  return nums_sorted_sorted\nend", "  local sorted_nums = {}\n\
    \  local num_sums = {}\n  for _, num in ipairs(nums) do\n    local num_sum = 0\n\
    \    for i = 1, #num do\n      num_sum = num_sum + num:sub(i, i)\n    end\n  \
    \  table.insert(sorted_nums, num_sum)\n    table.insert(num_sums, num_sum)\n \
    \ end\n  table.sort(sorted_nums)\n  local sorted_num_sums = {}\n  for _, num_sum\
    \ in ipairs(num_sums) do\n    table.insert(sorted_num_sums, num_sum)\n  end\n\
    \  table.sort(sorted_num_sums)\n  local sorted_nums_copy = {}\n  for _, num in\
    \ ipairs(sorted_nums) do\n    table.insert(sorted_nums_copy, num)\n  end\n  return\
    \ sorted_nums_copy\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for\
    \ _, num in ipairs(nums) do\n    local num_digits = math.floor(math.log(num) /\
    \ math.log(10))\n    num_sum = num_sum + num_digits\n    nums_sorted[num_sum]\
    \ = num\n  end\n  table.sort(nums_sorted, function(a, b) return a < b end)\n \
    \ return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sums = {}\n\
    \  for i = 1, #nums do\n    local num_sum = 0\n    for j = 1, #nums[i] do\n  \
    \    num_sum = num_sum + nums[i][j]\n    end\n    if num_sum == 0 then\n     \
    \ num_sum = nums[i][1]\n    end\n    if num_sum == 0 then\n      num_sum = 1\n\
    \    end\n    if num_sum in num_sums then\n      num_sums[num_sum] = num_sums[num_sum]\
    \ + 1\n    else\n      num_sums[num_sum] = 1\n    end\n  end\n  for num_sum, count\
    \ in pairs(num_sums) do\n    if count > 1 then\n      table.insert(nums_sorted,\
    \ num_sum)\n    end\n  end\n  return nums_sorted\nend", "  local nums_sorted =\
    \ {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum\
    \ + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  local result = {}\n  for _, v in pairs(nums) do\n    local digits = math.floor(math.abs(v))\n\
    \    local sum = 0\n    for i = 1, digits do\n      sum = sum + math.floor(v /\
    \ math.pow(10, i))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n   \
    \ local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = sorted_nums\n  local sorted_nums_copy_index = 1\n\
    \  local sorted_nums_copy_size = #sorted_nums\n  local sorted_nums_copy_reversed\
    \ = false\n  local sorted_nums_copy_reversed_index = 1\n  local sorted_nums_copy_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed = false\n  local\
    \ sorted_nums_copy_reversed_reversed_index = 1\n  local sorted_nums_copy_reversed_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed_reversed = false\n\
    \  local sorted_nums_copy_reversed_reversed_reversed_index = 1\n  local sorted_nums_copy_reversed_reversed_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed_reversed_reversed\
    \ = false\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_index\
    \ = 1\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_size = #sorted_nums\n\
    \  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed = false\n\
    \  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_index =\
    \ 1\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = false\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 1\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = false\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 1\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_reversed_size\
    \ = #sorted_nums\n  local sorted_nums_copy_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = false\n  local sorted_", "  local result = {}\n  for i = 1, #nums do\n   \
    \ local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n \
    \   end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local digits = {}\n    for j = 1, #num:byte() do\n      table.insert(digits,\
    \ tonumber(string.sub(num, j, j)))\n    end\n    local sum_digits = #digits\n\
    \    if nums_sorted[sum_digits] ~= nil then\n      local index = nums_sorted[sum_digits]\n\
    \      nums_sorted[sum_digits] = nums_sorted[sum_digits] + 1\n      nums_sorted[index]\
    \ = num\n    else\n      nums_sorted[sum_digits] = num\n    end\n  end\n  return\
    \ nums_sorted\nend", "  local result = {}\n  for i = 1, #nums do\n    local sum\
    \ = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j - 1)\n    end\n\
    \    table.insert(result, sum)\n  end\n  return result\nend", "  if #nums == 0\
    \ then\n    return {}\n  end\n  local sums = {}\n  for i = 1, #nums do\n    local\
    \ sum = sums[#sums]\n    if sum == nil then\n      sum = 0\n    end\n    sum =\
    \ sum + nums[i]\n    sums[#sums + 1] = sum\n  end\n  local sorted_sums = {}\n\
    \  for i = 1, #sums do\n    local sum = sums[i]\n    local index = i\n    for\
    \ j = i + 1, #sums do\n      local other_sum = sums[j]\n      if other_sum ==\
    \ sum then\n        index = j\n        break\n      end\n    end\n    table.insert(sorted_sums,\
    \ index)\n  end\n  table.sort(sorted_sums)\n  local result = {}\n  for _, index\
    \ in ipairs(sorted_sums) do\n    table.insert(result, nums[index])\n  end\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in\
    \ ipairs(nums) do\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum > num_sum\
    \ then\n      num_sum = num_digits_sum\n      nums_sorted[num_digits] = num\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ num_sums = {}\n  for _, num in pairs(nums) do\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = math.floor(num / math.pow(10, num_digits))\n\
    \    local num_key = num_sum\n    if num_sums[num_key] == nil then\n      num_sums[num_key]\
    \ = num_sum\n      nums_sorted[num_key] = num\n    else\n      local i = 1\n \
    \     while num_sums[num_key + i] == nil do\n        i = i + 1\n      end\n  \
    \    num_sums[num_key + i] = num_sum\n      nums_sorted[num_key + i] = num\n \
    \   end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ nums_sum = 0\n  for _, num in ipairs(nums) do\n    nums_sum = nums_sum + num\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return nums_sum - a < nums_sum - b end)\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum\
    \ = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local nums_sums = {}\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local sum = 0\n    for j = 1, #num do\n      sum\
    \ = sum + num:sub(j, j)\n    end\n    if nums_sums[sum] == nil then\n      nums_sums[sum]\
    \ = i\n      nums_sorted[#nums_sorted + 1] = num\n    end\n  end\n  return nums_sorted\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j - 1)\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    local digits = num:gsub(\"%d+\", \"\"\
    )\n    local sum_digits = tonumber(digits)\n    if sum_digits then\n      local\
    \ index = #nums_sorted\n      nums_sorted[index] = num\n    end\n  end\n  return\
    \ table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n  local index =\
    \ 1\n  for _, num in ipairs(nums) do\n    local digits = math.floor(num / 10)\n\
    \    local sum = digits + num % 10\n    index = index + 1\n    if nums_sorted[sum]\
    \ ~= nil then\n      nums_sorted[sum] = index\n    else\n      nums_sorted[sum]\
    \ = index\n    end\n  end\n  return nums_sorted\nend", "  local result = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    table.insert(result, sum)\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n    local\
    \ sum = 0\n    for i = 1, 10 do\n      sum = sum + math.floor(v / math.pow(10,\
    \ i))\n      v = v %% math.pow(10, i)\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result, function(a, b)\n    return a < b\n  end)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local digits = num:gsub('%d+', '%#%0*d')\n    local sum_digits\
    \ = tonumber(digits:gsub('%0+$', ''))\n    if sum_digits == 0 then\n      nums_sorted[i]\
    \ = num\n      continue\n    end\n    local index = #nums_sorted\n    for j =\
    \ 1, #nums_sorted do\n      if sum_digits > nums_sorted[j]:gsub('%d+', '%#%0*d')\
    \ then\n        index = j\n        break\n      end\n    end\n    nums_sorted[index]\
    \ = num\n  end\n  return table.concat(nums_sorted)\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum\
    \ + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum\
    \ > num_sum then\n      num_sum = num_digits_sum\n      nums_sorted[i] = num\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for\
    \ _, num in ipairs(nums) do\n    local digits = {}\n    for i = 1, 10 do\n   \
    \   digits[i] = num % 10\n      num = num / 10\n    end\n    local sum_digits\
    \ = #digits\n    if nums_sorted[sum_digits] then\n      nums_sorted[sum_digits]\
    \ = nums_sorted[sum_digits]\n    else\n      nums_sorted[sum_digits] = num\n \
    \   end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ nums_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #num do\n      sum = sum + tonumber(string.sub(num, j, j))\n\
    \    end\n    table.insert(nums_sums, sum)\n    table.insert(nums_sorted, num)\n\
    \  end\n  table.sort(nums_sums)\n  table.sort(nums_sorted)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  if #nums == 0 then\n    return {}\n  end\n  local\
    \ sums = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i)\n    local\
    \ sum = tonumber(digits:reduce(function(acc, x) return acc + x end, 0))\n    sums[sum]\
    \ = sums[sum] or {}\n    sums[sum][#sums[sum] + 1] = i\n  end\n  local result\
    \ = {}\n  for _, sum in pairs(sums) do\n    table.insert(result, sum)\n  end\n\
    \  table.sort(result, function(a, b) return a[1] < b[1] end)\n  return result\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  return table.sort(nums_sorted)\nend", "  local sorted_nums =\
    \ {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i):gsub(\"%d+\", function(a)\n\
    \      return tonumber(a) + 0\n    end)\n    table.insert(sorted_nums, digits)\n\
    \  end\n  table.sort(sorted_nums, function(a, b)\n    return a[1] + b[1]\n  end)\n\
    \  local sorted_nums_rev = table.concat(sorted_nums, \"\")\n  local sorted_nums_rev_len\
    \ = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local\
    \ sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n\
    \  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len =\
    \ #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len\
    \ = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local\
    \ sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n\
    \  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len =\
    \ #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len\
    \ = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local\
    \ sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n\
    \  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len =\
    \ #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len\
    \ = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local\
    \ sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n\
    \  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len =\
    \ #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local sorted_nums_rev_len\
    \ = #sorted_nums_rev\n  local sorted_nums_rev_len = #sorted_nums_rev\n  local\
    \ sorted_nums_re", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num\
    \ in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = sum((nums[i]):gsub(\"%d+\"\
    , \"\"))\n    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, #v do\n      sum = sum + v[i]\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local nums_sorted\
    \ = {}\n  local nums_sums = {}\n  for _, num in ipairs(nums) do\n    local nums_sum\
    \ = tonumber(string.format(\"%0.1f\", num))\n    if nums_sums[nums_sum] == nil\
    \ then\n      nums_sums[nums_sum] = 0\n    end\n    nums_sums[nums_sum] = nums_sums[nums_sum]\
    \ + 1\n    nums_sorted[nums_sum] = num\n  end\n  local sorted_nums_sums = table.sort(nums_sums)\n\
    \  local sorted_nums_sorted = {}\n  for _, num in ipairs(nums_sorted) do\n   \
    \ sorted_nums_sorted[num] = nums[nums_sorted[num]]\n  end\n  return sorted_nums_sorted\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j - 1)\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for\
    \ i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_copy\nend", "  local nums_sorted = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum\
    \ + nums[i][j]\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i = 1,\
    \ #nums do\n    local num = nums[i]\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum_of_digits = math.fmod(num, math.pow(10, digits))\n\
    \    sorted_nums[sum_of_digits] = nums[i]\n  end\n  return table.sort(sorted_nums)\n\
    end", "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n\
    \    for i = 1, 9 do\n      sum = sum + v % 10\n      v = v // 10\n    end\n \
    \   table.insert(result, v)\n    if sum > 0 then\n      table.insert(result, sum)\n\
    \    end\n  end\n  return result\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a < b end)\n  return table.concat(nums_sorted)\nend",
  "  local result = {}\n  for _, v in ipairs(nums) do\n    local sum = 0\n    for\
    \ i = 1, #v do\n      sum = sum + v[i]\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result)\n  return result\nend", "  local result = {}\n  for\
    \ _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1, 10 do\n      sum\
    \ = sum + math.floor(v / 10) * i\n      v = v mod 10\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum(nums[i])\n\
    \    if num_sum == 0 then\n      sorted_nums[#sorted_nums+1] = nums[i]\n    else\n\
    \      num_sums[num_sum] = num_sums[num_sum] or {}\n      num_sums[num_sum][#num_sums[num_sum]+1]\
    \ = nums[i]\n    end\n  end\n  for num_sum, nums in pairs(num_sums) do\n    table.sort(nums,\
    \ function(a,b) return sum(a) < sum(b) end)\n    sorted_nums[#sorted_nums+1] =\
    \ nums[#nums]\n  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n\
    \  for _, num in ipairs(nums) do\n    local sum = 0\n    for i = 1, 10 do\n  \
    \    sum = sum + math.floor(num / math.pow(10, i))\n      num = num % math.pow(10,\
    \ i)\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local sorted_nums = {}\n  for _, num in ipairs(nums_sorted) do\n    table.insert(sorted_nums,\
    \ num)\n  end\n  return sorted_nums\nend", "  local result = {}\n  for _, v in\
    \ ipairs(nums) do\n    local sum = 0\n    for i = 1, 10 do\n      sum = sum +\
    \ math.floor(v / i)\n      v = v %% i\n    end\n    table.insert(result, sum)\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1, j):tonumber()\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local sorted_nums = {}\n  for i = 1, #nums_sorted do\n    table.insert(sorted_nums,\
    \ nums[i])\n  end\n  return sorted_nums\nend", "  local result = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + tonumber(tostring(nums[i])):sub(j,\
    \ j + 1)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result,\
    \ function(a, b) return a < b end)\n  return result\nend", "  local result = {}\n\
    \  for _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1, #v do\n    \
    \  sum = sum + v[i]\n    end\n    table.insert(result, v)\n    if sum > 0 then\n\
    \      table.sort(result, function(a, b) return sum - a < sum - b end)\n    end\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local digits = math.floor(math.log(num) / math.log(10))\n\
    \    local sum_of_digits = math.fmod(num, math.pow(10, digits))\n    local index\
    \ = #nums_sorted + 1\n    nums_sorted[index] = num\n    if sum_of_digits > 0 then\n\
    \      local insertion_point = index\n      for j = 1, digits do\n        insertion_point\
    \ = insertion_point + 1\n        local digit_sum = math.fmod(insertion_point,\
    \ math.pow(10, j))\n        if digit_sum > sum_of_digits then\n          break\n\
    \        end\n      end\n      table.insert(nums_sorted, insertion_point)\n  \
    \  end\n  end\n  return nums_sorted\nend", "  local result = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j - 1)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n\
    \    local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i = 1,\
    \ digits do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n\
    \    table.insert(result, sum)\n  end\n  return result\nend", "  local nums_sorted\
    \ = {}\n  for _, num in ipairs(nums) do\n    local digits = math.floor(num / 10)\n\
    \    local sum_of_digits = num - digits * 10\n    local index = #nums_sorted +\
    \ 1\n    nums_sorted[index] = num\n    nums_sorted[index + 1] = digits\n    nums_sorted[index\
    \ + 2] = sum_of_digits\n  end\n  table.sort(nums_sorted, function(a, b) return\
    \ a[2] > b[2] end)\n  return table.unpack(nums_sorted)\nend", "  local sorted_nums\
    \ = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i)\n    local sum_digits\
    \ = #digits + 0\n    local index = #sorted_nums\n    sorted_nums[index] = sum_digits\n\
    \  end\n  table.sort(sorted_nums)\n  local result = {}\n  for i = 1, #sorted_nums\
    \ do\n    result[#result + 1] = sorted_nums[i]\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i, i):gsub(\"\
    %d+\", \"\"):gsub(\"%d\", \"\")\n    local sum = 0\n    for j = 1, #digits do\n\
    \      sum = sum + tonumber(digits[j])\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result)\n  return result\nend", "  local nums_sorted = {}\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local digit_sum = 0\n   \
    \ for j = 1, #num do\n      digit_sum = digit_sum + tonumber(string.sub(num, j,\
    \ j))\n    end\n    local index = #nums_sorted\n    if digit_sum > 0 then\n  \
    \    index = index + 1\n    end\n    nums_sorted[index] = num\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local digits = math.floor(math.log(num) / math.log(10))\n\
    \    local sum_digits = math.fmod(num, math.pow(10, digits))\n    local index\
    \ = #nums_sorted + 1\n    nums_sorted[index] = num\n    if sum_digits > 0 then\n\
    \      local index_of_sum_digits = #nums_sorted + 1\n      local index_of_sum_digits_digits\
    \ = math.floor(math.log10(sum_digits))\n      local index_of_sum_digits_digits_power\
    \ = math.pow(10, index_of_sum_digits_digits)\n      local index_of_sum_digits_digits_power\
    \ = math.floor(index_of_sum_digits_digits_power)\n      local index_of_sum_digits_digits_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power)\n      local index_of_sum_digits_digits_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power)\n      local index_of_sum_digits_digits_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power_power)\n      local index_of_sum_digits_digits_power_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power_power_power)\n      local\
    \ index_of_sum_digits_digits_power_power_power_power_power_power = math.pow(10,\
    \ index_of_sum_digits_digits_power_power_power_power_power_power)\n      local\
    \ index_of_sum_digits_digits_power_power_power_power_power_power_power = math.pow(10,\
    \ index_of_sum_digits_digits_power_power_power_power_power_power)\n      local\
    \ index_of_sum_digits_digits_power_power_power_power_power_power_power = math.pow(10,\
    \ index_of_sum_digits_digits_power_power_power_power_power_power_power)\n    \
    \  local index_of_sum_digits_digits_power_power_power_power_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power_power_power_power_power_power_power)\n\
    \      local index_of_sum_digits_digits_power_power_power_power_power_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power_power_power_power_power_power_power)\n\
    \      local index_of_sum_digits_digits_power_power_power_power_power_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_power_power_power_power_power_power_power_power_power)\n\
    \      local index_of_sum_digits_digits_power_power_power_power_power_power_power_power_power_power\
    \ = math.pow(10, index_of_sum_digits_digits_", "  local sorted_nums = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:sub(j, j)\n    end\n    sorted_nums[sum] = i\n  end\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  local nums_sorted_sorted = {}\n  for\
    \ i = 1, #nums_sorted do\n    table.insert(nums_sorted_sorted, nums[i])\n  end\n\
    \  return nums_sorted_sorted\nend", "  local nums_sorted = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_sum = num:gsub(\"\
    %d+\", function(digit)\n      return tonumber(digit)\n    end)\n    local index\
    \ = num_sums[num_sum]\n    if index then\n      nums_sorted[index] = num\n   \
    \   num_sums[num_sum] = nil\n    else\n      num_sums[num_sum] = i\n    end\n\
    \  end\n  for i = 1, #nums_sorted do\n    table.insert(nums, nums_sorted[i])\n\
    \  end\n  return nums\nend", "  local nums_sorted = {}\n  for _, num in ipairs(nums)\
    \ do\n    local sum = 0\n    for i = 1, #num do\n      sum = sum + tonumber(string.sub(num,\
    \ i, i))\n    end\n    table.insert(nums_sorted, num)\n    if nums_sorted[#nums_sorted]\
    \ == sum or #nums_sorted == 1 then\n      table.insert(nums_sorted, num)\n   \
    \ end\n  end\n  return table.concat(nums_sorted)\nend", "  local result = {}\n\
    \  for _, v in ipairs(nums) do\n    local sum = 0\n    for i = 1, 10 do\n    \
    \  sum = sum + math.floor(v / math.pow(10, i))\n      v = v % (math.pow(10, i))\n\
    \    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum\
    \ > num_sum then\n      num_sum = num_digits_sum\n      nums_sorted[i] = num\n\
    \    end\n  end\n  return table.concat(nums_sorted)\nend", "  local nums_sorted\
    \ = {}\n  local nums_sorted_index = {}\n  for i, v in ipairs(nums) do\n    local\
    \ digits = math.floor(math.abs(v))\n    local sum_of_digits = math.abs(v - math.floor(math.abs(v)))\n\
    \    local index = #nums_sorted\n    if #nums_sorted == 0 then\n      nums_sorted[1]\
    \ = v\n      nums_sorted_index[1] = i\n    elseif sum_of_digits > nums_sorted[#nums_sorted]\
    \ then\n      nums_sorted[#nums_sorted+1] = v\n      nums_sorted_index[#nums_sorted+1]\
    \ = i\n    end\n  end\n  table.sort(nums_sorted, function(a, b)\n    return nums_sorted_index[a]\
    \ > nums_sorted_index[b]\n  end)\n  return nums_sorted\nend", "  if #nums == 0\
    \ then\n    return {}\n  end\n  local sums = {}\n  for i = 1, #nums do\n    local\
    \ sum = sums[#sums] + nums[i]\n    sums[#sums] = sum\n  end\n  local sorted_sums\
    \ = table.sort(sums)\n  local sorted_nums = table.sort(nums)\n  local result =\
    \ {}\n  for i = 1, #sorted_nums do\n    local index = #sorted_sums + 1\n    if\
    \ sorted_sums[index] == sorted_nums[i] then\n      table.insert(result, sorted_nums[i])\n\
    \    else\n      table.insert(result, index)\n    end\n  end\n  return result\n\
    end", "  local nums_sorted = {}\n  local nums_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    nums_sum = nums_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return nums_sum - a < nums_sum - b end)\n\
    \  return nums_sorted\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i\
    \ = 1, digits do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n   \
    \ end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return result\n\
    end", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n\
    \    local num_sum = math.floor(math.abs(nums[i])):int()\n    if num_sum == 0\
    \ then\n      num_sum = 1\n    end\n    sorted_nums[i] = nums[i]\n    num_sums[num_sum]\
    \ = num_sums[num_sum] or {}\n    num_sums[num_sum][#num_sums[num_sum] + 1] = i\n\
    \  end\n  local num_sums_sorted = {}\n  for num_sum, indices in pairs(num_sums)\
    \ do\n    table.sort(indices)\n    num_sums_sorted[num_sum] = indices[1]\n  end\n\
    \  for i = 1, #nums do\n    sorted_nums[num_sums_sorted[math.floor(math.abs(nums[i])):int()]]\
    \ = nums[i]\n  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n  local\
    \ nums_sum = 0\n  for _, num in ipairs(nums) do\n    nums_sum = nums_sum + num\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return nums_sum - a < nums_sum - b end)\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local nums_summed = 0\n  for _, num in ipairs(nums) do\n\
    \    nums_summed = nums_summed + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return nums_summed - a < nums_summed\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local nums_sum\
    \ = 0\n  for _, num in ipairs(nums) do\n    nums_sum = nums_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return nums_sum - a <\
    \ nums_sum - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n \
    \ for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n\
    \  end\n  table.sort(nums_sorted)\n  local sorted_nums = {}\n  for i = 1, #nums_sorted\
    \ do\n    table.insert(sorted_nums, nums[#nums_sorted + i])\n  end\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  for _, num in ipairs(nums) do\n    local sum\
    \ = 0\n    for i = 1, 10 do\n      sum = sum + math.floor((num / 10) * i)\n  \
    \    num = num % 10\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local sorted_nums = {}\n  for _, num in ipairs(nums_sorted) do\n    table.insert(sorted_nums,\
    \ num)\n  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n  local\
    \ nums_sum = 0\n  for _, num in ipairs(nums) do\n    nums_sum = nums_sum + num\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return nums_sum - a < nums_sum - b end)\n  return nums_sorted\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = sum((nums[i]):gsub(\"%d+\", \"\"))\n    sorted_nums[i] = nums[i]\n    num_sums[i]\
    \ = num_sum\n  end\n  table.sort(sorted_nums)\n  for i = 1, #nums do\n    local\
    \ num_sum = num_sums[i]\n    if num_sum == sorted_nums[i] then\n      sorted_nums[i]\
    \ = i\n    end\n  end\n  return sorted_nums\nend", "  local result = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:byte(j) * j\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local sorted_nums = {}\n  local num_sums = {}\n  for\
    \ i = 1, #nums do\n    local num_sum = sum(nums[i])\n    if num_sum == 0 then\n\
    \      sorted_nums[#sorted_nums+1] = nums[i]\n    else\n      num_sums[num_sum]\
    \ = num_sums[num_sum] or {}\n      table.insert(num_sums[num_sum], i)\n    end\n\
    \  end\n  for num_sum, indices in pairs(num_sums) do\n    table.sort(indices,\
    \ function(a, b) return nums[a] < nums[b] end)\n    for _, index in ipairs(indices)\
    \ do\n      sorted_nums[index] = nums[index]\n    end\n  end\n  return sorted_nums\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    sorted_nums[sum]\
    \ = i\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for i\
    \ = 1, #nums do\n    sorted_nums_res[sorted_nums[i]] = nums[i]\n  end\n  return\
    \ sorted_nums_res\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for\
    \ _, num in ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a < num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_res = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_res,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_res\nend", "  local sorted_nums\
    \ = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum\
    \ + num\n    sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums)\n  return\
    \ sorted_nums\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local digits = math.floor(math.log10(num))\n    local sum\
    \ = 0\n    for j = 1, digits do\n      sum = sum + num % 10\n      num = math.floor(num\
    \ / 10)\n    end\n    local index = #nums_sorted + 1\n    nums_sorted[index] =\
    \ num\n    if sum > 0 then\n      table.insert(nums_sorted, index)\n    end\n\
    \  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local index =\
    \ 1\n  for _, num in pairs(nums) do\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum = 0\n    for i = 1, digits do\n      sum = sum\
    \ + math.pow(10, i)\n    end\n    local key = sum\n    if nums_sorted[key] ~=\
    \ nil then\n      index = index + 1\n    end\n    nums_sorted[key] = index\n \
    \ end\n  local sorted_nums = {}\n  for _, num in pairs(nums_sorted) do\n    table.insert(sorted_nums,\
    \ num)\n  end\n  return sorted_nums\nend", "  local result = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j):tonumber()\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result,\
    \ function(a, b) return a < b end)\n  return result\nend", "  local nums_sorted\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n     \
    \ sum = sum + nums[i]:sub(1, j):tonumber()\n    end\n    if nums_sorted[sum] then\n\
    \      nums_sorted[sum] = nums_sorted[sum] .. \",\" .. i\n    else\n      nums_sorted[sum]\
    \ = i\n    end\n  end\n  -- Sort by sum\n  table.sort(nums_sorted, function(a,\
    \ b)\n    return a:sub(1, 1):tonumber() > b:sub(1, 1):tonumber()\n  end)\n  --\
    \ Reverse the result\n  local reversed_nums = {}\n  for i = 1, #nums_sorted do\n\
    \    reversed_nums[#reversed_nums + 1] = nums_sorted[i]\n  end\n  return reversed_nums\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b)\n    return num_sum - b\n  end)\n  return\
    \ nums_sorted\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n   \
    \ local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i = 1, digits\
    \ do\n      sum = sum + v % 10\n      v = math.floor(v / 10)\n    end\n    table.insert(result,\
    \ sum)\n  end\n  return result\nend", "  local nums_sorted = {}\n  for _, num\
    \ in ipairs(nums) do\n    local digits = {}\n    for i = 1, 10 do\n      digits[i]\
    \ = num % 10\n      num = math.floor(num / 10)\n    end\n    local sum_digits\
    \ = #digits\n    if nums_sorted[sum_digits] then\n      nums_sorted[sum_digits]\
    \ = nums_sorted[sum_digits] + 1\n    else\n      nums_sorted[sum_digits] = num\n\
    \    end\n  end\n  local sorted_nums = {}\n  for i = 1, 10 do\n    sorted_nums[i]\
    \ = nums_sorted[i]\n  end\n  return sorted_nums\nend", "  local nums_sorted =\
    \ {}\n  local nums_summed = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    nums_summed = nums_summed + num\n    if nums_summed == 0 then\n      nums_sorted[i]\
    \ = num\n      nums_summed = num\n    else\n      local nums_index = #nums_sorted\n\
    \      while nums_summed > 0 do\n        local nums_summed_index = nums_summed\
    \ - nums_sorted[nums_index].digit\n        if nums_summed_index == 0 then\n  \
    \        nums_sorted[nums_index] = num\n          nums_summed = nums_summed -\
    \ num\n        else\n          local nums_summed_index = nums_summed_index - 1\n\
    \          nums_sorted[nums_index] = nums_sorted[nums_summed_index]\n        \
    \  nums_summed = nums_summed - nums_sorted[nums_index].digit\n        end\n  \
    \      nums_index = nums_index - 1\n      end\n    end\n  end\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = num:gsub(\"%d+\", \"\")\n    local sum_digits = tonumber(digits)\n\
    \    if sum_digits == nil then\n      sorted_nums[#sorted_nums+1] = num\n    else\n\
    \      local index = #sorted_nums\n      while sum_digits > sorted_nums[index][3]\
    \ do\n        index = index - 1\n      end\n      table.insert(sorted_nums, index,\
    \ num)\n    end\n  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + tonumber(string.format(\"%0.d\", nums[i])):sub(j, j + 1)\n    end\n    if\
    \ nums_sorted[sum] then\n      nums_sorted[sum] = nums_sorted[sum] .. \",\" ..\
    \ i\n    else\n      nums_sorted[sum] = i\n    end\n  end\n  local sorted_nums\
    \ = {}\n  for i = 1, 10 do\n    sorted_nums[i] = nums_sorted[i]\n  end\n  return\
    \ sorted_nums\nend", "  if #nums == 0 then\n    return {}\n  end\n  local sums\
    \ = {}\n  for i = 1, #nums do\n    local sum = sums[#sums] + nums[i]\n    sums[#sums]\
    \ = sum\n  end\n  local sorted = {}\n  for i = 1, #sums do\n    sorted[#sorted+1]\
    \ = sums[i]\n  end\n  table.sort(sorted, function(a, b) return a < b end)\n  local\
    \ result = {}\n  for i = 1, #sorted do\n    result[#result+1] = sorted[i]\n  end\n\
    \  return result\nend", "  local result = {}\n  for i = 1, #nums do\n    local\
    \ digits = nums:sub(i, i):gsub(\"%d+\", \"\"):gsub(\"%d\", \"\")\n    local sum\
    \ = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(digits[j])\n    end\n\
    \    result[sum] = nums[i]\n  end\n  return result\nend", "  local nums_sorted\
    \ = {}\n  for _, num in ipairs(nums) do\n    local sum = 0\n    for i = 1, #num\
    \ do\n      sum = sum + tonumber(string.sub(num, i, i))\n    end\n    table.insert(nums_sorted,\
    \ num)\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b)\n    return a[2] < b[2]\n  end)\n  return table.concat(nums_sorted)\nend",
  "  local result = {}\n  for _, v in ipairs(nums) do\n    local digits = math.floor(math.abs(v))\n\
    \    local sum = 0\n    for i = 1, digits do\n      sum = sum + v % 10\n     \
    \ v = math.floor(v / 10)\n    end\n    if sum > 0 then\n      table.insert(result,\
    \ v)\n    end\n  end\n  return result\nend", "  local sorted_nums = {}\n  local\
    \ num_sums = {}\n  for i = 1, #nums do\n    local num_sum = math.floor(math.abs(nums[i])):long()\n\
    \    if num_sum == 0 then\n      num_sum = 1\n    end\n    sorted_nums[i] = nums[i]\n\
    \    num_sums[num_sum] = num_sums[num_sum] or {}\n    num_sums[num_sum][#num_sums[num_sum]\
    \ + 1] = i\n  end\n  local sorted_num_sums = {}\n  for num_sum, indices in pairs(num_sums)\
    \ do\n    sorted_num_sums[#sorted_num_sums + 1] = num_sum\n    local sorted_indices\
    \ = {}\n    for _, index in pairs(indices) do\n      sorted_indices[#sorted_indices\
    \ + 1] = index\n    end\n    table.sort(sorted_indices, function(a, b) return\
    \ sorted_nums[a] > sorted_nums[b] end)\n    for _, index in pairs(indices) do\n\
    \      sorted_nums[index] = sorted_nums[sorted_indices[index]]\n    end\n  end\n\
    \  return sorted_nums\nend", "  local result = {}\n  for _, v in ipairs(nums)\
    \ do\n    local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i\
    \ = 1, digits do\n      sum = sum + math.floor(v / math.pow(10, i))\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result)\n  return result\n\
    end", "  local nums_sorted = {}\n  local nums_sums = {}\n  for _, num in ipairs(nums)\
    \ do\n    local nums_sum = 0\n    for i = 1, #num + 1 do\n      nums_sum = nums_sum\
    \ + num:sub(i, i)\n    end\n    table.insert(nums_sums, nums_sum)\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sums)\n  local nums_sorted = {}\n  for _, num\
    \ in ipairs(nums_sorted) do\n    table.insert(nums_sorted, num)\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _,\
    \ num in pairs(nums) do\n    num_sum = num_sum + num\n    nums_sorted[num_sum]\
    \ = num\n  end\n  table.sort(nums_sorted, function(a, b) return a < b end)\n \
    \ return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n \
    \ for _, num in ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(1,\
    \ j):tonumber()\n    end\n    sorted_nums[sum] = i\n  end\n  table.sort(sorted_nums)\n\
    \  local result = {}\n  for i = 1, #nums do\n    result[sorted_nums[i]] = nums[i]\n\
    \  end\n  return result\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n\
    \    local digits = nums:sub(i, i):gsub(\"%d+\", \"\"):gsub(\"%d\", \"\")\n  \
    \  local sum_digits = tonumber(digits)\n    if sum_digits == 0 then\n      sorted_nums[#sorted_nums+1]\
    \ = nums[i]\n    else\n      local index = #sorted_nums\n      while sum_digits\
    \ > 0 do\n        local digit = math.floor(sum_digits % 10)\n        sum_digits\
    \ = sum_digits / 10\n        table.insert(sorted_nums, index, digit)\n      end\n\
    \    end\n  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n  local\
    \ index = 1\n  for _, num in pairs(nums) do\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum_digits = math.fmod(num, math.pow(10, digits))\n\
    \    local key = tostring(sum_digits)\n    if not nums_sorted[key] then\n    \
    \  nums_sorted[key] = index\n      index = index + 1\n    end\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local index = 1\n  for _, num\
    \ in pairs(nums) do\n    local digits = math.floor(math.log10(num))\n    local\
    \ sum = 0\n    for i = 1, digits do\n      sum = sum + num / 10\n      num = num\
    \ % 10\n    end\n    if index == 1 or sum > nums_sorted[index - 1] then\n    \
    \  table.insert(nums_sorted, index)\n    end\n    index = index + 1\n  end\n \
    \ return nums_sorted\nend", "  local result = {}\n  for _, v in ipairs(nums) do\n\
    \    local digits = math.floor(math.abs(v))\n    local sum = 0\n    for i = 1,\
    \ digits do\n      sum = sum + math.floor(v / math.pow(10, i))\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local result =\
    \ {}\n  for _, v in pairs(nums) do\n    local sum = 0\n    for i = 1, #v do\n\
    \      sum = sum + v[i]\n    end\n    table.insert(result, v)\n    if sum > 0\
    \ then\n      table.sort(result, function(v1, v2)\n        return v1 + v2 < sum\n\
    \      end)\n    end\n  end\n  return result\nend", "  local sorted_nums = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(1, j):tonumber()\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for i = 1,\
    \ #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_copy\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
