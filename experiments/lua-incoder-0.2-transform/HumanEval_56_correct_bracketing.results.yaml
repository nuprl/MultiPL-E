language: lua
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbn_igwsg.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbn_igwsg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then\n      return false\n   elseif brackets == '>' then\n\
    \      return true\n   else\n      return false\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8y_z32ka.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8y_z32ka.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\1')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjfuzgpu.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppjfuzgpu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*$', '>')\n  local closing_brackets\
    \ = brackets:gsub('^>*', '<')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr4bsdz0p.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpr4bsdz0p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local close_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return open_brackets:gsub('%L+', '>')\
    \ ~= close_brackets:gsub('%L+', '<')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc05jrlu3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc05jrlu3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojulfib.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp5ojulfib.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp5ojulfib.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n\
    \  local closing_brackets = brackets:gsub('(%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n\
    \  return opening_brackets:len() == closing_brackets:len() and\n         opening_brackets:sub(1,\
    \ -1) == closing_brackets:sub(1, -1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_4n8sxl.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_4n8sxl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbt72wd1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxbt72wd1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicm5qoy1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpicm5qoy1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\1')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphzdd3vt8.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphzdd3vt8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('<', '(')\n  local closing = brackets:gsub('>',\
    \ ')')\n  return opening:len() == closing:len() and opening:sub(1, -1) == closing:sub(1,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwwd2hun.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdwwd2hun.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i:len(i)+1] ~= closing_brackets[i:len(i)+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeiokxtt2.lua:15:\
    \ attempt to index local 'i' (a number value)\nstack traceback:\n\t/tmp/tmpeiokxtt2.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpeiokxtt2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<([^>]+)>%', function(x)\n    return\
    \ x:reverse()\n  end)\n  local closing_brackets = brackets:gsub('%<([^>]+)>%',\
    \ function(x)\n    return x:reverse()\n  end)\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp15z4csfn.lua:12:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmp15z4csfn.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmp15z4csfn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufft7m6b.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufft7m6b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\1\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)$', '\\2\\1')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp16d1kuca.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp16d1kuca.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:find(closing_brackets)\
    \ == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwh3e9_4v.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpwh3e9_4v.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpwh3e9_4v.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6m1frkl.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpq6m1frkl.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpq6m1frkl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  local opening_brackets_count\
    \ = opening_brackets:gsub('%2','%1'):gsub('%1','%2'):gsub('%2','%1')\n  return\
    \ opening_brackets_count == closing_brackets\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12e7g97v.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp12e7g97v.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp12e7g97v.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i:len(i)+1] ~= closing_brackets[i:len(i)+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeiokxtt2.lua:15:\
    \ attempt to index local 'i' (a number value)\nstack traceback:\n\t/tmp/tmpeiokxtt2.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpeiokxtt2.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\1\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)(.+$)', '\\1\\2')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxu9tmp0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcxu9tmp0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','('):gsub('%1',')')\
    \ == closing_brackets:gsub('%1','('):gsub('%1',')')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphe09ohpa.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmphe09ohpa.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmphe09ohpa.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*$', '>')\n  local closing_brackets\
    \ = brackets:gsub('^>*', '>')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79vqpt0c.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp79vqpt0c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6m1frkl.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpq6m1frkl.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpq6m1frkl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wlf5a_7.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp6wlf5a_7.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp6wlf5a_7.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob_0s3v8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpob_0s3v8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return\
    \ opening_brackets:len() == brackets:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpldk6ss6z.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpldk6ss6z.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','('):gsub('%1',')'):gsub('%1','<<'):gsub('%1','>>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5ekd_0s.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpe5ekd_0s.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpe5ekd_0s.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\
    \ and\n         opening_brackets:sub(2,2) == closing_brackets:sub(2,2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbw1v00b.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpxbw1v00b.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpxbw1v00b.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    opening_brackets[bracket] = true\n    closing_brackets[bracket]\
    \ = false\n  end\n  local opening_brackets_sorted = table.sort(opening_brackets)\n\
    \  for _, opening_bracket in ipairs(opening_brackets_sorted) do\n    local closing_bracket\
    \ = opening_brackets[opening_bracket]\n    if closing_bracket then\n      closing_brackets[closing_bracket]\
    \ = true\n    end\n  end\n  return table.sort(closing_brackets) == {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a nil value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1')\n  local closing = brackets:gsub('(>)','%1')\n\
    \  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnbrui31.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwnbrui31.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  return opening_count == closing_count and opening ~= nil and closing ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2j58omf.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpn2j58omf.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpn2j58omf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%1%2%3')\n  local\
    \ closing_brackets = brackets:gsub('(%%(%+)(%*)%>)', '%1%2%3')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzh9k84_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyzh9k84_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  return opening_count == closing_count and opening ~= nil and closing ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2j58omf.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpn2j58omf.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpn2j58omf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i]:sub(1,1) ~= closing_brackets[i]:sub(#opening_brackets[i],1)\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprvknxmds.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmprvknxmds.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmprvknxmds.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  return opening_count == closing_count and opening ~= nil and closing ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn2j58omf.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpn2j58omf.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpn2j58omf.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:gsub('%L+', '>')\
    \ ~= closing_brackets:gsub('%L+', '<')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9epun9mp.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp9epun9mp.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9epun9mp.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  local opening_brackets_count\
    \ = opening_brackets:count('<')\n  local closing_brackets_count = closing_brackets:count('<')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kbgqvzj.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp2kbgqvzj.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp2kbgqvzj.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('>')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_27l4ks6.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmp_27l4ks6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_27l4ks6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] == '<' then\n         if brackets[i+1]\
    \ == '>' then\n            return true\n         end\n      end\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7715w9k.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt7715w9k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1n3tahp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1n3tahp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','('):gsub('%1',')'):gsub('%1','<<'):gsub('%1','>>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe5ekd_0s.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpe5ekd_0s.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpe5ekd_0s.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2'):gsub('(<)',\
    \ '\\1'):gsub('(>)', '\\2')\n  return open_brackets:sub(1, open_brackets:len())\
    \ == open_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8wzcta7.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps8wzcta7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:gsub('%1>','>'):gsub('%1<','<'):gsub('%1<<','<<'):gsub('%1>>','>>'):gsub('%1><<','<<'):gsub('%1>><','>><'):gsub('%1>>>','>>>')\n\
    \  local close_brackets_count = close_brackets:gsub('%1>','>'):gsub('%1<','<'):gsub('%1<<','<<'):gsub('%1>>','>>'):gsub('%1><<','<<'):gsub('%1>><','>><'):gsub('%1>>>','>>>')\n\
    \  return open_brackets_count == close_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9evem5h.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpv9evem5h.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpv9evem5h.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return open_brackets:gsub('%1>','>'):gsub('%1<','<'):gsub('%1<<','<<'):gsub('%1>>','>>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6weqfkys.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp6weqfkys.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmp6weqfkys.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing\
    \ = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening:len() == closing:len()\
    \ and opening:sub(1,-1) == closing:sub(1,-1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptyp1arco.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmptyp1arco.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmptyp1arco.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+))', function(_, _, opening_brackets)\n\
    \    return opening_brackets:gsub('(%+)(%>%+)', '%%%2')\n  end)\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+)(%>%+))', function(_, _, closing_brackets)\n    return\
    \ closing_brackets:gsub('(%+)(%>%+)', '%%%2')\n  end)\n  local opening_brackets_count\
    \ = opening_brackets:gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%2'):gsub('%%%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcj4p7uq1.lua:18: unfinished string near ''''%%%''

    '
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1',''):gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdd0rdcz_.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpdd0rdcz_.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpdd0rdcz_.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty3zwvsp.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpty3zwvsp.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpty3zwvsp.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:gsub('%1','%2'):gsub('%1','%2'):gsub('%1','%2'):gsub('%1','%2')\n\
    \  local closing_brackets_count = closing_brackets:gsub('%1','%2'):gsub('%1','%2'):gsub('%1','%2'):gsub('%1','%2')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc5g3hjj4.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpc5g3hjj4.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpc5g3hjj4.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj0pjfgbm.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\3')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1i7fjt3.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy1i7fjt3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8v0unbz.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn8v0unbz.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local bracket = brackets[i]\n    if bracket:sub(1, 1) == '<' then\n\
    \      table.insert(opening_brackets, bracket)\n    elseif bracket:sub(1, 1) ==\
    \ '>' then\n      table.insert(closing_brackets, bracket)\n    end\n  end\n  for\
    \ i = 1, #opening_brackets do\n    local opening_bracket = opening_brackets[i]\n\
    \    for j = 1, #closing_brackets do\n      local closing_bracket = closing_brackets[j]\n\
    \      if opening_bracket == closing_bracket then\n        return false\n    \
    \  end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa_18qygk.lua:16:\
    \ attempt to index a nil value (local 'bracket')\nstack traceback:\n\t/tmp/tmpa_18qygk.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpa_18qygk.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i]:sub(1,1) ~= closing_brackets[i]:sub(1,1)\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2y_pzwi.lua:15:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmpj2y_pzwi.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpj2y_pzwi.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*<', '><'):gsub('>*', '>')\n  local\
    \ closing_brackets = brackets:gsub('<*<', '<'):gsub('<*', '>')\n  return opening_brackets:sub(1,\
    \ -1) == closing_brackets:sub(1, -1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicj_z2bt.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpicj_z2bt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0d37lc4.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening == '<' then\n      table.insert(opening_brackets,\
    \ i)\n    elseif opening == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening = brackets[opening_brackets[i]]\n\
    \    local closing = brackets[closing_brackets[i]]\n    if opening ~= '<' and\
    \ opening ~= '>' and closing ~= '<' and closing ~= '>' then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhv9f7uu.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjhv9f7uu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob_0s3v8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpob_0s3v8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  local opening_opening = brackets:find('<<')\n  local opening_closing = brackets:find('>>')\n\
    \  local closing_opening = brackets:find('<>')\n  local closing_closing = brackets:find('>>')\n\
    \  local opening_opening_count = brackets:count('<<')\n  local opening_closing_count\
    \ = brackets:count('>>')\n  local closing_opening_count = brackets:count('<>')\n\
    \  local closing_closing_count = brackets:count('>>')\n  local opening_opening_opening\
    \ = brackets:find('<<<')\n  local opening_opening_closing = brackets:find('>>>')\n\
    \  local opening_closing_opening = brackets:find('<>>>')\n  local opening_closing_closing\
    \ = brackets:find('>>>')\n  local opening_opening_opening_count = brackets:count('<<<')\n\
    \  local opening_opening_closing_count = brackets:count('>>>')\n  local opening_closing_opening_count\
    \ = brackets:count('<>>>')\n  local opening_closing_closing_count = brackets:count('>>>')\n\
    \  local opening_opening_opening_opening = brackets:find('<<<<')\n  local opening_opening_opening_closing\
    \ = brackets:find('>>><')\n  local opening_closing_opening_opening = brackets:find('<>>><')\n\
    \  local opening_closing_opening_closing = brackets:find('>>><')\n  local opening_closing_closing_opening\
    \ = brackets:find('<>>><')\n  local opening_closing_closing_closing = brackets:find('>>><')\n\
    \  local opening_opening_opening_opening_count = brackets:count('<<<<')\n  local\
    \ opening_opening_opening_closing_count = brackets:count('>>><')\n  local opening_closing_opening_opening_count\
    \ = brackets:count('<>>><')\n  local opening_closing_opening_closing_count = brackets:count('>>><')\n\
    \  local opening_closing_closing_opening_count = brackets:count('<>>><')\n  local\
    \ opening_closing_closing_closing_count = brackets:count('>>><')\n  local opening_opening_opening_opening_opening\
    \ = brackets:find('<<<>>>')\n  local opening_open\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp93qbgmu8.lua:64: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  for i = 1, #brackets do\n    local char = brackets[i]\n\
    \    if char == '<' then\n      table.insert(opening_brackets, i)\n    end\n \
    \ end\n  local closing_brackets = {}\n  for i = #brackets, 1, -1 do\n    local\
    \ char = brackets[i]\n    if char == '>' then\n      table.insert(closing_brackets,\
    \ i)\n    end\n  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening > closing then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8c83oinp.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8c83oinp.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] == '<' then\n         if brackets[i+1]\
    \ == '>' then\n            return true\n         else\n            return false\n\
    \         end\n      end\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzaks9ra7.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzaks9ra7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', '%s*<'):gsub('%>', '%s*%>')\n\
    \  local closing_brackets = brackets:gsub('%<', '%s*%>'):gsub('%>', '%s*<')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdckb51nc.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpdckb51nc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpdckb51nc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%w+)%s*(%>%w+)', '%%%1%%%2')\n  local\
    \ closing_brackets = brackets:gsub('(%w+)%s(%>%w+)', '%%%1%%%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqj0sae3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxqj0sae3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1n3tahp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1n3tahp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(_,_,opening,closing)\n\
    \    return opening:len() == closing:len()\n  end)\n  return opening_brackets:len()\
    \ == #brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2izb_1z.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu2izb_1z.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicm5qoy1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpicm5qoy1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  local opening_brackets_count\
    \ = opening_brackets:count('<')\n  local closing_brackets_count = closing_brackets:count('<')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2kbgqvzj.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp2kbgqvzj.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp2kbgqvzj.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] ~= '<' then\n         return\
    \ false\n      end\n      if brackets[i+1] ~= '>' then\n         return false\n\
    \      end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp350lo6ss.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp350lo6ss.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%*b()',\
    \ '%d+'):gsub('%d*$', '%d'):gsub('%d*$', '%d')\n  local closing_brackets_count\
    \ = closing_brackets:gsub('%*b()', '%d+'):gsub('%d*$', '%d'):gsub('%d*$', '%d')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk6ofa0t7.lua:14:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpk6ofa0t7.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpk6ofa0t7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()', '%s*'):gsub('%b()',\
    \ '%s*'):\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_5kgh4yj.lua:15: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2\\0')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\0\\2\\0')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv92i3qn.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphv92i3qn.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] == '<' then\n         if brackets[i+1]\
    \ == '>' then\n            return true\n         end\n      end\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7715w9k.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt7715w9k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)>', function(_, _1, _2)\n\
    \    return \"<\" .. _2 .. \">\"\n  end)\n  local closing_brackets = brackets:gsub('(<)([^>]+)>',\
    \ function(_, _1, _2)\n    return \"<\" .. _1 .. \">\"\n  end)\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkcx8pcel.lua:13:\
    \ attempt to concatenate a nil value (local '_2')\nstack traceback:\n\t/tmp/tmpkcx8pcel.lua:13:\
    \ in function </tmp/tmpkcx8pcel.lua:12>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpkcx8pcel.lua:12: in local 'candidate'\n\t/tmp/tmpkcx8pcel.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    return\
    \ x:sub(1, 1)\n  end)\n  local closing_brackets = brackets:gsub('%[(%-)(%+)]',\
    \ function(x)\n    return x:sub(1, 1)\n  end)\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gxc48ob.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9gxc48ob.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)', '\\1')\n  local closing = brackets:gsub('(>)',\
    \ '\\1')\n  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dsr_80p.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9dsr_80p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', '')\n  local closing_brackets\
    \ = brackets:gsub('%b<>', '>')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ty1veqo.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_ty1veqo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%w+)', '%%%1'):gsub('(%w+%>)', '%%%1')\n\
    \  local closing_brackets = brackets:gsub('(%%%1<)', '%%%1'):gsub('(%%%1%>)',\
    \ '%%%1')\n  return opening_brackets:len() == closing_brackets:len() and\n   \
    \      opening_brackets:sub(1, -1) == closing_brackets:sub(1, -1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2wmxlp3.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc2wmxlp3.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(opening_brackets)\n\
    \    local closing_brackets = opening_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \      return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \        return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \          return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \            return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \              return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                  return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                    return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                      return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                        return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                          return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                            return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                              return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                                return closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n\
    \                                  return closing_brackets:gsub('(%+)(%*)%>',\
    \ function(closing_brackets)\n                                    return closing_brackets:gsub('(%+)(%*)%>',\
    \ function(closing_brackets)\n                                      return closing_brackets:gsub('(%+)(%*)%>',\
    \ function(closing_brackets)\n                                        return closing_brackets:gsub('(%+)(%*)%>',\
    \ function(closing_brackets)\n                                          return\
    \ closing_brackets:gsub('(%+)(%*)%>', function(closing_brackets)\n           \
    \                                 return \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0d4k_gpo.lua:34: ''end'' expected (to close ''function'' at
    line 32) near ''=''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%1%2')\n  local\
    \ closing_brackets = brackets:gsub('(%%(%+)(%*)%>)', '%1%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnu82lh77.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnu82lh77.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  for i = 1, #open_brackets\
    \ do\n    if open_brackets[i]:sub(1, 1) ~= open_brackets[i]:sub(#open_brackets[i])\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5syjtqzj.lua:14:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp5syjtqzj.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp5syjtqzj.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbn_igwsg.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbn_igwsg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then\n      return false\n   elseif brackets == '>' then\n\
    \      return true\n   else\n      local opening_brackets = brackets:gsub('%b()',\
    \ '')\n      local closing_brackets = brackets:gsub('%b()', ''):gsub('%b', '>')\n\
    \      local opening_brackets_count = opening_brackets:gsub('%b()', '')\n    \
    \  local closing_brackets_count = closing_brackets:gsub('%b()', '')\n      local\
    \ opening_brackets_count_correct = opening_brackets_count == opening_brackets_count_correct\n\
    \      local closing_brackets_count_correct = closing_brackets_count == closing_brackets_count_correct\n\
    \      return opening_brackets_count_correct and closing_brackets_count_correct\n\
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdli51jj.lua:18:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmpbdli51jj.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpbdli51jj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<>' then\n      return true\n   elseif brackets == '<' then\n\
    \      return false\n   elseif brackets == '>' then\n      return true\n   else\n\
    \      return false\n   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfrfjmw9.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgfrfjmw9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = bracket\n    elseif bracket:sub(1, 1) == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = bracket\n    end\n  end\n  for _, opening_bracket in ipairs(opening_brackets)\
    \ do\n    local closing_bracket = closing_brackets[#closing_brackets]\n    if\
    \ opening_bracket ~= closing_bracket then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8up69boq.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8up69boq.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','('):gsub('%1',')'):gsub('%1','<<'):gsub('%1','>>')\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vgznu5o.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp6vgznu5o.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmp6vgznu5o.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2\\0\\2'):gsub('(>)', '\\\
    0\\2\\0\\2')\n  local closing_brackets = brackets:gsub('(<)', '\\0\\2\\0\\2'):gsub('(>)',\
    \ '\\0\\2\\0\\2')\n  return opening_brackets:len() == closing_brackets:len() and\n\
    \         opening_brackets:sub(1, -1) == closing_brackets:sub(1, -1)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qjvdmhx.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_qjvdmhx.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<%%(%+)(%>%+))', function(_, _, open_brackets)\n\
    \    return open_brackets:gsub('(%+)(%>%+)', function(_, close_brackets)\n   \
    \   return close_brackets:gsub('(%+)(%+)', function(_, close_brackets)\n     \
    \   return close_brackets:gsub('(%+)$', function(_, close_brackets)\n        \
    \  return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n       \
    \     return close_brackets:gsub('(%+)$', function(_, close_brackets)\n      \
    \        return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n \
    \               return close_brackets:gsub('(%+)$', function(_, close_brackets)\n\
    \                  return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n\
    \                    return close_brackets:gsub('(%+)$', function(_, close_brackets)\n\
    \                      return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n\
    \                        return close_brackets:gsub('(%+)$', function(_, close_brackets)\n\
    \                          return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n\
    \                            return close_brackets:gsub('(%+)$', function(_, close_brackets)\n\
    \                              return close_brackets:gsub('(%>%+)$', function(_,\
    \ close_brackets)\n                                return close_brackets:gsub('(%+)$',\
    \ function(_, close_brackets)\n                                  return close_brackets:gsub('(%>%+)$',\
    \ function(_, close_brackets)\n                                    return close_brackets:gsub('(%+)$',\
    \ function(_, close_brackets)\n                                      return close_brackets:gsub('(%>%+)$',\
    \ function(_, close_brackets)\n                                        return\
    \ close_brackets:gsub('(%+)$', function(_, close_brackets)\n                 \
    \                         return close_brackets:gsub('(%>%+)$', function(_, close_brackets)\n\
    \                                            return close_brackets:gsub('(%+)$',\
    \ function(_, close_brackets)\n                                              return\
    \ close_brackets:gsub('(%>%\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwafmynhq.lua:34: unfinished string near ''''(%>%''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(_, _, opening_brackets)\n\
    \    return opening_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \      return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \        return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \          return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \            return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \              return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \                return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \                  return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \                    return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \                      return closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n\
    \                        return closing_brackets:gsub('(%+)(%*)', function(_,\
    \ closing_brackets)\n                          return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                            return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                              return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                                return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                                  return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                                    return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                                      return\
    \ closing_brackets:gsub('(%+)(%*)', function(_, closing_brackets)\n          \
    \                              return closing_brackets:gsub('(%+)(%*)', function(_,\
    \ closing_brackets)\n                                          return closing_brackets:gsub('(%+)(%*)',\
    \ function(_, closing_brackets)\n                                            return\
    \ closing_bracket\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzue1cja5.lua:34: ''end'' expected (to close ''function'' at
    line 32) near ''lu''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n   local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n   return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qd7zxqi.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp9qd7zxqi.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp9qd7zxqi.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*<', '><')\n  local closing_brackets\
    \ = brackets:gsub('<*>', '>>')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl4dn1tz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsl4dn1tz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', '><'):gsub('%>', '>')\n  local\
    \ closing_brackets = brackets:gsub('%<', '><'):gsub('%>', '>')\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] != closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy7hfbk88.lua:15: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojulfib.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp5ojulfib.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp5ojulfib.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%1%2'):gsub('(%1)(%2)','%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9f6lmipu.lua:14: unfinished string near ''''%''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:gsub('(%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)',\
    \ ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*%L+%L+)', ''):gsub('(%s*\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvtp6na6p.lua:14: unfinished string near ''''(%s*''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i+1] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8mpp6o9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt8mpp6o9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return open_brackets:sub(1,1) == '<' and close_brackets:sub(1,1) == '<'\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprve89rbo.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprve89rbo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob_0s3v8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpob_0s3v8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<>', ''):gsub('>', '>')\n  local closing_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '>')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkd0z4jey.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkd0z4jey.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n\
    \  local closing_brackets = brackets:gsub('(%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n\
    \  return opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt66ff8z0.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt66ff8z0.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(x)\n   \
    \ return x:gsub('<', '&lt;'):gsub('>', '&gt;')\n  end)\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+)(%*)%>)', function(x)\n    return x:gsub('<', '&lt;'):gsub('>',\
    \ '&gt;')\n  end)\n  return opening_brackets:len() == closing_brackets:len() and\
    \ opening_brackets:all() ~= closing_brackets:all()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf847b_9i.lua:18:\
    \ attempt to call a nil value (method 'all')\nstack traceback:\n\t/tmp/tmpf847b_9i.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpf847b_9i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9yeigz52.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp9yeigz52.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp9yeigz52.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('>')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_27l4ks6.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmp_27l4ks6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_27l4ks6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '>')\n  local closing_brackets\
    \ = brackets:gsub('<*', '<')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj41q2coh.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj41q2coh.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy0xr_es.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyy0xr_es.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, -1) == closing_brackets:sub(1,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v9hq0ov.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp9v9hq0ov.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp9v9hq0ov.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    if brackets[i] == '<' then\n      table.insert(opening_brackets, i)\n\
    \    elseif brackets[i] == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening_bracket\
    \ = opening_brackets[i]\n    local closing_bracket = closing_brackets[i - 1]\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmf7aky_d.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmf7aky_d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+%)%>)', '')\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+%)%>)', '')\n  local opening_brackets_count = opening_brackets:gsub('(%+%)',\
    \ '')\n  local closing_brackets_count = closing_brackets:gsub('(%+%)', '')\n \
    \ return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4g5a0bd.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe4g5a0bd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', '%s*<')\n  local closing_brackets\
    \ = brackets:gsub('%>', '%s*>')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5kuz2zy.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpg5kuz2zy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg5kuz2zy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1')\n  local closing = brackets:gsub('(>)','%1')\n\
    \  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwnbrui31.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwnbrui31.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:count('<')\n  local close_brackets_count\
    \ = close_brackets:count('<')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni7ogm5b.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpni7ogm5b.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpni7ogm5b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  local closing_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '')\n  for i = 1, #opening_brackets do\n\
    \    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2pzeply.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt2pzeply.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('%b()', '')\n  local closing = brackets:gsub('%b()',\
    \ '%%%1')\n  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgr14f2wb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgr14f2wb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]\n      if opening ~= closing then\n         return false\n \
    \     end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmong2cq_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmong2cq_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0d37lc4.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', '')\n  local closing_brackets\
    \ = brackets:gsub('%b<>', '>')\n  local opening_brackets_count = opening_brackets:gsub('%b<>',\
    \ ''):gsub('%b', ''):gsub('%b', '')\n  local closing_brackets_count = closing_brackets:gsub('%b<>',\
    \ ''):gsub('%b', ''):gsub('%b', '')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhv89u7w.lua:14:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmpuhv89u7w.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpuhv89u7w.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0j5l3s4n.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing\
    \ = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening:find(closing)==nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukeq3v52.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpukeq3v52.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpukeq3v52.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8maye41h.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp8maye41h.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp8maye41h.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = bracket\n    elseif bracket:sub(1, 1) == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = bracket\n    end\n  end\n  return #opening_brackets == #closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv6bjy0b.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzv6bjy0b.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then return false end\n   if brackets == '>' then return\
    \ true end\n   if brackets == '<>' then return false end\n   if brackets == '<><'\
    \ then return false end\n   if brackets == '<>' then return true end\n   if brackets\
    \ == '<<><' then return false end\n   if brackets == '<<' then return true end\n\
    \   if brackets == '>>' then return true end\n   if brackets == '><' then return\
    \ false end\n   if brackets == '>' then return true end\n   return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mb3kpwy.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2mb3kpwy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpty3zwvsp.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpty3zwvsp.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpty3zwvsp.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv9gjz22.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprv9gjz22.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  local opening_open = opening_count > 0 and opening_count == opening_open\n\
    \  local closing_open = closing_count > 0 and closing_count == closing_open\n\
    \  local opening_close = opening_count > 0 and opening_count == opening_close\n\
    \  local closing_close = closing_count > 0 and closing_count == closing_close\n\
    \  return opening_open and closing_open and opening_close and closing_close\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1osw8d6w.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmp1osw8d6w.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp1osw8d6w.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1n3tahp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1n3tahp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    local closing = brackets[i+1]\n   \
    \ if opening == '<' then\n      table.insert(opening_brackets, opening)\n    elseif\
    \ opening == '>' then\n      table.insert(closing_brackets, closing)\n    end\n\
    \  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_41lk7d_.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_41lk7d_.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5mafw2_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk5mafw2_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in pairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      table.insert(opening_brackets,\
    \ bracket)\n    elseif bracket:sub(1, 1) == '>' then\n      table.insert(closing_brackets,\
    \ bracket)\n    end\n  end\n  for _, bracket in pairs(opening_brackets) do\n \
    \   if not closing_brackets[bracket] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpch_fri6u.lua:14:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpch_fri6u.lua:14: in local 'candidate'\n\t/tmp/tmpch_fri6u.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*$', '>')\n  local closing_brackets\
    \ = brackets:gsub('^*<', '^<')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5ob2fsm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi5ob2fsm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:sub(1,1):gsub('%1',closing_brackets)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpww7rvjtl.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpww7rvjtl.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpww7rvjtl.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  local closing_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmposq5ivvr.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmposq5ivvr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1n3tahp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1n3tahp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('%2'):gsub('%1'):gsub('%1','>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg76gw68l.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpg76gw68l.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpg76gw68l.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv9gjz22.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprv9gjz22.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgbocpbr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbgbocpbr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:sub(1,1) == '<' and closing_brackets:sub(1,1) == '>'\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2h04nn4a.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2h04nn4a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('%1','<'):gsub('%2','>'):gsub('%1','<'):gsub('%2','>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9b2rvucr.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp9b2rvucr.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp9b2rvucr.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local char = brackets[i]\n    if char == '<' then\n      table.insert(opening_brackets,\
    \ i)\n    elseif char == '>' then\n      table.insert(closing_brackets, i)\n \
    \   end\n  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening and closing then\n  \
    \    -- both brackets are open\n      return false\n    end\n    if opening and\
    \ not closing then\n      -- only opening bracket is open\n      return false\n\
    \    end\n    if closing and not opening then\n      -- only closing bracket is\
    \ open\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3sfy2pti.lua:48:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3sfy2pti.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then return false end\n   if brackets == '>' then return\
    \ true end\n   if brackets == '<<' then return true end\n   if brackets == '>>'\
    \ then return false end\n   return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7wderrw.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn7wderrw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgbocpbr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbgbocpbr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:sub(1,1):sub(2,1) ~= closing_brackets:sub(1,1):sub(2,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt0k9oxgv.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt0k9oxgv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6m1frkl.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpq6m1frkl.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpq6m1frkl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:count('<')\n  local close_brackets_count\
    \ = close_brackets:count('<')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpni7ogm5b.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmpni7ogm5b.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpni7ogm5b.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]\n      if opening ~= closing then\n         return false\n \
    \     end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmong2cq_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmong2cq_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpluqt6mcz.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpluqt6mcz.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpluqt6mcz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*<', '><')\n  local closing_brackets\
    \ = brackets:gsub('<*>', '>>')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl4dn1tz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsl4dn1tz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:gsub('(%L+)',\
    \ '%s*%L+') ~= closing_brackets:gsub('(%L+)', '%s*%L+')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cxbv_6g.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp1cxbv_6g.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp1cxbv_6g.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n  local\
    \ close_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return open_brackets:len()\
    \ == close_brackets:len() and\n         open_brackets:sub(1, open_brackets:len())\
    \ == close_brackets:sub(1, close_brackets:len())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbrtkhcxz.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbrtkhcxz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '\\1')\n  local close_brackets =\
    \ brackets:gsub('(>)', '\\1')\n  return open_brackets == close_brackets\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w8s188a.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3w8s188a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%1%2%3')\n  local\
    \ closing_brackets = brackets:gsub('(<%(%+)(%*)%>)', '%1%2%3')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7m_h7mjl.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7m_h7mjl.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ojulfib.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp5ojulfib.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp5ojulfib.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  for _, bracket in pairs(brackets) do\n    opening_brackets[bracket]\
    \ = true\n  end\n  local closing_brackets = {}\n  for _, opening_bracket in pairs(opening_brackets)\
    \ do\n    closing_brackets[opening_bracket] = true\n  end\n  return #opening_brackets\
    \ == #closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp07w1jgnx.lua:13:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp07w1jgnx.lua:13: in local 'candidate'\n\t/tmp/tmp07w1jgnx.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpconxjcdk.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpconxjcdk.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpconxjcdk.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7yc5us9l.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7yc5us9l.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2\\0\\2\\1')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\0\\2\\0\\2\\1')\n  return opening_brackets:len() ==\
    \ closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_b_419aa.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_b_419aa.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('>')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_27l4ks6.lua:14:\
    \ attempt to call a nil value (method 'count')\nstack traceback:\n\t/tmp/tmp_27l4ks6.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp_27l4ks6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcqkgftk5.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcqkgftk5.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcqkgftk5.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('>*', '>')\n  local close_brackets = brackets:gsub('<*',\
    \ '<')\n  return open_brackets == close_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevuhrpa8.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpevuhrpa8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] == '<' then\n         if brackets[i+1]\
    \ == '>' then\n            return true\n         end\n      end\n   end\n   return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt7715w9k.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpt7715w9k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1n3tahp.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1n3tahp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufft7m6b.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpufft7m6b.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, opening_brackets:len())\
    \ == closing_brackets:sub(1, closing_brackets:len())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3vwhj9a.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpi3vwhj9a.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpi3vwhj9a.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', '%s*<')\n  local closing_brackets\
    \ = brackets:gsub('%>', '%s*>')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5kuz2zy.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpg5kuz2zy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpg5kuz2zy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local close_brackets\
    \ = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return open_brackets:len()\
    \ == close_brackets:len() and open_brackets:gsub('%1','>'):gsub('%1','<')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo94e5dcc.lua:13:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpo94e5dcc.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmpo94e5dcc.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]\n      if opening ~= \">\" and opening ~= \"<\" then\n     \
    \    return false\n      end\n      if closing ~= \">\" and closing ~= \"<\" then\n\
    \         return false\n      end\n      if opening ~= closing then\n        \
    \ return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphtuv_9on.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphtuv_9on.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6m1frkl.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpq6m1frkl.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpq6m1frkl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', ''):gsub('%b<>', '')\n  local\
    \ closing_brackets = brackets:gsub('%b<>', ''):gsub('%b<>', '')\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_pairs = opening_brackets:gsub('%b<>', ''):gsub('%b<>',\
    \ '|')\n  local closing_brackets_pairs = closing_brackets:gsub('%b<>', ''):gsub('%b<>',\
    \ '|')\n  local opening_brackets_pairs_count = opening_brackets_pairs:len()\n\
    \  local closing_brackets_pairs_count = closing_brackets_pairs:len()\n  local\
    \ opening_brackets_pairs_pairs = opening_brackets_pairs:gsub('%b<>', '|')\n  local\
    \ closing_brackets_pairs_pairs = closing_brackets_pairs:gsub('%b<>', '|')\n  local\
    \ opening_brackets_pairs_pairs_count = opening_brackets_pairs_pairs:len()\n  local\
    \ closing_brackets_pairs_pairs_count = closing_brackets_pairs_pairs:len()\n  local\
    \ opening_brackets_pairs_pairs_pairs_count = opening_brackets_pairs_pairs_pairs:len()\n\
    \  local closing_brackets_pairs_pairs_pairs_count = closing_brackets_pairs_pairs_pairs:len()\n\
    \  local opening_brackets_pairs_pairs_pairs_pairs_count = opening_brackets_pairs_pairs_pairs_pairs:len()\n\
    \  local closing_brackets_pairs_pairs_pairs_pairs_count = closing_brackets_pairs_pairs_pairs_pairs:len()\n\
    \  local opening_brackets_pairs_pairs_pairs_pairs_pairs_count = opening_brackets_pairs_pairs_pairs_pairs_pairs:len()\n\
    \  local closing_brackets_pairs_pairs_pairs_pairs_pairs_count = closing_brackets_pairs_pairs_pairs_pairs_pairs:len()\n\
    \  local opening_brackets_pairs_pairs_pairs_pairs_pairs_pairs_count = opening_brackets_pairs_pairs_pairs_pairs_pairs_pairs_pairs:len()\n\
    \  local closing_brackets_pairs_pairs_pairs_pairs_pairs_pairs_pairs_count = closing_brackets_pairs_pairs_pairs_pairs_pairs_pairs_pairs_pairs:len()\n\
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf3b16vt8.lua:51: ''end'' expected (to close ''function'' at
    line 11) near <eof>

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbn_igwsg.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbn_igwsg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6wlf5a_7.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp6wlf5a_7.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp6wlf5a_7.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob_0s3v8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpob_0s3v8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822247
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('<', '(')\n  local closing = brackets:gsub('>',\
    \ ')')\n  return opening:find(closing) == nil\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68y7g38s.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp68y7g38s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return open_brackets:len() == close_brackets:len() and open_brackets:gsub('%1',close_brackets):gsub('%1',open_brackets)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydlh9t1r.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpydlh9t1r.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmpydlh9t1r.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    return\
    \ x:sub(1, 1)\n  end)\n  local closing_brackets = brackets:gsub('%[%(%+)(%-)]',\
    \ function(x)\n    return x:sub(2, 2)\n  end)\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] ~= closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_p50fhn.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe_p50fhn.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<', '{%l}'):gsub('>', '}%l}')\n  local\
    \ closing_brackets = brackets:gsub('<', '}%l}'):gsub('>', '{%l}')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0__cvstd.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp0__cvstd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0__cvstd.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\3')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj39rk45.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjj39rk45.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe89jm50j.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxbt72wd1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxbt72wd1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)$', '\\1')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tx4w_t2.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0tx4w_t2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  local opening_brackets_count = opening_brackets:gsub('%s*%L+',\
    \ '')\n  local closing_brackets_count = closing_brackets:gsub('%s*%L+', '')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykpr34x_.lua:12:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmpykpr34x_.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpykpr34x_.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, -1) == closing_brackets:sub(1,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v9hq0ov.lua:13:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmp9v9hq0ov.lua:13: in local\
    \ 'candidate'\n\t/tmp/tmp9v9hq0ov.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = i\n    elseif opening == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = i\n    end\n  end\n  if #opening_brackets == #closing_brackets then\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5pukarbh.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5pukarbh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjmk1m5dv.lua:14: unfinished string near ''''%1''

    '
  stdout: ''
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5mafw2_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk5mafw2_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpicm5qoy1.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpicm5qoy1.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750533
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = i\n    elseif opening == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = i\n    end\n  end\n  return #opening_brackets == #closing_brackets\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqpfwot9.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkqpfwot9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '')\n  local closing_brackets\
    \ = brackets:gsub('<*', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbsz6v_im.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbsz6v_im.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','')\
    \ == closing_brackets:gsub('%1','') \nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp80zg29jv.lua:14:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmp80zg29jv.lua:14: in local\
    \ 'candidate'\n\t/tmp/tmp80zg29jv.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822248
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)(.+)$', '\\\\2')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp7t9g2j.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmp7t9g2j.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822248
