language: lua
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\
    \treturn ab > bc and (ab > ad or bc > ad)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydwwn0a6.lua:13:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpydwwn0a6.lua:13: in function 'candidate'\n\t/tmp/tmpydwwn0a6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\treturn\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d7fc62n.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9d7fc62n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3k0j8xz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv3k0j8xz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lygvgn7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lygvgn7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_bc\
    \ = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\treturn ab_ac\
    \ + bc_ab == ab_sq + bc_sq and ab_bc + ac_sq == ab_sq + ac_sq\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppvanjqq5.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppvanjqq5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\treturn\
    \ ab_ac >= bc_sq + ab_sq and ab_ac <= ac_sq\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd5zqfh1q.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpd5zqfh1q.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local\
    \ ab_bc = ab * bc\n  local bc_ac = bc * ac\n  return ab_ac > 0 and ab_bc > 0 and\
    \ bc_ac > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4sd4ldd.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi4sd4ldd.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn ab == bc and ab == cb\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqunbavho.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqunbavho.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a1 =\
    \ math.abs(a)\n  local b1 = math.abs(b)\n  local c1 = math.abs(c)\n  local s =\
    \ (a1 + b1 + c1)\n  if s <= a1 + b1 + c1 then\n    return true\n  elseif s ==\
    \ a1 + b1 then\n    return b > 0 and c > 0 and b > c\n  elseif s == b1 + c1 then\n\
    \    return a > 0 and c > 0 and a > c\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcj80jmk1.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcj80jmk1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq - bc_sq\
    \ * cb_sq\n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqavfmzz.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphqavfmzz.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr -\
    \ cb_sqr\n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpen8b0yu8.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpen8b0yu8.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal\
    \ bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3\
    \ = bc_2 * bc\n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4\
    \ = bc_3 * bc\n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5\
    \ = bc_4 * bc\n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6\
    \ = bc_5 * bc\n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7\
    \ = bc_6 * bc\n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8\
    \ = bc_7 * bc\n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9\
    \ = bc_8 * bc\n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10\
    \ = bc_9 * bc\n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal\
    \ bc_11 = bc_10 * bc\n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\
    \tlocal bc_12 = bc_11 * bc\n\tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12\
    \ * ab\n\tlocal bc_13 = bc_12 * bc\n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14\
    \ = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc\n\tlocal ac_14 = ac_13 * ac\n\tlocal\
    \ ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc\n\tlocal ac_15 = ac_14 * ac\n\
    \tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc\n\tlocal ac_16 = ac_15\
    \ * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc\n\tlocal ac_17\
    \ = ac_16 * ac\n\tlocal ab_18 = ab\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu45vd93g.lua:80: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla8exl7f.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpla8exl7f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\
    \tlocal de = math.abs(d - e)\n\treturn ab > bc and ab > ad and ab > de\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9ottlud.lua:13:\
    \ attempt to perform arithmetic on global 'd' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpp9ottlud.lua:13: in function 'candidate'\n\t/tmp/tmpp9ottlud.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(a-b)\n  local bc = math.abs(b-c)\n  local cb = math.abs(c-b)\n  local\
    \ abc = ab + bc\n  local ab_cb = ab + cb\n  local ab_c = ab + c\n  local bc_cb\
    \ = bc + cb\n  local bc_c = bc + c\n  local cb_ab_cb = cb + ab_cb\n  local cb_ab_c\
    \ = cb + ab_c\n  local cb_ab_bc = cb + ab_bc\n  local cb_ab_b = cb + ab_b\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n  local\
    \ abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n  local\
    \ abc_c\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84uhmyaj.lua:63: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = a or 0, b or 0, c or 0\n\tlocal ab, bc, cb = a - b, c - b, a + b - c\n\t\
    return ab > bc and ab > cb\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4b78urr.lua:19:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx4b78urr.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(a-b)\n    local bc = math.abs(b-c)\n    local ca = math.abs(c-a)\n\
    \    return ab > bc and ab > ca\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qy1073z.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1qy1073z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbg4rjw2.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbbg4rjw2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c\
    \ - a)\n    return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplb8ubzas.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplb8ubzas.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a = math.abs(a)\n\
    \  local b = math.abs(b)\n  local c = math.abs(c)\n  local ab = math.abs(a + b)\n\
    \  local bc = math.abs(b + c)\n  local ac = math.abs(a + c)\n  return ab > bc\
    \ and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpth78xhax.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpth78xhax.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \  return ((ab > bc) and (ab > ac))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jxy8_yx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2jxy8_yx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rga_8jw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9rga_8jw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ab = bc * ab\n\treturn ab_ac + bc_ab == 0 \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u6v9qbu.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4u6v9qbu.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(a-b)\n    local bc = math.abs(b-c)\n    local ca = math.abs(c-a)\n\
    \    return ab == bc and ab == ca or ab == ca and bc <= ca\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg91b0zi4.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg91b0zi4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (math.abs(b - c) <= ab and math.abs(a - c) <= ab and math.abs(b - c)\
    \ <= ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjj3xmxf.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvjj3xmxf.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\
    \treturn ab > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxweb5jc3.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpxweb5jc3.lua:13: in local 'candidate'\n\t/tmp/tmpxweb5jc3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\tlocal is_right_angled = false\n\
    \tif a == b and a == c then\n\t\tis_right_angled = true\n\telseif b == c then\n\
    \t\tis_right_angled = true\n\telseif b == a then\n\t\tis_right_angled = true\n\
    \telseif c == a then\n\t\tis_right_angled = true\n\telseif b > c then\n\t\tis_right_angled\
    \ = true\n\telseif b < c then\n\t\tis_right_angled = false\n\telse\n\t\tis_right_angled\
    \ = false\n\tend\n\treturn is_right_angled\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_5lx7w_.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2_5lx7w_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr -\
    \ cb_sqr\n  return det > 0 and det < ab_sqr\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pmf2b9e.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3pmf2b9e.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lygvgn7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lygvgn7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and (ab + bc + ac) == (a + b + c)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevqxd3uw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpevqxd3uw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg8w58cbo.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal abc = ab * bc\n\tlocal\
    \ abc_2 = abc * abc\n\tlocal abc_3 = abc_2 * abc\n\treturn abc_3 > 0 and abc_3\
    \ <= abc_2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppay5afbu.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppay5afbu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla8exl7f.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpla8exl7f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn\
    \ ab > bc and ab > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio75ggtn.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpio75ggtn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lygvgn7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lygvgn7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiewydn9n.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiewydn9n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7c2n6jo2.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7c2n6jo2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b-a)\n  local bc = math.abs(c-b)\n  local ac = math.abs(c-a)\n  \n\
    \  -- Check if all sides are equal\n  if ab == bc and ac == bc then\n    return\
    \ true\n  end\n  \n  -- Check if all sides are equal\n  if ab == bc then\n   \
    \ return true\n  end\n  \n  -- Check if all sides are equal\n  if ac == bc then\n\
    \    return true\n  end\n  \n  -- Check if all sides are equal\n  if ab == ac\
    \ then\n    return true\n  end\n  \n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbjv_5m3.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgbjv_5m3.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac\
    \ = ac * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_ab = ab_ac * bc_ab\n\
    \tlocal bc_bc_ac = bc_bc * ac\n\tlocal bc_bc_ab = bc_bc * ab\n\tlocal bc_bc_ab_ac\
    \ = bc_bc * bc_ab\n\tlocal bc_bc_ab_ac_bc = bc_bc * bc_ab * ac\n\tlocal bc_bc_ab_ac_bc_ab\
    \ = bc_bc * bc_ab * ac * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq = bc_bc * bc_ab * ac\
    \ * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq = bc_bc * bc_ab * ac * ab * ab *\
    \ ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq = bc_bc * bc_ab * ac * ab * ab * ab *\
    \ ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq = bc_bc * bc_ab * ac * ab * ab * ab\
    \ * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq = bc_bc * bc_ab * ac\
    \ * ab * ab * ab * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq\
    \ = bc_bc * bc_ab * ac * ab * ab * ab * ab * ab * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq_sq\
    \ = bc_bc * bc_ab * ac * ab * ab * ab * ab * ab * ab * ab * ab * ab * ab * ab\
    \ * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = bc_bc * bc_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsz14dnli.lua:54: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeajb0sdk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeajb0sdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a + b > c and\
    \ a + c > b and b + c > a then\n\t\treturn true\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hayghgh.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5hayghgh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab == bc and ac == bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp777xo09z.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp777xo09z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local\
    \ ab_bc = ab * bc\n  local ab_cb = ab * cb\n  return ab_ac > 0 and ab_bc > 0 and\
    \ ab_cb > 0 and ab_ac + ab_bc + ab_cb == ab\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo568t3ai.lua:16:\
    \ attempt to perform arithmetic on a nil value (global 'cb')\nstack traceback:\n\
    \t/tmp/tmpo568t3ai.lua:16: in local 'candidate'\n\t/tmp/tmpo568t3ai.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4824gqps.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab >= bc and ab >= ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv93vwort.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv93vwort.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \t\n\tif ab == bc and ab == ac then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx63rwoiw.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx63rwoiw.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local a1 =\
    \ math.abs(a - b)\n  local a2 = math.abs(a - c)\n  local b1 = math.abs(b - c)\n\
    \  return a1 == b1 and a2 == b1 or a1 == b1 or a2 == b1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjz9967p.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjjz9967p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\
    \treturn ab > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxweb5jc3.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpxweb5jc3.lua:13: in local 'candidate'\n\t/tmp/tmpxweb5jc3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq - bc_sq\
    \ * cb_sq\n  \n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24wf74in.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp24wf74in.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (ab + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvk09oxo4.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvk09oxo4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = tonumber(a), tonumber(b), tonumber(c)\n\tif a > b and a > c then\n\t\treturn\
    \ true\n\telseif b > c and b > a then\n\t\treturn true\n\telseif c > a and c >\
    \ b then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpct61f6dy.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpct61f6dy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\t\n\t\
    if ab > bc then\n\t\tif ab > ca then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\telse\n\t\tif bc > ca then\n\t\t\treturn true\n\t\telse\n\t\
    \t\treturn false\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfh5djwb.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvfh5djwb.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local abc = ab * bc\n  return\
    \ abc > 0 and abc < ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppawno3rz.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppawno3rz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn\
    \ ab > bc and ab > ca \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio75ggtn.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpio75ggtn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3k0j8xz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpv3k0j8xz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4824gqps.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\
    \t\n\tif ab > bc then\n\t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\t\
    return false\n\t\tend\n\telse\n\t\tif bc > cb then\n\t\t\treturn false\n\t\telse\n\
    \t\t\treturn true\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa19mzgf4.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa19mzgf4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnpgi8ka.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqnpgi8ka.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rga_8jw.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9rga_8jw.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \  return ((ab > bc) and (ab > ac))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jxy8_yx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2jxy8_yx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7rpaz7e.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7rpaz7e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and (ab > ac or math.abs(a - c) > math.abs(b - c))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdq7pf7g.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbdq7pf7g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the triangle is valid (non-degenerate)\n\tif a < b and b < c and c < a then\n\
    \t\t-- Check that the angles are valid\n\t\tif math.abs(math.atan2(b,a) - math.atan2(c,a))\
    \ < math.pi then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\t\
    else\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbje_kblc.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbje_kblc.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local\
    \ bc_ab = bc * ab\n  local ab_ab = ab * ab\n  return ab_ac > bc_ab and ab_ac >\
    \ ab_ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpno6yqh_d.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpno6yqh_d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local det = ab * cb - bc *\
    \ ab\n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j2wlaij.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3j2wlaij.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w4dque0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9w4dque0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab >= 0 and bc >= 0\
    \ and ac >= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n\
    \    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtoo7lzk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbtoo7lzk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn ab == bc and ab == cb\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqunbavho.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqunbavho.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive.\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptvxzdpyo.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive.\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal.\n  if a == b and a == c then\n  \
    \  return true\n  end\n  -- Check that the sides are opposite.\n  if a > b and\
    \ a > c then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if b > c and b > a then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if c > a and c > b then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if a > b and b > c then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if b > a and b > c then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if c > a and\
    \ c > b then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if a > b and c > b then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if b > a and c > a then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if c > a and b > a then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if a > b and b > c then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if b > a and\
    \ c > a then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if c > a and b > a then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if a > b and c > b then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if b > a and c > a then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if c > a and b > a then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if a > b and\
    \ b > c then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if b > a and c > a then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if c > a and b > a then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if a > b and c > b then\n    return false\n\
    \  end\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4d1h486a.lua:113: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ac = bc * ac\n\treturn ab_ac + bc_ac == 0 \nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqw5djbqs.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqw5djbqs.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (math.abs(b - c) == ab and math.abs(a - c) == ac)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvu8zzbr.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjvu8zzbr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(d - a)\n\
    \  local cd = math.abs(d - c)\n  return ab >= bc and ab >= cd or ad >= bc and\
    \ ad >= cd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcleos5h9.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpcleos5h9.lua:13: in local 'candidate'\n\t/tmp/tmpcleos5h9.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal abc = ab * bc\n\tlocal\
    \ abc_2 = abc * abc\n\tlocal abc_3 = abc_2 * abc\n\treturn abc_3 > 0 and abc_3\
    \ <= abc_2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppay5afbu.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppay5afbu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7rpaz7e.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7rpaz7e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4824gqps.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlmjgb2a.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnlmjgb2a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b-a)\n  local bc = math.abs(c-b)\n  local ac = math.abs(c-a)\n  return\
    \ ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hg735b5.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4hg735b5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and\n         ab > ac and\n         bc > ac\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlmjgb2a.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnlmjgb2a.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab + bc == ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_dnopjy.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg_dnopjy.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w4dque0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9w4dque0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-negative\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5svsw2xs.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  local\
    \ ab_ac_squr = ab_ac * ab_ac\n  local bc_ab = bc * ab\n  local bc_ab_squr = bc_ab\
    \ * bc_ab\n  local det = ab_sqr + bc_sqr - ab_ac_squr\n  if det < 0 then\n   \
    \ return false\n  elseif det > 0 then\n    return true\n  else\n    return ab_ac_squr\
    \ < bc_ab_squr\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfhwmesi.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsfhwmesi.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or math.abs(b - c) < math.abs(a - c))\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33up89j7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp33up89j7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  local\
    \ ab_bc = ab * bc\n  local bc_ac = bc * ac\n  local ab_ac_bc = ab_ac * bc\n  local\
    \ ab_bc_ac = ab_bc * ac\n  local ab_ac_bc_sqr = ab_ac_bc * ab_ac_bc\n  local ab_bc_ac_bc_sqr\
    \ = ab_bc_ac * ab_bc_ac\n  local ab_ac_bc_sqr_bc_ac = ab_ac_bc * ab_bc_ac\n  local\
    \ ab_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr * ab_bc_ac_bc\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc * ab_bc_ac\n\
    \  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc * ab_bc_ac\n\
    \  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr * ab_b\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg_e7mqm0.lua:49: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ac = bc * ac\n\tlocal ab_bc = ab * bc\n\tlocal det = ab_ac * bc_ac - ab_bc\
    \ * ab_ac\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvzsc830x.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvzsc830x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab * ab\n  local\
    \ bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab * ac\n  return\
    \ ab_sq + bc_sq == ab_ac + bc_sq\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhtmybia.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzhtmybia.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local cb = c - b\n  local det = ab * cb - bc *\
    \ ab\n  return det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j2wlaij.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3j2wlaij.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_ac_squared = ab_ac * ab_ac\n\tlocal bc_ab = bc * ab\n\tlocal bc_ab_squared\
    \ = bc_ab * bc_ab\n\tlocal bc_ac = bc * ac\n\tlocal bc_ac_squared = bc_ac * bc_ac\n\
    \tlocal det = ab_sqr + bc_sqr - ab_ac_squared\n\tlocal s = ab_sqr - bc_sqr + ab_ac_squared\n\
    \tlocal t = bc_sqr - ab_ac_squared\n\tlocal u = (bc_ab - ab_ac) / det\n\tlocal\
    \ v = (ab_ac - bc_ab) / det\n\treturn u * u + v * v > 0 and u * v - v * u > 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vbjzuyr.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1vbjzuyr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbg4rjw2.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbbg4rjw2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab == bc and ab == ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3bvhc7m.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw3bvhc7m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a1 =\
    \ math.abs(a)\n\tlocal b1 = math.abs(b)\n\tlocal c1 = math.abs(c)\n\tlocal a2\
    \ = a1 + b1\n\tlocal b2 = b1 + c1\n\tlocal c2 = c1 + a1\n\treturn a2 >= b2 and\
    \ a2 >= c2 and b2 >= c2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp082z_mhm.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp082z_mhm.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpla8exl7f.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpla8exl7f.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\treturn ab_sqr + bc_sqr + ac_sqr\
    \ - ab_ac - ab_bc - bc_ac > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2v89lfy5.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2v89lfy5.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c\
    \ - a)\n    return ab > bc and\n        ab > ac and\n        bc > ac\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5al3a0z.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb5al3a0z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3_ky_wp.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz3_ky_wp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are non-zero\n  if a or b or c then return false end\n  -- Check that\
    \ the sides are equal\n  if a == b and b == c then return true end\n  -- Check\
    \ that the sides are equal\n  if a == c and c == b then return true end\n  --\
    \ Check that the sides are equal\n  if a == b and c == b then return true end\n\
    \  -- Check that the sides are equal\n  if a == b and c == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjud7h_kb.lua:82: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lygvgn7.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9lygvgn7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab = math.abs(a + b)\n\
    \tlocal bc = math.abs(b + c)\n\tlocal cb = math.abs(c + b)\n\treturn (ab == bc\
    \ and ab == cb) or (ab == cb and bc >= ab)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ulh90am.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5ulh90am.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = a - c\n\treturn ab == bc and ab == ac\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlau5wqk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzlau5wqk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpassdknst.lua:110: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\treturn\
    \ ab_ac >= bc_sq + ab_sq and ab_ac >= ac_sq + bc_sq\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmhcg9rkd.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmhcg9rkd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a - d)\n\
    \treturn ab > bc and ab > ad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxweb5jc3.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpxweb5jc3.lua:13: in local 'candidate'\n\t/tmp/tmpxweb5jc3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeajb0sdk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeajb0sdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_2 = ab * ab\n  local\
    \ bc_2 = bc * bc \n  local ac_2 = ac * ac\n  local ab_2_ac = ab_2 * ac\n  local\
    \ ab_2_ab = ab_2 * ab\n  local bc_2_bc = bc_2 * bc\n  local bc_2_ab = bc_2 * ab\n\
    \  local bc_2_ac = bc_2 * ac\n  local ab_2_ab_ac = ab_2_ab * ac\n  local ab_2_ab_bc\
    \ = ab_2_ab * bc\n  local ab_2_ab_ac_bc = ab_2_ab_ac * bc\n  local ab_2_ab_ac_bc_2\
    \ = ab_2_ab_ac_bc * bc\n  local ab_2_ab_ac_bc_2_2 = ab_2_ab_ac_bc_2 * bc\n  local\
    \ ab_2_ab_ac_bc_2_2_2 = ab_2_ab_ac_bc_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2\
    \ * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2_2 * bc\n  local\
    \ ab_2_ab_ac_bc_2_2_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpea7jah16.lua:54: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc * ac >= 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7rpaz7e.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7rpaz7e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or b\
    \ == c or c == a then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjd6nxnhu.lua:97: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_ac\
    \ = ac * ac\n\tlocal ac_ab = ac * ab\n\treturn (ab_sq + bc_sq + ac_sq) == ab_ac\
    \ + bc_ab + ac_ab\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0se0uvns.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0se0uvns.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn\
    \ ab > bc and (ab > ca or bc > ca)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvvmzu1s.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwvvmzu1s.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(c-a)\n\treturn\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiv4v6wi.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyiv4v6wi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz3_ky_wp.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz3_ky_wp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_2 = ab * ab\n  local\
    \ bc_2 = bc * bc \n  local ac_2 = ac * ac\n  local ab_3 = ab_2 * ab\n  local bc_3\
    \ = bc_2 * bc\n  local ac_3 = ac_2 * ac\n  local ab_4 = ab_3 * ab\n  local bc_4\
    \ = bc_3 * bc\n  local ac_4 = ac_3 * ac\n  local ab_5 = ab_4 * ab\n  local bc_5\
    \ = bc_4 * bc\n  local ac_5 = ac_4 * ac\n  local ab_6 = ab_5 * ab\n  local bc_6\
    \ = bc_5 * bc\n  local ac_6 = ac_5 * ac\n  local ab_7 = ab_6 * ab\n  local bc_7\
    \ = bc_6 * bc\n  local ac_7 = ac_6 * ac\n  local ab_8 = ab_7 * ab\n  local bc_8\
    \ = bc_7 * bc\n  local ac_8 = ac_7 * ac\n  local ab_9 = ab_8 * ab\n  local bc_9\
    \ = bc_8 * bc\n  local ac_9 = ac_8 * ac\n  local ab_10 = ab_9 * ab\n  local bc_10\
    \ = bc_9 * bc\n  local ac_10 = ac_9 * ac\n  local ab_11 = ab_10 * ab\n  local\
    \ bc_11 = bc_10 * bc\n  local ac_11 = ac_10 * ac\n  local ab_12 = ab_11 * ab\n\
    \  local bc_12 = bc_11 * bc\n  local ac_12 = ac_11 * ac\n  local ab_13 = ab_12\
    \ * ab\n  local bc_13 = bc_12 * bc\n  local ac_13 = ac_12 * ac\n  local ab_14\
    \ = ab_13 * ab\n  local bc_14 = bc_13 * bc\n  local ac_14 = ac_13 * ac\n  local\
    \ ab_15 = ab_14 * ab\n  local bc_15 = bc_14 * bc\n  local ac_15 = ac_14 * ac\n\
    \  local ab_16 = ab_15 * ab\n  local bc_16 = bc_15 * bc\n  local ac_16 = ac_15\
    \ * ac\n  local ab_17 = ab_16 * ab\n  local bc_17 = bc_16 * bc\n  local ac_17\
    \ = ac_16 * ac\n  local ab_18 = ab\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpij3xs4hi.lua:80: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal cb_sqr = cb * cb\n\tlocal ab_cub = (ab_sqr +\
    \ bc_sqr + cb_sqr) ^ 3\n\tlocal bc_cub = (bc_sqr + ab_sqr + cb_sqr) ^ 3\n\tlocal\
    \ cb_cub = (cb_sqr + ab_sqr + ab_cub) ^ 3\n\treturn ab_cub + bc_cub + cb_cub ==\
    \ 0 \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmd59tjd5.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmd59tjd5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ad = math.abs(a\
    \ - d)\n    local de = math.abs(d - a)\n    return ab > bc and ab > ad and bc\
    \ > de\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppl1i4a3g.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmppl1i4a3g.lua:13: in local 'candidate'\n\t/tmp/tmppl1i4a3g.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtpbd3lq.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvtpbd3lq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_ab\
    \ = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc * ab\n\tlocal ac_bc\
    \ = ac * bc\n\tlocal ac_bc = ac * bc\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_sq\
    \ = ab_ac_bc * ab_ac_bc\n\tlocal bc_ab_sq = bc_ab * bc_ab\n\tlocal bc_ab_ac =\
    \ bc_ab * ac_bc\n\tlocal bc_ab_ac_bc = bc_ab * ac_bc\n\tlocal bc_ab_ac_bc_sq =\
    \ bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\
    \tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc\
    \ * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq\
    \ = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\
    \tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc\
    \ * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq\
    \ = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\
    \tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdbkvnf4q.lua:58: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7u27zpgv.lua:32: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc) and (ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvtpbd3lq.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvtpbd3lq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn false\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxyp95n5.lua:89: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ab = bc * ab\n\tlocal ab_ab = ab * ab\n\treturn ab_ac + bc_ab - ab_ab ==\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptrb4z_75.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptrb4z_75.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b-a)\n  local bc = math.abs(c-b)\n  local ac = math.abs(c-a)\n  return\
    \ ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1osc0tyz.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp1osc0tyz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\t-- Check that\
    \ the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\t\
    end\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c or c\
    \ == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpygkzkov3.lua:95: ''end'' expected (to close ''if'' at line
    92) near ''lu''

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = a - b\n    local bc = b - c\n    local ac = c - a\n    local ab_ac = ab *\
    \ ac\n    local bc_ab = bc * ab\n    local ab_ab = ab * ab\n    return ab_ac +\
    \ bc_ab - ab_ab == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpl6bci1.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdpl6bci1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn (ab > 0 and bc > 0 and\
    \ ac > 0) or (ab > 0 and bc > 0 and ac < 0)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsimawav2.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsimawav2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq * bc_sq - cb_sq\
    \ * ab_sq\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchq2cn5f.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpchq2cn5f.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n\
    \  return ab > bc and (ab > ad or bc > ad)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_e_h6hsm.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmp_e_h6hsm.lua:13: in local 'candidate'\n\t/tmp/tmp_e_h6hsm.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and\
    \ ac > 0 and ab + bc + ac == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe9f_ivg.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpwe9f_ivg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdhoc7wl.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppdhoc7wl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ab = bc * ab\n\treturn ab_ac > bc_ab\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz559ncip.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz559ncip.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeajb0sdk.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpeajb0sdk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal\
    \ bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3\
    \ = bc_2 * bc\n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4\
    \ = bc_3 * bc\n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5\
    \ = bc_4 * bc\n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6\
    \ = bc_5 * bc\n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7\
    \ = bc_6 * bc\n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8\
    \ = bc_7 * bc\n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9\
    \ = bc_8 * bc\n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10\
    \ = bc_9 * bc\n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal\
    \ bc_11 = bc_10 * bc\n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\
    \tlocal bc_12 = bc_11 * bc\n\tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12\
    \ * ab\n\tlocal bc_13 = bc_12 * bc\n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14\
    \ = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc\n\tlocal ac_14 = ac_13 * ac\n\tlocal\
    \ ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc\n\tlocal ac_15 = ac_14 * ac\n\
    \tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc\n\tlocal ac_16 = ac_15\
    \ * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc\n\tlocal ac_17\
    \ = ac_16 * ac\n\tlocal ab_18 = ab\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu45vd93g.lua:80: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuv1yv847.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuv1yv847.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe4erilm.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppe4erilm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\treturn (a + b > c) and (a + c >\
    \ b) and (a + b > c)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq6d7zeq.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpoq6d7zeq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal ab_ab = ab * ab\n\tlocal\
    \ bc_bc = bc * bc \n\tlocal ab_bc = ab * bc\n\treturn ab_sqr + bc_sqr + ac_sqr\
    \ == ab_ac + bc_ac + ab_bc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ptopyew.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4ptopyew.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiewydn9n.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiewydn9n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\tif a == b and a == c then return\
    \ true end\n\tif a == c then return b == c end\n\tif b == c then return b == a\
    \ end\n\treturn false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjxinkty.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgjxinkty.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal a, b,\
    \ c = tonumber(a), tonumber(b), tonumber(c)\n\tif a < b and a < c then return\
    \ false end\n\tif b < c and b < a then return false end\n\tif c < a and c < b\
    \ then return false end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfx48znqh.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpfx48znqh.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  -- Check that\
    \ the sides are all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n\
    \  end\n  -- Check that the sides are equal\n  if a == b and a == c then\n   \
    \ return true\n  end\n  -- Check that the sides are equal\n  if a == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprjun8mfq.lua:113: ''end'' expected (to close ''function''
    at line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  return ab >= 0 and bc >= 0\
    \ and ac >= 0 and ab + bc + ac == 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2s2nffv.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpx2s2nffv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal ab_bc_ac = ab_bc * ac\n\
    \tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_sqr = ab_ac_bc * ab_ac_bc\n\t\
    local ab_ac_bc_sqrsqr = (ab_ac_bc * ab_ac_bc) * (ab_ac_bc * ab_ac_bc)\n\tlocal\
    \ ab_ac_bc_sqrsqrsqr = (ab_ac_bc_sqrsqr * ab_ac_bc_sqrsqr) * (ab_ac_bc_sqrsqr\
    \ * ab_ac_bc_sqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqr * ab_ac_bc_sqrsqrsqr)\
    \ * (ab_ac_bc_sqrsqrsqr * ab_ac_bc_sqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqr\
    \ = (ab_ac_bc_sqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqr *\
    \ ab_ac_bc_sqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqrsqrsqr\
    \ * ab_ac_bc_sqrsqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqr)\n\
    \tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\
    \ * (ab_ac_bc_sqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr\
    \ = (ab_ac_bc_sqrsqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqrsqrsqr\
    \ * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr = (ab_ac_bc_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zbu_daw.lua:31: '')'' expected (to close ''('' at line 30)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\treturn\
    \ ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9d7fc62n.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9d7fc62n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7720bwx.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg7720bwx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = a - c\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\
    \tlocal ab_bc_ac = ab_bc * ac\n\tlocal ab_ac_bc_sqr = ab_ac_bc * ab_ac_bc\n\t\
    local ab_bc_ac_bc_sqr = ab_bc_ac * ab_bc_ac\n\tlocal ab_ac_bc_sqr_bc_ac = ab_ac_bc_sqr\
    \ * bc\n\tlocal ab_bc_ac_bc_sqr_bc_ac = ab_bc_ac_bc_sqr * bc\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr = ab_bc_ac_bc_sqr_bc_ac\
    \ * ab_bc_ac_bc\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac = ab_ac_bc_sqr_bc_ac\
    \ * ab_bc_ac_bc_sqr\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac = ab_bc_ac_bc_sqr_bc_ac\
    \ * ab_bc_ac_bc_sqr\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr_bc_ac\
    \ * ab_bc_ac_bc_sqr_bc_ac\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr =\
    \ ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac_bc_sqr\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac_b\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0vhp2jk7.lua:51: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn (ab + bc == ac)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnlmcuiup.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnlmcuiup.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfg8yy50.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphfg8yy50.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\t\n\t\
    if ab*bc*ca > ab*ca*ca then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof1ybodc.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpof1ybodc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab * ab\n  local\
    \ bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab * ac\n  local\
    \ ab_ac_squared = ab_ac * ab_ac\n  local bc_bc_sqr = bc * bc \n  local bc_bc_squared_squared\
    \ = bc_bc_sqr * bc_bc_sqr\n  local det = ab_sqr + bc_sqr - ab_ac_squared\n  local\
    \ s = ab_sqr - bc_sqr + ab_ac_squared\n  local t = bc_sqr - ab_ac_squared\n  local\
    \ u = (bc_bc_squared_squared - ab_ac_squared) / det\n  local v = (ab_ac_squared)\
    \ / det\n  local w = ab_ac_squared\n  return u > 0 and v > 0 and w > 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug90mupc.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpug90mupc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\treturn det > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiewydn9n.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpiewydn9n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnzrsbdct.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnzrsbdct.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and (ab > ac or math.abs(a - b) > math.abs(b - a))\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bo8vodh.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0bo8vodh.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\tif det < 0 then\n\t\treturn false\n\telseif det > 0 then\n\t\treturn true\n\
    \telse\n\t\treturn ((ab * cb) - (bc * ab)) > 0\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzymjplvy.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzymjplvy.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n  local ab =\
    \ a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local\
    \ bc_ab = bc * ab\n  return ab_ac > bc_ab\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjldz3jq6.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjldz3jq6.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(a-c)\n\tif\
    \ ab > bc then\n\t\tif ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\telse\n\t\tif bc > ac then\n\t\t\treturn false\n\t\telse\n\t\
    \t\treturn true\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5),\
    \ true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24m291s1.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24m291s1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n    local ab\
    \ = math.abs(a-b)\n    local bc = math.abs(b-c)\n    local cb = math.abs(c-b)\n\
    \    local abc = ab + bc + cb\n    return abc > math.sqrt(ab*ab + bc*bc + cb*cb)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
    \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptivhdcg2.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptivhdcg2.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab > ac or bc > ac)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = right_angle_triangle\n    lu.assertEquals(candidate(3,\
    \ 4, 5), true)\n    lu.assertEquals(candidate(1, 2, 3), false)\n    lu.assertEquals(candidate(10,\
    \ 6, 8), true)\n    lu.assertEquals(candidate(2, 2, 2), false)\n    lu.assertEquals(candidate(7,\
    \ 24, 25), true)\n    lu.assertEquals(candidate(10, 5, 7), false)\n    lu.assertEquals(candidate(5,\
    \ 12, 13), true)\n    lu.assertEquals(candidate(15, 8, 17), true)\n    lu.assertEquals(candidate(48,\
    \ 55, 73), true)\n    lu.assertEquals(candidate(1, 1, 1), false)\n    lu.assertEquals(candidate(2,\
    \ 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w4dque0.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9w4dque0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822574
- exit_code: 1
  program: "-- Given the lengths of the three sides of a triangle. Return True if\
    \ the three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
    -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
    \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(d - a)\n\
    \tlocal cd = math.abs(d - c)\n\treturn ab == bc and ab == cd or ad == bc and ad\
    \ == cd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = right_angle_triangle\n    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
    \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
    \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
    \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
    \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
    \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpitowlr6d.lua:13:\
    \ attempt to perform arithmetic on a nil value (global 'd')\nstack traceback:\n\
    \t/tmp/tmpitowlr6d.lua:13: in local 'candidate'\n\t/tmp/tmpitowlr6d.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822574
