name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
  \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min = numbers[1]\n  local max = numbers[#numbers]\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] - min\n  end\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ * scale\n  end\n  return numbers\nend", "  assert(#numbers > 1)\n  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  assert(#numbers >= 2)\n\
    \  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = (range\
    \ == 0) and 1 or range / max\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local range\
    \ = max - min\n  local scaled_numbers = {}\n  for i = 1, #numbers do\n    scaled_numbers[i]\
    \ = ((numbers[i] - min) / range) * 2.0\n  end\n  return scaled_numbers\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local length\
    \ = #numbers\n  local scale = (max - min) / (length - 1)\n  local result = {}\n\
    \  for i = 1, length do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n\
    \  return result\nend", "  local min = numbers[1]\n  local max = numbers[1]\n\
    \  for i = 2, #numbers do\n    min = math.min(min, numbers[i])\n    max = math.max(max,\
    \ numbers[i])\n  end\n  local scale = (max - min) / (max - min)\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] + min * scale\n\
    \  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * (numbers[i]\
    \ - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local range = max - min\n  local new_min = min -\
    \ range * 0.1\n  local new_max = max + range * 0.1\n  local new_range = new_max\
    \ - new_min\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    local new_number = (number - new_min) / new_range\n    new_numbers[#new_numbers\
    \ + 1] = new_number\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 2, #numbers do\n    numbers[i] = numbers[i] - min + scale\n  end\n\
    \  return numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    new_numbers[math.floor((number - min) / range * new_max)] = math.floor((number\
    \ - min) / range * new_min)\n  end\n  return new_numbers\nend", "  local min =\
    \ numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] -\
    \ min)\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local range = max - min\n  local new_min = min -\
    \ range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    new_numbers[number] = math.floor(new_min\
    \ + (new_max - new_min) * number / range)\n  end\n  return new_numbers\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = max - min\n  local new_numbers = {}\n  for _, num in ipairs(numbers) do\n\
    \    new_numbers[num] = num - min + scale * 0.5\n  end\n  return new_numbers\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
