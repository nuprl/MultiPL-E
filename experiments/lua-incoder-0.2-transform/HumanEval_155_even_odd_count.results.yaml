language: lua
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0thzyfz.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpq0thzyfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = math.fmod(num, 10)\n\
    \    even = even * 10 + remainder\n    odd = odd + 1 if remainder % 2 == 1 end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy4z4lbm1.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc_wv822.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpyc_wv822.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local digit = math.floor(num / 10)\n\
    \    num = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 0\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750442
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even * 10 + remainder\n    odd = odd * 10 + remainder + 1\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo44xpdfz.lua:21:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpo44xpdfz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even+1\n    else\n      odd = odd+1\n    end\n\
    \    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4n05gynj.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp4n05gynj.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibevi_vt.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpibevi_vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmkxds0zx.lua:20:\
    \ expected: {0, 1}\nactual: 4\nstack traceback:\n\t/tmp/tmpmkxds0zx.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num > 0 do\n        local remainder\
    \ = num % 10\n        if remainder == 0 then\n            even = even + 1\n  \
    \      else\n            odd = odd + 1 \n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return { even, odd }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiti5kg52.lua:26:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpiti5kg52.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    local remainder = num % math.pow(10, i)\n    if remainder == 0 then\n\
    \      even = even+1\n    else\n      odd = odd+1\n    end\n    i = i+1\n  end\n\
    \  return { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0w4adut8.lua:27:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmp0w4adut8.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, math.floor(math.log(num,\
    \ 10) + 1) do\n    local remainder = num % 10\n    if remainder == 0 then\n  \
    \    even = even + 1\n    else\n      odd = odd + 1 -- math.floor\n    end\n \
    \   num = math.floor(num / 10)\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq0sdxj9.lua:26:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpwq0sdxj9.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 0\n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzarpa001.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpzarpa001.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibevi_vt.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpibevi_vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remainder\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1h6tl1n.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1h6tl1n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even * 10 + remainder\n    odd = odd * 10 - remainder\n    num\
    \ = num % 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750442
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even * 10 + remainder\n    odd = odd + 1 if remainder % 2 ==\
    \ 1 end\n    num = num % 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq3rp7o2z.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd + 1\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvnoce1o.lua:20:\
    \ expected: {0, 1}\nactual: 17\nstack traceback:\n\t/tmp/tmphvnoce1o.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1704ezy2.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmp1704ezy2.lua:11: in local 'candidate'\n\t/tmp/tmp1704ezy2.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    local remainder = num % i\n    if remainder == 0 then\n      even\
    \ = even + 1\n    else\n      odd = odd + 1 \n    end\n    i = i + 1\n  end\n\
    \  return { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp41jg3tge.lua:26:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmp41jg3tge.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     local tmp = math.floor(num / math.pow(10, i))\n        if tmp % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1 \n     \
    \   end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9tarcz_.lua:23:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmpj9tarcz_.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even * 10 + num\n        else\n            odd = odd * 10\
    \ + num\n        end\n        num = num / 2\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjlwz3y9k.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpjlwz3y9k.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num % 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw3le053t.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpw3le053t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1 \n     \
    \   end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_gecq3yu.lua:22:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp_gecq3yu.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     local tmp = num / math.pow(10, i)\n        if tmp % 2 == 0 then\n      \
    \      even = even + 1\n        else\n            odd = odd + 2\n        end\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqum5mgk4.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpqum5mgk4.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, math.floor(math.log(num, 2))\
    \ do\n        if num % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1 \n        end\n        num = math.floor(num / 2)\n\
    \    end\n    return { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v0lhkzm.lua:24:\
    \ expected: {0, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmp9v0lhkzm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6hfe1dp.lua:22:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpp6hfe1dp.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    for i = 1, math.floor(math.log(num, 2))\
    \ do\n        if num % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1 \n        end\n        num = math.floor(num / 2)\n\
    \    end\n    return { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v0lhkzm.lua:24:\
    \ expected: {0, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmp9v0lhkzm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32kcuuvj.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp32kcuuvj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num, 2)) do\n  \
    \  if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\
    \ \n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo8s0r5y_.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpo8s0r5y_.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2 % 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydhlonce.lua:20:\
    \ expected: {0, 1}\nactual: 7.0\nstack traceback:\n\t/tmp/tmpydhlonce.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd + 1\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphvnoce1o.lua:20:\
    \ expected: {0, 1}\nactual: 17\nstack traceback:\n\t/tmp/tmphvnoce1o.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even * 10 + remainder\n    odd = odd + 1 if remainder % 2 ==\
    \ 1 end\n    num = num % 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq3rp7o2z.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even + 1\n    else\n      odd = odd + remainder\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc6_um7o.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxc6_um7o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even * 10 + num\
    \ % 10\n        odd = odd * 10 + num / 10 % 10\n        num = num / 10\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0kwxlod.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpp0kwxlod.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, math.floor(math.log(num,\
    \ 10) + 1) do\n    local remainder = math.mod(num, 10)\n    if remainder == 0\
    \ then\n      even = even + 1\n    else\n      odd = odd + 1 -- odd digits are\
    \ counted from 1 onwards\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dqatgpi.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp7dqatgpi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp7dqatgpi.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg2qt5xb.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmptg2qt5xb.lua:11: in local 'candidate'\n\t/tmp/tmptg2qt5xb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even * 10 + num\
    \ % 10\n        odd = odd * 10 + num / 10\n        num = num / 10\n    end\n \
    \   return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fwul8u3.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp3fwul8u3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even + remainder % 2\n        odd = odd + remainder /\
    \ 2\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoal0mzbe.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoal0mzbe.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remainder\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1h6tl1n.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1h6tl1n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even + 1\n    else\n      odd = odd + remainder\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqc8ltwrl.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpqc8ltwrl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibevi_vt.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpibevi_vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remainder\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1h6tl1n.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1h6tl1n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  for i = 1, math.floor(math.log(num, 2)) do\n    local tmp\
    \ = math.floor(num / math.pow(10, i))\n    if tmp % 2 == 0 then\n      even =\
    \ even + 1\n    else\n      odd = odd + 1 \n    end\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd_rwbmfi.lua:23:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmpd_rwbmfi.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1y_yvyw.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpz1y_yvyw.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even * 10 + remainder\n    odd = odd * 10 + remainder + 1\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo44xpdfz.lua:21:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpo44xpdfz.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.mod(num, 10)\n\
    \    if remainder == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + remainder\n    end\n    num = math.floor(num / 10)\n  end\n  return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52xd8p29.lua:10:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmp52xd8p29.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp52xd8p29.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num % 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper69cahq.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmper69cahq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  while num > 0 do\n    local remainder = num % 10\n\
    \    if remainder == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + remainder\n    end\n    num = math.floor(num / 10)\n  end\n  return { even,\
    \ odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_f3xz7h7.lua:25:\
    \ expected: {0, 1}\nactual: {0, 7}\nstack traceback:\n\t/tmp/tmp_f3xz7h7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local count = 0\n  while num > 0 do\n    local\
    \ digit = num % 10\n    if digit == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + digit\n    end\n    num = math.floor(num / 10)\n    count =\
    \ count + 1\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1nuu0vs.lua:27:\
    \ expected: {0, 1}\nactual: {0, 7}\nstack traceback:\n\t/tmp/tmpv1nuu0vs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local digit = math.floor(num / 10)\n\
    \    num = num % 10\n    if digit % 2 == 0 then\n      even = even + 1\n    else\n\
    \      odd = odd + 1 -- odd is always 1 more than even\n    end\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822820
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        even = even * 10 + remainder\n        odd = odd * 10 - remainder\n\
    \        num = num / 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6h0wmcda.lua:21:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp6h0wmcda.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even * 10 + remainder\n    odd = odd + 1 if remainder % 2 == 1 end\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp08x1ga4y.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even * 10 + num\
    \ % 10\n        odd = odd * 10 + num / 10\n        num = num / 10\n    end\n \
    \   return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fwul8u3.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp3fwul8u3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        even = even + num % 2\n\
    \        odd = odd + num % 2 ~= 0\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd3o00ltt.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmpd3o00ltt.lua:11: in local 'candidate'\n\t/tmp/tmpd3o00ltt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + 1 -- even\n    odd =\
    \ odd + 1 -- odd\n    num = num / 10 -- divide by 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0ti0_17.lua:20:\
    \ expected: {0, 1}\nactual: 326\nstack traceback:\n\t/tmp/tmpj0ti0_17.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg2qt5xb.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmptg2qt5xb.lua:11: in local 'candidate'\n\t/tmp/tmptg2qt5xb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even + remainder % 2\n        odd = odd + remainder /\
    \ 2\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoal0mzbe.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoal0mzbe.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, math.floor(math.log(num,\
    \ 10) + 1) do\n    if num % 10 == 0 then\n      even = even + 1\n    else\n  \
    \    odd = odd + 1 \n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnhlk5dw.lua:26:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpbnhlk5dw.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n        num = num / 2\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpxg_gs8.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmpxg_gs8.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, 10 do\n    local\
    \ remainder = math.mod(num, digit)\n    if remainder == 0 then\n      even = even\
    \ + 1\n    else\n      odd = odd + 1 -- odd digits are counted from 1 to 9\n \
    \   end\n    num = math.floor(num / digit)\n  end\n  return { even, odd }\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbxvcj_ix.lua:12:\
    \ attempt to call a nil value (field 'mod')\nstack traceback:\n\t/tmp/tmpbxvcj_ix.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbxvcj_ix.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even * 10 + num\
    \ % 10\n        odd = odd * 10 + num / 10\n        num = num / 10\n    end\n \
    \   return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fwul8u3.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp3fwul8u3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0thzyfz.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpq0thzyfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even * 10 + remainder\n        odd = odd * 10 - remainder\n\
    \        num = num % 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        even = even + remainder % 2\n        odd = odd + remainder / 2\n\
    \        num = math.floor(num / 10)\n    end\n    return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xkok8lp.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp_xkok8lp.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibevi_vt.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpibevi_vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even + remainder % 2\n        odd = odd + remainder /\
    \ 2\n        num = math.floor(num / 10)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoal0mzbe.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpoal0mzbe.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq2ia786.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmppq2ia786.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even * 10 + remainder\n    else\n      odd\
    \ = odd * 10 + remainder\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ux7_9qg.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp4ux7_9qg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96a3cd35.lua:22:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp96a3cd35.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96a3cd35.lua:22:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp96a3cd35.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + num % 2\n\
    \        odd = odd + num / 2\n        num = num / 10\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_k84pht.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpe_k84pht.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 1 -- odd digit\n        end\n        num = math.floor(num /\
    \ 2)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5v8vgfd.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpp5v8vgfd.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n        num = math.floor(num / 2)\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf_t9ai1w.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpf_t9ai1w.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc_wv822.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpyc_wv822.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    for i = 1, num do\n        if num % i == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1v9yds1.lua:22:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpp1v9yds1.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local tmp = math.floor(num\
    \ / 10)\n        even = even + tmp % 2 == 0 and 1 or 0\n        odd = odd + tmp\
    \ % 2 == 1 and 1 or 0\n        num = math.floor(num / 10)\n    end\n    return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3uc8wb_c.lua:21:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmp3uc8wb_c.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc_wv822.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpyc_wv822.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, 10 do\n    if num\
    \ % 10 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1 -- odd\
    \ number has one more digit\n    end\n    num = num / 10\n  end\n  return { even,\
    \ odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4e57f3w.lua:25:\
    \ expected: {0, 1}\nactual: {0, 10}\nstack traceback:\n\t/tmp/tmpq4e57f3w.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local i = 1\n    while i <= math.floor(math.log(num,\
    \ 2)) do\n        if num % i == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1 \n        end\n        i = i + 1\n    end\n    return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mp_sf94.lua:25:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmp6mp_sf94.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 1 \n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11fz1s0a.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp11fz1s0a.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remainder\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1h6tl1n.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1h6tl1n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 0\n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzarpa001.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpzarpa001.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num, 2)) do\n  \
    \  if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\
    \ -- odd numbers are odd.\n    end\n    num = math.floor(num / 2)\n  end\n  return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxsb2sxxs.lua:24:\
    \ expected: {0, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmpxsb2sxxs.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + remainder\n        end\n        num = math.floor(num\
    \ / 10)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1h6tl1n.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpz1h6tl1n.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even + remainder % 2\n    odd = odd + remainder / 2\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19h06yy3.lua:21:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp19h06yy3.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0thzyfz.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpq0thzyfz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1704ezy2.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmp1704ezy2.lua:11: in local 'candidate'\n\t/tmp/tmp1704ezy2.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qyw5rag.lua:20:\
    \ expected: {0, 1}\nactual: 7.0\nstack traceback:\n\t/tmp/tmp9qyw5rag.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd + 1\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1t9ct2hn.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmp1t9ct2hn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num, 2)) do\n  \
    \  if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\
    \ \n    end\n    num = math.floor(num / 2)\n  end\n  return { even, odd }\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr172n4tb.lua:24:\
    \ expected: {0, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmpr172n4tb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        end\n        if num % 2 ~= 0 then\n    \
    \        odd = odd + 0\n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4fu0toqc.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp4fu0toqc.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsxjwuvx.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpdsxjwuvx.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg2qt5xb.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmptg2qt5xb.lua:11: in local 'candidate'\n\t/tmp/tmptg2qt5xb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even + 1\n    else\n      odd = odd + remainder\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc6_um7o.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxc6_um7o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num > 0 do\n        local remainder\
    \ = math.floor(num / 10)\n        if remainder % 2 == 0 then\n            even\
    \ = even + 1\n        end\n        if remainder % 2 == 1 then\n            odd\
    \ = odd + 1 \n        end\n        num = math.floor(num / 10)\n    end\n    return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor0zw7qz.lua:26:\
    \ expected: {0, 1}\nactual: {1, 0}\nstack traceback:\n\t/tmp/tmpor0zw7qz.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 1 -- odd number has 1 digit\n        end\n        num = math.floor(num\
    \ / 2)\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgycxh5kt.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpgycxh5kt.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even * 10 + remainder\n    odd = odd * 10 - remainder\n    num = num / 10\n\
    \  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmv4kdde3.lua:21:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpmv4kdde3.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqkfkg2r.lua:20:\
    \ expected: {0, 1}\nactual: 3\nstack traceback:\n\t/tmp/tmpeqkfkg2r.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + num % 2\n\
    \        odd = odd + num / 2\n        num = num / 10\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_k84pht.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpe_k84pht.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local count = 0\n  while num > 0 do\n    count\
    \ = count + 1\n    if num % 2 == 0 then\n      even = even + 1\n    else\n   \
    \   odd = odd + 1 \n    end\n    num = math.floor(num / 10)\n  end\n  return {\
    \ even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoghv7y8r.lua:27:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpoghv7y8r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    local remainder = math.fmod(num, 2)\n    if remainder == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1 \n    end\n    num = math.floor(num\
    \ / 2)\n    i = i + 1\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9ceyv07.lua:28:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpu9ceyv07.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 0\n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzarpa001.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpzarpa001.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even + remainder % 2\n    odd = odd + remainder / 2\n    num\
    \ = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1iw6rx5.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpn1iw6rx5.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, 10 do\n    if num\
    \ % 10 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1 \n    end\n\
    \    num = num / 10\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ae35ird.lua:25:\
    \ expected: {0, 1}\nactual: {0, 10}\nstack traceback:\n\t/tmp/tmp8ae35ird.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local digit\n    for digit = 1, 10 do\n\
    \        if num % 10 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1 \n        end\n        num = num / 10\n    end\n    return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwrq_t_b.lua:25:\
    \ expected: {0, 1}\nactual: {0, 10}\nstack traceback:\n\t/tmp/tmptwrq_t_b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + 1 -- even\n\
    \        odd = odd + (num % 2 == 0) -- odd\n        num = math.floor(num / 2)\n\
    \    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps8ph_f02.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmps8ph_f02.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmps8ph_f02.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even * 10 + remainder\n    else\n      odd\
    \ = odd * 10 + remainder\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ux7_9qg.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp4ux7_9qg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4dcf73j.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmpx4dcf73j.lua:11: in local 'candidate'\n\t/tmp/tmpx4dcf73j.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        end\n        if num % 2 ~= 0 then\n    \
    \        odd = odd + 1 \n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp376a5xts.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp376a5xts.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + 1 -- Increment\
    \ even count by 1\n        odd = odd + 1 -- Increment odd count by 1\n       \
    \ num = num / 10 -- Divide number by 10\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmx_0ck01.lua:20:\
    \ expected: {0, 1}\nactual: 325\nstack traceback:\n\t/tmp/tmpmx_0ck01.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    local remainder = num % 10\n    num\
    \ = num / 10\n    if remainder == 0 then\n      even = even + 1\n    else\n  \
    \    odd = odd + remainder\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6afnqgp.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpr6afnqgp.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + 1 -- even\n    odd =\
    \ odd + (num % 2 == 0) -- odd\n    num = math.floor(num / 2)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6u8fmvno.lua:11:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmp6u8fmvno.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6u8fmvno.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    local digit\n    for digit = 1, 10 do\n\
    \        if num % 10 == 0 then\n            even = even + 1\n        else\n  \
    \          odd = odd + 1 \n        end\n        num = num / 10\n    end\n    return\
    \ { even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptwrq_t_b.lua:25:\
    \ expected: {0, 1}\nactual: {0, 10}\nstack traceback:\n\t/tmp/tmptwrq_t_b.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, math.floor(math.log(num,\
    \ 10) + 1) do\n    if math.fmod(num, 10) == 0 then\n      even = even + 1\n  \
    \  else\n      odd = odd + 1 -- math.fmod returns negative number\n    end\n \
    \   num = math.fmod(num, 10)\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavx18c9p.lua:26:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpavx18c9p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even * 10 + remainder\n        odd = odd * 10 - remainder\n\
    \        num = num % 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local digit\n  for digit = 1, 10 do\n    if num\
    \ % 10 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1 \n    end\n\
    \    num = num / 10\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ae35ird.lua:25:\
    \ expected: {0, 1}\nactual: {0, 10}\nstack traceback:\n\t/tmp/tmp8ae35ird.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + num % 2\n\
    \        odd = odd + num / 2\n        num = num / 2\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrgj2vw3.lua:20:\
    \ expected: {0, 1}\nactual: 6.0\nstack traceback:\n\t/tmp/tmpmrgj2vw3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        local remainder = num\
    \ % 10\n        if remainder == 0 then\n            even = even+1\n        else\n\
    \            odd = odd+1\n        end\n        num = num / 10\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgma3mcl.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpzgma3mcl.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6_dlpx_.lua:20:\
    \ expected: {0, 1}\nactual: 2.7777777777778\nstack traceback:\n\t/tmp/tmpw6_dlpx_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = math.floor(num /\
    \ 10)\n    even = even * 10 + remainder\n    odd = odd * 10 + math.floor(remainder\
    \ / 10)\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcmwfvk8.lua:21:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmptcmwfvk8.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n        num = num / 2\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpxg_gs8.lua:23:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpmpxg_gs8.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  for i = 1, math.floor(math.log(num, 2)) do\n  \
    \  if num % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd + 1\
    \ \n    end\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvqw5mt9.lua:23:\
    \ expected: {0, 1}\nactual: {0, 2}\nstack traceback:\n\t/tmp/tmpkvqw5mt9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even * 10 + remainder\n        odd = odd + 1 if remainder\
    \ % 2 == 1 end\n        num = num % 10\n    end\n    return even, odd\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3url50nn.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + 1 -- even\n    odd =\
    \ odd + 1 -- odd\n    num = math.floor(num / 10)\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny8y3_6y.lua:20:\
    \ expected: {0, 1}\nactual: 2\nstack traceback:\n\t/tmp/tmpny8y3_6y.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjddjaeuv.lua:20:\
    \ expected: {0, 1}\nactual: 6\nstack traceback:\n\t/tmp/tmpjddjaeuv.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc_wv822.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpyc_wv822.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even * 10 + remainder\n    else\n      odd\
    \ = odd * 10 + remainder\n    end\n    num = math.floor(num / 10)\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4ux7_9qg.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp4ux7_9qg.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    if\
    \ remainder == 0 then\n      even = even + 1\n    else\n      odd = odd + remainder\n\
    \    end\n    num = math.floor(num / 10)\n  end\n  return even, odd\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc6_um7o.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmpxc6_um7o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local count = 0\n  while num > 0 do\n    count\
    \ = count + 1\n    if num % 2 == 0 then\n      even = even + 1\n    else\n   \
    \   odd = odd + 1 \n    end\n    num = math.floor(num / 10)\n  end\n  return {\
    \ even, odd }\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoghv7y8r.lua:27:\
    \ expected: {1, 1}\nactual: {0, 0}\nstack traceback:\n\t/tmp/tmpoghv7y8r.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local digit = num % 10\n    num =\
    \ num / 10\n    if digit == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + digit\n    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v0ma3jz.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp0v0ma3jz.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 0\n    while num > 0 do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        end\n        if num % 2 == 1 then\n    \
    \        odd = odd + 0\n        end\n        num = num / 2\n    end\n    return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r7mdowk.lua:24:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp_r7mdowk.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  while num > 0 do\n    local remainder = math.floor(num\
    \ / 10)\n    even = even + 1 if remainder % 2 == 0 end\n    odd = odd + 1 if remainder\
    \ % 2 == 1 end\n    num = math.floor(num / 10)\n  end\n  return { even, odd }\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz10yk746.lua:12: ''then'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 10\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn74ibojg.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpn74ibojg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9qyw5rag.lua:20:\
    \ expected: {0, 1}\nactual: 7.0\nstack traceback:\n\t/tmp/tmp9qyw5rag.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    local remainder = num % 10\n    even\
    \ = even * 10 + remainder\n    odd = odd * 10 - remainder\n    num = math.floor(num\
    \ / 10)\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmo3wihg.lua:21:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpbmo3wihg.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even * 10 + num\
    \ % 10\n        odd = odd * 10 + num / 10 % 10\n        num = num / 10\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0kwxlod.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpp0kwxlod.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1704ezy2.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmp1704ezy2.lua:11: in local 'candidate'\n\t/tmp/tmp1704ezy2.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even + 1 -- even\n    odd =\
    \ odd + 1 -- odd\n    num = num / 10 -- divide the number by 10\n  end\n  return\
    \ even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp1yq3r8u.lua:20:\
    \ expected: {0, 1}\nactual: 325\nstack traceback:\n\t/tmp/tmpp1yq3r8u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local digit = num % 10\n\
    \        if digit == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + digit\n        end\n        num = math.floor(num / 10)\n \
    \   end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_p4klg6o.lua:24:\
    \ expected: {0, 1}\nactual: 0\nstack traceback:\n\t/tmp/tmp_p4klg6o.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even = 0\n    local odd = 0\n    while num > 0 do\n        even = even\
    \ + 1 -- count the even digits\n        num = math.floor(num / 10)\n    end\n\
    \    while num > 0 do\n        odd = odd + 1 -- count the odd digits\n       \
    \ num = math.floor(num / 10)\n    end\n    return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi0jegg4.lua:24:\
    \ expected: {0, 1}\nactual: {1, 0}\nstack traceback:\n\t/tmp/tmppi0jegg4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: -1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        local remainder = math.floor(num\
    \ / 10)\n        even = even * 10 + remainder\n        odd = odd * 10 - remainder\n\
    \        num = num % 10\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822821
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local count = 0\n  while num > 0 do\n    count\
    \ = count + 1\n    even = even + num % 2\n    odd = odd + num % 2 ~= 0\n    num\
    \ = math.floor(num / 2)\n  end\n  return { even, odd }\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwsthtqdr.lua:14:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmpwsthtqdr.lua:14: in local 'candidate'\n\t/tmp/tmpwsthtqdr.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even = even + 1\n        else\n      \
    \      odd = odd + 0\n        end\n        num = math.floor(num / 2)\n    end\n\
    \    return even, odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n\
    \    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzarpa001.lua:23:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmpzarpa001.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10 % 10\n    num = num / 10\n  end\n  return even, odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyc_wv822.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpyc_wv822.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptg2qt5xb.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmptg2qt5xb.lua:11: in local 'candidate'\n\t/tmp/tmptg2qt5xb.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 0\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num % 2 ~= 0\n    num = math.floor(num / 2)\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1704ezy2.lua:11:\
    \ attempt to perform arithmetic on a boolean value (local 'odd')\nstack traceback:\n\
    \t/tmp/tmp1704ezy2.lua:11: in local 'candidate'\n\t/tmp/tmp1704ezy2.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even = 0\n  local odd = 0\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    if num % i == 0 then\n      even = even + 1\n    else\n      odd\
    \ = odd + 1 \n    end\n    i = i + 1\n  end\n  return { even, odd }\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg74qxbm2.lua:25:\
    \ expected: {0, 1}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpg74qxbm2.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 1, 1\n    for i = 1, num do\n        if num % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 0\n      \
    \  end\n    end\n    return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96a3cd35.lua:22:\
    \ expected: {0, 1}\nactual: 1\nstack traceback:\n\t/tmp/tmp96a3cd35.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822816
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n   \
    \ local even, odd = 0, 1\n    while num > 0 do\n        even = even + num % 2\n\
    \        odd = odd + num / 2\n        num = num / 10\n    end\n    return even,\
    \ odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = even_odd_count\n    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_k84pht.lua:20:\
    \ expected: {0, 1}\nactual: 1.7777777777778\nstack traceback:\n\t/tmp/tmpe_k84pht.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822815
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n    odd = odd\
    \ + num / 2\n    num = num / 2\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = even_odd_count\n    lu.assertEquals(candidate(7),\
    \ {0, 1})\n    lu.assertEquals(candidate(-78), {1, 1})\n    lu.assertEquals(candidate(3452),\
    \ {2, 2})\n    lu.assertEquals(candidate(346211), {3, 3})\n    lu.assertEquals(candidate(-345821),\
    \ {3, 3})\n    lu.assertEquals(candidate(-2), {1, 0})\n    lu.assertEquals(candidate(-45347),\
    \ {2, 3})\n    lu.assertEquals(candidate(0), {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2r4yocc.lua:20:\
    \ expected: {0, 1}\nactual: 7\nstack traceback:\n\t/tmp/tmpf2r4yocc.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750437
- exit_code: 1
  program: "-- Given an integer. return a tuple that has the number of even and odd\
    \ digits respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n--\
    \ >>> even_odd_count(123)\n-- {1, 2}\nlocal function even_odd_count(num)\n  local\
    \ even, odd = 0, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd\
    \ = odd * 10 + num / 10\n    num = num / 10\n  end\n  return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
    \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
    \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
    \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
    \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
    \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibevi_vt.lua:20:\
    \ expected: {0, 1}\nactual: #Inf\nstack traceback:\n\t/tmp/tmpibevi_vt.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750437
