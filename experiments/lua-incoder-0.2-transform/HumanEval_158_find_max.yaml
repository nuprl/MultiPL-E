name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a list of strings.\n-- The list contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n\
  -- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa',\
  \ 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = -1\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max_count = -1\n \
    \ local max_word = nil\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    max = max + 1\n  end\n  for word in words do\n    if max\
    \ > #word then\n      return word\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    local count = 0\n    for\
    \ char in word do\n      count = count + 1\n    end\n    if count > max then\n\
    \      max = count\n    end\n  end\n  if max > 0 then\n    local word\n    for\
    \ word in words do\n      local count = 0\n      for char in word do\n       \
    \ count = count + 1\n      end\n      if count > max then\n        max = count\n\
    \      end\n    end\n  end\n  return word\nend", "  local max_count = -1\n  local\
    \ max_word\n  for _, word in ipairs(words) do\n    local count = #word\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max_count = -1\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = 0\n  local word\n  for word in words do\n   \
    \ max = max + 1\n  end\n  for word in words do\n    max = max - 1\n    if max\
    \ < 0 then\n      return word\n    end\n  end\nend", "  local max_count = 0\n\
    \  local max_word\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = max or #word\n\
    \    if #word > max then\n      max = #word\n    end\n  end\n  return words[math.min(#words,\
    \ max)]\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    table.insert(max, table.max(count))\n\
    \  end\n  return max[1]\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, c in ipairs(word) do\n      count[c] =\
    \ count[c] or 0\n      count[c] = count[c] + 1\n    end\n    for _, c in pairs(count)\
    \ do\n      if count[c] > max[c] then\n        max[c] = count[c]\n      end\n\
    \    end\n  end\n  for _, c in pairs(max) do\n    if max[c] == 1 then\n      return\
    \ c\n    end\n  end\n  return nil\nend", "  local max_count = -1\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxchar = count.keys[1]\n\
    \    if maxchar and count[maxchar] > count[maxchar + 1] then\n      maxchar =\
    \ count.keys[1]\n    end\n    table.insert(max, maxchar)\n  end\n  return table.concat(max,\
    \ \"\")\nend", "  local max = 0\n  local word\n  for word in words do\n    local\
    \ count = 0\n    for c in word do\n      count = count + 1\n      if count > max\
    \ then\n        max = count\n      end\n    end\n  end\n  return word\nend", " \
    \ local max_count = 0\n  local max_word\n  for _, word in ipairs(words) do\n \
    \   local count = #word\n    if count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "  local max\
    \ = 0\n  local word\n  for word in words do\n    max = max + 1\n  end\n  for word\
    \ in words do\n    max = max - 1\n    if max < 0 then\n      return word\n   \
    \ end\n  end\nend", "  local max = {}\n  for _, word in ipairs(words) do\n   \
    \ local count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c]\
    \ or 0\n      count[c] = count[c] + 1\n    end\n    local maxChar = nil\n    for\
    \ _, c in pairs(count) do\n      if maxChar == nil or count[c] > count[maxChar]\
    \ then\n        maxChar = c\n      end\n    end\n    max[#max+1] = maxChar\n \
    \ end\n  table.sort(max, function(a, b) return max[a] < max[b] end)\n  return\
    \ max[1]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
