name: HumanEval_33_sort_third
language: lua
prompt: "-- This function takes a list l and returns a list l' such that\n-- l' is\
  \ identical to l in the indicies that are not divisible by three, while its values\
  \ at the indicies that are divisible by three are equal\n-- to the values of the\
  \ corresponding indicies of l, but sorted.\n-- >>> sort_third({1, 2, 3})\n-- {1,\
  \ 2, 3}\n-- >>> sort_third({5, 6, 3, 4, 8, 9, 2})\n-- {2, 6, 3, 4, 8, 9, 5}\nlocal\
  \ function sort_third(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_third\n\
  \    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2}), {2, 6, 3, 4, 8, 9, 5})\n\
  \    lu.assertEquals(candidate({5, 8, 3, 4, 6, 9, 2}), {2, 8, 3, 4, 6, 9, 5})\n\
  \    lu.assertEquals(candidate({5, 6, 9, 4, 8, 3, 2}), {2, 6, 9, 4, 8, 3, 5})\n\
  \    lu.assertEquals(candidate({5, 6, 3, 4, 8, 9, 2, 1}), {2, 6, 3, 4, 8, 9, 5,\
  \ 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n     \
    \ table.insert(l2, l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n\
    \  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 3\
    \ == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2, l[i\
    \ - 1])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l\
    \ do\n    if i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "    local l2 = {}\n    for i\
    \ = 1, #l do\n        if i % 3 == 0 then\n            l2[i] = l[i]\n        else\n\
    \            l2[i] = l[i - 1]\n        end\n    end\n    return l2\nend", "  local\
    \ l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n      table.insert(l2,\
    \ l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return\
    \ l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    local k = l[i]\n    local\
    \ j = i - 1\n    while j >= 0 and l[j] % 3 == 0 do\n      table.insert(l2, k)\n\
    \      j = j - 1\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i\
    \ = 1, #l do\n    if i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n\
    \      table.insert(l2, l[i - 1])\n    end\n  end\n  return l2\nend", "  local\
    \ l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n      table.insert(l2,\
    \ l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return\
    \ l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n   \
    \   table.insert(l2, l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n\
    \  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 3\
    \ == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2, l[i\
    \ - 1])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l\
    \ do\n    if i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1,\
    \ #l do\n    local k = l[i]\n    if k % 3 == 0 then\n      table.insert(l2, k)\n\
    \    else\n      table.insert(l2, k, l[i])\n    end\n  end\n  table.sort(l2)\n\
    \  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n\
    \      table.insert(l2, l[i])\n    else\n      table.insert(l2, l[i - 1])\n  \
    \  end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l do\n    if\
    \ i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1,\
    \ #l do\n    if i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n    \
    \  table.insert(l2, l[i - 1])\n    end\n  end\n  return l2\nend", "  local l2\
    \ = {}\n  for i = 1, #l do\n    local val = l[i]\n    local i2 = i + 1\n    while\
    \ i2 < #l and l[i2] % 3 == 0 do\n      val = l[i2]\n      i2 = i2 + 1\n    end\n\
    \    l2[i] = val\n  end\n  return l2\nend", "  local l2 = {}\n  for i = 1, #l\
    \ do\n    if i % 3 == 0 then\n      table.insert(l2, l[i])\n    else\n      table.insert(l2,\
    \ l[i - 1])\n    end\n  end\n  return l2\nend", "    local l2 = {}\n    for i\
    \ = 1, #l do\n        if i % 3 == 0 then\n            l2[i] = l[i]\n        else\n\
    \            l2[i] = l[i - 3]\n        end\n    end\n    return l2\nend", "  local\
    \ l2 = {}\n  for i = 1, #l do\n    local k = l[i]\n    if k % 3 == 0 then\n  \
    \    table.insert(l2, k)\n    else\n      table.insert(l2, k, l[i])\n    end\n\
    \  end\n  table.sort(l2, function(a, b) return a < b end)\n  return l2\nend",
  "  local l2 = {}\n  for i = 1, #l do\n    if i % 3 == 0 then\n      table.insert(l2,\
    \ l[i])\n    else\n      table.insert(l2, l[i - 1])\n    end\n  end\n  return\
    \ l2\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
