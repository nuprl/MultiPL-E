language: lua
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_brriz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprs_brriz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2krcrk8k.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2krcrk8k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_brriz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprs_brriz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_brriz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprs_brriz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count +\
    \ 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl9g7cxd.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprl9g7cxd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      vowels_count = vowels_count\
    \ + 1\n    end\n  end\n  return vowels_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2krcrk8k.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp2krcrk8k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i = 1,\
    \ #s do\n        if vowels[s[i]] then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3eafh2iy.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp3eafh2iy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750277
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count +\
    \ 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl9g7cxd.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprl9g7cxd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_brriz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprs_brriz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowels_count = vowels_count + 1\n    end\n\
    \  end\n  return vowels_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs_brriz.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprs_brriz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n    for\
    \ i = 1, #s do\n        if vowels[string.sub(s,i,i)] then\n            vowels_count\
    \ = vowels_count + 1\n        end\n    end\n    return vowels_count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bneuw9n.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp1bneuw9n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[s[i]] then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2bqwtle.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpa2bqwtle.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\n-- >>> vowels_count('abcde')\n\
    -- 2\n-- >>> vowels_count('ACEDY')\n-- 3\nlocal function vowels_count(s)\n  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowel_count = 0\n  for i = 1, #s\
    \ do\n    if vowels[string.sub(s,i,i)] then\n      vowel_count = vowel_count +\
    \ 1\n    end\n  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprl9g7cxd.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmprl9g7cxd.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750249
