language: lua
name: HumanEval_25_factorize
results:
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local factor = 1\n  while n > 1 do\n    factor = factor\
    \ * n\n    factors[#factors + 1] = factor\n    n = n / factor\n  end\n  return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vfsf3a_.lua:25:\
    \ expected: {2, 2}\nactual: {4}\nstack traceback:\n\t/tmp/tmp5vfsf3a_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Initialize result with factors of given number\n  local factors = {}\n  --\
    \ Initialize counter to 1\n  local counter = 1\n  -- Initialize prime flag to\
    \ true\n  local prime = true\n  -- Initialize current number to n\n  local current\
    \ = n\n  -- While current number is not 1\n  while current ~= 1 do\n    -- If\
    \ current number is prime\n    if prime then\n      -- Add current number to factors\n\
    \      factors[#factors + 1] = current\n      -- Increment counter\n      counter\
    \ = counter + 1\n    -- If current number is not prime\n    else\n      -- If\
    \ current number is not divisible by any prime factor\n      if current % prime\
    \ = 0 then\n        -- Add current number to factors\n        factors[#factors\
    \ + 1] = current\n        -- Increment counter\n        counter = counter + 1\n\
    \      -- If current number is divisible by some prime factor\n      else\n  \
    \      -- Set prime flag to false\n        prime = false\n      end\n    end\n\
    \    -- Decrement current number\n    current = current / 2\n  end\n  -- Return\
    \ factors\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmputbrnfja.lua:30: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n < 2 then return {} end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2z0oy5y9.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n %\
    \ i == 0 then\n      local p = i\n      while n ~= 1 do\n        local q = n /\
    \ p\n        if q == p then\n          factors[#factors+1] = p\n          break\n\
    \        else\n          p = q\n        end\n      end\n      n = n//i\n    end\n\
    \    i = i + 1\n  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpewjtcjx8.lua:25: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6a1p71j.lua:29:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpd6a1p71j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        local factor = 1\n      \
    \  for j = 1, i do\n            if n % i == 0 then\n                factor = factor\
    \ * j\n            end\n        end\n        if factor ~= 1 then\n           \
    \ table.insert(factors, factor)\n        end\n    end\n    return factors\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeq2ugi5m.lua:30:\
    \ expected: {2, 2}\nactual: {2, 24}\nstack traceback:\n\t/tmp/tmpeq2ugi5m.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n == 1 then\n    return {n}\n  end\n  -- Recursive case\n\
    \  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n    for\
    \ _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n  return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjw_37s8.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\
    \t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18:\
    \ in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\
    \t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18:\
    \ in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\
    \t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18:\
    \ in function 'factorize'\n\t/tmp/tmpwjw_37s8.lua:18: in function 'factorize'\n\
    \t...\n\nRan 1 tests in 0.460 seconds, 0 successes, 1 error\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n < 2 then return {n} end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq11malua.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n < 2 then return {n} end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq11malua.lua:27: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 1\n  while i <= n do\n    if n % i == 0 then\n\
    \      factors[#factors+1] = i\n      n = n / i\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxddy5n8p.lua:26:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpxddy5n8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p == 1 then\n            factors[i] = 1\n    \
    \    else\n            local factor = 1\n            for j = 1, p do\n       \
    \         factor = factor * i\n            end\n            factors[i] = factor\n\
    \        end\n        i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3b6b56c.lua:32:\
    \ expected: {2}\nactual: {1, 1}\nstack traceback:\n\t/tmp/tmpx3b6b56c.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p*i > n then\n            i = p\n        else\n\
    \            factors[#factors+1] = p\n            n = n/i\n        end\n     \
    \   i = i + 1\n    end\n    return factors\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_9z82an.lua:29:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmp9_9z82an.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n %\
    \ i == 0 then\n      factors[#factors+1] = i\n      n = n / i\n    end\n    i\
    \ = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n  return\
    \ factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpab65t_kj.lua:29:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpab65t_kj.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n %\
    \ i == 0 then\n      factors[#factors + 1] = i\n      n = n / i\n    end\n   \
    \ i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors + 1] = n\n  end\n \
    \ return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvvtdmyv.lua:29:\
    \ expected: {2}\nactual: {1, 2}\nstack traceback:\n\t/tmp/tmpcvvtdmyv.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n == 1 then\n    return {n}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw4s0q6h8.lua:29: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Base case\n  if n < 2 then return {n} end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    local p = math.floor(n/i)\n    if p == 1 then factors[#factors+1]\
    \ = i end\n    factors[#factors+1] = p\n  end\n  return factors\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = factorize\n    lu.assertEquals(candidate(2),\
    \ {2})\n    lu.assertEquals(candidate(4), {2, 2})\n    lu.assertEquals(candidate(8),\
    \ {2, 2, 2})\n    lu.assertEquals(candidate(57), {3, 19})\n    lu.assertEquals(candidate(3249),\
    \ {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193), {3, 3, 3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n    lu.assertEquals(candidate(18),\
    \ {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuknc67f.lua:26:\
    \ expected: {2}\nactual: {2, 1}\nstack traceback:\n\t/tmp/tmpsuknc67f.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Initialize result with first prime factor\n  local factors = {}\n  local\
    \ p = primeFactors(n)\n  -- Add first prime factor to result\n  factors[#factors+1]\
    \ = p[1]\n  -- Iterate over remaining primes\n  for i = 2, #p do\n    -- If current\
    \ prime is greater than current factor then add current prime to factors\n   \
    \ if p[i] > factors[#factors] then\n      factors[#factors+1] = p[i]\n    end\n\
    \  end\n  return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzlnhf4q6.lua:13:\
    \ attempt to call global 'primeFactors' (a nil value)\nstack traceback:\n\t/tmp/tmpzlnhf4q6.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpzlnhf4q6.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ -- Initialize result with factors of n\n  local factors = {}\n  -- Initialize\
    \ counter for number of times each factor appears\n  local count = {}\n  -- Initialize\
    \ list of prime factors\n  local primes = {}\n  -- Initialize list of prime factors\n\
    \  local primes2 = {}\n  -- Initialize list of prime factors\n  local primes3\
    \ = {}\n  -- Initialize list of prime factors\n  local primes4 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes5 = {}\n  -- Initialize list of prime factors\n\
    \  local primes6 = {}\n  -- Initialize list of prime factors\n  local primes7\
    \ = {}\n  -- Initialize list of prime factors\n  local primes8 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes9 = {}\n  -- Initialize list of prime factors\n\
    \  local primes10 = {}\n  -- Initialize list of prime factors\n  local primes11\
    \ = {}\n  -- Initialize list of prime factors\n  local primes12 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes13 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes14 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes15 = {}\n  -- Initialize list of prime factors\n  local primes16 = {}\n\
    \  -- Initialize list of prime factors\n  local primes17 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes18 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes19 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes20 = {}\n  -- Initialize list of prime factors\n  local primes21 = {}\n\
    \  -- Initialize list of prime factors\n  local primes22 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes23 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes24 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes25 = {}\n  -- Initialize list of prime factors\n  local primes26 = {}\n\
    \  -- Initialize list of prime factors\n  local primes27 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes28 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes29 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes30 = {}\n  -- Initialize list of prime factors\n  local primes31 = {}\n\
    \  -- Initialize list of prime factors\n  local primes32 = {}\n  -- Initialize\
    \ list of \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplkp_so_i.lua:94: ''end'' expected (to close ''function'' at
    line 10) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
    \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2,\
    \ 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6a1p71j.lua:29:\
    \ expected: {2, 2, 2}\nactual: {2, 4}\nstack traceback:\n\t/tmp/tmpd6a1p71j.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
- exit_code: 1
  program: "-- Return list of prime factors of given integer in the order from smallest\
    \ to largest.\n-- Each of the factors should be listed number of times corresponding\
    \ to how many times it appeares in factorization.\n-- Input number should be equal\
    \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
    -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n \
    \ local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n \
    \   while n % i == 0 do\n      n = n / i\n      factor = factor * i\n      i =\
    \ i + 1\n    end\n    i = i + 1\n    factors[#factors + 1] = factor\n  end\n \
    \ return factors\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = factorize\n    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4),\
    \ {2, 2})\n    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
    \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
    \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
    \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6aqc1guj.lua:30:\
    \ expected: {2, 2}\nactual: {2}\nstack traceback:\n\t/tmp/tmp6aqc1guj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750407
