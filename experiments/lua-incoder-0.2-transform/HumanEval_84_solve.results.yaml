language: lua
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local i = 1\n  while i <= N do\n    sum = sum + math.floor((N % i) /\
    \ 2)\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduf962go.lua:27:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmpduf962go.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    local i = 1\n    while i <= N do\n        local t = math.floor((N\
    \ % i) / 2)\n        s = s .. tostring(t ^ 1)\n        i = i + 1\n    end\n  \
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'F

    Failed tests:

    -------------

    1) test_humaneval

    /tmp/tmppqzi955s.lua:28: expected: "1"

    actual: "00000230005263547560655806010754457101406120817516517620100156231452415728201242720125312417103322519126383226201482383227211610545403530252015105045413632272318149505248444036322824201612840595552484541383431272420171310637168656259565350474441383532292623201714118528280777572706765626057555250474542403735323027252220171512107520989694929088868482807876747270686664626058565452504846444240383634323028262422201816141210864201231221201191171161141131111101081071051041021019998969593929089878684838180787775747271696866656362605957565453515048474544424139383635333230292726242321201817151412119865320166165164163162161160159158157156155154153152151150149148147146145144143142141140139138137136135134133132131130129128127126125124123122121120119118117116115114113112111110109108107106105104103102101100999897969594939291908988878685848382818079787776757473727170696867666564636261605958575655545352515049484746454443424140393837363534333231302928272625242322212019181716151413121110987654321024924924824824724724624624524524424424324324224224124124024023923923823823723723623623523523423423323323223223123123023022922922822822722722622622522522422422322322222222122122022021921921821821721721621621521521421421321321221221121121021020920920820820720720620620520520420420320320220220120120020019919919819819719719619619519519419419319319219219119119019018918918818818718718618618518518418418318318218218118118018017917917817817717717617617517517417417317317217217117117017016916916816816716716616616516516416416316316216216116116016015915915815815715715615615515515415415315315215215115115015014914914814814714714614614514514414414314314214214114114014013913913813813713713613613513513413413313313213213113113013012912912812812712712612612512512412412312312212212112112012011911911811811711711611611511511411411311311211211111111011010910910810810710710610610510510410410310310210210110110010099999898979796969595949493939292919190908989888887878686858'
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local carry = 0\n  local digit\n  for i = 1, N do\n    digit = math.floor((N\
    \ - i) / 2)\n    carry = digit * 2 + carry\n    result = string.format('%s%d%s',\
    \ result, carry, carry > 0 and '1' or '')\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'F

    Failed tests:

    -------------

    1) test_humaneval

    /tmp/tmppexnad50.lua:29: expected: "1"

    actual: "99811996129921398814982159761696817960189501994011092811191611290211388811487211585611683811782011880011978012075812173612271212368812466212563612660812758012855012952013048813145613242213338813435213531613627813724013820013916014011814107614203214298814394214489614584814680014775014870014964815059615154215248815343215437615531815626015720015814015907816001616095216188816282216375616468816562016655016748016840816933617026217118817211217303617395817488017580017672017763817855617947218038818130218221618312818404018495018586018676818767618858218948819039219129619219819310019400019490019579819669619759219848819938211002761101168110206011029501103840110472811056161106502110738811082721109156111003811109201111800111268011135581114436111531211161881117062111793611188081119680112055011214201122288112315611240221124888112575211266161127478112834011292001130060113091811317761132632113348811343421135196113604811369001137750113860011394481140296114114211419881142832114367611445181145360114620011470401147878114871611495521150388115122211520561152888115372011545501155380115620811570361157862115868811595121160336116115811619801162800116362011644381165256116607211668881167702116851611693281170140117095011717601172568117337611741821174988117579211765961177398117820011790001179800118059811813961182192118298811837821184576118536811861601186950118774011885281189316119010211908881191672119245611932381194020119480011955801196358119713611979121198688119946212002361201008120178012025501203320120408812048561205622120638812071521207916120867812094401210200121096012117181212476121323212139881214742121549612162481217000121775012185001219248121999612207421221488122223212229761223718122446012252001225940122667812274161228152122888812296221230356123108812318201232550123328012340081234736123546212361881236912123763612383581239080123980012405201241238124195612426721243388124410212448161245528124624012469501247660124836812490761249782125048812511921251'
  timestamp: 1659750588
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local n = math.floor(N / 2)\n        s = string.format('%s%d%s',\
    \ s, n + 1, string.format('%d', n % 2))\n        N = N - n\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750592
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw_llijs.lua:27:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmpvw_llijs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  -- Base case\n\
    \  if N == 0 then\n    return \"0\"\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp66y1ie0i.lua:30: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local t = math.floor(math.log2(N))\n     \
    \   s = s .. '1' .. math.floor((N / 2 ** t) * 2)\n        N = N % 2 ** t\n   \
    \ end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp570q04lv.lua:18: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local i = 0\n  while i < N do\n    sum = sum + math.floor((N % 10) *\
    \ math.pow(2, i))\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr06y1o6d.lua:27:\
    \ expected: \"1\"\nactual: 0\nstack traceback:\n\t/tmp/tmpr06y1o6d.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  local i = 0\n  while i < N do\n    local n = math.floor(math.pow(10, i)\
    \ * N)\n    s = s .. tostring(n)\n    i = i + 1\n  end\n  return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n \
    \   lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'F

    Failed tests:

    -------------

    1) test_humaneval

    /tmp/tmpii2fonlw.lua:28: expected: "1"

    actual: "1000100001000001000000100000001000000001000000000100000000001000000000001000000000000100000000000001e+141e+151e+161e+171e+181e+191e+201e+211e+221e+231e+241e+251e+261e+271e+281e+291e+301e+311e+321e+331e+341e+351e+361e+371e+381e+391e+401e+411e+421e+431e+441e+451e+461e+471e+481e+491e+501e+511e+521e+531e+541e+551e+561e+571e+581e+591e+601e+611e+621e+631e+641e+651e+661e+671e+681e+691e+701e+711e+721e+731e+741e+751e+761e+771e+781e+791e+801e+811e+821e+831e+841e+851e+861e+871e+881e+891e+901e+911e+921e+931e+941e+951e+961e+971e+981e+991e+1001e+1011e+1021e+1031e+1041e+1051e+1061e+1071e+1081e+1091e+1101e+1111e+1121e+1131e+1141e+1151e+1161e+1171e+1181e+1191e+1201e+1211e+1221e+1231e+1241e+1251e+1261e+1271e+1281e+1291e+1301e+1311e+1321e+1331e+1341e+1351e+1361e+1371e+1381e+1391e+1401e+1411e+1421e+1431e+1441e+1451e+1461e+1471e+1481e+1491e+1501e+1511e+1521e+1531e+1541e+1551e+1561e+1571e+1581e+1591e+1601e+1611e+1621e+1631e+1641e+1651e+1661e+1671e+1681e+1691e+1701e+1711e+1721e+1731e+1741e+1751e+1761e+1771e+1781e+1791e+1801e+1811e+1821e+1831e+1841e+1851e+1861e+1871e+1881e+1891e+1901e+1911e+1921e+1931e+1941e+1951e+1961e+1971e+1981e+1991e+2001e+2011e+2021e+2031e+2041e+2051e+2061e+2071e+2081e+2091e+2101e+2111e+2121e+2131e+2141e+2151e+2161e+2171e+2181e+2191e+2201e+2211e+2221e+2231e+2241e+2251e+2261e+2271e+2281e+2291e+2301e+2311e+2321e+2331e+2341e+2351e+2361e+2371e+2381e+2391e+2401e+2411e+2421e+2431e+2441e+2451e+2461e+2471e+2481e+2491e+2501e+2511e+2521e+2531e+2541e+2551e+2561e+2571e+2581e+2591e+2601e+2611e+2621e+2631e+2641e+2651e+2661e+2671e+2681e+2691e+2701e+2711e+2721e+2731e+2741e+2751e+2761e+2771e+2781e+2791e+2801e+2811e+2821e+2831e+2841e+2851e+2861e+2871e+2881e+2891e+2901e+2911e+2921e+2931e+2941e+2951e+2961e+2971e+2981e+2991e+3001e+3011e+3021e+3031e+3041e+3051e+3061e+3071e+308infinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfinfi'
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local digit = 0\n  local sum = 0\n  while N > 0 do\n    digit = N %\
    \ 2\n    sum = sum + digit\n    N = N / 2\n  end\n  result = result .. tostring(sum)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0u58qisf.lua:30:\
    \ expected: \"1\"\nactual: \"12\"\nstack traceback:\n\t/tmp/tmp0u58qisf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    local i = 1\n    while i <= N do\n        local t = math.floor((N\
    \ % i) / 2)\n        s = s .. t\n        i = i + 1\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'F

    Failed tests:

    -------------

    1) test_humaneval

    /tmp/tmpc2_xbtux.lua:28: expected: "1"

    actual: "00000230005263547560655806010754457101406120817516517620100156231452415728201242720125312417103322519126383226201482383227211610545403530252015105045413632272318149505248444036322824201612840595552484541383431272420171310637168656259565350474441383532292623201714118528280777572706765626057555250474542403735323027252220171512107520989694929088868482807876747270686664626058565452504846444240383634323028262422201816141210864201231221201191171161141131111101081071051041021019998969593929089878684838180787775747271696866656362605957565453515048474544424139383635333230292726242321201817151412119865320166165164163162161160159158157156155154153152151150149148147146145144143142141140139138137136135134133132131130129128127126125124123122121120119118117116115114113112111110109108107106105104103102101100999897969594939291908988878685848382818079787776757473727170696867666564636261605958575655545352515049484746454443424140393837363534333231302928272625242322212019181716151413121110987654321024924924824824724724624624524524424424324324224224124124024023923923823823723723623623523523423423323323223223123123023022922922822822722722622622522522422422322322222222122122022021921921821821721721621621521521421421321321221221121121021020920920820820720720620620520520420420320320220220120120020019919919819819719719619619519519419419319319219219119119019018918918818818718718618618518518418418318318218218118118018017917917817817717717617617517517417417317317217217117117017016916916816816716716616616516516416416316316216216116116016015915915815815715715615615515515415415315315215215115115015014914914814814714714614614514514414414314314214214114114014013913913813813713713613613513513413413313313213213113113013012912912812812712712612612512512412412312312212212112112012011911911811811711711611611511511411411311311211211111111011010910910810810710710610610510510410410310310210210110110010099999898979796969595949493939292919190908989888887878686858'
  timestamp: 1659750553
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local t = math.floor(math.log2(N))\n     \
    \   s = s .. '1' .. math.floor((N - math.pow(2, t)) / (math.pow(2, t)))\n    \
    \    N = math.floor((N - math.pow(2, t)) / (math.pow(2, t)))\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3d9749bh.lua:17:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmp3d9749bh.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp3d9749bh.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local sum\
    \ = 0\n    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N\
    \ % i) / 2)\n        i = i + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw_llijs.lua:27:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmpvw_llijs.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  while N > 0 do\n    local n = math.floor(N / 2)\n    s = s .. '1' if n\
    \ ~= 0 else '0'\n    N = N - n\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2xl669em.lua:18: ''then'' expected near ''else''

    '
  stdout: ''
  timestamp: 1659750587
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local s =\
    \ ''\n  local n = 1\n  while n <= N do\n    local m = math.floor(math.log(n, 2))\n\
    \    s = s .. string.format('%d', math.floor(n/math.pow(2,m)))\n    n = n*2\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ffns2pd.lua:28:\
    \ expected: \"1\"\nactual: \"1222444888\"\nstack traceback:\n\t/tmp/tmp3ffns2pd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local t = math.floor(math.log2(N))\n     \
    \   s = s .. tostring(math.pow(2, t))\n        N = math.floor(N / math.pow(2,\
    \ t))\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgfy4vw0p.lua:17:\
    \ attempt to call field 'log2' (a nil value)\nstack traceback:\n\t/tmp/tmpgfy4vw0p.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpgfy4vw0p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750553
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    local n = 1\n    while n <= N do\n        s = s .. tostring(n % 2)\n\
    \        n = n / 2\n    end\n    return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750592
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local sum\
    \ = 0\n  local i = 1\n  while i <= N do\n    sum = sum + math.floor((N % i) /\
    \ 2)\n    i = i + 1\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solve\n    lu.assertEquals(candidate(1000),\
    \ '1')\n    lu.assertEquals(candidate(150), '110')\n    lu.assertEquals(candidate(147),\
    \ '1100')\n    lu.assertEquals(candidate(333), '1001')\n    lu.assertEquals(candidate(963),\
    \ '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduf962go.lua:27:\
    \ expected: \"1\"\nactual: 88289\nstack traceback:\n\t/tmp/tmpduf962go.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750553
- exit_code: -1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n    local s\
    \ = ''\n    while N > 0 do\n        local n = math.floor(N / 2)\n        s = s\
    \ .. string.format('%d', n)\n        N = N - n\n    end\n    return s\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
    \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750558
- exit_code: 1
  program: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
    -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
    -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
    -- Output:\n-- a string of binary number\nlocal function solve(N)\n  local result\
    \ = ''\n  local carry = 0\n  local digit\n  local n\n  local i\n  \n  for i =\
    \ 1, N do\n    digit = math.floor((N % 10) + 1)\n    n = math.floor(N / 10)\n\
    \    \n    if digit > 0 then\n      result = result .. digit\n    end\n    \n\
    \    if n > 0 then\n      result = result .. '1'\n    end\n    \n    if n > 1\
    \ then\n      result = result .. '0'\n    end\n    \n    N = n\n    carry = digit\
    \ + carry\n  end\n  \n  if carry > 0 then\n    result = result .. carry\n  end\n\
    \  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solve\n    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
    \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
    \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bnlfyv4.lua:51:\
    \ expected: \"1\"\nactual: \"1101101121111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111001\"\
    \nstack traceback:\n\t/tmp/tmp8bnlfyv4.lua:51: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.020 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750587
