language: lua
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps929ioc8.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmps929ioc8.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvy_cr_.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp2nvy_cr_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0riw51f5.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp0riw51f5.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v2oz6uv.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmp5v2oz6uv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function(t, i) assert(u[i]); return t[i] end})\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3brdkl6x.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp3brdkl6x.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v2oz6uv.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmp5v2oz6uv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps929ioc8.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmps929ioc8.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvy_cr_.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp2nvy_cr_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvy_cr_.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp2nvy_cr_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nvy_cr_.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp2nvy_cr_.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5v2oz6uv.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmp5v2oz6uv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiajcp04a.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpiajcp04a.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Return sorted unique elements in a list\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps929ioc8.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmps929ioc8.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750506
