language: lua
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  if #dict == 0 then\n    return false\n  end\n  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' or type(v) ~= 'string' then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptz6kqky0.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptz6kqky0.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \   if #dict == 0 then\n      return false\n   end\n   local keys = {}\n   for\
    \ k, v in pairs(dict) do\n      if type(k) ~= 'string' then\n         return false\n\
    \      end\n      if type(v) ~= 'string' then\n         return false\n      end\n\
    \      table.insert(keys, k)\n   end\n   for _, k in ipairs(keys) do\n      if\
    \ k:lower() == k:upper() then\n         return false\n      end\n   end\n   return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzple6eee.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzple6eee.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or k:lower() ~= k:upper() then\n            result = false\n      \
    \      break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz7k40ue.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbz7k40ue.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmsag349.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbmsag349.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  if #dict == 0 then return false end\n  for k, v in pairs(dict) do\n    if type(k)\
    \ ~= 'string' or type(v) ~= 'string' then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihhpuxcy.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpihhpuxcy.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvjdvi3x9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvjdvi3x9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \   if dict == nil then return false end\n   if type(dict) ~= 'table' then return\
    \ false end\n   for k, v in pairs(dict) do\n      if type(k) ~= 'string' then\
    \ return false end\n      if type(v) ~= 'string' then return false end\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93yfwl1c.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp93yfwl1c.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or k:lower() ~= k then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmporg7jdvi.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmporg7jdvi.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmsag349.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbmsag349.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \   if dict == nil then\n      return false\n   end\n   if type(dict) ~= 'table'\
    \ then\n      return false\n   end\n   for k, v in pairs(dict) do\n      if type(k)\
    \ ~= 'string' then\n         return false\n      end\n      if type(v) ~= 'string'\
    \ then\n         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r9s_0ms.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5r9s_0ms.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  if #dict == 0 then\n    return false\n  end\n  for k, v in pairs(dict) do\n\
    \    if type(k) ~= 'string' then\n      return false\n    end\n    if type(v)\
    \ ~= 'string' then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyburxjfe.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyburxjfe.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            result = false\n            break\n        end\n\
    \        if type(k) == 'string' then\n            if k:lower() ~= k then\n   \
    \             result = false\n                break\n            end\n       \
    \     if k:upper() ~= k then\n                result = false\n               \
    \ break\n            end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplykbhj3n.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplykbhj3n.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
- exit_code: 1
  program: "-- Given a dictionary, return True if all keys are strings in lower \n\
    -- case or all keys are strings in upper case, else return False.\n-- The function\
    \ should return False is the given dictionary is empty.\n-- Examples:\n-- >>>\
    \ check_dict_case({['a'] = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcoow63v7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcoow63v7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750506
