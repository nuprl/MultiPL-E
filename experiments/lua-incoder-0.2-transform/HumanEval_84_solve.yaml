name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  local i = 1\n  while i <= N do\n    sum = sum +\
    \ math.floor((N % i) / 2)\n    i = i + 1\n  end\n  return sum\nend", "    local\
    \ s = ''\n    local i = 1\n    while i <= N do\n        local t = math.floor((N\
    \ % i) / 2)\n        s = s .. tostring(t ^ 1)\n        i = i + 1\n    end\n  \
    \  return s\nend", "  local result = ''\n  local carry = 0\n  local digit\n  for\
    \ i = 1, N do\n    digit = math.floor((N - i) / 2)\n    carry = digit * 2 + carry\n\
    \    result = string.format('%s%d%s', result, carry, carry > 0 and '1' or '')\n\
    \  end\n  return result\nend", "    local s = ''\n    while N > 0 do\n       \
    \ local n = math.floor(N / 2)\n        s = string.format('%s%d%s', s, n + 1, string.format('%d',\
    \ n % 2))\n        N = N - n\n    end\n    return s\nend", "    local sum = 0\n\
    \    local i = 1\n    while i <= N do\n        sum = sum + math.floor((N % i)\
    \ / 2)\n        i = i + 1\n    end\n    return sum\nend", "  -- Base case\n  if\
    \ N == 0 then\n    return \"0\"\n  end", "    local s = ''\n    while N > 0 do\n\
    \        local t = math.floor(math.log2(N))\n        s = s .. '1' .. math.floor((N\
    \ / 2 ** t) * 2)\n        N = N % 2 ** t\n    end\n    return s\nend", "  local\
    \ sum = 0\n  local i = 0\n  while i < N do\n    sum = sum + math.floor((N % 10)\
    \ * math.pow(2, i))\n    i = i + 1\n  end\n  return sum\nend", "  local s = ''\n\
    \  local i = 0\n  while i < N do\n    local n = math.floor(math.pow(10, i) * N)\n\
    \    s = s .. tostring(n)\n    i = i + 1\n  end\n  return s\nend", "  local result\
    \ = ''\n  local digit = 0\n  local sum = 0\n  while N > 0 do\n    digit = N %\
    \ 2\n    sum = sum + digit\n    N = N / 2\n  end\n  result = result .. tostring(sum)\n\
    \  return result\nend", "    local s = ''\n    local i = 1\n    while i <= N do\n\
    \        local t = math.floor((N % i) / 2)\n        s = s .. t\n        i = i\
    \ + 1\n    end\n    return s\nend", "    local s = ''\n    while N > 0 do\n  \
    \      local t = math.floor(math.log2(N))\n        s = s .. '1' .. math.floor((N\
    \ - math.pow(2, t)) / (math.pow(2, t)))\n        N = math.floor((N - math.pow(2,\
    \ t)) / (math.pow(2, t)))\n    end\n    return s\nend", "    local sum = 0\n \
    \   local i = 1\n    while i <= N do\n        sum = sum + math.floor((N % i) /\
    \ 2)\n        i = i + 1\n    end\n    return sum\nend", "  local s = ''\n  while\
    \ N > 0 do\n    local n = math.floor(N / 2)\n    s = s .. '1' if n ~= 0 else '0'\n\
    \    N = N - n\n  end\n  return s\nend", "  local s = ''\n  local n = 1\n  while\
    \ n <= N do\n    local m = math.floor(math.log(n, 2))\n    s = s .. string.format('%d',\
    \ math.floor(n/math.pow(2,m)))\n    n = n*2\n  end\n  return s\nend", "    local\
    \ s = ''\n    while N > 0 do\n        local t = math.floor(math.log2(N))\n   \
    \     s = s .. tostring(math.pow(2, t))\n        N = math.floor(N / math.pow(2,\
    \ t))\n    end\n    return s\nend", "    local s = ''\n    local n = 1\n    while\
    \ n <= N do\n        s = s .. tostring(n % 2)\n        n = n / 2\n    end\n  \
    \  return s\nend", "  local sum = 0\n  local i = 1\n  while i <= N do\n    sum\
    \ = sum + math.floor((N % i) / 2)\n    i = i + 1\n  end\n  return sum\nend", " \
    \   local s = ''\n    while N > 0 do\n        local n = math.floor(N / 2)\n  \
    \      s = s .. string.format('%d', n)\n        N = N - n\n    end\n    return\
    \ s\nend", "  local result = ''\n  local carry = 0\n  local digit\n  local n\n\
    \  local i\n  \n  for i = 1, N do\n    digit = math.floor((N % 10) + 1)\n    n\
    \ = math.floor(N / 10)\n    \n    if digit > 0 then\n      result = result ..\
    \ digit\n    end\n    \n    if n > 0 then\n      result = result .. '1'\n    end\n\
    \    \n    if n > 1 then\n      result = result .. '0'\n    end\n    \n    N =\
    \ n\n    carry = digit + carry\n  end\n  \n  if carry > 0 then\n    result = result\
    \ .. carry\n  end\n  \n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
