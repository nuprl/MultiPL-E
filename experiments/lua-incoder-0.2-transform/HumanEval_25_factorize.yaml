name: HumanEval_25_factorize
language: lua
prompt: "-- Return list of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be listed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
  -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local factors = {}\n  local factor = 1\n  while n > 1 do\n    factor\
    \ = factor * n\n    factors[#factors + 1] = factor\n    n = n / factor\n  end\n\
    \  return factors\nend", "  -- Initialize result with factors of given number\n\
    \  local factors = {}\n  -- Initialize counter to 1\n  local counter = 1\n  --\
    \ Initialize prime flag to true\n  local prime = true\n  -- Initialize current\
    \ number to n\n  local current = n\n  -- While current number is not 1\n  while\
    \ current ~= 1 do\n    -- If current number is prime\n    if prime then\n    \
    \  -- Add current number to factors\n      factors[#factors + 1] = current\n \
    \     -- Increment counter\n      counter = counter + 1\n    -- If current number\
    \ is not prime\n    else\n      -- If current number is not divisible by any prime\
    \ factor\n      if current % prime = 0 then\n        -- Add current number to\
    \ factors\n        factors[#factors + 1] = current\n        -- Increment counter\n\
    \        counter = counter + 1\n      -- If current number is divisible by some\
    \ prime factor\n      else\n        -- Set prime flag to false\n        prime\
    \ = false\n      end\n    end\n    -- Decrement current number\n    current =\
    \ current / 2\n  end\n  -- Return factors\n  return factors\nend", "  -- Base\
    \ case\n  if n < 2 then return {} end", "  local factors = {}\n  local i = 1\n\
    \  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      local p = i\n   \
    \   while n ~= 1 do\n        local q = n / p\n        if q == p then\n       \
    \   factors[#factors+1] = p\n          break\n        else\n          p = q\n\
    \        end\n      end\n      n = n//i\n    end\n    i = i + 1\n  end\n  return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n            n = n / i\n \
    \       end\n    end\n    if n ~= 1 then\n        table.insert(factors, n)\n \
    \   end\n    return factors\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        local factor = 1\n        for j = 1, i do\n            if n % i == 0\
    \ then\n                factor = factor * j\n            end\n        end\n  \
    \      if factor ~= 1 then\n            table.insert(factors, factor)\n      \
    \  end\n    end\n    return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end\n  -- Recursive case\n  local factors = {}\n  for i = 2,\
    \ n do\n    local f = factorize(i)\n    for _, v in ipairs(f) do\n      table.insert(factors,\
    \ v)\n    end\n  end\n  return factors\nend", "  -- Base case\n  if n < 2 then\
    \ return {n} end", "  -- Base case\n  if n < 2 then return {n} end", "  local\
    \ factors = {}\n  local i = 1\n  while i <= n do\n    if n % i == 0 then\n   \
    \   factors[#factors+1] = i\n      n = n / i\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        local p = math.floor(n/i)\n        if p == 1 then\n       \
    \     factors[i] = 1\n        else\n            local factor = 1\n           \
    \ for j = 1, p do\n                factor = factor * i\n            end\n    \
    \        factors[i] = factor\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local i = 1\n    while i <= n do\n\
    \        local p = math.floor(n/i)\n        if p*i > n then\n            i = p\n\
    \        else\n            factors[#factors+1] = p\n            n = n/i\n    \
    \    end\n        i = i + 1\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n\
    \      factors[#factors+1] = i\n      n = n / i\n    end\n    i = i + 1\n  end\n\
    \  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n  return factors\nend",
  "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i\
    \ == 0 then\n      factors[#factors + 1] = i\n      n = n / i\n    end\n    i\
    \ = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors + 1] = n\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", " \
    \ -- Base case\n  if n < 2 then return {n} end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    local p = math.floor(n/i)\n    if p == 1 then factors[#factors+1]\
    \ = i end\n    factors[#factors+1] = p\n  end\n  return factors\nend", "  -- Initialize\
    \ result with first prime factor\n  local factors = {}\n  local p = primeFactors(n)\n\
    \  -- Add first prime factor to result\n  factors[#factors+1] = p[1]\n  -- Iterate\
    \ over remaining primes\n  for i = 2, #p do\n    -- If current prime is greater\
    \ than current factor then add current prime to factors\n    if p[i] > factors[#factors]\
    \ then\n      factors[#factors+1] = p[i]\n    end\n  end\n  return factors\nend",
  "  -- Initialize result with factors of n\n  local factors = {}\n  -- Initialize\
    \ counter for number of times each factor appears\n  local count = {}\n  -- Initialize\
    \ list of prime factors\n  local primes = {}\n  -- Initialize list of prime factors\n\
    \  local primes2 = {}\n  -- Initialize list of prime factors\n  local primes3\
    \ = {}\n  -- Initialize list of prime factors\n  local primes4 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes5 = {}\n  -- Initialize list of prime factors\n\
    \  local primes6 = {}\n  -- Initialize list of prime factors\n  local primes7\
    \ = {}\n  -- Initialize list of prime factors\n  local primes8 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes9 = {}\n  -- Initialize list of prime factors\n\
    \  local primes10 = {}\n  -- Initialize list of prime factors\n  local primes11\
    \ = {}\n  -- Initialize list of prime factors\n  local primes12 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes13 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes14 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes15 = {}\n  -- Initialize list of prime factors\n  local primes16 = {}\n\
    \  -- Initialize list of prime factors\n  local primes17 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes18 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes19 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes20 = {}\n  -- Initialize list of prime factors\n  local primes21 = {}\n\
    \  -- Initialize list of prime factors\n  local primes22 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes23 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes24 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes25 = {}\n  -- Initialize list of prime factors\n  local primes26 = {}\n\
    \  -- Initialize list of prime factors\n  local primes27 = {}\n  -- Initialize\
    \ list of prime factors\n  local primes28 = {}\n  -- Initialize list of prime\
    \ factors\n  local primes29 = {}\n  -- Initialize list of prime factors\n  local\
    \ primes30 = {}\n  -- Initialize list of prime factors\n  local primes31 = {}\n\
    \  -- Initialize list of prime factors\n  local primes32 = {}\n  -- Initialize\
    \ list of ", "    local factors = {}\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            table.insert(factors, i)\n            n = n / i\n      \
    \  end\n    end\n    if n ~= 1 then\n        table.insert(factors, n)\n    end\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    while n % i == 0 do\n      n = n / i\n      factor\
    \ = factor * i\n      i = i + 1\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n          \
    \  factors[#factors + 1] = factor\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    if n > 1 then\n  \
    \      factors[#factors + 1] = n\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factors[#factors+1] = i\n            n = n / i\n        else\n  \
    \          i = i + 1\n        end\n    end\n    return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while n > 1 do\n    while n % factor ==\
    \ 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n    end\n\
    \    factor = factor + 1\n  end\n  if n ~= 1 then\n    factors[#factors + 1] =\
    \ n\n  end\n  return factors\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if factor\
    \ > n then\n      break\n    end\n    i = i + 1\n    factors[#factors + 1] = factor\n\
    \  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= math.sqrt(n) do\n    local p = math.floor(n/i)\n    if p*i > n then\n \
    \     break\n    end\n    factors[p] = factors[p] or 1\n    factors[p] = factors[p]\
    \ + 1\n    i = i + 1\n  end\n  return factors\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n   \
    \     if p == 1 then\n            factors[i] = 1\n        else\n            factors[i]\
    \ = p\n        end\n        n = i\n        i = i + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      factors[#factors+1] = i\n      n = n / i\n    end\n\
    \    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  while n\
    \ > 1 do\n    factor = factor * n\n    factors[factor] = factors[factor] + 1 or\
    \ 1\n    n = n / factor\n  end\n  return factors\nend", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  factors[#factors+1] = i\n            n = n / i\n        else\n            i\
    \ = i + 1\n        end\n    end\n    return factors\nend", "  local factors =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or 1\n    factors[p]\
    \ = factors[p] + 1\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n < 2 then\n    return {}\n  end", "    local factors = {}\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "    local factors = {}\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i <= n do\n    local p = math.floor(n/i)\n    if p*i > n then\n     \
    \ break\n    end\n    factors[p] = factors[p] or 1\n    factors[p] = factors[p]\
    \ + 1\n    i = i + 1\n  end\n  return factors\nend", "  local factors = {}\n \
    \ local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n\
    \    if factor > n then\n      break\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while n ~= 1 do\n    while n % factor == 0 do\n      factors[#factors\
    \ + 1] = factor\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        factor = factor * i\n        if factor >\
    \ n then\n            break\n        end\n        factors[#factors + 1] = factor\n\
    \        i = i + 1\n    end\n    return factors\nend", "  -- Base case\n  if n\
    \ == 1 then\n    return {}\n  end\n  -- Recursive case\n  local factors = {}\n\
    \  for i = 2, n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n    else\n      factors[i] = p\n    end\n  end\n  return factors\nend",
  "  -- Initialize factorization table\n  local factors = {}\n  -- Initialize prime\
    \ factorization table\n  local primes = {}\n  -- Initialize prime factorization\
    \ table with first n primes\n  for i = 2, n do\n    primes[i] = i\n  end\n  --\
    \ Initialize prime factorization table with first n primes\n  for i = 2, n do\n\
    \    -- Initialize factorization table with first i primes\n    for j = 2, i do\n\
    \      factors[j] = i\n    end\n    -- Initialize prime factorization table with\
    \ first i primes\n    for j = 2, i do\n      -- Initialize prime factorization\
    \ table with first i primes\n      for k = 2, i do\n        -- Initialize prime\
    \ factorization table with first i primes\n        for l = 2, i do\n         \
    \ -- Initialize prime factorization table with first i primes\n          for m\
    \ = 2, i do\n            -- Initialize prime factorization table with first i\
    \ primes\n            for n = 2, i do\n              -- Initialize prime factorization\
    \ table with first i primes\n              for o = 2, i do\n                --\
    \ Initialize prime factorization table with first i primes\n                for\
    \ p = 2, i do\n                  -- Initialize prime factorization table with\
    \ first i primes\n                  for q = 2, i do\n                    -- Initialize\
    \ prime factorization table with first i primes\n                    for r = 2,\
    \ i do\n                      -- Initialize prime factorization table with first\
    \ i primes\n                      for s = 2, i do\n                        --\
    \ Initialize prime factorization table with first i primes\n                 \
    \       for t = 2, i do\n                          -- Initialize prime factorization\
    \ table with first i primes\n                          for u = 2, i do\n     \
    \                       -- Initialize prime factorization table with first i primes\n\
    \                            for v = 2, i do\n                              --\
    \ Initialize prime factorization table with first i primes\n                 \
    \             for w = 2, i do\n                                -- Initialize prime\
    \ factorization table with first i primes\n                                for\
    \ x = 2, i do\n                                  -- Initialize prime factorization\
    \ table with first i primes\n                                  for y = 2, i do\n\
    \                                    -- Initialize prime factorization table with\
    \ first i primes\n                                    for z = 2, i do\n      \
    \                                -- Initialize prime factorization table with\
    \ first i primes\n                                      for a = 2, i do\n    \
    \                                    -- Initialize prime factorization table with\
    \ first i primes\n                                        for b = 2, i do\n  \
    \                                        -- Initialize prime factorization table\
    \ with first i primes\n                                          for c = 2, i\
    \ do\n                                            -- Initialize prime factorization\
    \ table with first i primes\n                                            for d\
    \ = 2, i do\n                                              -- Initialize prime\
    \ factorization ", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      factors[#factors+1] = i\n      n = n / i\n\
    \    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n\
    \  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p*i > n then\n      break\n\
    \    end\n    factors[p] = factors[p] or {}\n    factors[p][#factors[p]+1] = p\n\
    \    i = p + 1\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ primes = {}\n  local prime_factors = {}\n  local prime_factors_count = 0\n \
    \ local i = 1\n  while i <= n do\n    local prime = true\n    for _, p in pairs(primes)\
    \ do\n      if n % p == 0 then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      primes[i] = n\n      prime_factors[i] = 1\n\
    \      prime_factors_count = prime_factors_count + 1\n    else\n      local factor\
    \ = 1\n      for _, p in pairs(primes) do\n        if n % p == 0 then\n      \
    \    factor = factor * p\n        end\n      end\n      prime_factors[i] = factor\n\
    \      prime_factors_count = prime_factors_count + 1\n      factors[i] = factor\n\
    \    end\n    i = i + 1\n  end\n  local factors_count = prime_factors_count\n\
    \  for i = 1, n do\n    factors[prime_factors[i]] = factors[prime_factors[i]]\
    \ * primes[i]\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    while n > 1 do\n        while n % factor == 0 do\n         \
    \   factors[#factors + 1] = factor\n            n = n / factor\n        end\n\
    \        factor = factor + 1\n    end\n    factors[#factors + 1] = n\n    return\
    \ factors\nend", "  local factors = {}\n  local factor = 1\n  while n > 1 do\n\
    \    factor = factor * n % factor\n    factors[#factors + 1] = factor\n    n =\
    \ n / factor\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end", "  local factors = {}\n  local primes = {}\n  local i\
    \ = 1\n  while i <= n do\n    local p = primes[i]\n    if p == nil then\n    \
    \  primes[i] = 1\n      factors[i] = 1\n      i = i + 1\n      while i <= n do\n\
    \        local q = n % i\n        if q == 0 then\n          primes[i] = nil\n\
    \          factors[i] = factors[i] + 1\n          i = i + 1\n        else\n  \
    \        primes[i] = p\n          factors[i] = factors[i] + 1\n          n = n\
    \ / i\n        end\n      end\n    else\n      primes[i] = p\n      factors[i]\
    \ = factors[i] + 1\n      i = i + 1\n    end\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local factor = 1\n    while factor <= n do\n     \
    \   if n % factor == 0 then\n            table.insert(factors, factor)\n     \
    \       n = n / factor\n        else\n            factor = factor + 1\n      \
    \  end\n    end\n    return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    while factor <= n do\n        if n % factor == 0 then\n    \
    \        table.insert(factors, factor)\n            n = n / factor\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    return factors\nend",
  "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "    local factors =\
    \ {}\n    local factor = 1\n    while n ~= 1 do\n        factor = factor * n %\
    \ factor\n        factors[#factors + 1] = factor\n        n = n / factor\n   \
    \ end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n \
    \ while factor <= n do\n    local i = 1\n    while i * factor <= n do\n      if\
    \ n % i == 0 then\n        factor = factor + 1\n      else\n        i = i + 1\n\
    \      end\n    end\n    table.insert(factors, factor)\n    n = n / factor\n \
    \   factor = 1\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if\
    \ factor > n then\n      break\n    end\n    i = i + 1\n  end\n  i = 2\n  while\
    \ i <= n do\n    if n % i == 0 then\n      factors[i] = factor\n      n = n /\
    \ i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local factor = 1\n    local i = 1\n    while factor\
    \ <= n do\n        if n % factor == 0 then\n            factors[#factors + 1]\
    \ = factor\n            n = n / factor\n            i = i + 1\n        else\n\
    \            factor = factor + 1\n        end\n    end\n    if n > 1 then\n  \
    \      factors[#factors + 1] = n\n    end\n    return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {n}\n  end", "    local factors = {}\n  \
    \  for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while n > 1 do\n        factor = factor * n\n\
    \        if factor > n then\n            factors[#factors + 1] = factor\n    \
    \        factor = 1\n        end\n        n = n / factor\n    end\n    if factor\
    \ > 1 then\n        factors[#factors + 1] = factor\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] + 1 or 1\n    factor = factor * 2\n  end\n  -- Sort factors\
    \ in descending order\n  table.sort(factors, function(a, b) return b - a end)\n\
    \  return factors\nend", "  -- Base case\n  if n == 1 then\n    return {}\n  end",
  "    local factors = {}\n    local i = 1\n    while i * i <= n do\n        if n\
    \ % i == 0 then\n            i = i + 1\n            factors[#factors + 1] = i\n\
    \        end\n    end\n    return factors\nend", "  local factors = {}\n  local\
    \ primes = {}\n  local factorization = {}\n  local i = 1\n  while i <= n do\n\
    \    local p = primes[i]\n    local f = factors[i]\n    if f == nil then\n   \
    \   factors[i] = 1\n    else\n      factors[i] = factors[i] + f\n    end\n   \
    \ i = i + 1\n  end\n  for i = 2, n do\n    local p = primes[i]\n    local f =\
    \ factors[i]\n    if f == nil then\n      factors[i] = 1\n    else\n      factors[i]\
    \ = factors[i] * p\n    end\n  end\n  for i = 1, n do\n    local f = factors[i]\n\
    \    if f ~= nil then\n      factorization[#factorization + 1] = f\n    end\n\
    \  end\n  return factorization\nend", "  local factors = {}\n  local primes =\
    \ {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    local p = primes[i]\n \
    \   if p == nil then\n      primes[i] = 1\n      factors[i] = 1\n      i = i +\
    \ 1\n    else\n      primes[i] = primes[i] + 1\n      factors[i] = factors[i]\
    \ + 1\n    end\n  end\n  local p = primes[i]\n  while p ~= nil do\n    factors[p]\
    \ = factors[p] + 1\n    p = primes[p]\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {}\n  end", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor] or\
    \ 1\n    factor = factor + 1\n  end\n  local primes = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for _, v in pairs(factors) do\n      if n % i ==\
    \ 0 then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ then\n      primes[#primes + 1] = i\n    end\n  end\n  return primes\nend",
  "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n     \
    \       table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n > 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while n ~= 1\
    \ do\n    while n ~= factor do\n      n = n / factor\n      table.insert(factors,\
    \ factor)\n    end\n    factor = factor + 1\n    i = i + 1\n  end\n  return factors\n\
    end", "  -- Base case\n  if n < 2 then return {n} end", "    local factors = {}\n\
    \    local i = 1\n    while i * i <= n do\n        if n % i == 0 then\n      \
    \      factors[#factors+1] = i\n            n = n / i\n        else\n        \
    \    i = i + 1\n        end\n    end\n    if n ~= 1 then\n        factors[#factors+1]\
    \ = n\n    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while n > 1 do\n        while n % factor == 0 do\n            n = n\
    \ / factor\n            table.insert(factors, factor)\n        end\n        factor\
    \ = factor + 1\n    end\n    return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= math.sqrt(n) do\n    local p = math.floor(n/i)\n    if p\
    \ == 1 then\n      factors[#factors+1] = i\n      n = math.floor(n/i)\n    else\n\
    \      local factor = 1\n      for j = 1, p do\n        factor = factor * i\n\
    \      end\n      factors[#factors+1] = factor\n      n = p\n    end\n    i =\
    \ i + 1\n  end\n  return factors\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        local p = math.floor(n/i)\n        if p == 1 then\n          \
    \  factors[i] = 1\n        else\n            factors[i] = factors[p] + 1\n   \
    \     end\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if factor\
    \ > n then\n      break\n    end\n    i = i + 1\n    factors[#factors + 1] = factor\n\
    \  end\n  return factors\nend", "    local factors = {}\n    local i = 1\n   \
    \ while i <= n do\n        local p = math.floor(n/i)\n        if p == 1 then\n\
    \            factors[i] = 1\n        else\n            factors[i] = p\n      \
    \  end\n        n = i\n        i = i + 1\n    end\n    return factors\nend", " \
    \ -- Base case\n  if n < 2 then return {n} end", "  local factors = {}\n  local\
    \ i = 1\n  while i * i <= n do\n    local p = i * i\n    while p <= n do\n   \
    \   if n % p == 0 then\n        factors[#factors + 1] = p / i\n        n = n /\
    \ p\n      else\n        p = p * i\n      end\n    end\n    i = i + 1\n  end\n\
    \  if n ~= 1 then\n    factors[#factors + 1] = n\n  end\n  return factors\nend",
  "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    local i =\
    \ 1\n    while i * factor <= n do\n      if n % i == 0 then\n        factor =\
    \ factor * i\n      else\n        i = i + 1\n      end\n    end\n    table.insert(factors,\
    \ factor)\n    factor = factor + 1\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {n}\n  end\n  -- Recursive case\n  local\
    \ factors = {}\n  for i = 2, n do\n    local p = n / i\n    if p > 1 then\n  \
    \    table.insert(factors, p)\n    end\n  end\n  return factors\nend", "    local\
    \ factors = {}\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n\
    \            factors[i] = factors[i] or 1\n            factors[i] = factors[i]\
    \ + 1\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= math.sqrt(n) do\n    if n % i == 0 then\n      table.insert(factors, i)\n\
    \      n = n / i\n      i = i + 1\n    end\n  end\n  if n ~= 1 then\n    table.insert(factors,\
    \ n)\n  end\n  return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    local i = 1\n    while factor ~= n do\n        while n % factor ==\
    \ 0 do\n            n = n / factor\n            table.insert(factors, factor)\n\
    \        end\n        factor = factor + 1\n    end\n    table.insert(factors,\
    \ n)\n    return factors\nend", "  local factors = {}\n  local factor = 1\n  while\
    \ factor <= n do\n    local i = 1\n    while i * factor <= n do\n      if n %\
    \ i == 0 then\n        factor = factor * i\n      else\n        i = i + 1\n  \
    \    end\n    end\n    table.insert(factors, factor)\n    factor = factor + 1\n\
    \  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= math.sqrt(n) do\n    local p = math.floor(n/i)\n    if p ~= i then\n  \
    \    factors[#factors+1] = p\n      n = math.floor(n/p)\n    end\n    i = i +\
    \ 1\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n  return factors\n\
    end", "  -- If n is prime then return its factors\n  if n <= 1 then return { 1\
    \ } end", "  -- Base case\n  if n < 2 then return {n} end\n  -- If n is prime\
    \ then return its factors\n  if primes[n] then return {n} end\n  -- If n is divisible\
    \ by 2 then return its factors\n  if n % 2 == 0 then return {2} end\n  -- If n\
    \ is divisible by 3 then return its factors\n  if n % 3 == 0 then return {3} end\n\
    \  -- If n is divisible by 5 then return its factors\n  if n % 5 == 0 then return\
    \ {5} end\n  -- If n is divisible by 7 then return its factors\n  if n % 7 ==\
    \ 0 then return {7} end\n  -- If n is divisible by 11 then return its factors\n\
    \  if n % 11 == 0 then return {11} end\n  -- If n is divisible by 13 then return\
    \ its factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible by\
    \ 17 then return its factors\n  if n % 17 == 0 then return {17} end\n  -- If n\
    \ is divisible by 19 then return its factors\n  if n % 19 == 0 then return {19}\
    \ end\n  -- If n is divisible by 23 then return its factors\n  if n % 23 == 0\
    \ then return {23} end\n  -- If n is divisible by 29 then return its factors\n\
    \  if n % 29 == 0 then return {29} end\n  -- If n is divisible by 31 then return\
    \ its factors\n  if n % 31 == 0 then return {31} end\n  -- If n is divisible by\
    \ 37 then return its factors\n  if n % 37 == 0 then return {37} end\n  -- If n\
    \ is divisible by 41 then return its factors\n  if n % 41 == 0 then return {41}\
    \ end\n  -- If n is divisible by 43 then return its factors\n  if n % 43 == 0\
    \ then return {43} end\n  -- If n is divisible by 47 then return its factors\n\
    \  if n % 47 == 0 then return {47} end\n  -- If n is divisible by 53 then return\
    \ its factors\n  if n % 53 == 0 then return {53} end\n  -- If n is divisible by\
    \ 59 then return its factors\n  if n % 59 == 0 then return {59} end\n  -- If n\
    \ is divisible by 61 then return its factors\n  if n % 61 == 0 then return {61}\
    \ end\n  -- If n is ", "  local factors = {}\n  local factor = 1\n  local i =\
    \ 1\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n  \
    \    i = i + 1\n      factors[#factors + 1] = factor\n    end\n  end\n  return\
    \ factors\nend", "  local factors = {}\n  local factor = 1\n  while n > 1 do\n\
    \    while n % factor == 0 do\n      factors[#factors + 1] = factor\n      n =\
    \ n / factor\n    end\n    factor = factor + 1\n  end\n  if n > 1 then\n    factors[#factors\
    \ + 1] = n\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {}\n  end", "  local factors = {}\n  local factor = 1\n  while n ~=\
    \ 1 do\n    while n % factor == 0 do\n      factors[#factors + 1] = factor\n \
    \     n = n / factor\n    end\n    factor = factor + 1\n  end\n  return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n   \
    \ if n % i == 0 then\n      factors[#factors+1] = i\n      n = n / i\n    end\n\
    \    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1] = n\n  end\n\
    \  return factors\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  local factor = 1\n        for j = 2, i do\n            if n % j == 0 then\n\
    \                factor = factor * j\n            end\n        end\n        if\
    \ factor ~= 1 then\n            table.insert(factors, factor)\n        end\n \
    \   end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n\
    \  while n ~= 1 do\n    while n ~= factor do\n      n = n / factor\n      table.insert(factors,\
    \ factor)\n    end\n    factor = factor + 1\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p == 1 then\n            factors[#factors+1] =\
    \ i\n        else\n            local q = math.floor(n/p)\n            if q ==\
    \ 1 then\n                factors[#factors+1] = p\n            else\n        \
    \        factors[#factors+1] = q\n                factors[#factors+1] = i\n  \
    \          end\n        end\n        i = i + 1\n    end\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    local i = 1\n    while\
    \ n ~= 1 do\n        while n % factor == 0 do\n            n = n / factor\n  \
    \          table.insert(factors, factor)\n        end\n        factor = factor\
    \ + 1\n    end\n    table.sort(factors)\n    for i = 1, #factors do\n        table.insert(factors,\
    \ i)\n    end\n    return factors\nend", "    local factors = {}\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "    local factors = {}\n    local i\
    \ = 1\n    while i <= n do\n        local p = math.floor(n/i)\n        if p*i\
    \ > n then\n            i = p\n        else\n            n = n - p*i\n       \
    \     table.insert(factors, i)\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    local factor = 1\n    local i =\
    \ 1\n    while i <= n do\n        if n % i == 0 then\n            factor = factor\
    \ * i\n            i = i + 1\n        else\n            i = i + 1\n        end\n\
    \    end\n    factors[#factors + 1] = factor\n    return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while factor <= n do\n    local i = 1\n\
    \    while i * factor <= n do\n      if n % i == 0 then\n        factor = factor\
    \ * i\n        break\n      end\n      i = i + 1\n    end\n    if factor > n then\n\
    \      break\n    end\n    table.insert(factors, factor)\n    factor = factor\
    \ + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n    return\
    \ {n}\n  end", "    local factors = {}\n    local i = 1\n    while i * i <= n\
    \ do\n        if n % i == 0 then\n            i = i + 1\n            factors[i]\
    \ = n\n        end\n        n = n / i\n    end\n    return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor\
    \ = factor * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n\
    \    factors[#factors + 1] = factor\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {}\n  end", "  -- Initialize factorization\
    \ table\n  local factors = {}\n  -- Initialize prime factorization table\n  local\
    \ primes = {}\n  -- Initialize prime factorization table for numbers less than\
    \ n\n  local primes_less_n = {}\n  -- Initialize prime factorization table for\
    \ numbers less than n and greater than 1\n  local primes_less_n_and_more = {}\n\
    \  -- Initialize prime factorization table for numbers less than n and greater\
    \ than 2\n  local primes_less_n_and_more_2 = {}\n  -- Initialize prime factorization\
    \ table for numbers less than n and greater than 3\n  local primes_less_n_and_more_3\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 4\n  local primes_less_n_and_more_4 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 5\n  local primes_less_n_and_more_5\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 6\n  local primes_less_n_and_more_6 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 7\n  local primes_less_n_and_more_7\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 8\n  local primes_less_n_and_more_8 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 9\n  local primes_less_n_and_more_9\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 10\n  local primes_less_n_and_more_10 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 11\n  local primes_less_n_and_more_11\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 12\n  local primes_less_n_and_more_12 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 13\n  local primes_less_n_and_more_13\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 14\n  local primes_less_n_and_more_14 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 15\n  local primes_less_n_and_more_15\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 16\n  local primes_less_n_and_more_16 = {}\n  -- Initialize prime\
    \ factorization table for numbers less than n and greater than 17\n  local primes_less_n_and_more_17\
    \ = {}\n  -- Initialize prime factorization table for numbers less than n and\
    \ greater than 18\n  local primes_less_n_and_more_18 = {}\n", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n ~= 1 do\n    factor = factor * n\n    factors[#factors\
    \ + 1] = factor\n    n = n / factor\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    i = i + 1\n    if factor > n then\n      break\n    end\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    if n % factor == 0 then\n      table.insert(factors,\
    \ factor)\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n < 2 then\n    return {}\n  end", "  \
    \  local factors = {}\n    local i = 1\n    while i <= n do\n        local p =\
    \ math.floor(n/i)\n        if p == i then\n            factors[i] = 1\n      \
    \  else\n            factors[i] = factors[p]+1\n        end\n        i = i+1\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while factor <= n do\n        if n % factor == 0 then\n           \
    \ factors[#factors+1] = factor\n            n = n / factor\n        else\n   \
    \         factor = factor + 1\n        end\n    end\n    return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n   \
    \ if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n  \
    \  i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n    \
    \  factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n  \
    \    i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n  \
    \  if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n \
    \   i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n   \
    \   factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n  \
    \    i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n  \
    \  if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n \
    \   i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n   \
    \   factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n  \
    \    i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n  \
    \  if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n \
    \   i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n   \
    \   factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i =\
    \ 2\n  while i <= n do\n    if n % i == 0 then\n      factor = factor * i\n  \
    \    i = i + 1\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <= n do\n  \
    \  if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n    end\n \
    \   i = i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n   \
    \   factor = factor * i\n      i = i + 1\n    end\n    i = i + 1\n  end\n  i =\
    \ 2", "  local factors = {}\n  local i = 1\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      factors[i] = 1\n      n = n / i\n    else\n      i = i + 1\n \
    \   end\n  end\n  if n ~= 1 then\n    factors[n] = 1\n  end\n  return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    factor\
    \ = factor * n\n    factors[#factors + 1] = factor\n    n = n / factor\n  end\n\
    \  return factors\nend", "  -- If n is prime then return its prime factors\n \
    \ if n==2 then\n    return {2}\n  end\n  -- If n is divisible by 2 then return\
    \ its prime factors\n  if n%2==0 then\n    return {2}\n  end\n  -- If n is divisible\
    \ by 3 then return its prime factors\n  if n%3==0 then\n    return {3}\n  end\n\
    \  -- If n is divisible by 5 then return its prime factors\n  if n%5==0 then\n\
    \    return {5}\n  end\n  -- If n is divisible by 7 then return its prime factors\n\
    \  if n%7==0 then\n    return {7}\n  end\n  -- If n is divisible by 11 then return\
    \ its prime factors\n  if n%11==0 then\n    return {11}\n  end\n  -- If n is divisible\
    \ by 13 then return its prime factors\n  if n%13==0 then\n    return {13}\n  end\n\
    \  -- If n is divisible by 17 then return its prime factors\n  if n%17==0 then\n\
    \    return {17}\n  end\n  -- If n is divisible by 19 then return its prime factors\n\
    \  if n%19==0 then\n    return {19}\n  end\n  -- If n is divisible by 23 then\
    \ return its prime factors\n  if n%23==0 then\n    return {23}\n  end\n  -- If\
    \ n is divisible by 29 then return its prime factors\n  if n%29==0 then\n    return\
    \ {29}\n  end\n  -- If n is divisible by 31 then return its prime factors\n  if\
    \ n%31==0 then\n    return {31}\n  end\n  -- If n is divisible by 37 then return\
    \ its prime factors\n  if n%37==0 then\n    return {37}\n  end\n  -- If n is divisible\
    \ by 41 then return its prime factors\n  if n%41==0 then\n    return {41}\n  end\n\
    \  -- If n is divisible by 43 then return its prime factors\n  if n%43==0 then\n\
    \    return {43}\n  end\n  -- If n is divisible by 47 then return its prime factors\n\
    \  if n%47==0 then\n    return {47}\n  end\n  -- If n is divisible by 53 then\
    \ return its prime factors\n  if n%53==0 then\n    return {53}\n  end\n  -- If\
    \ n is divisible ", "  local factors = {}\n  local factor = 1\n  while n ~= 1\
    \ do\n    while n ~= factor do\n      factors[#factors + 1] = factor\n      factor\
    \ = factor * 2\n    end\n    factor = factor / 2\n    n = n / factor\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n \
    \ end", "    local factors = {}\n    local i = 1\n    while i <= n do\n      \
    \  if n % i == 0 then\n            factors[#factors+1] = i\n            n = n\
    \ / i\n        else\n            i = i + 1\n        end\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    factor\
    \ = factor * n\n    factors[#factors + 1] = factor\n    n = n / factor\n  end\n\
    \  return factors\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  if n % i == 0 then\n            table.insert(factors, i)\n            n = n\
    \ / i\n        end\n    end\n    if n > 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n ~= 1 do\n    while n ~= factor do\n      factors[#factors + 1]\
    \ = factor\n      factor = factor * 2\n    end\n    factor = factor / 2\n    n\
    \ = n / factor\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {1}\n  end", "  -- Base case\n  if n == 1 then\n    return {}\n  end",
  "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    local i =\
    \ 2\n    while i <= n do\n      if n % factor == 0 then\n        table.insert(factors,\
    \ factor)\n        n = n / factor\n      else\n        i = i + 1\n      end\n\
    \    end\n    factor = factor + 1\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while n > 1 do\n    factor = factor * n % factor\n\
    \    factors[factor] = factors[factor] + 1 or 1\n    n = n / factor\n  end\n \
    \ return factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n\
    \    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i] = 1\n   \
    \   n = math.floor(n/i)\n    else\n      factors[i] = p\n      n = math.floor(n/p)\n\
    \    end\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return {n}\n  end", "  local factors = {}\n  local factor =\
    \ 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    if factor\
    \ > n then\n      break\n    end\n    i = i + 1\n  end\n  i = 2\n  while i <=\
    \ n do\n    if n % i == 0 then\n      table.insert(factors, i)\n      n = n /\
    \ i\n    end\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n < 2 then return {n} end", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p*i > n then\n      break\n\
    \    end\n    factors[p] = factors[p] or 1\n    factors[p] = factors[p] + 1\n\
    \    i = i + 1\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    while n % i == 0 do\n    \
    \  n = n / i\n      factor = factor+1\n    end\n    i = i + 1\n    factors[#factors+1]\
    \ = factor\n  end\n  return factors\nend", "    local factors = {}\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  -- Base case\n  if n == 1 then\n \
    \   return {n}\n  end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end\n\
    \  -- Recursive case\n  local factors = {}\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      table.insert(factors, i)\n      n = n / i\n    end\n  end\n  if\
    \ n ~= 1 then\n    table.insert(factors, n)\n  end\n  return factors\nend", " \
    \ -- If n is prime then return its prime factors\n  if isPrime(n) then\n    return\
    \ {n}\n  end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "  \
    \  local factors = {}\n    local factor = 1\n    while n ~= 1 do\n        factor\
    \ = factor * n\n        factors[#factors + 1] = factor\n        n = n / factor\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while n > 1 do\n        factor = factor * n % factor\n        factors[#factors\
    \ + 1] = factor\n        n = n / factor\n    end\n    return factors\nend", " \
    \ -- Base case\n  if n < 2 then return {n} end", "    local factors = {}\n   \
    \ local factor = 1\n    local i = 1\n    while i <= n do\n        if n % i ==\
    \ 0 then\n            factor = factor * i\n            i = i + 1\n        else\n\
    \            i = i + 1\n        end\n    end\n    factors[#factors + 1] = factor\n\
    \    return factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n\
    \  end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while\
    \ n ~= factor do\n      n = n / factor\n      table.insert(factors, factor)\n\
    \    end\n    factor = factor + 1\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while n ~= 1 do\n    while n % factor\
    \ == 0 do\n      n = n / factor\n      table.insert(factors, factor)\n    end\n\
    \    factor = factor + 1\n  end\n  table.sort(factors)\n  table.insert(factors,\
    \ n)\n  return factors\nend", "    local factors = {}\n    local factor = 1\n\
    \    while n > 1 do\n        while n % factor == 0 do\n            n = n / factor\n\
    \            table.insert(factors, factor)\n        end\n        factor = factor\
    \ + 1\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i * i <= n do\n    if n % i == 0 then\n      i = i + 1\n      factors[i]\
    \ = n\n    end\n  end\n  if n ~= 1 then\n    factors[#factors + 1] = n\n  end\n\
    \  return factors\nend", "  -- Initialize factorization with prime factors of\
    \ n\n  local factors = {}\n  for i = 2, n do\n    factors[i] = 1\n  end", "  --\
    \ Base case\n  if n == 1 then\n    return {n}\n  end", "  local factors = {}\n\
    \  local factor = 1\n  while n ~= 1 do\n    while n >= factor do\n      factors[#factors\
    \ + 1] = factor\n      n = n / factor\n    end\n    factor = factor + 1\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  while factor\
    \ <= n do\n    local i = 1\n    while i * factor <= n do\n      if n % i == 0\
    \ then\n        factor = factor * i\n        break\n      end\n      i = i + 1\n\
    \    end\n    table.insert(factors, factor)\n    n = n / factor\n    factor =\
    \ factor + 1\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ factor = 1\n    while n ~= 1 do\n        factor = factor * n\n        factors[factor]\
    \ = factors[factor] + 1 or 1\n        n = n / factor\n    end\n    return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    local i = 1\n    while\
    \ i <= n do\n        factor = factor * i\n        if factor > n then\n       \
    \     break\n        end\n        factors[#factors + 1] = factor\n        i =\
    \ i + 1\n    end\n    return factors\nend", "  -- Find factors of given number\n\
    \  local factors = {}\n  for i = 2, n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n    end\n  end\n  if n ~= 1 then\n    table.insert(factors,\
    \ n)\n  end\n  -- Return factors in order from smallest to largest\n  return factors\n\
    end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "  local factors\
    \ = {}\n  local factor = 1\n  while n > 1 do\n    while n % factor == 0 do\n \
    \     factors[#factors + 1] = factor\n      n = n / factor\n    end\n    factor\
    \ = factor + 1\n  end\n  factors[#factors + 1] = n\n  return factors\nend", " \
    \   local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n    \
    \        table.insert(factors, i)\n            n = n / i\n        end\n    end\n\
    \    if n > 1 then\n        table.insert(factors, n)\n    end\n    return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    local q = math.floor(n/p)\n    if p * q == n then\n      factors[#factors+1]\
    \ = p\n      factors[#factors+1] = q\n    end\n    i = p + 1\n  end\n  return\
    \ factors\nend", "  -- If n is prime then return its factors\n  if n == 2 then\
    \ return { n = 2 } end\n  -- If n is divisible by 2 then return its factors\n\
    \  if n % 2 == 0 then return factorize(n/2) end\n  -- If n is divisible by 3 then\
    \ return its factors\n  if n % 3 == 0 then return factorize(n/3) end\n  -- If\
    \ n is divisible by 5 then return its factors\n  if n % 5 == 0 then return factorize(n/5)\
    \ end\n  -- If n is divisible by 7 then return its factors\n  if n % 7 == 0 then\
    \ return factorize(n/7) end\n  -- If n is divisible by 11 then return its factors\n\
    \  if n % 11 == 0 then return factorize(n/11) end\n  -- If n is divisible by 13\
    \ then return its factors\n  if n % 13 == 0 then return factorize(n/13) end\n\
    \  -- If n is divisible by 17 then return its factors\n  if n % 17 == 0 then return\
    \ factorize(n/17) end\n  -- If n is divisible by 19 then return its factors\n\
    \  if n % 19 == 0 then return factorize(n/19) end\n  -- If n is divisible by 23\
    \ then return its factors\n  if n % 23 == 0 then return factorize(n/23) end\n\
    \  -- If n is divisible by 29 then return its factors\n  if n % 29 == 0 then return\
    \ factorize(n/29) end\n  -- If n is divisible by 31 then return its factors\n\
    \  if n % 31 == 0 then return factorize(n/31) end\n  -- If n is divisible by 37\
    \ then return its factors\n  if n % 37 == 0 then return factorize(n/37) end\n\
    \  -- If n is divisible by 41 then return its factors\n  if n % 41 == 0 then return\
    \ factorize(n/41) end\n  -- If n is divisible by 43 then return its factors\n\
    \  if n % 43 == 0 then return factorize(n/43) end\n  -- If n is divisible by 47\
    \ then return its factors\n  if n % 47 == 0 then return factorize(n/47) end\n\
    \  -- If n is divisible by 53 then return its factors\n  if n % 53 == 0 then return\
    \ factorize(n/53) end\n  -- If n is divisible by 59 then return ", "  -- Base\
    \ case\n  if n == 1 then\n    return {n}\n  end", "    local factors = {}\n  \
    \  local i = 1\n    while i * i <= n do\n        if n % i == 0 then\n        \
    \    i = i + 1\n            factors[#factors + 1] = i\n        end\n    end\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  while\
    \ n > 1 do\n    while n >= factor do\n      factors[#factors + 1] = factor\n \
    \     n = n / factor\n    end\n    factor = factor + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local primes = {}\n    local factorization\
    \ = {}\n    local prime_numbers = {}\n    local prime_factorization = {}\n   \
    \ local prime_numbers_count = 0\n    local prime_factorization_count = 0\n   \
    \ local prime_numbers_sum = 0\n    local prime_factorization_sum = 0\n    local\
    \ prime_numbers_product = 1\n    local prime_factorization_product = 1\n    local\
    \ prime_numbers_product_sum = 1\n    local prime_factorization_product_sum = 1\n\
    \    local prime_numbers_product_product = 1\n    local prime_factorization_product_product\
    \ = 1\n    local prime_numbers_product_product_sum = 1\n    local prime_factorization_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product = 1\n    local prime_factorization_product_product_product\
    \ = 1\n    local prime_numbers_product_product_product_sum = 1\n    local prime_factorization_product_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product_product = 1\n    local\
    \ prime_factorization_product_product_product_product = 1\n    local prime_numbers_product_product_product_product_sum\
    \ = 1\n    local prime_factorization_product_product_product_product_sum = 1\n\
    \    local prime_numbers_product_product_product_product_product = 1\n    local\
    \ prime_factorization_product_product_product_product_product = 1\n    local prime_numbers_product_product_product_product_product_sum\
    \ = 1\n    local prime_factorization_product_product_product_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_product\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product_product\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_product_product\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_product_product_sum\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product_product_product\
    \ = 1\n    local prime_factorization_product_product_product_product_product_product_product_product_product\
    \ = 1\n    local prime_numbers_product_product_product_product_product_product_product_product_product_sum\
    \ = 1", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "  -- Base case\n  if n < 2 then\n    return {}\n  end", "  \
    \  local factors = {}\n    local i = 1\n    while i * i <= n do\n        if n\
    \ % i == 0 then\n            factors[#factors+1] = i\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    if n ~= 1 then\n\
    \        factors[#factors+1] = n\n    end\n    return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {}\n  end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n    end\n  end\n  -- Return factors\n  return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n\
    \    while i * p <= n do\n      p = p * i\n    end\n    factors[i] = p\n    i\
    \ = i + 1\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n > 1 do\n    factor = factor * n\n    n = math.floor(n/factor)\n\
    \    factors[#factors + 1] = factor\n  end\n  return factors\nend", "    local\
    \ factors = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[i] = 1\n        else\n          \
    \  factors[i] = p\n        end\n        n = i\n        i = p + 1\n    end\n  \
    \  return factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n\
    \ do\n    local p = math.floor(n/i)\n    if p*i > n then\n      break\n    end\n\
    \    factors[p] = factors[p] or 1\n    factors[p] = factors[p] + 1\n    i = i\
    \ + 1\n  end\n  return factors\nend", "  local factors = {}\n  local primes =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = primes[i]\n    local q =\
    \ n / p\n    local r = n % p\n    factors[p] = factors[p] or {}\n    factors[p][q]\
    \ = factors[p][q] or {}\n    factors[p][q][r] = factors[p][q][r] or 1\n    i =\
    \ i + 1\n  end\n  local factorization = {}\n  for i = 2, n do\n    local p = primes[i]\n\
    \    local q = n / p\n    local r = n % p\n    factorization[p] = factorization[p]\
    \ or {}\n    factorization[p][q] = factorization[p][q] or {}\n    factorization[p][q][r]\
    \ = factorization[p][q][r] or 1\n  end\n  return factorization\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] + 1 or 1\n    factor = factor + 1\n  end\n  local primes =\
    \ {}\n  for i = 2, n do\n    if factors[i] ~= 1 then\n      primes[#primes + 1]\
    \ = i\n    end\n  end\n  return primes\nend", "  -- Base case\n  if n < 2 then\
    \ return {n} end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end\n\
    \  -- Find all factors of given number\n  local factors = {}\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      table.insert(factors, i)\n      n = n / i\n   \
    \ end\n  end\n  -- Return list of prime factors of given integer in the order\
    \ from smallest to largest.\n  -- Each of the factors should be listed number\
    \ of times corresponding to how many times it appeares in factorization.\n  return\
    \ table.concat(factors, \", \") .. \" \" .. n\nend", "  local factors = {}\n \
    \ local primes = {}\n  local i = 1\n  while i <= n do\n    local p = primes[i]\n\
    \    if p ~= nil then\n      factors[#factors+1] = p\n      i = i + 1\n      continue\n\
    \    end\n    local f = 2\n    while f * f <= n do\n      if n % f == 0 then\n\
    \        primes[#primes+1] = f\n        factors[#factors+1] = f\n        n = n\
    \ / f\n        break\n      end\n      f = f + 1\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n)\
    \ do\n    if n % i == 0 then\n      local p = math.floor(n/i)\n      factors[#factors+1]\
    \ = p\n      i = p\n    else\n      i = i + 1\n    end\n  end\n  return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    while n > 1 do\n    \
    \    factor = factor + 1\n        if n % factor == 0 then\n            n = n /\
    \ factor\n            table.insert(factors, factor)\n        end\n    end\n  \
    \  return factors\nend", "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n)\
    \ do\n    local p = math.floor(n/i)\n    if p*p > n then\n      break\n    end\n\
    \    factors[p] = factors[p] or 1\n    factors[p] = factors[p] + 1\n    i = i\
    \ + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n    return\
    \ {}\n  end", "  -- Initialize factorization table\n  local factors = {}\n  --\
    \ Initialize prime factorization table\n  local primes = {}\n  -- Initialize list\
    \ of prime factors\n  local primeFactors = {}\n  -- Initialize list of factors\n\
    \  local factors = {}\n  -- Initialize list of factors counts\n  local factorCounts\
    \ = {}\n  -- Initialize list of factors multiples\n  local factorMultiples\n \
    \ -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCounts = {}\n\
    \  -- Initialize list of factors multiples\n  local factorMultiplesCount", " \
    \   local factors = {}\n    local factor = 1\n    while n > 1 do\n        factor\
    \ = factor * n\n        factors[#factors + 1] = factor\n        n = n / factor\n\
    \    end\n    return factors\nend", "  -- If n is prime then return its prime\
    \ factors\n  if n == 2 then return { n = 2 }\n  elseif n == 1 then return { n\
    \ = 1 }\n  elseif n % 2 == 0 then return factorize(n / 2)\n  else\n    -- If n\
    \ is even then divide it by 2\n    -- If n is odd then multiply it by 3 and add\
    \ 1\n    -- If n is even then multiply it by 3 and add 1\n    -- If n is odd then\
    \ divide it by 2 and add 1\n    -- If n is even then divide it by 2 and add 1\n\
    \    -- If n is odd then divide it by 3 and add 1\n    -- If n is even then divide\
    \ it by 3 and add 1\n    -- If n is odd then divide it by 4 and add 1\n    --\
    \ If n is even then divide it by 4 and add 1\n    -- If n is odd then divide it\
    \ by 5 and add 1\n    -- If n is even then divide it by 5 and add 1\n    -- If\
    \ n is odd then divide it by 6 and add 1\n    -- If n is even then divide it by\
    \ 6 and add 1\n    -- If n is odd then divide it by 7 and add 1\n    -- If n is\
    \ even then divide it by 7 and add 1\n    -- If n is odd then divide it by 8 and\
    \ add 1\n    -- If n is even then divide it by 8 and add 1\n    -- If n is odd\
    \ then divide it by 9 and add 1\n    -- If n is even then divide it by 9 and add\
    \ 1\n    -- If n is odd then divide it by 10 and add 1\n    -- If n is even then\
    \ divide it by 10 and add 1\n    -- If n is odd then divide it by 11 and add 1\n\
    \    -- If n is even then divide it by 11 and add 1\n    -- If n is odd then divide\
    \ it by 12 and add 1\n    -- If n is even then divide it by 12 and add 1\n   \
    \ -- If n is odd then divide it by 13 and add 1\n    -- If n is even then divide\
    \ it by 13 and add 1\n    -- If n is odd then divide it by 14 and add 1\n    --\
    \ If n is even then divide it by 14 and add 1\n    -- If n is odd then divide\
    \ it by 15 and add 1\n    -- If n is even then divide it by 15 and add 1\n   \
    \ -- If n is odd then divide it by 16 and add 1\n    -- If n is even then divide\
    \ it by 16 and add 1\n    -- If n is odd ", "    local factors = {}\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \            n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  -- If n is prime then return its prime\
    \ factors\n  if n == 2 or n == 3 then\n    return {2, n}\n  end", "    local factors\
    \ = {}\n    local factor = 1\n    while n ~= 1 do\n        while n % factor ==\
    \ 0 do\n            factors[#factors + 1] = factor\n            n = n / factor\n\
    \        end\n        factor = factor + 1\n    end\n    return factors\nend",
  "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    local p\
    \ = math.floor(n/i)\n    if p*p > n then break end\n    factors[p] = factors[p]\
    \ or 1\n    factors[p] = factors[p] + 1\n    i = i + 1\n  end\n  return factors\n\
    end", "  -- Base case\n  if n < 2 then\n    return {}\n  end", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or 1\n    factors[p]\
    \ = factors[p] + 1\n    i = i + 1\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or 1\n    factors[p]\
    \ = factors[p] + 1\n    i = i + 1\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor]\
    \ + 1 or 1\n    factor = factor * 2\n  end\n  return factors\nend", "  -- If n\
    \ is prime then return its prime factors\n  if n == 1 then\n    return {n}\n \
    \ end", "    local factors = {}\n    local factor = 1\n    while n > 1 do\n  \
    \      factor = factor * n % 10\n        factors[factor] = factors[factor] + 1\
    \ or 1\n        n = n / 10\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor]\
    \ + 1 or 1\n    factor = factor + factors[factor]\n  end\n  return factors\nend",
  "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "    local factors =\
    \ {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        if n\
    \ % i == 0 then\n            factor = factor * i\n            i = i + 1\n    \
    \    else\n            i = i + 1\n        end\n    end\n    factors[#factors+1]\
    \ = factor\n    return factors\nend", "    local factors = {}\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local i = 1\n\
    \    while i <= n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while n > 1 do\n        factor = factor * n\n        n = math.floor(n/factor)\n\
    \        factors[#factors + 1] = factor\n    end\n    return factors\nend", " \
    \ -- Initialize list of factors\n  local factors = {}\n  -- Initialize list of\
    \ factorizations\n  local factorizations = {}\n  -- Initialize list of prime factors\n\
    \  local primes = {}\n  -- Initialize list of prime factorizations\n  local prime_factorizations\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions\n  local\
    \ prime_factorizations_without_repetitions = {}\n  -- Initialize list of prime\
    \ factorizations without repetitions sorted by their size\n  local prime_factorizations_without_repetitions_sorted\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors_sorted\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors_sorted_by_size\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors_sorted_by_size_and_factors\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors_sorted_by_size_and_factors_sorted\
    \ = {}\n  -- Initialize list of prime factorizations without repetitions sorted\
    \ by their size\n  local prime_factorizations_without_repetitions_sorted_by_size_and_factors_sorted_by_size_and_factors_",
  "  -- Base case\n  if n < 2 then return {n} end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    local f = factorize(i)\n    for _, v in ipairs(f)\
    \ do\n      table.insert(factors, v)\n    end\n  end\n  return factors\nend",
  "  -- Base case\n  if n < 2 then\n    return {}\n  end", "    local factors = {}\n\
    \    local factor = 1\n    while factor <= n do\n        if n % factor == 0 then\n\
    \            table.insert(factors, factor)\n            n = n / factor\n     \
    \   else\n            factor = factor + 1\n        end\n    end\n    return factors\n\
    end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
