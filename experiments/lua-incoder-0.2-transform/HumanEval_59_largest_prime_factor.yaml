name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n\
    \ is odd, return its largest factor of 5\n  if n % 3 == 0 then return 5 end\n\
    \  -- If n is odd, return its largest factor of 7\n  if n % 5 == 0 then return\
    \ 7 end\n  -- If n is odd, return its largest factor of 11\n  if n % 7 == 0 then\
    \ return 11 end\n  -- If n is odd, return its largest factor of 13\n  if n % 11\
    \ == 0 then return 13 end\n  -- If n is odd, return its largest factor of 17\n\
    \  if n % 13 == 0 then return 17 end\n  -- If n is odd, return its largest factor\
    \ of 19\n  if n % 17 == 0 then return 19 end\n  -- If n is odd, return its largest\
    \ factor of 23\n  if n % 19 == 0 then return 23 end\n  -- If n is odd, return\
    \ its largest factor of 29\n  if n % 23 == 0 then return 29 end\n  -- If n is\
    \ odd, return its largest factor of 31\n  if n % 29 == 0 then return 31 end\n\
    \  -- If n is odd, return its largest factor of 37\n  if n % 31 == 0 then return\
    \ 37 end\n  -- If n is odd, return its largest factor of 41\n  if n % 37 == 0\
    \ then return 41 end\n  -- If n is odd, return its largest factor of 43\n  if\
    \ n % 41 == 0 then return 43 end\n  -- If n is odd, return its largest factor\
    \ of 47\n  if n % 43 == 0 then return 47 end\n  -- If n is odd, return its largest\
    \ factor of 53\n  if n % 47 == 0 then return 53 end\n  -- If n is odd, return\
    \ its largest factor of 59\n  if n % 53 == 0 then return 59 end\n  -- If n is\
    \ odd, return its largest factor of 61\n  if n % 59 == 0 then return 61 end\n\
    \  -- If n is odd, return its largest factor of 67\n  if n % 61 == 0 then return\
    \ 67 end\n  -- If n is odd, return its largest factor of 71\n  if n % 67 == 0\
    \ then return 71 end\n  -- If n is odd, return its largest factor of 73\n", " \
    \ -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factors =\
    \ {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return table.remove(factors)\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If\
    \ n is prime, return its prime factors.\n  if prime_table[n] then return prime_table[n]\
    \ end\n  -- Otherwise, find the largest prime factor of n.\n  local max_factor\
    \ = 1\n  for i = 2, n do\n    -- If n is divisible by i, n is not a prime factor\
    \ of n.\n    if n % i == 0 then break end\n    -- Otherwise, find the largest\
    \ factor of i that is also a factor of n.\n    if max_factor < i then max_factor\
    \ = i end\n  end\n  return max_factor\nend", "    local factors = {}\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \        end\n    end\n    local largest = table.remove(factors, 1)\n    if largest\
    \ == 1 then\n        return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(math.sqrt(n))\n  local p = largest_prime_factor(m)\n  if p >\
    \ m then return p end\n  -- Otherwise, loop over all odd factors and return the\
    \ largest one\n  local i = 1\n  while i * i <= n do\n    if n % i == 0 then return\
    \ i end\n    i = i + 1\n  end\n  return n\nend", "  -- Base case\n  if n == 1\
    \ then return 1 end\n  -- If n is even, return its largest factor of 2\n  if n\
    \ % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd, return\
    \ its largest factor of 3\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 3) end\n  -- If n is prime, return its largest factor of 5\n  -- The prime\
    \ factors of 5 are 5, 7, 11, and 13\n  if prime_table[n] == 1 then return largest_prime_factor(n\
    \ / 5) end\n  -- If n is divisible by 5, return its largest factor of 7\n  if\
    \ n % 5 == 0 then return largest_prime_factor(n / 7) end\n  -- If n is divisible\
    \ by 7, return its largest factor of 11\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 11) end\n  -- If n is divisible by 11, return its largest factor of 13\n \
    \ if n % 11 == 0 then return largest_prime_factor(n / 13) end\n  -- If n is divisible\
    \ by 13, return its largest factor of 17\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 17) end\n  -- If n is divisible by 17, return its largest factor of 19\n \
    \ if n % 17 == 0 then return largest_prime_factor(n / 19) end\n  -- If n is divisible\
    \ by 19, return its largest factor of 23\n  if n % 19 == 0 then return largest_prime_factor(n\
    \ / 23) end\n  -- If n is divisible by 23, return its largest factor of 29\n \
    \ if n % 23 == 0 then return largest_prime_factor(n / 29) end\n  -- If n is divisible\
    \ by 29, return its largest factor of 31\n  if n % 29 == 0 then return largest_prime_factor(n\
    \ / 31) end\n  -- If n is divisible by 31, return its largest factor of 37\n \
    \ if n % 31 == 0 then return largest_prime_factor(n / 37) end\n  -- If n is divisible\
    \ by 37, return its largest factor of 41\n  if n % 37 == 0 then return largest_prime_factor(n\
    \ / 41) end\n  -- If n is divisible by 41, return its largest factor of 43\n \
    \ if n % 41 == 0 then return largest_prime_factor(n / 43) end\n  -- If n is divisible\
    \ by 43, return its largest factor of 47\n  if n % ", "  -- Base case: n is prime.\n\
    \  if n == 1 then return 1 end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case: n is 1 or even.\n  if n <= 1 then return\
    \ n end\n  -- Find the largest factor of n that is smaller than n.\n  local function\
    \ factor(n)\n    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest\
    \ factor of n that is larger than n.\n  local function factor_largest_prime(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is smaller than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is smaller than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = #factors\n    if largest == 0\
    \ then\n        return nil\n    end\n    largest = factors[largest]\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n        end\n\
    \    end\n    return largest\nend", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end\n  -- If n is prime, return n\n  if n == 2 then\n    return n\n \
    \ end\n  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then\n\
    \    return largest_prime_factor(n / 2)\n  end\n  -- If n is odd, return the largest\
    \ prime factor of n/2\n  local m = n / 2\n  while m ~= 2 do\n    local p = prime_factors(m)\n\
    \    if p ~= nil then\n      return p\n    end\n    m = m / 2\n  end\nend", " \
    \   local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n    \
    \    if n % i == 0 then\n            factors[i] = i\n            n = n / i\n \
    \       else\n            i = i + 1\n        end\n    end\n    return factors[#factors]\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    local largest\
    \ = table.max(factors)\n    if largest == n then\n        return largest\n   \
    \ else\n        return largest * largest_prime_factor(largest)\n    end\nend",
  "  if n < 2 then return nil end\n  local i = 1\n  while i * i <= n do\n    if n\
    \ % i == 0 then\n      n = n / i\n      return i\n    end\n    i = i + 1\n  end\n\
    \  return nil\nend", "  -- Base case: n is 1 or even. Return 1.\n  if n == 1 or\
    \ n % 2 == 0 then return 1 end\n  -- Base case: n is prime. Return n.\n  if n\
    \ == 2 then return n end\n  -- Base case: n is even. Return the largest prime\
    \ factor of n / 2.\n  if n % 2 == 0 then\n    local m = n / 2\n    local i = 2\n\
    \    while i * i <= m do\n      if m % i == 0 then\n        return i\n      end\n\
    \      i = i + 1\n    end\n  end\n  -- Base case: n is odd\n  local m = n / 2\n\
    \  local i = 3\n  while i * i <= m do\n    if m % i == 0 then\n      return i\n\
    \    end\n    i = i + 2\n  end\nend", "  -- Base case: n is prime.\n  if n ==\
    \ 1 then\n    return 1\n  end\n  -- Base case: n is even.\n  if n % 2 == 0 then\n\
    \    return 2\n  end\n  -- Find the largest factor of n that is smaller than n.\n\
    \  local max_factor = 1\n  local max_factor_index = 1\n  for i = 2, n do\n   \
    \ -- If n is divisible by i, then n is not a prime factor of n.\n    if n % i\
    \ == 0 then\n      -- If n is larger than max_factor, then update max_factor and\
    \ max_factor_index.\n      if n > max_factor then\n        max_factor = n\n  \
    \      max_factor_index = i\n      end\n      -- If n is smaller than max_factor,\
    \ then break the loop.\n      -- If n is divisible by max_factor, then n is not\
    \ a prime factor of n.\n      if n % max_factor == 0 then\n        break\n   \
    \   end\n    end\n  end\n  return max_factor_index\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1\
    \ then return 1 end\n  -- Find the largest factor of n that is smaller than n.\n\
    \  local function factor(n)\n    if n % 2 == 0 then return n end\n    local i\
    \ = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n      i\
    \ = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger than\
    \ n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n    \
    \  i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end\n  -- Find the largest factor of n that is larger\
    \ than n.\n  local function factor(n)\n    if n % 2 == 0 then return n end\n \
    \   local i = 3\n    while i * i <= n do\n      if n % i == 0 then return i end\n\
    \      i = i + 2\n    end\n  end", "  -- Base case\n  if n == 1 then\n    return\
    \ 1\n  end", "  if n < 2 then return nil end\n  local factor = 2\n  while n >\
    \ 1 do\n    local prime, err = prime_factor(n)\n    if prime == nil then return\
    \ nil end\n    if prime > factor then\n      factor = prime\n    end\n    n =\
    \ n / prime\n  end\n  return factor\nend", "    local factors = {}\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \        end\n    end\n    local largest = table.remove(factors)\n    if largest\
    \ == n then\n        return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n\
    \  end\n  -- Base case: n is divisible by 2.\n  if n % 2 == 0 then\n    return\
    \ 2\n  end\n  -- Base case: n is divisible by 3.\n  if n % 3 == 0 then\n    return\
    \ 3\n  end\n  -- Base case: n is divisible by 5.\n  if n % 5 == 0 then\n    return\
    \ 5\n  end\n  -- Base case: n is divisible by 7.\n  if n % 7 == 0 then\n    return\
    \ 7\n  end\n  -- Base case: n is divisible by 11.\n  if n % 11 == 0 then\n   \
    \ return 11\n  end\n  -- Base case: n is divisible by 13.\n  if n % 13 == 0 then\n\
    \    return 13\n  end\n  -- Base case: n is divisible by 17.\n  if n % 17 == 0\
    \ then\n    return 17\n  end\n  -- Base case: n is divisible by 19.\n  if n %\
    \ 19 == 0 then\n    return 19\n  end\n  -- Base case: n is divisible by 21.\n\
    \  if n % 21 == 0 then\n    return 21\n  end\n  -- Base case: n is divisible by\
    \ 23.\n  if n % 23 == 0 then\n    return 23\n  end\n  -- Base case: n is divisible\
    \ by 29.\n  if n % 29 == 0 then\n    return 29\n  end\n  -- Base case: n is divisible\
    \ by 31.\n  if n % 31 == 0 then\n    return 31\n  end\n  -- Base case: n is divisible\
    \ by 37.\n  if n % 37 == 0 then\n    return 37\n  end\n  -- Base case: n is divisible\
    \ by 43.\n  if n % 43 == 0 then\n    return 43\n  end\n  -- Base case: n is divisible\
    \ by 51.\n  if n % 51 == 0 then\n    return 51\n  end\n  -- Base case: n is divisible\
    \ by 59.\n  if n % 59 == 0 then\n    return 59\n  end\n  -- Base case: n is divisible\
    \ by 67.\n  if n % 67 == 0 then\n    return 67\n  end\n  -- Base case: n is divisible\
    \ by 73.\n  if n % 73 == 0 then\n    return 73\n  end\n  -- Base case: n is divisible\
    \ by 79.\n  if n % 79 == 0 then\n    return 79\n  end\n  -- Base case: n is divisible\
    \ by 83.\n  if n % 83 == 0 then\n    return 83\n  end\n  -- Base case: n is di",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is prime, return n\n  if\
    \ n == 1 then return n end\n  -- If n is even, return the largest prime factor\
    \ of n/2\n  if n % 2 == 0 then\n    local p = largest_prime_factor(n / 2)\n  \
    \  if p > n then return p end\n  end\n  -- If n is odd, return the largest prime\
    \ factor of 3*n+1\n  local p = 3\n  while p <= n do\n    local q = math.floor((p\
    \ + n) / 2)\n    if q * q == p then return q end\n    p = q + 1\n  end\nend",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        local prime = true\n        for\
    \ j = 2, i do\n            if n % j == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(factors, i)\n        end\n        i = i + 1\n    end\n\
    \    local largest = table.remove(factors)\n    return largest\nend", "  -- Base\
    \ case: n is 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime,\
    \ return its largest factor of 5\n  if prime_table[n] then return 5 end\n  --\
    \ Otherwise, return its largest factor of 7\n  return 7\nend", "    local factors\
    \ = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0\
    \ then\n            factors[i] = i\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors[#factors]\nend",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is odd and\
    \ even, return its largest factor of 5\n  if n % 3 == 0 then return 5 end\n  --\
    \ If n is odd and even, return its largest factor of 7\n  if n % 3 == 1 then return\
    \ 7 end\n  -- If n is odd and even, return its largest factor of 11\n  if n %\
    \ 5 == 0 then return 11 end\n  -- If n is odd and even, return its largest factor\
    \ of 13\n  if n % 7 == 0 then return 13 end\n  -- If n is odd and even, return\
    \ its largest factor of 17\n  if n % 11 == 0 then return 17 end\n  -- If n is\
    \ odd and even, return its largest factor of 19\n  if n % 13 == 0 then return\
    \ 19 end\n  -- If n is odd and even, return its largest factor of 23\n  if n %\
    \ 17 == 0 then return 23 end\n  -- If n is odd and even, return its largest factor\
    \ of 29\n  if n % 19 == 0 then return 29 end\n  -- If n is odd and even, return\
    \ its largest factor of 31\n  if n % 23 == 0 then return 31 end\n  -- If n is\
    \ odd and even, return its largest factor of 37\n  if n % 29 == 0 then return\
    \ 37 end\n  -- If n is odd and even, return its largest factor of 41\n  if n %\
    \ 31 == 0 then return 41 end\n  -- If n is odd and even, return its largest factor\
    \ of 43\n  if n % 37 == 0 then return 43 end\n  -- If n is odd and even, return\
    \ its largest factor of 47\n  if n % 41 == 0 then return 47 end\n  -- If n is\
    \ odd and even, return its largest factor of 53\n  if n % 43 == 0 then return\
    \ 53 end\n  -- If n is odd and even, return its largest factor of 59\n  if n %\
    \ 47 == 0 then return 59 end\n  -- If n is odd and even, return its largest factor\
    \ of 61\n  if n % 53 == 0 then return 61 end\n  -- If n is odd and even, return\
    \ its largest factor of 67\n  if n % 59 == 0 then return 67 end\n  -- If n is\
    \ od", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    if #factors ==\
    \ 0 then\n        return n\n    end\n    local largest = table.max(factors)\n\
    \    for i = 1, #factors do\n        if factors[i] == largest then\n         \
    \   return largest\n        end\n    end\n    return n\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Base case: n is even.\n\
    \  if n % 2 == 0 then\n    return 2\n  end\n  -- Find a factor of n where n is\
    \ even.\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ i\n    end\n    i = i + 2\n  end\n  return n\nend", "  -- Base case\n  if n\
    \ == 1 then\n    return 1\n  end", "    local factor = 1\n    while n > 1 do\n\
    \        if n % factor == 0 then\n            n = n / factor\n        else\n \
    \           factor = factor + 1\n        end\n    end\n    return factor\nend",
  "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  if n < 2 then\n    return\
    \ nil\n  end\n  local m = math.floor(n/2)\n  local i = 1\n  while i <= m do\n\
    \    local p = prime_factors(n)\n    if p[1] > i then\n      return p[1]\n   \
    \ end\n    n = p[2]\n    i = i + 1\n  end\n  return n\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Base case: n is even.\n\
    \  if n % 2 == 0 then\n    return 2\n  end\n  -- Base case: n is odd.\n  -- The\
    \ smallest prime factor is 2.\n  local factor = 2\n  -- Find the largest factor\
    \ of n.\n  while n % factor == 0 do\n    factor = factor + 1\n  end\n  -- Return\
    \ the largest factor of n.\n  return factor\nend", "  -- Base case: n is 1 or\
    \ even.\n  if n == 1 then return 2 end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Otherwise, loop through the prime factors of n and\
    \ return the largest one\n  for i = 2, n do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\nend", "  -- The largest prime factor is n-1 if n is odd and\
    \ n+1 if n is even.\n  -- The largest prime factor is 2 if n is odd and 1 if n\
    \ is even.\n  -- The largest prime factor is 1 if n is odd and -1 if n is even.\n\
    \  -- The largest prime factor is -1 if n is odd and -2 if n is even.\n  -- The\
    \ largest prime factor is -2 if n is odd and -3 if n is even.\n  -- The largest\
    \ prime factor is -3 if n is odd and -4 if n is even.\n  -- The largest prime\
    \ factor is -4 if n is odd and -5 if n is even.\n  -- The largest prime factor\
    \ is -5 if n is odd and -6 if n is even.\n  -- The largest prime factor is -6\
    \ if n is odd and -7 if n is even.\n  -- The largest prime factor is -7 if n is\
    \ odd and -8 if n is even.\n  -- The largest prime factor is -8 if n is odd and\
    \ -9 if n is even.\n  -- The largest prime factor is -9 if n is odd and -10 if\
    \ n is even.\n  -- The largest prime factor is -10 if n is odd and -11 if n is\
    \ even.\n  -- The largest prime factor is -11 if n is odd and -12 if n is even.\n\
    \  -- The largest prime factor is -12 if n is odd and -13 if n is even.\n  --\
    \ The largest prime factor is -13 if n is odd and -14 if n is even.\n  -- The\
    \ largest prime factor is -14 if n is odd and -15 if n is even.\n  -- The largest\
    \ prime factor is -15 if n is odd and -16 if n is even.\n  -- The largest prime\
    \ factor is -16 if n is odd and -17 if n is even.\n  -- The largest prime factor\
    \ is -17 if n is odd and -18 if n is even.\n  -- The largest prime factor is -18\
    \ if n is odd and -19 if n is even.\n  -- The largest prime factor is -19 if n\
    \ is odd and -20 if n is even.\n  -- The largest prime factor is -20 if n is odd\
    \ and -21 if n is even.\n  -- The largest prime factor is -21 if n is odd and\
    \ -22 if n is even.\n  -- The largest prime factor is -22 if n is odd and -23\
    \ if n is even.\n  -- The largest prime ", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "  -- Base case: n is 1 or even.\n  if n\
    \ == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then return\
    \ 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 == 0 then return 3 end\n\
    \  -- Base case: n is divisible by 2 or 3.\n  if n % 3 == 0 then return n end\n\
    \  -- Find smallest factor of n that is greater than or equal to 3.\n  local function\
    \ factor(n)\n    local factor = 2\n    while n % factor == 0 do\n      factor\
    \ = factor + 1\n    end\n    return factor\n  end\n  -- Find the largest factor\
    \ of n that is less than or equal to n.\n  local function largest(n)\n    local\
    \ factor = 2\n    while n % factor == 0 do\n      factor = factor + 1\n    end\n\
    \    return factor\n  end\n  -- Find the largest factor of n that is less than\
    \ or equal to n.\n  local function smallest(n)\n    local factor = 2\n    while\
    \ n % factor == 0 do\n      factor = factor + 1\n    end\n    return factor\n\
    \  end\n  -- Find the largest factor of n that is less than or equal to n.\n \
    \ local function largest(n)\n    local factor = 2\n    while n % factor == 0 do\n\
    \      factor = factor + 1\n    end\n    return factor\n  end\n  -- Find the smallest\
    \ factor of n that is greater than or equal to n.\n  local function smallest(n)\n\
    \    local factor = 2\n    while n % factor == 0 do\n      factor = factor + 1\n\
    \    end\n    return factor\n  end\n  -- Find the smallest factor of n that is\
    \ greater than or equal to n.\n  local function largest(n)\n    local factor =\
    \ 2\n    while n % factor == 0 do\n      factor = factor + 1\n    end\n    return\
    \ factor\n  end\n  -- Find the largest factor of n that is less than or equal\
    \ to n.\n  local function smallest(n)\n    local factor = 2\n    while n % factor\
    \ == 0 do\n      factor = factor + 1\n    end\n    return factor\n  end\n  --\
    \ Find the smallest factor of n that is greater than or equal to n.\n  local function\
    \ largest(n)\n    local factor = 2\n    while n % factor == 0 do\n      factor\
    \ = factor + 1\n    end\n    return factor\n  end\n  -- Find the largest factor\
    \ of n that is less than or equal to n.\n  local function smallest(n)\n    local\
    \ factor = 2\n    while n % factor == 0 do\n      factor = factor + 1\n    end\n\
    \    return factor\n  end\n  -- Find the smallest factor of n that is greater\
    \ than or equal to n.\n  local function largest(n)\n    local factor = 2\n   \
    \ while n % factor == 0 do\n      factor = factor + 1", "  -- Base case\n  if\
    \ n < 2 then\n    return nil\n  end", "  if n < 2 then return 1 end\n  local factor\
    \ = 1\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n \
    \     factor = factor * i\n      n = n / i\n    end\n    i = i + 1\n  end\n  return\
    \ factor\nend", "  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- If\
    \ n is prime, return its prime factors\n  if is_prime(n) then\n    local factors\
    \ = {}\n    for i = 2, n do\n      if n % i == 0 then\n        table.insert(factors,\
    \ i)\n      end\n    end\n    return table.max(factors)\n  end\n  -- If n is composite,\
    \ return its largest prime factor plus one\n  return largest_prime_factor(n -\
    \ 1) + 1\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(math.sqrt(n))\n  if m == n then return m end\n  -- Otherwise,\
    \ loop over all prime factors\n  for i = 2, m do\n    if n % i == 0 then\n   \
    \   return i\n    end\n  end\nend", "  -- Base case: n is 1 or even.\n  if n ==\
    \ 1 or n % 2 == 0 then\n    return 1\n  end", "    local factors = {}\n    local\
    \ i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n        \
    \    table.insert(factors, i)\n            n = n / i\n        else\n         \
    \   i = i + 1\n        end\n    end\n    return n and table.max(factors)\nend",
  "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case:\
    \ n is even.\n  if n % 2 == 0 then return n end\n  -- Find largest factor of n\
    \ that is greater than 1.\n  local function factor(n)\n    local function is_factor(n)\n\
    \      -- Base case: n is even.\n      if n % 2 == 0 then return false end\n \
    \     -- Base case: n is 1.\n      if n == 1 then return true end\n      -- Find\
    \ largest factor of n that is greater than 1.\n      local function factor(n)\n\
    \        -- Base case: n is even.\n        if n % 2 == 0 then return false end\n\
    \        -- Base case: n is 1.\n        if n == 1 then return true end\n     \
    \   -- Find largest factor of n that is greater than 1.\n        local function\
    \ factor(n)\n          -- Base case: n is even.\n          if n % 2 == 0 then\
    \ return false end\n          -- Base case: n is 1.\n          if n == 1 then\
    \ return true end\n          -- Find largest factor of n that is greater than\
    \ 1.\n          local function factor(n)\n            -- Base case: n is even.\n\
    \            if n % 2 == 0 then return false end\n            -- Base case: n\
    \ is 1.\n            if n == 1 then return true end\n            -- Find largest\
    \ factor of n that is greater than 1.\n            local function factor(n)\n\
    \              -- Base case: n is even.\n              if n % 2 == 0 then return\
    \ false end\n              -- Base case: n is 1.\n              if n == 1 then\
    \ return true end\n              -- Find largest factor of n that is greater than\
    \ 1.\n              local function factor(n)\n                -- Base case: n\
    \ is even.\n                if n % 2 == 0 then return false end\n            \
    \    -- Base case: n is 1.\n                if n == 1 then return true end\n \
    \               -- Find largest factor of n that is greater than 1.\n        \
    \        local function factor(n)\n                  -- Base case: n is even.\n\
    \                  if n % 2 == 0 then return false end\n                  -- Base\
    \ case: n is 1.\n                  if n == 1 then return true end\n          \
    \        -- Find largest factor of n that is greater than 1.\n               \
    \   local function factor(n)\n                    -- Base case: n is even.\n \
    \                   if n % 2 == 0 then return false end\n                    --\
    \ Base case: n is 1.\n                    if n == 1 then return true end\n   \
    \                 -- Find largest factor of n that is greater than 1.\n      \
    \              local function factor(n)\n                      -- Base case: n\
    \ is even.\n                      if n % 2 == 0 then return false end\n      \
    \                -- ", "  -- Base case: n is less than or equal to 1.\n  if n\
    \ <= 1 then\n    return nil\n  end", "  -- Base case: n is 1 or even.\n  if n\
    \ == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end", "  -- Base case\n  if n == 1 then\n    return 1\n  --\
    \ Sieve of Eratosthenes\n  elseif n % 2 == 0 then\n    return largest_prime_factor(n\
    \ / 2)\n  -- Sieve of Sundaram\n  elseif n % 3 == 0 then\n    return largest_prime_factor(n\
    \ / 3)\n  -- Sieve of Ramanujan\n  elseif n % 5 == 0 then\n    return largest_prime_factor(n\
    \ / 5)\n  -- Sieve of Atkin\n  elseif n % 7 == 0 then\n    return largest_prime_factor(n\
    \ / 7)\n  -- Sieve of Euler\n  elseif n % 11 == 0 then\n    return largest_prime_factor(n\
    \ / 11)\n  -- Sieve of Oberon\n  elseif n % 13 == 0 then\n    return largest_prime_factor(n\
    \ / 13)\n  -- Sieve of Rabin\n  elseif n % 17 == 0 then\n    return largest_prime_factor(n\
    \ / 17)\n  -- Sieve of Spirit\n  elseif n % 19 == 0 then\n    return largest_prime_factor(n\
    \ / 19)\n  -- Sieve of Mersenne primes\n  elseif n % 23 == 1 then\n    return\
    \ largest_prime_factor(n / 23)\n  -- Sieve of Babylonian numbers (not used)\n\
    \  elseif n % 29 == 0 then\n    return largest_prime_factor(n / 29)\n  -- Sieve\
    \ of Ramanujan numbers (not used)\n  elseif n % 31 == 1 then\n    return largest_prime_factor(n\
    \ / 31)\n  -- Sieve of Babylonian numbers (not used)\n  elseif n % 37 == 0 then\n\
    \    return largest_prime_factor(n / 37)\n  -- Sieve of Ramanujan numbers (not\
    \ used)\n  elseif n % 41 == 1 then\n    return largest_prime_factor(n / 41)\n\
    \  -- Sieve of Babylonian numbers (not used)\n  elseif n % 47 == 0 then\n    return\
    \ largest_prime_factor(n / 47)\n  -- Sieve of Ramanujan numbers (not used)\n \
    \ elseif n % 53 == 1 then\n    return largest_prime_factor(n / 53)\n  -- Sieve\
    \ of Baby", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case\n  if n < 2 then return 1 end", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2\
    \ == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n \
    \ if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the primes 2 through\
    \ sqrt(n)\n  for i = 2, math.sqrt(n) do\n    -- If n is divisible by i, return\
    \ i\n    if n % i == 0 then return i end\n  end\nend", "  -- Base case\n  if n\
    \ == 1 then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "    local factor = 1\n    while n > 1 do\n        if n\
    \ % factor == 0 then\n            n = n / factor\n        else\n            factor\
    \ = factor + 1\n        end\n    end\n    return factor\nend", "  -- Base case\n\
    \  if n < 2 then\n    return nil\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is prime, return n\n  if n == 2 then return n end\n  -- If\
    \ n is even, return largest prime factor of n/2\n  if n % 2 == 0 then\n    local\
    \ m = largest_prime_factor(n / 2)\n    if m > n then return m end\n  end\n  --\
    \ If n is odd, return largest prime factor of 3*n + 1\n  local m = largest_prime_factor(3\
    \ * n + 1)\n  if m > n then return m end\n  -- If n is prime, return n\n  if n\
    \ == m then return n end\n  -- If n is even, return largest prime factor of n/2\n\
    \  if n % 2 == 0 then\n    local m = largest_prime_factor(n / 2)\n    if m > n\
    \ then return m end\n  end\n  -- If n is odd, return largest prime factor of 3*n\
    \ + 1\n  local m = largest_prime_factor(3 * n + 1)\n  if m > n then return m end\n\
    \  -- If n is prime, return n\n  if n == m then return n end\n  -- If n is even,\
    \ return largest prime factor of n/2\n  if n % 2 == 0 then\n    local m = largest_prime_factor(n\
    \ / 2)\n    if m > n then return m end\n  end\n  -- If n is odd, return largest\
    \ prime factor of 3*n + 1\n  local m = largest_prime_factor(3 * n + 1)\n  if m\
    \ > n then return m end\n  -- If n is prime, return n\n  if n == m then return\
    \ n end\n  -- If n is even, return largest prime factor of n/2\n  if n % 2 ==\
    \ 0 then\n    local m = largest_prime_factor(n / 2)\n    if m > n then return\
    \ m end\n  end\n  -- If n is odd, return largest prime factor of 3*n + 1\n  local\
    \ m = largest_prime_factor(3 * n + 1)\n  if m > n then return m end\n  -- If n\
    \ is prime, return n\n  if n == m then return n end\n  -- If n is even, return\
    \ largest prime factor of n/2\n  if n % 2 == 0 then\n    local m = largest_prime_factor(n\
    \ / 2)\n    if m > n then return m end\n  end\n  -- If n is odd, return largest\
    \ prime factor of 3*n + 1\n  local m = largest_prime_factor(3 * n + 1)\n  if m\
    \ > n then return m end\n  -- If n", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if i %\
    \ j == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.remove(factors)\nend", "    local\
    \ factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n\
    \ % i == 0 then\n            factors[i] = i\n            n = n / i\n        else\n\
    \            i = i + 1\n        end\n    end\n    return factors[#factors]\nend",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n  -- Base case:\
    \ n is divisible by 2.\n  if n % 2 == 0 then\n    return 2\n  end\n  -- Base case:\
    \ n is divisible by 3.\n  if n % 3 == 0 then\n    return 3\n  end\n  -- Base case:\
    \ n is divisible by 5.\n  if n % 5 == 0 then\n    return 5\n  end\n  -- Base case:\
    \ n is divisible by 7.\n  if n % 7 == 0 then\n    return 7\n  end\n  -- Base case:\
    \ n is divisible by 11.\n  if n % 11 == 0 then\n    return 11\n  end\n  -- Base\
    \ case: n is divisible by 13.\n  if n % 13 == 0 then\n    return 13\n  end\n \
    \ -- Base case: n is divisible by 17.\n  if n % 17 == 0 then\n    return 17\n\
    \  end\n  -- Base case: n is divisible by 19.\n  if n % 19 == 0 then\n    return\
    \ 19\n  end\n  -- Base case: n is divisible by 23.\n  if n % 23 == 0 then\n  \
    \  return 23\n  end\n  -- Base case: n is divisible by 29.\n  if n % 29 == 0 then\n\
    \    return 29\n  end\n  -- Base case: n is divisible by 31.\n  if n % 31 == 0\
    \ then\n    return 31\n  end\n  -- Base case: n is divisible by 37.\n  if n %\
    \ 37 == 0 then\n    return 37\n  end\n  -- Base case: n is divisible by 43.\n\
    \  if n % 43 == 0 then\n    return 43\n  end\n  -- Base case: n is divisible by\
    \ 51.\n  if n % 51 == 0 then\n    return 51\n  end\n  -- Base case: n is divisible\
    \ by 59.\n  if n % 59 == 0 then\n    return 59\n  end\n  -- Base case: n is divisible\
    \ by 67.\n  if n % 67 == 0 then\n    return 67\n  end\n  -- Base case: n is divisible\
    \ by 73.\n  if n % 73 == 0 then\n    return 73\n  end\n  -- Base case: n is divisible\
    \ by 79.\n  if n % 79 == 0 then\n    return 79\n  end\n  -- Base case: n is divisible\
    \ by 89.\n  if n % 89 == 0 then\n    return 89\n  end\n  -- Base case: n is divisible\
    \ by 97.\n  if n % 97 == 0 then\n    return 97\n  end\n  -- Base case: n is ",
  "    local factors = {}\n    for i = 2, n do\n        local prime = true\n     \
    \   for j = 2, i do\n            if i % j == 0 then\n                prime = false\n\
    \                break\n            end\n        end\n        if prime then\n\
    \            table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If\
    \ n is prime, return its largest factor of n.\n  if prime_table[n] then return\
    \ prime_table[n] end\n  -- If n is even, return its largest factor of n.\n  if\
    \ n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd, return\
    \ its largest factor of n.\n  local m = math.floor(math.sqrt(n))\n  while m %\
    \ 2 == 0 do\n    m = m / 2\n  end\n  return m\nend", "  -- Base case\n  if n <\
    \ 2 then return 1 end\n  -- If n is even, return its largest prime factor\n  if\
    \ n % 2 == 0 then\n    local m = math.floor(math.sqrt(n))\n    if m % 2 == 0 then\
    \ return m end\n  end\n  -- If n is odd, return its largest prime factor plus\
    \ 1\n  local m = math.floor(math.sqrt(n))\n  if m % 2 == 1 then return m + 1 end\n\
    \  -- Otherwise, loop over all odd numbers up to sqrt(n)\n  local i = 3\n  while\
    \ i * i <= n do\n    local m = math.floor((n + i * i) / 2)\n    if m % 2 == 1\
    \ then return m + 1 end\n    i = i + 1\n  end\nend", "  -- Base case: n is 1 or\
    \ 2.\n  if n == 1 or n == 2 then\n    return n\n  end", "  -- Base case\n  if\
    \ n==1 then return 1 end\n  -- If n is prime, return its prime factors\n  if prime_table[n]\
    \ then return prime_table[n] end\n  -- If n is divisible by 2, return its prime\
    \ factors\n  if n%2==0 then return 2 end\n  -- If n is divisible by 3, return\
    \ its prime factors\n  if n%3==0 then return 3 end\n  -- If n is divisible by\
    \ 5, return its prime factors\n  if n%5==0 then return 5 end\n  -- If n is divisible\
    \ by 7, return its prime factors\n  if n%7==0 then return 7 end\n  -- If n is\
    \ divisible by 11, return its prime factors\n  if n%11==0 then return 11 end\n\
    \  -- If n is divisible by 13, return its prime factors\n  if n%13==0 then return\
    \ 13 end\n  -- If n is divisible by 17, return its prime factors\n  if n%17==0\
    \ then return 17 end\n  -- If n is divisible by 19, return its prime factors\n\
    \  if n%19==0 then return 19 end\n  -- If n is divisible by 23, return its prime\
    \ factors\n  if n%23==0 then return 23 end\n  -- If n is divisible by 29, return\
    \ its prime factors\n  if n%29==0 then return 29 end\n  -- If n is divisible by\
    \ 31, return its prime factors\n  if n%31==0 then return 31 end\n  -- If n is\
    \ divisible by 37, return its prime factors\n  if n%37==0 then return 37 end\n\
    \  -- If n is divisible by 41, return its prime factors\n  if n%41==0 then return\
    \ 41 end\n  -- If n is divisible by 43, return its prime factors\n  if n%43==0\
    \ then return 43 end\n  -- If n is divisible by 47, return its prime factors\n\
    \  if n%47==0 then return 47 end\n  -- If n is divisible by 53, return its prime\
    \ factors\n  if n%53==0 then return 53 end\n  -- If n is divisible by 59, return\
    \ its prime factors\n  if n%59==0 then return 59 end\n  -- If n is divisible by\
    \ 61, return its prime factors\n  if n%61==0 then ", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = table.remove(factors, 1)\n   \
    \ if largest == n then\n        return largest\n    else\n        return largest\
    \ * largest_prime_factor(largest)\n    end\nend", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then\
    \ return 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 == 0 then return 3\
    \ end\n  -- Base case: n is even and greater than 3.\n  if n % 2 == 1 then return\
    \ n end\n  -- Find largest factor of n that is greater than 3.\n  local i = 3\n\
    \  while i * i <= n do\n    if n % i == 0 then return i end\n    i = i + 2\n \
    \ end\n  return n\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If\
    \ n is even, return its smallest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(n/2)\n  local p = largest_prime_factor(m)\n  local q = largest_prime_factor(m\
    \ - 1)\n  if p > q then return p else return q end\nend", "  -- The largest prime\
    \ factor is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor\
    \ is 2 if n is even and 3 if n is odd.\n  -- The largest prime factor is 1 if\
    \ n is odd and 2 if n is even.\n  -- The largest prime factor is 0 if n is even.\n\
    \  -- The largest prime factor is 0 if n is odd.\n  -- The largest prime factor\
    \ is 0 if n is odd.\n  -- The largest prime factor is 0 if n is even.\n  -- The\
    \ largest prime factor is 0 if n is odd.\n  -- The largest prime factor is 0 if\
    \ n is odd.\n  -- The largest prime factor is 0 if n is even.\n  -- The largest\
    \ prime factor is 0 if n is odd.\n  -- The largest prime factor is 0 if n is odd.\n\
    \  -- The largest prime factor is 0 if n is even.\n  -- The largest prime factor\
    \ is 0 if n is odd.\n  -- The largest prime factor is 0 if n is odd.\n  -- The\
    \ largest prime factor is 0 if n is even.\n  -- The largest prime factor is 0\
    \ if n is odd.\n  -- The largest prime factor is 0 if n is odd.\n  -- The largest\
    \ prime factor is 0 if n is even.\n  -- The largest prime factor is 0 if n is\
    \ odd.\n  -- The largest prime factor is 0 if n is odd.\n  -- The largest prime\
    \ factor is 0 if n is even.\n  -- The largest prime factor is 0 if n is odd.\n\
    \  -- The largest prime factor is 0 if n is odd.\n  -- The largest prime factor\
    \ is 0 if n is even.\n  -- The largest prime factor is 0 if n is odd.\n  -- The\
    \ largest prime factor is 0 if n is odd.\n  -- The largest prime factor is 0 if\
    \ n is even.\n  -- The largest prime factor is 0 if n is odd.\n  -- The largest\
    \ prime factor is 0 if n is odd.\n  -- The largest prime factor is 0 if n is even.\n\
    \  -- The largest prime factor is 0 if n is odd.\n  -- The largest prime factor\
    \ is 0 if n is odd.\n  -- The largest prime factor is 0 if n is even.\n  -- The\
    \ largest prime factor is 0 if n is odd.\n  -- The largest prime factor is 0 if\
    \ n is odd.\n  -- The largest prime factor is 0 if n is even.\n  -- The largest\
    \ prime factor is 0 if n", "  -- Base case: n is prime.\n  if n == 1 then\n  \
    \  return 1\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n\
    \ is even, return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor((math.sqrt(n) + 1.0) / 2.0)\n  return largest_prime_factor(math.floor(n\
    \ * m) / m) + 1\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "    local\
    \ factors = {}\n    for i = 2, n do\n        local prime = true\n        for j\
    \ = 2, i do\n            if n % j == 0 then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "  if n < 2 then return nil end\n  local factors = {}\n  local i = 1\n \
    \ while i <= math.sqrt(n) do\n    if n % i == 0 then\n      table.insert(factors,\
    \ i)\n      n = n / i\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    table.insert(factors,\
    \ n)\n  end\n  local largest = math.max(table.unpack(factors))\n  return largest\n\
    end", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base case:\
    \ n is 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  --\
    \ Base case: n is prime.\n  if n == 1 then return 1 end", "  -- Base case: n is\
    \ prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case: n is less than\
    \ or equal to 1.\n  if n <= 1 then\n    return nil\n  end", "  -- Base case: n\
    \ is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case: n is 1 or\
    \ even.\n  if n == 1 then\n    return 1\n  end\n  -- Base case: n is 2 or even.\n\
    \  if n == 2 then\n    return 2\n  end\n  -- Base case: n is 3 or even.\n  if\
    \ n % 2 == 0 then\n    return 3\n  end\n  -- Base case: n is divisible by 2 or\
    \ 3.\n  if n % 3 == 0 then\n    return 3\n  end\n  -- Base case: n is divisible\
    \ by 4.\n  if n % 4 == 0 then\n    return 4\n  end\n  -- Base case: n is divisible\
    \ by 5.\n  if n % 5 == 0 then\n    return 5\n  end\n  -- Base case: n is divisible\
    \ by 6.\n  if n % 6 == 0 then\n    return 6\n  end\n  -- Base case: n is divisible\
    \ by 7.\n  if n % 7 == 0 then\n    return 7\n  end\n  -- Base case: n is divisible\
    \ by 8.\n  if n % 8 == 0 then\n    return 8\n  end\n  -- Base case: n is divisible\
    \ by 9.\n  if n % 9 == 0 then\n    return 9\n  end\n  -- Base case: n is divisible\
    \ by 10.\n  if n % 10 == 0 then\n    return 10\n  end\n  -- Base case: n is divisible\
    \ by 11.\n  if n % 11 == 0 then\n    return 11\n  end\n  -- Base case: n is divisible\
    \ by 12.\n  if n % 12 == 0 then\n    return 12\n  end\n  -- Base case: n is divisible\
    \ by 13.\n  if n % 13 == 0 then\n    return 13\n  end\n  -- Base case: n is divisible\
    \ by 14.\n  if n % 14 == 0 then\n    return 14\n  end\n  -- Base case: n is divisible\
    \ by 15.\n  if n % 15 == 0 then\n    return 15\n  end\n  -- Base case: n is divisible\
    \ by 16.\n  if n % 16 == 0 then\n    return 16\n  end\n  -- Base case: n is divisible\
    \ by 17.\n  if n % 17 == 0 then\n    return 17\n  end\n  -- Base case: n is divisible\
    \ by 18.\n  if n % 18 == 0 then\n    return 18\n  end\n  -- Base case: n is divisible\
    \ by 19.\n  if n % 19 == 0 then\n    return 19\n  end\n  -- Base case: n is divisible\
    \ by 20.\n  if n % 20 == 0 then\n    return 20\n  end\n  -- Base case: n is divisible\
    \ by 21.\n  if n % 21", "    local factors = {}\n    for i = 2, n do\n       \
    \ local prime = true\n        for j = 2, i do\n            if n % j == 0 then\n\
    \                prime = false\n                break\n            end\n     \
    \   end\n        if prime then\n            table.insert(factors, i)\n       \
    \ end\n    end\n    table.sort(factors)\n    return factors[#factors]\nend", " \
    \ -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n  -- The\
    \ largest prime factor is 2 if n is odd and 1 if n is even.\n  -- The largest\
    \ prime factor is 1 if n is odd and -1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd and -2 if n is even.\n  -- The largest prime factor is -2\
    \ if n is odd and -3 if n is even.\n  -- The largest prime factor is -3 if n is\
    \ odd and -4 if n is even.\n  -- The largest prime factor is -4 if n is odd and\
    \ -5 if n is even.\n  -- The largest prime factor is -5 if n is odd and -6 if\
    \ n is even.\n  -- The largest prime factor is -6 if n is odd and -7 if n is even.\n\
    \  -- The largest prime factor is -7 if n is odd and -8 if n is even.\n  -- The\
    \ largest prime factor is -8 if n is odd and -9 if n is even.\n  -- The largest\
    \ prime factor is -9 if n is odd and -10 if n is even.\n  -- The largest prime\
    \ factor is -10 if n is odd and -11 if n is even.\n  -- The largest prime factor\
    \ is -11 if n is odd and -12 if n is even.\n  -- The largest prime factor is -12\
    \ if n is odd and -13 if n is even.\n  -- The largest prime factor is -13 if n\
    \ is odd and -14 if n is even.\n  -- The largest prime factor is -14 if n is odd\
    \ and -15 if n is even.\n  -- The largest prime factor is -15 if n is odd and\
    \ -16 if n is even.\n  -- The largest prime factor is -16 if n is odd and -17\
    \ if n is even.\n  -- The largest prime factor is -17 if n is odd and -18 if n\
    \ is even.\n  -- The largest prime factor is -18 if n is odd and -19 if n is even.\n\
    \  -- The largest prime factor is -19 if n is odd and -20 if n is even.\n  --\
    \ The largest prime factor is -20 if n is odd and -21 if n is even.\n  -- The\
    \ largest prime factor is -21 if n is odd and -22 if n is even.\n  -- The largest\
    \ prime factor is -22 if n is odd and -23 if n is even.\n  -- The largest prime ",
  "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case:\
    \ n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n\
    \  if n % 2 == 0 then return 3 end\n  -- Base case: n is divisible by 2 or 3.\n\
    \  if n % 3 == 0 then return n end\n  -- Find a factor of n by trial division.\n\
    \  for i = 5, n, 2 do\n    if n % i == 0 then return i end\n  end\nend", "  --\
    \ Base case: n is 1 or even. Return 1.\n  if n == 1 or n % 2 == 0 then return\
    \ 1 end\n  -- Base case: n is prime. Return n.\n  if n == 2 then return n end\n\
    \  -- Find largest factor of n that is greater than 1.\n  local factor = 1\n \
    \ while n > 1 do\n    factor = factor + 1\n    n = n / 2\n  end\n  return factor\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n\
    \        if n % i == 0 then\n            factors[i] = i\n            n = n / i\n\
    \        else\n            i = i + 1\n        end\n    end\n    return factors[#factors]\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \ -- Base case: n is prime.\n  if n == 1 then return 1 end", "  -- The largest\
    \ prime factor is n-1 (because any prime factor > 1 must also\n  -- be larger\
    \ than 1).\n  -- The largest prime factor is n-1 because any prime factor > 1\
    \ must also\n  -- be larger than 1.\n  -- The largest prime factor is n-1 because\
    \ any prime factor > 1 must also\n  -- be larger than 1.\n  -- The largest prime\
    \ factor is n-1 because any prime factor > 1 must also\n  -- be larger than 1.\n\
    \  -- The largest prime factor is n-1 because any prime factor > 1 must also\n\
    \  -- be larger than 1.\n  -- The largest prime factor is n-1 because any prime\
    \ factor > 1 must also\n  -- be larger than 1.\n  -- The largest prime factor\
    \ is n-1 because any prime factor > 1 must also\n  -- be larger than 1.\n  --\
    \ The largest prime factor is n-1 because any prime factor > 1 must also\n  --\
    \ be larger than 1.\n  -- The largest prime factor is n-1 because any prime factor\
    \ > 1 must also\n  -- be larger than 1.\n  -- The largest prime factor is n-1\
    \ because any prime factor > 1 must also\n  -- be larger than 1.\n  -- The largest\
    \ prime factor is n-1 because any prime factor > 1 must also\n  -- be larger than\
    \ 1.\n  -- The largest prime factor is n-1 because any prime factor > 1 must also\n\
    \  -- be larger than 1.\n  -- The largest prime factor is n-1 because any prime\
    \ factor > 1 must also\n  -- be larger than 1.\n  -- The largest prime factor\
    \ is n-1 because any prime factor > 1 must also\n  -- be larger than 1.\n  --\
    \ The largest prime factor is n-1 because any prime factor > 1 must also\n  --\
    \ be larger than 1.\n  -- The largest prime factor is n-1 because any prime factor\
    \ > 1 must also\n  -- be larger than 1.\n  -- The largest prime factor is n-1\
    \ because any prime factor > 1 must also\n  -- be larger than 1.\n  -- The largest\
    \ prime factor is n-1 because any prime factor > 1 must also\n  -- be larger than\
    \ 1.\n  -- The largest prime factor is n-1 because any prime factor > 1 must also\n\
    \  -- be larger than 1.\n  -- The largest prime factor is n-1 because any prime\
    \ factor > 1 must also\n  -- be larger than 1.\n  -- The largest prime factor\
    \ is n-1 because any prime factor > 1 must also\n  -- be larger than 1.\n  --\
    \ The largest prime factor is ", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n\
    \  end", "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  -- If n is\
    \ even, return its largest prime factor\n  if n % 2 == 0 then\n    return largest_prime_factor(n\
    \ / 2)\n  end\n  -- If n is odd, return its largest prime factor plus 1\n  local\
    \ m = math.floor(n/2)\n  local p = largest_prime_factor(m)\n  if p ~= nil then\n\
    \    return p\n  end\n  -- If n is prime, return its largest prime factor\n  local\
    \ i = 1\n  while i * i <= n do\n    i = i * i\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then return 1 end", " \
    \   local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n  \
    \          n = n / factor\n        else\n            factor = factor + 1\n   \
    \     end\n    end\n    return factor\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then return 1\
    \ end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- If n is prime, return its largest factor of 5\n  if\
    \ prime_table[n] then return 5 end\n  -- Otherwise, loop through all prime factors\
    \ of n and return the largest one\n  for i = 2, n do\n    if prime_table[i] then\
    \ return i end\n  end\nend", "    local factor = 1\n    while n > 1 do\n     \
    \   if n % factor == 0 then\n            n = n / factor\n        else\n      \
    \      factor = factor + 1\n        end\n    end\n    return factor\nend", " \
    \ -- Base case\n  if n == 1 then\n    return 1\n  end", "  if n < 2 then return\
    \ 1 end\n  local m = 1\n  while n % 2 == 0 do\n    local m = m + 1\n    n = n\
    \ / 2\n  end\n  while n % 3 == 0 do\n    local m = m + 1\n    n = n / 3\n  end\n\
    \  while n % 5 == 0 do\n    local m = m + 1\n    n = n / 5\n  end\n  return m\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor((math.sqrt(n) + 1.0) / 2.0)\n  return largest_prime_factor(m)\
    \ * m end\nend", "    local factors = {}\n    for i = 2, n do\n        if n %\
    \ i == 0 then\n            table.insert(factors, i)\n        end\n    end\n  \
    \  local largest = tonumber(table.max(factors))\n    if largest == n then\n  \
    \      return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  --\
    \ Base case\n  if n == 1 then\n    return 1\n  end", "  -- Base case: n is 1 or\
    \ even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "    local factor\
    \ = 1\n    while n > 1 do\n        if n % factor == 0 then\n            n = n\
    \ / factor\n        else\n            factor = factor + 1\n        end\n    end\n\
    \    return factor\nend", "    local factor = 1\n    while n > 1 do\n        if\
    \ n % factor == 0 then\n            n = n / factor\n        else\n           \
    \ factor = factor * 2\n        end\n    end\n    return factor\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    if #factors == 0 then\n        return 1\n    end\n\
    \    local largest = #factors\n    for i = #factors, 1, -1 do\n        if factors[largest]\
    \ < factors[i] then\n            largest = i\n        end\n    end\n    return\
    \ factors[largest]\nend", "    local factor = 1\n    while n > 1 do\n        if\
    \ n % factor == 0 then\n            n = n / factor\n        else\n           \
    \ factor = factor + 1\n        end\n    end\n    return factor\nend", "  -- Base\
    \ case\n  if n < 2 then\n    return nil\n  end\n  -- If n is prime, return it\n\
    \  if primes[n] then\n    return n\n  end\n  -- If n is even, divide by 2\n  if\
    \ n mod 2 == 0 then\n    return largest_prime_factor(n/2)\n  end\n  -- If n is\
    \ odd, divide by 3 and check the remainder\n  local remainder = n % 3\n  if remainder\
    \ == 0 then\n    return largest_prime_factor(n/3)\n  else\n    return largest_prime_factor(remainder)\n\
    \  end\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n\
    \  -- Base case: n is prime.\n  if n == 2 then return n end\n  -- Find largest\
    \ factor of n that is greater than 1.\n  local max_factor = 1\n  while n > max_factor\
    \ do\n    max_factor = max_factor * 2\n  end\n  -- Divide n by max_factor to find\
    \ the largest prime factor.\n  local factor = 2\n  while n > factor do\n    factor\
    \ = factor * 2\n    n = n / factor\n  end\n  return factor\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all odd\
    \ factors of n and return the largest\n  -- factor of 2 and the largest factor\
    \ of 3\n  for i = 5, n, 2 do\n    if n % i == 0 then\n      return i, 2\n    end\n\
    \    if n % i == 1 then\n      return i, 3\n    end\n  end\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the prime\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  if n < 2 then return nil end\n\
    \  local factor = 1\n  while n > 1 do\n    local prime, err = prime_factor(n)\n\
    \    if prime == nil then return nil end\n    factor = factor * prime\n    n =\
    \ n / prime\n  end\n  return factor\nend", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is prime, return n\n  if n == 2 then return n end\n  -- If\
    \ n is even, return the largest prime factor of n/2\n  if n % 2 == 0 then\n  \
    \  local m = largest_prime_factor(n / 2)\n    if m > n then return m end\n  end\n\
    \  -- If n is odd, return the largest prime factor of 3*n+1\n  local m = largest_prime_factor(3\
    \ * n + 1)\n  if m > n then return m end\n  -- If n is divisible by any prime\
    \ less than or equal to sqrt(n), return n\n  local i = 1\n  while i * i <= n do\n\
    \    if n % i == 0 then\n      local m = largest_prime_factor(n / i)\n      if\
    \ m > n then return m end\n    end\n    i = i + 1\n  end\n  return n\nend", " \
    \ -- The largest prime factor is n-1 (because no prime divides it).\n  -- Hence\
    \ the largest prime factor is n-1.\n  -- The smallest prime factor is 2.\n  --\
    \ Hence the smallest prime factor is 2.\n  -- The largest prime factor is n-1.\n\
    \  -- The smallest prime factor is 2.\n  -- Hence the smallest prime factor is\
    \ 2.\n  -- The largest prime factor is n-1.\n  -- The smallest prime factor is\
    \ 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest prime factor\
    \ is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest prime\
    \ factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest prime\
    \ factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest prime\
    \ factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest\
    \ prime factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest\
    \ prime factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest\
    \ prime factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest\
    \ prime factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- The smallest\
    \ prime factor is 2.\n  -- Hence the smallest prime factor is 2.\n  -- The largest\
    \ prime factor is n-1.\n  -- The smallest prime factor is 2.\n  -- Hence the smallest\
    \ prime factor is 2.\n  -- The largest prime factor is n-1.\n  -- ", "  -- Base\
    \ case: n is 1 or 2.\n  if n == 1 or n == 2 then\n    return n\n  end", "  --\
    \ Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime,\
    \ return its largest factor of 5\n  if prime_table[n] then return 5 end\n  --\
    \ Otherwise, loop through all prime factors of n and return the largest\n  for\
    \ i = 2, n do\n    if prime_table[i] then return i end\n  end\nend", "  -- The\
    \ largest prime factor is n-1 (because n >= 2) and is thus not prime\n  if n <\
    \ 2 then return nil end", "  -- The largest prime factor is n-1 if n is odd and\
    \ n+1 if n is even.\n  -- The largest prime factor is 1 if n is even.\n  -- The\
    \ largest prime factor is -1 if n is odd.\n  -- The largest prime factor is -1\
    \ if n is even.\n  -- The largest prime factor is -1 if n is odd.\n  -- The largest\
    \ prime factor is -1 if n is even.\n  -- The largest prime factor is -1 if n is\
    \ odd.\n  -- The largest prime factor is -1 if n is even.\n  -- The largest prime\
    \ factor is -1 if n is odd.\n  -- The largest prime factor is -1 if n is even.\n\
    \  -- The largest prime factor is -1 if n is odd.\n  -- The largest prime factor\
    \ is -1 if n is even.\n  -- The largest prime factor is -1 if n is odd.\n  --\
    \ The largest prime factor is -1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd.\n  -- The largest prime factor is -1 if n is even.\n  --\
    \ The largest prime factor is -1 if n is odd.\n  -- The largest prime factor is\
    \ -1 if n is even.\n  -- The largest prime factor is -1 if n is odd.\n  -- The\
    \ largest prime factor is -1 if n is even.\n  -- The largest prime factor is -1\
    \ if n is odd.\n  -- The largest prime factor is -1 if n is even.\n  -- The largest\
    \ prime factor is -1 if n is odd.\n  -- The largest prime factor is -1 if n is\
    \ even.\n  -- The largest prime factor is -1 if n is odd.\n  -- The largest prime\
    \ factor is -1 if n is even.\n  -- The largest prime factor is -1 if n is odd.\n\
    \  -- The largest prime factor is -1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd.\n  -- The largest prime factor is -1 if n is even.\n  --\
    \ The largest prime factor is -1 if n is odd.\n  -- The largest prime factor is\
    \ -1 if n is even.\n  -- The largest prime factor is -1 if n is odd.\n  -- The\
    \ largest prime factor is -1 if n is even.\n  -- The largest prime factor is -1\
    \ if n is odd.\n  -- The largest prime factor is -1 if n is even.\n  ", "  --\
    \ Base case: n is 1 or even. Return 1.\n  if n == 1 or n % 2 == 0 then return\
    \ 1 end\n  -- Base case: n is prime. Return n.\n  if n == 2 then return n end\n\
    \  -- Find largest factor of n that is greater than 1.\n  local m = n / 2\n  while\
    \ m > 1 do\n    local r = n % m\n    if r == 0 then break end\n    m = m * 2\n\
    \  end\n  return m\nend", "    local factors = {}\n    local i = 1\n    while\
    \ i <= math.sqrt(n) do\n        if n % i == 0 then\n            factors[i] = i\n\
    \            n = n / i\n        else\n            i = i + 1\n        end\n   \
    \ end\n    return factors[#factors]\nend", "    local factor = 1\n    while n\
    \ > 1 do\n        if n % factor == 0 then\n            n = n / factor\n      \
    \  else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \ -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If n is prime,\
    \ return its prime factors.\n  if prime_table[n] then return prime_table[n] end\n\
    \  -- If n is composite and larger than the largest prime factor seen so far,\n\
    \  -- return the largest prime factor seen so far.\n  if n > largest_prime_factor_seen\
    \ then\n    largest_prime_factor_seen = n\n  end\n  -- Otherwise, loop through\
    \ each prime factor of n and return the largest.\n  for i = 2, n do\n    if n\
    \ % i == 0 then\n      largest_prime_factor_seen = i\n    end\n  end\n  return\
    \ largest_prime_factor_seen\nend", "  -- Base case: n is 1 or even.\n  if n ==\
    \ 1 then return 2 end\n  -- If n is prime, return its prime factors.\n  if primes[n]\
    \ then return primes[n] end\n  -- If n is composite and has no prime factors,\
    \ return its square root.\n  if n % 2 == 0 then return math.sqrt(n) end\n  --\
    \ Otherwise, divide the number by its largest prime factor.\n  local max_factor\
    \ = 1\n  local max_factor_index = 1\n  for i = 2, n do\n    -- If this prime factor\
    \ is larger than the current largest factor, set it.\n    if primes[i] and primes[i]\
    \ >= max_factor then\n      max_factor = primes[i]\n      max_factor_index = i\n\
    \    end\n  end\n  return max_factor_index\nend", "  -- Base case: n is 1 or 2.\n\
    \  if n == 1 or n == 2 then\n    return n\n  -- Sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    \  elseif n < 2 then\n    return nil\n  else\n    -- Find all prime factors of\
    \ n.\n    local prime_factors = {}\n    for i = 2, n do\n      -- If n is divisible\
    \ by any prime factor of i, then n is not prime.\n      for _, p in ipairs(prime_factors)\
    \ do\n        if n % p == 0 then\n          return nil\n        end\n      end\n\
    \      -- Add i to prime_factors.\n      table.insert(prime_factors, i)\n    end\n\
    \    -- Return the largest prime factor of n.\n    return table.max(prime_factors)\n\
    \  end\nend", "  -- Base case\n  if n < 2 then\n    return nil\n  end\n  -- If\
    \ n is prime, return its prime factors\n  if primes[n] then\n    return primes[n]\n\
    \  end\n  -- If n is divisible by 2, return its prime factors\n  if n % 2 == 0\
    \ then\n    return primes[n / 2]\n  end\n  -- If n is divisible by 3, return its\
    \ prime factors\n  if n % 3 == 0 then\n    return primes[n / 3]\n  end\n  -- If\
    \ n is divisible by 5, return its prime factors\n  if n % 5 == 0 then\n    return\
    \ primes[n / 5]\n  end\n  -- If n is divisible by 7, return its prime factors\n\
    \  if n % 7 == 0 then\n    return primes[n / 7]\n  end\n  -- If n is divisible\
    \ by 11, return its prime factors\n  if n % 11 == 0 then\n    return primes[n\
    \ / 11]\n  end\n  -- If n is divisible by 13, return its prime factors\n  if n\
    \ % 13 == 0 then\n    return primes[n / 13]\n  end\n  -- If n is divisible by\
    \ 17, return its prime factors\n  if n % 17 == 0 then\n    return primes[n / 17]\n\
    \  end\n  -- If n is divisible by 19, return its prime factors\n  if n % 19 ==\
    \ 0 then\n    return primes[n / 19]\n  end\n  -- If n is divisible by 23, return\
    \ its prime factors\n  if n % 23 == 0 then\n    return primes[n / 23]\n  end\n\
    \  -- If n is divisible by 29, return its prime factors\n  if n % 29 == 0 then\n\
    \    return primes[n / 29]\n  end\n  -- If n is divisible by 31, return its prime\
    \ factors\n  if n % 31 == 0 then\n    return primes[n / 31]\n  end\n  -- If n\
    \ is divisible by 37, return its prime factors\n  if n % 37 == 0 then\n    return\
    \ primes[n / 37]\n  end\n  -- If n is divisible by 41, return its prime factors\n\
    \  if n % 41 == 0 then\n    return primes[n / 41]\n  end\n  -- If n is divisible\
    \ by 43, return its prime factors\n  if n % 43 == 0 then\n    return primes[n\
    \ / 43]\n  end\n  -- If n is divisible by 47, return its prime factors\n  if n\
    \ % 47 == 0 then\n    return primes[n / 47", "  -- Base case: n is less than or\
    \ equal to 1.\n  if n <= 1 then\n    return nil\n  end", "  -- Base case: n is\
    \ prime.\n  if n == 1 then return 1 end", "    local factors = {}\n    for i =\
    \ 2, n do\n        local factor = 1\n        for j = 2, i do\n            if i\
    \ % j == 0 then\n                factor = j\n                break\n         \
    \   end\n        end\n        if factor > 1 then\n            table.insert(factors,\
    \ factor)\n        end\n    end\n    table.sort(factors)\n    return factors[#factors]\n\
    end", "  -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n\
    \  -- The largest prime factor is 1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd.\n  -- The largest prime factor is -2 if n is odd and n+1\
    \ is even.\n  -- The largest prime factor is -2 if n is even and n+1 is odd.\n\
    \  -- The largest prime factor is -3 if n is odd and n+2 is even.\n  -- The largest\
    \ prime factor is -3 if n is even and n+2 is odd.\n  -- The largest prime factor\
    \ is -4 if n is odd and n+3 is even.\n  -- The largest prime factor is -4 if n\
    \ is even and n+3 is odd.\n  -- The largest prime factor is -5 if n is odd and\
    \ n+4 is even.\n  -- The largest prime factor is -5 if n is even and n+4 is odd.\n\
    \  -- The largest prime factor is -6 if n is odd and n+5 is even.\n  -- The largest\
    \ prime factor is -6 if n is even and n+5 is odd.\n  -- The largest prime factor\
    \ is -7 if n is odd and n+6 is even.\n  -- The largest prime factor is -7 if n\
    \ is even and n+6 is odd.\n  -- The largest prime factor is -8 if n is odd and\
    \ n+7 is even.\n  -- The largest prime factor is -8 if n is even and n+7 is odd.\n\
    \  -- The largest prime factor is -9 if n is odd and n+8 is even.\n  -- The largest\
    \ prime factor is -9 if n is even and n+8 is odd.\n  -- The largest prime factor\
    \ is -10 if n is odd and n+9 is even.\n  -- The largest prime factor is -10 if\
    \ n is even and n+9 is odd.\n  -- The largest prime factor is -11 if n is odd\
    \ and n+10 is even.\n  -- The largest prime factor is -11 if n is even and n+10\
    \ is odd.\n  -- The largest prime factor is -12 if n is odd and n+11 is even.\n\
    \  -- The largest prime factor is -12 if n is even and n+11 is odd.\n  -- The\
    \ largest prime factor is -13 if n is odd and n+12 is even.", "  -- Base case:\
    \ n is prime.\n  if n == 1 then return 1 end", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2\
    \ == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n \
    \ if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest factor\
    \ of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise, return its largest\
    \ factor of 7\n  return 7\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then return\
    \ 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop through the prime factors of n and return\
    \ the largest one\n  for i = 2, n do\n    if n % i == 0 then\n      return i\n\
    \    end\n  end\nend", "  -- Base case: n is 1 or even.\n  if n <= 1 then return\
    \ 1 end\n  -- If n is prime, return its largest factor of n.\n  if prime_table[n]\
    \ then return prime_table[n] end\n  -- Otherwise, find the largest factor of n\
    \ by trial division.\n  local max_factor = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      max_factor = i\n      break\n    end\n  end\n  -- If n is not\
    \ prime, return its largest factor of n.\n  return max_factor\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is prime, return it\n  if primes[n]\
    \ then return n end\n  -- If n is divisible by 2, return 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is divisible by 3, return 3\n  if n % 3 == 0 then return\
    \ 3 end\n  -- If n is divisible by 5, return 5\n  if n % 5 == 0 then return 5\
    \ end\n  -- If n is divisible by 7, return 7\n  if n % 7 == 0 then return 7 end\n\
    \  -- If n is divisible by 11, return 11\n  if n % 11 == 0 then return 11 end\n\
    \  -- If n is divisible by 13, return 13\n  if n % 13 == 0 then return 13 end\n\
    \  -- If n is divisible by 17, return 17\n  if n % 17 == 0 then return 17 end\n\
    \  -- If n is divisible by 19, return 19\n  if n % 19 == 0 then return 19 end\n\
    \  -- If n is divisible by 23, return 23\n  if n % 23 == 0 then return 23 end\n\
    \  -- If n is divisible by 29, return 29\n  if n % 29 == 0 then return 29 end\n\
    \  -- If n is divisible by 31, return 31\n  if n % 31 == 0 then return 31 end\n\
    \  -- If n is divisible by 37, return 37\n  if n % 37 == 0 then return 37 end\n\
    \  -- If n is divisible by 41, return 41\n  if n % 41 == 0 then return 41 end\n\
    \  -- If n is divisible by 43, return 43\n  if n % 43 == 0 then return 43 end\n\
    \  -- If n is divisible by 47, return 47\n  if n % 47 == 0 then return 47 end\n\
    \  -- If n is divisible by 53, return 53\n  if n % 53 == 0 then return 53 end\n\
    \  -- If n is divisible by 59, return 59\n  if n % 59 == 0 then return 59 end\n\
    \  -- If n is divisible by 61, return 61\n  if n % 61 == 0 then return 61 end\n\
    \  -- If n is divisible by 67, return 67\n  if n % 67 == 0 then return 67 end\n\
    \  -- If n is divisible by 71, return 71\n  if n % 71 == 0 then return 71 end\n\
    \  -- If n is divisible by 73, return 73\n  if n % 73 == 0 then return 73 end\n\
    \  -- If n is divisible ", "  -- Base case\n  if n == 1 then\n    return 1\n \
    \ end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        end\n  \
    \  end\n    return table.remove(factors)\nend", "  -- Base case\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case: n is 1 or even.\n  if n == 1 then return\
    \ 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then return 2 end\n  --\
    \ Base case: n is 3 or even.\n  if n % 2 == 0 then return 3 end\n  -- Base case:\
    \ n is odd.\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return\
    \ i end\n    i = i + 2\n  end\n  return n\nend", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2\
    \ == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n \
    \ if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all odd numbers\
    \ up to sqrt(n)\n  for i = 5, math.sqrt(n), 2 do\n    -- If n is divisible by\
    \ i, return i\n    if n % i == 0 then return i end\n  end\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    return table.remove(factors,\
    \ 1)\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end\n\
    \  -- Find the largest factor of n that is smaller than n.\n  local max_factor\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_factor = i\n    end\n\
    \  end\n  -- Return the largest prime factor of n.\n  return max_factor\nend",
  "  if n < 2 then\n    return nil\n  end\n  local factors = {}\n  for i = 2, n do\n\
    \    local p = i\n    while p * p <= n do\n      p = p * 2\n    end\n    factors[p]\
    \ = factors[p] or 1\n  end\n  local largest = 1\n  for i = 2, n do\n    if factors[i]\
    \ ~= nil then\n      largest = i\n    end\n  end\n  return largest\nend", "  --\
    \ Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  if n % 2 == 1 then return largest_prime_factor(n / 2) end\n  -- If n is prime,\
    \ return its largest prime factor\n  local p = 2\n  while p * p <= m do\n    if\
    \ n % p == 0 then\n      return p\n    end\n    p = p + 1\n  end\n  return n\n\
    end", "  -- Base case\n  if n < 2 then return 1 end", "  -- Base case\n  if n\
    \ < 2 then\n    return nil\n  end\n  -- If n is prime, return it\n  if prime_table[n]\
    \ then\n    return n\n  end\n  -- If n is divisible by 2, return it\n  if n %\
    \ 2 == 0 then\n    return n\n  end\n  -- If n is divisible by 3, return its largest\
    \ factor of 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is divisible\
    \ by 5, return its largest factor of 5\n  if n % 5 == 0 then\n    return 5\n \
    \ end\n  -- If n is divisible by 7, return its largest factor of 7\n  if n % 7\
    \ == 0 then\n    return 7\n  end\n  -- If n is divisible by 11, return its largest\
    \ factor of 11\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n is divisible\
    \ by 13, return its largest factor of 13\n  if n % 13 == 0 then\n    return 13\n\
    \  end\n  -- If n is divisible by 17, return its largest factor of 17\n  if n\
    \ % 17 == 0 then\n    return 17\n  end\n  -- If n is divisible by 19, return its\
    \ largest factor of 19\n  if n % 19 == 0 then\n    return 19\n  end\n  -- If n\
    \ is divisible by 23, return its largest factor of 23\n  if n % 23 == 0 then\n\
    \    return 23\n  end\n  -- If n is divisible by 29, return its largest factor\
    \ of 29\n  if n % 29 == 0 then\n    return 29\n  end\n  -- If n is divisible by\
    \ 31, return its largest factor of 31\n  if n % 31 == 0 then\n    return 31\n\
    \  end\n  -- If n is divisible by 37, return its largest factor of 37\n  if n\
    \ % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by 41, return its\
    \ largest factor of 41\n  if n % 41 == 0 then\n    return 41\n  end\n  -- If n\
    \ is divisible by 43, return its largest factor of 43\n  if n % 43 == 0 then\n\
    \    return 43\n  end\n  -- If n is divisible by 47, return its largest factor\
    \ of 47\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n is divisible by\
    \ 53, return its largest factor of 53\n  if n % 53 == 0 then\n    return 53\n\
    \  end\n  -- If n is divisible by 59, return its largest factor of 59\n  if n\
    \ % 59 == 0 then\n    return 59\n  end\n  -- If ", "  -- Base case\n  if n < 2\
    \ then return 1 end\n  -- If n is prime, return it\n  if primes[n] then return\
    \ n end\n  -- If n is even, divide by 2\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, divide by 3 and return the largest prime factor\n\
    \  local m = n / 3\n  local p = largest_prime_factor(m)\n  while p < n do\n  \
    \  m = m / 3\n    p = largest_prime_factor(m)\n  end\n  return p\nend", "  --\
    \ The largest prime factor is n-1 if n is odd and n+1 if n is even.\n  -- The\
    \ largest prime factor is 2 if n is even.\n  -- The largest prime factor is 3\
    \ if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 6 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 8 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 11 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 13 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 17 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 19 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 23 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 29 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 31 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 37 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 43 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 47 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 53 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 59 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 63 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 67 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 73 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 79 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 83 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 89 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 97 if n is odd and greater than 3 if n is even.\n  -- The largest prime factor\
    \ is 103 ", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is prime,\
    \ return n\n  if n == 2 then return n end\n  -- If n is even, return largest prime\
    \ factor of n/2\n  if n % 2 == 0 then\n    local m = largest_prime_factor(n /\
    \ 2)\n    if m > n then return m end\n  end\n  -- If n is odd, return largest\
    \ prime factor of 3*n+1\n  local m = largest_prime_factor(3 * n + 1)\n  if m >\
    \ n then return m end\n  -- If n is prime, return n\n  if n == n then return n\
    \ end\n  -- If n is even, return largest prime factor of n/2\n  if n % 2 == 0\
    \ then\n    local m = largest_prime_factor(n / 2)\n    if m > n then return m\
    \ end\n  end\n  -- If n is odd, return largest prime factor of 3*n+1\n  local\
    \ m = largest_prime_factor(3 * n + 1)\n  if m > n then return m end\n  -- If n\
    \ is prime, return n\n  if n == n then return n end\n  -- If n is even, return\
    \ largest prime factor of n/2\n  if n % 2 == 0 then\n    local m = largest_prime_factor(n\
    \ / 2)\n    if m > n then return m end\n  end\n  -- If n is odd, return largest\
    \ prime factor of 3*n+1\n  local m = largest_prime_factor(3 * n + 1)\n  if m >\
    \ n then return m end\n  -- If n is prime, return n\n  if n == n then return n\
    \ end\n  -- If n is even, return largest prime factor of n/2\n  if n % 2 == 0\
    \ then\n    local m = largest_prime_factor(n / 2)\n    if m > n then return m\
    \ end\n  end\n  -- If n is odd, return largest prime factor of 3*n+1\n  local\
    \ m = largest_prime_factor(3 * n + 1)\n  if m > n then return m end\n  -- If n\
    \ is prime, return n\n  if n == n then return n end\n  -- If n is even, return\
    \ largest prime factor of n/2\n  if n % 2 == 0 then\n    local m = largest_prime_factor(n\
    \ / 2)\n    if m > n then return m end\n  end\n  -- If n is odd, return largest\
    \ prime factor of 3*n+1\n  local m = largest_prime_factor(3 * n + 1)\n  if m >\
    \ n then return m end\n  -- If n", "    local factors = {}\n    local i = 1\n\
    \    while i <= n do\n        local prime = true\n        for j = 2, i do\n  \
    \          if n % j == 0 then\n                prime = false\n               \
    \ break\n            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    return table.max(factors)\n\
    end", "  -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base case\n\
    \  if n < 2 then\n    return nil\n  end", "    local factors = {}\n    for i =\
    \ 2, n do\n        local prime = true\n        for j = 2, i do\n            if\
    \ i % j == 0 then\n                prime = false\n                break\n    \
    \        end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "  -- Base case:\
    \ n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n  end", " \
    \ -- Base case: n is 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return 1\n\
    \  end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  --\
    \ If n is prime, return its largest factor of n.\n  if is_prime(n) then return\
    \ n end\n  -- If n is even, return its largest factor of n.\n  if n % 2 == 0 then\
    \ return largest_prime_factor(n / 2) end\n  -- If n is odd, return its largest\
    \ factor of n.\n  local m = math.floor(n/2)\n  if m % 2 == 0 then return largest_prime_factor(m)\
    \ end\n  -- If n is larger than its largest factor of n, return its largest factor\
    \ of n.\n  return largest_prime_factor(m)\nend", "  -- The largest prime factor\
    \ is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2\
    \ if n is even.\n  -- The largest prime factor is 3 if n is odd.\n  -- The largest\
    \ prime factor is 6 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 7 if n is odd and greater than 3.\n  -- The largest prime factor is 8 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 11 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 13 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 14 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 15 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 16 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 17 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 19 if n is odd and greater than 3.\n  -- The largest prime factor is 20 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 21 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 22 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 23 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 24 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 25 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 26 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 27 if n is odd and greater than 3.\n  -- The largest prime factor is 28 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 29 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 30 if n is odd and greater\
    \ than 3.\n  -- The largest prime factor is 31 if n is odd and greater than 3.\n\
    \  -- The largest prime factor is 32 if n is odd and greater than 3.\n  -- The\
    \ largest prime factor is 33 if n is odd and greater than 3.\n  -- The largest\
    \ prime factor is 34 if n is odd and greater than 3.\n  -- The largest prime factor\
    \ is 35 if n is odd and greater than 3.\n  -- The largest prime factor is 36 if\
    \ n is odd and greater than 3.\n  -- The largest prime factor is 37 if n is odd\
    \ and greater than 3.\n  -- The largest prime factor is 38 if n is odd and greater\
    \ than ", "  -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n\
    \  -- The largest prime factor is 2 if n is odd and 1 if n is even.\n  -- The\
    \ largest prime factor is 1 if n is odd and -1 if n is even.\n  -- The largest\
    \ prime factor is -1 if n is even and -2 if n is odd.\n  -- The largest prime\
    \ factor is -2 if n is even and -1 if n is odd.\n  -- The largest prime factor\
    \ is -2 if n is even and -1 if n is odd.\n  -- The largest prime factor is -2\
    \ if n is even and -1 if n is odd.\n  -- The largest prime factor is -2 if n is\
    \ even and -1 if n is odd.\n  -- The largest prime factor is -2 if n is even and\
    \ -1 if n is odd.\n  -- The largest prime factor is -2 if n is even and -1 if\
    \ n is odd.\n  -- The largest prime factor is -2 if n is even and -1 if n is odd.\n\
    \  -- The largest prime factor is -2 if n is even and -1 if n is odd.\n  -- The\
    \ largest prime factor is -2 if n is even and -1 if n is odd.\n  -- The largest\
    \ prime factor is -2 if n is even and -1 if n is odd.\n  -- The largest prime\
    \ factor is -2 if n is even and -1 if n is odd.\n  -- The largest prime factor\
    \ is -2 if n is even and -1 if n is odd.\n  -- The largest prime factor is -2\
    \ if n is even and -1 if n is odd.\n  -- The largest prime factor is -2 if n is\
    \ even and -1 if n is odd.\n  -- The largest prime factor is -2 if n is even and\
    \ -1 if n is odd.\n  -- The largest prime factor is -2 if n is even and -1 if\
    \ n is odd.\n  -- The largest prime factor is -2 if n is even and -1 if n is odd.\n\
    \  -- The largest prime factor is -2 if n is even and -1 if n is odd.\n  -- The\
    \ largest prime factor is -2 if n is even and -1 if n is odd.\n  -- The largest\
    \ prime factor is -2 if n is even and -1 if n is odd.\n  -- The largest prime\
    \ factor is -2 if n", "    local factors = {}\n    local i = 1\n    while i <=\
    \ math.sqrt(n) do\n        local prime = true\n        for j = 1, i do\n     \
    \       if n % i == 0 then\n                prime = false\n                break\n\
    \            end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n        i = i + 1\n    end\n    local largest = #factors\n\
    \    if largest == 0 then\n        return nil\n    end\n    return factors[largest]\n\
    end", "  -- Base case\n  if n == 1 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest factor of 3\n  if n % 3 == 0\
    \ then return largest_prime_factor(n / 3) end\n  -- If n is prime, return its\
    \ largest factor of 5\n  if prime_table[n] then return largest_prime_factor(n\
    \ / 5) end\n  -- If n is divisible by 2, return its largest factor of 3\n  if\
    \ n % 2 == 0 then return largest_prime_factor(n / 3) end\n  -- If n is divisible\
    \ by 3, return its largest factor of 5\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 5) end\n  -- If n is divisible by 5, return its largest factor of 7\n  if\
    \ n % 5 == 0 then return largest_prime_factor(n / 7) end\n  -- If n is divisible\
    \ by 7, return its largest factor of 11\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 11) end\n  -- If n is divisible by 11, return its largest factor of 13\n \
    \ if n % 11 == 0 then return largest_prime_factor(n / 13) end\n  -- If n is divisible\
    \ by 13, return its largest factor of 17\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 17) end\n  -- If n is divisible by 17, return its largest factor of 19\n \
    \ if n % 17 == 0 then return largest_prime_factor(n / 19) end\n  -- If n is divisible\
    \ by 19, return its largest factor of 23\n  if n % 19 == 0 then return largest_prime_factor(n\
    \ / 23) end\n  -- If n is divisible by 23, return its largest factor of 29\n \
    \ if n % 23 == 0 then return largest_prime_factor(n / 29) end\n  -- If n is divisible\
    \ by 29, return its largest factor of 31\n  if n % 29 == 0 then return largest_prime_factor(n\
    \ / 31) end\n  -- If n is divisible by 31, return its largest factor of 37\n \
    \ if n % 31 == 0 then return largest_prime_factor(n / 37) end\n  -- If n is divisible\
    \ by 37, return its largest factor of 41\n  if n % 37 == 0 then return largest_prime_factor(n\
    \ / 41) end\n  -- If n", "  -- Base case: n is prime.\n  if n == 1 then\n    return\
    \ 1\n  end", "  if n < 2 then return 1 end\n  local i = 1\n  while i * i <= n\
    \ do\n    if n % i == 0 then\n      n = n / i\n      return i\n    end\n    i\
    \ = i + 1\n  end\n  return n\nend", "  -- Base case\n  if n < 2 then return 1\
    \ end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Otherwise, loop through all odd factors of n and return\
    \ the largest\n  for i = 5, n, 2 do\n    if n % i == 0 then\n      return i\n\
    \    end\n  end\nend", "    local factor = 1\n    local i = 1\n    while i * factor\
    \ <= n do\n        factor = factor * i\n        i = i + 1\n    end\n    return\
    \ factor\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(math.sqrt(n))\n  local p = 2\n  while p <= m do\n    if n % p\
    \ == 0 then\n      return p\n    end\n    p = p * 2 + 1\n  end\n  return n\nend",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its smallest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor\n  local m = math.floor(math.sqrt(n))\n\
    \  while m ~= 1 do\n    if n % m == 0 then return m end\n    m = m / 2\n  end\n\
    \  return n\nend", "    local factor = 1\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            factor = i\n            n = n /\
    \ i\n        else\n            i = i + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 or n % 2 == 0 then\n    return\
    \ 1\n  end", "    local factor = 1\n    while n > 1 do\n        if n % factor\
    \ == 0 then\n            n = n / factor\n        else\n            factor = factor\
    \ + 1\n        end\n    end\n    return factor\nend", "  -- Base case\n  if n\
    \ < 2 then return 1 end", "  -- Base case\n  if n < 2 then return 1 end\n  --\
    \ If n is even, return its largest factor of 2\n  if n % 2 == 0 then return 2\
    \ end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop through all odd factors of n and return the\
    \ largest\n  for i = 4, n, 2 do\n    if n % i == 0 then\n      return i\n    end\n\
    \  end\nend", "  if n < 2 then\n    return nil\n  end\n  local factors = {}\n\
    \  local i = 1\n  while i <= n do\n    local prime = true\n    for j = 2, i do\n\
    \      if n % j == 0 then\n        prime = false\n        break\n      end\n \
    \   end\n    if prime then\n      table.insert(factors, i)\n    end\n    i = i\
    \ + 1\n  end\n  if #factors == 0 then\n    return nil\n  end\n  local largest\
    \ = #factors\n  for i = #factors, 1, -1 do\n    if factors[largest] < factors[i]\
    \ then\n      largest = i\n    end\n  end\n  return factors[largest]\nend", " \
    \ -- Base case: n is prime.\n  if n == 1 then return 1 end\n  -- Base case: n\
    \ is even.\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  --\
    \ Find the largest factor of n that is smaller than n.\n  local function factor(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than n.\n  local function factor(n)\n    local i\
    \ = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return i\n \
    \     end\n      i = i + 1\n    end\n    return n\n  end\n  -- Find the largest\
    \ factor of n that is smaller than ", "  -- Base case: n is prime.\n  if n ==\
    \ 1 then\n    return 1\n  end", "  -- Base case\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n\
    \ is odd, return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n\
    \  -- If n is prime, return its largest factor of 5\n  if prime_table[n] then\
    \ return 5 end\n  -- Otherwise, loop through all prime factors of n and return\
    \ the largest one\n  for i = 2, n do\n    if prime_table[i] then return i end\n\
    \  end\nend", "    local factors = {}\n    for i = 2, n do\n        local factor\
    \ = 1\n        for j = 2, i do\n            if i % j == 0 then\n             \
    \   factor = j\n                break\n            end\n        end\n        if\
    \ factor ~= 1 then\n            table.insert(factors, factor)\n        end\n \
    \   end\n    table.sort(factors)\n    return factors[#factors]\nend", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd,\
    \ return its largest prime factor plus 1\n  local m = math.floor(n/2)\n  if n\
    \ % 2 == 1 then return largest_prime_factor(m) end\n  -- Otherwise, loop over\
    \ all odd factors of n\n  local i = 3\n  while i * i <= n do\n    if n % i ==\
    \ 0 then return largest_prime_factor(i * m) end\n    i = i + 2\n  end\n  return\
    \ n\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(n/2)\n  local p = largest_prime_factor(m)\n  -- If m is odd,\
    \ return its largest prime factor plus one\n  if m % 2 == 1 then return p + 1\
    \ end\n  -- Otherwise, return its largest prime factor\n  return p\nend", "  if\
    \ n < 2 then\n    return nil\n  end\n  if n == 2 then\n    return 2\n  end\n \
    \ local m = math.floor(n/2)\n  local i = 2\n  while i <= m do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n    i = i * 2\n  end\n  return nil\nend", " \
    \ -- Base case: n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n\
    \  end\n  -- Base case: n is prime.\n  if n == 2 then\n    return 2\n  end\n \
    \ -- Find the largest factor of n that is less than or equal to n.\n  local max_factor\
    \ = 1\n  local max_factor_index = 1\n  for i = 2, n do\n    -- If the factor of\
    \ n is greater than the largest factor so far, then\n    -- update the largest\
    \ factor and index.\n    if n % i == 0 then\n      if max_factor < i then\n  \
    \      max_factor = i\n        max_factor_index = i\n      end\n    end\n  end\n\
    \  return max_factor\nend", "  -- Base case: n is prime.\n  if n == 1 then\n \
    \   return 1\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n\
    \ is even, return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ p = 2\n  while p * p <= n do\n    if n % p == 0 then\n      return p\n    end\n\
    \    p = p + 1\n  end\n  return n\nend", "  -- Base case\n  if n < 2 then\n  \
    \  return nil\n  end", "  -- Base case\n  if n == 1 then return 1 end", "  --\
    \ The largest prime factor is n-1 if n is odd and n+1 if n is even.\n  -- The\
    \ largest prime factor is 2 if n is odd and 1 if n is even.\n  -- The largest\
    \ prime factor is 1 if n is odd and -1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd and -2 if n is even.\n  -- The largest prime factor is -2\
    \ if n is odd and -3 if n is even.\n  -- The largest prime factor is -3 if n is\
    \ odd and -4 if n is even.\n  -- The largest prime factor is -4 if n is odd and\
    \ -5 if n is even.\n  -- The largest prime factor is -5 if n is odd and -6 if\
    \ n is even.\n  -- The largest prime factor is -6 if n is odd and -7 if n is even.\n\
    \  -- The largest prime factor is -7 if n is odd and -8 if n is even.\n  -- The\
    \ largest prime factor is -8 if n is odd and -9 if n is even.\n  -- The largest\
    \ prime factor is -9 if n is odd and -10 if n is even.\n  -- The largest prime\
    \ factor is -10 if n is odd and -11 if n is even.\n  -- The largest prime factor\
    \ is -11 if n is odd and -12 if n is even.\n  -- The largest prime factor is -12\
    \ if n is odd and -13 if n is even.\n  -- The largest prime factor is -13 if n\
    \ is odd and -14 if n is even.\n  -- The largest prime factor is -14 if n is odd\
    \ and -15 if n is even.\n  -- The largest prime factor is -15 if n is odd and\
    \ -16 if n is even.\n  -- The largest prime factor is -16 if n is odd and -17\
    \ if n is even.\n  -- The largest prime factor is -17 if n is odd and -18 if n\
    \ is even.\n  -- The largest prime factor is -18 if n is odd and -19 if n is even.\n\
    \  -- The largest prime factor is -19 if n is odd and -20 if n is even.\n  --\
    \ The largest prime factor is -20 if n is odd and -21 if n is even.\n  -- The\
    \ largest prime factor is -21 if n is odd and -22 if n is even.\n  -- The largest\
    \ prime factor is -22 if n is odd and -23 if n is even.\n  -- The largest prime ",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is prime, return its prime\
    \ factors\n  if primes[n] then return primes[n] end\n  -- If n is divisible by\
    \ 2, return 2\n  if n % 2 == 0 then return 2 end\n  -- If n is divisible by 3,\
    \ return 3\n  if n % 3 == 0 then return 3 end\n  -- If n is divisible by 5, return\
    \ 5\n  if n % 5 == 0 then return 5 end\n  -- If n is divisible by 7, return 7\n\
    \  if n % 7 == 0 then return 7 end\n  -- If n is divisible by 11, return 11\n\
    \  if n % 11 == 0 then return 11 end\n  -- If n is divisible by 13, return 13\n\
    \  if n % 13 == 0 then return 13 end\n  -- If n is divisible by 17, return 17\n\
    \  if n % 17 == 0 then return 17 end\n  -- If n is divisible by 19, return 19\n\
    \  if n % 19 == 0 then return 19 end\n  -- If n is divisible by 23, return 23\n\
    \  if n % 23 == 0 then return 23 end\n  -- If n is divisible by 29, return 29\n\
    \  if n % 29 == 0 then return 29 end\n  -- If n is divisible by 31, return 31\n\
    \  if n % 31 == 0 then return 31 end\n  -- If n is divisible by 33, return 33\n\
    \  if n % 33 == 0 then return 33 end\n  -- If n is divisible by 37, return 37\n\
    \  if n % 37 == 0 then return 37 end\n  -- If n is divisible by 41, return 41\n\
    \  if n % 41 == 0 then return 41 end\n  -- If n is divisible by 43, return 43\n\
    \  if n % 43 == 0 then return 43 end\n  -- If n is divisible by 47, return 47\n\
    \  if n % 47 == 0 then return 47 end\n  -- If n is divisible by 53, return 53\n\
    \  if n % 53 == 0 then return 53 end\n  -- If n is divisible by 59, return 59\n\
    \  if n % 59 == 0 then return 59 end\n  -- If n is divisible by 61, return 61\n\
    \  if n % 61 == 0 then return 61 end\n  -- If n is divisible by 67, return 67\n\
    \  if n % 67 == 0 then return 67 end\n  -- If n is divisible by 71, return 71\n\
    \  if n % 71 == 0 then return 71 end\n  -- If ", "  -- Base case: n is 1 or even.\
    \ Return 1.\n  if n == 1 then\n    return 1\n  end\n  -- Base case: n is prime.\
    \ Return n.\n  if n <= 1 then\n    return n\n  end\n  -- Base case: n is even.\
    \ Return largest prime factor of n / 2.\n  if n % 2 == 0 then\n    return largest_prime_factor(n\
    \ / 2)\n  end\n  -- Base case: n is odd\n  local m = math.floor(math.sqrt(n))\n\
    \  -- If m is prime, return m / 2\n  if m == n then\n    return m / 2\n  end\n\
    \  -- If m is odd, return largest prime factor of m / 2\n  if m % 2 == 1 then\n\
    \    return largest_prime_factor(m / 2)\n  end\n  -- If m is even, return largest\
    \ prime factor of (m + 1) / 2\n  return largest_prime_factor((m + 1) / 2)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
