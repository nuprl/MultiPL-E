name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n\
    \ is odd, return its largest factor of 5\n  if n % 3 == 0 then return 5 end\n\
    \  -- If n is odd, return its largest factor of 7\n  if n % 5 == 0 then return\
    \ 7 end\n  -- If n is odd, return its largest factor of 11\n  if n % 7 == 0 then\
    \ return 11 end\n  -- If n is odd, return its largest factor of 13\n  if n % 11\
    \ == 0 then return 13 end\n  -- If n is odd, return its largest factor of 17\n\
    \  if n % 13 == 0 then return 17 end\n  -- If n is odd, return its largest factor\
    \ of 19\n  if n % 17 == 0 then return 19 end\n  -- If n is odd, return its largest\
    \ factor of 23\n  if n % 19 == 0 then return 23 end\n  -- If n is odd, return\
    \ its largest factor of 29\n  if n % 23 == 0 then return 29 end\n  -- If n is\
    \ odd, return its largest factor of 31\n  if n % 29 == 0 then return 31 end\n\
    \  -- If n is odd, return its largest factor of 37\n  if n % 31 == 0 then return\
    \ 37 end\n  -- If n is odd, return its largest factor of 41\n  if n % 37 == 0\
    \ then return 41 end\n  -- If n is odd, return its largest factor of 43\n  if\
    \ n % 41 == 0 then return 43 end\n  -- If n is odd, return its largest factor\
    \ of 47\n  if n % 43 == 0 then return 47 end\n  -- If n is odd, return its largest\
    \ factor of 53\n  if n % 47 == 0 then return 53 end\n  -- If n is odd, return\
    \ its largest factor of 59\n  if n % 53 == 0 then return 59 end\n  -- If n is\
    \ odd, return its largest factor of 61\n  if n % 59 == 0 then return 61 end\n\
    \  -- If n is odd, return its largest factor of 67\n  if n % 61 == 0 then return\
    \ 67 end\n  -- If n is odd, return its largest factor of 71\n  if n % 67 == 0\
    \ then return 71 end\n  -- If n is odd, return its largest factor of 73\n", " \
    \ -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factors =\
    \ {}\n    local i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n            n = n / i\n        else\n \
    \           i = i + 1\n        end\n    end\n    return table.remove(factors)\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If\
    \ n is prime, return its prime factors.\n  if prime_table[n] then return prime_table[n]\
    \ end\n  -- Otherwise, find the largest prime factor of n.\n  local max_factor\
    \ = 1\n  for i = 2, n do\n    -- If n is divisible by i, n is not a prime factor\
    \ of n.\n    if n % i == 0 then break end\n    -- Otherwise, find the largest\
    \ factor of i that is also a factor of n.\n    if max_factor < i then max_factor\
    \ = i end\n  end\n  return max_factor\nend", "    local factors = {}\n    for\
    \ i = 2, n do\n        if n % i == 0 then\n            table.insert(factors, i)\n\
    \        end\n    end\n    local largest = table.remove(factors, 1)\n    if largest\
    \ == 1 then\n        return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor(math.sqrt(n))\n  local p = largest_prime_factor(m)\n  if p >\
    \ m then return p end\n  -- Otherwise, loop over all odd factors and return the\
    \ largest one\n  local i = 1\n  while i * i <= n do\n    if n % i == 0 then return\
    \ i end\n    i = i + 1\n  end\n  return n\nend", "  -- Base case\n  if n == 1\
    \ then return 1 end\n  -- If n is even, return its largest factor of 2\n  if n\
    \ % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd, return\
    \ its largest factor of 3\n  if n % 3 == 0 then return largest_prime_factor(n\
    \ / 3) end\n  -- If n is prime, return its largest factor of 5\n  -- The prime\
    \ factors of 5 are 5, 7, 11, and 13\n  if prime_table[n] == 1 then return largest_prime_factor(n\
    \ / 5) end\n  -- If n is divisible by 5, return its largest factor of 7\n  if\
    \ n % 5 == 0 then return largest_prime_factor(n / 7) end\n  -- If n is divisible\
    \ by 7, return its largest factor of 11\n  if n % 7 == 0 then return largest_prime_factor(n\
    \ / 11) end\n  -- If n is divisible by 11, return its largest factor of 13\n \
    \ if n % 11 == 0 then return largest_prime_factor(n / 13) end\n  -- If n is divisible\
    \ by 13, return its largest factor of 17\n  if n % 13 == 0 then return largest_prime_factor(n\
    \ / 17) end\n  -- If n is divisible by 17, return its largest factor of 19\n \
    \ if n % 17 == 0 then return largest_prime_factor(n / 19) end\n  -- If n is divisible\
    \ by 19, return its largest factor of 23\n  if n % 19 == 0 then return largest_prime_factor(n\
    \ / 23) end\n  -- If n is divisible by 23, return its largest factor of 29\n \
    \ if n % 23 == 0 then return largest_prime_factor(n / 29) end\n  -- If n is divisible\
    \ by 29, return its largest factor of 31\n  if n % 29 == 0 then return largest_prime_factor(n\
    \ / 31) end\n  -- If n is divisible by 31, return its largest factor of 37\n \
    \ if n % 31 == 0 then return largest_prime_factor(n / 37) end\n  -- If n is divisible\
    \ by 37, return its largest factor of 41\n  if n % 37 == 0 then return largest_prime_factor(n\
    \ / 41) end\n  -- If n is divisible by 41, return its largest factor of 43\n \
    \ if n % 41 == 0 then return largest_prime_factor(n / 43) end\n  -- If n is divisible\
    \ by 43, return its largest factor of 47\n  if n % ", "  -- Base case: n is prime.\n\
    \  if n == 1 then return 1 end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case: n is 1 or even.\n  if n <= 1 then return\
    \ n end\n  -- Find the largest factor of n that is smaller than n.\n  local function\
    \ factor(n)\n    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n\
    \        return i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest\
    \ factor of n that is larger than n.\n  local function factor_largest_prime(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is smaller than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is smaller than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_to_n(n)\n\
    \    local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n  end\n  -- Find the largest factor\
    \ of n that is larger than or equal to n.\n  local function factor_largest_prime_or_equal_or_equal_to_n_or_equal_",
  "  -- Base case\n  if n < 2 then\n    return nil\n  end", "    local factors = {}\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    local largest = #factors\n    if largest == 0\
    \ then\n        return nil\n    end\n    largest = factors[largest]\n    for i\
    \ = 2, n do\n        if n % i == 0 then\n            largest = i\n        end\n\
    \    end\n    return largest\nend", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end\n  -- If n is prime, return n\n  if n == 2 then\n    return n\n \
    \ end\n  -- If n is even, return its largest prime factor\n  if n % 2 == 0 then\n\
    \    return largest_prime_factor(n / 2)\n  end\n  -- If n is odd, return the largest\
    \ prime factor of n/2\n  local m = n / 2\n  while m ~= 2 do\n    local p = prime_factors(m)\n\
    \    if p ~= nil then\n      return p\n    end\n    m = m / 2\n  end\nend", " \
    \   local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n    \
    \    if n % i == 0 then\n            factors[i] = i\n            n = n / i\n \
    \       else\n            i = i + 1\n        end\n    end\n    return factors[#factors]\n\
    end", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            table.insert(factors, i)\n        end\n    end\n    local largest\
    \ = table.max(factors)\n    if largest == n then\n        return largest\n   \
    \ else\n        return largest * largest_prime_factor(largest)\n    end\nend",
  "  if n < 2 then return nil end\n  local i = 1\n  while i * i <= n do\n    if n\
    \ % i == 0 then\n      n = n / i\n      return i\n    end\n    i = i + 1\n  end\n\
    \  return nil\nend", "  -- Base case: n is 1 or even. Return 1.\n  if n == 1 or\
    \ n % 2 == 0 then return 1 end\n  -- Base case: n is prime. Return n.\n  if n\
    \ == 2 then return n end\n  -- Base case: n is even. Return the largest prime\
    \ factor of n / 2.\n  if n % 2 == 0 then\n    local m = n / 2\n    local i = 2\n\
    \    while i * i <= m do\n      if m % i == 0 then\n        return i\n      end\n\
    \      i = i + 1\n    end\n  end\n  -- Base case: n is odd\n  local m = n / 2\n\
    \  local i = 3\n  while i * i <= m do\n    if m % i == 0 then\n      return i\n\
    \    end\n    i = i + 2\n  end\nend", "  -- Base case: n is prime.\n  if n ==\
    \ 1 then\n    return 1\n  end\n  -- Base case: n is even.\n  if n % 2 == 0 then\n\
    \    return 2\n  end\n  -- Find the largest factor of n that is smaller than n.\n\
    \  local max_factor = 1\n  local max_factor_index = 1\n  for i = 2, n do\n   \
    \ -- If n is divisible by i, then n is not a prime factor of n.\n    if n % i\
    \ == 0 then\n      -- If n is larger than max_factor, then update max_factor and\
    \ max_factor_index.\n      if n > max_factor then\n        max_factor = n\n  \
    \      max_factor_index = i\n      end\n      -- If n is smaller than max_factor,\
    \ then break the loop.\n      -- If n is divisible by max_factor, then n is not\
    \ a prime factor of n.\n      if n % max_factor == 0 then\n        break\n   \
    \   end\n    end\n  end\n  return max_factor_index\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return 1\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
