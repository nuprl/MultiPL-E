language: lua
name: HumanEval_14_all_prefixes
results:
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_sy7ztd.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp3_sy7ztd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_sy7ztd.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp3_sy7ztd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb48s42_i.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzufn03we.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpzufn03we.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb48s42_i.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsdrhb9w.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpdsdrhb9w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(i,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8uo_8wv.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpu8uo_8wv.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmykpr3iz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    prefixes[prefix] = true\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe1bmf_t.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpbe1bmf_t.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpbe1bmf_t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwxu6ji8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpdwxu6ji8.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzufn03we.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpzufn03we.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmykpr3iz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdsdrhb9w.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpdsdrhb9w.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmykpr3iz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_sy7ztd.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmp3_sy7ztd.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzufn03we.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpzufn03we.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmykpr3iz.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ree6q2c.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb48s42_i.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
- exit_code: 1
  program: "-- Return list of all prefixes from shortest to longest of the input string\n\
    -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb48s42_i.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750575
