name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a list of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens({'()(',\
  \ ')'})\n-- 'Yes'\n-- >>> match_parens({')', ')'})\n-- 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    else\n      if open\
    \ ~= close then\n        return false\n      end\n      result[#result+1] = lst[i]\n\
    \    end\n  end\n  if open ~= close then\n    return false\n  end\n  return result\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open > 0 then\n      open = open - 1\n    elseif lst[i] == ')' and\
    \ close > 0 then\n      close = close - 1\n    elseif lst[i] == '(' and open >\
    \ close then\n      return 'Yes'\n    end\n  end\n  return 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ #stack == 0\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  local result = ''\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == ')' and open == close then\n  \
    \    result = result .. lst[i]\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  local result = 'No'\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n    if open == close then\n \
    \     result = 'Yes'\n      break\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n    i = i + 1\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open ~= close then\n      good = false\n    end\n  end\n  if open\
    \ ~= close then\n    good = false\n  end\n  return good\nend", "  local open =\
    \ 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' or lst[i] == ')' then\n      if lst[i] == '(' then\n        open = open\
    \ + 1\n      elseif lst[i] == ')' then\n        close = close + 1\n      else\n\
    \        stack[#stack + 1] = lst[i]\n      end\n    else\n      stack[#stack +\
    \ 1] = lst[i]\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local stack_size = #stack\n  local stack_index = 1\n  local stack_value = ''\n\
    \  while stack_size > 0 do\n    stack_value = stack_value .. stack[stack_index]\n\
    \    stack_size = stack_size - 1\n    stack_index = stack_index + 1\n  end\n \
    \ if stack_value ~= '' then\n    return 'Yes'\n  end\n  return 'No'\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if\
    \ open > close then\n    return 'No'\n  end\n  return match_parens(lst)\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n   \
    \ return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        stack[#stack + 1] = lst[i]\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n \
    \     if open ~= close then\n        return 'No'\n      end\n    end\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i]\
    \ == '(' and open ~= close then\n      return 'No'\n    elseif lst[i] == ')' and\
    \ close ~= open then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ result = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      if open\
    \ > close then\n        result = false\n      end\n      open = open - 1\n   \
    \ elseif lst[i] == ')' then\n      if open < close then\n        result = false\n\
    \      end\n      close = close - 1\n    end\n  end\n  if result then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local\
    \ result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n\
    \      open = open - 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close\
    \ = close - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n\
    \    else\n      result = result == 'Yes' and 'Yes' or 'No'\n    end\n  end\n\
    \  return result\nend", "  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == '(' and open\
    \ ~= close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n    elseif lst[i] == ')' then\n      if #stack == 0 then\n  \
    \      return 'No'\n      else\n        stack[#stack] = nil\n      end\n    end\n\
    \  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\n\
    end", "  local open = 0\n  local close = 0\n  local result = ''\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif open == close then\n      result\
    \ = result .. lst[i]\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open == close\
    \ then\n      result = result .. lst[i]\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n    if open ~= close then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local result = {}\n  for\
    \ _, s in ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n    elseif\
    \ s == ')' then\n      close = close + 1\n    elseif open == close then\n    \
    \  result[#result + 1] = '('\n      open = open - 1\n      close = close - 1\n\
    \    else\n      result[#result + 1] = s\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local result = true\n\
    \  for i = 1, #lst do\n    if lst[i] ~= '(' then\n      result = false\n     \
    \ break\n    end\n  end\n  if result then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  local i = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n    i = i + 1\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  local i = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n    i = i + 1\n  end\n  if open_balance == close_balance then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local result = true\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      result = result and match_parens(lst:sub(1,\
    \ i - 1))\n    elseif lst[i] == ')' then\n      result = result and match_parens(lst:sub(i\
    \ + 1, #lst))\n    end\n  end\n  return result and 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local result = {}\n  for _, v in ipairs(lst) do\n    if v == '('\
    \ then\n      open = open + 1\n    elseif v == ')' then\n      close = close +\
    \ 1\n    elseif open == close then\n      result[#result + 1] = v\n    end\n \
    \ end\n  if #result == #lst then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' and open > 0 then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close > 0 then\n      close = close - 1\n    elseif lst[i] == '('\
    \ and open > close then\n      return 'No'\n    elseif lst[i] == ')' and close\
    \ > open then\n      return 'No'\n    end\n  end\n  if open > close then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open == close then\n        result = 'Yes'\n      end\n    end\n\
    \  end\n  return result\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n    if open_balance ~= close_balance then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n    \
    \  open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close =\
    \ close - 1\n    elseif lst[i] == '(' and open > close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        stack[#stack + 1]\
    \ = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] ~= '(' then\n      good\
    \ = false\n    end\n  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open > 0 then\n      open = open - 1\n   \
    \ elseif lst[i] == ')' and close > 0 then\n      close = close - 1\n    elseif\
    \ lst[i] == '(' and open > close then\n      good = true\n      break\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        return false\n      end\n\
    \      open = open - 1\n    end\n  end\n  if open ~= close then\n    return false\n\
    \  end\n  local stack_size = #stack\n  local stack_index = 1\n  local stack_value\
    \ = 1\n  local stack_value_index = 1\n  while stack_size ~= 0 do\n    if lst[stack[stack_index]]\
    \ == '(' then\n      stack_value = stack_value + 1\n      stack_value_index =\
    \ stack_value_index + 1\n    elseif lst[stack[stack_index]] == ')' then\n    \
    \  stack_value = stack_value - 1\n      if stack_value == 0 then\n        stack_size\
    \ = stack_size - 1\n      else\n        stack_value_index = stack_value_index\
    \ - 1\n      end\n    end\n    stack_index = stack_index + 1\n  end\n  if stack_value_index\
    \ == 1 then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ open = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      return 'No'\n\
    \    end\n    i = i + 1\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    i = i + 1\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  local i = 0\n\
    \  while i < #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      return 'Yes'\n    end\n    i = i + 1\n  end\n  if open\
    \ ~= close then\n    return 'No'\n  end\n  return 'No'\nend", "  local open =\
    \ 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif open == close then\n      result[#result + 1] = lst[i]\n\
    \    end\n  end\n  if #result == #lst then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif open == close then\n      good = true\n \
    \   end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open == close then\n        local start = stack[#stack]\n\
    \        local end = i\n        local result = lst[start + 1]\n        for j =\
    \ start + 2, #stack do\n          result = result .. lst[stack[j]]\n        end\n\
    \        if result ~= lst[end] then\n          return 'No'\n        end\n    \
    \  end\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' or v == ')' then\n      open = open + 1\n      if v == '('\
    \ then\n        open_balance = open_balance + 1\n      elseif v == ')' then\n\
    \        open_balance = open_balance - 1\n      end\n    elseif v == '{' or v\
    \ == '}' then\n      close = close + 1\n      if v == '{' then\n        close_balance\
    \ = close_balance + 1\n      elseif v == '}' then\n        close_balance = close_balance\
    \ - 1\n      end\n    end\n  end\n  if open_balance == close and open_balance\
    \ > 0 then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local stack2 = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == ')' then\n      stack2[#stack2 + 1] = i\n    end\n  end\n  if #stack2 ~=\
    \ #stack then\n    return 'No'\n  end\n  for i = 1, #stack do\n    if #stack2\
    \ ~= 0 then\n      local j = stack2[1]\n      while j > i do\n        local k\
    \ = stack[j]\n        if lst[k] == ')' then\n          stack[j] = k\n        elseif\
    \ lst[k] == '(' then\n          stack[j] = k\n        end\n        j = j - 1\n\
    \      end\n    end\n  end\n  if #stack == #stack2 then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        good = false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return good and 'Yes' or 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        return false\n      end\n      open = open - 1\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  for\
    \ _, s in ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n    elseif\
    \ s == ')' then\n      close = close + 1\n    end\n  end\n  return open >= close\
    \ and open ~= 0\nend", "  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' then\n      open = open + 1\n    elseif v == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \  elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    end\n\
    \  end\n  return open ~= close and open ~= 0 and close ~= 0\nend", "  local open\
    \ = 0\n  local close = 0\n  local i = 0\n  while i < #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      return 'Yes'\n\
    \    end\n    i = i + 1\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local result\
    \ = {}\n  for _, s in ipairs(lst) do\n    if s == '(' then\n      open = open\
    \ + 1\n    elseif s == ')' then\n      close = close + 1\n    elseif open == close\
    \ then\n      result[#result + 1] = s\n    end\n  end\n  if #result == 1 then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open == close then\n        if\
    \ #stack == 0 then\n          return 'Yes'\n        else\n          local top\
    \ = stack[#stack]\n          local bottom = stack[#stack + 1]\n          local\
    \ length = #lst\n          for j = top, bottom do\n            lst[length] = lst[j]\n\
    \            length = length - 1\n          end\n          stack[#stack + 1] =\
    \ bottom\n          stack[#stack] = top\n        end\n      end\n    end\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  local result = 'No'\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open > close then\n  \
    \      result = 'Yes'\n      end\n    end\n  end\n  return result\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n", "  local open = 0\n  local close =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      open_balance = open_balance - 1\n\
    \      if open_balance == 0 then\n        return 'Yes'\n      end\n    end\n \
    \ end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ==\
    \ close then\n        result = 'Yes'\n        break\n      end\n    end\n  end\n\
    \  return result\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n      break\n    end\n  end\n  if good then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == ')' and open == close then\n  \
    \    good = true\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ or lst[i] == ')' then\n      if open > close then\n        good = true\n   \
    \   end\n      open = open + 1\n      close = close + 1\n    else\n      if open\
    \ > close then\n        good = false\n      end\n      open = open + 1\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  local\
    \ good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open =\
    \ open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ open == close then\n      good = false\n    end\n  end\n  if open ~= close then\n\
    \    good = false\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  if open ~= close then\n \
    \   return false\n  end\n  local stack_size = #stack\n  local stack_index = 1\n\
    \  local stack_value = stack[stack_index]\n  while stack_size > 0 do\n    local\
    \ stack_value = stack[stack_index]\n    if lst[stack_value] == '(' then\n    \
    \  stack[stack_index] = stack[stack_index + 1]\n      stack_size = stack_size\
    \ - 1\n    elseif lst[stack_value] == ')' then\n      stack[stack_index] = stack[stack_index\
    \ - 1]\n      stack_size = stack_size + 1\n    else\n      return false\n    end\n\
    \    stack_index = stack_index + 1\n  end\n  return true\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      good = false\n    end\n  end\n  if open ~= close then\n    good\
    \ = false\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    end\n  end\n  if open\
    \ ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        good\
    \ = false\n      end\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open == close then\n    return 'Yes'\n  end\n  if open > close then\n\
    \    return 'No'\n  end\n  return match_parens(lst)\nend", "  local open = 0\n\
    \  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = false\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  if open == close then\n    return 'Yes'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open > close then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  local result = ''\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' and open ~= 0 then\n      open = open - 1\n      result = result\
    \ .. ')'\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close +\
    \ 1\n      result = result .. '('\n    elseif lst[i] == '(' and open ~= 0 and\
    \ close ~= 0 then\n      open = open + 1\n      close = close + 1\n      result\
    \ = result .. '('\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if open >\
    \ close then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    if open == close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open == close then\n      result = result .. lst[i]\n    end\n  end\n\
    \  return result == '' and result ~= '()'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  end\n  if open > close then\n    return\
    \ 'No'\n  end\n  return match_parens(lst)\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  return #stack == 0\nend", "  local open\
    \ = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open == close then\n    return 'Yes'\n\
    \  end\n  return match_parens(lst)\nend", "  local open = 0\n  local close = 0\n\
    \  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \  end\n    if open == close then\n      good = true\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if open_balance\
    \ ~= #lst - close then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local result\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      if open > close\
    \ then\n        result = false\n        break\n      end\n      open = open -\
    \ 1\n    elseif lst[i] == ')' then\n      if open < close then\n        result\
    \ = false\n        break\n      end\n      close = close - 1\n    end\n  end\n\
    \  if result then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open\
    \ = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == '(' and close > open then\n      good = true\n\
    \    end\n  end\n  if close == open then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open == close then\n    return 'Yes'\n  end\n  local open_balance = 0\n\
    \  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close_balance then\n\
    \    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n    if open ~= close then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        stack[#stack + 1] = lst[i]\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ == close then\n        if #stack > 0 then\n          local top = stack[#stack]\n\
    \          local bottom = stack[#stack + 1]\n          local middle = bottom -\
    \ top + 1\n          local good = middle <= #lst\n          if good then\n   \
    \         stack[#stack] = bottom\n          else\n            stack[#stack] =\
    \ top\n          end\n        else\n          return 'No'\n        end\n     \
    \ else\n        stack[#stack] = i\n      end\n    end\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  for _, s in ipairs(lst) do\n   \
    \ if s == '(' then\n      open = open + 1\n    elseif s == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  return open >= close and open ~= 0\nend", " \
    \ local open = 0\n  local close = 0\n  for _, s in ipairs(lst) do\n    if s ==\
    \ '(' then\n      open = open + 1\n    elseif s == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  return open ~= close and open ~= 0 and close ~= 0\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  local good = true\n  for i = 1, #stack do\n\
    \    if lst[stack[i]] ~= '(' then\n      good = false\n    end\n  end\n  if good\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open_balanced = 0\n\
    \  local close_balanced = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balanced = open_balanced + 1\n    elseif lst[i] == ')' then\n    \
    \  close_balanced = close_balanced + 1\n    end\n  end\n  if open_balanced ~=\
    \ close then\n    return 'No'\n  end\n  if open_balanced == close then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n \
    \     close = close + 1\n    elseif open == close then\n      result = 'Yes'\n\
    \    end\n  end\n  return result\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 1\n  local close_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    if\
    \ open > close then\n      return 'No'\n    end\n  end\n  return 'Yes'\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open == close\
    \ then\n        if #stack > 0 then\n          local top = stack[#stack]\n    \
    \      local index = stack[#stack + 1]\n          stack[#stack] = nil\n      \
    \    stack[#stack + 1] = nil\n          local result = lst:sub(index, #lst)\n\
    \          stack[#stack + 1] = top\n          return result\n        else\n  \
    \        return 'No'\n        end\n      else\n        local top = stack[#stack\
    \ + 1]\n        local index = stack[#stack]\n        stack[#stack] = nil\n   \
    \     stack[#stack + 1] = nil\n        local result = lst:sub(index, #lst)\n \
    \       stack[#stack + 1] = top\n        return result\n      end\n    end\n \
    \ end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n", "  local open = 0\n  local close = 0\n  local result = {}\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open == close then\n        result[#result\
    \ + 1] = lst[i]\n      end\n    end\n  end\n  if #result == #lst then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open == close then\n      result = result and 'Yes' or 'No'\n    end\n\
    \  end\n  return result\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and\
    \ open ~= 0 then\n      open_balance = open_balance + 1\n      open = open - 1\n\
    \    elseif lst[i] == ')' and close ~= 0 then\n      close_balance = close_balance\
    \ + 1\n      close = close - 1\n    elseif lst[i] == '(' and open ~= 0 then\n\
    \      open_balance = open_balance + 1\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close_balance = close_balance + 1\n      close\
    \ = close + 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n\
    \  end\n  if open_balance == 0 and close == 0 then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  local\
    \ open_balance_count = 0\n  local close_balance_count = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open_balance_count = open_balance_count + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance_count = close_balance_count\
    \ + 1\n    end\n  end\n  if open_balance_count ~= close_balance_count then\n \
    \   return 'No'\n  end\n  local open_balance_sum = 0\n  local close_balance_sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_sum\
    \ = open_balance_sum + 1\n    elseif lst[i] == ')' then\n      close_balance_sum\
    \ = close_balance_sum + 1\n    end\n  end\n  if open_balance_sum == close_balance_sum\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open == close then\n        if #stack\
    \ > 0 then\n          local top = stack[#stack]\n          local left = lst[top\
    \ + 1]\n          local right = lst[top + 2]\n          if left ~= right then\n\
    \            return 'No'\n          end\n          stack[#stack] = nil\n     \
    \   else\n          return 'Yes'\n        end\n      end\n    end\n  end\n  return\
    \ 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open ~= close then\n      good = false\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local result = {}\n  for _, item\
    \ in ipairs(lst) do\n    if item == '(' then\n      open = open + 1\n    elseif\
    \ item == ')' then\n      close = close + 1\n    elseif open == close then\n \
    \     result[#result + 1] = item\n    end\n  end\n  if #result == 2 then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local good = true\n  for i\
    \ = 1, #lst do\n    if lst[i] ~= '(' then\n      good = false\n      break\n \
    \   end\n  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\nend",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open ~= close then\n      good = false\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        return false\n      end\n      open = open - 1\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  local open_balance = 0\n\
    \  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == '(' and open_balance > close_balance then\n      open\
    \ = open - 1\n      open_balance = open_balance - 1\n    elseif lst[i] == ')'\
    \ and close_balance > open_balance then\n      close = close - 1\n      close_balance\
    \ = close_balance - 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n\
    \  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local i = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n    i\
    \ = i + 1\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local result = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open == close then\n\
    \      result[#result + 1] = lst[i]\n    end\n  end\n  if #result == #lst then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif lst[i] == ')' and open == close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    else\n      if open ~= close then\n        result[#result +\
    \ 1] = lst[i]\n      end\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result do\n\
    \    if result[i] == '(' then\n      open = open + 1\n    elseif result[i] ==\
    \ ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #result\
    \ do\n    if result[i] == '(' then\n      open = open + 1\n    elseif result[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open\
    \ - 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n\
    \    elseif lst[i] == '(' and open ~= close then\n      good = false\n    end\n\
    \  end\n  if open ~= close then\n    good = false\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif open == close then\n      result[#result+1]\
    \ = lst[i]\n    end\n  end\n  return #result == 0 and 'Yes' or 'No'\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      return 'No'\n    elseif lst[i] == ')' and close ~= open then\n \
    \     return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n \
    \ local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    else\n      if open ~= close then\n        result[#result +\
    \ 1] = '('..lst[i]\n      else\n        result[#result + 1] = lst[i]\n      end\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  else\n    return\
    \ 'Yes'\n  end\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  local good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n     \
    \ stack[#stack + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if close == open then\n        local s\
    \ = stack[#stack + 1]\n        stack[#stack + 1] = nil\n        good = true\n\
    \      end\n    end\n  end\n  return good\nend", "  local open = 0\n  local close\
    \ = 0\n  for _, s in ipairs(lst) do\n    if s == '(' then\n      open = open +\
    \ 1\n    elseif s == ')' then\n      close = close + 1\n    end\n  end\n  if open\
    \ ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n  for _, s\
    \ in ipairs(lst) do\n    if s == '(' then\n      open_balance = open_balance +\
    \ 1\n    elseif s == ')' then\n      open_balance = open_balance - 1\n      if\
    \ open_balance < 0 then\n        return 'No'\n      end\n    end\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  local good = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open ~= close then\n\
    \      good = false\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  local result = {}\n  for _, v in ipairs(lst) do\n    if\
    \ v == '(' then\n      open = open + 1\n    elseif v == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n\
    \  if open > close then\n    return 'No'\n  end\n  local stack = {}\n  local opening\
    \ = 0\n  local closing = 0\n  for _, v in ipairs(lst) do\n    if v == '(' then\n\
    \      opening = opening + 1\n      stack[#stack + 1] = v\n    elseif v == ')'\
    \ then\n      closing = closing + 1\n      if opening > closing then\n       \
    \ return 'No'\n      end\n    end\n  end\n  local stack_size = #stack\n  if stack_size\
    \ <= 0 then\n    return 'No'\n  end\n  local stack_string = table.concat(stack)\n\
    \  local opening_string = table.concat(stack, '(')\n  local closing_string = table.concat(stack,\
    \ ')')\n  local opening_count = opening_string:sub(1, opening_string:len() - 1)\n\
    \  local closing_count = closing_string:sub(1, closing_string:len() - 1)\n  if\
    \ opening_count ~= closing_count then\n    return 'No'\n  end\n  local opening_string\
    \ = opening_string:sub(1, opening_string:len() - 1)\n  local closing_string =\
    \ closing_string:sub(1, closing_string:len() - 1)\n  local opening_count = opening_string:sub(1,\
    \ opening_string:len() - 1)\n  local closing_count = closing_string:sub(1, closing_string:len()\
    \ - 1)\n  if opening_count ~= closing_count then\n    return 'No'\n  end\n  local\
    \ opening_string = opening_string:sub(1, opening_string:len() - 1)\n  local closing_string\
    \ = closing_string:sub(1, closing_string:len() - 1)\n  local opening_count = opening_string:sub(1,\
    \ opening_string:len() - 1)\n  local closing_count = closing_string:sub(1, closing_string:len()\
    \ - 1)\n  if opening_count ~= closing_count then\n    return 'No'\n  end\n  local\
    \ opening_string = opening_string:sub(1, opening_string:len() - 1)\n  local closing_string\
    \ = closing_string:sub(1, closing_string:len() - 1)\n  local opening_count = opening_string:sub(1,\
    \ opening_string:len() - 1)\n  local closing_count = closing_string:sub(1, closing_string:len()\
    \ - 1)\n  if opening_count ~= closing_count then\n    return 'No'\n  end\n  local\
    \ opening_string = opening_string:sub(1, open", "  local open = 0\n  local close\
    \ = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open == close then\n        result = 'Yes'\n        break\n      end\n\
    \    end\n  end\n  return result\nend", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ open ~= close then\n      good = false\n    end\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n   \
    \ return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open ==\
    \ close then\n      result = 'Yes'\n    end\n  end\n  return result\nend", " \
    \ local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    else\n      if open ~= close then\n        good\
    \ = false\n        break\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == '(' then\n      close = close +\
    \ 1\n    elseif lst[i] == ')' then\n      open = open - 1\n    else\n      result[#result\
    \ + 1] = lst[i]\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #result do\n    if result[i]\
    \ == '(' then\n      open = open + 1\n    elseif result[i] == ')' then\n     \
    \ close = close + 1\n    elseif result[i] == '(' then\n      close = close + 1\n\
    \    elseif result[i] == ')' then\n      open = open - 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #result do\n    if result[i] == '(' then\n      open = open\
    \ + 1\n    elseif result[i] == ')' then\n      close = close + 1\n    elseif result[i]\
    \ == '(' then\n      close = close + 1\n    elseif result[i] == ')' then\n   \
    \   open = open - 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  local open = 0\n  local close = 0\n  for i = 1, #result do\n    if result[i]\
    \ == '(' then\n      open = open + 1\n    elseif result[i] == ')' then\n     \
    \ close = close + 1\n    elseif result[i] == '(' then\n      close = close + 1\n\
    \    elseif result[i] == ')' then\n      open = open - 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #result do\n    if result[i] == '(' then\n      open = open\
    \ + 1\n    elseif result[i] == ')' then\n      close = close + 1\n    elseif result[i]\
    \ == '(' then\n      close = close + 1\n    elseif result[i] == ')' then\n   \
    \   open = open - 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  local open = 0\n  local close = 0\n  for i = 1, #result do\n    if result[i]\
    \ == '(' then\n      open = open + 1\n    elseif result[i] == ')' then\n     \
    \ close = close + 1\n    elseif result[i] == '(' ", "  local open = 0\n  local\
    \ close = 0\n  local good = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = good + 1\n    end\n\
    \  end\n  if good >= #lst then return 'Yes' else 'No' end\nend", "  local open\
    \ = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open == close then\n \
    \       local start = stack[#stack + 1]\n        local end = i\n        local\
    \ result = lst[start + 1]\n        for j = start + 2, #stack do\n          result\
    \ = result .. lst[stack[j]]\n        end\n        if result ~= lst[end] then\n\
    \          return 'No'\n        end\n      end\n    end\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open\
    \ ~= close then\n      return 'No'\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return #stack == 0\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  local good = true\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' or lst[i] == ')' then\n      if lst[i]\
    \ == '(' then\n        stack[#stack + 1] = lst[i]\n      elseif lst[i] == ')'\
    \ then\n        open = open - 1\n        if open == 0 then\n          close =\
    \ close + 1\n        end\n      else\n        good = false\n      end\n    else\n\
    \      good = false\n    end\n  end\n  if close ~= open then\n    good = false\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        local top = stack[#stack]\n      \
    \  local left = stack[#stack + 1]\n        local right = stack[#stack + 2]\n \
    \       if open > close then\n          stack[#stack] = left\n          stack[#stack\
    \ + 1] = right\n        elseif open < close then\n          stack[#stack] = right\n\
    \          stack[#stack + 1] = left\n        else\n          stack[#stack] = left\n\
    \          stack[#stack + 1] = left\n        end\n      end\n    end\n  end\n\
    \  return #stack == 0 and 'Yes' or 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == '(' and open_balance > close_balance then\n      open_balance\
    \ = open_balance - 1\n    elseif lst[i] == ')' and open_balance < close_balance\
    \ then\n      close_balance = close_balance - 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    elseif lst[i] == '('\
    \ and open_balance > close_balance then\n      open_balance = open_balance - 1\n\
    \    elseif lst[i] == ')' and open_balance < close_balance then\n      close_balance\
    \ = close_balance - 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local\
    \ result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == ')' and open == close then\n      result[#result + 1] = lst[i]\n    end\n\
    \  end\n  if #result == #lst then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  local i = 0\n  while i <\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    else\n      if open ~= close then\n\
    \        return 'No'\n      end\n    end\n    i = i + 1\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local result = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      result = result and match_parens(lst:sub(1,\
    \ i - 1))\n    elseif lst[i] == ')' then\n      result = result and match_parens(lst:sub(i\
    \ + 1, #lst))\n    end\n  end\n  return result and 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        local start = stack[#stack\
    \ + 1]\n        local end = i\n        local str = table.concat(lst:sub(1, start),\
    \ '')\n        local rest = table.concat(lst:sub(end + 1), '')\n        if rest\
    \ ~= '' then\n          return 'No'\n        end\n        open = 0\n        close\
    \ = 0\n        stack[#stack + 1] = nil\n        return str\n      end\n    end\n\
    \  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open - 1\n  \
    \  elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n    elseif\
    \ lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] ==\
    \ ')' and close ~= 0 then\n      close = close + 1\n    end\n  end\n  if open\
    \ ~= close then return 'No' else 'Yes' end\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    else\n      if open ~= close then\n        good\
    \ = false\n        break\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local result = 'No'\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    result\
    \ = 'Yes'\n  end\n  return result\nend", "  local open = 0\n  local close = 0\n\
    \  for _, s in ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n \
    \   elseif s == ')' then\n      close = close + 1\n    end\n  end\n  if open ==\
    \ close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  local good = false\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open > close then\n        good = true\n      end\n  \
    \  end\n  end\n  return good\nend", "  local stack = {}\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open == close then\n        if #stack == 0 then\n    \
    \      return 'Yes'\n        else\n          local top = stack[#stack]\n     \
    \     local bottom = stack[#stack + 1]\n          local length = #stack\n    \
    \      stack[#stack + 1] = nil\n          stack[#stack] = nil\n          if lst[top\
    \ + 1] == lst[bottom] then\n            return 'Yes'\n          else\n       \
    \     return 'No'\n          end\n        end\n      end\n    end\n  end\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n    elseif\
    \ lst[i] == '(' and open ~= close then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= open then\n      close = close + 1\n    end\n  end\n  return\
    \ #stack == 0\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = {}\n  for _, item in ipairs(lst) do\n    if item == '('\
    \ or item == ')' then\n      if open ~= close then\n        result[#result + 1]\
    \ = item\n      end\n      open = open + 1\n      close = open + 1\n    elseif\
    \ item == '{' then\n      open = open + 1\n    elseif item == '}' then\n     \
    \ close = close + 1\n    end\n  end\n  if open ~= close then\n    result[#result\
    \ + 1] = item\n  end\n  return table.concat(result, '') ~= '()'\nend", "  local\
    \ open = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    elseif lst[i] == '('\
    \ and open_balance > close_balance then\n      open_balance = open_balance - 1\n\
    \    elseif lst[i] == ')' and open_balance < close_balance then\n      close_balance\
    \ = close_balance - 1\n    end\n  end\n  return open == close and open_balance\
    \ == close_balance\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    else\n      if open\
    \ ~= close then\n        result[#result + 1] = lst[i]\n      end\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #result do\n    if result[i] == '(' then\n      open = open\
    \ + 1\n    elseif result[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local\
    \ stack = {}\n  for i = 1, #lst do\n    local char = lst[i]\n    if char == '('\
    \ or char == ')' then\n      stack[#stack + 1] = char\n    elseif #stack > 0 then\n\
    \      local top = stack[#stack]\n      if char == top then\n        stack[#stack]\
    \ = char\n      else\n        return 'No'\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  if open_balance == 0 then\n    return 'Yes'\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        return false\n      end\n    end\n  end\n  if open ~=\
    \ close then\n    return false\n  end\n  local stack_size = #stack\n  local stack_index\
    \ = 1\n  while stack_index <= stack_size do\n    local open_brace = stack[stack_index]\n\
    \    local close_brace = stack[stack_index + 1]\n    if open_brace > close_brace\
    \ then\n      return false\n    end\n    stack_index = stack_index + 2\n  end\n\
    \  return true\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = false\n      end\n\
    \      open = open - 1\n      stack[#stack + 1] = lst[i]\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local good = true\n  for\
    \ _, s in ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n    elseif\
    \ s == ')' then\n      close = close + 1\n    else\n      if open ~= close then\n\
    \        good = false\n        break\n      end\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      close_balance = close_balance + 1\n   \
    \ end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if open\
    \ == 0 then\n    return 'Yes'\n  end\n  local open_balance_2 = open_balance\n\
    \  local close_balance_2 = close_balance\n  local open_balance_3 = open_balance\
    \ + open\n  local close_balance_3 = close_balance + close\n  local open_balance_4\
    \ = open_balance + open + open\n  local close_balance_4 = close_balance + close\
    \ + close\n  local open_balance_5 = open_balance + open + open + open\n  local\
    \ close_balance_5 = close_balance + close + close + close\n  local open_balance_6\
    \ = open_balance + open + open + open + open\n  local close_balance_6 = close_balance\
    \ + close + close + close + close\n  local open_balance_7 = open_balance + open\
    \ + open + open + open + open\n  local close_balance_7 = close_balance + close\
    \ + close + close + close + close\n  local open_balance_8 = open_balance + open\
    \ + open + open + open + open + open\n  local close_balance_8 = close_balance\
    \ + close + close + close + close + close + close\n  local open_balance_9 = open_balance\
    \ + open + open + open + open + open + open + open\n  local close_balance_9 =\
    \ close_balance + close + close + close + close + close + close\n  local open_balance_10\
    \ = open_balance + open + open + open + open + open + open + open + open\n  local\
    \ close_balance_10 = close_balance + close + close + close + close + close + close\
    \ + close\n  local open_balance_11 = open_balance + open + open + open + open\
    \ + open + open + open + open + open\n  local close_balance_11 = close_balance\
    \ + close + close ", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open == close then\n        local open = #stack\n        close =\
    \ 0\n      end\n      local top = stack[open]\n      while top ~= nil do\n   \
    \     if lst[top] == ')' then\n          close = close + 1\n          local top\
    \ = stack[open]\n        elseif lst[top] == '(' then\n          open = open +\
    \ 1\n          stack[#stack + 1] = top\n        else\n          top = stack[top]\n\
    \        end\n      end\n    end\n  end\n  return open > 0 and close > 0\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        return false\n      end\n      open = open - 1\n      stack[#stack\
    \ + 1] = i\n    end\n  end\n  if open ~= close then\n    return false\n  end\n\
    \  for i = 1, #stack do\n    if lst[stack[i]] ~= lst[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local open = 0\n  local close = 0\n \
    \ local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open == close then\n        if #stack > 0 then\n\
    \          local last = stack[#stack]\n          local start = lst[last]\n   \
    \       local end = lst[i]\n          local result = string.sub(lst,start,end)\n\
    \          if result ~= last then\n            return 'No'\n          end\n  \
    \        stack[#stack] = nil\n        else\n          return 'No'\n        end\n\
    \      else\n        return 'No'\n      end\n    end\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \  elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    elseif\
    \ lst[i] == '(' and open ~= close then\n      good = false\n    elseif lst[i]\
    \ == ')' and close ~= open then\n      good = false\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open == close then\n \
    \       good = true\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n  if open >\
    \ close then\n    return 'No'\n  end\n  return match_parens(lst)\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open == close then\n\
    \      good = false\n      break\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      open_balance = open_balance - 1\n\
    \      if open_balance == 0 then\n        return 'Yes'\n      end\n    end\n \
    \ end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n   \
    \   open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close\
    \ = close + 1\n    elseif lst[i] == '(' and open ~= close then\n      good = false\n\
    \      break\n    elseif lst[i] == ')' and close ~= open then\n      good = false\n\
    \      break\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n    if open > close then\n      good = true\n\
    \    end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  return open ==\
    \ close and open ~= 0\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i]\
    \ == ')' and open == close then\n      good = true\n    end\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 1\n  local close_balance = 1\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if\
    \ #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", " \
    \ local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open ~= close then\n      good = false\n    elseif lst[i] == ')' and close\
    \ ~= open then\n      good = false\n    else\n      good = true\n    end\n  end\n\
    \  return good\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open\
    \ - 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n\
    \    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i]\
    \ == '(' and open ~= close then\n      good = false\n    elseif lst[i] == ')'\
    \ and open ~= close then\n      good = false\n    elseif lst[i] == '(' and close\
    \ ~= open then\n      good = false\n    elseif lst[i] == ')' and close ~= open\
    \ then\n      good = false\n    end\n  end\n  if open ~= close then\n    good\
    \ = false\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n\
    \  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        return false\n   \
    \   end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ #stack == 0\nend", "  local open = 0\n  local close = 0\n  local result = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    else\n      if open ~= close\
    \ then\n        -- We can't concatenate this string.\n        return 'No'\n  \
    \    end\n      result[#result + 1] = lst[i]\n    end\n  end\n  if open ~= close\
    \ then\n    -- We can't concatenate this string.\n    return 'No'\n  end\n  --\
    \ We concatenated this string.\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  for i = 1, #lst do\n    if lst[i] ~= '(' then\n      return 'No'\n \
    \   end\n  end\n  return 'Yes'\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
