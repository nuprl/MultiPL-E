name: HumanEval_114_minSubArraySum
language: lua
prompt: "-- Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n-- of nums.\n-- Example\n-- >>> minSubArraySum({2, 3, 4, 1, 2, 4})\n\
  -- 1\n-- >>> minSubArraySum({-1, -2, -3})\n-- -6\nlocal function minSubArraySum(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minSubArraySum\n\
  \    lu.assertEquals(candidate({2, 3, 4, 1, 2, 4}), 1)\n    lu.assertEquals(candidate({-1,\
  \ -2, -3}), -6)\n    lu.assertEquals(candidate({-1, -2, -3, 2, -10}), -14)\n   \
  \ lu.assertEquals(candidate({-9999999999999999}), -9999999999999999)\n    lu.assertEquals(candidate({0,\
  \ 10, 20, 1000000}), 0)\n    lu.assertEquals(candidate({-1, -2, -3, 10, -5}), -6)\n\
  \    lu.assertEquals(candidate({100, -1, -2, -3, 10, -5}), -6)\n    lu.assertEquals(candidate({10,\
  \ 11, 13, 8, 3, 4}), 3)\n    lu.assertEquals(candidate({100, -33, 32, -1, 0, -2}),\
  \ -33)\n    lu.assertEquals(candidate({-10}), -10)\n    lu.assertEquals(candidate({7}),\
  \ 7)\n    lu.assertEquals(candidate({1, -1}), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local minSum = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums\
    \ do\n    local currentSum = nums[i]\n    for j = i + 1, #nums do\n      currentSum\
    \ = currentSum + nums[j]\n      if currentSum < minSum then\n        minSum =\
    \ currentSum\n        minSumIndex = j\n      end\n    end\n  end\n  return minSum\n\
    end", "  local minSum = math.inf\n  for i = 1, #nums do\n    local sum = 0\n \
    \   for j = 1, i do\n      sum = sum + nums[j]\n    end\n    if sum < minSum then\n\
    \      minSum = sum\n    end\n  end\n  return minSum\nend", "  local sum = 0\n\
    \  local minSum = math.inf\n  for i = 1, #nums do\n    sum = sum + nums[i]\n \
    \   if sum < minSum then\n      minSum = sum\n    end\n  end\n  return minSum\n\
    end", "  local min = math.min(unpack(nums))\n  local sum = 0\n  for i = 1, #nums\
    \ do\n    sum = sum + nums[i]\n    if sum < min then\n      min = sum\n    end\n\
    \  end\n  return min\nend", "  -- Base case\n  if #nums == 0 then\n    return\
    \ 0\n  end", "  local sum = 0\n  local minSum = math.inf\n  for i = 1, #nums do\n\
    \    sum = sum + nums[i]\n    if sum < minSum then\n      minSum = sum\n    end\n\
    \  end\n  return minSum\nend", "  local minSum = math.inf\n  local minSumIndex\
    \ = 0\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, i do\n      sum\
    \ = sum + nums[j]\n    end\n    if sum < minSum then\n      minSum = sum\n   \
    \   minSumIndex = i\n    end\n  end\n  return minSumIndex\nend", "  local minSum\
    \ = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums do\n    local currentSum\
    \ = nums[i]\n    for j = i + 1, #nums do\n      currentSum = currentSum + nums[j]\n\
    \      if currentSum < minSum then\n        minSum = currentSum\n        minSumIndex\
    \ = j\n      end\n    end\n  end\n  return minSumIndex\nend", "  local minSum\
    \ = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums do\n    local sum =\
    \ 0\n    for j = 1, i do\n      sum = sum + nums[j]\n    end\n    if sum < minSum\
    \ then\n      minSum = sum\n      minSumIndex = i\n    end\n  end\n  return minSumIndex\n\
    end", "  -- Base case\n  if #nums == 0 then\n    return 0\n  end", "  local minSum\
    \ = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums do\n    local sum =\
    \ 0\n    for j = 1, i do\n      sum = sum + nums[j]\n    end\n    if sum < minSum\
    \ then\n      minSum = sum\n      minSumIndex = i\n    end\n  end\n  return minSum\n\
    end", "  local minSum = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, i do\n      sum = sum + nums[j]\n    end\n\
    \    if sum < minSum then\n      minSum = sum\n      minSumIndex = i\n    end\n\
    \  end\n  return minSumIndex\nend", "  local minSum = math.inf\n  for i = 1, #nums\
    \ do\n    local sum = nums[i]\n    for j = i + 1, #nums do\n      sum = sum +\
    \ nums[j]\n      if sum < minSum then\n        minSum = sum\n      end\n    end\n\
    \  end\n  return minSum\nend", "  local min = math.inf\n  local sum = 0\n  for\
    \ i = 1, #nums do\n    sum = sum + nums[i]\n    if sum < min then\n      min =\
    \ sum\n    end\n  end\n  return min\nend", "  local minSum = math.inf\n  local\
    \ minSumIndex = 0\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums\
    \ do\n      if j == i then\n        sum = sum + nums[j]\n      else\n        sum\
    \ = sum + nums[j] - nums[i]\n      end\n    end\n    if sum < minSum then\n  \
    \    minSum = sum\n      minSumIndex = i\n    end\n  end\n  return minSumIndex\n\
    end", "  local minSum = math.inf\n  local minSumIndex = 0\n  for i = 1, #nums\
    \ do\n    local currentSum = nums[i]\n    for j = i + 1, #nums do\n      currentSum\
    \ = currentSum + nums[j]\n      if currentSum < minSum then\n        minSum =\
    \ currentSum\n        minSumIndex = j\n      end\n    end\n  end\n  return minSum\n\
    end", "  -- Base case: empty array\n  if #nums == 0 then\n    return 0\n  end",
  "  -- Base case\n  if #nums == 0 then\n    return 0\n  end", "  -- Base case\n \
    \ if #nums == 0 then\n    return 0\n  end", "  local minSum = math.inf\n  for\
    \ _, v in ipairs(nums) do\n    if v > 0 then\n      local sum = v\n      for i\
    \ = 1, v do\n        sum = sum + nums[#nums - i]\n      end\n      if sum < minSum\
    \ then\n        minSum = sum\n      end\n    end\n  end\n  return minSum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
