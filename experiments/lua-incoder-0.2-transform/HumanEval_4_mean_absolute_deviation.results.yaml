language: lua
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8332nq4k.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp8332nq4k.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp8332nq4k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(value))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2rz8i7vm.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmp2rz8i7vm.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp2rz8i7vm.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1s7obif.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpp1s7obif.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpp1s7obif.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + value\n    count = count + 1\n  end\n  if count == 0 then\n    return\
    \ 0\n  end\n  return math.abs(sum / count)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4sdp4ws.lua:24:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpa4sdp4ws.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8332nq4k.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp8332nq4k.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp8332nq4k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local mean = 0\n  local deviation = 0\n  for _, value in ipairs(numbers) do\n\
    \    local diff = value - mean\n    deviation = deviation + diff * diff\n    mean\
    \ = mean + value\n  end\n  return deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp54hrhash.lua:22:\
    \ expected: 0.5, actual: 1\nstack traceback:\n\t/tmp/tmp54hrhash.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8332nq4k.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp8332nq4k.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp8332nq4k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, x in pairs(numbers) do\n    sum =\
    \ sum + x\n    count = count + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe4avjii.lua:21:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmpbe4avjii.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1s7obif.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpp1s7obif.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpp1s7obif.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  local count = 0\n  for _, value in pairs(numbers) do\n    sum\
    \ = sum + math.abs(value - mean)\n    count = count + 1\n  end\n  return sum /\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw0ecbzam.lua:12:\
    \ attempt to perform arithmetic on global 'mean' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpw0ecbzam.lua:12: in function 'candidate'\n\t/tmp/tmpw0ecbzam.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.fmean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp1s7obif.lua:11:\
    \ attempt to call field 'fmean' (a nil value)\nstack traceback:\n\t/tmp/tmpp1s7obif.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpp1s7obif.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in pairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizimge5_.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmpizimge5_.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpizimge5_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\n-- >>> mean_absolute_deviation({1.0,\
    \ 2.0, 3.0, 4.0})\n-- 1.0\nlocal function mean_absolute_deviation(numbers)\n \
    \ local sum = 0\n  for _, value in ipairs(numbers) do\n    sum = sum + math.abs(value\
    \ - math.mean(numbers))\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8332nq4k.lua:11:\
    \ attempt to call field 'mean' (a nil value)\nstack traceback:\n\t/tmp/tmp8332nq4k.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmp8332nq4k.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750396
