name: HumanEval_70_strange_sort_list
language: lua
prompt: "-- Given list of integers, return list in strange order.\n-- Strange sorting,\
  \ is when you start with the minimum value,\n-- then maximum of the remaining integers,\
  \ then minimum and so on.\n-- Examples:\n-- >>> strange_sort_list({1, 2, 3, 4})\n\
  -- {1, 4, 2, 3}\n-- >>> strange_sort_list({5, 5, 5, 5})\n-- {5, 5, 5, 5}\n-- >>>\
  \ strange_sort_list({})\n-- {}\nlocal function strange_sort_list(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strange_sort_list\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 4, 2, 3})\n    lu.assertEquals(candidate({5,\
  \ 6, 7, 8, 9}), {5, 9, 6, 8, 7})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
  \ {1, 5, 2, 4, 3})\n    lu.assertEquals(candidate({5, 6, 7, 8, 9, 1}), {1, 9, 5,\
  \ 8, 6, 7})\n    lu.assertEquals(candidate({5, 5, 5, 5}), {5, 5, 5, 5})\n    lu.assertEquals(candidate({}),\
  \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4, 5, 6, 7, 8}), {1, 8, 2, 7, 3,\
  \ 6, 4, 5})\n    lu.assertEquals(candidate({0, 2, 2, 2, 5, 5, -5, -5}), {-5, 5,\
  \ -5, 5, 0, 2, 2, 2})\n    lu.assertEquals(candidate({111111}), {111111})\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local\
    \ max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  for i\
    \ = 1, #sorted_list do\n    if sorted_list[i] < min_value then\n      table.insert(sorted_list,\
    \ min_value, i)\n      table.insert(sorted_list, i, max_value)\n      break\n\
    \    end\n  end\n  return sorted_list\nend", "  local result = {}\n  local minimum\
    \ = #lst\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n\
    \  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n\
    \    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = true\n  end\n  for _, value in ipairs(lst) do\n    minimum = math.min(minimum,\
    \ value)\n    result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n\
    \    minimum = math.min(minimum, value)\n    result[minimum] = true\n  end\n \
    \ for _, value in ipairs(lst) do\n    minimum = math.min(minimum, value)\n   \
    \ result[minimum] = true\n  end\n  for _, value in ipairs(lst) do\n    minimum\
    \ = math.min(minimum, value)\n    result[minimum] = true\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap the minimum and maximum values\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local\
    \ max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list]\
    \ = max_value\n  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\n\
    end", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    local value = lst[i]\n    if value < min_value\
    \ then\n      min_value = value\n    elseif value > max_value then\n      max_value\
    \ = value\n    end\n    table.insert(sorted_lst, value)\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n    minimum\
    \ = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend", "  local sorted_list = lst\n  local min_value\
    \ = sorted_list[1]\n  local max_value = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n\
    \    elseif sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n\
    \    end\n  end\n  -- Swap min and max values\n  sorted_list[#sorted_list] = max_value\n\
    \  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\nend", "  local\
    \ sorted_lst = {}\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n\
    \  end\n  table.sort(sorted_lst)\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n    minimum\
    \ = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend", "  local lst = lst or {}\n  local min = lst[1]\n\
    \  local max = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min then\n      min\
    \ = lst[i]\n    end\n    if lst[i] > max then\n      max = lst[i]\n    end\n \
    \ end\n  lst[1] = min\n  lst[#lst] = max\n  local tmp = {}\n  for i = 1, #lst\
    \ do\n    table.insert(tmp, lst[i])\n  end\n  return tmp\nend", "  local sorted_lst\
    \ = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i]\
    \ > max_value then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst\
    \ do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and minimum or sorted_list[i]\n \
    \   maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n  end\n\
    \  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n    minimum = maximum\n\
    \    maximum = minimum\n  end\n  return sorted_list\nend", "  local strange_lst\
    \ = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i]\
    \ > max_value then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst\
    \ do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1] = lst[i]\n\
    \    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1] = lst[i]\n\
    \    end\n  end\n  for i = 1, #strange_lst do\n    strange_lst[i] = strange_lst[i]\n\
    \  end\n  return strange_lst\nend", "  local strange_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if lst[i]\
    \ < min_value then\n      strange_lst[#strange_lst+1] = lst[i]\n    elseif lst[i]\
    \ > max_value then\n      strange_lst[#strange_lst+1] = lst[i]\n    end\n  end\n\
    \  for i = 1, #strange_lst do\n    table.insert(strange_lst,\n      min_value\
    \ + (max_value - min_value) * (i / #strange_lst))\n  end\n  return strange_lst\n\
    end", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local\
    \ max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ min_value and max_value\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend", "  local result = {}\n  for _,\
    \ v in ipairs(lst) do\n    table.insert(result, v)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local sorted_lst = {}\n  local minimum = nil\n  local\
    \ maximum = nil\n  for _, v in ipairs(lst) do\n    if minimum == nil then\n  \
    \    minimum = v\n      maximum = v\n    else\n      if v < minimum then\n   \
    \     minimum = v\n      elseif v > maximum then\n        maximum = v\n      end\n\
    \    end\n  end\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst, minimum)\n\
    \    table.insert(sorted_lst, maximum)\n    table.insert(sorted_lst, v)\n  end\n\
    \  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local result = {}\n  for _, v in ipairs(lst) do\n    table.insert(result, v)\n\
    \  end\n  table.sort(result)\n  return result\nend", "  local result = {}\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    table.insert(result,\
    \ min_value)\n    table.insert(result, max_value)\n    table.insert(result, lst[i])\n\
    \  end\n  return result\nend", "  local sorted_lst = {}\n  local minimum = nil\n\
    \  local maximum = nil\n  for _, v in ipairs(lst) do\n    if minimum == nil then\n\
    \      minimum = v\n      maximum = v\n    else\n      if v < minimum then\n \
    \       minimum = v\n      end\n      if v > maximum then\n        maximum = v\n\
    \      end\n    end\n    table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_lst)\n\
    \  return sorted_lst\nend", "  local strange_lst = {}\n  local min_val = nil\n\
    \  local max_val = nil\n  for i = 1, #lst do\n    if min_val == nil then\n   \
    \   min_val = lst[i]\n      max_val = lst[i]\n    else\n      if lst[i] < min_val\
    \ then\n        min_val = lst[i]\n      elseif lst[i] > max_val then\n       \
    \ max_val = lst[i]\n      else\n        table.insert(strange_lst, lst[i])\n  \
    \    end\n    end\n  end\n  if #strange_lst > 0 then\n    table.sort(strange_lst)\n\
    \  end\n  return strange_lst\nend", "  local sorted_list = lst\n  local min_value\
    \ = sorted_list[1]\n  local max_value = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n\
    \    elseif sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n\
    \    end\n  end\n  -- Swap min_value and max_value\n  sorted_list[#sorted_list]\
    \ = max_value\n  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\n\
    end", "  local lst2 = {}\n  for i = 1, #lst do\n    lst2[#lst2 + 1] = lst[i]\n\
    \  end\n  table.sort(lst2, function(a, b) return a < b end)\n  local strange =\
    \ {}\n  for i = 1, #lst2 do\n    strange[#strange + 1] = lst2[i]\n  end\n  return\
    \ strange\nend", "  local result = {}\n  local min_value = nil\n  local max_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if min_value == nil then\n    \
    \  min_value = value\n    elseif value < min_value then\n      min_value = value\n\
    \    end\n    if max_value == nil then\n      max_value = value\n    elseif value\
    \ > max_value then\n      max_value = value\n    end\n    result[#result + 1]\
    \ = value\n  end\n  table.sort(result, function(a, b) return a < b end)\n  return\
    \ result\nend", "  local lst = lst or {}\n  local min = lst[1]\n  local max =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] < min then\n      min = lst[i]\n\
    \    end\n    if lst[i] > max then\n      max = lst[i]\n    end\n  end\n  lst[1]\
    \ = min\n  lst[#lst] = max\n  return lst\nend", "  local sorted_list = lst\n \
    \ local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i =\
    \ 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and minimum or sorted_list[i]\n\
    \    maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n  end\n\
    \  sorted_list[#sorted_list] = {minimum, maximum}\n  return table.concat(sorted_list,\
    \ \" \")\nend", "  local strange_lst = {}\n  local minimum = nil\n  local maximum\
    \ = nil\n  for _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum\
    \ = value\n      maximum = value\n    else\n      if value < minimum then\n  \
    \      minimum = value\n      elseif value > maximum then\n        maximum = value\n\
    \      else\n        table.insert(strange_lst, value)\n      end\n    end\n  end\n\
    \  if minimum == nil then\n    return strange_lst\n  elseif maximum == nil then\n\
    \    return strange_lst\n  else\n    table.insert(strange_lst, minimum)\n    table.insert(strange_lst,\
    \ maximum)\n    return strange_lst\n  end\nend", "  local strange_lst = {}\n \
    \ local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] >\
    \ max_value then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst\
    \ do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1] = lst[i]\n\
    \    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1] = lst[i]\n\
    \    end\n  end\n  for i = 1, #strange_lst do\n    lst[#lst+1] = strange_lst[i]\n\
    \  end\n  return lst\nend", "  local result = {}\n  local minimum = #lst\n  for\
    \ _, value in ipairs(lst) do\n    minimum = minimum - 1\n    table.insert(result,\
    \ value)\n  end\n  table.sort(result)\n  for _, value in ipairs(result) do\n \
    \   table.insert(result, value)\n  end\n  return result\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap the minimum and maximum values if they are equal\n  if minimum\
    \ == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the\
    \ minimum and maximum values if they are equal\n  if minimum == maximum then\n\
    \    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum\
    \ values if they are equal\n  if minimum == maximum then\n    minimum, maximum\
    \ = maximum, minimum\n  end\n  -- Swap the minimum and maximum values if they\
    \ are equal\n  if minimum == maximum then\n    minimum, maximum = maximum, minimum\n\
    \  end\n  -- Swap the minimum and maximum values if they are equal\n  if minimum\
    \ == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the\
    \ minimum and maximum values if they are equal\n  if minimum == maximum then\n\
    \    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum\
    \ values if they are equal\n  if minimum == maximum then\n    minimum, maximum\
    \ = maximum, minimum\n  end\n  -- Swap the minimum and maximum values if they\
    \ are equal\n  if minimum == maximum then\n    minimum, maximum = maximum, minimum\n\
    \  end\n  -- Swap the minimum and maximum values if they are equal\n  if minimum\
    \ == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the\
    \ minimum and maximum values if they are equal\n  if minimum == maximum then\n\
    \    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum\
    \ values if they are equal\n  if minimum == maximum then\n    minimum, maximum\
    \ = maximum, minimum\n  end\n  -- Swap the minimum and maximum values if they\
    \ are equal\n  if minimum == maximum then\n    minimum, maximum = maximum, minimum\n\
    \  end\n  -- Swap the minimum and maximum values if they are equal\n  if minimum\
    \ == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the\
    \ minimum and maximum values if they are equal\n  if minimum == maximum then\n\
    \    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum\
    \ values if they are equal\n  if minimum == maximum then\n    minimum, maximum\
    \ = maximum, minimum\n  end\n  -- Swap the minimum and maximum values if they\
    \ are equal\n  if minimum == ", "  local sorted_list = lst\n  local min_value\
    \ = sorted_list[1]\n  local max_value = sorted_list[#sorted_list]\n  for i = 2,\
    \ #sorted_list do\n    local value = sorted_list[i]\n    if value < min_value\
    \ then\n      min_value = value\n    end\n    if value > max_value then\n    \
    \  max_value = value\n    end\n  end\n  sorted_list[#sorted_list] = max_value\n\
    \  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\nend", "  local\
    \ sorted_lst = {}\n  local min_val = nil\n  local max_val = nil\n  for i = 1,\
    \ #lst do\n    local val = lst[i]\n    if min_val == nil then\n      min_val =\
    \ val\n      max_val = val\n    else\n      if val < min_val then\n        min_val\
    \ = val\n      elseif val > max_val then\n        max_val = val\n      end\n \
    \   end\n    table.insert(sorted_lst, val)\n  end\n  table.sort(sorted_lst, function(a,\
    \ b) return a < b end)\n  return sorted_lst\nend", "  local sorted_list = lst\n\
    \  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  local min_value = min_value\n  local max_value\
    \ = max_value\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  sorted_list[#sorted_list+1]\
    \ = max_value\n  sorted_list[#sorted_list+1] = min_value\n  return sorted_list\n\
    end", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n\
    \  end\n  table.sort(sorted_lst, function(a, b)\n    if a < b then\n      return\
    \ -1\n    elseif b < a then\n      return 1\n    else\n      return 0\n    end\n\
    \  end)\n  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local sorted_lst = {}\n  local min_val = nil\n  local max_val = nil\n  for i\
    \ = 1, #lst do\n    local val = lst[i]\n    if min_val == nil then\n      min_val\
    \ = val\n      max_val = val\n    else\n      if val < min_val then\n        min_val\
    \ = val\n      elseif val > max_val then\n        max_val = val\n      end\n \
    \   end\n    table.insert(sorted_lst, val)\n  end\n  table.sort(sorted_lst, function(a,\
    \ b) return a < b end)\n  return sorted_lst\nend", "  local strange_lst = {}\n\
    \  for i = 1, #lst do\n    local value = lst[i]\n    local j = i - 1\n    while\
    \ j >= 0 and value < lst[j] do\n      strange_lst[#strange_lst+1] = lst[j]\n \
    \     j = j - 1\n    end\n    strange_lst[#strange_lst+1] = value\n  end\n  return\
    \ strange_lst\nend", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local\
    \ max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n \
    \     min_value = lst[i]\n    elseif lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst +\
    \ 1] = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n\
    \  return sorted_lst\nend", "  local lst = lst or {}\n  local min_value = lst[1]\n\
    \  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n\
    \      min_value = lst[i]\n    end\n    if lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n  end\n  local new_lst = {}\n  for i = 1, #lst do\n    new_lst[#new_lst\
    \ + 1] = lst[i]\n  end\n  table.sort(new_lst, function(a, b) return a < b end)\n\
    \  for i = 1, #new_lst do\n    lst[#lst + 1] = new_lst[i]\n  end\n  return lst\n\
    end", "  local sorted_list = terralib.newlist()\n  local min_value = lst[1]\n\
    \  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n\
    \      min_value = lst[i]\n    elseif lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_list:insert(min_value)\n\
    \    sorted_list:insert(max_value)\n    sorted_list:insert(lst[i])\n  end\n  return\
    \ sorted_list\nend", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n\
    \  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n  \
    \  local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \  end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n", "  local sorted_list = lst\n  local min_value =\
    \ sorted_list[1]\n  local max_value = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n\
    \    end\n    if sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n\
    \    end\n  end\n  -- Swap min and max values\n  sorted_list[#sorted_list] = min_value\n\
    \  sorted_list[#sorted_list + 1] = max_value\n  return sorted_list\nend", "  local\
    \ sorted_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n \
    \   elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    table.insert(sorted_lst, min_value)\n    table.insert(sorted_lst,\
    \ max_value)\n    table.insert(sorted_lst, lst[i])\n  end\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n    table.insert(sorted_lst, lst[i])\n  end\n  table.insert(sorted_lst,\
    \ min_value)\n  table.insert(sorted_lst, max_value)\n  return sorted_lst\nend",
  "  local sorted_list = terralib.newlist()\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  sorted_list:insert(min_value)\n  sorted_list:insert(max_value)\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < min_value then\n\
    \      sorted_list:insert(min_value)\n      min_value = value\n    elseif value\
    \ > max_value then\n      sorted_list:insert(max_value)\n      max_value = value\n\
    \    else\n      sorted_list:insert(value)\n    end\n  end\n  return sorted_list\n\
    end", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local\
    \ max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  local\
    \ min_value = min_value\n  local max_value = max_value\n  for i = 2, #sorted_list\
    \ do\n    if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n\
    \    end\n    if sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n\
    \    end\n  end\n  local min_value = min_value\n  local max_value = max_value\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  local min_value = min_value\n  local max_value\
    \ = max_value\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  local min_value =\
    \ min_value\n  local max_value = max_value\n  for i = 2, #sorted_list do\n   \
    \ if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n    end\n\
    \    if sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n  \
    \  end\n  end\n  local min_value = min_value\n  local max_value = max_value\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  local min_value = min_value\n  local max_value\
    \ = max_value\n  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value\
    \ then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i] > max_value\
    \ then\n      max_value = sorted_list[i]\n    end\n  end\n  local min_value =\
    \ min_value\n  local max_value = max_value\n  for i = 2, #sorted_list do\n   \
    \ if sorted_list[i] < min_value then\n      min_value = sorted_list[i]\n    end\n\
    \    if sorted_list[i] > max_value then\n      max_value = sorted_list[i]\n  \
    \  end\n  end\n  local min_value = min_value\n  local max_value = max_value\n\
    \  for i = 2, #sorted_list do\n    if sorted_", "  local sorted_lst = {}\n  local\
    \ min_val = lst[1]\n  local max_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < min_val then\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n \
    \     max_val = lst[i]\n    end\n    table.insert(sorted_lst, lst[i])\n  end\n\
    \  table.insert(sorted_lst, min_val)\n  table.insert(sorted_lst, max_val)\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  for i = 1, #lst do\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.sort(sorted_lst, function(x, y)\n    if x < y then\n\
    \      return -1\n    elseif x > y then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end)\n  return sorted_lst\nend", "  local sorted_list = lst\n\
    \  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i =\
    \ 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap the minimum and maximum values.\n  local minimum_index = #sorted_list\
    \ + 1\n  local maximum_index = #sorted_list + 1\n  local swapped\n  for i = 1,\
    \ #sorted_list do\n    if minimum > sorted_list[i] then\n      minimum_index =\
    \ minimum_index + 1\n      minimum = sorted_list[i]\n    end\n    if maximum <\
    \ sorted_list[i] then\n      maximum_index = maximum_index + 1\n      maximum\
    \ = sorted_list[i]\n    end\n  end\n  if minimum_index > maximum_index then\n\
    \    -- Swap minimum and maximum.\n    swapped\n    minimum_index = minimum_index\
    \ - 1\n    minimum = minimum\n    maximum_index = maximum_index - 1\n    maximum\
    \ = maximum\n  end\n  -- Swap the minimum and maximum values.\n  for i = minimum_index,\
    \ maximum_index do\n    local temp = sorted_list[i]\n    sorted_list[i] = minimum\n\
    \    minimum = temp\n  end\n  -- Swap the minimum and maximum values.\n  for i\
    \ = minimum_index, #sorted_list do\n    local temp = sorted_list[i]\n    sorted_list[i]\
    \ = maximum\n    maximum = temp\n  end\n  return sorted_list\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max if they are the same\n\
    \  if min_value == max_value then\n    sorted_list[#sorted_list] = min_value\n\
    \    sorted_list[#sorted_list - 1] = max_value\n  else\n    -- Swap min and max\
    \ if they are different\n    local min_pos = #sorted_list - 1\n    local max_pos\
    \ = #sorted_list\n    while min_pos > 0 and max_pos > 0 and sorted_list[min_pos]\
    \ == sorted_list[max_pos] do\n      min_pos = min_pos - 1\n      max_pos = max_pos\
    \ - 1\n    end\n    sorted_list[min_pos] = min_value\n    sorted_list[max_pos]\
    \ = max_value\n  end\n  return sorted_list\nend", "  local sorted_lst = lst\n\
    \  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  -- Swap min and max values.\n  local\
    \ tmp_value = min_value\n  min_value = max_value\n  max_value = tmp_value\n  --\
    \ Swap all values between min and max.\n  for i = 1, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    if value < min_value then\n      sorted_lst[i] =\
    \ max_value\n    elseif value > max_value then\n      sorted_lst[i] = min_value\n\
    \    end\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n  local\
    \ minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n   \
    \ if minimum == nil then\n      minimum = value\n      maximum = value\n    else\n\
    \      minimum = math.min(minimum, value)\n      maximum = math.max(maximum, value)\n\
    \    end\n    table.insert(sorted_lst, value)\n  end\n  return sorted_lst\nend",
  "  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if minimum > lst[i] then\n      minimum = lst[i]\n\
    \    end\n    if maximum < lst[i] then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  table.sort(strange_lst)\n  return strange_lst\nend", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n    minimum\
    \ = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend", "  local sorted_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    end\n    if lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  table.insert(sorted_lst, min_value)\n\
    \  table.insert(sorted_lst, max_value)\n  table.insert(sorted_lst, min_value)\n\
    \  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list] = maximum\n  return sorted_list\nend",
  "  local result = {}\n  local minimum = nil\n  local maximum = nil\n  for _, value\
    \ in ipairs(lst) do\n    if minimum == nil then\n      minimum = value\n     \
    \ maximum = value\n    else\n      if value < minimum then\n        minimum =\
    \ value\n      elseif value > maximum then\n        maximum = value\n      end\n\
    \    end\n  end\n  if minimum == nil then\n    return result\n  end\n  for _,\
    \ value in ipairs(lst) do\n    if value < minimum then\n      table.insert(result,\
    \ minimum)\n      minimum = minimum - 1\n    elseif value > maximum then\n   \
    \   table.insert(result, maximum)\n      maximum = maximum + 1\n    else\n   \
    \   table.insert(result, value)\n    end\n  end\n  return result\nend", "  local\
    \ strange_lst = {}\n  local min_value = lst[1]\n  local max_value = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value = lst[i]\n\
    \    elseif lst[i] > max_value then\n      max_value = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  for i = 1, #strange_lst do\n    lst[#lst+1] = strange_lst[i]\n\
    \  end\n  return lst\nend", "  local sorted_lst = {}\n  local minimum = nil\n\
    \  local maximum = nil\n  for _, value in ipairs(lst) do\n    if minimum == nil\
    \ then\n      minimum = value\n      maximum = value\n    else\n      minimum\
    \ = math.min(minimum, value)\n      maximum = math.max(maximum, value)\n    end\n\
    \    table.insert(sorted_lst, value)\n  end\n  return sorted_lst\nend", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_lst = lst\n  local min_val\
    \ = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst\
    \ do\n    if sorted_lst[i] < min_val then\n      min_val = sorted_lst[i]\n   \
    \ end\n    if sorted_lst[i] > max_val then\n      max_val = sorted_lst[i]\n  \
    \  end\n  end\n  -- Swap min and max values\n  sorted_lst[1] = max_val\n  sorted_lst[#sorted_lst]\
    \ = min_val\n  return sorted_lst\nend", "  local sorted_lst = {}\n  local min_value\
    \ = nil\n  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value\
    \ == nil then\n      min_value = value\n    elseif value < min_value then\n  \
    \    min_value = value\n    end\n    if max_value == nil then\n      max_value\
    \ = value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \    table.insert(sorted_lst, value)\n  end\n  return sorted_lst\nend", "  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min_value and max_value\n  sorted_list[#sorted_list]\
    \ = max_value\n  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\n\
    end", "  local strange_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  for i = 1, #strange_lst do\n    strange_lst[i] =\
    \ strange_lst[i]\n  end\n  return strange_lst\nend", "  local strange_lst = {}\n\
    \  for i = 1, #lst do\n    local value = lst[i]\n    local j = i\n    while j\
    \ > 0 and lst[j - 1] > value do\n      strange_lst[j] = lst[j - 1]\n      j =\
    \ j - 1\n    end\n    strange_lst[j] = value\n  end\n  return strange_lst\nend",
  "  local sorted_lst = {}\n  local minimum = nil\n  local maximum = nil\n  for _,\
    \ v in ipairs(lst) do\n    if minimum == nil then\n      minimum = v\n      maximum\
    \ = v\n    elseif v < minimum then\n      minimum = v\n    end\n    if v > maximum\
    \ then\n      maximum = v\n    end\n  end\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    minimum = minimum - 1\n\
    \    maximum = maximum + 1\n  end\n  return sorted_lst\nend", "  local sorted_lst\
    \ = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ min_value then\n      min_value = value\n    end\n    if value > max_value then\n\
    \      max_value = value\n    end\n  end\n  sorted_lst[1] = min_value\n  sorted_lst[#sorted_lst]\
    \ = max_value\n  return sorted_lst\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    minimum = minimum and minimum or lst[i]\n    maximum\
    \ = maximum and maximum or lst[i]\n    if minimum > maximum then\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    else\n      strange_lst[#strange_lst+1]\
    \ = maximum\n      maximum = lst[i]\n    end\n  end\n  strange_lst[#strange_lst+1]\
    \ = minimum\n  strange_lst[#strange_lst+1] = maximum\n  return strange_lst\nend",
  "  local lst2 = {}\n  local min = lst[1]\n  local max = lst[1]\n  for i = 2, #lst\
    \ do\n    local v = lst[i]\n    if v < min then\n      min = v\n    end\n    if\
    \ v > max then\n      max = v\n    end\n    lst2[i] = v\n  end\n  lst2[1] = min\n\
    \  lst2[2] = max\n  return lst2\nend", "  local sorted_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst\
    \ + 1] = lst[i]\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n\
    \  return sorted_lst\nend", "  local strange_lst = {}\n  local min_val = lst[1]\n\
    \  local max_val = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_val then\n\
    \      min_val = lst[i]\n    elseif lst[i] > max_val then\n      max_val = lst[i]\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] < min_val then\n      table.insert(strange_lst,\
    \ min_val)\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n      table.insert(strange_lst,\
    \ max_val)\n      max_val = lst[i]\n    end\n  end\n  table.insert(strange_lst,\
    \ max_val)\n  return strange_lst\nend", "  local strange = {}\n  local min\n \
    \ local max\n  for _, v in ipairs(lst) do\n    if min == nil then\n      min =\
    \ v\n      max = v\n    else\n      if v < min then\n        min = v\n      elseif\
    \ v > max then\n        max = v\n      end\n    end\n  end\n  for _, v in ipairs(lst)\
    \ do\n    if min == nil then\n      min = v\n      max = v\n    else\n      if\
    \ v < min then\n        min = v\n      elseif v > max then\n        max = v\n\
    \      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if min == nil then\n\
    \      min = v\n      max = v\n    else\n      if v < min then\n        min =\
    \ v\n      elseif v > max then\n        max = v\n      end\n    end\n  end\n \
    \ for _, v in ipairs(lst) do\n    if min == nil then\n      min = v\n      max\
    \ = v\n    else\n      if v < min then\n        min = v\n      elseif v > max\
    \ then\n        max = v\n      end\n    end\n  end\n  for _, v in ipairs(lst)\
    \ do\n    if min == nil then\n      min = v\n      max = v\n    else\n      if\
    \ v < min then\n        min = v\n      elseif v > max then\n        max = v\n\
    \      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if min == nil then\n\
    \      min = v\n      max = v\n    else\n      if v < min then\n        min =\
    \ v\n      elseif v > max then\n        max = v\n      end\n    end\n  end\n \
    \ for _, v in ipairs(lst) do\n    if min == nil then\n      min = v\n      max\
    \ = v\n    else\n      if v < min then\n        min = v\n      elseif v > max\
    \ then\n        max = v\n      end\n    end\n  end\n  for _, v in ipairs(lst)\
    \ do\n    if min == nil then\n      min = v\n      max = v\n    else\n      if\
    \ v < min then\n        min = v\n      elseif v > max then\n        max = v\n\
    \      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if min == nil then\n\
    \      min = v\n      max = v\n    else\n      if v < min then\n        min =\
    \ v\n      elseif v > max then\n        max = v\n      ", "  local sorted_lst\
    \ = {}\n  local minimum = nil\n  local maximum = nil\n  for _, v in ipairs(lst)\
    \ do\n    if minimum == nil then\n      minimum = v\n      maximum = v\n    else\n\
    \      if v < minimum then\n        minimum = v\n      elseif v > maximum then\n\
    \        maximum = v\n      end\n    end\n    table.insert(sorted_lst, v)\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return minimum > a end)\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  local minimum = nil\n  local maximum = nil\n\
    \  for _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum =\
    \ value\n      maximum = value\n    else\n      minimum = minimum > value ? minimum\
    \ : value\n      maximum = maximum < value ? maximum : value\n    end\n    table.insert(sorted_lst,\
    \ minimum)\n    table.insert(sorted_lst, maximum)\n    minimum = maximum\n  end\n\
    \  return sorted_lst\nend", "  local lst2 = {}\n  local i = 1\n  while i <= #lst\
    \ do\n    lst2[#lst2 + 1] = lst[i]\n    i = i + 1\n  end\n  lst2 = lst2\n  table.sort(lst2,\
    \ function(a, b) return a < b end)\n  local i = 1\n  while i <= #lst do\n    lst2[#lst2\
    \ + 1] = lst[i]\n    i = i + 1\n  end\n  return lst2\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n\
    \  -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n \
    \ -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  --\
    \ Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap\
    \ the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the\
    \ minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum\
    \ and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum and\
    \ maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n\
    \  minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n \
    \ minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n  minimum,\
    \ maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n  minimum, maximum\
    \ = minimum, maximum\n  -- Swap the minimum and maximum.\n  minimum, maximum =\
    \ minimum, maximum\n  -- Swap the minimum and maximum.\n  minimum, maximum = minimum,\
    \ maximum\n  -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n\
    \  -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n \
    \ -- Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  --\
    \ Swap the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap\
    \ the minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the\
    \ minimum and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum\
    \ and maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum and\
    \ maximum.\n  minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n\
    \  minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n \
    \ minimum, maximum = minimum, maximum\n  -- Swap the minimum and maximum.\n  minimum,\
    \ maximum = minimum, maximum\n", "  local strange_lst = {}\n  local minimum =\
    \ lst[1]\n  local maximum = lst[1]\n  for i = 2, #lst do\n    minimum = minimum\
    \ or lst[i]\n    maximum = maximum or lst[i]\n    if minimum > maximum then\n\
    \      strange_lst[#strange_lst+1] = minimum\n      minimum = lst[i]\n      maximum\
    \ = lst[i]\n    elseif minimum < maximum then\n      strange_lst[#strange_lst+1]\
    \ = maximum\n      maximum = lst[i]\n    else\n      strange_lst[#strange_lst+1]\
    \ = minimum\n      minimum = lst[i]\n      maximum = lst[i]\n    end\n  end\n\
    \  strange_lst[#strange_lst+1] = maximum\n  return strange_lst\nend", "  local\
    \ strange_lst = {}\n  for i = 1, #lst do\n    local value = lst[i]\n    local\
    \ j = i - 1\n    while j >= 0 and value < lst[j] do\n      strange_lst[j] = lst[j]\n\
    \      j = j - 1\n    end\n    strange_lst[j] = value\n  end\n  return strange_lst\n\
    end", "  local result = {}\n  local minimum = #lst\n  for _, value in ipairs(lst)\
    \ do\n    minimum = minimum - 1\n    table.insert(result, value)\n  end\n  table.sort(result)\n\
    \  for _, value in ipairs(lst) do\n    minimum = minimum + 1\n    table.insert(result,\
    \ value)\n  end\n  return result\nend", "  local strange_lst = {}\n  for i = 1,\
    \ #lst do\n    local value = lst[i]\n    local j = i - 1\n    while j >= 0 and\
    \ value < lst[j] do\n      strange_lst[#strange_lst+1] = lst[j]\n      j = j -\
    \ 1\n    end\n    strange_lst[#strange_lst+1] = value\n  end\n  return strange_lst\n\
    end", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum values.\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_lst = {}\n  local minimum = nil\n  local maximum = nil\n\
    \  for _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum =\
    \ value\n      maximum = value\n    else\n      if value < minimum then\n    \
    \    minimum = value\n      elseif value > maximum then\n        maximum = value\n\
    \      end\n    end\n    table.insert(sorted_lst, value)\n  end\n  return sorted_lst\n\
    end", "  local lst = lst or {}\n  local min = lst[1]\n  local max = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < min then\n      min = lst[i]\n    end\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n  end\n  local res = {}\n\
    \  for i = 1, #lst do\n    res[#res + 1] = min .. i .. max\n  end\n  return res\n\
    end", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list\
    \ + 1] = maximum\n  return sorted_list\nend", "  local sorted_lst = {}\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  table.insert(sorted_lst, min_value)\n\
    \  table.insert(sorted_lst, max_value)\n  table.insert(sorted_lst, min_value)\n\
    \  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are different.\n  if minimum > maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are different.\n \
    \ if minimum < maximum then\n    minimum, maximum = maximum, minimum\n  end\n\
    \  -- Swap the minimum and maximum if they are different.\n  if minimum > maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are different.\n  if minimum < maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are different.\n  if minimum > maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are different.\n \
    \ if minimum < maximum then\n    minimum, maximum = maximum, minimum\n  end\n\
    \  -- Swap the minimum and maximum if they are different.\n  if minimum > maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are different.\n  if minimum < maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are different.\n  if minimum > maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are different.\n \
    \ if minimum < maximum then\n    minimum, maximum = maximum, minimum\n  end\n\
    \  -- Swap the minimum and maximum if they are different.\n  if minimum > maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are different.\n  if minimum < maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are different.\n  if minimum > maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are different.\n \
    \ if minimum < maximum then\n    minimum, maximum = maximum, minimum\n  end\n\
    \  -- Swap the minimum and maximum if they are different.\n  if minimum > ", " \
    \ local result = {}\n  local minv = math.min(lst)\n  local maxv = math.max(lst)\n\
    \  for i = minv, maxv, -1 do\n    table.insert(result, i)\n  end\n  return result\n\
    end", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum if they are the same.\n\
    \  if minimum == maximum then\n    minimum, maximum = minimum, maximum\n  end\n\
    \  -- Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = minimum, maximum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = minimum, maximum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = minimum,\
    \ maximum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = minimum, maximum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = minimum, maximum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = minimum, maximum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = minimum,\
    \ maximum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = minimum, maximum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = minimum, maximum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = minimum, maximum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = minimum,\
    \ maximum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = minimum, maximum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = minimum, maximum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = minimum, maximum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == ", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    local element = sorted_list[i]\n    if element < minimum then\n    \
    \  minimum = element\n    elseif element > maximum then\n      maximum = element\n\
    \    end\n  end\n  local minimum_index = #sorted_list + 1\n  local maximum_index\
    \ = #sorted_list + 1\n  for i = 1, #sorted_list do\n    local element = sorted_list[i]\n\
    \    if element < minimum then\n      minimum_index = minimum_index + 1\n    \
    \  minimum = element\n    elseif element > maximum then\n      maximum_index =\
    \ maximum_index + 1\n      maximum = element\n    end\n  end\n  local minimum_index2\
    \ = minimum_index + 1\n  local maximum_index2 = maximum_index + 1\n  for i = minimum_index2,\
    \ maximum_index2 do\n    local element = sorted_list[i]\n    minimum_index = minimum_index\
    \ - 1\n    maximum_index = maximum_index - 1\n    minimum = minimum_index > minimum\
    \ and sorted_list[minimum_index] or minimum\n    maximum = maximum_index < maximum\
    \ and sorted_list[maximum_index] or maximum\n    minimum = minimum_index > minimum\
    \ and minimum or minimum\n    maximum = maximum_index < maximum and maximum or\
    \ maximum\n    sorted_list[minimum_index] = element\n    sorted_list[maximum_index]\
    \ = element\n  end\n  return sorted_list\nend", "  local sorted_list = lst\n \
    \ local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min_value and max_value\n  sorted_list[#sorted_list]\
    \ = max_value\n  sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\n\
    end", "  local sorted_list = terralib.newlist()\n  local min_value = lst[1]\n\
    \  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n\
    \      min_value = lst[i]\n    elseif lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    local value = lst[i]\n \
    \   if value < min_value then\n      table.insert(sorted_list, min_value)\n  \
    \    min_value = value\n    elseif value > max_value then\n      table.insert(sorted_list,\
    \ max_value)\n      max_value = value\n    else\n      table.insert(sorted_list,\
    \ value)\n    end\n  end\n  return sorted_list\nend", "  local sorted_list = lst\n\
    \  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i =\
    \ 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap the minimum and maximum values\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_lst = {}\n  local min_value = nil\n  local max_value = nil\n\
    \  for _, value in ipairs(lst) do\n    if min_value == nil then\n      min_value\
    \ = value\n    elseif value < min_value then\n      min_value = value\n    end\n\
    \    if max_value == nil then\n      max_value = value\n    elseif value > max_value\
    \ then\n      max_value = value\n    end\n    table.insert(sorted_lst, value)\n\
    \  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n  return sorted_lst\n\
    end", "  local strange_lst = {}\n  for i = 1, #lst do\n    local min_value = lst[i]\n\
    \    local max_value = lst[i]\n    for j = i + 1, #lst do\n      if lst[j] < min_value\
    \ then\n        min_value = lst[j]\n      elseif lst[j] > max_value then\n   \
    \     max_value = lst[j]\n      end\n    end\n    table.insert(strange_lst, min_value)\n\
    \    table.insert(strange_lst, max_value)\n    table.insert(strange_lst, min_value)\n\
    \  end\n  return strange_lst\nend", "  local strange_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if lst[i]\
    \ < min_value then\n      strange_lst[#strange_lst+1] = lst[i]\n    elseif lst[i]\
    \ > max_value then\n      strange_lst[#strange_lst+1] = lst[i]\n    end\n  end\n\
    \  for i = 1, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend", "  local sorted_list =\
    \ lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local result = {}\n  local minimum\
    \ = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = value\n      maximum = value\n    elseif value\
    \ < minimum then\n      minimum = value\n    elseif value > maximum then\n   \
    \   maximum = value\n    end\n  end\n  for _, value in ipairs(lst) do\n    table.insert(result,\
    \ value)\n  end\n  table.sort(result, function(a, b)\n    if minimum == nil then\n\
    \      return b\n    elseif maximum == nil then\n      return a\n    elseif a\
    \ < minimum then\n      return b\n    elseif a > maximum then\n      return a\n\
    \    else\n      return b\n    end\n  end)\n  return result\nend", "  local result\
    \ = {}\n  local minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst)\
    \ do\n    if minimum == nil then\n      minimum = value\n      maximum = value\n\
    \    else\n      if value < minimum then\n        minimum = value\n      elseif\
    \ value > maximum then\n        maximum = value\n      end\n    end\n  end\n \
    \ local i = minimum\n  while i <= maximum do\n    table.insert(result, i)\n  \
    \  i = i + 2\n  end\n  return result\nend", "  local strange_lst = {}\n  local\
    \ minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n   \
    \ if minimum == nil then\n      minimum = value\n      maximum = value\n    else\n\
    \      if value < minimum then\n        minimum = value\n      elseif value >\
    \ maximum then\n        maximum = value\n      else\n        table.insert(strange_lst,\
    \ value)\n      end\n    end\n  end\n  if minimum == nil then\n    return strange_lst\n\
    \  end\n  if maximum == nil then\n    return strange_lst\n  end\n  for _, value\
    \ in ipairs(lst) do\n    if value < minimum then\n      table.insert(strange_lst,\
    \ minimum)\n      minimum = minimum - 1\n    elseif value > maximum then\n   \
    \   table.insert(strange_lst, maximum)\n      maximum = maximum + 1\n    else\n\
    \      table.insert(strange_lst, value)\n    end\n  end\n  return strange_lst\n\
    end", "  local result = {}\n  local minimum = nil\n  local maximum = nil\n  for\
    \ _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum = value\n\
    \      maximum = value\n    else\n      if value < minimum then\n        minimum\
    \ = value\n      elseif value > maximum then\n        maximum = value\n      end\n\
    \    end\n  end\n  for _, value in ipairs(lst) do\n    if value < minimum then\n\
    \      table.insert(result, minimum)\n      minimum = value\n    elseif value\
    \ > maximum then\n      table.insert(result, maximum)\n      maximum = value\n\
    \    end\n  end\n  table.insert(result, minimum)\n  table.insert(result, maximum)\n\
    \  return result\nend", "  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n\
    \  local maximum = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local\
    \ value = sorted_lst[i]\n    if value < minimum then\n      minimum = value\n\
    \    elseif value > maximum then\n      maximum = value\n    end\n  end\n  local\
    \ new_lst = {}\n  for i = 1, #sorted_lst do\n    table.insert(new_lst, minimum)\n\
    \    table.insert(new_lst, maximum)\n    table.insert(new_lst, sorted_lst[i])\n\
    \  end\n  return new_lst\nend", "  local sorted_lst = lst\n  local min_value =\
    \ sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst\
    \ do\n    local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    end\n    if value > max_value then\n      max_value = value\n \
    \   end\n  end\n  -- Swap min and max values\n  sorted_lst[1], sorted_lst[#sorted_lst]\
    \ = max_value, min_value\n  -- Sort rest of list\n  for i = #sorted_lst, 2, -1\
    \ do\n    local value = sorted_lst[i]\n    local j = i - 1\n    while j > 0 and\
    \ sorted_lst[j] > value do\n      sorted_lst[j + 1] = sorted_lst[j]\n      j =\
    \ j - 1\n    end\n    sorted_lst[j + 1] = value\n  end\n  return sorted_lst\n\
    end", "  local result = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < minimum then\n\
    \      minimum = value\n    elseif value > maximum then\n      maximum = value\n\
    \    end\n    result[#result + 1] = value\n  end\n  result[#result + 1] = minimum\n\
    \  result[#result + 1] = maximum\n  return result\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  for i = 1, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      table.insert(sorted_list, min_value, sorted_list[i])\n\
    \      table.insert(sorted_list, i, max_value)\n      break\n    end\n  end\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  for i = 1, #sorted_list\
    \ do\n    sorted_list[i] = minimum\n    minimum = minimum > sorted_list[i] and\
    \ sorted_list[i] or minimum\n    sorted_list[i] = maximum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  return sorted_list\n\
    end", "  local result = {}\n  local minimum = nil\n  local maximum = nil\n  for\
    \ _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum = value\n\
    \      maximum = value\n    else\n      if value < minimum then\n        minimum\
    \ = value\n      elseif value > maximum then\n        maximum = value\n      end\n\
    \    end\n  end\n  for _, value in ipairs(lst) do\n    if value < minimum then\n\
    \      table.insert(result, minimum)\n      minimum = value\n    elseif value\
    \ > maximum then\n      table.insert(result, maximum)\n      maximum = value\n\
    \    end\n  end\n  table.insert(result, minimum)\n  table.insert(result, maximum)\n\
    \  return result\nend", "  local sorted_lst = {}\n  local min_val = nil\n  local\
    \ max_val = nil\n  for _, v in ipairs(lst) do\n    if min_val == nil then\n  \
    \    min_val = v\n    elseif v < min_val then\n      min_val = v\n    end\n  \
    \  if max_val == nil then\n      max_val = v\n    elseif v > max_val then\n  \
    \    max_val = v\n    end\n    table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  return sorted_lst\nend", "  local strange_lst\
    \ = {}\n  local minimum = nil\n  local maximum = nil\n  for _, v in ipairs(lst)\
    \ do\n    if minimum == nil then\n      minimum = v\n      maximum = v\n    else\n\
    \      if v < minimum then\n        minimum = v\n      elseif v > maximum then\n\
    \        maximum = v\n      end\n    end\n    strange_lst[minimum] = minimum\n\
    \    strange_lst[maximum] = maximum\n  end\n  strange_lst[minimum] = minimum\n\
    \  strange_lst[maximum] = maximum\n  return strange_lst\nend", "  local sorted_list\
    \ = terralib.newlist()\n  local min_value = lst[1]\n  local max_value = lst[1]\n\
    \  for i = 2, #lst do\n    local value = lst[i]\n    if value < min_value then\n\
    \      min_value = value\n    elseif value > max_value then\n      max_value =\
    \ value\n    end\n    sorted_list:insert(value)\n  end\n  sorted_list:insert(min_value)\n\
    \  sorted_list:insert(max_value)\n  return sorted_list\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  local min_value = min_value\n  local max_value\
    \ = max_value\n  local i = 1\n  while i <= #sorted_list do\n    local value =\
    \ sorted_list[i]\n    if value < min_value then\n      table.insert(sorted_list,\
    \ min_value)\n      min_value = value\n    elseif value > max_value then\n   \
    \   table.insert(sorted_list, max_value)\n      max_value = value\n    else\n\
    \      table.insert(sorted_list, value)\n    end\n    i = i + 1\n  end\n  return\
    \ sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local strange_lst = {}\n  local minimum = lst[1]\n  local maximum = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < minimum then\n      minimum = lst[i]\n\
    \    elseif lst[i] > maximum then\n      maximum = lst[i]\n    end\n    strange_lst[#strange_lst+1]\
    \ = lst[i]\n  end\n  strange_lst[#strange_lst+1] = minimum\n  strange_lst[#strange_lst+1]\
    \ = maximum\n  return strange_lst\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and minimum or sorted_list[i]\n \
    \   maximum = maximum < sorted_list[i] and maximum or sorted_list[i]\n  end\n\
    \  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n    minimum = maximum\n\
    \    maximum = minimum\n  end\n  return sorted_list\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum.\n  sorted_list[#sorted_list] = minimum\n\
    \  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local result = {}\n  local minimum\
    \ = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = value\n      maximum = value\n    else\n      if\
    \ value < minimum then\n        minimum = value\n      elseif value > maximum\
    \ then\n        maximum = value\n      end\n    end\n  end\n  if minimum == nil\
    \ then\n    return {}\n  end\n  if maximum == nil then\n    return lst\n  end\n\
    \  local minimum_index = nil\n  local maximum_index = nil\n  for index, value\
    \ in ipairs(lst) do\n    if minimum == value then\n      minimum_index = index\n\
    \    elseif maximum == value then\n      maximum_index = index\n    end\n  end\n\
    \  if minimum_index == nil then\n    return lst\n  end\n  if maximum_index ==\
    \ nil then\n    return lst\n  end\n  table.insert(result, minimum)\n  table.insert(result,\
    \ lst[minimum_index])\n  table.insert(result, maximum)\n  table.insert(result,\
    \ lst[maximum_index])\n  return result\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  -- Now we have the minimum and maximum, we can swap them.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also need to swap minimum and maximum.\n\
    \  -- We also need to swap minimum and maximum.\n  -- We also need to swap minimum\
    \ and maximum.\n  -- We also need to swap minimum and maximum.\n  -- We also need\
    \ to swap minimum and maximum.\n  -- We also ", "  local sorted_lst = {}\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst\
    \ + 1] = lst[i]\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = min_value\n\
    \  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = max_value\n  end\n  return\
    \ sorted_lst\nend", "  local sorted_lst = lst\n  local minimum = sorted_lst[1]\n\
    \  local maximum = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local\
    \ element = sorted_lst[i]\n    if element < minimum then\n      minimum = element\n\
    \    elseif element > maximum then\n      maximum = element\n    end\n  end\n\
    \  local new_lst = {}\n  for i = 1, #sorted_lst do\n    local element = sorted_lst[i]\n\
    \    if element < minimum then\n      new_lst[#new_lst+1] = minimum\n      minimum\
    \ = element\n    elseif element > maximum then\n      new_lst[#new_lst+1] = maximum\n\
    \      maximum = element\n    else\n      new_lst[#new_lst+1] = element\n    end\n\
    \  end\n  new_lst[#new_lst+1] = minimum\n  new_lst[#new_lst+1] = maximum\n  return\
    \ new_lst\nend", "  local strange_lst = {}\n  local min_value = nil\n  local max_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if min_value == nil then\n    \
    \  min_value = value\n    elseif value < min_value then\n      min_value = value\n\
    \    end\n    if max_value == nil then\n      max_value = value\n    elseif value\
    \ > max_value then\n      max_value = value\n    end\n    strange_lst[#strange_lst+1]\
    \ = value\n  end\n  strange_lst[#strange_lst+1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  return strange_lst\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list + 1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum =\
    \ sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum.\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum\
    \ = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n\
    \    minimum = maximum\n    maximum = minimum\n  end\n  return sorted_list\nend",
  "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum =\
    \ sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  for i = 1, #sorted_list do\n    sorted_list[i] = minimum\n\
    \    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n    sorted_list[i]\
    \ = maximum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  return sorted_list\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    local element = sorted_list[i]\n    if element < minimum then\n    \
    \  minimum = element\n    elseif element > maximum then\n      maximum = element\n\
    \    end\n  end\n  local new_list = sorted_list\n  for i = 1, #sorted_list do\n\
    \    local element = sorted_list[i]\n    if element < minimum then\n      new_list[i]\
    \ = minimum\n    elseif element > maximum then\n      new_list[i] = maximum\n\
    \    end\n  end\n  return new_list\nend", "  local sorted_lst = {}\n  local min_val\
    \ = math.min(lst)\n  local max_val = math.max(lst)\n  for i = min_val, max_val\
    \ do\n    table.insert(sorted_lst, i)\n  end\n  table.sort(sorted_lst, function(a,\
    \ b)\n    return a < b\n  end)\n  return sorted_lst\nend", "  local sorted_lst\
    \ = {}\n  local minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst)\
    \ do\n    if minimum == nil then\n      minimum = value\n      maximum = value\n\
    \    else\n      if value < minimum then\n        minimum = value\n      elseif\
    \ value > maximum then\n        maximum = value\n      end\n    end\n    table.insert(sorted_lst,\
    \ value)\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n  local\
    \ min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value\
    \ then\n      max_value = lst[i]\n    end\n    table.insert(sorted_lst, lst[i])\n\
    \  end\n  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst, max_value)\n\
    \  return sorted_lst\nend", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n\
    \  local max_value = sorted_list[#sorted_list]\n  for i = 2, #sorted_list do\n\
    \    local value = sorted_list[i]\n    if value < min_value then\n      min_value\
    \ = value\n    end\n    if value > max_value then\n      max_value = value\n \
    \   end\n  end\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend", "  local strange_lst = {}\n  local\
    \ minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n   \
    \ if minimum == nil then\n      minimum = value\n      maximum = value\n    else\n\
    \      minimum = math.min(minimum, value)\n      maximum = math.max(maximum, value)\n\
    \    end\n    strange_lst[value] = true\n  end\n  for _, value in ipairs(strange_lst)\
    \ do\n    table.insert(strange_lst, value)\n  end\n  return strange_lst\nend",
  "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum =\
    \ sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local result = {}\n  local minimum\
    \ = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = value\n      maximum = value\n    else\n      minimum\
    \ = math.min(minimum, value)\n      maximum = math.max(maximum, value)\n    end\n\
    \  end\n  for _, value in ipairs(lst) do\n    table.insert(result, value)\n  end\n\
    \  table.sort(result)\n  return result\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  -- Swap minimum and maximum\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with\
    \ maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n\
    \  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum,\
    \ maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum\
    \ = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum = maximum,\
    \ minimum\n  -- Swap minimum with maximum\n  minimum, maximum = maximum, minimum\n\
    \  -- Swap minimum with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with\
    \ maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n\
    \  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum,\
    \ maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum\
    \ = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum = maximum,\
    \ minimum\n  -- Swap minimum with maximum\n  minimum, maximum = maximum, minimum\n\
    \  -- Swap minimum with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap\
    \ minimum with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum\
    \ with maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with\
    \ maximum\n  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n\
    \  minimum, maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum,\
    \ maximum = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum\
    \ = maximum, minimum\n  -- Swap minimum with maximum\n  minimum, maximum = maximum,\
    \ minimum\n  -- Swap minimum with maximum\n", "  local result = {}\n  local minimum\
    \ = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = value\n      maximum = value\n    else\n      minimum\
    \ = math.min(minimum, value)\n      maximum = math.max(maximum, value)\n    end\n\
    \    result[#result + 1] = value\n  end\n  table.sort(result, function(a, b) return\
    \ minimum > a end)\n  table.sort(result, function(a, b) return maximum < b end)\n\
    \  return result\nend", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n\
    \  local max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    elseif sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ min and max values\n  sorted_list[#sorted_list] = max_value\n  sorted_list[#sorted_list\
    \ + 1] = min_value\n  return sorted_list\nend", "  local sorted_lst = lst\n  local\
    \ minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n  for i\
    \ = 2, #sorted_lst do\n    local current = sorted_lst[i]\n    if current < minimum\
    \ then\n      minimum = current\n    elseif current > maximum then\n      maximum\
    \ = current\n    end\n  end\n  local new_lst = {}\n  for i = 1, #sorted_lst do\n\
    \    local current = sorted_lst[i]\n    if current < minimum then\n      new_lst[#new_lst+1]\
    \ = minimum\n      minimum = current\n    elseif current > maximum then\n    \
    \  new_lst[#new_lst+1] = maximum\n      maximum = current\n    else\n      new_lst[#new_lst+1]\
    \ = current\n    end\n  end\n  return new_lst\nend", "  local sorted_list = lst\n\
    \  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min_value and max_value if they\
    \ are equal\n  if min_value == max_value then\n    local tmp = min_value\n   \
    \ min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min_value and max_value\
    \ if they are equal\n  if min_value == max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min_value and\
    \ max_value if they are equal\n  if min_value == max_value then\n    local tmp\
    \ = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap\
    \ min_value and max_value if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min_value and max_value if they are equal\n  if min_value ==\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Swap min_value and max_value if they are equal\n  if min_value\
    \ == max_value then\n    local tmp = min_value\n    min_value = max_value\n  \
    \  max_value = tmp\n  end\n  -- Swap min_value and max_value if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min_value and max_value if\
    \ they are equal\n  if min_value == max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min_value and\
    \ max_value if they are equal\n  if min_value == max_value then\n    local tmp\
    \ = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap\
    \ min_value and max_value if they are equal\n  if min_value == max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min_value and max_value if they are equal\n  if min_value ==\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Swap min_value and max_value if they are equal\n  if min_value\
    \ == max_value then\n    local tmp = min_value\n    min_value = max_value\n  \
    \  max_value = tmp\n  end\n  -- Swap min_value and max_value if they are equal\n",
  "  local strange_lst = {}\n  for i = 1, #lst do\n    local value = lst[i]\n    local\
    \ j = i - 1\n    while j >= 0 and value < lst[j] do\n      strange_lst[j] = lst[j]\n\
    \      j = j - 1\n    end\n    strange_lst[j] = value\n  end\n  return strange_lst\n\
    end", "  local strange_lst = {}\n  local minimum = nil\n  local maximum = nil\n\
    \  for _, value in ipairs(lst) do\n    if minimum == nil then\n      minimum =\
    \ value\n      maximum = value\n    else\n      minimum = minimum > value ? minimum\
    \ : value\n      maximum = maximum < value ? maximum : value\n    end\n    strange_lst[minimum]\
    \ = minimum\n    strange_lst[maximum] = maximum\n  end\n  return strange_lst\n\
    end", "  local sorted_lst = {}\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n\
    \  end\n  for i = 1, #sorted_lst do\n    sorted_lst[#sorted_lst + 1] = min_value\n\
    \  end\n  for i = 1, #sorted_lst do\n    sorted_lst[#sorted_lst + 1] = max_value\n\
    \  end\n  return sorted_lst\nend", "  local result = {}\n  local minimum = #lst\n\
    \  for _, value in ipairs(lst) do\n    minimum = minimum - 1\n    table.insert(result,\
    \ value)\n  end\n  for _, value in ipairs(lst) do\n    minimum = minimum + 1\n\
    \    table.insert(result, value)\n  end\n  for _, value in ipairs(lst) do\n  \
    \  minimum = minimum - 1\n    table.insert(result, value)\n  end\n  return result\n\
    end", "  local lst = lst or {}\n  local min = lst[1]\n  local max = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < min then\n      min = lst[i]\n    end\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n  end\n  local lst2 =\
    \ {}\n  for i = 1, #lst do\n    lst2[#lst2 + 1] = lst[i]\n  end\n  lst2[#lst2\
    \ + 1] = min\n  lst2[#lst2 + 1] = max\n  return lst2\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap the minimum with the first element\
    \ in the list\n  sorted_list[#sorted_list] = min_value\n  -- Swap the maximum\
    \ with the last element in the list\n  sorted_list[#sorted_list - 1] = max_value\n\
    \  return sorted_list\nend", "  local sorted_lst = {}\n  local min_value = lst[1]\n\
    \  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n\
    \      min_value = lst[i]\n    elseif lst[i] > max_value then\n      max_value\
    \ = lst[i]\n    end\n    table.insert(sorted_lst, lst[i])\n  end\n  table.insert(sorted_lst,\
    \ min_value)\n  table.insert(sorted_lst, max_value)\n  return sorted_lst\nend",
  "  local result = {}\n  local minimum = nil\n  local maximum = nil\n  for _, v in\
    \ ipairs(lst) do\n    if minimum == nil then\n      minimum = v\n      maximum\
    \ = v\n    else\n      if v < minimum then\n        minimum = v\n      end\n \
    \     if v > maximum then\n        maximum = v\n      end\n    end\n  end\n  for\
    \ _, v in ipairs(lst) do\n    if minimum == nil then\n      minimum = v\n    \
    \  maximum = v\n    else\n      if v < minimum then\n        minimum = v\n   \
    \   end\n      if v > maximum then\n        maximum = v\n      end\n    end\n\
    \  end\n  for _, v in ipairs(lst) do\n    if minimum == nil then\n      minimum\
    \ = v\n      maximum = v\n    else\n      if v < minimum then\n        minimum\
    \ = v\n      end\n      if v > maximum then\n        maximum = v\n      end\n\
    \    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum == nil then\n  \
    \    minimum = v\n      maximum = v\n    else\n      if v < minimum then\n   \
    \     minimum = v\n      end\n      if v > maximum then\n        maximum = v\n\
    \      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum == nil\
    \ then\n      minimum = v\n      maximum = v\n    else\n      if v < minimum then\n\
    \        minimum = v\n      end\n      if v > maximum then\n        maximum =\
    \ v\n      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum ==\
    \ nil then\n      minimum = v\n      maximum = v\n    else\n      if v < minimum\
    \ then\n        minimum = v\n      end\n      if v > maximum then\n        maximum\
    \ = v\n      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = v\n      maximum = v\n    else\n      if v < minimum\
    \ then\n        minimum = v\n      end\n      if v > maximum then\n        maximum\
    \ = v\n      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = v\n      maximum = v\n    else\n      if v < minimum\
    \ then\n        minimum = v\n      end\n      if v > maximum then\n        maximum\
    \ = v\n      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if minimum\
    \ == nil then\n      minimum = v\n      maximum = v\n    else\n      if v < minimum\
    \ then\n        minimum = v\n      end", "  local sorted_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    table.insert(sorted_lst,\
    \ min_value)\n    table.insert(sorted_lst, max_value)\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  return sorted_lst\nend", "  local result = {}\n  for _, v\
    \ in ipairs(lst) do\n    table.insert(result, v)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local result = {}\n  local minimum = #lst\n  local\
    \ maximum = 1\n  for _, value in ipairs(lst) do\n    minimum = minimum - 1\n \
    \   maximum = maximum + 1\n    result[minimum] = minimum\n    result[maximum]\
    \ = value\n  end\n  return result\nend", "  local strange_lst = {}\n  for i =\
    \ 1, #lst do\n    local j = i - 1\n    local k = #strange_lst\n    while j >=\
    \ 0 and k < #lst do\n      if lst[j] > lst[k] then\n        table.insert(strange_lst,\
    \ lst[k])\n        k = k + 1\n      elseif lst[j] < lst[k] then\n        table.insert(strange_lst,\
    \ lst[j])\n        j = j - 1\n      else\n        table.insert(strange_lst, lst[j])\n\
    \        j = j - 1\n        k = k + 1\n      end\n    end\n    table.insert(strange_lst,\
    \ lst[i])\n  end\n  return strange_lst\nend", "  local sorted_list = lst\n  local\
    \ minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n\
    \  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n  \
    \  local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    end\n    if value > max_value then\n      max_value = value\n \
    \   end\n  end\n  -- Swap min and max values\n  sorted_lst[#sorted_lst] = min_value\n\
    \  sorted_lst[1] = max_value\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    local current = sorted_list[i]\n    if current\
    \ < minimum then\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum = current\n    end\n  end\n  local minimum_index = #sorted_list\
    \ + 1\n  local maximum_index = #sorted_list + 1\n  for i = 1, #sorted_list do\n\
    \    local current = sorted_list[i]\n    if current < minimum then\n      minimum_index\
    \ = minimum_index + 1\n      minimum = current\n    elseif current > maximum then\n\
    \      maximum_index = maximum_index + 1\n      maximum = current\n    end\n \
    \ end\n  -- Swap minimum with maximum.\n  local temp = minimum\n  minimum = maximum\n\
    \  maximum = temp\n  -- Swap minimum with maximum.\n  minimum_index = minimum_index\
    \ - 1\n  maximum_index = maximum_index - 1\n  -- Swap minimum with maximum.\n\
    \  minimum = minimum_index\n  maximum = maximum_index\n  -- Swap minimum with\
    \ maximum.\n  minimum_index = minimum_index + 1\n  maximum_index = maximum_index\
    \ + 1\n  -- Swap minimum with maximum.\n  minimum = minimum_index\n  maximum =\
    \ maximum_index\n  -- Swap minimum with maximum.\n  minimum_index = minimum_index\
    \ - 1\n  maximum_index = maximum_index - 1\n  -- Swap minimum with maximum.\n\
    \  minimum = minimum_index\n  maximum = maximum_index\n  -- Swap minimum with\
    \ maximum.\n  minimum_index = minimum_index + 1\n  maximum_index = maximum_index\
    \ + 1\n  -- Swap minimum with maximum.\n  minimum = minimum_index\n  maximum =\
    \ maximum_index\n  -- Swap minimum with maximum.\n  minimum_index = minimum_index\
    \ - 1\n  maximum_index = maximum_index - 1\n  -- Swap minimum with maximum.\n\
    \  minimum = minimum_index\n  maximum = maximum_index\n  -- Swap minimum with\
    \ maximum.\n  minimum_index = minimum_index + 1\n  maximum_index = maximum_index\
    \ + 1\n  -- Swap minimum with maximum.\n  minimum = minimum_index\n  maximum =\
    \ maximum_index\n  -- Swap minimum with maximum.\n  minimum_index = minimum_index\
    \ - 1\n  maximum_index = maximum_index - 1\n  -- Swap minimum with maximum.\n\
    \  minimum = minimum_index\n  maximum = maximum_index\n  -- Swap minimum with\
    \ maximum.\n  minimum_index = minimum_index + 1\n  maximum_index = maximum_index\
    \ + 1\n  -- Swap minimum with maximum.\n  minimum = minimum_index\n  maximum =\
    \ maximum", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local\
    \ maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum\
    \ > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i]\
    \ and sorted_list[i] or maximum\n  end\n  -- Swap the minimum and maximum\n  sorted_list[#sorted_list]\
    \ = minimum\n  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\n\
    end", "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < min_value then\n      min_value = value\n    elseif value > max_value\
    \ then\n      max_value = value\n    end\n  end\n  for i = 1, #sorted_lst do\n\
    \    local value = sorted_lst[i]\n    sorted_lst[i] = min_value .. value .. max_value\n\
    \  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    sorted_lst[#sorted_lst\
    \ + 1] = lst[i]\n  end\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = min_value\
    \ .. max_value\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n \
    \ local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min_value then\n      min_value = lst[i]\n    end\n    if lst[i]\
    \ > max_value then\n      max_value = lst[i]\n    end\n  end\n  for i = 1, #lst\
    \ do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return a < b end)\n  for i = 1, #sorted_lst do\n    sorted_lst[i]\
    \ = min_value .. sorted_lst[i]\n  end\n  return sorted_lst\nend", "  local strange_lst\
    \ = {}\n  local min_val = nil\n  local max_val = nil\n  for _, val in ipairs(lst)\
    \ do\n    if min_val == nil then\n      min_val = val\n    elseif val < min_val\
    \ then\n      min_val = val\n    end\n    if max_val == nil then\n      max_val\
    \ = val\n    elseif val > max_val then\n      max_val = val\n    end\n  end\n\
    \  for _, val in ipairs(lst) do\n    if val < min_val then\n      strange_lst[#strange_lst+1]\
    \ = val\n    elseif val > max_val then\n      strange_lst[#strange_lst+1] = val\n\
    \    else\n      strange_lst[#strange_lst+1] = min_val\n      strange_lst[#strange_lst+1]\
    \ = max_val\n    end\n  end\n  return strange_lst\nend", "  local lst2 = {}\n\
    \  for i = 1, #lst do\n    local value = lst[i]\n    lst2[value] = true\n  end\n\
    \  local i = 1\n  while i <= #lst2 do\n    local value = lst2[i]\n    lst2[value]\
    \ = nil\n    lst[#lst + 1] = value\n    i = i + 1\n  end\n  return lst\nend",
  "  local sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value\
    \ = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n\
    \    if value < min_value then\n      min_value = value\n    end\n    if value\
    \ > max_value then\n      max_value = value\n    end\n  end\n  -- Swap minimum\
    \ with maximum.\n  sorted_lst[#sorted_lst] = max_value\n  sorted_lst[1] = min_value\n\
    \  return sorted_lst\nend", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n\
    \  local max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    end\n    if sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ min and max values\n  local tmp\n  for i = 1, #sorted_list do\n    if sorted_list[i]\
    \ > max_value then\n      tmp = sorted_list[i]\n      sorted_list[i] = max_value\n\
    \      max_value = tmp\n    end\n    if sorted_list[i] < min_value then\n    \
    \  tmp = sorted_list[i]\n      sorted_list[i] = min_value\n      min_value = tmp\n\
    \    end\n  end\n  return sorted_list\nend", "  local strange_lst = {}\n  local\
    \ min_val = lst[1]\n  local max_val = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < min_val then\n      min_val = lst[i]\n    elseif lst[i] > max_val then\n \
    \     max_val = lst[i]\n    end\n  end\n  strange_lst[1] = min_val\n  strange_lst[#strange_lst+1]\
    \ = max_val\n  for i = 2, #lst do\n    if lst[i] < min_val then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_val then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend", "  local sorted_list =\
    \ lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n\
    \  local max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    elseif sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ the minimum and maximum values.\n  sorted_list[#sorted_list] = max_value\n \
    \ sorted_list[#sorted_list + 1] = min_value\n  return sorted_list\nend", "  local\
    \ sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local strange_lst = {}\n  local min_value\
    \ = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ min_value then\n      min_value = lst[i]\n    elseif lst[i] > max_value then\n\
    \      max_value = lst[i]\n    end\n  end\n  strange_lst[1] = min_value\n  strange_lst[#strange_lst+1]\
    \ = max_value\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      strange_lst[#strange_lst+1]\
    \ = lst[i]\n    end\n  end\n  return strange_lst\nend", "  local sorted_list =\
    \ lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_lst = {}\n  local min_val\
    \ = nil\n  local max_val = nil\n  for i = 1, #lst do\n    local val = lst[i]\n\
    \    if min_val == nil then\n      min_val = val\n      max_val = val\n    else\n\
    \      if val < min_val then\n        min_val = val\n      elseif val > max_val\
    \ then\n        max_val = val\n      end\n    end\n    table.insert(sorted_lst,\
    \ val)\n  end\n  table.sort(sorted_lst, function(x, y)\n    if x < y then\n  \
    \    return -1\n    elseif x > y then\n      return 1\n    else\n      return\
    \ 0\n    end\n  end)\n  return sorted_lst\nend", "  local sorted_list = lst\n\
    \  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n  for\
    \ i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    sorted_list[#sorted_list] = min_value\n\
    \    sorted_list[#sorted_list - 1] = max_value\n  else\n    -- Swap min and max\
    \ if they are equal\n    if min_value < max_value then\n      sorted_list[#sorted_list]\
    \ = min_value\n      sorted_list[#sorted_list - 1] = max_value\n      -- Swap\
    \ min and max if they are equal\n    else\n      -- Swap min and max if they are\
    \ equal\n      sorted_list[#sorted_list] = max_value\n      sorted_list[#sorted_list\
    \ - 1] = min_value\n    end\n  end\n  return sorted_list\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    end\n    if sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  local tmp\n  for i = 1, #sorted_list do\n\
    \    if sorted_list[i] < min_value then\n      tmp = sorted_list[i]\n      sorted_list[i]\
    \ = min_value\n      min_value = tmp\n    end\n    if sorted_list[i] > max_value\
    \ then\n      tmp = sorted_list[i]\n      sorted_list[i] = max_value\n      max_value\
    \ = tmp\n    end\n  end\n  return sorted_list\nend", "  local strange_lst = {}\n\
    \  for i = 1, #lst do\n    local value = lst[i]\n    local j = i - 1\n    while\
    \ j >= 0 and value < lst[j] do\n      strange_lst[j] = lst[j]\n      j = j - 1\n\
    \    end\n    strange_lst[j] = value\n  end\n  return strange_lst\nend", "  local\
    \ sorted_list = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_value =\
    \ max_value\n    max_value = tmp\n  end\n  -- Swap min and max if they are equal\n\
    \  if min_value == max_value then\n    local tmp = min_value\n    min_", "  local\
    \ sorted_list = terralib.newlist()\n  local min_value = lst[1]\n  local max_value\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < min_value then\n      min_value\
    \ = lst[i]\n    elseif lst[i] > max_value then\n      max_value = lst[i]\n   \
    \ end\n  end\n  sorted_list:insert(min_value)\n  sorted_list:insert(max_value)\n\
    \  for i = 2, #lst do\n    sorted_list:insert(lst[i])\n  end\n  return sorted_list\n\
    end", "  local sorted_list = lst\n  local min_value = sorted_list[1]\n  local\
    \ max_value = sorted_list[1]\n  for i = 2, #sorted_list do\n    if sorted_list[i]\
    \ < min_value then\n      min_value = sorted_list[i]\n    elseif sorted_list[i]\
    \ > max_value then\n      max_value = sorted_list[i]\n    end\n  end\n  -- Swap\
    \ min and max if necessary\n  if min_value < max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max\
    \ if necessary\n  if min_value < max_value then\n    local tmp = min_value\n \
    \   min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if\
    \ necessary\n  if min_value < max_value then\n    local tmp = min_value\n    min_value\
    \ = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if necessary\n\
    \  if min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value <\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value\
    \ then\n    local tmp = min_value\n    min_value = max_value\n    max_value =\
    \ tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n \
    \   local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n\
    \  -- Swap min and max if necessary\n  if min_value < max_value then\n    local\
    \ tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  --\
    \ Swap min and max if necessary\n  if min_value < max_value then\n    local tmp\
    \ = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap\
    \ min and max if necessary\n  if min_value < max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max\
    \ if necessary\n  if min_value < max_value then\n    local tmp = min_value\n \
    \   min_value = max_value\n    max_value = tmp\n  end\n  -- Sw", "  local sorted_lst\
    \ = lst\n  local minimum = sorted_lst[1]\n  local maximum = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local value = sorted_lst[i]\n    if value <\
    \ minimum then\n      minimum = value\n    elseif value > maximum then\n     \
    \ maximum = value\n    end\n  end\n  sorted_lst[1] = minimum\n  sorted_lst[#sorted_lst]\
    \ = maximum\n  return sorted_lst\nend", "  local sorted_lst = lst\n  local min_value\
    \ = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst\
    \ do\n    local value = sorted_lst[i]\n    if value < min_value then\n      min_value\
    \ = value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \  end\n  for i = 1, #sorted_lst do\n    local value = sorted_lst[i]\n    sorted_lst[i]\
    \ = min_value .. value .. max_value\n  end\n  return sorted_lst\nend", "  local\
    \ result = {}\n  local minimum = nil\n  local maximum = nil\n  for _, value in\
    \ ipairs(lst) do\n    if minimum == nil then\n      minimum = value\n      maximum\
    \ = value\n    else\n      if value < minimum then\n        minimum = value\n\
    \      elseif value > maximum then\n        maximum = value\n      end\n    end\n\
    \  end\n  local minimum_index = nil\n  local maximum_index = nil\n  for _, value\
    \ in ipairs(lst) do\n    if minimum_index == nil then\n      minimum_index = value\n\
    \      maximum_index = value\n    else\n      if value < minimum_index then\n\
    \        minimum_index = value\n      elseif value > maximum_index then\n    \
    \    maximum_index = value\n      end\n    end\n  end\n  for _, value in ipairs(lst)\
    \ do\n    if value < minimum_index then\n      minimum_index = value\n    elseif\
    \ value > maximum_index then\n      maximum_index = value\n    end\n  end\n  for\
    \ _, value in ipairs(lst) do\n    if minimum_index < value then\n      minimum\
    \ = value\n    elseif maximum_index > value then\n      maximum = value\n    end\n\
    \  end\n  for _, value in ipairs(lst) do\n    if minimum < value then\n      minimum\
    \ = value\n    elseif maximum > value then\n      maximum = value\n    end\n \
    \ end\n  for _, value in ipairs(lst) do\n    if minimum > value then\n      minimum\
    \ = value\n    elseif maximum < value then\n      maximum = value\n    end\n \
    \ end\n  for _, value in ipairs(lst) do\n    if minimum < maximum and maximum\
    \ < value then\n      minimum = value\n    elseif minimum > maximum and maximum\
    \ > value then\n      maximum = value\n    end\n  end\n  for _, value in ipairs(lst)\
    \ do\n    if minimum < maximum and minimum < value then\n      minimum = value\n\
    \    elseif maximum > minimum and maximum > value then\n      maximum = value\n\
    \    end\n  end\n  for _, value in ipairs(lst) do\n    if minimum < maximum and\
    \ minimum > value then\n      minimum = value\n    elseif maximum < minimum and\
    \ maximum < value then\n      maximum = value\n    end\n  end\n  for _, value\
    \ in ipairs(lst) do\n    if minimum > maximum and minimum < value then\n     \
    \ minimum = value\n    elseif maximum > minimum and maximum > value then\n   \
    \   maximum = value\n    end\n  end\n  for _, value in ipairs(lst) do\n    if\
    \ minimum < maximum and minimum > value then\n      minimum = value\n    elseif\
    \ maximum < minimum and maximum < value then\n      maximum = value\n    end\n\
    \  end\n  for _, value in ipair", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_lst = {}\n  local min_value = nil\n\
    \  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value ==\
    \ nil then\n      min_value = value\n    elseif value < min_value then\n     \
    \ min_value = value\n    end\n    if max_value == nil then\n      max_value =\
    \ value\n    elseif value > max_value then\n      max_value = value\n    end\n\
    \    table.insert(sorted_lst, value)\n  end\n  table.sort(sorted_lst, function(a,\
    \ b) return a < b end)\n  return sorted_lst\nend", "  local sorted_lst = {}\n\
    \  local min_value = lst[1]\n  local max_value = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < min_value then\n      min_value = lst[i]\n    elseif lst[i] >\
    \ max_value then\n      max_value = lst[i]\n    end\n    table.insert(sorted_lst,\
    \ lst[i])\n  end\n  table.insert(sorted_lst, min_value)\n  table.insert(sorted_lst,\
    \ max_value)\n  return sorted_lst\nend", "  local sorted_lst = lst\n  local min_val\
    \ = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n  for i = 2, #sorted_lst\
    \ do\n    local val = sorted_lst[i]\n    if val < min_val then\n      min_val\
    \ = val\n    end\n    if val > max_val then\n      max_val = val\n    end\n  end\n\
    \  -- Sort list from min to max\n  for i = 1, #sorted_lst do\n    local val =\
    \ sorted_lst[i]\n    sorted_lst[i] = val\n  end\n  -- Reverse list from max to\
    \ min\n  for i = #sorted_lst, 1, -1 do\n    local val = sorted_lst[i]\n    sorted_lst[i]\
    \ = val\n  end\n  return sorted_lst\nend", "  local sorted_lst = lst\n  local\
    \ min_val = sorted_lst[1]\n  local max_val = sorted_lst[#sorted_lst]\n  for i\
    \ = 2, #sorted_lst do\n    local val = sorted_lst[i]\n    if val < min_val then\n\
    \      min_val = val\n    elseif val > max_val then\n      max_val = val\n   \
    \ end\n  end\n  -- Swap min and max if they are equal\n  if min_val == max_val\
    \ then\n    sorted_lst[1], sorted_lst[#sorted_lst] = sorted_lst[#sorted_lst],\
    \ sorted_lst[1]\n  end\n  return sorted_lst\nend", "  local result = {}\n  local\
    \ minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst) do\n   \
    \ if minimum == nil then\n      minimum = value\n      maximum = value\n    else\n\
    \      minimum = minimum > value ? minimum : value\n      maximum = maximum <\
    \ value ? maximum : value\n    end\n    result[#result + 1] = value\n  end\n \
    \ table.sort(result, function(a, b) return minimum > b end)\n  table.sort(result,\
    \ function(a, b) return maximum < a end)\n  return result\nend", "  local sorted_list\
    \ = lst\n  local minimum = sorted_list[1]\n  local maximum = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i] and sorted_list[i]\
    \ or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n\
    \  end\n  -- Swap minimum and maximum\n  sorted_list[#sorted_list] = minimum\n\
    \  sorted_list[#sorted_list + 1] = maximum\n  return sorted_list\nend", "  local\
    \ sorted_lst = lst\n  local min_value = sorted_lst[1]\n  local max_value = sorted_lst[#sorted_lst]\n\
    \  for i = 2, #sorted_lst do\n    local current_value = sorted_lst[i]\n    if\
    \ current_value < min_value then\n      min_value = current_value\n    end\n \
    \   if current_value > max_value then\n      max_value = current_value\n    end\n\
    \  end\n  -- Swap minimum with maximum\n  sorted_lst[#sorted_lst] = max_value\n\
    \  sorted_lst[1] = min_value\n  return sorted_lst\nend", "  local sorted_list\
    \ = lst\n  local min_value = sorted_list[1]\n  local max_value = sorted_list[1]\n\
    \  for i = 2, #sorted_list do\n    if sorted_list[i] < min_value then\n      min_value\
    \ = sorted_list[i]\n    elseif sorted_list[i] > max_value then\n      max_value\
    \ = sorted_list[i]\n    end\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value <\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value\
    \ then\n    local tmp = min_value\n    min_value = max_value\n    max_value =\
    \ tmp\n  end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n\
    \    local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n \
    \ end\n  -- Swap min and max if necessary\n  if min_value < max_value then\n \
    \   local tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n\
    \  -- Swap min and max if necessary\n  if min_value < max_value then\n    local\
    \ tmp = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  --\
    \ Swap min and max if necessary\n  if min_value < max_value then\n    local tmp\
    \ = min_value\n    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap\
    \ min and max if necessary\n  if min_value < max_value then\n    local tmp = min_value\n\
    \    min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max\
    \ if necessary\n  if min_value < max_value then\n    local tmp = min_value\n \
    \   min_value = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if\
    \ necessary\n  if min_value < max_value then\n    local tmp = min_value\n    min_value\
    \ = max_value\n    max_value = tmp\n  end\n  -- Swap min and max if necessary\n\
    \  if min_value < max_value then\n    local tmp = min_value\n    min_value = max_value\n\
    \    max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value\
    \ < max_value then\n    local tmp = min_value\n    min_value = max_value\n   \
    \ max_value = tmp\n  end\n  -- Swap min and max if necessary\n  if min_value <\
    \ max_value then\n    local tmp = min_value\n    min_value = max_value\n    max_value\
    \ = tmp\n  end\n  -- Sw", "  local result = {}\n  local min\n  local max\n  local\
    \ i\n  for i = 1, #lst do\n    min = lst[i]\n    max = lst[i]\n    for j = i +\
    \ 1, #lst do\n      if lst[j] < min then\n        min = lst[j]\n      elseif lst[j]\
    \ > max then\n        max = lst[j]\n      end\n    end\n    table.insert(result,\
    \ min)\n    table.insert(result, max)\n  end\n  return result\nend", "  local\
    \ result = {}\n  local minimum = #lst\n  local maximum = 1\n  for _, value in\
    \ ipairs(lst) do\n    maximum = math.max(maximum, value)\n  end\n  for _, value\
    \ in ipairs(lst) do\n    minimum = math.min(minimum, value)\n    result[minimum]\
    \ = minimum\n    result[maximum] = maximum\n  end\n  for _, value in ipairs(lst)\
    \ do\n    result[value] = value\n  end\n  return result\nend", "  local sorted_lst\
    \ = {}\n  local minimum = nil\n  local maximum = nil\n  for _, value in ipairs(lst)\
    \ do\n    if minimum == nil then\n      minimum = value\n      maximum = value\n\
    \    elseif value < minimum then\n      minimum = value\n    elseif value > maximum\
    \ then\n      maximum = value\n    end\n  end\n  for _, value in ipairs(lst) do\n\
    \    sorted_lst[value] = minimum\n    minimum = minimum - 1\n  end\n  for _, value\
    \ in ipairs(lst) do\n    sorted_lst[value] = maximum\n    maximum = maximum +\
    \ 1\n  end\n  return sorted_lst\nend", "  local sorted_list = lst\n  local minimum\
    \ = sorted_list[1]\n  local maximum = sorted_list[1]\n  for i = 2, #sorted_list\
    \ do\n    minimum = minimum > sorted_list[i] and sorted_list[i] or minimum\n \
    \   maximum = maximum < sorted_list[i] and sorted_list[i] or maximum\n  end\n\
    \  sorted_list[#sorted_list+1] = minimum\n  sorted_list[#sorted_list+1] = maximum\n\
    \  return sorted_list\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum =\
    \ sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  sorted_list[#sorted_list] = minimum\n  sorted_list[#sorted_list]\
    \ = maximum\n  return sorted_list\nend", "  local sorted_lst = {}\n  local min_val\
    \ = nil\n  local max_val = nil\n  for _, val in ipairs(lst) do\n    if min_val\
    \ == nil then\n      min_val = val\n    elseif val < min_val then\n      min_val\
    \ = val\n    end\n    if max_val == nil then\n      max_val = val\n    elseif\
    \ val > max_val then\n      max_val = val\n    end\n    table.insert(sorted_lst,\
    \ val)\n  end\n  table.sort(sorted_lst, function(a, b) return a < b end)\n  return\
    \ sorted_lst\nend", "  local sorted_list = lst\n  local minimum = sorted_list[1]\n\
    \  local maximum = sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum =\
    \ minimum > sorted_list[i] and sorted_list[i] or minimum\n    maximum = maximum\
    \ < sorted_list[i] and sorted_list[i] or maximum\n  end\n  sorted_list[#sorted_list+1]\
    \ = minimum\n  sorted_list[#sorted_list+1] = maximum\n  return sorted_list\nend",
  "  local sorted_list = lst\n  local minimum = sorted_list[1]\n  local maximum =\
    \ sorted_list[1]\n  for i = 2, #sorted_list do\n    minimum = minimum > sorted_list[i]\
    \ and sorted_list[i] or minimum\n    maximum = maximum < sorted_list[i] and sorted_list[i]\
    \ or maximum\n  end\n  -- Swap the minimum and maximum if they are the same.\n\
    \  if minimum == maximum then\n    minimum, maximum = maximum, minimum\n  end\n\
    \  -- Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == maximum then\n    minimum, maximum = maximum,\
    \ minimum\n  end\n  -- Swap the minimum and maximum if they are the same.\n  if\
    \ minimum == maximum then\n    minimum, maximum = maximum, minimum\n  end\n  --\
    \ Swap the minimum and maximum if they are the same.\n  if minimum == maximum\
    \ then\n    minimum, maximum = maximum, minimum\n  end\n  -- Swap the minimum\
    \ and maximum if they are the same.\n  if minimum == maximum then\n    minimum,\
    \ maximum = maximum, minimum\n  end\n  -- Swap the minimum and maximum if they\
    \ are the same.\n  if minimum == "]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
