name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if a == 0 then return b end\n  if b == 0 then return a end\n  if\
    \ a > b then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n\
    \    a = t\n  end\n  return a\nend", "  if a == 0 then\n    return b\n  elseif\
    \ b == 0 then\n    return a\n  elseif a == b then\n    return a\n  else\n    local\
    \ m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n\
    \  elseif a % b == 0 then return greatest_common_divisor(b, a / b)\n  else return\
    \ greatest_common_divisor(b, a / b) + 1\n  end\nend", "  -- We use Lua 5.2's math.gcd\
    \ function which returns greatest common divisor\n  -- of two integers a and b\n\
    \  return math.gcd(a, b) -- Lua 5.2's math.gcd returns greatest common divisor\
    \ of integers\nend", "  if a == 0 then return b end\n  if b == 0 then return a\
    \ end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n\
    \    a = b\n    b = c\n  end\n  return a\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return a\n  elseif b == -1 then\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a + b) /\
    \ 2)\n    if m == a then return b end\n    if m == b then return a end\n    if\
    \ m % a == 0 and m % b == 0 then\n      a = m\n    else\n      b = m\n    end\n\
    \    i = i + 1\n  end\n  return a\nend", "  if b == 0 then return a\n  elseif\
    \ a == 0 then return b\n  else return greatest_common_divisor(b, a % b)\n  end\n\
    end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == a then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  local function gcd(a, b)\n    if b == 0 then\n      return\
    \ a\n    else\n      return gcd(b, a % b)\n    end\n  end\n  return gcd(a, b)\n\
    end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local div = math.gcd(a, b)\n  return div * div\nend", "  -- Return greatest\
    \ common divisor of a and b\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n\
    \  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If the numbers are equal, return 1\n  if a == b then\
    \ return 1 end\n  -- If the numbers are odd, return the greatest common divisor\
    \ of their half\n  if a % 2 == 1 then return greatest_common_divisor(a / 2, b)\
    \ end\n  if b % 2 == 1 then return greatest_common_divisor(a, b / 2) end\n  --\
    \ If the numbers are even, return the greatest common divisor of their half\n\
    \  return greatest_common_divisor(a / 2, b / 2)\nend", "  if b == 0 then\n   \
    \ return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  local gcd = math.gcd(a,\
    \ b)\n  if gcd == 1 then return b else return a end\n  return gcd\nend", "  if\
    \ b == 0 then return a\n  elseif a == 0 then return b\n  elseif b == a then return\
    \ b\n  elseif a == b then return a\n  else\n    local c = a\n    local d = b\n\
    \    while c > 0 and d > 0 and c % d == 0 do\n      c = c div d\n    end\n   \
    \ return c\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  -- If b is 0, then return\
    \ a\n  if b == 0 then\n    return a\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
