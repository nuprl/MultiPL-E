name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if a == 0 then return b end\n  if b == 0 then return a end\n  if\
    \ a > b then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n\
    \    a = t\n  end\n  return a\nend", "  if a == 0 then\n    return b\n  elseif\
    \ b == 0 then\n    return a\n  elseif a == b then\n    return a\n  else\n    local\
    \ m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n\
    \  elseif a % b == 0 then return greatest_common_divisor(b, a / b)\n  else return\
    \ greatest_common_divisor(b, a / b) + 1\n  end\nend", "  -- We use Lua 5.2's math.gcd\
    \ function which returns greatest common divisor\n  -- of two integers a and b\n\
    \  return math.gcd(a, b) -- Lua 5.2's math.gcd returns greatest common divisor\
    \ of integers\nend", "  if a == 0 then return b end\n  if b == 0 then return a\
    \ end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n\
    \    a = b\n    b = c\n  end\n  return a\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return a\n  elseif b == -1 then\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a + b) /\
    \ 2)\n    if m == a then return b end\n    if m == b then return a end\n    if\
    \ m % a == 0 and m % b == 0 then\n      a = m\n    else\n      b = m\n    end\n\
    \    i = i + 1\n  end\n  return a\nend", "  if b == 0 then return a\n  elseif\
    \ a == 0 then return b\n  else return greatest_common_divisor(b, a % b)\n  end\n\
    end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == a then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  local function gcd(a, b)\n    if b == 0 then\n      return\
    \ a\n    else\n      return gcd(b, a % b)\n    end\n  end\n  return gcd(a, b)\n\
    end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  local div = math.gcd(a, b)\n  return div * div\nend", "  -- Return greatest\
    \ common divisor of a and b\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n\
    \  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If the numbers are equal, return 1\n  if a == b then\
    \ return 1 end\n  -- If the numbers are odd, return the greatest common divisor\
    \ of their half\n  if a % 2 == 1 then return greatest_common_divisor(a / 2, b)\
    \ end\n  if b % 2 == 1 then return greatest_common_divisor(a, b / 2) end\n  --\
    \ If the numbers are even, return the greatest common divisor of their half\n\
    \  return greatest_common_divisor(a / 2, b / 2)\nend", "  if b == 0 then\n   \
    \ return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  local gcd = math.gcd(a,\
    \ b)\n  if gcd == 1 then return b else return a end\n  return gcd\nend", "  if\
    \ b == 0 then return a\n  elseif a == 0 then return b\n  elseif b == a then return\
    \ b\n  elseif a == b then return a\n  else\n    local c = a\n    local d = b\n\
    \    while c > 0 and d > 0 and c % d == 0 do\n      c = c div d\n    end\n   \
    \ return c\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  -- If b is 0, then return\
    \ a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return a\n\
    \  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif a == 0 then return\
    \ b\n  elseif a == b then return a\n  elseif a > b then return greatest_common_divisor(b,\
    \ a) end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  -- If b is 0, then return\
    \ a\n  if b == 0 then\n    return a\n  end\n  -- If b is negative, then return\
    \ greatest_common_divisor(a % b, -b)\n  if b < 0 then\n    return greatest_common_divisor(a\
    \ % b, -b)\n  end\n  -- If b is positive, then return greatest_common_divisor(a\
    \ % b, a)\n  if b > 0 then\n    return greatest_common_divisor(a % b, a)\n  end\n\
    \  -- If b is equal to 0, then return a\n  if b == 0 then\n    return a\n  end\n\
    \  -- If b is equal to 1, then return a\n  if b == 1 then\n    return a\n  end\n\
    \  -- If b is equal to -1, then return a\n  if b == -1 then\n    return a\n  end\n\
    \  -- If b is equal to -2, then return a\n  if b == -2 then\n    return a\n  end\n\
    \  -- If b is equal to -4, then return a\n  if b == -4 then\n    return a\n  end\n\
    \  -- If b is equal to -6, then return a\n  if b == -6 then\n    return a\n  end\n\
    \  -- If b is equal to -8, then return a\n  if b == -8 then\n    return a\n  end\n\
    \  -- If b is equal to -10, then return a\n  if b == -10 then\n    return a\n\
    \  end\n  -- If b is equal to -12, then return a\n  if b == -12 then\n    return\
    \ a\n  end\n  -- If b is equal to -14, then return a\n  if b == -14 then\n   \
    \ return a\n  end\n  -- If b is equal to -16, then return a\n  if b == -16 then\n\
    \    return a\n  end\n  -- If b is equal to -18, then return a\n  if b == -18\
    \ then\n    return a\n  end\n  -- If b is equal to -20, then return a\n  if b\
    \ == -20 then\n    return a\n  end\n  -- If b is equal to -22, then return a\n\
    \  if b == -22 then\n    return a\n  end\n  -- If b is equal to -24, then return\
    \ a\n  if b == -24 then\n    return a\n  end\n  -- If b is equal to -26, then\
    \ return a\n  if b == -26 then\n    return a\n  end\n  -- If b is equal to -28,\
    \ then return a\n  if b == -28 then\n    return a\n  end\n  -- If b is equal to\
    \ -30, then return a\n", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n    a = t\n\
    \  end\n  return a\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local t = b\n    b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\n\
    end", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif b ==\
    \ a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == a then return b\n  elseif b\
    \ == a then return b\n  elseif b == a then return b\n  elseif b == a then return\
    \ b\n  elseif b == a then return b\n  elseif b == ", "  if b == 1 then\n    return\
    \ a\n  elseif b == 0 then\n    return 1\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif b\
    \ == -1 then\n    return a\n  else\n    return greatest_common_divisor(a % b,\
    \ b)\n  end\nend", "  -- If b is 0, return a\n  if b == 0 then\n    return a\n\
    \  end\n  -- If b is negative, return greatest common divisor of a and -b\n  if\
    \ b < 0 then\n    return greatest_common_divisor(-a, -b)\n  end\n  -- If b is\
    \ positive, return greatest common divisor of a and b\n  if b > 0 then\n    --\
    \ If b is odd, return greatest common divisor of a and a\n    if b % 2 == 1 then\n\
    \      return greatest_common_divisor(a, b)\n    end\n    -- If b is even, return\
    \ greatest common divisor of a and a\n    return greatest_common_divisor(a, a\
    \ % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  -- If the numbers are equal, return 1\n  if a == b then return\
    \ 1 end\n  -- If the numbers are equal, return 1\n  if a == 0 then return b end\n\
    \  -- If the numbers are equal, return 1\n  if b == 0 then return a end\n  --\
    \ If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) ", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a\
    \ % b == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a\
    \ = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then return b end\n  if\
    \ b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n \
    \ while i <= a do\n    local m = math.floor((a + b) / 2)\n    if m == a then return\
    \ b end\n    if m == b then return a end\n    if m % a == 0 and m % b == 0 then\n\
    \      a = m\n    else\n      b = m\n    end\n    i = i + 1\n  end\n  return a\n\
    end", "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a >\
    \ b then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % b\n \
    \   a = t\n  end\n  return a\nend", "  if a == 0 then return b end\n  if b ==\
    \ 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n   \
    \ local r = a % b\n    a = b\n    b = r\n  end\n  return a\nend", "  -- If b is\
    \ 0, then return a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  if b == 1 then return a end\n  if a == 1 then return\
    \ b end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local t = b\n    b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\n\
    end", "  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n    return a\n  elseif\
    \ gcd == 0 then\n    return b\n  else\n    return greatest_common_divisor(b, a)\n\
    \  end\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if i %\
    \ b == 0 then\n      return i\n    end\n    i = i + 1\n  end\n  return b\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  -- Return greatest\
    \ common divisor of a and b\n  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a / b) + 1\nend", "  if b == 0 then return a\n  elseif a == 0 then return b\n\
    \  elseif a == b then return a\n  elseif a > b then return greatest_common_divisor(b,\
    \ a % b) end\nend", "  -- We use \"a\" as the numerator and \"b\" as the denominator\n\
    \  -- The greatest common divisor is defined as the largest integer that divides\
    \ both \"a\" and \"b\"\n  -- In other words, it is the largest integer that divides\
    \ both a and b\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 25)\n  -- 1\n  -- >>> greatest_common_divisor(25, 10)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(25, 25)\n  -- 1\n  -- >>> greatest_common_divisor(25,\
    \ 10)\n  -- 5\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 25)\n  -- 1\n  -- >>> greatest_common_divisor(25, 10)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(25, 25)\n  -- 1\n  -- >>> greatest_common_divisor(25,\
    \ 10)\n  -- 5\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 25)\n  -- 1\n  -- >>> greatest_common_divisor(25, 10)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(25, 25)\n  -- 1\n  -- >>> greatest_common_divisor(25,\
    \ 10)\n  -- 5\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 25)\n  -- 1\n  -- >>> greatest_common_divisor(25, 10)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(25, 25)\n  -- 1\n  -- >>> greatest_common_divisor(25,\
    \ 10)\n  -- 5\n  -- >>> greatest_common_divisor(25, 15)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 25)\n  -- 1\n  -- >>> greatest_common_divisor(25, 10)\n  -- 5\n  -- >>> greatest_common_divisor(25,\
    \ 15)\n  -- 5\n  -- >>> greatest_common_divisor(", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then return greatest_common_divisor(b, a) end\n  if b > a\
    \ then return greatest_common_divisor(a, b) end\n  while a % b == 0 do\n    a\
    \ = math.floor(a/b)\n  end\n  return a\nend", "  if b == 0 then return a\n  elseif\
    \ b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  local c = 1\n  while a % b == 0 do\n    a = a / b\n    b = c\n\
    \    c = b * b + 1\n  end\n  return c\nend", "  if b == 0 then\n    return a\n\
    \  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then a is also 0\n  if b == 0 then\n \
    \   return a\n  end", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif a == b then\
    \ return a\n  elseif a > b then return greatest_common_divisor(b, a % b)\n  else\
    \ return greatest_common_divisor(a % b, b)\n  end\nend", "  if b == 0 then\n \
    \   return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif a == 0 then return\
    \ b\n  else return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then return a\n  elseif a == 0 then return b\n  else return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- Special case: if the divisor is zero, return zero.\n\
    \  if b == 0 then\n    return 0\n  end", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  -- If b is 0, return a\n  if b == 0 then\n    return a\n\
    \  end\n  -- If b is negative, return greatest common divisor of a and -b\n  if\
    \ b < 0 then\n    return greatest_common_divisor(-a, -b)\n  end\n  -- If b is\
    \ positive, return greatest common divisor of a and b\n  if b > 0 then\n    --\
    \ Initialize greatest common divisor to a\n    local gcd = a\n    -- Initialize\
    \ remainder to b\n    local remainder = b\n    -- While remainder is not 0\n \
    \   while remainder ~= 0 do\n      -- If gcd is 1, return gcd and remainder\n\
    \      if gcd == 1 then\n        return gcd, remainder\n      end\n      -- If\
    \ gcd divides remainder, gcd must be the gcd of remainder and a\n      if gcd\
    \ % remainder == 0 then\n        gcd = gcd / remainder\n      else\n        --\
    \ If gcd does not divide remainder, gcd must be the gcd of remainder and a\n \
    \       gcd = gcd % remainder\n      end\n      -- Update remainder\n      remainder\
    \ = remainder - gcd\n    end\n    -- If remainder is 0, gcd must be a\n    return\
    \ gcd, remainder\n  end\nend", "  if b == 0 then\n    return a\n  elseif b ==\
    \ 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  local divisor = nil\n  local remainder\n  repeat\n    divisor\
    \ = a % b\n    remainder = a\n    a = b\n    b = remainder\n  until b == 0\n \
    \ return divisor\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  if b == 0 then return a\n  elseif a == 0 then return b\n  else\
    \ return greatest_common_divisor(b, a % b)\n  end\nend", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end\n  -- If b is negative, then return greatest common divisor of a and\
    \ -b\n  if b < 0 then\n    return greatest_common_divisor(-a, -b)\n  end\n  --\
    \ If b is positive, then return greatest common divisor of a and b\n  if b > 0\
    \ then\n    -- If b is greater than a, then return greatest common divisor of\
    \ a and a\n    if b > a then\n      return a\n    end\n    -- If b is less than\
    \ a, then return greatest common divisor of a and -b\n    if b < -a then\n   \
    \   return -b\n    end\n    -- If b is equal to a, then return a\n    if b ==\
    \ a then\n      return a\n    end\n    -- If b is equal to -a, then return -b\n\
    \    if b == -a then\n      return -b\n    end\n    -- If b is equal to 0, then\
    \ return a\n    if b == 0 then\n      return a\n    end\n    -- If b is equal\
    \ to 1, then return a\n    if b == 1 then\n      return a\n    end\n    -- If\
    \ b is equal to -1, then return a\n    if b == -1 then\n      return a\n    end\n\
    \    -- If b is equal to -2, then return a\n    if b == -2 then\n      return\
    \ a\n    end\n    -- If b is equal to -2, then return a\n    if b == -3 then\n\
    \      return a\n    end\n    -- If b is equal to -4, then return a\n    if b\
    \ == -4 then\n      return a\n    end\n    -- If b is equal to -5, then return\
    \ a\n    if b == -5 then\n      return a\n    end\n    -- If b is equal to -6,\
    \ then return a\n    if b == -6 then\n      return a\n    end\n    -- If b is\
    \ equal to -7, then return a\n    if b == -7 then\n      return a\n    end\n \
    \   -- If b is equal to -8, then return a\n    if b == -8 then\n      return a\n\
    \    end\n    -- If b is equal to -9, then return a\n    if b == -9 then\n   \
    \   return a\n    end\n    -- If b is equal to -10, then return a\n    if b ==\
    \ -10 then\n      return a\n    end\n    -- If b is equal to -11, then return\
    \ a\n    if b == -11 then\n      return a\n    end\n    -- If b is equal to -12,\
    \ then return a\n    if b == -12 then\n      return a\n    end\n    -- If b is\
    \ equal to -13, then return a\n    if b == -13 ", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n\
    \  while i <= a do\n    local t = b\n    b = a % t\n    a = t\n    i = i + 1\n\
    \  end\n  return b\nend", "  -- If b is 0, then return a\n  if b == 0 then\n \
    \   return a\n  end", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(m, b) -- recurse\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  -- If the numbers are equal, return 1\n  if a == b then return\
    \ 1 end\n  -- If the numbers are equal, return 1\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  -- If the numbers are equal, return 1\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  -- If the numbers are equal, return 1\n  if a == 1 then return b end\n\
    \  -- If the numbers are equal, return 1\n  if b == 1 then return a end\n  --\
    \ If the numbers are equal, return 1\n  if a == 0 then return b end\n  -- If the\
    \ numbers are equal, return 1\n  if b == 0 then return a end\n  -- If the numbers\
    \ are equal, return 1\n  if a == -1 then return b end\n  -- If the numbers are\
    \ equal, return 1\n  if b == -1 then return a end\n  -- If the numbers are equal,\
    \ return 1\n  if a == -2 then return b end\n  -- If the numbers are equal, return\
    \ 1\n  if b == -2 then return a end\n  -- If the numbers are equal, return 1\n\
    \  if a == -3 then return b end\n  -- If the numbers are equal, return 1\n  if\
    \ b == -3 then return a end\n  -- If the numbers are equal, return 1\n  if a ==\
    \ -4 then return b end\n  -- If the numbers are equal, return 1\n  if b == -4\
    \ then return a end\n  -- If the numbers are equal, return 1\n  if a == -5 then\
    \ return b end\n  -- If the numbers are equal, return 1\n  if b == -5 then return\
    \ a end\n  -- If the numbers are equal, return 1\n  if a == -6 then return b end\n\
    \  -- If the numbers are equal, return 1\n  if b == -6 then return a end\n  --\
    \ If the numbers are equal, return 1\n  if a == -7 then return b end\n  -- If\
    \ the numbers are equal, return 1\n  if b == -7 then return a end\n  -- If the\
    \ numbers are equal, return 1\n  if a == -8 then return b end\n  -- If the numbers\
    \ are equal, return 1\n  if b == -8 then return a end\n  -- If the numbers are\
    \ equal, return 1\n  if a == -9 then return b end\n  -- If the numbers are equal,\
    \ return 1\n  if b == -9 then return a end\n  -- If the numbers are equal, return\
    \ 1\n  if a == -10 then return b end\n  -- If the numbers are equal, return 1\n\
    \  if b == ", "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return\
    \ a\n  elseif a == b then\n    return a\n  else\n    local c = math.gcd(a, b)\n\
    \    return greatest_common_divisor(b, c) -- recurse\n  end\nend", "  if a ==\
    \ 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n\
    \    return a\n  else\n    local c = math.gcd(a, b)\n    return greatest_common_divisor(b,\
    \ c) -- recurse\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1\
    \ then\n    return a\n  elseif b == -1 then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return b\n  elseif a == 0 then return b\n  elseif a == 1\
    \ then return a\n  elseif a == b then return a\n  elseif a == b + 1 then return\
    \ a\n  elseif a == b - 1 then return b\n  else\n    local c = greatest_common_divisor(b,\
    \ a % b)\n    return b if c == b else c\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then a, b = b, a end\n  local div = math.floor(a/b);\n  return b *\
    \ greatest_common_divisor(div, a%div)\nend", "  if b == 0 then return a\n  elseif\
    \ a == 0 then return b\n  elseif a == b then return a\n  else\n    local c = greatest_common_divisor(b,\
    \ a % b)\n    return c + (a % b) / b\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  if b == 0 then\
    \ return a\n  elseif b == 1 then return a\n  elseif b == a then return b\n  else\n\
    \    local c = greatest_common_divisor(b, a % b)\n    return b if c == a else\
    \ c\n  end\nend", "  -- The Euclidean algorithm\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- https://rosettacode.org/wiki/Euclidean_algorithm#Lua\n  if a == 0 then\n\
    \    return b\n  elseif b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ a\n  elseif a % b == 0 then\n    return greatest_common_divisor(b, a / b)\n\
    \  else\n    return greatest_common_divisor(b, a / b) + 1\n  end\nend", "  if\
    \ b == 0 then return a\n  elseif b == 1 then return a\n  else return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * 2 + greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local div = math.gcd(a, b)\n  return div * div\nend", "  --\
    \ TODO: Make this faster\n  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ > b then\n    return greatest_common_divisor(b, a)\n  else\n    local div =\
    \ math.floor(a/b) -- integer division\n    return greatest_common_divisor(b-div*b,\
    \ a)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local\
    \ c = a % i\n    a = i\n    i = c\n  end\n  return i\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(m, b) if m % b == 0 else\n   \
    \   greatest_common_divisor(a, m)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then a is the greatest common divisor\
    \ of any integer\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then return greatest_common_divisor(b, a) end\n  local c =\
    \ a\n  while b > 0 do\n    local d = b\n    b = a % b\n    a = d\n  end\n  return\
    \ c\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n\
    \  return a\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return\
    \ a\n  elseif a > b then\n    return greatest_common_divisor(b, a)\n  else\n \
    \   local r = math.gcd(a, b)\n    return r\n  end\nend", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  -- If b is 0, then return\
    \ a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return a\n\
    \  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- TODO: Use Euclid's algorithm for this.\n  assert(type(a)\
    \ == 'number' and type(b) == 'number')\n  assert(a >= 0 and b >= 0)\n  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local c = a\n  while c > 1 do\n    local d = b\n    b = a % b\n   \
    \ a = d\n  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b\
    \ == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n\
    \  while i <= a do\n    local c = a % i\n    a = i\n    i = c\n  end\n  return\
    \ i\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a == 0 then return b\n  elseif a == 1\
    \ then return b\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n  elseif a == b then return a\n  elseif a == b\
    \ then return a\n  elseif a == b then return a\n  elseif a == b then return a\n\
    \  elseif a == b then return a\n", "  if b == 0 then\n    return a\n  elseif b\
    \ == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  --\
    \ If the numbers are equal, return 1\n  if a == b then return 1 end\n  -- If the\
    \ numbers are equal, return 1\n  if a == 0 then return b end\n  -- If the numbers\
    \ are equal, return 1\n  if b == 0 then return a end\n  -- If the numbers are\
    \ equal, return 1\n  if a > b then return a end\n  -- If the numbers are equal,\
    \ return 1\n  if b > a then return b end\n  -- If the numbers are equal, return\
    \ 1\n  local c = a\n  while c > b do\n    c = c % b\n  end\n  return c\nend",
  "  -- If b is 0, return a\n  if b == 0 then\n    return a\n  end", "  -- If b is\
    \ 0, then a is also 0\n  if b == 0 then\n    return a\n  end", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  while b > 0 do\n    if a % b == 0 then return b end\n    b = b - 1\n\
    \  end\n  return a\nend", "  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n\
    \    return a\n  else\n    return b\n  end\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif\
    \ a == b then return a\n  elseif a > b then return greatest_common_divisor(b,\
    \ a % b) end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n  \
    \  return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ == b then\n    return a\n  else\n    local div = math.floor((a % b) / b)\n \
    \   return greatest_common_divisor(b, a - div * b + div)\n  end\nend", "  -- If\
    \ b is 0, return a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  -- Make sure a and\
    \ b are integers\n  a = tonumber(a)\n  b = tonumber(b)\n  -- Make sure b is greater\
    \ than a\n  if b < a then\n    a, b = b, a\n  end\n  -- Make sure a is greater\
    \ than 0\n  if a < 1 then\n    return nil\n  end\n  -- Return greatest common\
    \ divisor of a and b\n  local function gcd(a, b)\n    -- Make sure a and b are\
    \ integers\n    a = tonumber(a)\n    b = tonumber(b)\n    -- Make sure b is greater\
    \ than a\n    if b < a then\n      a, b = b, a\n    end\n    -- Return greatest\
    \ common divisor of a and b\n    local function gcd(a, b)\n      -- Make sure\
    \ a and b are integers\n      a = tonumber(a)\n      b = tonumber(b)\n      --\
    \ Make sure b is greater than a\n      if b < a then\n        a, b = b, a\n  \
    \    end\n      -- Return greatest common divisor of a and b\n      if b == 1\
    \ then\n        return a\n      else\n        return gcd(b, a % b)\n      end\n\
    \    end\n    return gcd(a, b)\n  end\n  return gcd(a, b)\nend", "  if b == 0\
    \ then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- We use \"b\" as a temporary variable because \"a\"\
    \ could be negative.\n  local b = b\n  while b > 0 do\n    local q = a / b\n \
    \   a = b\n    b = q\n  end\n  return a\nend", "  local gcd = math.gcd(a, b)\n\
    \  return gcd > 1 and gcd or 1\nend", "  local gcd = math.gcd(a, b)\n  if gcd\
    \ == 1 then\n    return a\n  else\n    return b\n  end\nend", "  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return\
    \ a\nend", "  -- We use \"a\" as the numerator and \"b\" as the denominator\n\
    \  -- The greatest common divisor is defined as the largest integer that divides\
    \ both \"a\" and \"b\".\n  -- This can be seen by noting that \"a\" divides \"\
    b\" evenly and \"b\" divides \"a\" evenly.\n  -- This means that \"a\" is the\
    \ greatest common divisor of \"a\" and \"b\".\n  -- So the greatest common divisor\
    \ of \"a\" and \"b\" is \"a\" if \"a\" divides \"b\" and \"b\" if \"a\" divides\
    \ \"b\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"a\" the greatest common\
    \ divisor is \"b\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"b\" the greatest\
    \ common divisor is \"a\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"c\"\
    \ the greatest common divisor is \"b\".\n  -- If \"a\" divides \"b\" and \"b\"\
    \ divides \"c\" the greatest common divisor is \"a\".\n  -- If \"a\" divides \"\
    b\" and \"b\" divides \"d\" the greatest common divisor is \"b\".\n  -- If \"\
    a\" divides \"b\" and \"b\" divides \"d\" the greatest common divisor is \"a\"\
    .\n  -- If \"a\" divides \"b\" and \"b\" divides \"e\" the greatest common divisor\
    \ is \"b\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"e\" the greatest\
    \ common divisor is \"a\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"f\"\
    \ the greatest common divisor is \"b\".\n  -- If \"a\" divides \"b\" and \"b\"\
    \ divides \"f\" the greatest common divisor is \"a\".\n  -- If \"a\" divides \"\
    b\" and \"b\" divides \"g\" the greatest common divisor is \"b\".\n  -- If \"\
    a\" divides \"b\" and \"b\" divides \"g\" the greatest common divisor is \"a\"\
    .\n  -- If \"a\" divides \"b\" and \"b\" divides \"h\" the greatest common divisor\
    \ is \"b\".\n  -- If \"a\" divides \"b\" and \"b\" divides \"h\" the greatest\
    \ common divisor is ", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then return greatest_common_divisor(b, a) end\n  local c =\
    \ a\n  while c > 0 do\n    local d = b\n    while d > 0 do\n      if c % d ==\
    \ 0 then\n        return c\n      end\n      d = d - 1\n    end\n    c = c - 1\n\
    \  end\n  return c\nend", "  -- Return greatest common divisor of a and b\n  if\
    \ a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif b ==\
    \ 1 then\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return a\n\
    \  end", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return\
    \ a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a +\
    \ b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  local gcd = math.gcd(a, b)\n  if gcd == 1 then return\
    \ b else return a end\n  local m = b / gcd\n  return greatest_common_divisor(a,\
    \ m) * gcd\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then return greatest_common_divisor(b, a) end\n  local c =\
    \ a\n  while b > 0 do\n    local d = b\n    b = a % b\n    a = d\n  end\n  return\
    \ c\nend", "  if b == 0 then return a\n  elseif a == 0 then return b\n  else return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n\
    \  while i <= a do\n    if a % i == 0 then\n      local r = a / i\n      if b\
    \ % i == 0 then\n\treturn r\n      else\n\treturn r + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return a\nend", "  -- If b is 0, return a\n  if b ==\
    \ 0 then\n    return a\n  end", "  -- We use \"Euclid's algorithm\" which computes\
    \ the GCD of two numbers\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm\
    \ is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n\
    \  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity\
    \ is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n\
    \  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm\
    \ is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n\
    \  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity\
    \ is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n\
    \  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm\
    \ is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n\
    \  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity\
    \ is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n\
    \  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm\
    \ is O(log(n))\n  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n\
    \  -- The complexity is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity\
    \ is O(log(n))\n  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n\
    \  -- The algorithm is O(log(n))\n  -- The complexity is O(log(n))\n  -- ", " \
    \ if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0\
    \ then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend", " \
    \ if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then\
    \ return greatest_common_divisor(b, a) end\n  local i = 1\n  while i < a do\n\
    \    local c = a % i\n    if c == 0 then return i end\n    i = i + 1\n  end\n\
    \  return a\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ > b then\n    return greatest_common_divisor(b, a)\n  else\n    local d\n  \
    \  local m = a\n    local n = b\n    while m % 2 == 0 and n % 2 == 0 do\n    \
    \  m = m / 2\n      n = n / 2\n    end\n    d = m % n\n    return d\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return\
    \ a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend", " \
    \ -- If the numbers are equal, return a\n  if a == b then return a end", "  --\
    \ If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n\
    \  while i <= a do\n    if i % b == 0 then return i end\n    i = i + 1\n  end\n\
    \  return a\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n\
    \  if a > b then a, b = b, a end\n  local i = 1\n  while i < a do\n    local t\
    \ = b\n    b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\nend", "  if\
    \ a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- We use \"abs\" to ensure we get an int back\n  -- >>> greatest_common_divisor(math.abs(3),\
    \ math.abs(5))\n  -- 1\n  -- >>> greatest_common_divisor(math.abs(25), math.abs(15))\n\
    \  -- 5\n  if b == 1 then return a\n  elseif b == 0 then return a\n  elseif b\
    \ < 0 then return greatest_common_divisor(math.abs(a), math.abs(b))\n  else return\
    \ greatest_common_divisor(math.abs(a), math.abs(b)) end\nend", "  -- If b is 0,\
    \ then return a\n  if b == 0 then\n    return a\n  end", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  local i = 1\n  while i * i <= a do\n    if a % i == 0 and b % i ==\
    \ 0 then\n      return i\n    end\n    i = i + 1\n  end\n  return a\nend", " \
    \ if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local t = b\n    b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\n\
    end", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local c = math.gcd(a,\
    \ b)\n    return c * greatest_common_divisor(b, a % c)\n  end\nend", "  if a ==\
    \ 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n\
    \  return a\nend", "  -- If b is 0, then a is also 0\n  if b == 0 then\n    return\
    \ a\n  end", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then a is also 0\n  if b == 0 then\n \
    \   return a\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
