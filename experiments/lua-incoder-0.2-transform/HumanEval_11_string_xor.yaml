name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = ''\n    for i = 1, #a do\n        local c = a[i]\
    \ ^ b[i]\n        if c > '9' then\n            c = c - '9' + '0'\n        elseif\
    \ c < '0' then\n            c = c + 10\n        end\n        result = result ..\
    \ c\n    end\n    return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            c =\
    \ tostring(c):byte(1, -1)\n        end\n        result = result .. c\n    end\n\
    \    return result\nend", "    local ret = ''\n    for i = 1, #a do\n        ret\
    \ = ret .. string.rep(a[i], #b) .. b[i]\n    end\n    return ret\nend", "  local\
    \ c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local bin1 = tonumber(a, 2)\n  local bin2\
    \ = tonumber(b, 2)\n  local xor = bin1 xor bin2\n  local result = tostring(bin2)\
    \ and tostring(xor) or tostring(xor and bin1 or bin2)\n  return result\nend",
  "  local res = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0\
    \ then\n      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n\
    \  end\n  return res\nend", "  local s = ''\n  for i = 1, #a do\n    local c =\
    \ a[i]\n    local d = b[i]\n    s = s .. string.format('%x', c ^ d)\n  end\n \
    \ return s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local binA = '0b'\n\
    \  local binB = '0b'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i))\n  end\n  return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\
    \ ^ tostring(b[i])\n    if c > 1 then\n      result = result .. \"1\"\n    elseif\
    \ c < 1 then\n      result = result .. \"0\"\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n   \
    \   result = result .. c\n    end\n  end\n  return result\nend", "  local res\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n\
    \  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c =\
    \ a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    elseif c\
    \ = 0 then\n      result = result .. \"0\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "    local s = ''\n    for i =\
    \ 1, #a do\n        s = s .. string.rep(a[i], #b[i])\n    end\n    return s\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a:sub(i,\
    \ i))\n    local d = tostring(b:sub(i, i))\n    local res = c:byte() ^ d:byte()\n\
    \    local carry = tostring(1 - (res % 2))\n    result = result .. carry .. tostring(res\
    \ % 2)\n  end\n  return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            c =\
    \ string.format(\"%x\", c)\n        end\n        result = result .. c\n    end\n\
    \    return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result .. c\n\
    \    end\n  end\n  return result\nend", "    local result = \"\"\n    for i =\
    \ 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n           \
    \ c = string.format(\"%x\", c)\n        end\n        result = result .. c\n  \
    \  end\n    return result\nend", "  local xor_table = {\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n\
    \    if c ~= d then\n      result = result .. c\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c xor d\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local c = ''\n  for i = 1, #a do\n    local d = a[i]\n    c\
    \ = (d ~= b[i]) and c or d .. '0'\n  end\n  return c\nend", "  local s = ''\n\
    \  for i = 1, #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "    local binA = '0b'\n    local binB =\
    \ '0b'\n    for i = 1, #a do\n        binA = binA .. tostring(a:byte(i))\n   \
    \ end\n    for i = 1, #b do\n        binB = binB .. tostring(b:byte(i))\n    end\n\
    \    return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n   \
    \   result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i]\n    local d = b[i]\n    local carry = c ^ d\n    if carry >\
    \ 0 then\n      result = result .. \"1\"\n    else\n      result = result .. \"\
    0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n\
    \    local d = b[i]\n    local carry = c\n    if d ~= 0 then\n      carry = d\
    \ xor carry\n    end\n    result = string.format(\"%s%c\", result, tostring(carry))\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] and b[i]\n    if c then\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = tostring(a) ^ tostring(b)\n    local d = tostring(c:byte(1, 1))\n\
    \    local e = tostring(c:byte(2, 2))\n    local f = tostring(c:byte(3, 3))\n\
    \    local g = tostring(c:byte(4, 4))\n    local h = tostring(c:byte(5, 5))\n\
    \    local k = tostring(c:byte(6, 6))\n    local l = tostring(c:byte(7, 7))\n\
    \    local m = tostring(c:byte(8, 8))\n    local n = tostring(c:byte(9, 9))\n\
    \    local o = tostring(c:byte(10, 10))\n    local p = tostring(c:byte(11, 11))\n\
    \    local q = tostring(c:byte(12, 12))\n    local r = tostring(c:byte(13, 13))\n\
    \    local s = tostring(c:byte(14, 14))\n    local t = tostring(c:byte(15, 15))\n\
    \    local u = tostring(c:byte(16, 16))\n    local v = tostring(c:byte(17, 17))\n\
    \    local w = tostring(c:byte(18, 18))\n    local x = tostring(c:byte(19, 19))\n\
    \    local y = tostring(c:byte(20, 20))\n    local z = tostring(c:byte(21, 21))\n\
    \    local A = tostring(c:byte(22, 22))\n    local B = tostring(c:byte(23, 23))\n\
    \    local C = tostring(c:byte(24, 24))\n    local D = tostring(c:byte(25, 25))\n\
    \    local E = tostring(c:byte(26, 26))\n    local F = tostring(c:byte(27, 27))\n\
    \    local G = tostring(c:byte(28, 28))\n    local H = tostring(c:byte(29, 29))\n\
    \    local I = tostring(c:byte(30, 30))\n    local J = tostring(c:byte(31, 31))\n\
    \    local K = tostring(c:byte(32, 32))\n    local L = tostring(c:byte(33, 33))\n\
    \    local M = tostring(c:byte(34, 34))\n    local N = tostring(c:byte(35, 35))\n\
    \    local O = tostring(c:byte(36, 36))\n    local P = tostring(c:byte(37, 37))\n\
    \    local Q = tostring(c:byte(38, 38))\n    local R = tostring(c:byte(39, 39",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n\
    \    if c ~= d then\n      result = result .. c\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a,\
    \ i)\n    local d = string.byte(b, i)\n    if c ~= d then\n      result = result\
    \ .. string.char((c ^ d))\n    end\n  end\n  return result\nend", "    local ret\
    \ = ''\n    for i = 1, #a do\n        ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \    end\n    return ret\nend", "  local result = \"\"\n  for i = 1, #a do\n \
    \   local c = tostring(a[i]) ^ tostring(b[i])\n    if c > 1 then\n      result\
    \ = result .. \"1\"\n    elseif c < 1 then\n      result = result .. \"0\"\n \
    \   else\n      result = result .. tostring(c)\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local xor_table = {\n  \
    \  ['0'] = '0000',\n    ['1'] = '0001',\n    ['1'] = '0010',\n    ['0'] = '0011',\n\
    \    ['1'] = '0100',\n    ['0'] = '0101',\n    ['1'] = '0110',\n    ['0'] = '0111',\n\
    \    ['1'] = '1000',\n    ['0'] = '1001',\n    ['1'] = '1010',\n    ['0'] = '1011',\n\
    \    ['1'] = '1100',\n    ['0'] = '1101',\n    ['1'] = '1110',\n    ['0'] = '1111',\n\
    \  }\n  local xor = ''\n  for i = 1, #a do\n    xor = xor .. xor_table[string.byte(a,\
    \ i)]\n  end\n  for i = 1, #b do\n    xor = xor .. xor_table[string.byte(b, i)]\n\
    \  end\n  return xor\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n\
    \    if c > 1 then\n      c = tostring(c) - 48\n    end\n    result = result ..\
    \ tostring(c)\n  end\n  return result\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] and b[i]\n    if c then\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\
    \ ^ tostring(b[i])\n    if c > \"9\" then\n      c = tostring(\"a\") + c\n   \
    \ end\n    result = result .. c\n  end\n  return result\nend", "  local c = ''\n\
    \  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n\
    \      result = result .. \"1\"\n    elseif c < -1 then\n      result = result\
    \ .. \"0\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n   \
    \   result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "    local binA =\
    \ '00000000'\n    local binB = '00000000'\n    for i = 1, #a do\n        binA\
    \ = binA .. tostring(a:sub(i, i))\n    end\n    for i = 1, #b do\n        binB\
    \ = binB .. tostring(b:sub(i, i))\n    end\n    return binA:sub(1, #binA) .. binB:sub(1,\
    \ #binB)\nend", "  local xor_table = {\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i))\
    \ ^ tostring(b:byte(i))\n  end\n  return c\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local carry = c\n\
    \    if d ~= 0 then\n      carry = d xor carry\n    end\n    local result = string.format('%s%c',\
    \ result, tostring(carry))\n  end\n  return result\nend", "  local result = \"\
    \"\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local carry\
    \ = c xor d\n    if carry > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n\
    \    if c > 1 then\n      c = tostring(c) + 48\n    end\n    result = result ..\
    \ tostring(c)\n  end\n  return result\nend", "  local result = \"\"\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    elseif c < 0 then\n      result = result .. \"0\"\n    end\n \
    \ end\n  return result\nend", "  local c = ''\n  for i = 1, #a do\n    local x\
    \ = tonumber(a[i])\n    local y = tonumber(b[i])\n    if x == y and x == 1 then\n\
    \      c = c .. a[i]\n    elseif x == y and x == 0 then\n      c = c .. b[i]\n\
    \    else\n      c = c .. '0'\n    end\n  end\n  return c\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i]\n        result = (result + c) ^ b[i]\n    end\n\
    \    return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        local c = string.byte(a, i)\n \
    \       local d = string.byte(b, i)\n        result = result .. string.char((c\
    \ XOR d) AND 255)\n    end\n    return result\nend", "  local result = \"\"\n\
    \  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend", "    local result = \"\"\n    for i = 1, #a do\n     \
    \   local c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format(\"\
    %x\", c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "  local c = ''\n  for i = 1, #a do\n    local d = a[i]\n    c = (d ~= b[i])\
    \ and c or d .. '0'\n  end\n  return c\nend", "  local result = ''\n  for i =\
    \ 1, #a do\n    local c = a[i] ^ b[i]\n    if c > '9' then\n      c = '0' .. c\n\
    \    end\n    result = result .. c\n  end\n  return result\nend", "  local ret\
    \ = ''\n  for i = 1, #a do\n    ret = ret .. string.format(\"%x\", a[i] ^ b[i])\n\
    \  end\n  return ret\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ xor_table = {\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['1'],\n    ['", "  local binA = '00000000'\n  local binB = '00000000'\n\
    \  for i = 1, #a do\n    binA = binA .. string.format('%010b', tonumber(a[i]))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b', tonumber(b[i]))\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "    local result\
    \ = \"\"\n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c >\
    \ 0 then\n            c = string.format(\"%x\", c)\n        end\n        result\
    \ = result .. c\n    end\n    return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n \
    \   local carry = c\n    for j = 1, #c do\n      local bit = string.byte(carry)\n\
    \      carry = bit ^ string.byte(d)\n      result = result .. tostring(bit)\n\
    \    end\n  end\n  return result\nend", "  local xor_table = {\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['0'] = ['0'],\n    ['1'] = ['1'],\n    ['0'] = ['0'],\n    ['", "  local\
    \ s = ''\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    s = s .. string.format('%02.2s',\
    \ tostring(c))\n  end\n  return s\nend", "  local result = \"\"\n  for i = 1,\
    \ #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result ..\
    \ \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local c = ''\n  for i =\
    \ 1, #a do\n    local d = a[i]\n    c = (d ~= b and d or c) .. a[i]\n  end\n \
    \ return c\nend", "    local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \    local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \    local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \    local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \    local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \    local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \    local binG = '0000000000000000000000000000000000000000000000000000000000000100'\n\
    \    local binH = '0000000000000000000000000000000000000000000000000000000000000101'\n\
    \    local binI = '0000000000000000000000000000000000000000000000000000000000000110'\n\
    \    local binJ = '0000000000000000000000000000000000000000000000000000000000001000'\n\
    \    local binK = '0000000000000000000000000000000000000000000000000000000000001001'\n\
    \    local binL = '0000000000000000000000000000000000000000000000000000000000001010'\n\
    \    local binM = '0000000000000000000000000000000000000000000000000000000000001011'\n\
    \    local binN = '0000000000000000000000000000000000000000000000000000000000010000'\n\
    \    local binO = '0000000000000000000000000000000000000000000000000000000000010001'\n\
    \    local binP = '0000000000000000000000000000000000000000000000000000000000010100'\n\
    \    local binQ = '0000000000000000000000000000000000000000000000000000000000010101'\n\
    \    local binR = '0000000000000000000000000000000000000000000000000000000000011000'\n\
    \    local binS = '0000000000000000000000000000000000000000000000000000000000011001'\n\
    \    local binT = '0000000000000000000000000000000000000000000000000000000000011010'\n\
    \    local binU = '0000000000000000000000000000000000000000000000000000000000011011'\n\
    \    local binV = '0000000000000000000000000000000000000000000000000000000000100000'\n\
    \    local binW = '0000000000000000000000000000000000000000000000000000000000100001'\n\
    \    local binX = '0000000000000000000000000000000000000000000000000000000000100100'\n\
    \    local binY = '0000000000000000000000000000000000000000000000000000000000100101'\n\
    \    local binZ = '0000000000000000000000000000000000000000000000000000000000101000'\n\
    \    local bin0 = '0000000000000000000000000000000000000000000000000000000000101001'\n\
    \    local bin1 = '0000000000000000000000000000000000000000000000000000000000110000'\n\
    \    local bin2 = '0000000000000000000000000000000000000000000000000000000000110001'\n\
    \    local bin3 = '0000000000000000000000000000000000000000000000000000000001000000'\n\
    \    local bin4 = '0000000000000000000000000000000000000000000000000000000001000001'\n\
    \    local bin5 = '0000000000000000000000000000000000000000000000000000000001001000'\n\
    \    local bin6 = '0000000000000000000000000000000000000000000000000000000001001001'\n\
    \    local bin7 = '0000000000000000000000000000000000000000000000000000000001010000'\n\
    \    local bin8 = '0000000000000000000000000000000000000000000000000000000001010001'\n\
    \    local bin9 = '0000000000000000000000000000000000000000000000000000000001100000'\n\
    \    local binA = '0000000000000000000000000000000000000000000000000000000001100001'\n\
    \    local binB = '0000000000000000000000000000000000000000000000000000000010000000'\n\
    \    local binC = '0000000000000000000000000000000000000000000000000000000010000001'\n\
    \    local binD = '0000000000000000000000000000000000000000000000000000000010000010'\n\
    \    local binE = '0000000000000000000000000000000000000000000000000000000010000011'\n\
    \    local binF", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n   \
    \   result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local res = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      res = res .. \"1\"\n    else\n   \
    \   res = res .. \"0\"\n    end\n  end\n  return res\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n   \
    \   result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i]\n    local d = b[i]\n    local carry = c xor d\n    if carry\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a:sub(i,\
    \ i))\n    local d = tostring(b:sub(i, i))\n    local r = tostring(c:byte(1, 1):bit(1,\
    \ 1):xor(d:byte(1, 1):bit(1, 1)))\n    result = result .. r\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            result = \"1\" .. result\n        else\n            result = \"0\"\
    \ .. result\n        end\n    end\n    return result\nend", "  local c = ''\n\
    \  for i = 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    local tmp = (c ~= d) and \"1\" or \"0\"\n    result = result ..\
    \ tmp\n  end\n  return result\nend", "  local c = ''\n  for i = 1, #a do\n   \
    \ c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return c\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 1 then\n      result = result .. \"1\"\n    elseif c < 1 then\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = tostring(a:sub(i, i))\n    local d =\
    \ tostring(b:sub(i, i))\n    if c ~= d then\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "  local c = ''\n  for i = 1, #a do\n    c = c\
    \ .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return c\nend", "  local\
    \ c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "    local result = \"\"\n    for i = 1, #a do\n   \
    \     local c = a[i] ^ b[i]\n        if c > 1 then\n            c = string.format(\"\
    %x\", c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    local carry = c\n    if d == \"1\" then\n      carry = carry ~=\
    \ \"1\"\n    end\n    result = result .. tostring(carry)\n  end\n  return result\n\
    end", "  local binA = '0' + a:gsub('1', '0')\n  local binB = '0' + b:gsub('1',\
    \ '0')\n  return binA:sub(1, binA:len()) .. binB:sub(1, binB:len())\nend", " \
    \ local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n\
    \  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local c = ''\n\
    \  for i = 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n \
    \   end\n    return s\nend", "    local result = \"\"\n    for i = 1, #a do\n\
    \        local c = string.byte(a, i)\n        local d = string.byte(b, i)\n  \
    \      if c ~= d then\n            result = result .. \"1\"\n        else\n  \
    \          result = result .. \"0\"\n        end\n    end\n    return result\n\
    end", "    local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^\
    \ b[i]\n        if c > 0 then\n            c = string.format(\"%x\", c)\n    \
    \    end\n        result = result .. c\n    end\n    return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local ret = ''\n  for i = 1, #a do\n\
    \    local c = a[i] ^ b[i]\n    if c > '0' and c <= '9' then\n      ret = ret\
    \ .. c\n    else\n      ret = ret .. '0'\n    end\n  end\n  return ret\nend",
  "  local xor_table = {\n    ['0'] = {},\n    ['1'] = {},\n    ['1']['0'] = {},\n\
    \    ['1']['1'] = {},\n    ['0']['0'] = {},\n    ['0']['1'] = {},\n    ['0']['1']['0']\
    \ = {},\n    ['0']['1']['1'] = {},\n    ['1']['0']['0'] = {},\n    ['1']['0']['1']\
    \ = {},\n    ['1']['0']['1']['0'] = {},\n    ['1']['0']['1']['1'] = {},\n    ['1']['1']['0']['0']\
    \ = {},\n    ['1']['1']['0']['1'] = {},\n    ['1']['1']['0']['1']['0'] = {},\n\
    \    ['1']['1']['0']['1']['1'] = {},\n    ['1']['1']['1']['0']['0'] = {},\n  \
    \  ['1']['1']['1']['0']['1'] = {},\n    ['1']['1']['1']['0']['1']['0'] = {},\n\
    \    ['1']['1']['1']['0']['1']['1'] = {},\n    ['1']['1']['1']['1']['0']['0']\
    \ = {},\n    ['1']['1']['1']['1']['0']['1'] = {},\n    ['1']['1']['1']['1']['0']['1']['0']\
    \ = {},\n    ['1']['1']['1']['1']['0']['1']['1'] = {},\n    ['1']['1']['1']['1']['1']['0']['0']\
    \ = {},\n    ['1']['1']['1']['1']['1']['0']['1'] = {},\n    ['1']['1']['1']['1']['1']['0']['1']['0']\
    \ = {},\n    ['1']['1']['1']['1']['1']['0']['1']['1'] = {},\n    ['1']['1']['1']['1']['1']['1']['0']\
    \ = {},\n    ['1']['1']['1']['1']['1']['1']['1'] = {}\n  }\n  local xor_result\
    \ = ''\n  for i = 1, #a do\n    xor_result = xor_result .. xor_table[tostring(a[i])][tostring(b[i])]\n\
    \  end\n  return xor_result\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local xor\
    \ = c ^ d\n    local cstr = string.char(xor)\n    local dstr = string.char(xor\
    \ - 256)\n    local result = result .. cstr .. dstr\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    if c ~= d then\n      result = result .. c\n    end\n  end\n \
    \ return result\nend", "  local res = ''\n  for i = 1, #a do\n    local c = tostring(a[i])\
    \ ^ tostring(b[i])\n    if c > '9' then\n      c = '0' .. c\n    end\n    res\
    \ = res .. c\n  end\n  return res\nend", "  local result = \"\"\n  for i = 1,\
    \ #a do\n    local c = tostring(a[i])\n    local d = tostring(b[i])\n    if c\
    \ ~= d then\n      result = result .. c\n    end\n  end\n  return result\nend",
  "  local binA = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ binB = '00000000000000000000000000000000000000000000000000000000'\n  local binC\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local binD =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local binE = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local binG = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ binH = '00000000000000000000000000000000000000000000000000000000'\n  local binI\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local binJ =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local binK = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local binL = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local binM = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ binN = '00000000000000000000000000000000000000000000000000000000'\n  local binO\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local binP =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local binQ = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local binR = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local binS = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ binT = '00000000000000000000000000000000000000000000000000000000'\n  local binU\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local binV =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local binW = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local binY = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ binZ = '00000000000000000000000000000000000000000000000000000000'\n  local bin1\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local bin2 =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local bin3 = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local bin4 = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local bin5 = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ bin6 = '00000000000000000000000000000000000000000000000000000000'\n  local bin7\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local bin8 =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local bin9 = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local bin0 = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local bin1 = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ bin2 = '00000000000000000000000000000000000000000000000000000000'\n  local bin3\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local bin4 =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local bin5 = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local bin6 = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local bin7 = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ bin8 = '00000000000000000000000000000000000000000000000000000000'\n  local bin9\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local bin0 =\
    \ '00000000000000000000000000000000000000000000000000000000'\n  local bin1 = '00000000000000000000000000000000000000000000000000000000'\n\
    \  local bin2 = '00000000000000000000000000000000000000000000000000000000'\n \
    \ local bin3 = '00000000000000000000000000000000000000000000000000000000'\n  local\
    \ bin4 = '00000000000000000000000000000000000000000000000000000000'\n  local bin5\
    \ = '00000000000000000000000000000000000000000000000000000000'\n  local ", " \
    \   local result = \"\"\n    for i = 1, #a do\n        local c = string.byte(a:sub(i,\
    \ i))\n        local d = string.byte(b:sub(i, i))\n        if c ~= d then\n  \
    \          local bits = string.sub(tostring(c), -#c)\n            bits = bits\
    \ .. string.sub(tostring(d), -#d)\n            result = result .. bits\n     \
    \   end\n    end\n    return result\nend", "  local result = \"\"\n  for i = 1,\
    \ #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n  \
    \  local carry = c ^ d\n    local newc = c + carry\n    local newd = d - carry\n\
    \    if newc > 1 then\n      newc = newc - 1\n      carry = 1\n    elseif newc\
    \ < 0 then\n      newc = newc + 1\n      carry = 0\n    end\n    if newd > 1 then\n\
    \      newd = newd - 1\n      carry = 0\n    end\n    result = result .. string.format(\"\
    %c\", newc)\n    if carry == 1 then\n      result = result .. \"1\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = tostring(a:sub(i, i))\n    local d = tostring(b:sub(i, i))\n    local\
    \ e = (c ~= d) and 1 or 0\n    local f = tostring(e + e)\n    local g = tostring(e\
    \ + e + e)\n    local h = tostring(e + e + e + e)\n    local k = tostring(e +\
    \ e + e + e + e)\n    local l = tostring(e + e + e + e + e + e)\n    local m =\
    \ tostring(e + e + e + e + e + e + e)\n    local n = tostring(e + e + e + e +\
    \ e + e + e + e)\n    local o = tostring(e + e + e + e + e + e + e + e + e + e)\n\
    \    local p = tostring(e + e + e + e + e + e + e + e + e + e + e + e)\n    local\
    \ q = tostring(e + e + e + e + e + e + e + e + e + e + e + e + e)\n    local r\
    \ = tostring(e + e + e + e + e + e + e + e + e + e + e + e + e)\n    local s =\
    \ tostring(e + e + e + e + e + e + e + e + e + e + e + e + e + e)\n    local t\
    \ = tostring(e + e + e + e + e + e + e + e + e + e + e + e + e + e + e)\n    local\
    \ u = tostring(e + e + e + e + e + e + e + e + e + e + e + e + e + e + e)\n  \
    \  local v = tostring(e + e + e + e + e + e + e + e + e + e + e + e + e + e +\
    \ e + e)\n    local w = tostring(e + e + e + e + e + e + e + e + e + e + e + e\
    \ + e + e + e + e)\n    local x = tostring(e + e + e + e + e + e + e + e + e +\
    \ e + e + e + e + e + e + e)\n    local y = tostring(e + e + e + e + e + e + e\
    \ + e + e + e + e + e + e + ", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] and b[i]\n    if c then\n      result = result .. c\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "    local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n\
    \        if c > 0 then\n            result = result .. \"1\"\n        else\n \
    \           result = result .. \"0\"\n        end\n    end\n    return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\
    \ ^ tostring(b[i])\n    local d = tostring(c):byte()\n    if d > 0 then\n    \
    \  result = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n  \
    \  local d = string.byte(b, i)\n    local carry = c ^ d\n    if carry > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "    local ret = ''\n    for i = 1, #a do\n        ret = ret .. tostring(a:byte(i))\
    \ ^ tostring(b:byte(i))\n    end\n    return ret\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    local\
    \ d = tostring(c:byte(1, -1))\n    if d ~= \"\" then\n      result = result ..\
    \ d\n    end\n  end\n  return result\nend", "  local res = \"\"\n  for i = 1,\
    \ #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c > 0 then\n  \
    \    res = tostring(c % 2) + res\n    else\n      res = c + res\n    end\n  end\n\
    \  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c =\
    \ a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n \
    \     result = result .. \"0\"\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] and b[i]\n    if c then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "  local xor_table = {\n    ['0'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n\
    \    ['1'] = ['1'],\n    ['1'] = ['0'],\n    ['1'] = ['0'],\n    ['", "    local\
    \ result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n       \
    \ if c > 0 then\n            c = string.format(\"%x\", c)\n        end\n     \
    \   result = result .. c\n    end\n    return result\nend", "  local result =\
    \ ''\n  for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~=\
    \ d then\n      result = result .. c\n    end\n  end\n  return result\nend", " \
    \ local c = ''\n  for i = 1, #a do\n    local x = tonumber(a[i])\n    local y\
    \ = tonumber(b[i])\n    if x ~= 0 then\n      c = c .. tostring(x:bit(1, #x -\
    \ 1))\n    end\n    if y ~= 0 then\n      c = c .. tostring(y:bit(1, #y - 1))\n\
    \    end\n  end\n  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a,\
    \ i)\n    local d = string.byte(b, i)\n    if c ~= d then\n      result = result\
    \ .. string.char((c XOR d))\n    end\n  end\n  return result\nend", "  local c\
    \ = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return\
    \ c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    local carry = c xor\
    \ d\n    if carry > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local result =\
    \ \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n   \
    \   result = result .. \"1\"\n    elseif c < 1 then\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c ^ d\n    local newcarry = carry ~= 0 and 1 or 0\n  \
    \  carry = string.byte(a, i) + newcarry\n    carry = carry > 0 and 1 or 0\n  \
    \  carry = string.byte(b, i) + carry\n    carry = carry > 0 and 1 or 0\n    carry\
    \ = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry\
    \ > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and\
    \ 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n\
    \    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry\
    \ = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry\
    \ > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and\
    \ 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n\
    \    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry\
    \ = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry\
    \ > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and\
    \ 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n\
    \    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry\
    \ = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry\
    \ > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and\
    \ 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n\
    \    carry = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or 0\n    carry\
    \ = carry > 0 and 1 or 0\n    carry = carry > 0 and 1 or ", "  local xor_table\
    \ = {\n    ['0'] = '0000',\n    ['1'] = '0001',\n    ['1'] = '0010',\n    ['0']\
    \ = '0011',\n    ['1'] = '0100',\n    ['0'] = '0101',\n    ['1'] = '0110',\n \
    \   ['0'] = '0111',\n    ['1'] = '1000',\n    ['0'] = '1001',\n    ['1'] = '1010',\n\
    \    ['0'] = '1011',\n    ['1'] = '1100',\n    ['0'] = '1101',\n    ['1'] = '1110',\n\
    \    ['0'] = '1111',\n  }\n  local xor = ''\n  for i = 1, #a do\n    xor = xor\
    \ .. xor_table[string.byte(a[i])] .. xor_table[string.byte(b[i])]\n  end\n  return\
    \ xor\nend", "    local binA = '00000000'\n    local binB = '00000000'\n    for\
    \ i = 1, #a do\n        binA = binA .. tostring(a:byte(i))\n    end\n    for i\
    \ = 1, #b do\n        binB = binB .. tostring(b:byte(i))\n    end\n    return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local s = ''\n  for i = 1,\
    \ #a do\n    s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a,\
    \ i)\n    local d = string.byte(b, i)\n    local xor = c ^ d\n    local s = string.char(xor)\n\
    \    if s ~= nil then\n      result = result .. s\n    end\n  end\n  return result\n\
    end", "  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binI = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binJ = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binQ = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binR = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binS = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binT = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binU = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binV = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binW = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binX = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binY = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binZ = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binA = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binB = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binC = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binD = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binG = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binH = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binI = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binJ = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binK = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binL = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binM = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binN = '000000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binO = '000000000000000000000000000000000000000000000000000000000000000111'\n\
    \  local binP = '000000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binQ = '00000000000000000000000000000000000000000000000000000000", " \
    \   local binA = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. a\n    local binB = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. b\n    local binC = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binA\n    local binD = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binB\n    local binE = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binC\n    local binF = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binD\n    local binG = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binE\n    local binH = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binF\n    local binI = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binG\n    local binJ = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binH\n    local binK = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binI\n    local binL = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binJ\n    local binM = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binK\n    local binN = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binL\n    local binO = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binM\n    local binP = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binN\n    local binQ = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binO\n    local binR = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binP\n    local binS = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binQ\n    local binT = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binR\n    local binU = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binS\n    local binV = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binT\n    local binW = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binU\n    local binX = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binV\n    local binY = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binW\n    local binZ = '00000000000000000000000000000000000000000000000000000000000000'\
    \ .. binX\n    return binZ\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local binA = '00000000'\n  local binB =\
    \ '00000000'\n  local binC = '00000000'\n  for i = 1, #a do\n    binA = binA ..\
    \ string.rep('1', #a)\n  end\n  for i = 1, #b do\n    binB = binB .. string.rep('1',\
    \ #b)\n  end\n  for i = 1, #a do\n    binC = binC .. string.rep('0', #a)\n  end\n\
    \  for i = 1, #b do\n    binC = binC .. string.rep('0', #b)\n  end\n  binC = binA\
    \ .. binB .. binC\n  return binC\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local xor_table = {\n    ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n\
    \    ['1'] = {'0', '1'},\n    ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n \
    \   ['1'] = {'1', '0'},\n    ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n  \
    \  ['1'] = {'0', '1'},\n    ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n   \
    \ ['1'] = {'1', '0'},\n    ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['1']\
    \ = {'0', '1'},\n    ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['1'] =\
    \ {'1', '0'},\n    ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['1'] = {'0',\
    \ '1'},\n    ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n\
    \    ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n \
    \   ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n  \
    \  ['0'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n   \
    \ ['0'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['0']\
    \ = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['0'] =\
    \ {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['0'] = {'0',\
    \ '1'},\n    ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['0'] = {'1', '0'},\n\
    \    ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['0'] = {'0', '1'},\n \
    \   ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['0'] = {'1', '0'},\n  \
    \  ['1'] = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['0'] = {'0', '1'},\n   \
    \ ['1'] = {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['0'] = {'1', '0'},\n    ['1']\
    \ = {'0', '1'},\n    ['1'] = {'1', '0'},\n    ['0'] = {'0', '1'},\n    ['1'] =\
    \ {'1', '0'},\n    ['1'] = {'0', '1'},\n    ['", "  local c = ''\n  for i = 1,\
    \ #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend", "    local c = ''\n    for i = 1, #a do\n        c = c .. string.rep(a[i],\
    \ #b[i])\n    end\n    return c\nend", "  local xor_result = ''\n  for i = 1,\
    \ #a do\n    xor_result = xor_result .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return xor_result\nend", "    local xor_table = {\n        [0] = '0000',\n\
    \        [1] = '0001',\n        [2] = '0010',\n        [3] = '0011',\n       \
    \ [4] = '0100',\n        [5] = '0101',\n        [6] = '0110',\n        [7] = '0111',\n\
    \        [8] = '1000',\n        [9] = '1001',\n        [10] = '1010',\n      \
    \  [11] = '1011',\n        [12] = '1100',\n        [13] = '1101',\n        [14]\
    \ = '1110',\n        [15] = '1111',\n    }\n    return (xor_table[tonumber(a)]\
    \ .. xor_table[tonumber(b)])\nend", "    local c = ''\n    for i = 1, #a do\n\
    \        c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n    end\n    return\
    \ c\nend", "  local xor_table = {\n    ['0'] = ['0'],\n    ['1'] = ['1'],\n  \
    \  ['1'] = ['0'],\n    ['0'] = ['1'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['1'] = ['0'],\n    ['0'] = ['0'],\n\
    \    ['1'] = ['0'],\n    ['0'] = ['0'],\n    ['", "    local result = \"\"\n \
    \   for i = 1, #a do\n        local c = string.byte(a, i)\n        local d = string.byte(b,\
    \ i)\n        result = result .. string.format(\"%x\", c ^ d)\n    end\n    return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n\
    \    local d = tostring(b[i])\n    if c ~= d then\n      result = result .. tostring(c)\
    \ .. tostring(d)\n    end\n  end\n  return result\nend", "  local result = \"\"\
    \n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    elseif c < 0 then\n      result = result .. \"0\"\n \
    \   end\n  end\n  return result\nend", "  local binA = '00000000'\n  local binB\
    \ = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.rep('1', #a) ..\
    \ a\n  end\n  for i = 1, #b do\n    binB = binB .. string.rep('1', #b) .. b\n\
    \  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local res\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     res = res .. \"1\"\n    elseif c < 0 then\n      res = res .. \"0\"\n  \
    \  else\n      res = res .. \"0\"\n    end\n  end\n  return res\nend", "  local\
    \ s = ''\n  for i = 1, #a do\n    s = s .. tostring(a[i] ^ b[i])\n  end\n  return\
    \ s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\n      c = tostring(c):byte()\n\
    \      result = result .. string.sub(c, 1, 1)\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local c = ''\n  for i = 1, #a\
    \ do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n  end\n  return\
    \ c\nend", "  local s = ''\n  for i = 1, #a do\n    s = s .. tostring(a[i] ^ b[i])\n\
    \  end\n  return s\nend", "    local xor_table = {\n        [0] = '0000',\n  \
    \      [1] = '0001',\n        [2] = '0010',\n        [3] = '0011',\n        [4]\
    \ = '0100',\n        [5] = '0101',\n        [6] = '0110',\n        [7] = '0111',\n\
    \        [8] = '1000',\n        [9] = '1001',\n        [10] = '1010',\n      \
    \  [11] = '1011',\n        [12] = '1100',\n        [13] = '1101',\n        [14]\
    \ = '1110',\n        [15] = '1111',\n    }\n    local xor = string.byte(a) ^ string.byte(b)\n\
    \    local result = xor_table[xor]\n    return string.char(result)\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n\
    \      result = result .. \"1\"\n    else\n      result = result .. \"0\"\n  \
    \  end\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local\
    \ result = result .. string.format(\"%x\", c ^ d)\n  end\n  return result\nend",
  "  local c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 1 then\n      result = result .. \"1\"\n    elseif\
    \ c < 1 then\n      result = result .. \"0\"\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format(\"%x\"\
    , c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "    local ret = \"\"\n    for i = 1, #a do\n        ret = ret .. tostring(a:byte(i))\
    \ ^ tostring(b:byte(i))\n    end\n    return ret\nend", "  local c = ''\n  for\
    \ i = 1, #a do\n    local d = a[i]\n    c = (d ~= b[i]) and c or d .. '0'\n  end\n\
    \  return c\nend", "    local result = \"\"\n    for i = 1, #a do\n        local\
    \ c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format(\"%x\"\
    , c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "  local res = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n   \
    \ if c > 0 then\n      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n\
    \    end\n  end\n  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n\
    \    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local c = ''\n  for i = 1,\
    \ #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n \
    \     result = result .. c\n    end\n  end\n  return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "    local s = ''\n    for i = 1, #a do\n\
    \        s = s .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n    end\n    return\
    \ s\nend", "  local result = ''\n  for i = 1, #a do\n    local c = a[i]\n    local\
    \ d = b[i]\n    if c ~= d then\n      result = result .. c\n    end\n  end\n \
    \ return result\nend", "  local ret = ''\n  for i = 1, #a do\n    ret = ret ..\
    \ string.rep(a[i], #b) .. b[i]\n  end\n  return ret\nend", "  local result = \"\
    \"\n  for i = 1, #a do\n    local c = string.byte(a, i)\n    local d = string.byte(b,\
    \ i)\n    local carry = c ^ d\n    local result = result .. string.format(\"%c\"\
    , carry)\n  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a\
    \ do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"\
    1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return result\n\
    end", "  local c = ''\n  for i = 1, #a do\n    local d = a[i]\n    c = (d ~= b[i])\
    \ and c or d .. '0'\n  end\n  return c\nend", "  local binA = '00000000'\n  local\
    \ binB = '00000000'\n  for i = 1, #a do\n    binA = binA .. string.format('%010b',\
    \ tonumber(a[i]))\n  end\n  for i = 1, #b do\n    binB = binB .. string.format('%010b',\
    \ tonumber(b[i]))\n  end\n  return binA:sub(1, #binA) .. binB:sub(1, #binB)\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
