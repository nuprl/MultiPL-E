name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = ''\n    for i = 1, #a do\n        local c = a[i]\
    \ ^ b[i]\n        if c > '9' then\n            c = c - '9' + '0'\n        elseif\
    \ c < '0' then\n            c = c + 10\n        end\n        result = result ..\
    \ c\n    end\n    return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            c =\
    \ tostring(c):byte(1, -1)\n        end\n        result = result .. c\n    end\n\
    \    return result\nend", "    local ret = ''\n    for i = 1, #a do\n        ret\
    \ = ret .. string.rep(a[i], #b) .. b[i]\n    end\n    return ret\nend", "  local\
    \ c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "  local c = ''\n  for i = 1, #a do\n    c = c .. string.rep(a[i],\
    \ #b[i])\n  end\n  return c\nend", "  local bin1 = tonumber(a, 2)\n  local bin2\
    \ = tonumber(b, 2)\n  local xor = bin1 xor bin2\n  local result = tostring(bin2)\
    \ and tostring(xor) or tostring(xor and bin1 or bin2)\n  return result\nend",
  "  local res = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0\
    \ then\n      res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n\
    \  end\n  return res\nend", "  local s = ''\n  for i = 1, #a do\n    local c =\
    \ a[i]\n    local d = b[i]\n    s = s .. string.format('%x', c ^ d)\n  end\n \
    \ return s\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "  local binA = '0b'\n\
    \  local binB = '0b'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\n\
    \  end\n  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i))\n  end\n  return\
    \ binA:sub(1, #binA) .. binB:sub(1, #binB)\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\
    \ ^ tostring(b[i])\n    if c > 1 then\n      result = result .. \"1\"\n    elseif\
    \ c < 1 then\n      result = result .. \"0\"\n    else\n      result = result\
    \ .. c\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for i\
    \ = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n   \
    \   result = result .. c\n    end\n  end\n  return result\nend", "  local res\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     res = res .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n\
    \  return res\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c =\
    \ a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    elseif c\
    \ = 0 then\n      result = result .. \"0\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "    local s = ''\n    for i =\
    \ 1, #a do\n        s = s .. string.rep(a[i], #b[i])\n    end\n    return s\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a:sub(i,\
    \ i))\n    local d = tostring(b:sub(i, i))\n    local res = c:byte() ^ d:byte()\n\
    \    local carry = tostring(1 - (res % 2))\n    result = result .. carry .. tostring(res\
    \ % 2)\n  end\n  return result\nend", "    local result = \"\"\n    for i = 1,\
    \ #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n            c =\
    \ string.format(\"%x\", c)\n        end\n        result = result .. c\n    end\n\
    \    return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i]\n    local d = b[i]\n    if c ~= d then\n      result = result .. c\n\
    \    end\n  end\n  return result\nend", "    local result = \"\"\n    for i =\
    \ 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n           \
    \ c = string.format(\"%x\", c)\n        end\n        result = result .. c\n  \
    \  end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
