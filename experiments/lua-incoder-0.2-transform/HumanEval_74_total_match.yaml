name: HumanEval_74_total_match
language: lua
prompt: "-- Write a function that accepts two lists of strings and returns the list\
  \ that has \n-- total number of chars in the all strings of the list less than the\
  \ other list.\n-- if the two lists have the same number of chars, return the first\
  \ list.\n-- Examples\n-- >>> total_match({}, {})\n-- {}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'Hi'})\n-- {'hI', 'Hi'}\n-- >>> total_match({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'})\n-- {'hi', 'admin'}\n-- >>> total_match({'hi',\
  \ 'admin'}, {'hI', 'hi', 'hi'})\n-- {'hI', 'hi', 'hi'}\n-- >>> total_match({'4'},\
  \ {'1', '2', '3', '4', '5'})\n-- {'4'}\nlocal function total_match(lst1, lst2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
  \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
  \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
  \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
  \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
  \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
  \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars\
    \ = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars\
    \ + #v\n  end\n  if num_chars == 0 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend", "    local total = 0\n    for _, v in pairs(lst1) do\n        total\
    \ = total + #v\n    end\n    for _, v in pairs(lst2) do\n        total = total\
    \ + #v\n    end\n    if total == #lst1 then\n        return lst1\n    else\n \
    \       return lst2\n    end\nend", "  local len1 = #lst1\n  local len2 = #lst2\n\
    \  if len1 == len2 then\n    return lst1\n  elseif len1 < len2 then\n    return\
    \ lst2\n  else\n    return lst1\n  end\nend", "  local num_chars = 0\n  for _,\
    \ v in pairs(lst1) do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2)\
    \ do\n    num_chars = num_chars + #v\n  end\n  if num_chars == #lst1 then\n  \
    \  return lst1\n  elseif num_chars == #lst2 then\n    return lst2\n  else\n  \
    \  return {}\n  end\nend", "  local num_chars = 0\n  for _, v in pairs(lst1) do\n\
    \    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars\
    \ = num_chars + #v\n  end\n  if num_chars == 0 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "  local num_chars = 0\n  for _, v in pairs(lst1)\
    \ do\n    num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n  \
    \  num_chars = num_chars + #v\n  end\n  if num_chars == #lst1 then\n    return\
    \ lst1\n  elseif num_chars == #lst2 then\n    return lst2\n  else\n    return\
    \ {}\n  end\nend", "    local num_chars = 0\n    for _, v in pairs(lst1) do\n\
    \        num_chars = num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n\
    \        num_chars = num_chars + #v\n    end\n    if num_chars == #lst1 then\n\
    \        return lst1\n    else\n        return lst2\n    end\nend", "    local\
    \ num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars = num_chars\
    \ + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars = num_chars\
    \ + #v\n    end\n    if num_chars == 0 then\n        return lst1\n    else\n \
    \       return lst2\n    end\nend", "  local total = 0\n  for _, v in pairs(lst1)\
    \ do\n    total = total + #v\n  end\n  for _, v in pairs(lst2) do\n    total =\
    \ total + #v\n  end\n  if total == #lst1 then\n    return lst1\n  else\n    return\
    \ lst2\n  end\nend", "  local num_chars = 0\n  for _, v in pairs(lst1) do\n  \
    \  num_chars = num_chars + #v\n  end\n  for _, v in pairs(lst2) do\n    num_chars\
    \ = num_chars + #v\n  end\n  if num_chars == 0 then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend", "    local num_chars = 0\n    for _, v in pairs(lst1)\
    \ do\n        num_chars = num_chars + #v\n    end\n    for _, v in pairs(lst2)\
    \ do\n        num_chars = num_chars + #v\n    end\n    if num_chars == #lst1 then\n\
    \        return lst1\n    else\n        return lst2\n    end\nend", "  local num_chars\
    \ = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars + #v\n  end\n \
    \ for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n  end\n  if num_chars\
    \ == #lst1 then\n    return lst1\n  else\n    return lst2\n  end\nend", "  local\
    \ num_chars = 0\n  for _, v in pairs(lst1) do\n    num_chars = num_chars + #v\n\
    \  end\n  for _, v in pairs(lst2) do\n    num_chars = num_chars + #v\n  end\n\
    \  if num_chars == #lst1 then\n    return lst1\n  else\n    return lst2\n  end\n\
    end", "    local num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars\
    \ = num_chars + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars\
    \ = num_chars + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n\
    \    elseif num_chars == #lst2 then\n        return lst2\n    else\n        return\
    \ {}\n    end\nend", "    local len1, len2 = #lst1, #lst2\n    if len1 == len2\
    \ then\n        for i = 1, len1 do\n            if lst1[i] > lst2[i] then\n  \
    \              return lst1\n            end\n        end\n        return lst2\n\
    \    end\n    if len1 > len2 then\n        for i = 1, len2 do\n            if\
    \ lst1[i] > lst2[i] then\n                return lst2\n            end\n     \
    \   end\n        return lst1\n    end\n    for i = 1, len1 do\n        if lst1[i]\
    \ > lst2[i] then\n            return lst1\n        end\n    end\n    return lst2\n\
    end", "  local len1 = #lst1\n  local len2 = #lst2\n  if len1 == len2 then\n  \
    \  local i = 1\n    while i <= len1 do\n      if lst1[i] > lst2[i] then\n    \
    \    len1 = len1 - 1\n      else\n        len2 = len2 - 1\n      end\n      i\
    \ = i + 1\n    end\n    return lst1\n  elseif len1 > len2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend", "  local num_chars = #lst1\n  if num_chars\
    \ == 0 then\n    return lst2\n  end\n  local num_chars2 = #lst2\n  if num_chars2\
    \ == 0 then\n    return lst1\n  end\n  if num_chars == num_chars2 then\n    return\
    \ lst1\n  end\n  local num_chars3 = #lst1\n  if num_chars3 > num_chars2 then\n\
    \    return lst1\n  end\n  return lst2\nend", "  local total_chars = 0\n  for\
    \ _, v in pairs(lst1) do\n    total_chars = total_chars + #v\n  end\n  for _,\
    \ v in pairs(lst2) do\n    total_chars = total_chars + #v\n  end\n  if total_chars\
    \ == 0 then\n    return lst1\n  else\n    return lst2\n  end\nend", "  local num_chars\
    \ = 0\n  for _, v in ipairs(lst1) do\n    num_chars = num_chars + #v\n  end\n\
    \  for _, v in ipairs(lst2) do\n    num_chars = num_chars + #v\n  end\n  if num_chars\
    \ == #lst1 then\n    return lst1\n  else\n    return lst2\n  end\nend", "    local\
    \ num_chars = 0\n    for _, v in pairs(lst1) do\n        num_chars = num_chars\
    \ + #v\n    end\n    for _, v in pairs(lst2) do\n        num_chars = num_chars\
    \ + #v\n    end\n    if num_chars == #lst1 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
