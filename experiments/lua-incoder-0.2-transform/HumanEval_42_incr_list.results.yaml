language: lua
name: HumanEval_42_incr_list
results:
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq66jnr1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsq66jnr1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2t72paq.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi2t72paq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq66jnr1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsq66jnr1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i - 1] = l[i] + 1\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprn6f1wyb.lua:18:\
    \ expected: {4, 3, 2}\nactual: {0=4, 3, 2}\nstack traceback:\n\t/tmp/tmprn6f1wyb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2t72paq.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi2t72paq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq66jnr1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsq66jnr1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq66jnr1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsq66jnr1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2t72paq.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi2t72paq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i]\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsq66jnr1.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpsq66jnr1.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2t72paq.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi2t72paq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[i] = l[i] + 1\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_list = {}\n\
    \  for i = 1, #l do\n    new_list[#new_list + 1] = l[i] + 1\n  end\n  return new_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 0
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local new_l = {}\n \
    \ for i = 1, #l do\n    new_l[i] = l[i] + 1\n  end\n  return new_l\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750378
- exit_code: 1
  program: "-- Return list with elements incremented by 1.\n-- >>> incr_list({1, 2,\
    \ 3})\n-- {2, 3, 4}\n-- >>> incr_list({5, 3, 5, 2, 3, 3, 9, 0, 123})\n-- {6, 4,\
    \ 6, 3, 4, 4, 10, 1, 124}\nlocal function incr_list(l)\n  local result = {}\n\
    \  for i = 1, #l do\n    result[#result + 1] = l[i]\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = incr_list\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({3, 2,\
    \ 1}), {4, 3, 2})\n    lu.assertEquals(candidate({5, 2, 5, 2, 3, 3, 9, 0, 123}),\
    \ {6, 3, 6, 3, 4, 4, 10, 1, 124})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi2t72paq.lua:18:\
    \ expected: {4, 3, 2}\nactual: {3, 2, 1}\nstack traceback:\n\t/tmp/tmpi2t72paq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750378
