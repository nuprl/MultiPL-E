name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given array is empty, return [].\n\
  -- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2,\
  \ 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5,\
  \ 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n-- so we will choose the first zero, which has the smallest index.\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local smalest_value, smalest_index = nil, nil\n    local index\
    \ = 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smalest_value == nil then\n                smalest_value = node.value\n\
    \                smalest_index = index\n            elseif smalest_value < node.value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smalest_value == nil then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend", "    local smalest_value, smalest_index = nil, nil\n  \
    \  local index = 1\n    for _, node in ipairs(arr) do\n        if node.value %\
    \ 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = node.value\n                smalest_index = index\n            elseif node.value\
    \ < smalest_value then\n                smalest_value = node.value\n         \
    \       smalest_index = index\n            end\n            index = index + 1\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    return smalest_value, smalest_index\nend", "  -- Base case\n  if\
    \ #arr == 0 then\n    return {}\n  -- Handle edge case\n  elseif #arr == 1 then\n\
    \    if arr[1] % 2 == 0 then\n      return arr[1]\n    else\n      return nil\n\
    \    end\n  -- Handle normal case\n  else\n    -- Initialize min and index\n \
    \   local min = arr[1]\n    local index = 2\n    -- Iterate through the rest of\
    \ the array\n    for i = 2, #arr do\n      if arr[i] % 2 == 0 then\n        min\
    \ = arr[i]\n        index = i\n      end\n    end\n    -- Return the smallest\
    \ even value\n    return min\n  end\nend", "    local smalest_value = nil\n  \
    \  local smalest_index = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    ", " \
    \ local smalest_value, smalest_index = 0, 1\n  local index = 1\n  local smalest_even_value\n\
    \  while index < #arr do\n    local value = arr[index]\n    if smalest_even_value\n\
    \      and smalest_even_value.value < value then\n      smalest_even_value = value\n\
    \      smalest_even_value.index = index\n    end\n    if smalest_value < value\
    \ then\n      smalest_value = value\n      smalest_index = index\n    end\n  \
    \  index = index + 1\n  end\n  if smalest_value == nil then\n    return {}\n \
    \ end\n  local smalest_value_and_index = { smalest_value, smalest_index }\n  local\
    \ smalest_value_and_index_sorted = {}\n  for i = 1, #smalest_value_and_index do\n\
    \    table.insert(smalest_value_and_index_sorted, smalest_value_and_index[i])\n\
    \  end\n  table.sort(smalest_value_and_index_sorted)\n  return smalest_value_and_index_sorted[1]\n\
    end", "    local smalest_value = 0\n    local smalest_index = 0\n    local smalest_node\
    \ = {}\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if node.value < smalest_value then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n            end\n        end\n    end\n    return smalest_node\nend",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local smalest_value = smallest_value\n    local smalest_index\
    \ = smallest_index\n    for i = 1, #arr do\n        if arr[i] == smalest_value\
    \ then\n            smalest_index = i\n        end\n    end\n    if smalest_index\
    \ == nil then\n        return nil\n    end\n    return { smalest_value, smalest_index\
    \ }\nend", "  local smalest_value, smalest_index, smallest_even_value\n  for i,\
    \ v in ipairs(arr) do\n    if smallest_even_value == nil then\n      smallest_even_value\
    \ = v\n      smalest_value = v\n      smalest_index = i\n    elseif smallest_even_value\
    \ < v then\n      smallest_even_value = v\n      smalest_value = v\n      smalest_index\
    \ = i\n    end\n  end\n  if smallest_even_value == nil then\n    return nil\n\
    \  end\n  local even_index = nil\n  for i, v in ipairs(arr) do\n    if v == smallest_even_value\
    \ then\n      even_index = i\n    end\n  end\n  if even_index == nil then\n  \
    \  return nil\n  end\n  return smalest_value, even_index\nend", "  -- Your code\
    \ here\n  local smalest_value\n  local smalest_index\n  local smalest_node\n \
    \ local smalest_node_val\n  local smalest_node_index\n  for _, node in ipairs(arr)\
    \ do\n    if smalest_value == nil then\n      smalest_value = node\n      smalest_index\
    \ = nil\n      smalest_node = node\n      smalest_node_val = node\n      smalest_node_index\
    \ = nil\n    elseif smalest_value ~= node then\n      if smalest_node_val % 2\
    \ == 0 then\n        smalest_value = node\n        smalest_index = nil\n     \
    \   smalest_node = node\n        smalest_node_val = node\n        smalest_node_index\
    \ = nil\n      else\n        if smalest_index == nil then\n          smalest_index\
    \ = #arr\n        else\n          smalest_index = smalest_index - 1\n        end\n\
    \      end\n    end\n  end\n  return smalest_node, smalest_index\nend", "    local\
    \ smallest, smallest_index, smallest_even, smallest_even_value, smallest_even_index\n\
    \    local results = {}\n    for _, node in ipairs(arr) do\n        if smallest_even\
    \ == nil then\n            smallest_even = node\n            smallest_even_index\
    \ = node\n            smallest_even_value, smallest_even_index = node, node\n\
    \        elseif smallest_even_value < node then\n            smallest_even = node\n\
    \            smallest_even_index = node\n            smallest_even_value, smallest_even_index\
    \ = node, node\n        elseif smallest_even_value == node then\n            smallest_even_index\
    \ = smallest_even_index + 1\n        end\n    end\n    if smallest_even ~= nil\
    \ then\n        results[smallest_even_value, smallest_even_index] = smallest_even\n\
    \    end\n    return results\nend", "    local smalest_value, smalest_index =\
    \ 0, 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if node.value < smalest_value then\n                smalest_value,\
    \ smalest_index = node.value, 1\n            elseif node.value == smalest_value\
    \ then\n                smalest_index = smalest_index + 1\n            end\n \
    \       end\n    end\n    if smalest_value == 0 then\n        return nil\n   \
    \ end\n    return smalest_value, smalest_index\nend", "  -- Base case\n  if #arr\
    \ == 0 then\n    return {}\n  end", "    local smallest_value = nil\n    local\
    \ smallest_index = nil\n    local smallest_even_value = nil\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node\n            smallest_index = node\n            smallest_even_value =\
    \ node.value % 2\n        else\n            if smallest_even_value == node.value\
    \ % 2 then\n                if smallest_value < node then\n                  \
    \  smallest_value = node\n                    smallest_index = node\n        \
    \            smallest_even_value = node.value % 2\n                else\n    \
    \                smallest_index = smallest_index + 1\n                end\n  \
    \          else\n                smallest_even_value = node.value % 2\n      \
    \      end\n        end\n    end\n    if smallest_even_value == 0 then\n     \
    \   return smallest_value, smallest_index\n    else\n        return smallest_value,\
    \ smallest_index\n    end\nend", "  local smallest_value\n  local smallest_index\n\
    \  local index\n  local value\n  for index, value in ipairs(arr) do\n    if smallest_value\
    \ == nil then\n      smallest_value = value\n      smallest_index = index\n  \
    \  elseif smallest_value < value then\n      smallest_value = value\n      smallest_index\
    \ = index\n    end\n  end\n  if smallest_value == nil then\n    return nil\n \
    \ end\n  local smalest_value = smallest_value\n  local smalest_index = smallest_index\n\
    \  local smalest_value_even\n  local smalest_index_even\n  for index, value in\
    \ ipairs(arr) do\n    if value == smalest_value then\n      if index % 2 == 0\
    \ then\n        smalest_value_even = smalest_value\n        smalest_index_even\
    \ = smalest_index\n      else\n        smalest_value = smallest_value\n      \
    \  smalest_index = smallest_index\n      end\n    end\n  end\n  if smalest_value_even\
    \ == nil then\n    return nil\n  end\n  return smalest_value_even, smalest_index_even\n\
    end", "  -- Your code here\n  local smallest_value_index = 0\n  local smallest_value\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smallest_value\
    \ == 0 then\n        smallest_value = arr[i]\n        smallest_value_index = i\n\
    \      elseif smallest_value < arr[i] then\n        smallest_value = arr[i]\n\
    \        smallest_value_index = i\n      end\n    end\n  end\n  return smallest_value,\
    \ smallest_value_index\nend", "    local smallest_even_values = {}\n    local\
    \ smallest_even_value_index = {}\n    local smallest_even_value_index = {}\n \
    \   for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n     \
    \       table.insert(smallest_even_values, node.value)\n            table.insert(smallest_even_value_index,\
    \ node.index)\n        end\n    end\n    if #smallest_even_values == 0 then\n\
    \        return {}\n    end\n    local smallest_even_value = table.min(smallest_even_values)\n\
    \    local smallest_even_value_index = table.min(smallest_even_value_index)\n\
    \    local plucked_value = smallest_even_values[smallest_even_value_index]\n \
    \   local plucked_index = smallest_even_value_index[smallest_even_value_index]\n\
    \    return { plucked_value, plucked_index }\nend\n</cell>\n<text>\nQ10. Given\
    \ a binary tree and a node value, swap nodes if they are in the wrong order.",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the smallest\
    \ even value\n  local smallest_even_value = math.min(unpack(arr))\n  -- Find the\
    \ smallest index\n  local smallest_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v == smallest_even_value then\n      smallest_index = i\n    end\n  end\n\
    \  -- Return the smallest even value and its index\n  return smallest_even_value,smallest_index\n\
    end", "  -- Your code here\n  local smalest_value\n  local smalest_index\n  for\
    \ i, v in ipairs(arr) do\n    if v ~= 0 then\n      if smalest_value == nil then\n\
    \        smalest_value = v\n        smalest_index = i\n      elseif smalest_value\
    \ < v then\n        smalest_value = v\n        smalest_index = i\n      end\n\
    \    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n  local\
    \ smalest_value_and_index = smalest_value, smalest_index\n  local smalest_value_and_index_index_pairs\
    \ = {}\n  local smalest_value_and_index_index_pairs_index = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v ~= 0 then\n      if smalest_value == v then\n        smalest_value_and_index_index_pairs[smalest_value_and_index_index_pairs]\
    \ = i\n        smalest_value_and_index_index_pairs_index = smalest_value_and_index_index_pairs_index\
    \ + 1\n      end\n    end\n  end\n  if smalest_value_and_index_index_pairs_index\
    \ > 1 then\n    smalest_value_and_index_index_pairs_index = smalest_value_and_index_index_pairs_index\
    \ - 1\n  end\n  local smalest_value_and_index_index_pairs_index_pairs = {}\n \
    \ for i = 1, smalest_value_and_index_index_pairs_index do\n    smalest_value_and_index_index_pairs_index_pairs[smalest_value_and_index_index_pairs_index]\
    \ = i\n  end\n  local smalest_value_and_index_index_pairs_index_pairs_index =\
    \ 0\n  for i = 1, smalest_value_and_index_index_pairs_index do\n    for j = 1,\
    \ smalest_value_and_index_index_pairs_index_pairs do\n      if smalest_value_and_index_index_pairs_index_pairs\
    \ == j then\n        smalest_value_and_index_index_pairs_index_pairs_index = smalest_value_and_index_index_pairs_index_pairs_index\
    \ + 1\n      end\n    end\n  end\n  if smalest_value_and_index_index_pairs_index_pairs_index\
    \ > 1 then\n    smalest_value_and_index_index_pairs_index_pairs_index = smalest_value_and_index_index_pairs_index_pairs_index\
    \ - 1\n  end\n  local smalest_value_and_index_index_pairs_index_pairs_index_pairs\
    \ = {}\n  for i = 1, smalest_value_and_index_index_pairs_index_pairs_index do\n\
    \    smalest_value_and_index_index_pairs_index_pairs_index_pairs[smalest_value_and_index_index_pairs_index_pairs_index]\
    \ = i\n  end\n  local sm", "    local smalest_value, smalest_index = nil, nil\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil or arr[i] < smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
