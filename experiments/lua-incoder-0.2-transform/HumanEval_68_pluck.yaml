name: HumanEval_68_pluck
language: lua
prompt: "-- \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n-- your task is to pluck one of the nodes and return it.\n-- The\
  \ plucked node should be the node with the smallest even value.\n-- If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n-- The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n-- If there are no even values or the given array is empty, return [].\n\
  -- Example 1:\n-- >>> pluck({4, 2, 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n-- Example 2:\n-- >>> pluck({1, 2,\
  \ 3})\n-- {2, 1}\n-- Explanation: 2 has the smallest even value, and 2 has the smallest\
  \ index.\n-- Example 3:\n-- >>> pluck({})\n-- {}\n-- Example 4:\n-- >>> pluck({5,\
  \ 0, 3, 0, 4, 2})\n-- {0, 1}\n-- Explanation: 0 is the smallest value, but  there\
  \ are two zeros,\n-- so we will choose the first zero, which has the smallest index.\n\
  -- Constraints:\n-- * 1 <= nodes.length <= 10000\n-- * 0 <= node.value\nlocal function\
  \ pluck(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pluck\n\
  \    lu.assertEquals(candidate({4, 2, 3}), {2, 1})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 1})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5,\
  \ 0, 3, 0, 4, 2}), {0, 1})\n    lu.assertEquals(candidate({1, 2, 3, 0, 5, 3}), {0,\
  \ 3})\n    lu.assertEquals(candidate({5, 4, 8, 4, 8}), {4, 1})\n    lu.assertEquals(candidate({7,\
  \ 6, 7, 1}), {6, 1})\n    lu.assertEquals(candidate({7, 9, 7, 1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local smalest_value, smalest_index = nil, nil\n    local index\
    \ = 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smalest_value == nil then\n                smalest_value = node.value\n\
    \                smalest_index = index\n            elseif smalest_value < node.value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            end\n            index = index + 1\n        end\n    end\n\
    \    if smalest_value == nil then\n        return nil\n    end\n    return smalest_value,\
    \ smalest_index\nend", "    local smalest_value, smalest_index = nil, nil\n  \
    \  local index = 1\n    for _, node in ipairs(arr) do\n        if node.value %\
    \ 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = node.value\n                smalest_index = index\n            elseif node.value\
    \ < smalest_value then\n                smalest_value = node.value\n         \
    \       smalest_index = index\n            end\n            index = index + 1\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    return smalest_value, smalest_index\nend", "  -- Base case\n  if\
    \ #arr == 0 then\n    return {}\n  -- Handle edge case\n  elseif #arr == 1 then\n\
    \    if arr[1] % 2 == 0 then\n      return arr[1]\n    else\n      return nil\n\
    \    end\n  -- Handle normal case\n  else\n    -- Initialize min and index\n \
    \   local min = arr[1]\n    local index = 2\n    -- Iterate through the rest of\
    \ the array\n    for i = 2, #arr do\n      if arr[i] % 2 == 0 then\n        min\
    \ = arr[i]\n        index = i\n      end\n    end\n    -- Return the smallest\
    \ even value\n    return min\n  end\nend", "    local smalest_value = nil\n  \
    \  local smalest_index = nil\n    local smalest_node_index = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    local\
    \ smalest_node_val = nil\n    local smalest_node_val = nil\n    local smalest_node_val\
    \ = nil\n    local smalest_node_val = nil\n    local smalest_node_val = nil\n\
    \    local smalest_node_val = nil\n    local smalest_node_val = nil\n    ", " \
    \ local smalest_value, smalest_index = 0, 1\n  local index = 1\n  local smalest_even_value\n\
    \  while index < #arr do\n    local value = arr[index]\n    if smalest_even_value\n\
    \      and smalest_even_value.value < value then\n      smalest_even_value = value\n\
    \      smalest_even_value.index = index\n    end\n    if smalest_value < value\
    \ then\n      smalest_value = value\n      smalest_index = index\n    end\n  \
    \  index = index + 1\n  end\n  if smalest_value == nil then\n    return {}\n \
    \ end\n  local smalest_value_and_index = { smalest_value, smalest_index }\n  local\
    \ smalest_value_and_index_sorted = {}\n  for i = 1, #smalest_value_and_index do\n\
    \    table.insert(smalest_value_and_index_sorted, smalest_value_and_index[i])\n\
    \  end\n  table.sort(smalest_value_and_index_sorted)\n  return smalest_value_and_index_sorted[1]\n\
    end", "    local smalest_value = 0\n    local smalest_index = 0\n    local smalest_node\
    \ = {}\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if node.value < smalest_value then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n                smalest_node\
    \ = node\n            end\n        end\n    end\n    return smalest_node\nend",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local smalest_value = smallest_value\n    local smalest_index\
    \ = smallest_index\n    for i = 1, #arr do\n        if arr[i] == smalest_value\
    \ then\n            smalest_index = i\n        end\n    end\n    if smalest_index\
    \ == nil then\n        return nil\n    end\n    return { smalest_value, smalest_index\
    \ }\nend", "  local smalest_value, smalest_index, smallest_even_value\n  for i,\
    \ v in ipairs(arr) do\n    if smallest_even_value == nil then\n      smallest_even_value\
    \ = v\n      smalest_value = v\n      smalest_index = i\n    elseif smallest_even_value\
    \ < v then\n      smallest_even_value = v\n      smalest_value = v\n      smalest_index\
    \ = i\n    end\n  end\n  if smallest_even_value == nil then\n    return nil\n\
    \  end\n  local even_index = nil\n  for i, v in ipairs(arr) do\n    if v == smallest_even_value\
    \ then\n      even_index = i\n    end\n  end\n  if even_index == nil then\n  \
    \  return nil\n  end\n  return smalest_value, even_index\nend", "  -- Your code\
    \ here\n  local smalest_value\n  local smalest_index\n  local smalest_node\n \
    \ local smalest_node_val\n  local smalest_node_index\n  for _, node in ipairs(arr)\
    \ do\n    if smalest_value == nil then\n      smalest_value = node\n      smalest_index\
    \ = nil\n      smalest_node = node\n      smalest_node_val = node\n      smalest_node_index\
    \ = nil\n    elseif smalest_value ~= node then\n      if smalest_node_val % 2\
    \ == 0 then\n        smalest_value = node\n        smalest_index = nil\n     \
    \   smalest_node = node\n        smalest_node_val = node\n        smalest_node_index\
    \ = nil\n      else\n        if smalest_index == nil then\n          smalest_index\
    \ = #arr\n        else\n          smalest_index = smalest_index - 1\n        end\n\
    \      end\n    end\n  end\n  return smalest_node, smalest_index\nend", "    local\
    \ smallest, smallest_index, smallest_even, smallest_even_value, smallest_even_index\n\
    \    local results = {}\n    for _, node in ipairs(arr) do\n        if smallest_even\
    \ == nil then\n            smallest_even = node\n            smallest_even_index\
    \ = node\n            smallest_even_value, smallest_even_index = node, node\n\
    \        elseif smallest_even_value < node then\n            smallest_even = node\n\
    \            smallest_even_index = node\n            smallest_even_value, smallest_even_index\
    \ = node, node\n        elseif smallest_even_value == node then\n            smallest_even_index\
    \ = smallest_even_index + 1\n        end\n    end\n    if smallest_even ~= nil\
    \ then\n        results[smallest_even_value, smallest_even_index] = smallest_even\n\
    \    end\n    return results\nend", "    local smalest_value, smalest_index =\
    \ 0, 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if node.value < smalest_value then\n                smalest_value,\
    \ smalest_index = node.value, 1\n            elseif node.value == smalest_value\
    \ then\n                smalest_index = smalest_index + 1\n            end\n \
    \       end\n    end\n    if smalest_value == 0 then\n        return nil\n   \
    \ end\n    return smalest_value, smalest_index\nend", "  -- Base case\n  if #arr\
    \ == 0 then\n    return {}\n  end", "    local smallest_value = nil\n    local\
    \ smallest_index = nil\n    local smallest_even_value = nil\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node\n            smallest_index = node\n            smallest_even_value =\
    \ node.value % 2\n        else\n            if smallest_even_value == node.value\
    \ % 2 then\n                if smallest_value < node then\n                  \
    \  smallest_value = node\n                    smallest_index = node\n        \
    \            smallest_even_value = node.value % 2\n                else\n    \
    \                smallest_index = smallest_index + 1\n                end\n  \
    \          else\n                smallest_even_value = node.value % 2\n      \
    \      end\n        end\n    end\n    if smallest_even_value == 0 then\n     \
    \   return smallest_value, smallest_index\n    else\n        return smallest_value,\
    \ smallest_index\n    end\nend", "  local smallest_value\n  local smallest_index\n\
    \  local index\n  local value\n  for index, value in ipairs(arr) do\n    if smallest_value\
    \ == nil then\n      smallest_value = value\n      smallest_index = index\n  \
    \  elseif smallest_value < value then\n      smallest_value = value\n      smallest_index\
    \ = index\n    end\n  end\n  if smallest_value == nil then\n    return nil\n \
    \ end\n  local smalest_value = smallest_value\n  local smalest_index = smallest_index\n\
    \  local smalest_value_even\n  local smalest_index_even\n  for index, value in\
    \ ipairs(arr) do\n    if value == smalest_value then\n      if index % 2 == 0\
    \ then\n        smalest_value_even = smalest_value\n        smalest_index_even\
    \ = smalest_index\n      else\n        smalest_value = smallest_value\n      \
    \  smalest_index = smallest_index\n      end\n    end\n  end\n  if smalest_value_even\
    \ == nil then\n    return nil\n  end\n  return smalest_value_even, smalest_index_even\n\
    end", "  -- Your code here\n  local smallest_value_index = 0\n  local smallest_value\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smallest_value\
    \ == 0 then\n        smallest_value = arr[i]\n        smallest_value_index = i\n\
    \      elseif smallest_value < arr[i] then\n        smallest_value = arr[i]\n\
    \        smallest_value_index = i\n      end\n    end\n  end\n  return smallest_value,\
    \ smallest_value_index\nend", "    local smallest_even_values = {}\n    local\
    \ smallest_even_value_index = {}\n    local smallest_even_value_index = {}\n \
    \   for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n     \
    \       table.insert(smallest_even_values, node.value)\n            table.insert(smallest_even_value_index,\
    \ node.index)\n        end\n    end\n    if #smallest_even_values == 0 then\n\
    \        return {}\n    end\n    local smallest_even_value = table.min(smallest_even_values)\n\
    \    local smallest_even_value_index = table.min(smallest_even_value_index)\n\
    \    local plucked_value = smallest_even_values[smallest_even_value_index]\n \
    \   local plucked_index = smallest_even_value_index[smallest_even_value_index]\n\
    \    return { plucked_value, plucked_index }\nend\n</cell>\n<text>\nQ10. Given\
    \ a binary tree and a node value, swap nodes if they are in the wrong order.",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the smallest\
    \ even value\n  local smallest_even_value = math.min(unpack(arr))\n  -- Find the\
    \ smallest index\n  local smallest_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v == smallest_even_value then\n      smallest_index = i\n    end\n  end\n\
    \  -- Return the smallest even value and its index\n  return smallest_even_value,smallest_index\n\
    end", "  -- Your code here\n  local smalest_value\n  local smalest_index\n  for\
    \ i, v in ipairs(arr) do\n    if v ~= 0 then\n      if smalest_value == nil then\n\
    \        smalest_value = v\n        smalest_index = i\n      elseif smalest_value\
    \ < v then\n        smalest_value = v\n        smalest_index = i\n      end\n\
    \    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n  local\
    \ smalest_value_and_index = smalest_value, smalest_index\n  local smalest_value_and_index_index_pairs\
    \ = {}\n  local smalest_value_and_index_index_pairs_index = 0\n  for i, v in ipairs(arr)\
    \ do\n    if v ~= 0 then\n      if smalest_value == v then\n        smalest_value_and_index_index_pairs[smalest_value_and_index_index_pairs]\
    \ = i\n        smalest_value_and_index_index_pairs_index = smalest_value_and_index_index_pairs_index\
    \ + 1\n      end\n    end\n  end\n  if smalest_value_and_index_index_pairs_index\
    \ > 1 then\n    smalest_value_and_index_index_pairs_index = smalest_value_and_index_index_pairs_index\
    \ - 1\n  end\n  local smalest_value_and_index_index_pairs_index_pairs = {}\n \
    \ for i = 1, smalest_value_and_index_index_pairs_index do\n    smalest_value_and_index_index_pairs_index_pairs[smalest_value_and_index_index_pairs_index]\
    \ = i\n  end\n  local smalest_value_and_index_index_pairs_index_pairs_index =\
    \ 0\n  for i = 1, smalest_value_and_index_index_pairs_index do\n    for j = 1,\
    \ smalest_value_and_index_index_pairs_index_pairs do\n      if smalest_value_and_index_index_pairs_index_pairs\
    \ == j then\n        smalest_value_and_index_index_pairs_index_pairs_index = smalest_value_and_index_index_pairs_index_pairs_index\
    \ + 1\n      end\n    end\n  end\n  if smalest_value_and_index_index_pairs_index_pairs_index\
    \ > 1 then\n    smalest_value_and_index_index_pairs_index_pairs_index = smalest_value_and_index_index_pairs_index_pairs_index\
    \ - 1\n  end\n  local smalest_value_and_index_index_pairs_index_pairs_index_pairs\
    \ = {}\n  for i = 1, smalest_value_and_index_index_pairs_index_pairs_index do\n\
    \    smalest_value_and_index_index_pairs_index_pairs_index_pairs[smalest_value_and_index_index_pairs_index_pairs_index]\
    \ = i\n  end\n  local sm", "    local smalest_value, smalest_index = nil, nil\n\
    \    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil or arr[i] < smalest_value then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smallest_value_index\n    local smallest_value\n    for _, node\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_value_index = node.index\n        elseif\
    \ smallest_value < node.value then\n            smallest_value = node.value\n\
    \            smallest_value_index = node.index\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_index = smallest_value_index\
    \ or 1\n    local plucked_value = arr[smallest_value_index]\n    arr[smallest_value_index]\
    \ = nil\n    return plucked_value, smallest_value_index\nend", "    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif smalest_value < node.value then\n              \
    \  smalest_value = node.value\n                smalest_index = index\n       \
    \     end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local min_value = math.inf\n    local min_idx\n    for idx, value in\
    \ ipairs(arr) do\n        if value < min_value then\n            min_value = value\n\
    \            min_idx = idx\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    return min_value, min_idx\nend", "  \
    \  local smallest_value = nil\n    local smallest_index = nil\n    local smallest_even_value\
    \ = nil\n    local smallest_even_index = nil\n    local index = 1\n    for _,\
    \ node in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node\n            smallest_index = index\n            smallest_even_value\
    \ = node.value % 2\n            smallest_even_index = index\n        elseif smallest_even_index\
    \ == nil then\n            if node.value % 2 == 0 then\n                smallest_even_index\
    \ = index\n                smallest_even_value = node.value % 2\n            else\n\
    \                smallest_value = node\n                smallest_index = index\n\
    \                smallest_even_value = node.value % 2\n                smallest_even_index\
    \ = index\n            end\n        elseif smallest_even_value < node.value then\n\
    \            smallest_value = node\n            smallest_index = index\n     \
    \       smallest_even_value = node.value % 2\n            smallest_even_index\
    \ = index\n        end\n        index = index + 1\n    end\n    if smallest_even_index\
    \ == nil then\n        return smallest_value\n    else\n        return smallest_value,\
    \ smallest_even_index\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven an array\
    \ representing a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).", "    local smalest_value = nil\n\
    \    local smalest_index = nil\n    local smalest_index_value = nil\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_index_value = arr[i]\n            elseif smalest_index_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n                smalest_index_value = arr[i]\n            end\n       \
    \ end\n    end\n    if smalest_value == nil then\n        return nil\n    end\n\
    \    local smalest_index_value = smalest_index_value + 1\n    local smalest_index_value\
    \ = smalest_index_value % 2\n    return { smalest_value, smalest_index }\nend\n\
    </cell>\n<text>\nProblem 4\nGiven an array representing a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).\nThe root node has level 0, the root node's children have level 1,\
    \ and so on.\nFor example:\nGiven binary tree {3,9,20,#,#,15,7},\n    3\n   /\
    \ \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal as:\n[\n\
    \  [3],\n  [9,20],\n  [15,7]\n]\nNote: The length of result will be 2n + 1, where\
    \ n is number of nodes in the tree.\nExample:\nGiven binary tree {3,9,20,#,#,15,7},\n\
    \    3\n   / \\\n  9  20\n    /  \\\n   15   7\nreturn its level order traversal\
    \ as:\n[\n  [3],\n  [9,20],\n  [15,7]\n]\nExplanation: \nLevel order traversal\
    \ of above binary tree is [\n  [3],\n  [9,20],\n  [15,7]\n]\nThe next level is\
    \ [9], which also has a right child of [20] (same level), \nand [15,7] (same level).\n\
    */", "    local smallest_value\n    local smallest_index\n    local smallest_even\n\
    \    local index\n    local even\n    local value\n    for index, value in ipairs(arr)\
    \ do\n        if value == 0 then\n            smallest_even = true\n        else\n\
    \            if smallest_even then\n                if value < smallest_value\
    \ then\n                    smallest_value = value\n                    smallest_index\
    \ = index\n                else\n                    smallest_even = false\n \
    \               end\n            else\n                if value < smallest_value\
    \ then\n                    smallest_value = value\n                    smallest_index\
    \ = index\n                end\n            end\n        end\n    end\n    if\
    \ smallest_even then\n        return smallest_value, smallest_index\n    else\n\
    \        return smallest_value, smallest_index\n    end\nend", "    local min_value\
    \ = math.inf\n    local min_idx = 0\n    for i, v in ipairs(arr) do\n        if\
    \ v < min_value then\n            min_value = v\n            min_idx = i\n   \
    \     end\n    end\n    if min_value == math.inf then\n        return nil\n  \
    \  end\n    return arr[min_idx], min_idx\nend", "  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end", "    local smalest_value\n    local smallest_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == nil then\n                smalest_value = node.value\n\
    \                smallest_index = node.index\n            elseif smalest_value\
    \ < node.value then\n                smalest_value = node.value\n            \
    \    smallest_index = node.index\n            end\n        end\n    end\n    if\
    \ smalest_value == nil then\n        return nil\n    end\n    local smalest_value_index\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == node.value then\n                smalest_value_index\
    \ = node.index\n            end\n        end\n    end\n    if smalest_value_index\
    \ == nil then\n        return nil\n    end\n    return { smalest_value, smalest_value_index\
    \ }\nend", "    local smalest_value, smalest_index, smalest_even_index\n    local\
    \ smalest_even_value = nil\n    local smalest_even_index = 0\n    local smalest_value\
    \ = nil\n    local smalest_index = 0\n    for index, value in pairs(arr) do\n\
    \        if smalest_value == nil then\n            smalest_value = value\n   \
    \         smalest_index = index\n            smalest_even_value = value\n    \
    \        smalest_even_index = index\n        elseif smalest_value == value then\n\
    \            smalest_even_index = smalest_even_index + 1\n            if smalest_even_index\
    \ > smalest_index then\n                smalest_even_index = smalest_index\n \
    \               smalest_even_value = value\n            end\n        else\n  \
    \          smalest_value = value\n            smalest_index = index\n        \
    \    smalest_even_value = value\n            smalest_even_index = index\n    \
    \    end\n    end\n    if smalest_even_index == 0 then\n        return nil\n \
    \   end\n    return smalest_value, smalest_even_index\nend", "    local smallest_value_index\
    \ = 1\n    local smallest_value = arr[1]\n    for i = 2, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_value_index\
    \ = i\n        end\n    end\n    return smallest_value, smallest_value_index\n\
    end", "    local smallest_value_index = 0\n    local smallest_value = 0\n    for\
    \ _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n           \
    \ if smallest_value == 0 then\n                smallest_value = node.value\n \
    \               smallest_value_index = node.index\n            elseif node.value\
    \ < smallest_value then\n                smallest_value = node.value\n       \
    \         smallest_value_index = node.index\n            end\n        end\n  \
    \  end\n    if smallest_value == 0 then\n        return nil\n    end\n    return\
    \ smallest_value, smallest_value_index\nend", "    local min = math.min(arr)\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return nil\n    end\n    return min, index\nend", "    local smallest_even_values\
    \ = {}\n    local smallest_even_value_index = {}\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            table.insert(smallest_even_values,\
    \ node.value)\n            table.insert(smallest_even_value_index, node.index)\n\
    \        end\n    end\n    if #smallest_even_values == 0 then\n        return\
    \ {}\n    end\n    local smallest_even_value = table.min(smallest_even_values)\n\
    \    local smallest_even_value_index = table.min(smallest_even_value_index)\n\
    \    local plucked_value = smallest_even_values[smallest_even_value_index]\n \
    \   local plucked_index = smallest_even_value_index[smallest_even_value_index]\n\
    \    return { plucked_value, plucked_index }\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree and a node value, swap the node with its left or right child.\n\
    The tree is guaranteed to be a binary search tree.\nFor example, given the tree\
    \ {3, 9, 20, #} and node value 20, swap the node with its left child and return\
    \ the new tree.\nThe tree is guaranteed to be a binary search tree.\nReturn nil\
    \ if the node is not in the tree.", "    local min = math.min(unpack(arr))\n \
    \   local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return nil\n    end\n    return { min = min, index = index }\nend", "    local\
    \ smalest_value\n    local smallest_index\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smalest_value == nil then\n\
    \                smalest_value = node.value\n                smallest_index =\
    \ node.index\n            elseif smalest_value < node.value then\n           \
    \     smalest_value = node.value\n                smallest_index = node.index\n\
    \            end\n        end\n    end\n    if smalest_value == nil then\n   \
    \     return nil\n    end\n    local smalest_value_and_index = { smalest_value,\
    \ smallest_index }\n    return smalest_value_and_index\nend", "    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_count = 0\n  \
    \  for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    if\
    \ smalest_index_count == 0 then\n        return smalest_index, smalest_value\n\
    \    end\n    local smalest_index_count = 0\n    for i = 1, #arr do\n        if\
    \ arr[i] % 2 == 0 then\n            if smalest_value == nil then\n           \
    \     smalest_value = arr[i]\n                smalest_index = i\n            elseif\
    \ smalest_value < arr[i] then\n                smalest_value = arr[i]\n      \
    \          smalest_index = i\n            end\n            smalest_index_count\
    \ = smalest_index_count + 1\n        end\n    end\n    if smalest_index_count\
    \ == 0 then\n        return nil\n    end\n    return smalest_index, smalest_value\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    local smalest_index = nil\n \
    \   local smalest_value = nil\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_even_value\
    \ = node.value\n                smalest_even_index = node.index\n            \
    \    smalest_index = node.index\n                smalest_value = node.value\n\
    \            elseif smalest_value == node.value then\n                smalest_even_index\
    \ = node.index\n            else\n                smalest_even_value = node.value\n\
    \                smalest_even_index = node.index\n                smalest_index\
    \ = node.index\n                smalest_value = node.value\n            end\n\
    \        else\n            if smalest_value == nil then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n            elseif\
    \ smalest_value == node.value then\n                smalest_index = node.index\n\
    \            else\n                smalest_value = node.value\n              \
    \  smalest_index = node.index\n            end\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    else\n        return {smalest_value, smalest_index}\n\
    \    end\nend", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n \
    \ -- Find the smallest even value\n  local smallest_even_value = math.min(arr)\n\
    \  -- Find the index of the smallest even value\n  local smallest_even_index =\
    \ #arr\n  -- Find the smallest even value index\n  for i = 1, #arr do\n    if\
    \ arr[i] % 2 == 0 then\n      if smallest_even_value < arr[i] then\n        smallest_even_value\
    \ = arr[i]\n        smallest_even_index = i\n      end\n    end\n  end\n  -- Return\
    \ the smallest even value and its index\n  return smallest_even_value, smallest_even_index\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "  -- Base\
    \ case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the smallest even\
    \ value\n  local smalest_value = arr[1]\n  local smallest_index = 2\n  for i =\
    \ 2, #arr do\n    if arr[i] % 2 == 0 then\n      if arr[i] < smalest_value then\n\
    \        smalest_value = arr[i]\n        smallest_index = i\n      end\n    end\n\
    \  end\n  -- Return the smallest even value\n  return { smalest_value, smallest_index\
    \ }\nend", "  -- Base case\n  if #arr == 0 then\n    return {}\n  -- Base case\n\
    \  elseif #arr == 1 then\n    if arr[1] % 2 == 0 then\n      return arr[1]\n \
    \   else\n      return nil\n    end\n  -- Recursive case\n  elseif #arr > 1 then\n\
    \    local smallest_value, smallest_index = nil, -1\n    for i = 1, #arr do\n\
    \      if arr[i] % 2 == 0 then\n        if smallest_value == nil then\n      \
    \    smallest_value = arr[i]\n          smallest_index = i\n        elseif smallest_value\
    \ < arr[i] then\n          smallest_value = arr[i]\n          smallest_index =\
    \ i\n        end\n      end\n    end\n    if smallest_value ~= nil then\n    \
    \  return {smallest_value, smallest_index}\n    else\n      return nil\n    end\n\
    \  else\n    return nil\n  end\nend", "    local smalest_value = nil\n    local\
    \ smalest_index = nil\n    local smalest_node_index = nil\n    local smalest_node_value\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    local\
    \ smalest_node_count = nil\n    local smalest_node_count = nil\n    local smalest_node_count\
    \ = nil\n    local smalest_node_count = nil\n    local smalest_node_count = nil\n\
    \    local smalest_node_count = nil\n    local smalest_node_count = nil\n    ",
  "    local smallest_value\n    local smallest_index\n    local results = {}\n  \
    \  for i = 1, #arr do\n        if arr[i] <= 0 then\n            smallest_value\
    \ = arr[i]\n            smallest_index = i\n        else\n            if smallest_value\
    \ == nil then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            elseif arr[i] < smallest_value then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == nil then\n        return nil\n    end\n   \
    \ local smallest_value_index = #results\n    for i = 1, #results do\n        if\
    \ results[i] ~= smallest_value then\n            smallest_value_index = i\n  \
    \      end\n    end\n    results[smallest_value_index] = smallest_value\n    return\
    \ results\nend", "    local smallest_value = nil\n    local smallest_index = nil\n\
    \    local index = 1\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = node\n            smallest_index =\
    \ index\n        elseif smallest_value < node then\n            smallest_value\
    \ = node\n            smallest_index = index\n        end\n        index = index\
    \ + 1\n    end\n    if smallest_value == nil then\n        return nil\n    end\n\
    \    local result = {}\n    result[smallest_value] = smallest_index\n    return\
    \ result\nend", "    local smallest_value = nil\n    local smallest_index = nil\n\
    \    local index_of_smallest_value = nil\n    local index_of_smallest_index =\
    \ nil\n    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = node\n            smallest_index = node\n      \
    \      index_of_smallest_value = node\n            index_of_smallest_index = node\n\
    \        elseif smallest_value < node then\n            smallest_value = node\n\
    \            smallest_index = node\n            index_of_smallest_value = node\n\
    \            index_of_smallest_index = node\n        elseif smallest_value ==\
    \ node then\n            if index_of_smallest_value == nil then\n            \
    \    index_of_smallest_value = node\n                index_of_smallest_index =\
    \ node\n            elseif index_of_smallest_value < node then\n             \
    \   index_of_smallest_value = node\n                index_of_smallest_index =\
    \ node\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    if index_of_smallest_value == nil then\n   \
    \     return smallest_value\n    end\n    if index_of_smallest_value < smallest_value\
    \ then\n        return smallest_value\n    end\n    return index_of_smallest_value\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local\
    \ smalest_value, smalest_index, smalest_index = math.inf, 0, 0\n    for i = 1,\
    \ #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value < arr[i]\
    \ then\n                smalest_value, smalest_index = arr[i], i\n           \
    \ end\n        end\n    end\n    if smalest_value == math.inf then\n        return\
    \ nil\n    end\n    if smalest_index == 0 then\n        return nil\n    end\n\
    \    return smalest_value, smalest_index\nend", "    local smallest_value = math.inf\n\
    \    local smallest_index = 0\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smallest_value < node.value then\n           \
    \     smallest_value = node.value\n                smallest_index = node.index\n\
    \            end\n        end\n    end\n    if smallest_value == math.inf then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend",
  "    local smalest_value = nil\n    local smalest_index = nil\n    local smalest_index\
    \ = 0\n    local smalest_value = 0\n    for _, node in ipairs(arr) do\n      \
    \  if node.value % 2 == 0 then\n            if smalest_value == nil then\n   \
    \             smalest_value = node.value\n                smalest_index = node.index\n\
    \            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n            end\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    local smalest_value_index = nil\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == node.value\
    \ then\n                smalest_value_index = node.index\n            end\n  \
    \      end\n    end\n    if smalest_value_index == nil then\n        return nil\n\
    \    end\n    return smalest_value, smalest_index\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).", "  -- Your code here\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  if smalest_value == 0\
    \ then\n    return {}\n  end\n  return { smalest_value, smalest_index }\nend",
  "    local smallest_value\n    local smallest_index\n    local smallest_even_value\n\
    \    local index\n    local even_value\n    for index, value in ipairs(arr) do\n\
    \        if value == 0 then\n            smallest_even_value = value\n       \
    \     smallest_value = index\n        else\n            if smallest_value == nil\
    \ then\n                smallest_value = value\n                smallest_index\
    \ = index\n            else\n                if smallest_value == value then\n\
    \                    if smallest_even_value == nil then\n                    \
    \    smallest_even_value = value\n                        smallest_even_index\
    \ = index\n                    else\n                        if smallest_even_index\
    \ == nil then\n                            smallest_even_value = value\n     \
    \                       smallest_even_index = index\n                        else\n\
    \                            if smallest_even_index < index then\n           \
    \                     smallest_even_value = value\n                          \
    \      smallest_even_index = index\n                            end\n        \
    \                end\n                    end\n                else\n        \
    \            if smallest_value < value then\n                        smallest_value\
    \ = value\n                        smallest_index = index\n                  \
    \  end\n                end\n            end\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    if smallest_even_index == nil\
    \ then\n        return smallest_even_value\n    end\n    return smallest_value,\
    \ smallest_even_index\nend", "  -- Your code here\n  local smalest_value = 0\n\
    \  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n      \
    \  smalest_index = i\n      end\n    end\n  end\n  if smalest_value == 0 then\n\
    \    return nil\n  end\n  local result = {smalest_value, smalest_index}\n  return\
    \ result\nend", "    local result = {}\n    local smallest_value\n    local smallest_index\n\
    \    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n  \
    \          smallest_value = node\n            smallest_index = nil\n        elseif\
    \ smallest_value < node then\n            smallest_value = node\n            smallest_index\
    \ = nil\n        elseif smallest_value == node then\n            smallest_index\
    \ = nil\n        end\n    end\n    if smallest_index ~= nil then\n        result[smallest_value]\
    \ = smallest_index\n    end\n    return result\nend", "    local min_value = math.inf\n\
    \    local min_value_index = 0\n    for i, v in ipairs(arr) do\n        if v <\
    \ min_value then\n            min_value = v\n            min_value_index = i\n\
    \        end\n    end\n    if min_value == math.inf then\n        return {}\n\
    \    end\n    local smalest_value = min_value\n    local smalest_value_index =\
    \ min_value_index\n    for i, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_value_index = i\n        end\n    end\n    return\
    \ { smalest_value, smalest_value_index }\nend", "    local smalest_value = nil\n\
    \    local smalest_index = nil\n    local smalest_index = 0\n    local smalest_value\
    \ = 0\n    for _, node in ipairs(arr) do\n        if smalest_value == nil then\n\
    \            smalest_value = node.value\n            smalest_index = smalest_index\
    \ + 1\n        elseif node.value <= smalest_value then\n            smalest_value\
    \ = node.value\n            smalest_index = smalest_index + 1\n        end\n \
    \   end\n    if smalest_value == nil then\n        return nil\n    end\n    local\
    \ smalest_value_and_index = smalest_value, smalest_index\n    for _, node in ipairs(arr)\
    \ do\n        if node.value == smalest_value then\n            if node.value %\
    \ 2 == 0 then\n                smalest_value_and_index = smalest_value, smalest_index\n\
    \            end\n        end\n    end\n    return smalest_value_and_index\nend",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\n\
    \    local smallest_index\n    local smallest_even_value\n    local smallest_even_index\n\
    \    for index, value in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = value\n            smallest_index = index\n    \
    \        smallest_even_value = value\n            smallest_even_index = index\n\
    \        elseif smallest_value == value then\n            if smallest_even_index\
    \ == nil then\n                smallest_even_index = index\n            elseif\
    \ smallest_even_index < index then\n                smallest_even_index = index\n\
    \                smallest_even_value = value\n            end\n        elseif\
    \ smallest_value < value then\n            smallest_value = value\n          \
    \  smallest_index = index\n            smallest_even_value = value\n         \
    \   smallest_even_index = index\n        end\n    end\n    if smallest_even_index\
    \ == nil then\n        return nil\n    end\n    return smallest_even_value\nend",
  "    local smalest_value, smalest_index = nil, nil\n    for i = 1, #arr do\n   \
    \     if arr[i] % 2 == 0 then\n            if smalest_value == nil or smalest_value\
    \ < arr[i] then\n                smalest_value, smalest_index = arr[i], i\n  \
    \          end\n        end\n    end\n    if smalest_value == nil then\n     \
    \   return nil\n    end\n    local index = #arr\n    for i = 1, #arr do\n    \
    \    if arr[i] % 2 == 0 then\n            index = i\n            break\n     \
    \   end\n    end\n    return smalest_value, index\nend", "  -- Base case\n  if\
    \ #arr == 0 then\n    return {}\n  end\n  -- Find the smallest even value in the\
    \ array\n  local smallest_even_value = math.min(unpack(arr))\n  -- Find the smallest\
    \ index\n  local smallest_index = #arr\n  for i = 1, #arr do\n    if arr[i] %\
    \ 2 == 0 then\n      smallest_even_value = smallest_even_value\n      smallest_index\
    \ = i\n    end\n  end\n  -- Return the smallest even value and its index\n  return\
    \ { smallest_even_value, smallest_index }\nend", "    local smallest_value = math.inf\n\
    \    local smallest_index = 0\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        end\n    end\n    if smallest_value == math.inf then\n\
    \        return nil\n    end\n    local plucked_value = smallest_value\n    local\
    \ plucked_index = smallest_index\n    for _, node in ipairs(arr) do\n        if\
    \ node.value == plucked_value then\n            if node.index <= plucked_index\
    \ then\n                plucked_value = node.value\n                plucked_index\
    \ = node.index\n            end\n        end\n    end\n    return { plucked_value,\
    \ plucked_index }\nend", "  -- Base case\n  if #arr == 0 then\n    return {}\n\
    \  end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local\
    \ smallest_value = nil\n    local smallest_index = nil\n    for i = 1, #arr do\n\
    \        if arr[i] < smallest_value then\n            smallest_value = arr[i]\n\
    \            smallest_index = i\n        end\n    end\n    if smallest_value ==\
    \ nil then\n        return nil\n    end\n    local new_arr = {}\n    for i = 1,\
    \ #arr do\n        if arr[i] < smallest_value then\n            new_arr[i] = arr[i]\n\
    \        elseif arr[i] == smallest_value then\n            new_arr[i] = smallest_index\n\
    \        end\n    end\n    return new_arr\nend", "  -- Your code here\n  local\
    \ smalest_value = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i]\
    \ % 2 == 0 then\n      if smalest_value < arr[i] then\n        smalest_value =\
    \ arr[i]\n        smalest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return nil\n  end\n  local smalest_value_and_index = smalest_value,\
    \ smalest_index\n  local smalest_value_index = {}\n  for i = 1, #arr do\n    if\
    \ arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      elseif smalest_value == arr[i] then\n\
    \        smalest_value_index[#smalest_value_index + 1] = i\n      end\n    end\n\
    \  end\n  if #smalest_value_index > 0 then\n    smalest_value_and_index = smalest_value,\
    \ smalest_index\n  end\n  return smalest_value_and_index\nend", "    local smalest_value\
    \ = nil\n    local smalest_index = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    local smalest_index_value = nil\n\
    \    local smalest_index_value = nil\n    local smalest_index_value = nil\n  \
    \  local smalest_index_value = nil\n    local smalest_index_value = nil\n    local\
    \ smalest_index_value = nil\n    local smalest_index_value = nil\n    local smalest_index_value\
    \ = nil\n    local smalest_index_value = nil\n    local smalest_index_value =\
    \ nil\n    local smalest_index_value = nil\n    ", "  -- Base case\n  if #arr\
    \ == 0 then\n    return {}\n  end", "    local smallest_value_index = nil\n  \
    \  local smallest_value = nil\n    local smallest_value_index = 0\n    for _,\
    \ node in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_value_index = node.index\n        elseif\
    \ smallest_value < node.value then\n            smallest_value = node.value\n\
    \            smallest_value_index = node.index\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local new_arr = {}\n    for _,\
    \ node in ipairs(arr) do\n        if node.value == smallest_value then\n     \
    \       new_arr[smallest_value_index] = node\n        end\n    end\n    return\
    \ new_arr\nend", "    local smalest_value, smalest_index = nil, nil\n    for i\
    \ = 1, #arr do\n        if arr[i] % 2 == 0 then\n            if smalest_value\
    \ == nil or smalest_value < arr[i] then\n                smalest_value, smalest_index\
    \ = arr[i], i\n            end\n        end\n    end\n    if smalest_value ==\
    \ nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smalest_value\n    local smalest_index\n    local smalest_index2\n\
    \    local smalest_index3\n    local smalest_index4\n    local smalest_index5\n\
    \    local smalest_index6\n    local smalest_index7\n    local smalest_index8\n\
    \    local smalest_index9\n    local smalest_index10\n    local smalest_index11\n\
    \    local smalest_index12\n    local smalest_index13\n    local smalest_index14\n\
    \    local smalest_index15\n    local smalest_index16\n    local smalest_index17\n\
    \    local smalest_index18\n    local smalest_index19\n    local smalest_index20\n\
    \    local smalest_index21\n    local smalest_index22\n    local smalest_index23\n\
    \    local smalest_index24\n    local smalest_index25\n    local smalest_index26\n\
    \    local smalest_index27\n    local smalest_index28\n    local smalest_index29\n\
    \    local smalest_index30\n    local smalest_index31\n    local smalest_index32\n\
    \    local smalest_index33\n    local smalest_index34\n    local smalest_index35\n\
    \    local smalest_index36\n    local smalest_index37\n    local smalest_index38\n\
    \    local smalest_index39\n    local smalest_index40\n    local smalest_index41\n\
    \    local smalest_index42\n    local smalest_index43\n    local smalest_index44\n\
    \    local smalest_index45\n    local smalest_index46\n    local smalest_index47\n\
    \    local smalest_index48\n    local smalest_index49\n    local smalest_index50\n\
    \    local smalest_index51\n    local smalest_index52\n    local smalest_index53\n\
    \    local smalest_index54\n    local smalest_index55\n    local smalest_index56\n\
    \    local smalest_index57\n    local smalest_index58\n    local smalest_index59\n\
    \    local smalest_index60\n    local smalest_index61\n    local smalest_index62\n\
    \    local smalest_index63\n    local ", "    local smallest_value\n    local\
    \ smallest_index\n    local results = {}\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value then\n        results[smallest_value]\
    \ = smallest_index\n    end\n    return results\nend", "    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for _, node in ipairs(arr) do\n \
    \       if smallest_value == nil then\n            smallest_value = node\n   \
    \         smallest_value_index = nil\n        elseif smallest_value < node then\n\
    \            smallest_value = node\n            smallest_value_index = nil\n \
    \       elseif smallest_value == node then\n            smallest_value_index =\
    \ nil\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    if smallest_value_index == nil then\n        return smallest_value\n\
    \    end\n    local smallest_value_index = 1\n    for _, node in ipairs(arr) do\n\
    \        if smallest_value == node then\n            smallest_value_index = smallest_value_index\
    \ + 1\n        end\n    end\n    return smallest_value, smallest_value_index\n\
    end\n</cell>\n<text>\nGiven an array representing a branch of a tree that has\
    \ non-negative integer nodes", "    local min_even_values = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    local min_even_values_index\
    \ = {}\n    local min_even_values_index = {}\n    ", "    local smalest_value\
    \ = math.inf\n    local smalest_index = 0\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if node.value < smalest_value\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = node.index\n            end\n        end\n    end\n    if smalest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smallest_value = nil\n    local smallest_index = nil\n    local\
    \ smallest_even_value = nil\n    local smallest_even_index = nil\n    for _, node\
    \ in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node\n            smallest_index = node\n            smallest_even_value =\
    \ node.value % 2\n            smallest_even_index = node\n        elseif smallest_value\
    \ == node.value then\n            if smallest_even_value == node.value % 2 then\n\
    \                smallest_even_index = node\n            else\n              \
    \  smallest_value = node\n                smallest_index = node\n            \
    \    smallest_even_value = node.value % 2\n                smallest_even_index\
    \ = node\n            end\n        elseif smallest_even_value == node.value %\
    \ 2 then\n            smallest_even_index = node\n        end\n    end\n    if\
    \ smallest_even_value == 0 then\n        return smallest_even_index\n    else\n\
    \        return {smallest_value, smallest_index}\n    end\nend", "    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for _, node in ipairs(arr) do\n \
    \       if smallest_value == nil then\n            smallest_value = node.value\n\
    \            smallest_value_index = node.index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_value_index\
    \ = node.index\n        end\n    end\n    if smallest_value == nil then\n    \
    \    return nil\n    end\n    local smallest_value_index = nil\n    local smallest_value\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = node.value\n            smallest_value_index = node.index\n\
    \        elseif smallest_value < node.value then\n            smallest_value =\
    \ node.value\n            smallest_value_index = node.index\n        end\n   \
    \ end\n    if smallest_value == nil then\n        return nil\n    end\n    return\
    \ smallest_value, smallest_value_index\nend", "    local smalest_value, smalest_index\
    \ = nil, nil\n    local index = 1\n    for _, node in ipairs(arr) do\n       \
    \ if node.value % 2 == 0 then\n            if smalest_value == nil then\n    \
    \            smalest_value = node.value\n                smalest_index = index\n\
    \            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_index = index\n            end\n     \
    \       index = index + 1\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \ -- Base case\n  if #arr == 0 then\n    return {}\n  -- Base case\n  elseif #arr\
    \ == 1 then\n    if arr[1] % 2 == 0 then\n      return arr[1]\n    else\n    \
    \  return nil\n    end\n  -- Recursive case\n  else\n    -- Find the smallest\
    \ even value\n    local smalest_value = arr[1]\n    local smalest_index = 1\n\
    \    for i = 2, #arr do\n      if arr[i] % 2 == 0 then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      end\n    end\n    -- Return the smallest\
    \ even value\n    if smalest_value % 2 == 0 then\n      return smalest_value,\
    \ smalest_index\n    else\n      return nil\n    end\n  end\nend", "    local\
    \ smallest_value\n    local smallest_index\n    for _, node in ipairs(arr) do\n\
    \        if smallest_value == nil then\n            smallest_value = node.value\n\
    \            smallest_index = node.index\n        elseif smallest_value < node.value\
    \ then\n            smallest_value = node.value\n            smallest_index =\
    \ node.index\n        end\n    end\n    if smallest_value == nil then\n      \
    \  return nil\n    end\n    local plucked_value\n    local plucked_index\n   \
    \ for _, node in ipairs(arr) do\n        if node.value == smallest_value then\n\
    \            if plucked_value == nil then\n                plucked_value = node.value\n\
    \                plucked_index = node.index\n            elseif plucked_value\
    \ < node.value then\n                plucked_value = node.value\n            \
    \    plucked_index = node.index\n            end\n        end\n    end\n    if\
    \ plucked_value == nil then\n        return nil\n    end\n    return { value =\
    \ plucked_value, index = plucked_index }\nend", "    local smallest_value = math.inf\n\
    \    local smallest_index = 0\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smallest_value < node.value then\n           \
    \     smallest_value = node.value\n                smallest_index = node.index\n\
    \            end\n        end\n    end\n    if smallest_value == math.inf then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend",
  "    local smalest_value = nil\n    local smallest_index = nil\n    local smallest_even_value\
    \ = nil\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smallest_even_value == nil then\n                smallest_even_value\
    \ = node.value\n                smallest_index = node.index\n            elseif\
    \ smallest_even_value < node.value then\n                smallest_even_value =\
    \ node.value\n                smallest_index = node.index\n            end\n \
    \       end\n    end\n    if smallest_even_value == nil then\n        return nil\n\
    \    end\n    local result = {}\n    for _, node in ipairs(arr) do\n        if\
    \ node.value % 2 == 0 then\n            if smallest_even_value == node.value then\n\
    \                table.insert(result, node.value)\n            end\n        end\n\
    \    end\n    if #result == 0 then\n        return nil\n    end\n    return result\n\
    end", "    local smallest_value\n    local smallest_index\n    for _, v in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = v\n\
    \            smallest_index = v\n        elseif smallest_value < v then\n    \
    \        smallest_value = v\n            smallest_index = v\n        end\n   \
    \ end\n    if smallest_value == nil then\n        return nil\n    end\n    local\
    \ smallest_value_index = nil\n    for _, v in ipairs(arr) do\n        if v ==\
    \ smallest_value then\n            smallest_value_index = v\n        end\n   \
    \ end\n    return smallest_value, smallest_value_index\nend", "  local smallest_value\
    \ = nil\n  local smallest_index = nil\n  local index = 1\n  for _, node in ipairs(arr)\
    \ do\n    if smallest_value == nil then\n      smallest_value = node\n      smallest_index\
    \ = index\n    elseif smallest_value < node then\n      smallest_value = node\n\
    \      smallest_index = index\n    end\n    index = index + 1\n  end\n  if smallest_value\
    \ == nil then\n    return nil\n  end\n  local new_arr = {smallest_value, smallest_index}\n\
    \  local new_arr = new_arr:sort()\n  return new_arr\nend", "    local min_value\
    \ = math.inf\n    local min_value_index = 0\n    for _, v in ipairs(arr) do\n\
    \        if v < min_value then\n            min_value = v\n            min_value_index\
    \ = v\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ {}\n    end\n    local smalest_value = min_value\n    local smalest_value_index\
    \ = min_value_index\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_value_index = v\n        end\n    end\n    return\
    \ { smalest_value, smalest_value_index }\nend\n</cell>\n<text>\nProblem 3\nGiven\
    \ a binary tree, return the level order traversal of its nodes' values. (ie, from\
    \ left to right, level by level).", "    local smallest_value = 0\n    local smallest_index\
    \ = 0\n    for i = 1, #arr do\n        if arr[i] > 0 then\n            if smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    local result = {smallest_value, smallest_index}\n\
    \    for i = 1, #arr do\n        if arr[i] > 0 then\n            if arr[i] < smallest_value\
    \ then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_index == #arr then\n\
    \        return nil\n    end\n    table.insert(result, smallest_index, smallest_value)\n\
    \    return result\nend", "    local smalest_value, smalest_index = nil, nil\n\
    \    local smalest_even_value = nil\n    local smalest_even_index = nil\n    local\
    \ smalest_index = nil\n    local smalest_value = nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    for _, v in ipairs(arr) do\n\
    \        if smalest_value == nil then\n            smalest_value = v\n       \
    \     smalest_index = v\n            smalest_even_value = v\n            smalest_even_index\
    \ = v\n        elseif smalest_value == v then\n            smalest_even_value\
    \ = smalest_even_value\n            smalest_even_index = smalest_even_index\n\
    \        elseif smalest_value == smalest_even_value then\n            smalest_even_index\
    \ = smalest_index\n        elseif smalest_value == smalest_even_index then\n \
    \           smalest_value = smalest_value\n            smalest_index = smalest_index\n\
    \            smalest_even_value = smalest_even_value\n            smalest_even_index\
    \ = smalest_even_index\n        elseif smalest_value == smalest_even_index then\n\
    \            smalest_value = smalest_value\n            smalest_index = smalest_index\n\
    \            smalest_even_value = smalest_even_value\n            smalest_even_index\
    \ = smalest_even_index\n        elseif smalest_value == smalest_even_index then\n\
    \            smalest_value = smalest_value\n            smalest_index = smalest_index\n\
    \            smalest_even_value = smalest_even_value\n            smalest_even_index\
    \ = smalest_even_index\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \ -- Base case\n  if #arr == 0 then\n    return {}\n  else\n    -- Find the smallest\
    \ even value in the array\n    local smallest_even_value = math.min(unpack(arr))\n\
    \    -- Find the index of the smallest even value in the array\n    local smallest_even_index\
    \ = #arr\n    -- Find the smallest even value in the array and it's index\n  \
    \  for i = 1, #arr do\n      if arr[i] % 2 == 0 then\n        if smallest_even_value\
    \ < arr[i] then\n          smallest_even_value = arr[i]\n          smallest_even_index\
    \ = i\n        end\n      end\n    end\n    -- Return the smallest even value\
    \ and its index\n    return {smallest_even_value, smallest_even_index}\n  end\n\
    end\n</cell>\n<text>\nLet's test your implementation. Make sure you get 'True'\
    \ before proceeding.", "  -- Base case\n  if #arr == 0 then\n    return {}\n \
    \ end", "    local smallest_value = 0\n    local smallest_index = 0\n    local\
    \ even_values = {}\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n\
    \            even_values[#even_values + 1] = arr[i]\n        end\n    end\n  \
    \  for i = 1, #even_values do\n        if even_values[i] < smallest_value then\n\
    \            smallest_value = even_values[i]\n            smallest_index = i\n\
    \        end\n    end\n    if smallest_value == 0 then\n        return nil\n \
    \   end\n    local new_arr = {}\n    for i = 1, #even_values do\n        if even_values[i]\
    \ == smallest_value then\n            new_arr[#new_arr + 1] = even_values[i]\n\
    \        end\n    end\n    if #new_arr == 0 then\n        return nil\n    end\n\
    \    return new_arr\nend", "    local smallest_even_values = {}\n    local smallest_even_values_index\
    \ = {}\n    local smallest_even_values_index_map = {}\n    local smallest_even_values_index_map_map\
    \ = {}\n    for _, v in ipairs(arr) do\n        if smallest_even_values[v] ==\
    \ nil then\n            smallest_even_values[v] = v\n            smallest_even_values_index[v]\
    \ = nil\n            smallest_even_values_index_map[v] = nil\n            smallest_even_values_index_map_map[v]\
    \ = nil\n        elseif smallest_even_values[v] < v then\n            smallest_even_values[v]\
    \ = v\n            smallest_even_values_index[v] = nil\n            smallest_even_values_index_map[v]\
    \ = nil\n            smallest_even_values_index_map_map[v] = nil\n        end\n\
    \    end\n    for _, v in ipairs(arr) do\n        if smallest_even_values[v] ==\
    \ nil then\n            smallest_even_values[v] = v\n            smallest_even_values_index[v]\
    \ = nil\n            smallest_even_values_index_map[v] = nil\n            smallest_even_values_index_map_map[v]\
    \ = nil\n        elseif smallest_even_values[v] < v then\n            smallest_even_values_index[v]\
    \ = nil\n            smallest_even_values_index_map[v] = nil\n            smallest_even_values_index_map_map[v]\
    \ = nil\n        end\n    end\n    if #smallest_even_values == 0 then\n      \
    \  return {}\n    end\n    local smallest_even_value = smallest_even_values[smallest_even_values[1]]\n\
    \    local smallest_even_value_index = smallest_even_values_index[smallest_even_values[1]]\n\
    \    local smallest_even_value_index_map = smallest_even_values_index_map[smallest_even_values[1]]\n\
    \    local smallest_even_value_index_map_map = smallest_even_values_index_map_map[smallest_even_values[1]]\n\
    \    for _, v in ipairs(arr) do\n        if smallest_even_values[v] == nil then\n\
    \            smallest_even_values[v] = v\n            smallest_even_values_index[v]\
    \ = nil\n            smallest_even_values_index_map[v] = nil\n            smallest_even_values_index_map_map[v]\
    \ = nil\n        elseif smallest_even_values[v] < v then\n            smallest_even_values[v]\
    \ = v\n            smallest_even_values_index[v] = nil\n            smallest_even_values_index_map[v]\
    \ = nil\n            smallest_even_values_index_map_map[v", "    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \ -- Your code here\n  local smalest_value, smalest_index = 0, 1\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n   \
    \     smalest_value = arr[i]\n        smalest_index = i\n      elseif smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n  end\n\
    \  local result = {}\n  result[smalest_value] = smalest_index\n  return result\n\
    end", "  -- Your code here\n  local smalest_value = 0\n  local smalest_index =\
    \ 0\n  local smalest_node = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smalest_value == 0 then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      elseif smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  if smalest_value == 0\
    \ then\n    return {}\n  end\n  local smalest_node = {}\n  smalest_node[1] = smalest_value\n\
    \  smalest_node[2] = smalest_index\n  return smalest_node\nend", "    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif node.value < smalest_value then\n              \
    \  smalest_value = node.value\n                smalest_index = index\n       \
    \     end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "  local smallest_value\n\
    \  local smallest_index\n  for index, value in ipairs(arr) do\n    if smallest_value\
    \ == nil then\n      smallest_value = value\n      smallest_index = index\n  \
    \  else\n      if smallest_value < value then\n        smallest_value = value\n\
    \        smallest_index = index\n      end\n    end\n  end\n  if smallest_value\
    \ == nil then\n    return nil\n  end\n  local plucked_value = smallest_value\n\
    \  local plucked_index = smallest_index\n  for index, value in ipairs(arr) do\n\
    \    if value == plucked_value then\n      plucked_index = index\n    end\n  end\n\
    \  return { plucked_value, plucked_index }\nend", "    local smallest_value, smallest_index\
    \ = math.inf, -1\n    for _, node in ipairs(arr) do\n        if smallest_value\
    \ < node.value then\n            smallest_value, smallest_index = node.value,\
    \ node.index\n        end\n    end\n    if smallest_value == math.inf then\n \
    \       return nil\n    end\n    local result = {}\n    for _, node in ipairs(arr)\
    \ do\n        if node.value == smallest_value then\n            result[smallest_index]\
    \ = node\n        end\n    end\n    return result\nend", "  -- Your code here\n\
    \  local smallest_value = math.inf\n  local smallest_index = 0\n  for i = 1, #arr\
    \ do\n    if arr[i] < smallest_value then\n      smallest_value = arr[i]\n   \
    \   smallest_index = i\n    end\n  end\n  if smallest_value == math.inf then\n\
    \    return nil\n  end\n  local smalest_value = smallest_value\n  local smalest_index\
    \ = smallest_index\n  for i = 1, #arr do\n    if arr[i] == smalest_value then\n\
    \      smalest_index = i\n    end\n  end\n  return smalest_value, smalest_index\n\
    end", "  local smallest_value\n  local smallest_index\n  for i, v in ipairs(arr)\
    \ do\n    if smallest_value == nil then\n      smallest_value = v\n      smallest_index\
    \ = i\n    elseif smallest_value < v then\n      smallest_value = v\n      smallest_index\
    \ = i\n    end\n  end\n  if smallest_value == nil then\n    return nil\n  end\n\
    \  local plucked_value = smallest_value\n  local plucked_index = smallest_index\n\
    \  local i = 1\n  while i < #arr do\n    if arr[i] == plucked_value then\n   \
    \   plucked_index = i\n      break\n    end\n    i = i + 1\n  end\n  return {\
    \ plucked_value, plucked_index }\nend", "    local smalest_value = nil\n    local\
    \ smallest_index = nil\n    local smallest_even_value = nil\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_even_value == nil then\n            smallest_even_value\
    \ = node.value\n            smallest_index = node.index\n        elseif smallest_even_value\
    \ < node.value then\n            smallest_even_value = node.value\n          \
    \  smallest_index = node.index\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    local smalest_value_with_even_value\
    \ = smallest_even_value + smallest_index\n    local smalest_value_with_even_index_in_list\
    \ = smallest_even_value + smallest_index - 1\n    if smalest_value_with_even_value\
    \ == smalest_value_with_even_index_in_list then\n        return smalest_value_with_even_value\n\
    \    else\n        return smalest_value_with_even_index_in_list\n    end\nend",
  "  -- Your code here\n  local smallest_value = nil\n  local smallest_index = nil\n\
    \  local results = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n   \
    \   if smallest_value == nil or arr[i] < smallest_value then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      end\n    end\n  end\n  if smallest_value\
    \ ~= nil then\n    results[smallest_value] = smallest_index\n  end\n  return results\n\
    end", "    local smallest_value\n    local smallest_index\n    local index\n \
    \   for index, value in ipairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = value\n            smallest_index = index\n    \
    \    elseif smallest_value < value then\n            smallest_value = value\n\
    \            smallest_index = index\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    local smalest_even_value\
    \ = nil\n    local smalest_even_index = nil\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smalest_value == nil then\n\
    \                smalest_value = node.value\n                smalest_index = node.index\n\
    \            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n            end\n\
    \            if smalest_even_value == nil then\n                smalest_even_value\
    \ = node.value\n                smalest_even_index = node.index\n            elseif\
    \ smalest_even_value < node.value then\n                smalest_even_value = node.value\n\
    \                smalest_even_index = node.index\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    if\
    \ smalest_even_index == nil then\n        return smalest_value, smalest_index\n\
    \    else\n        return smalest_value, smalest_index, smalest_even_index, smalest_even_value\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).",
  "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the smallest\
    \ even value\n  local smallest_even_value = math.min(unpack(arr))\n  -- Find the\
    \ smallest index\n  local smallest_index = nil\n  for i, v in ipairs(arr) do\n\
    \    if v == smallest_even_value then\n      smallest_index = i\n    end\n  end\n\
    \  -- Return the smallest even value and the smallest index\n  return smallest_even_value,smallest_index\n\
    end", "    local smallest_value\n    local smallest_index\n    local smallest_even_value\n\
    \    local smallest_even_index\n    local result\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = node\n\
    \            smallest_index = node\n            smallest_even_value = node\n \
    \           smallest_even_index = node\n        elseif smallest_value == node\
    \ then\n            if smallest_even_value == nil then\n                smallest_even_value\
    \ = node\n                smallest_even_index = node\n            elseif smallest_even_value\
    \ == node then\n                if smallest_even_index < node then\n         \
    \           smallest_even_value = node\n                    smallest_even_index\
    \ = node\n                end\n            end\n        elseif smallest_even_value\
    \ == node then\n            if smallest_value < node then\n                smallest_value\
    \ = node\n                smallest_index = node\n            end\n        end\n\
    \    end\n    if smallest_even_value == nil then\n        result = {smallest_value,\
    \ smallest_index}\n    else\n        result = {smallest_even_value,\n        \
    \          smallest_even_index}\n    end\n    return result\nend", "  -- Your\
    \ code here\n  local smalest_value = 0\n  local smalest_index = 0\n  for i = 1,\
    \ #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value == 0 then\n   \
    \     smalest_value = arr[i]\n        smalest_index = i\n      elseif smalest_value\
    \ < arr[i] then\n        smalest_value = arr[i]\n        smalest_index = i\n \
    \     end\n    end\n  end\n  if smalest_value == 0 then\n    return nil\n  end\n\
    \  return smalest_value, smalest_index\nend", "  -- Your code here\n  local smalest_value\
    \ = 0\n  local smalest_index = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0\
    \ then\n      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  if smalest_value == 0\
    \ then\n    return nil\n  end\n  local smalest_value_and_index = smalest_value,\
    \ smalest_index\n  local smalest_value_index = {}\n  local smalest_value_index_index\
    \ = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value\
    \ < arr[i] then\n        smalest_value_and_index = smalest_value, smalest_index\n\
    \        smalest_value = arr[i]\n        smalest_index = i\n      elseif smalest_value\
    \ == arr[i] then\n        smalest_value_index[smalest_index] = smalest_value\n\
    \        smalest_value_index_index[smalest_index] = i\n      end\n    end\n  end\n\
    \  if #smalest_value_index > 0 then\n    local smalest_value_index_sorted = {}\n\
    \    for i = 1, #smalest_value_index do\n      table.insert(smalest_value_index_sorted,\
    \ smalest_value_index[i])\n    end\n    table.sort(smalest_value_index_sorted)\n\
    \    local smalest_value_index_sorted = {}\n    for i = 1, #smalest_value_index_index\
    \ do\n      table.insert(smalest_value_index_sorted, smalest_value_index_index[i])\n\
    \    end\n    table.sort(smalest_value_index_sorted)\n    return smalest_value_index_sorted\n\
    \  else\n    return smalest_value_and_index\n  end\nend", "    local min = math.min(unpack(arr))\n\
    \    local index = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n\
    \            index = i\n        end\n    end\n    if index == nil then\n     \
    \   return {}\n    end\n    return { min = min, index = index }\nend", "    local\
    \ smalest_value, smalest_index = nil, nil\n    local index = 1\n    for _, node\
    \ in ipairs(arr) do\n        if node.value % 2 == 0 then\n            if smalest_value\
    \ == nil then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif smalest_value < node.value then\n              \
    \  smalest_value = node.value\n                smalest_index = index\n       \
    \     end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local min_value = math.min(arr)\n    local min_index = -1\n    local\
    \ min_node = {}\n    for i = 1, #arr do\n        if arr[i] < min_value then\n\
    \            min_value = arr[i]\n            min_index = i\n        end\n    end\n\
    \    if min_value == 0 then\n        return nil\n    end\n    if min_value % 2\
    \ == 0 then\n        return min_node, min_index\n    end\n    local min_value_even\
    \ = min_value / 2\n    local min_value_odd = min_value % 2\n    local min_nodes\
    \ = {}\n    for i = 1, #arr do\n        if arr[i] < min_value_even then\n    \
    \        if arr[i] < min_value_odd then\n                min_nodes[1] = arr[i]\n\
    \            else\n                min_nodes[2] = arr[i]\n            end\n  \
    \      elseif arr[i] < min_value_odd then\n            min_nodes[3] = arr[i]\n\
    \        end\n    end\n    if #min_nodes == 0 then\n        return nil\n    end\n\
    \    if min_value_even > min_value_odd then\n        return min_nodes[1], min_index\n\
    \    end\n    return min_nodes[2], min_index\nend", "    local smallest_value\
    \ = nil\n    local smallest_index = nil\n    local index_of_smallest_value = nil\n\
    \    local index_of_smallest_index = nil\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    for i = 1, #arr do\n        if arr[i] == smallest_value then\n\
    \            if index_of_smallest_value == nil then\n                index_of_smallest_value\
    \ = i\n            else\n                if index_of_smallest_value < i then\n\
    \                    index_of_smallest_value = i\n                end\n      \
    \      end\n        end\n    end\n    if index_of_smallest_value == nil then\n\
    \        return nil\n    end\n    return {smallest_value, index_of_smallest_value}\n\
    end", "    local min_value = math.inf\n    local min_value_index = 0\n    for\
    \ i = 1, #arr do\n        if arr[i] < min_value then\n            min_value =\
    \ arr[i]\n            min_value_index = i\n        end\n    end\n    if min_value\
    \ == math.inf then\n        return nil\n    end\n    local smalest_value = min_value\n\
    \    local smalest_value_index = min_value_index\n    for i = 1, #arr do\n   \
    \     if arr[i] < smalest_value then\n            smalest_value = arr[i]\n   \
    \         smalest_value_index = i\n        end\n    end\n    if smalest_value\
    \ == math.inf then\n        return nil\n    end\n    return smalest_value, smalest_value_index\n\
    end", "    local min_value = math.inf\n    local min_value_index = 0\n    for\
    \ _, v in ipairs(arr) do\n        if v < min_value then\n            min_value\
    \ = v\n            min_value_index = v\n        end\n    end\n    if min_value\
    \ == math.inf then\n        return nil\n    end\n    local smalest_value = min_value\n\
    \    local smalest_value_index = min_value_index\n    for _, v in ipairs(arr)\
    \ do\n        if v == smalest_value then\n            smalest_value_index = v\n\
    \        end\n    end\n    if smalest_value_index == min_value_index then\n  \
    \      return nil\n    end\n    return smalest_value, smalest_value_index\nend",
  "    local smalest_value = math.inf\n    local smalest_index = 0\n    for _, node\
    \ in ipairs(arr) do\n        if node.value % 2 == 0 then\n            if node.value\
    \ < smalest_value then\n                smalest_value = node.value\n         \
    \       smalest_index = node.index\n            end\n        end\n    end\n  \
    \  if smalest_value == math.inf then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend", "  -- Your code here\n  local smalest_value\n\
    \  local smalest_index\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n  \
    \    if smalest_value == nil then\n        smalest_value = arr[i]\n        smalest_index\
    \ = i\n      elseif smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smalest_index = i\n      end\n    end\n  end\n  if smalest_value == nil\
    \ then\n    return nil\n  end\n  return smalest_value, smalest_index\nend", " \
    \   local smallest, smallest_index, smallest_even_value = nil, nil, nil\n    for\
    \ _, node in ipairs(arr) do\n        if smallest == nil then\n            smallest\
    \ = node\n            smallest_index = node\n            smallest_even_value =\
    \ node.value\n        elseif smallest_even_value < node.value then\n         \
    \   smallest = node\n            smallest_index = node\n            smallest_even_value\
    \ = node.value\n        elseif smallest_even_value == node.value then\n      \
    \      smallest_index = smallest_index + 1\n        end\n    end\n    if smallest\
    \ == nil then\n        return nil\n    end\n    local plucked_value = smallest_even_value\n\
    \    local plucked_index = smallest_index\n    while plucked_index > 0 do\n  \
    \      plucked_value = smallest_even_value + plucked_value\n        plucked_index\
    \ = plucked_index - 1\n    end\n    return { plucked_value, plucked_index }\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  else\n    -- Find\
    \ the smallest even value in the array\n    local smallest_even_value = math.min(arr)\n\
    \    -- Find the smallest index\n    local smallest_index = #arr\n    -- Find\
    \ the smallest even value index\n    for i = 1, #arr do\n      if arr[i] % 2 ==\
    \ 0 then\n        smallest_even_value = arr[i]\n        smallest_index = i\n \
    \     end\n    end\n    -- Return the smallest even value and its index\n    return\
    \ {smallest_even_value,smallest_index}\n  end\nend", "    local smallest_even_value\
    \ = nil\n    local smallest_even_index = nil\n    local smallest_value_index =\
    \ nil\n    local smallest_value = nil\n    local smallest_index = nil\n    for\
    \ _, node in ipairs(arr) do\n        if smallest_even_value == nil then\n    \
    \        smallest_even_value = node.value\n            smallest_even_index = node.index\n\
    \        elseif smallest_even_value < node.value then\n            smallest_even_value\
    \ = node.value\n            smallest_even_index = node.index\n        end\n  \
    \      if smallest_value == nil then\n            smallest_value = node.value\n\
    \            smallest_index = node.index\n        elseif smallest_value < node.value\
    \ then\n            smallest_value = node.value\n            smallest_index =\
    \ node.index\n        end\n    end\n    if smallest_even_value == nil then\n \
    \       return nil\n    end\n    if smallest_value == nil then\n        return\
    \ smallest_even_index\n    end\n    if smallest_even_index < smallest_index then\n\
    \        return smallest_even_index\n    end\n    return smallest_index\nend",
  "    local min_value = math.inf\n    local min_value_index = 0\n    for i, v in\
    \ ipairs(arr) do\n        if v < min_value then\n            min_value = v\n \
    \           min_value_index = i\n        end\n    end\n    if min_value == math.inf\
    \ then\n        return nil\n    end\n    local smalest_value = min_value\n   \
    \ local smalest_value_index = min_value_index\n    for i, v in ipairs(arr) do\n\
    \        if v == smalest_value then\n            smalest_value_index = i\n   \
    \     end\n    end\n    if smalest_value_index == 0 then\n        return nil\n\
    \    end\n    local smalest_value = arr[smalest_value_index]\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n    local smalest_value_index\
    \ = smalest_value_index - 1\n    local smalest_value_index = smalest_value_index\
    \ - 1\n    local smalest_value_index = smalest_value_index - 1\n", "  -- Base\
    \ case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\n\
    \    local smallest_index\n    local result\n    for index, value in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = value\n\
    \            smallest_index = index\n        elseif smallest_value < value then\n\
    \            smallest_value = value\n            smallest_index = index\n    \
    \    end\n    end\n    if smallest_value == nil then\n        return nil\n   \
    \ end\n    local smallest_value_index = nil\n    for index, value in ipairs(arr)\
    \ do\n        if value == smallest_value then\n            smallest_value_index\
    \ = index\n        end\n    end\n    if smallest_value_index == nil then\n   \
    \     return nil\n    end\n    return smallest_value, smallest_value_index\nend",
  "  local smalest_value\n  local smalest_index\n  for i, v in ipairs(arr) do\n  \
    \  if smalest_value == nil then\n      smalest_value = v\n      smalest_index\
    \ = i\n    elseif smalest_value < v then\n      smalest_value = v\n      smalest_index\
    \ = i\n    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n\
    \  local smalest_value_and_index = smalest_value, smalest_index\n  local smalest_value_index\n\
    \  for i, v in ipairs(arr) do\n    if smalest_value_index == nil then\n      if\
    \ smalest_value == v then\n        smalest_value_index = i\n      else\n     \
    \   smalest_value_index = i\n      end\n    elseif smalest_value_index < i then\n\
    \      if smalest_value == v then\n        smalest_value_index = i\n      else\n\
    \        smalest_value_index = i\n      end\n    end\n  end\n  return smalest_value_and_index\n\
    end", "    local smallest_value = 0\n    local smallest_index = 0\n    local index\
    \ = 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smallest_value < node.value then\n                smallest_value\
    \ = node.value\n                smallest_index = index\n            end\n    \
    \        index = index + 1\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend",
  "    local smalest_value = 0\n    local smalest_index = 0\n    for index, value\
    \ in pairs(arr) do\n        if value == 0 then\n            smalest_value = value\n\
    \            smalest_index = index\n        elseif value % 2 == 0 then\n     \
    \       if value < smalest_value then\n                smalest_value = value\n\
    \                smalest_index = index\n            end\n        end\n    end\n\
    \    if smalest_value == 0 then\n        return {}\n    end\n    local smalest_node\
    \ = {}\n    smalest_node.value = smalest_value\n    smalest_node.index = smalest_index\n\
    \    return smalest_node\nend", "    local smallest_value\n    local smallest_index\n\
    \    local smallest_even_value\n    local smallest_even_index\n    local index\n\
    \    local value\n    for index, value in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = value\n            smallest_index\
    \ = index\n            smallest_even_value = value\n            smallest_even_index\
    \ = index\n        elseif smallest_value == value then\n            if smallest_even_value\
    \ == nil then\n                smallest_even_value = value\n                smallest_even_index\
    \ = index\n            elseif smallest_even_value == value then\n            \
    \    if smallest_even_index < index then\n                    smallest_even_index\
    \ = index\n                end\n            end\n        end\n    end\n    if\
    \ smallest_even_value == nil then\n        return nil\n    end\n    return smallest_even_index,\
    \ smallest_even_value\nend", "  -- Your code here\n  local smalest_value = 0\n\
    \  local smalest_index = 0\n  local smalest_node = {}\n  for i = 1, #arr do\n\
    \    if arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n        smalest_value\
    \ = arr[i]\n        smalest_index = i\n      end\n    end\n  end\n  if smalest_value\
    \ == 0 then\n    return {}\n  end\n  local smalest_node = {}\n  for i = 1, #arr\
    \ do\n    if arr[i] % 2 == 0 then\n      if smalest_value < arr[i] then\n    \
    \    smalest_value = arr[i]\n        smalest_index = i\n      end\n    end\n \
    \ end\n  return smalest_node\nend", "    local smallest_even_value = nil\n   \
    \ local smallest_even_index = nil\n    local smallest_value_index = nil\n    local\
    \ smallest_value = nil\n    local smallest_index = nil\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_even_value == nil then\n            smallest_even_value\
    \ = node.value\n            smallest_even_index = node.index\n        elseif smallest_even_value\
    \ < node.value then\n            smallest_even_value = node.value\n          \
    \  smallest_even_index = node.index\n        end\n        if smallest_value ==\
    \ nil then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        elseif smallest_value < node.value then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        end\n    end\n\
    \    if smallest_even_value == nil then\n        return nil\n    end\n    local\
    \ smallest_even_index_value = arr[smallest_even_index].value\n    if smallest_even_index_value\
    \ == smallest_value then\n        return smallest_even_index\n    end\n    if\
    \ smallest_even_index_value < smallest_value then\n        return smallest_even_index\n\
    \    end\n    return smallest_even_index\nend", "    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for _, node in ipairs(arr) do\n \
    \       if smallest_value == nil then\n            smallest_value = node.value\n\
    \            smallest_value_index = node.index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_value_index\
    \ = node.index\n        end\n    end\n    if smallest_value == nil then\n    \
    \    return nil\n    end\n    local smallest_value_index = smallest_value_index\
    \ or 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index].value\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index].value\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_", "    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ < smallest_value then\n            smallest_value = arr[i]\n            smallest_index\
    \ = i\n        end\n    end\n    if smallest_value == 0 then\n        return nil\n\
    \    end\n    local smallest_value_with_even_value = smallest_value % 2\n    local\
    \ smallest_value_with_even_index = smallest_index\n    for i = 1, #arr do\n  \
    \      if arr[i] == smallest_value_with_even_value then\n            smallest_value_with_even_index\
    \ = i\n        end\n    end\n    if smallest_value_with_even_index == #arr then\n\
    \        return nil\n    end\n    return smallest_value_with_even_index, smallest_value_with_even_value\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local\
    \ smallest_value = 0\n    local smallest_index = 0\n    local plucked_node = {}\n\
    \    for _, node in ipairs(arr) do\n        if smallest_value == 0 then\n    \
    \        smallest_value = node\n            smallest_index = node\n        elseif\
    \ smallest_value < node then\n            smallest_value = node\n            smallest_index\
    \ = node\n        end\n    end\n    if smallest_value == 0 then\n        return\
    \ nil\n    end\n    plucked_node.value = smallest_value\n    plucked_node.index\
    \ = smallest_index\n    return plucked_node\nend", "  local smallest_value_index\n\
    \  local smallest_value\n  local smallest_value_index\n  local index\n  local\
    \ value\n  local result\n  for index, value in ipairs(arr) do\n    if value %\
    \ 2 == 0 then\n      if smallest_value == nil then\n        smallest_value = value\n\
    \        smallest_value_index = index\n      elseif smallest_value < value then\n\
    \        smallest_value = value\n        smallest_value_index = index\n      end\n\
    \    end\n  end\n  if smallest_value == nil then\n    return nil\n  end\n  result\
    \ = {smallest_value, smallest_value_index}\n  return result\nend", "    local\
    \ smalest_value\n    local smalest_index\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            if smalest_value == nil then\n\
    \                smalest_value = node.value\n                smalest_index = node.index\n\
    \            elseif node.value < smalest_value then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n            end\n\
    \        end\n    end\n    if smalest_value == nil then\n        return nil\n\
    \    end\n    local smalest_value_and_index = smalest_value, smalest_index\n \
    \   local smalest_value_index\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if node.value == smalest_value then\n           \
    \     smalest_value_index = node.index\n            else\n                if node.index\
    \ < smalest_value_index then\n                    smalest_value_and_index = smalest_value,\
    \ smalest_index\n                    smalest_value = node.value\n            \
    \        smalest_index = node.index\n                end\n            end\n  \
    \      end\n    end\n    if smalest_value_index == nil then\n        return nil\n\
    \    end\n    return smalest_value_and_index\nend", "    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    local results = {}\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_value < node.value then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        end\n    end\n\
    \    if smallest_value == 0 then\n        return nil\n    end\n    for _, node\
    \ in ipairs(arr) do\n        if node.value == smallest_value then\n          \
    \  results[smallest_index] = node.value\n        end\n    end\n    return results\n\
    end", "    local smallest_value, smallest_index = nil, nil\n    for _, node in\
    \ ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = node.value\n            smallest_index = node.index\n        elseif smallest_value\
    \ < node.value then\n            smallest_value = node.value\n            smallest_index\
    \ = node.index\n        end\n    end\n    if smallest_value == nil then\n    \
    \    return nil\n    end\n    local plucked_value = smallest_value\n    local\
    \ plucked_index = smallest_index\n    for _, node in ipairs(arr) do\n        if\
    \ node.value == plucked_value then\n            if node.index <= plucked_index\
    \ then\n                plucked_value = node.value\n                plucked_index\
    \ = node.index\n            end\n        end\n    end\n    return { plucked_value,\
    \ plucked_index }\nend", "    local smalest_value, smalest_index = nil, nil\n\
    \    local smalest_value_even = nil\n    local smalest_index_even = nil\n    local\
    \ smalest_value_even_index = nil\n    for _, node in ipairs(arr) do\n        if\
    \ node.value % 2 == 0 then\n            if smalest_value_even ~= nil then\n  \
    \              if smalest_value_even < node.value then\n                    smalest_value_even\
    \ = node.value\n                    smalest_index_even = smalest_index\n     \
    \           end\n            else\n                smalest_value_even = node.value\n\
    \                smalest_index_even = smalest_index\n            end\n       \
    \ else\n            if smalest_value_even ~= nil then\n                if smalest_value_even\
    \ < node.value then\n                    smalest_value_even = node.value\n   \
    \                 smalest_index_even = smalest_index\n                end\n  \
    \          else\n                smalest_value_even = node.value\n           \
    \     smalest_index_even = smalest_index\n            end\n        end\n    end\n\
    \    if smalest_value_even ~= nil then\n        smalest_value = smalest_value_even\n\
    \        smalest_index = smalest_index_even\n    end\n    if smalest_value ==\
    \ nil then\n        return nil\n    end\n    local smalest_value_index = nil\n\
    \    for _, node in ipairs(arr) do\n        if node.value == smalest_value then\n\
    \            if smalest_value_index ~= nil then\n                if smalest_value_index\
    \ < node.index then\n                    smalest_value_index = node.index\n  \
    \              end\n            else\n                smalest_value_index = node.index\n\
    \            end\n        end\n    end\n    if smalest_value_index == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_value_index\n\
    end", "    local smallest_value = 0\n    local smallest_index = 0\n    local index\
    \ = 1\n    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n\
    \            if smallest_value < node.value then\n                smallest_value\
    \ = node.value\n                smallest_index = index\n            end\n    \
    \        index = index + 1\n        end\n    end\n    if smallest_value == 0 then\n\
    \        return nil\n    end\n    return smallest_value, smallest_index\nend",
  "    local smallest_value\n    local smallest_index\n    for _, v in ipairs(arr)\
    \ do\n        if smallest_value == nil then\n            smallest_value = v\n\
    \            smallest_index = v\n        elseif smallest_value < v then\n    \
    \        smallest_value = v\n            smallest_index = v\n        end\n   \
    \ end\n    if smallest_value == nil then\n        return nil\n    end\n    local\
    \ smalest_value = smallest_value\n    local smalest_index = smallest_index\n \
    \   for _, v in ipairs(arr) do\n        if v == smalest_value then\n         \
    \   smalest_index = v\n        end\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smallest, smallest_index = nil, nil\n    local index = 1\n  \
    \  for _, v in ipairs(arr) do\n        if smallest == nil then\n            smallest\
    \ = v\n            smallest_index = index\n        elseif v < smallest then\n\
    \            smallest = v\n            smallest_index = index\n        end\n \
    \       index = index + 1\n    end\n    if smallest == nil then\n        return\
    \ nil\n    end\n    local smallest_value = smallest\n    local smallest_value_index\
    \ = smallest_index\n    for _, v in ipairs(arr) do\n        if v == smallest then\n\
    \            smallest_value = v\n            smallest_value_index = index\n  \
    \      end\n        index = index + 1\n    end\n    return smallest_value, smallest_value_index\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the\
    \ smallest even value in the array\n  local smallest_even_value = math.min(unpack(arr))\n\
    \  -- Find the smallest index\n  local smallest_index = nil\n  for i, v in ipairs(arr)\
    \ do\n    if v == smallest_even_value then\n      smallest_index = i\n    end\n\
    \  end\n  -- Return the smallest even value and its index\n  return smallest_even_value,smallest_index\n\
    end", "    local smallest_value = nil\n    local smallest_index = nil\n    local\
    \ i = 0\n    while i < #arr do\n        if arr[i] % 2 == 0 then\n            if\
    \ smallest_value == nil or arr[i] < smallest_value then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \        i = i + 1\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local new_arr = {smallest_value, smallest_index}\n    return\
    \ new_arr\nend", "    local smalest_value = 0\n    local smalest_index = 0\n \
    \   for i = 1, #arr do\n        if arr[i] > 0 then\n            if smalest_value\
    \ == 0 then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            elseif smalest_value < arr[i] then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node.value = smalest_value\n    smalest_node.index\
    \ = smalest_index\n    return smalest_node\nend", "    local smalest_value, smalest_index\
    \ = nil, nil\n    local even_values = {}\n    for _, node in ipairs(arr) do\n\
    \        if node.value % 2 == 0 then\n            even_values[node.value] = true\n\
    \        end\n    end\n    for _, node in ipairs(arr) do\n        if even_values[node.value]\
    \ then\n            if smalest_value == nil then\n                smalest_value\
    \ = node.value\n                smalest_index = node.index\n            elseif\
    \ smalest_value < node.value then\n                smalest_value = node.value\n\
    \                smalest_index = node.index\n            end\n        end\n  \
    \  end\n    if smalest_value == nil then\n        return nil\n    end\n    local\
    \ plucked_value = smalest_value\n    local plucked_index = smalest_index\n   \
    \ for _, node in ipairs(arr) do\n        if node.value == plucked_value then\n\
    \            if node.index <= plucked_index then\n                plucked_index\
    \ = node.index\n            end\n        end\n    end\n    return { plucked_value,\
    \ plucked_index }\nend", "    local smalest_value, smalest_index = nil, nil\n\
    \    local smalest_even_value = nil\n    for _, v in ipairs(arr) do\n        if\
    \ smalest_value == nil then\n            smalest_value = v\n            smalest_index\
    \ = v\n            smalest_even_value = v\n        elseif smalest_even_value:even()\
    \ <= v:even() then\n            smalest_value = v\n            smalest_index =\
    \ v\n            smalest_even_value = v\n        else\n            smalest_value\
    \ = smalest_value\n            smalest_index = smalest_index\n            smalest_even_value\
    \ = smalest_even_value\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \   local min_value = math.inf\n    local min_idx = 0\n    for i, v in ipairs(arr)\
    \ do\n        if v < min_value then\n            min_value = v\n            min_idx\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    local smalest_value = min_value\n    local smalest_idx = min_idx\n\
    \    for i, v in ipairs(arr) do\n        if v == smalest_value then\n        \
    \    smalest_idx = i\n        end\n    end\n    return { smalest_value, smalest_idx\
    \ }\nend", "    local smallest_value_index = nil\n    local smallest_value = nil\n\
    \    for _, node in ipairs(arr) do\n        if smallest_value == nil then\n  \
    \          smallest_value = node.value\n            smallest_value_index = node.index\n\
    \        elseif smallest_value < node.value then\n            smallest_value =\
    \ node.value\n            smallest_value_index = node.index\n        end\n   \
    \ end\n    if smallest_value == nil then\n        return nil\n    end\n    local\
    \ smallest_value_index\n    local smallest_value\n    local result\n    for _,\
    \ node in ipairs(arr) do\n        if smallest_value == node.value then\n     \
    \       if smallest_value_index == nil then\n                smallest_value_index\
    \ = node.index\n            else\n                if smallest_value_index < node.index\
    \ then\n                    smallest_value_index = node.index\n              \
    \  end\n            end\n        end\n    end\n    if smallest_value_index ==\
    \ nil then\n        return nil\n    end\n    result = {smallest_value, smallest_value_index}\n\
    \    return result\nend", "    local min = math.min(unpack(arr))\n    local index\
    \ = nil\n    for i, v in ipairs(arr) do\n        if v == min then\n          \
    \  index = i\n        end\n    end\n    return index, min\nend", "    local smalest_value,\
    \ smalest_index = nil, nil\n    local index = 1\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = index\n            elseif node.value < smalest_value then\n              \
    \  smalest_value = node.value\n                smalest_index = index\n       \
    \     end\n            index = index + 1\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    local index = 1\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smalest_value == nil or node.value < smalest_value then\n        \
    \        smalest_value, smalest_index = node.value, index\n            end\n \
    \           index = index + 1\n        end\n    end\n    if smalest_value == nil\
    \ then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            if smalest_value == nil or\
    \ smalest_value < arr[i] then\n                smalest_value, smalest_index =\
    \ arr[i], i\n            end\n        end\n    end\n    if smalest_value == nil\
    \ then\n        return nil\n    end\n    local index = #arr\n    for i = 1, #arr\
    \ do\n        if arr[i] % 2 == 0 then\n            index = i\n        end\n  \
    \  end\n    return smalest_value, index\nend", "    local smallest_value = math.inf\n\
    \    local smallest_index = 0\n    for index, value in ipairs(arr) do\n      \
    \  if smallest_value < value then\n            smallest_value = value\n      \
    \      smallest_index = index\n        end\n    end\n    if smallest_value ==\
    \ math.inf then\n        return nil\n    end\n    return smallest_value, smallest_index\n\
    end", "    local smallest_value = nil\n    local smallest_index = nil\n    for\
    \ _, v in ipairs(arr) do\n        if smallest_value == nil then\n            smallest_value\
    \ = v\n            smallest_index = v\n        elseif smallest_value < v then\n\
    \            smallest_value = v\n            smallest_index = v\n        end\n\
    \    end\n    if smallest_value == nil then\n        return nil\n    end\n   \
    \ local smallest_value_even = smallest_value % 2 == 0\n    local smallest_index_even\
    \ = smallest_index\n    if smallest_value_even then\n        smallest_index_even\
    \ = smallest_index / 2\n    end\n    if smallest_index_even > 1 then\n       \
    \ smallest_index_even = smallest_index_even - 1\n    end\n    return smallest_value,\
    \ smallest_index_even\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return\
    \ the level order traversal of its nodes' values. (ie, from left to right, level\
    \ by level).", "  local min_value = math.inf\n  local min_idx = 0\n  for idx,\
    \ value in pairs(arr) do\n    if value % 2 == 0 then\n      if value < min_value\
    \ then\n        min_value = value\n        min_idx = idx\n      end\n    end\n\
    \  end\n  if min_value == math.inf then\n    return nil\n  end\n  return arr[min_idx],\
    \ min_idx\nend", "    local smalest_value, smalest_index = nil, nil\n    for _,\
    \ v in ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value,\
    \ smalest_index = v, 1\n        elseif smalest_index == nil then\n           \
    \ smalest_index, smalest_value = v, 1\n        elseif smalest_value < v then\n\
    \            smalest_value, smalest_index = v, smalest_index\n        end\n  \
    \  end\n    if smalest_value == nil then\n        return nil\n    end\n    local\
    \ smalest_value_index = nil\n    for _, v in ipairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_value_index = v\n        end\n    end\n    if smalest_value_index\
    \ == nil then\n        return nil\n    end\n    return smalest_value, smalest_value_index\n\
    end", "    local smallest_value_index = nil\n    local smallest_value = nil\n\
    \    for index, value in pairs(arr) do\n        if smallest_value == nil then\n\
    \            smallest_value = value\n            smallest_value_index = index\n\
    \        elseif smallest_value < value then\n            smallest_value = value\n\
    \            smallest_value_index = index\n        end\n    end\n    if smallest_value\
    \ == nil then\n        return nil\n    end\n    local smallest_value_index = smallest_value_index\
    \ or 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value_index]\n    local smallest_value_index\
    \ = smallest_value_index - 1\n    local smallest_value = smallest_value or arr[smallest_value_index]\n\
    \    local smallest_value_index = smallest_value_index - 1\n    local smallest_value\
    \ = smallest_value or arr[smallest_value", "    local smallest_value\n    local\
    \ smallest_index\n    local result\n    for i = 1, #arr do\n        if arr[i]\
    \ % 2 == 0 then\n            if smallest_value == nil then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            elseif smallest_value\
    \ < arr[i] then\n                smallest_value = arr[i]\n                smallest_index\
    \ = i\n            end\n        end\n    end\n    if smallest_value == nil then\n\
    \        return nil\n    end\n    if smallest_index == nil then\n        return\
    \ smallest_value\n    end\n    if smallest_value < arr[smallest_index] then\n\
    \        return smallest_value\n    end\n    return smallest_index, arr[smallest_index]\n\
    end", "    local min_value = math.inf\n    local min_value_index = 0\n    local\
    \ results = {}\n    for i, v in ipairs(arr) do\n        if v < min_value then\n\
    \            min_value = v\n            min_value_index = i\n        end\n   \
    \ end\n    if min_value == math.inf then\n        return nil\n    end\n    table.insert(results,\
    \ min_value, min_value_index)\n    return results\nend", "  local smallest_value_index\
    \ = nil\n  local smallest_value = nil\n  for _, node in ipairs(arr) do\n    if\
    \ smallest_value == nil then\n      smallest_value = node.value\n      smallest_value_index\
    \ = node.index\n    elseif smallest_value < node.value then\n      smallest_value\
    \ = node.value\n      smallest_value_index = node.index\n    end\n  end\n  if\
    \ smallest_value == nil then\n    return nil\n  end\n  local plucked_value = arr[smallest_value_index].value\n\
    \  arr[smallest_value_index].value = nil\n  arr[smallest_value_index].index =\
    \ nil\n  return plucked_value\nend", "    local smalest_value, smalest_index =\
    \ nil, nil\n    local smalest_value_even = nil\n    for _, v in ipairs(arr) do\n\
    \        if smalest_value == nil then\n            smalest_value = v\n       \
    \     smalest_index = nil\n        elseif smalest_value_even == nil then\n   \
    \         smalest_value_even = v % 2\n            if smalest_value_even < v then\n\
    \                smalest_value = v\n                smalest_index = nil\n    \
    \        else\n                smalest_index = smalest_index + 1\n           \
    \ end\n        elseif smalest_value_even < v % 2 then\n            smalest_value\
    \ = v\n            smalest_index = nil\n        else\n            smalest_index\
    \ = smalest_index + 1\n        end\n    end\n    if smalest_value_even == nil\
    \ then\n        return nil\n    end\n    return smalest_value, smalest_index\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value, smalest_index = node.value, 1\n       \
    \     elseif smalest_value < node.value then\n                smalest_value, smalest_index\
    \ = node.value, 1\n            else\n                smalest_index = smalest_index\
    \ + 1\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    local smalest_node = {}\n    smalest_node.value\
    \ = smalest_value\n    smalest_node.index = smalest_index\n    return smalest_node\n\
    end", "    local smallest, smallest_index, smallest_even_value = nil, nil, nil\n\
    \    for _, node in ipairs(arr) do\n        if smallest_even_value == nil then\n\
    \            if node.value % 2 == 0 then\n                smallest_even_value\
    \ = node.value\n                smallest_index = node.index\n            else\n\
    \                smallest_even_value = node.value + 1\n                smallest_index\
    \ = node.index\n            end\n        else\n            if smallest_even_value\
    \ < node.value then\n                smallest_even_value = node.value\n      \
    \          smallest_index = node.index\n            end\n        end\n    end\n\
    \    if smallest_even_value == nil then\n        return nil\n    end\n    local\
    \ result = {smallest_even_value}\n    if smallest_index == nil then\n        return\
    \ result\n    end\n    local index = smallest_index\n    while index > 1 do\n\
    \        local next_index = index - 1\n        if arr[index].value == arr[index\
    \ - 1].value then\n            index = next_index\n        else\n            break\n\
    \        end\n    end\n    table.insert(result, index)\n    return result\nend",
  "    local smalest_value = 0\n    local smallest_index = 0\n    for _, v in ipairs(arr)\
    \ do\n        if v ~= 0 then\n            if smalest_value < v then\n        \
    \        smalest_value = v\n                smallest_index = v\n            end\n\
    \        end\n    end\n    if smalest_value == 0 then\n        return nil\n  \
    \  end\n    local smalest_value_index = 0\n    for _, v in ipairs(arr) do\n  \
    \      if v ~= 0 then\n            if smalest_value == v then\n              \
    \  smalest_value_index = smallest_index\n            end\n        end\n    end\n\
    \    if smalest_value_index == 0 then\n        return nil\n    end\n    return\
    \ {smalest_value, smalest_value_index}\nend", "    local smalest_value, smalest_index\
    \ = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n      \
    \      if smalest_value == nil then\n                smalest_value = arr[i]\n\
    \                smalest_index = i\n            elseif smalest_value < arr[i]\
    \ then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \ -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\n\
    \    local smallest_index\n    for _, v in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = v\n            smallest_index = v\n\
    \        elseif smallest_value < v then\n            smallest_value = v\n    \
    \        smallest_index = v\n        end\n    end\n    if smallest_value == nil\
    \ then\n        return nil\n    end\n    local smallest_value_index = nil\n  \
    \  for _, v in ipairs(arr) do\n        if v == smallest_value then\n         \
    \   if smallest_value_index == nil then\n                smallest_value_index\
    \ = v\n            else\n                if smallest_value_index < v then\n  \
    \                  smallest_value_index = v\n                end\n           \
    \ end\n        end\n    end\n    return smallest_value, smallest_value_index\n\
    end", "    local smalest_value = math.inf\n    local smalest_index = 0\n    for\
    \ index, value in pairs(arr) do\n        if value == 0 then\n            smalest_index\
    \ = index\n            smalest_value = value\n        elseif value == smalest_value\
    \ then\n            smalest_index = index\n            smalest_value = value\n\
    \        end\n    end\n    if smalest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_value_and_index = smalest_value, smalest_index\n \
    \   local smalest_value_index = nil\n    for index, value in pairs(arr) do\n \
    \       if value == smalest_value then\n            smalest_value_index = index\n\
    \        end\n    end\n    if smalest_value_index then\n        smalest_value_and_index\
    \ = smalest_value, smalest_value_index\n    end\n    return smalest_value_and_index\n\
    end", "    local smalest_value, smalest_index = nil, nil\n    for _, node in ipairs(arr)\
    \ do\n        if node.value % 2 == 0 then\n            if smalest_value == nil\
    \ then\n                smalest_value = node.value\n                smalest_index\
    \ = node.index\n            elseif smalest_value < node.value then\n         \
    \       smalest_value = node.value\n                smalest_index = node.index\n\
    \            end\n        end\n    end\n    if smalest_value == nil then\n   \
    \     return nil\n    end\n    local plucked_value = smalest_value\n    local\
    \ plucked_index = smalest_index\n    for _, node in ipairs(arr) do\n        if\
    \ node.value % 2 == 0 then\n            if node.value == smalest_value then\n\
    \                plucked_index = node.index\n            end\n        end\n  \
    \  end\n    if plucked_index == nil then\n        plucked_index = smalest_index\n\
    \    end\n    return { plucked_value, plucked_index }\nend", "    local smallest_even_value\
    \ = nil\n    local smallest_index = nil\n    for _, node in ipairs(arr) do\n \
    \       if smallest_even_value == nil then\n            smallest_even_value =\
    \ node.value\n            smallest_index = node.index\n        elseif smallest_even_value\
    \ < node.value then\n            smallest_even_value = node.value\n          \
    \  smallest_index = node.index\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    local plucked_value = smallest_even_value\n\
    \    local plucked_index = smallest_index\n    for _, node in ipairs(arr) do\n\
    \        if node.value == plucked_value then\n            plucked_index = node.index\n\
    \        end\n    end\n    if plucked_index == nil then\n        return nil\n\
    \    end\n    return { plucked_value, plucked_index }\nend\n</cell>\n<text>\n\
    Given an array representing a branch of a tree that has non-negative integer nodes,\
    \ your task is to pluck one of the nodes and return it.\nThe plucked node should\
    \ be the node with the smallest even value.\nIf multiple nodes with the same smallest\
    \ even value are found return the node that has smallest index.\nThe plucked node\
    \ should be returned in a list, [ smalest_value, its index ],\nIf there are no\
    \ even values or the given array is empty, return [].\nExample 1:\n>>> pluck({4,\
    \ 2, 3})\n{2, 1}\nExplanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\nExample 2:\n>>> pluck({1, 2, 3})\n{2, 1}\nExplanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\nExample 3:\n>>> pluck({})\n{}\nExample\
    \ 4:\n>>> pluck({5, 0, 3, 0, 4, 2})\n{0, 1}\nExplanation: 0 is the smallest value,\
    \ but  there are two zeros,\nso we will choose the first zero, which has the smallest\
    \ index.\nConstraints:\n1 <= nodes.length <= 10000\n0 <= node.value", "  -- Base\
    \ case\n  if #arr == 0 then\n    return {}\n  end", "    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for index, value in pairs(arr) do\n \
    \       if value == 0 then\n            smallest_value = smallest_value + 1\n\
    \        elseif smallest_value == 0 then\n            smallest_value = value\n\
    \            smallest_index = index\n        elseif smallest_value < value then\n\
    \            smallest_value = value\n            smallest_index = index\n    \
    \    end\n    end\n    if smallest_value == 0 then\n        return nil\n    end\n\
    \    return smallest_value, smallest_index\nend", "  -- Your code here\n  local\
    \ smallest_value = nil\n  local smallest_index = nil\n  local i = 0\n  local j\
    \ = 0\n  local results = {}\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n\
    \      if smallest_value == nil or arr[i] < smallest_value then\n        smallest_value\
    \ = arr[i]\n        smallest_index = i\n      end\n    else\n      if smallest_value\
    \ == nil or smallest_index == nil then\n        smallest_value = arr[i]\n    \
    \    smallest_index = i\n      else\n        if arr[i] < smallest_value then\n\
    \          smallest_value = arr[i]\n          smallest_index = i\n        end\n\
    \      end\n    end\n  end\n  if smallest_value == nil then\n    return nil\n\
    \  end\n  results[smallest_value] = smallest_index\n  return results\nend", " \
    \ -- Base case\n  if #arr == 0 then\n    return {}\n  end", "    local smalest_value,\
    \ smalest_index, smallest_even_index\n    local smallest_even_value = nil\n  \
    \  local smallest_even_index = 0\n    for _, node in ipairs(arr) do\n        if\
    \ smallest_even_value == nil then\n            smallest_even_value = node.value\n\
    \            smallest_even_index = node.index\n        elseif smallest_even_value\
    \ < node.value then\n            smallest_even_value = node.value\n          \
    \  smallest_even_index = node.index\n        end\n    end\n    if smallest_even_value\
    \ == nil then\n        return nil\n    end\n    local smalest_value_index = nil\n\
    \    for _, node in ipairs(arr) do\n        if smallest_even_value == node.value\
    \ then\n            smalest_value_index = node.index\n        end\n    end\n \
    \   if smalest_value_index == nil then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_value_index\nend", "  -- Base case\n  if #arr == 0 then\n\
    \    return {}\n  end\n  -- Find the smallest even value\n  local smalest_value\
    \ = arr[1]\n  local smallest_index = 1\n  for i = 2, #arr do\n    if arr[i] %\
    \ 2 == 0 then\n      if smalest_value < arr[i] then\n        smalest_value = arr[i]\n\
    \        smallest_index = i\n      end\n    end\n  end\n  -- Return the smallest\
    \ even value\n  return { smalest_value, smallest_index }\nend", "  -- Base case\n\
    \  if #arr == 0 then\n    return {}\n  else\n    -- Find the smallest even value\n\
    \    local smallest_even_value = math.min(unpack(arr))\n    -- Find the smallest\
    \ index\n    local smallest_index = nil\n    for i = 1, #arr do\n      if arr[i]\
    \ % 2 == 0 then\n        if smallest_index ~= nil then\n          -- Found a node\
    \ with the same smallest even value\n          -- But smaller index\n        \
    \  if arr[i] < smallest_even then\n            smallest_even = arr[i]\n      \
    \      smallest_index = i\n          end\n        else\n          -- Found a node\
    \ with the same smallest even value\n          -- But larger index\n         \
    \ smallest_even = arr[i]\n          smallest_index = i\n        end\n      end\n\
    \    end\n    -- Return the smallest even value and its index\n    return { smallest_even,\
    \ smallest_index }\n  end\nend", "  -- Base case\n  if #arr == 0 then\n    return\
    \ {}\n  end", "    local smalest_value = 0\n    local smallest_index = 0\n   \
    \ for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n       \
    \     if node.value < smalest_value then\n                smalest_value = node.value\n\
    \                smallest_index = smallest_index\n            end\n        end\n\
    \    end\n    if smalest_value == 0 then\n        return nil\n    end\n    local\
    \ smalest_node = {}\n    smalest_node.value = smalest_value\n    smalest_node.index\
    \ = smallest_index\n    return smalest_node\nend", "    local min_value = math.inf\n\
    \    local min_value_index = 0\n    local results = {}\n    for i, v in ipairs(arr)\
    \ do\n        if v < min_value then\n            min_value = v\n            min_value_index\
    \ = i\n        end\n    end\n    if min_value == math.inf then\n        return\
    \ nil\n    end\n    table.insert(results, min_value, min_value_index)\n    return\
    \ results\nend", "  local smallest_value_index = 0\n  local smallest_value\n \
    \ local smallest_value_index\n  for _, v in ipairs(arr) do\n    if v ~= 0 then\n\
    \      if smallest_value == nil then\n        smallest_value = v\n        smallest_value_index\
    \ = v\n      elseif smallest_value < v then\n        smallest_value = v\n    \
    \    smallest_value_index = v\n      end\n    end\n  end\n  if smallest_value\
    \ == nil then\n    return nil\n  end\n  local smallest_value_index = smallest_value_index\
    \ + 1\n  return smallest_value, smallest_value_index\nend", "    local smalest_value,\
    \ smalest_index = nil, nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0\
    \ then\n            if smalest_value == nil then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            elseif smalest_value\
    \ < arr[i] then\n                smalest_value = arr[i]\n                smalest_index\
    \ = i\n            end\n        end\n    end\n    if smalest_value == nil then\n\
    \        return nil\n    end\n    return smalest_value, smalest_index\nend", " \
    \   local smalest_value, smalest_index, smalest_node\n    local smalest_value_node\n\
    \    local smalest_index_node\n    for _, node in ipairs(arr) do\n        if node.value\
    \ % 2 == 0 then\n            if smalest_value == nil then\n                smalest_value\
    \ = node.value\n                smalest_value_node = node\n                smalest_index_node\
    \ = nil\n            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_value_node = node\n                smalest_index_node\
    \ = nil\n            else\n                smalest_value_node = node\n       \
    \         smalest_index_node = nil\n            end\n        else\n          \
    \  if smalest_value == nil then\n                smalest_value = node.value\n\
    \                smalest_value_node = node\n                smalest_index_node\
    \ = nil\n            elseif smalest_value < node.value then\n                smalest_value\
    \ = node.value\n                smalest_value_node = node\n                smalest_index_node\
    \ = nil\n            elseif smalest_value == node.value then\n               \
    \ smalest_index_node = node\n            end\n        end\n    end\n    if smalest_value\
    \ == nil then\n        return nil\n    end\n    if smalest_index_node == nil then\n\
    \        return smalest_value_node\n    end\n    if smalest_value == smalest_value_node.value\
    \ then\n        return smalest_value_node, smalest_index_node\n    end\n    return\
    \ smalest_value_node, smalest_index_node\nend", "    local smallest_value = nil\n\
    \    local smallest_index = nil\n    local smallest_even_value = nil\n    local\
    \ smallest_even_index = nil\n    for index, value in ipairs(arr) do\n        if\
    \ smallest_value == nil then\n            smallest_value = value\n           \
    \ smallest_index = index\n            smallest_even_value = value % 2\n      \
    \      smallest_even_index = index\n        elseif smallest_value == value then\n\
    \            smallest_even_index = index\n        end\n    end\n    if smallest_even_index\
    \ == nil then\n        return nil\n    end\n    return {smallest_value, smallest_even_index}\n\
    end", "    local smallest_value_index = 0\n    local smallest_value\n    local\
    \ smallest_value_index\n    local index\n    for index, value in ipairs(arr) do\n\
    \        if value == 0 then\n            smallest_value = smallest_value_index\n\
    \            smallest_value_index = index\n        else\n            if smallest_value\
    \ == nil then\n                smallest_value = value\n                smallest_value_index\
    \ = index\n            elseif smallest_value < value then\n                smallest_value\
    \ = value\n                smallest_value_index = index\n            end\n   \
    \     end\n    end\n    if smallest_value == nil then\n        return nil\n  \
    \  end\n    local plucked_value = arr[smallest_value_index]\n    arr[smallest_value_index]\
    \ = nil\n    return { smallest_value, plucked_value }\nend", "    local smalest_value,\
    \ smalest_index = nil, nil\n    local smalest_even_value = nil\n    local smalest_even_index\
    \ = nil\n    local smalest_index = nil\n    local smalest_value = nil\n    for\
    \ _, v in ipairs(arr) do\n        if smalest_value == nil then\n            smalest_value\
    \ = v\n            smalest_index = v\n            smalest_even_value = v\n   \
    \         smalest_even_index = v\n        elseif smalest_value == v then\n   \
    \         if smalest_even_index == nil then\n                smalest_even_index\
    \ = v\n                smalest_even_value = v\n            elseif smalest_even_index\
    \ < v then\n                smalest_even_index = v\n                smalest_even_value\
    \ = v\n            end\n        elseif smalest_value < v then\n            smalest_value\
    \ = v\n            smalest_index = v\n            smalest_even_value = v\n   \
    \         smalest_even_index = v\n        end\n    end\n    if smalest_even_index\
    \ == nil then\n        return smalest_value, smalest_index\n    else\n       \
    \ return smalest_even_index, smalest_even_value\n    end\nend", "    local smallest_value\
    \ = 0\n    local smallest_index = 0\n    for i = 1, #arr do\n        if arr[i]\
    \ > 0 then\n            if smallest_value < arr[i] then\n                smallest_value\
    \ = arr[i]\n                smallest_index = i\n            end\n        end\n\
    \    end\n    if smallest_value == 0 then\n        return nil\n    end\n    local\
    \ plucked_value = smallest_value\n    local plucked_index = smallest_index\n \
    \   for i = 1, #arr do\n        if arr[i] == 0 then\n            arr[i] = plucked_value\n\
    \            arr[i] = plucked_index\n            return arr\n        end\n   \
    \ end\nend", "  -- Your code here\n  local smalest_value = 0\n  local smalest_index\
    \ = 0\n  for i = 1, #arr do\n    if arr[i] % 2 == 0 then\n      if smalest_value\
    \ == 0 then\n        smalest_value = arr[i]\n        smalest_index = i\n     \
    \ elseif smalest_value < arr[i] then\n        smalest_value = arr[i]\n       \
    \ smalest_index = i\n      end\n    end\n  end\n  if smalest_value == 0 then\n\
    \    return nil\n  end\n  return smalest_value, smalest_index\nend", "    local\
    \ smalest_value, smalest_index, smallest_even_value = nil, nil, nil\n    for _,\
    \ node in ipairs(arr) do\n        if smallest_even_value == nil then\n       \
    \     smallest_even_value = node.value\n            smalest_value = node.value\n\
    \            smalest_index = node.index\n        elseif smallest_even_value <\
    \ node.value then\n            smallest_even_value = node.value\n            smalest_value\
    \ = node.value\n            smalest_index = node.index\n        end\n    end\n\
    \    if smallest_even_value == nil then\n        return nil\n    end\n    local\
    \ new_arr = {}\n    for _, node in ipairs(arr) do\n        if node.value == smallest_even_value\
    \ then\n            new_arr[node.index] = node.value\n        end\n    end\n \
    \   return new_arr\nend\n</cell>\n<text>\nProblem 4\nGiven an array of integers,\
    \ return a new array where each element has been incremented by 3.", "    local\
    \ smallest_value\n    local smallest_index\n    local smallest_even_value\n  \
    \  local smallest_even_index\n    local index\n    local even_value\n    local\
    \ even_index\n    for index, value in ipairs(arr) do\n        if smallest_value\
    \ == nil then\n            smallest_value = value\n            smallest_index\
    \ = index\n            smallest_even_value = value\n            smallest_even_index\
    \ = index\n        elseif smallest_value == value then\n            if smallest_even_index\
    \ == nil then\n                smallest_even_index = index\n                smallest_even_value\
    \ = value\n            elseif smallest_even_index == index then\n            \
    \    if smallest_even_value*2 < value then\n                    smallest_even_value\
    \ = value\n                    smallest_even_index = index\n                end\n\
    \            end\n        else\n            if smallest_even_index == nil then\n\
    \                smallest_even_index = index\n                smallest_even_value\
    \ = value\n            elseif smallest_even_index == index then\n            \
    \    if smallest_even_value*2 < value then\n                    smallest_even_value\
    \ = value\n                    smallest_even_index = index\n                end\n\
    \            end\n        end\n    end\n    if smallest_even_index == nil then\n\
    \        return nil\n    end\n    local result = {}\n    result[smallest_even_value]\
    \ = smallest_even_index\n    return result\nend", "  -- Base case\n  if #arr ==\
    \ 0 then\n    return {}\n  end", "    local smallest, smallest_index, smallest_value\
    \ = nil, nil, nil\n    for _, node in ipairs(arr) do\n        if smallest == nil\
    \ then\n            smallest_value = node\n            smallest_index = node\n\
    \            smallest = node\n        elseif smallest_value < node then\n    \
    \        smallest_value = node\n            smallest_index = node\n          \
    \  smallest = node\n        elseif smallest_value == node then\n            smallest_index\
    \ = smallest_index + 1\n        end\n    end\n    if smallest == nil then\n  \
    \      return nil\n    end\n    return smallest, smallest_index\nend", "    local\
    \ smalest_value\n    local smallest_index\n    local index\n    for index, value\
    \ in ipairs(arr) do\n        if value == 0 then\n            smalest_value = value\n\
    \            smallest_index = index\n        else\n            if value % 2 ==\
    \ 0 then\n                if value < smalest_value then\n                    smalest_value\
    \ = value\n                    smallest_index = index\n                end\n \
    \           else\n                if value < smalest_value then\n            \
    \        smalest_value = value\n                    smallest_index = index\n \
    \               end\n            end\n        end\n    end\n    if smallest_index\
    \ == nil then\n        return {}\n    end\n    return { smalest_value, smallest_index\
    \ }\nend", "  local smalest_value = nil\n  local smalest_index = nil\n  for i,\
    \ v in ipairs(arr) do\n    if smalest_value == nil then\n      smalest_value =\
    \ v\n      smalest_index = i\n    elseif smalest_value < v then\n      smalest_value\
    \ = v\n      smalest_index = i\n    end\n  end\n  if smalest_value == nil then\n\
    \    return {}\n  end\n  local smalest_value_and_index = smalest_value, smalest_index\n\
    \  local smalest_value_index = {}\n  local smalest_value_index_map = {}\n  local\
    \ smalest_value_index_map_count = 0\n  for i, v in ipairs(arr) do\n    if smalest_value_index_map[v]\
    \ == nil then\n      smalest_value_index_map[v] = smalest_value_index_map_count\n\
    \      smalest_value_index_map_count = smalest_value_index_map_count + 1\n   \
    \   smalest_value_index[v] = smalest_value_index_map[v]\n    else\n      smalest_value_index[v]\
    \ = smalest_value_index_map[v]\n    end\n  end\n  local smalest_value_index_map_count\
    \ = smalest_value_index_map_count - 1\n  if smalest_value_index_map_count == 0\
    \ then\n    return smalest_value_index\n  end\n  local smalest_value_index_map_count\
    \ = smalest_value_index_map_count + 1\n  for i, v in ipairs(arr) do\n    if smalest_value_index_map[v]\
    \ == smalest_value_index_map_count then\n      smalest_value_index_map[v] = smalest_value_index_map_count\n\
    \      smalest_value_index_map_count = smalest_value_index_map_count + 1\n   \
    \   smalest_value_index[v] = smalest_value_index_map[v]\n    else\n      smalest_value_index[v]\
    \ = smalest_value_index_map[v]\n    end\n  end\n  return smalest_value_index\n\
    end", "  -- Base case\n  if #arr == 0 then\n    return {}\n  end\n  -- Find the\
    \ smallest even value\n  local smalest_value = math.min(unpack(arr))\n  -- Find\
    \ the smallest index\n  local smallest_index = #arr\n  for i = 1, #arr do\n  \
    \  if arr[i] % 2 == 0 then\n      smalest_value = arr[i]\n      smallest_index\
    \ = i\n    end\n  end\n  -- Return the plucked node\n  return { smalest_value,\
    \ smallest_index }\nend", "    local smalest_value = nil\n    local smalest_index\
    \ = nil\n    for i = 1, #arr do\n        if arr[i] % 2 == 0 then\n           \
    \ if smalest_value == nil or arr[i] < smalest_value then\n                smalest_value\
    \ = arr[i]\n                smalest_index = i\n            end\n        end\n\
    \    end\n    if smalest_value == nil then\n        return nil\n    end\n    return\
    \ smalest_value, smalest_index\nend", "    local smallest_value_index = nil\n\
    \    local smallest_value = nil\n    for _, node in ipairs(arr) do\n        if\
    \ smallest_value == nil then\n            smallest_value = node\n            smallest_value_index\
    \ = nil\n        elseif smallest_value < node then\n            smallest_value\
    \ = node\n            smallest_value_index = nil\n        elseif smallest_value\
    \ == node then\n            smallest_value_index = nil\n        end\n    end\n\
    \    if smallest_value_index == nil then\n        return nil\n    end\n    local\
    \ smallest_value_index = smallest_value_index + 1\n    return smallest_value,\
    \ smallest_value_index\nend", "    local smallest_value = math.inf\n    local\
    \ smallest_index = 0\n    for _, v in pairs(arr) do\n        if v < smallest_value\
    \ then\n            smallest_value = v\n            smallest_index = v\n     \
    \   end\n    end\n    if smallest_value == math.inf then\n        return nil\n\
    \    end\n    local smalest_value = smallest_value\n    local smalest_index =\
    \ smallest_index\n    for _, v in pairs(arr) do\n        if v == smalest_value\
    \ then\n            smalest_index = v\n        end\n    end\n    return smalest_value,\
    \ smalest_index\nend", "    local smallest_value, smallest_index = math.inf, 0\n\
    \    for _, node in ipairs(arr) do\n        if node.value % 2 == 0 then\n    \
    \        if smallest_value < node.value then\n                smallest_value,\
    \ smallest_index = node.value, 1\n            else\n                smallest_value\
    \ = node.value\n                smallest_index = smallest_index + 1\n        \
    \    end\n        end\n    end\n    if smallest_value == math.inf then\n     \
    \   return nil\n    end\n    local result = {}\n    for _, node in ipairs(arr)\
    \ do\n        if node.value == smallest_value then\n            result[smallest_index]\
    \ = node\n        end\n    end\n    return result\nend", "    local smallest_value_index\
    \ = nil\n    local smallest_value = nil\n    for _, node in ipairs(arr) do\n \
    \       if smallest_value == nil then\n            smallest_value = node\n   \
    \         smallest_value_index = nil\n        elseif smallest_value < node then\n\
    \            smallest_value = node\n            smallest_value_index = nil\n \
    \       elseif smallest_value == node then\n            smallest_value_index =\
    \ nil\n        end\n    end\n    if smallest_value == nil then\n        return\
    \ nil\n    end\n    local smallest_value_index = nil\n    for _, node in ipairs(arr)\
    \ do\n        if smallest_value == node then\n            smallest_value_index\
    \ = nil\n        end\n    end\n    if smallest_value_index == nil then\n     \
    \   return smallest_value\n    end\n    local smallest_value_index = nil\n   \
    \ for _, node in ipairs(arr) do\n        if smallest_value == node then\n    \
    \        smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == nil then\n        return smallest_value\n    end\n    local smallest_value_index\
    \ = nil\n    for _, node in ipairs(arr) do\n        if smallest_value == node\
    \ then\n            smallest_value_index = nil\n        end\n    end\n    if smallest_value_index\
    \ == ", "  -- Your code here\n  local smalest_value, smalest_index\n  for i, v\
    \ in ipairs(arr) do\n    if v % 2 == 0 then\n      if smalest_value == nil then\n\
    \        smalest_value = v\n        smalest_index = i\n      elseif smalest_value\
    \ < v then\n        smalest_value = v\n        smalest_index = i\n      end\n\
    \    end\n  end\n  if smalest_value == nil then\n    return nil\n  end\n  return\
    \ smalest_value, smalest_index\nend", "    local smallest_even_value = nil\n \
    \   local smallest_even_index = nil\n    local smallest_value_index = nil\n  \
    \  local smallest_value = nil\n    for _, node in ipairs(arr) do\n        if smallest_even_index\
    \ == nil then\n            if node.value % 2 == 0 then\n                smallest_even_value\
    \ = node.value\n                smallest_even_index = node.index\n           \
    \ else\n                smallest_even_value = node.value + 1\n               \
    \ smallest_even_index = node.index\n            end\n        else\n          \
    \  if node.value % 2 == 0 then\n                if smallest_even_index < node.index\
    \ then\n                    smallest_even_value = node.value\n               \
    \     smallest_even_index = node.index\n                else\n               \
    \     smallest_even_value = node.value + 1\n                    smallest_even_index\
    \ = node.index\n                end\n            else\n                if smallest_even_index\
    \ < node.index then\n                    smallest_even_value = node.value + 1\n\
    \                    smallest_even_index = node.index\n                else\n\
    \                    smallest_even_value = node.value\n                    smallest_even_index\
    \ = node.index\n                end\n            end\n        end\n    end\n \
    \   if smallest_even_index == nil then\n        return nil\n    end\n    if smallest_even_index\
    \ == 0 then\n        smallest_value_index = smallest_even_index\n        smallest_value\
    \ = smallest_even_value\n    else\n        smallest_value_index = smallest_even_index\
    \ - 1\n        smallest_value = smallest_even_value\n    end\n    local smallest_value_index2\
    \ = smallest_even_index - 1\n    local smallest_value2 = smallest_even_value\n\
    \    for _, node in ipairs(arr) do\n        if node.index == smallest_value_index2\
    \ then\n            if node.value % 2 == 0 then\n                if smallest_even_index\
    \ < node.index then\n                    smallest_value_index2 = smallest_even_index\n\
    \                    smallest_value2 = smallest_even_value\n                else\n\
    \                    smallest_value_index2 = smallest_even_index - 1\n       \
    \             smallest_value2 = smallest_even_value\n                end\n   \
    \         else\n                if smallest_even_index < node.index then\n   \
    \                 smallest_value_index2 = smallest_even_index - 1\n          \
    \          smallest_value2 = smallest_even_value\n                else\n     \
    \               smallest_value_index2 = smallest_even_index\n                \
    \    smallest_value2 = smallest_even_value\n                end\n            end\n\
    \        else\n            if node.index == smallest_value_index then\n      \
    \          if node.value % 2 == 0 then\n                    if smallest_even_index\
    \ < node.index then\n                        smallest_value_index = smallest_even_index\n\
    \                        smallest_value = smallest_even_value\n              \
    \      else"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
