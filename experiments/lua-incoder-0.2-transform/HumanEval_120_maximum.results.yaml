language: lua
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      table.insert(result, max)\n      max = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58l814xc.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp58l814xc.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local max_arr = {}\n  local max_idx = 1\n  for i =\
    \ 1, k do\n    local max_val = arr[i]\n    for j = 1, i do\n      if arr[j] >\
    \ max_val then\n        max_val = arr[j]\n        max_idx = j\n      end\n   \
    \ end\n    max_arr[i] = max_val\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs9lxdr1.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -3, 5}\nstack traceback:\n\t/tmp/tmpcs9lxdr1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= k do\n    if arr[j] > max then\n      max = arr[j]\n    end\n    j = j\
    \ + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] < max then\n   \
    \   table.insert(result, max)\n    end\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_96e4lcg.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp_96e4lcg.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    local element =\
    \ arr[i]\n    if element > max then\n      max = element\n    end\n    i = i +\
    \ 1\n  end\n  local j = 1\n  while j <= k do\n    local element = arr[j]\n   \
    \ if element > max then\n      max = element\n    end\n    j = j + 1\n  end\n\
    \  local i = 1\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2gg5gnrd.lua:152: ''end'' expected (to close ''while'' at
    line 134) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max element in\
    \ the array\n  local max = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max then\n\
    \      max = arr[i]\n    end\n  end\n  -- Recursive case\n  local new_arr = {}\n\
    \  for i = 2, #arr do\n    if arr[i] > max then\n      new_arr[i] = arr[i]\n \
    \   else\n      new_arr[i] = max\n    end\n  end\n  return new_arr\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dox6gfm.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {2=5, 3=5}\nstack traceback:\n\t/tmp/tmp_dox6gfm.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    table.insert(result, max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbliq34q0.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpbliq34q0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr7rbxs2v.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpr7rbxs2v.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  local max = 0\n  local index = 0\n  local size = #arr\n  while index\
    \ <= size do\n    local element = arr[index]\n    if max < element then\n    \
    \  max = element\n      index = index + 1\n    end\n    if index == k then\n \
    \     results[#results+1] = max\n      max = 0\n      index = 1\n    end\n  end\n\
    \  if max > 0 then\n    results[#results+1] = max\n  end\n  return results\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpej6y7j40.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpej6y7j40.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpej6y7j40.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 1\n  local len = #arr\n  local max_val = arr[pos]\n  while\
    \ pos < len do\n    if arr[pos] > max_val then\n      max_val = arr[pos]\n   \
    \ end\n    pos = pos + 1\n  end\n  \n  while k >= 1 do\n    table.insert(result,\
    \ max_val)\n    k = k - 1\n    pos = pos + 1\n    max_val = arr[pos]\n    while\
    \ pos < len do\n      if arr[pos] > max_val then\n        max_val = arr[pos]\n\
    \      end\n      pos = pos + 1\n    end\n  end\n  \n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby9pjv06.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {-3}\nstack traceback:\n\t/tmp/tmpby9pjv06.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the first k elements\n\
    \  local max_arr = arr[1]\n  for i = 2, k do\n    max_arr = max_arr > arr[i] and\
    \ arr[i] or max_arr\n  end\n  \n  -- Get the remaining elements\n  local max_arr2\
    \ = arr[k]\n  for i = k + 1, #arr do\n    max_arr2 = max_arr2 > arr[i] and arr[i]\
    \ or max_arr2\n  end\n  \n  -- Return the merged array\n  return max_arr and {max_arr\
    \ or max_arr2} or max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tmbhv6n.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {-4}\nstack traceback:\n\t/tmp/tmp0tmbhv6n.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the middle element\n\
    \  local middle = math.floor((k - 1) / 2)\n  -- Get the maximum element in the\
    \ left half\n  local left_max = maximum(arr, middle - 1)\n  -- Get the maximum\
    \ element in the right half\n  local right_max = maximum(arr, middle + 1)\n  --\
    \ Combine the two maximum elements\n  local max_element = left_max > right_max\
    \ and left_max or right_max\n  -- Return the combined maximum element\n  return\
    \ arr:sub(1, middle + 1):append(max_element)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp36i61784.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp36i61784.lua:22: in function 'maximum'\n\
    \t/tmp/tmp36i61784.lua:24: in function 'maximum'\n\t/tmp/tmp36i61784.lua:24: in\
    \ function 'maximum'\n\t/tmp/tmp36i61784.lua:24: in function 'maximum'\n\t/tmp/tmp36i61784.lua:24:\
    \ in function 'maximum'\n\t/tmp/tmp36i61784.lua:24: in function 'maximum'\n\t\
    /tmp/tmp36i61784.lua:24: in function 'maximum'\n\t/tmp/tmp36i61784.lua:24: in\
    \ function 'maximum'\n\t/tmp/tmp36i61784.lua:24: in function 'maximum'\n\t/tmp/tmp36i61784.lua:24:\
    \ in function 'maximum'\n\t...\n\nRan 1 tests in 0.410 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750312
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  \n  local max_arr = {}\n  local max_idx = 1\n  \n  for i = 1, k do\n    local\
    \ max_val = arr[max_idx]\n    \n    for j = 1, #arr do\n      if arr[j] > max_val\
    \ then\n        max_val = arr[j]\n      end\n    end\n    \n    max_arr[i] = max_val\n\
    \    max_idx = max_idx + 1\n  end\n  \n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7d9ymcng.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp7d9ymcng.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number in the\
    \ first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Find the\
    \ max number in the remaining elements\n  local max_element_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  -- Return the max element and the max element rest\n\
    \  return {max_element, {max_element_rest}}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmlu4vqe.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmpzmlu4vqe.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_arr = {}\n    local max_len = -1\n    for i = 1, k do\n        max_len =\
    \ max_len > arr[i] and max_len or arr[i]\n    end\n    for i = 1, k do\n     \
    \   local max_element = arr[i]\n        for j = 1, k do\n            if arr[j]\
    \ > max_element then\n                max_element = arr[j]\n            end\n\
    \        end\n        max_arr[i] = max_element\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl_itcxk.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpcl_itcxk.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  local max_arr\
    \ = {}\n  local max_idx = 1\n  for i = 1, k do\n    if arr[i] > max_arr[i] then\n\
    \      max_arr[i] = arr[i]\n      max_idx = i\n    end\n  end\n  return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp78ad8jot.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp78ad8jot.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp78ad8jot.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number in the\
    \ first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Find the\
    \ max number in the remaining elements\n  local max_element_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  -- Return the max number in the first k elements\
    \ and the max number in the remaining elements\n  return max_element, max_element_rest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdodfxw8.lua:42:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpgdodfxw8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    local element =\
    \ arr[i]\n    if element > max then\n      max = element\n    end\n    i = i +\
    \ 1\n  end\n  table.insert(result, max)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgq1hcrpd.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpgq1hcrpd.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and k > 0 and k <= #arr')\n  local\
    \ result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max then\n\
    \      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n\
    \      table.insert(result, max)\n      max = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyiwfjnkt.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpyiwfjnkt.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_arr = {}\n    local max_idx = 1\n    for i = 1, k do\n        local max_val\
    \ = arr[max_idx]\n        for j = 1, k do\n            if arr[j] > max_val then\n\
    \                max_val = arr[j]\n                max_idx = j\n            end\n\
    \        end\n        max_arr[max_idx] = max_val\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf0_g74t.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpcf0_g74t.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbtyr255.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpgbtyr255.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        local m = nil\n        for j = 1, #arr\
    \ do\n            if arr[j] > m then\n                m = arr[j]\n           \
    \ end\n        end\n        max[i] = m\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_icir9s4.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp_icir9s4.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp_icir9s4.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_so_far = nil\n    local max_so_far_index = 0\n    local max_so_far_val =\
    \ nil\n    local max_so_far_val_pos = nil\n    local max_so_far_val_neg = nil\n\
    \    local max_so_far_val_zero = nil\n    local max_so_far_val_zero_index = nil\n\
    \    local max_so_far_val_zero_pos = nil\n    local max_so_far_val_zero_neg =\
    \ nil\n    local max_so_far_val_zero_zero = nil\n    local max_so_far_val_zero_zero_index\
    \ = nil\n    local max_so_far_val_zero_zero_pos = nil\n    local max_so_far_val_zero_zero_neg\
    \ = nil\n    local max_so_far_val_zero_zero_zero = nil\n    local max_so_far_val_zero_zero_zero_index\
    \ = nil\n    local max_so_far_val_zero_zero_zero_pos = nil\n    local max_so_far_val_zero_zero_zero_neg\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero = nil\n    local max_so_far_val_zero_zero_zero_zero_index\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_pos = nil\n    local max_so_far_val_zero_zero_zero_zero_neg\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_index\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_pos = nil\n    local\
    \ max_so_far_val_zero_zero_zero_zero_zero_neg = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_index = nil\n\
    \    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_pos = nil\n    local\
    \ max_so_far_val_zero_zero_zero_zero_zero_zero_neg = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_index = nil\n\
    \    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_pos = nil\n    local\
    \ max_so_far_val_zero_zero_zero_zero_zero_zero_zero_neg = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_zero\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_zero_index\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_zero_pos\
    \ = nil\n    local max_so_far_val_zero_zero_zero_zero_zero_zero_zero_zero_neg\
    \ = nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy88627ov.lua:72: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local results = {}\n  for i = 1, k do\n    local max = -1000\n\
    \    for j = 1, #arr do\n      if arr[j] > max then\n        max = arr[j]\n  \
    \    end\n    end\n    results[i] = max\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4dxsofv4.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp4dxsofv4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- If k is greater than length\
    \ of arr, return an empty array\n  if k > #arr then\n    return {}\n  end\n  --\
    \ Initialize max and max index\n  local max = {}\n  local max_index = {}\n  --\
    \ Initialize max and max index\n  local max_index = {}\n  -- Initialize max and\
    \ max index\n  local max_index = {}\n  -- Initialize max and max index\n  local\
    \ max_index = {}\n  -- Initialize max and max index\n  local max_index = {}\n\
    \  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize max\
    \ and max index\n  local max_index = {}\n  -- Initialize max and max index\n \
    \ local max_index = {}\n  -- Initialize max and max index\n  local max_index =\
    \ {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and max index\n  local max_index = {}\n  -- Initialize\
    \ max and max index\n  local max_index = {}\n  -- Initialize max and max index\n\
    \  local max_index = {}\n  -- Initialize max and max index\n  local max_index\
    \ = {}\n  -- Initialize max and \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2uriajz.lua:110: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1, k do\n\
    \    if arr[i] > arr[max_idx] then\n      max_idx = i\n    end\n  end\n  table.insert(max_arr,\
    \ arr[max_idx])\n  table.insert(max_arr, arr[#arr])\n  return max_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvhj2pu2.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmpgvhj2pu2.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    local max_value = arr[1]\n\
    \    for j = 2, #arr do\n      if arr[j] > max_value then\n        max_value =\
    \ arr[j]\n      end\n    end\n    max_arr[i] = max_value\n    max_count = max_count\
    \ + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbz48dic.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpwbz48dic.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the max element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max element\
    \ and the max element rest\n  return {max_element, max_element_rest}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cuqcnx8.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp8cuqcnx8.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  local max_idx = 1\n  local max_val\
    \ = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max_val then\n      max_val\
    \ = arr[i]\n      max_idx = i\n    end\n  end\n  for i = 1, k do\n    max_arr[max_idx]\
    \ = arr[i]\n    max_idx = max_idx + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchhsgd6b.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {3=-3, 4=-4, 5=5}\nstack traceback:\n\t/tmp/tmpchhsgd6b.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_arr = {}\n    local max_idx = {}\n    for i = 1, k do\n        max_arr[i]\
    \ = arr[i]\n        max_idx[i] = i\n    end\n    for i = k, #arr do\n        if\
    \ arr[i] > max_arr[k] then\n            max_arr[k] = arr[i]\n            max_idx[k]\
    \ = i\n        end\n    end\n    return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_zrixvt.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpn_zrixvt.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local max = 0\n    for i = 1, k do\n        local cur = arr[i]\n\
    \        if cur > max then\n            max = cur\n        end\n    end\n    for\
    \ i = 1, k do\n        local cur = arr[i]\n        if cur > max then\n       \
    \     result[i] = cur\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3eld_km.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpp3eld_km.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1, k do\n    if arr[i]\
    \ > max_arr[i] then\n      max_arr[i] = arr[i]\n      max_idx = i\n    end\n \
    \ end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zuaajbv.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4zuaajbv.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp4zuaajbv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_arr = {}\n    local max_len = k\n    for i = 1, k do\n        max_arr[i]\
    \ = arr[i]\n    end\n    for i = k, #arr do\n        if arr[i] > max_arr[k] then\n\
    \            max_arr[k] = arr[i]\n            k = k + 1\n        end\n    end\n\
    \    return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjw73i516.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpjw73i516.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnif52qw.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmppnif52qw.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    local max_element = arr[1]\n\
    \    for j = 2, #arr do\n      if arr[j] > max_element then\n        max_element\
    \ = arr[j]\n      end\n    end\n    max_arr[i] = max_element\n    if max_count\
    \ < i then\n      max_count = i\n    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk_s7u1y6.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpk_s7u1y6.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local len = #arr\n    if k > len then return result end\n \
    \   local max_idx = 1\n    local max_val = arr[max_idx]\n    for idx = 2, len\
    \ do\n        if arr[idx] > max_val then\n            max_idx = idx\n        \
    \    max_val = arr[idx]\n        end\n    end\n    for idx = max_idx, k do\n \
    \       result[idx] = arr[max_idx]\n        max_idx = max_idx - 1\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa23zj_fc.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpa23zj_fc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n  \
    \  local element = arr[i]\n    if element > max then\n      max = element\n  \
    \  end\n    i = i + 1\n  end\n  table.insert(result, max)\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmbhkqwm.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmplmbhkqwm.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the result\n  local sorted_arr\
    \ = arr:sublist(2, k)\n  table.sort(sorted_arr)\n  return sorted_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ahr6ivy.lua:31:\
    \ attempt to call a nil value (method 'sublist')\nstack traceback:\n\t/tmp/tmp5ahr6ivy.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmp5ahr6ivy.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= k do\n    if arr[j] > max then\n      max = arr[j]\n    end\n    j = j\
    \ + 1\n  end\n  if max > 0 then\n    for i = 1, k do\n      result[i] = max\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp91_tshxh.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp91_tshxh.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n  end\n  for i = 1, k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    result[i] = element\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgsnh5_p.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpvgsnh5_p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    local max_element = arr[1]\n\
    \    for j = 2, #arr do\n      if arr[j] > max_element then\n        max_element\
    \ = arr[j]\n      end\n    end\n    max_arr[i] = max_element\n    max_count =\
    \ max_count + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjr0twvh.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpqjr0twvh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  for i = 1, k do\n    max_len = max_len > arr[i]\
    \ and max_len or arr[i]\n    max_arr[i] = arr[i]\n  end\n  for i = k + 1, #arr\
    \ do\n    max_len = max_len > arr[i] and max_len or arr[i]\n    max_arr[i] = arr[i]\n\
    \  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj5evzkw0.lua:33:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpj5evzkw0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the first k elements\n  local\
    \ sorted_arr = table.sort(arr, function(x)\n    return x > max_element\n  end)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0o635t0v.lua:40:\
    \ expected: {-4, -3, 5}\nactual: nil\nstack traceback:\n\t/tmp/tmp0o635t0v.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    local i = 1\n    while i <= k do\n        local cur = arr[i]\n\
    \        local j = i\n        while j <= k do\n            if arr[j] > cur then\n\
    \                cur = arr[j]\n            end\n            j = j + 1\n      \
    \  end\n        max[#max + 1] = cur\n        i = i + 1\n    end\n    return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6vsw8jma.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp6vsw8jma.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g2jl6ae.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp1g2jl6ae.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max number in the\
    \ first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  -- Find the\
    \ max number in the remaining elements\n  local max_element_rest = arr[k]\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  -- Return the max number in the first k elements\
    \ and the max number in the remaining elements\n  return max_element, max_element_rest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdodfxw8.lua:42:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpgdodfxw8.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local pos = 1\n  local len = #arr\n  while pos < len\
    \ do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos = pos\
    \ + 1\n  end\n  \n  for i = 1, k do\n    if arr[pos] > max then\n      max = arr[pos]\n\
    \    end\n    pos = pos + 1\n  end\n  \n  for i = 1, len do\n    if arr[pos] >\
    \ max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for\
    \ i = 1, k do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n   \
    \ pos = pos + 1\n  end\n  \n  for i = 1, len do\n    if arr[pos] > max then\n\
    \      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for i = 1, k do\n\
    \    if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n\
    \  end\n  \n  for i = 1, len do\n    if arr[pos] > max then\n      max = arr[pos]\n\
    \    end\n    pos = pos + 1\n  end\n  \n  for i = 1, k do\n    if arr[pos] > max\
    \ then\n      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for i =\
    \ 1, len do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos\
    \ = pos + 1\n  end\n  \n  for i = 1, k do\n    if arr[pos] > max then\n      max\
    \ = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for i = 1, len do\n   \
    \ if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n \
    \ end\n  \n  for i = 1, k do\n    if arr[pos] > max then\n      max = arr[pos]\n\
    \    end\n    pos = pos + 1\n  end\n  \n  for i = 1, len do\n    if arr[pos] >\
    \ max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for\
    \ i = 1, k do\n    if arr[pos] > max then\n      max = arr[pos]\n    end\n   \
    \ pos = pos + 1\n  end\n  \n  for i = 1, len do\n    if arr[pos] > max then\n\
    \      max = arr[pos]\n    end\n    pos = pos + 1\n  end\n  \n  for i = 1, k do\n\
    \    if arr[pos] > max then\n      max = arr[pos]\n    end\n    pos = pos + 1\n\
    \  end\n  \n  for i = 1, len do\n    if arr[pos] > \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3dz7gbep.lua:135: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  \n  if k > len then\n    return nil\n  end\n  \n\
    \  if k == 0 then\n    for i = 1, len do\n      table.insert(result, arr[i])\n\
    \    end\n    return result\n  end\n  \n  for i = 1, k do\n    local max = 0\n\
    \    \n    for j = 1, len do\n      if arr[j] > max then\n        max = arr[j]\n\
    \      end\n    end\n    \n    table.insert(result, max)\n  end\n  \n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxg04oub.lua:49:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpmxg04oub.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    max_count = max_count +\
    \ 1\n    max_arr[i] = arr[i]\n  end\n  for i = k + 1, #arr do\n    if arr[i] >\
    \ max_arr[k] then\n      max_arr[k] = arr[i]\n      max_count = max_count + 1\n\
    \    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphp9ee7n0.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmphp9ee7n0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local max_arr = {}\n  local max_num = -math.inf\n \
    \ local max_i = 0\n  for i = 1, k do\n    if arr[i] > max_num then\n      max_num\
    \ = arr[i]\n      max_i = i\n    end\n  end\n  max_arr[max_i] = max_num\n  for\
    \ i = k + 1, #arr do\n    if arr[i] > max_num then\n      max_arr[i - 1] = arr[i]\n\
    \    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_s6s_qhg.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmp_s6s_qhg.lua:19: in local 'candidate'\n\t/tmp/tmp_s6s_qhg.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local max = 0\n    for i = 1, k do\n        if arr[i] > max\
    \ then\n            max = arr[i]\n        end\n    end\n    for i = 1, k do\n\
    \        if arr[i] > max then\n            result[i] = arr[i]\n        end\n \
    \   end\n    for i = k + 1, #arr do\n        if arr[i] > max then\n          \
    \  result[i] = arr[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_8i2m12.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpa_8i2m12.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  if k ==\
    \ 0 then\n    return arr\n  else\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, k do\n      if arr[i] > max_ending_here then\n    \
    \    max_ending_here = arr[i]\n      end\n      if arr[i] > max_so_far then\n\
    \        max_so_far = arr[i]\n      end\n    end\n    return max_so_far, arr[k],\
    \ max_ending_here\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fhj_yw4.lua:37:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp0fhj_yw4.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  local result\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n    \
    \  result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92inh8yi.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp92inh8yi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1,\
    \ k do\n    if arr[i] > max_arr[k] then\n      max_arr[k] = arr[i]\n      max_idx\
    \ = k\n    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpscktkofq.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpscktkofq.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpscktkofq.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local maxVal = arr[1]\n  for i\
    \ = 2, k do\n    if arr[i] > maxVal then\n      maxVal = arr[i]\n    end\n  end\n\
    \  for i = 1, k do\n    result[i] = maxVal\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplymjdtq4.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmplymjdtq4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n\
    \    if arr[index] > max then\n      max = arr[index]\n    end\n    index = index\
    \ + 1\n  end\n  table.insert(result, max)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyspw0qkm.lua:22:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpyspw0qkm.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmpyspw0qkm.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  local max = 0\n  local index = 0\n  local length = #arr\n  \n  -- If\
    \ k is greater than or equal to the length of the array, return an empty array.\n\
    \  if k > length then\n    return results\n  end\n  \n  -- If k is less than or\
    \ equal to 0, return an empty array.\n  if k < 0 then\n    return results\n  end\n\
    \  \n  -- If k is equal to or greater than the length of the array, return an\
    \ empty array.\n  if k > length then\n    return results\n  end\n  \n  -- If k\
    \ is less than or equal to the length of the array, return an empty array.\n \
    \ if k < 0 then\n    return results\n  end\n  \n  -- If k is equal to or less\
    \ than the length of the array, return an empty array.\n  if k < 0 then\n    return\
    \ results\n  end\n  \n  -- If k is equal to or greater than the length of the\
    \ array, return an empty array.\n  if k < 0 then\n    return results\n  end\n\
    \  \n  -- If k is equal to or less than the length of the array, return an empty\
    \ array.\n  if k < 0 then\n    return results\n  end\n  \n  -- If k is equal to\
    \ or greater than the length of the array, return an empty array.\n  if k < 0\
    \ then\n    return results\n  end\n  \n  -- If k is equal to or less than the\
    \ length of the array, return an empty array.\n  if k < 0 then\n    return results\n\
    \  end\n  \n  -- If k is equal to or greater than the length of the array, return\
    \ an empty array.\n  if k < 0 then\n    return results\n  end\n  \n  -- If k is\
    \ equal to or less than the length of the array, return an empty array.\n  if\
    \ k < 0 then\n    return results\n  end\n  \n  -- If k is equal to or greater\
    \ than the length of the array, return an empty array.\n  if k < 0 then\n    return\
    \ results\n  end\n  \n  -- If k is equal to or less than the length of the array,\
    \ return an empty array.\n  if k < 0 then\n    return results\n  end\n  \n  --\
    \ If k is equal to or greater than the length of the array, return an empty array.\n\
    \  if k < 0 then\n    return results\n  end\n  \n  -- If k is equal to or less\
    \ than the length of the array, return an empty array.\n  if k < 0 then\n    return\
    \ results\n  end\n  \n  -- If k is equal to or greater than the length of the\
    \ array, return an empty array.\n  if k < 0 then\n    return results\n  end\n\
    \  \n  -- If k is equal to or less than the length of the array, return an empty\
    \ array.\n  if k < 0 then\n    return results\n  end\n  \n  -- If k is equal to\
    \ or greater than the length of the array, return an empty array.\n  if k < 0\
    \ then\n    return results\n  end\n  \n  -- If k is \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8o1fd3jd.lua:130: ''end'' expected (to close ''function''
    at line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Get the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcae15_v.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpxcae15_v.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max_arr = {}\n    local max_len = -1\n    for i = 1, k do\n        max_len =\
    \ max_len or #max_arr\n        if max_len > #arr then\n            max_len = #arr\n\
    \        end\n        max_arr[i] = arr[max_len]\n    end\n    return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmc32_z_r.lua:32:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpmc32_z_r.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        table.insert(max, arr[i])\n    end\n\
    \    table.sort(max)\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kkszgum.lua:29:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp0kkszgum.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local max_arr = {}\n  local max_idx = 1\n  for i =\
    \ 1, k do\n    local max_val = arr[max_idx]\n    for j = 1, #arr do\n      if\
    \ arr[j] > max_val then\n        max_val = arr[j]\n      end\n    end\n    max_arr[i]\
    \ = max_val\n    max_idx = max_idx + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl9ap5zg.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpyl9ap5zg.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    local max_value = arr[1]\n\
    \    for j = 2, k do\n      if arr[j] > max_value then\n        max_value = arr[j]\n\
    \      end\n    end\n    max_arr[i] = max_value\n    max_count = max_count + 1\n\
    \  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjf5ow9k.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpyjf5ow9k.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr[1]}\n  end\n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Find the max number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  -- Return the max number in\
    \ the first k elements and the max number in the remaining elements\n  return\
    \ {max_element, {max_element_rest}}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkjwjz6a1.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmpkjwjz6a1.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wwa82ei.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp5wwa82ei.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    local element =\
    \ arr[i]\n    if element > max then\n      max = element\n    end\n    i = i +\
    \ 1\n  end\n  i = k\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if element\
    \ > max then\n      max = element\n    end\n    i = i + 1\n  end\n  while i <=\
    \ k do\n    local element = arr[i]\n    if element > max then\n      max = element\n\
    \    end\n    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n\
    \    if element > max then\n      max = element\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    local element = arr[i]\n    if element > max then\n  \
    \    max = element\n    end\n    i = i + 1\n  end\n  while i <= k do\n    local\
    \ element = arr[i]\n    if element > max then\n      max = element\n    end\n\
    \    i = i + 1\n  end\n  while i <= k do\n    local element = arr[i]\n    if \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdl7t8exs.lua:136: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local len = #arr\n    if k > len then\n        return nil\n\
    \    end\n    if k == 0 then\n        for i = 1, len do\n            result[i]\
    \ = arr[i]\n        end\n        return result\n    end\n    local max_index =\
    \ k - 1\n    for i = 1, len do\n        if arr[i] > arr[max_index] then\n    \
    \        max_index = i\n        end\n    end\n    for i = 1, k do\n        result[i]\
    \ = arr[max_index]\n        arr[max_index] = arr[i]\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgl6gu30.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpqgl6gu30.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  local max_idx = {}\n  local max_val\
    \ = -math.inf\n  for i = 1, k do\n    max_val = math.max(max_val, arr[i])\n  \
    \  max_arr[i] = max_val\n    max_idx[i] = i\n  end\n  for i = 1, k do\n    arr[i]\
    \ = max_arr[i]\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw5fltym.lua:20:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpaw5fltym.lua:20: in local 'candidate'\n\t/tmp/tmpaw5fltym.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 1\n  local max = 0\n  while pos < k do\n    local elem =\
    \ arr[pos]\n    if elem > max then\n      max = elem\n    end\n    pos = pos +\
    \ 1\n  end\n  result[#result + 1] = max\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg4srjfa.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {0}\nstack traceback:\n\t/tmp/tmpyg4srjfa.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  local max = 0\n  local index = 0\n  local size = #arr\n  while index\
    \ < size do\n    local element = arr[index]\n    if element > max then\n     \
    \ max = element\n    end\n    index = index + 1\n  end\n  local size = k\n  while\
    \ size < size do\n    local element = arr[index]\n    if element > max then\n\
    \      max = element\n    end\n    index = index + 1\n    size = size + 1\n  end\n\
    \  for i = 1, size do\n    results[i] = max\n  end\n  return results\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxc8_k2w2.lua:23:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpxc8_k2w2.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpxc8_k2w2.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the array\n  local max_element = arr[1]\n  for i = 2, #arr do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  \n  -- Sort\
    \ the array and return the k largest elements\n  local sorted_arr = {}\n  for\
    \ i = 1, k do\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp606edy3p.lua:43:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp606edy3p.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local maxVal = -math.inf\n  for i = 1, k do\n    if\
    \ arr[i] > maxVal then\n      maxVal = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > maxVal then\n      table.insert(result, maxVal)\n      maxVal\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfu39etko.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpfu39etko.lua:19: in local 'candidate'\n\t/tmp/tmpfu39etko.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local pos = 1\n  local max_val = arr[pos]\n  while pos\
    \ < k do\n    if arr[pos] > max_val then\n      max_val = arr[pos]\n    end\n\
    \    pos = pos + 1\n  end\n  table.insert(result, max_val)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oky4f2f.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3}\nstack traceback:\n\t/tmp/tmp1oky4f2f.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1, k do\n    if arr[i]\
    \ > max_arr[i] then\n      max_arr[i] = arr[i]\n      max_idx = i\n    end\n \
    \ end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zuaajbv.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4zuaajbv.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp4zuaajbv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k must be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      result[i] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzhppz9n7.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpzhppz9n7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- If k is greater than length\
    \ of arr\n  if k > #arr then\n    return arr\n  end\n  -- If k is less than 1,\
    \ return empty array\n  if k < 1 then\n    return {}\n  end\n  -- Initialize max\
    \ and current as first element\n  local max = arr[1]\n  local current = arr[1]\n\
    \  -- Iterate through remaining elements\n  for i = 2, #arr do\n    -- If current\
    \ is greater than max, replace it\n    if current > max then\n      max = current\n\
    \    end\n    -- Update current\n    current = arr[i]\n  end\n  -- Return max\
    \ array\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc3nkd9hf.lua:48:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmpc3nkd9hf.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpncgbscx1.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n \
    \ for i = 2, k do\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpua99jxic.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5}\nstack traceback:\n\t/tmp/tmpua99jxic.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 0\n  local length = #arr\n  \n  -- If\
    \ k is greater than the length of the array, return an empty array.\n  if k >\
    \ length then\n    return {}\n  end\n  \n  -- If k is less than or equal to the\
    \ length of the array, return the array.\n  if k < length then\n    for i = 1,\
    \ k do\n      result[i] = arr[index]\n      index = index + 1\n    end\n    return\
    \ result\n  end\n  \n  -- If k is equal to the length of the array, return the\
    \ maximum number in the array.\n  for i = 1, length do\n    if arr[i] > max then\n\
    \      max = arr[i]\n    end\n  end\n  \n  -- If k is greater than the length\
    \ of the array, return the maximum number in the array.\n  if k > length then\n\
    \    for i = 1, k do\n      result[i] = max\n    end\n    return result\n  end\n\
    \  \n  -- If k is equal to the length of the array, return the maximum number\
    \ in the array.\n  for i = 1, length do\n    if arr[i] == max then\n      result[i]\
    \ = max\n    end\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzc5g34rk.lua:64:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpzc5g34rk.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqfu42fe.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpgqfu42fe.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = k\n  local max_idx = 1\n  local max_val = arr[1]\n \
    \ for idx = 2, #arr do\n    if arr[idx] > max_val then\n      max_val = arr[idx]\n\
    \      max_idx = idx\n    end\n  end\n  max_arr[max_idx] = max_val\n  for idx\
    \ = 1, k do\n    max_arr[idx] = arr[max_idx]\n  end\n  return max_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevcrgfoo.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpevcrgfoo.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to #arr\")\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      table.insert(result, max)\n      max = arr[i]\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjbysaae.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpjjbysaae.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_idx = {}\n  local max_count = 0\n  for i = 1, k do\n    max_arr[i]\
    \ = arr[i]\n    max_idx[i] = i\n  end\n  for i = k, #arr do\n    if arr[i] > max_arr[k]\
    \ then\n      max_arr[k] = arr[i]\n      max_idx[k] = k\n      max_count = k\n\
    \    elseif arr[i] == max_arr[k] then\n      max_count = max_count + 1\n    end\n\
    \  end\n  return max_idx, max_arr, max_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu1yhxf8.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {1, 2, 3}\nstack traceback:\n\t/tmp/tmpxu1yhxf8.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= k do\n    if arr[j] > max then\n      result[j] = max\n    end\n    j =\
    \ j + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2z7nioy.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpk2z7nioy.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 0\n  for i = 1, k do\n    if arr[i] >\
    \ max then\n      max = arr[i]\n      index = i\n    end\n  end\n  table.insert(result,\
    \ max)\n  for i = k + 1, #arr do\n    if arr[i] > max then\n      max = arr[i]\n\
    \      index = i\n    end\n  end\n  table.insert(result, max)\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99bxhiqw.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp99bxhiqw.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  local max = 0\n  local index = 0\n  local size = #arr\n  \n  while index\
    \ < size do\n    local value = arr[index]\n    if value > max then\n      max\
    \ = value\n    end\n    \n    if index == k then\n      results[#results + 1]\
    \ = max\n      max = 0\n    end\n    \n    index = index + 1\n  end\n  \n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdh9xw3u3.lua:24:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpdh9xw3u3.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpdh9xw3u3.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  \n  local\
    \ max_arr = {}\n  local max_idx = 1\n  \n  for i = 1, k do\n    local max_val\
    \ = arr[max_idx]\n    \n    for j = 1, #arr do\n      if arr[j] > max_val then\n\
    \        max_val = arr[j]\n      end\n    end\n    \n    max_arr[i] = max_val\n\
    \    max_idx = max_idx + 1\n  end\n  \n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptjqi6ce0.lua:41:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmptjqi6ce0.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    max_count = max_count +\
    \ 1\n    max_arr[i] = max_arr[i] or arr[i]\n  end\n  for i = k + 1, #arr do\n\
    \    if arr[i] > max_arr[i] then\n      max_arr[i] = arr[i]\n      max_count =\
    \ max_count - 1\n    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcljkrlk.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpkcljkrlk.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max\
    \ = {}\n  local i = 1\n  while i <= k do\n    local max = arr[i]\n    for j =\
    \ i + 1, k do\n      if arr[j] > max then\n        max = arr[j]\n      end\n \
    \   end\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwscqwy31.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpwscqwy31.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum number in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the maximum\
    \ number in the first k elements\n  return arr .. {max_element}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn5ls1zis.lua:39:\
    \ attempt to concatenate a table value (local 'arr')\nstack traceback:\n\t/tmp/tmpn5ls1zis.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpn5ls1zis.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Get the first k elements\n\
    \  local arr = arr:sub(1, k)\n  \n  -- Sort the array\n  table.sort(arr)\n  \n\
    \  -- Return the first k elements\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolht4cz0.lua:23:\
    \ attempt to call a nil value (method 'sub')\nstack traceback:\n\t/tmp/tmpolht4cz0.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpolht4cz0.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the result\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0yibo2.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpdw0yibo2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  local result\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    local element = arr[i]\n    if\
    \ element > max then\n      max = element\n    end\n  end\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if element == max then\n      table.insert(result,\
    \ element)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h4oq9r2.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmp_h4oq9r2.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        table.insert(max, arr[i])\n    end\n\
    \    table.sort(max)\n    return max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0kkszgum.lua:29:\
    \ expected: {4, 4}\nactual: {-4, 4}\nstack traceback:\n\t/tmp/tmp0kkszgum.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  if k > len then\n    return result\n  end\n  if\
    \ k == 0 then\n    for i = 1, len do\n      table.insert(result, arr[i])\n   \
    \ end\n    return result\n  end\n  local max = 0\n  local maxIndex = 0\n  for\
    \ i = 1, len do\n    if arr[i] > max then\n      max = arr[i]\n      maxIndex\
    \ = i\n    end\n  end\n  for i = 1, k do\n    table.insert(result, arr[maxIndex])\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpumm661ad.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpumm661ad.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  -- Get the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  -- Get the rest of\
    \ the elements\n  for i = 2, k do\n    if arr[i] > max_element then\n      max_element\
    \ = arr[i]\n    end\n  end\n  -- Return the maximum element and the rest of the\
    \ elements\n  return max_element, arr[k+2]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_d_0etx.lua:36:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmpo_d_0etx.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local len = #arr\n    local max_so_far = arr[1]\n    local\
    \ max_so_far_index = 1\n    for i = 2, len do\n        if arr[i] > max_so_far\
    \ then\n            max_so_far = arr[i]\n            max_so_far_index = i\n  \
    \      end\n    end\n    for i = 1, k do\n        result[i] = arr[max_so_far_index]\n\
    \        max_so_far_index = max_so_far_index - 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9e2mo_o8.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5, -4, -3}\nstack traceback:\n\t/tmp/tmp9e2mo_o8.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  for i = 1, k do\n    max_len = max_len or #max_arr\n\
    \    max_arr = max_arr or {}\n    for j = 1, max_len do\n      if arr[j] > arr[j\
    \ + 1] then\n        table.insert(max_arr, arr[j])\n      end\n    end\n  end\n\
    \  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcdnbmwl.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpmcdnbmwl.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = 0\n  for i = 1, k do\n    local max_value\
    \ = arr[i]\n    for j = 1, #arr do\n      if arr[j] > max_value then\n       \
    \ max_value = arr[j]\n        max_idx = j\n      end\n    end\n    max_arr[i]\
    \ = max_value\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkblpsmc.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpgkblpsmc.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_heap\
    \ = {}\n  local max_heap_size = k\n  local max_heap_len = #max_heap\n  local max_heap_top\
    \ = max_heap_len - 1\n  local max_heap_max_val = -math.inf\n  local max_heap_max_idx\
    \ = -1\n  local max_heap_min_val = math.inf\n  local max_heap_min_idx = -1\n \
    \ local max_heap_i = -1\n  local max_heap_j = -1\n  local max_heap_val = -math.inf\n\
    \  local max_heap_val_i = -1\n  local max_heap_val_j = -1\n  local max_heap_val_i_left\
    \ = max_heap_val_i - 1\n  local max_heap_val_j_left = max_heap_val_j - 1\n  local\
    \ max_heap_val_i_right = max_heap_val_i + 1\n  local max_heap_val_j_right = max_heap_val_j\
    \ + 1\n  local max_heap_val_i_left_child = max_heap_val_i_left - 1\n  local max_heap_val_j_left_child\
    \ = max_heap_val_j_left - 1\n  local max_heap_val_i_right_child = max_heap_val_i_right\
    \ + 1\n  local max_heap_val_j_right_child = max_heap_val_j_right + 1\n  local\
    \ max_heap_val_i_left_child_left = max_heap_val_i_left_child - 1\n  local max_heap_val_j_left_child_left\
    \ = max_heap_val_j_left_child - 1\n  local max_heap_val_i_right_child_left = max_heap_val_i_right_child\
    \ + 1\n  local max_heap_val_j_right_child_left = max_heap_val_j_right_child +\
    \ 1\n  local max_heap_val_i_left_child_right = max_heap_val_i_left_child_left\
    \ + 1\n  local max_heap_val_j_left_child_right = max_heap_val_j_left_child_left\
    \ + 1\n  local max_heap_val_i_right_child_right = max_heap_val_i_right_child_left\
    \ + 1\n  local max_heap_val_j_right_child_right = max_heap_val_j_right_child_left\
    \ + 1\n  local max_heap_val_i_left_child_right = max_heap_val_i_left_child_right\
    \ + 1\n  local max_heap_val_j_left_child_right = max_heap_val_j_left_child_right\
    \ + 1\n  local max_heap_val_i_right_child_right = max_heap_val_i_right_child_right\
    \ + 1\n  local max_heap_val_j_right_child_right = max_heap_val_j_right_child_right\
    \ + 1\n  local max_heap_val_i_left_child_right = max_heap_val_i_left_child_right\
    \ + 1\n  local max_heap_val_j_left_child_right = max_heap\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpppi0n1z9.lua:69: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  local max_count = 0\n  local max_element = nil\n\
    \  for i = 1, len do\n    local element = arr[i]\n    if max_count < k then\n\
    \      if element > max_element then\n        max_count = k\n        max_element\
    \ = element\n      end\n    else\n      if element > max_element then\n      \
    \  max_count = k\n        max_element = element\n      else\n        max_count\
    \ = max_count + 1\n      end\n    end\n  end\n  table.insert(result, max_element)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqp1oag9v.lua:24:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpqp1oag9v.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpqp1oag9v.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the result with\
    \ the maximum element in the first k elements\n  return arr .. {max_element} ..\
    \ {max_element_rest}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuds4vgc9.lua:39:\
    \ attempt to concatenate a table value\nstack traceback:\n\t/tmp/tmpuds4vgc9.lua:39:\
    \ in local 'candidate'\n\t/tmp/tmpuds4vgc9.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  assert(k > 0 and k <= len, \"k should be greater\
    \ than 0 and less than or equal to len\")\n  \n  -- Sort the array in descending\
    \ order\n  for i = len-1, 0, -1 do\n    local temp = arr[i]\n    local j = i\n\
    \    while j > 0 and arr[j-1] > temp do\n      arr[j] = arr[j-1]\n      j = j\
    \ - 1\n    end\n    arr[j] = temp\n  end\n  \n  -- Copy the k largest elements\
    \ to the result array\n  for i = 1, k do\n    result[i] = arr[i]\n  end\n  \n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8fyj_9q8.lua:25:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp8fyj_9q8.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmp8fyj_9q8.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return {arr[1]}\n  end\n  \n  -- Get the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the rest of the array\n  local sorted_arr = arr:sublist(2, k)\n\
    \  table.sort(sorted_arr)\n  \n  -- Return the result of the recursive call\n\
    \  return {max_element}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsfkoeha.lua:31:\
    \ attempt to call a nil value (method 'sublist')\nstack traceback:\n\t/tmp/tmplsfkoeha.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmplsfkoeha.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Get the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements\n  local new_arr = {}\n  for i = 2, k do\n\
    \    if arr[i] > max_element then\n      table.insert(new_arr, arr[i])\n    end\n\
    \  end\n  \n  return new_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68pmyd81.lua:44:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp68pmyd81.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqfu42fe.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpgqfu42fe.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Find the max element in\
    \ the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if\
    \ arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n  --\
    \ Sort the remaining elements\n  local sorted_arr = arr:sublist(2, k)\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctb7abe4.lua:29:\
    \ attempt to call a nil value (method 'sublist')\nstack traceback:\n\t/tmp/tmpctb7abe4.lua:29:\
    \ in local 'candidate'\n\t/tmp/tmpctb7abe4.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  if k > #arr\
    \ then return end\n  local max_so_far = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_so_far then\n      max_so_far = arr[i]\n    end\n  end\n  return max_so_far\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r0fa0s4.lua:30:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp7r0fa0s4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  local max = 0\n  local index = 1\n  while index <= #arr do\n    local\
    \ element = arr[index]\n    if element > max then\n      max = element\n    end\n\
    \    if index == k then\n      results[#results+1] = max\n    end\n    index =\
    \ index + 1\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpictgpake.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpictgpake.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  local max_count = 0\n  local max_element = arr[1]\n\
    \  for i = 2, len do\n    local element = arr[i]\n    if element > max_element\
    \ then\n      max_count = max_count + 1\n      max_element = element\n    end\n\
    \    if max_count == k then\n      table.insert(result, max_element)\n      max_count\
    \ = 0\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9j6v8sn.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpn9j6v8sn.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1, k do\n    if arr[i]\
    \ > max_arr[i] then\n      max_arr[i] = arr[i]\n      max_idx = i\n    end\n \
    \ end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zuaajbv.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4zuaajbv.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp4zuaajbv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 1\n  local len = #arr\n  while pos < len do\n    local max_val\
    \ = arr[pos]\n    for i = pos, len-1 do\n      if arr[i] > max_val then\n    \
    \    max_val = arr[i]\n      end\n    end\n    result[pos] = max_val\n    pos\
    \ = pos + 1\n  end\n  if k > 1 then\n    return sort(result, k)\n  else\n    return\
    \ result\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplgvwrrlw.lua:31:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmplgvwrrlw.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmplgvwrrlw.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_len = -1\n  for i = 1, k do\n    local max_value = arr[1]\n\
    \    for j = 2, k do\n      if arr[j] > max_value then\n        max_value = arr[j]\n\
    \      end\n    end\n    max_arr[i] = max_value\n    max_len = max_len or #max_arr\n\
    \  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohnass7b.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpohnass7b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_arr = {}\n\
    \  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1g2jl6ae.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp1g2jl6ae.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  assert(k > 0 and k <= len, \"k should be greater\
    \ than 0 and less than or equal to length of arr\")\n  \n  for i = 1, k do\n \
    \   local max = 0\n    local max_idx = -1\n    for j = 1, len do\n      if arr[j]\
    \ > max then\n        max = arr[j]\n        max_idx = j\n      end\n    end\n\
    \    result[i] = arr[max_idx]\n  end\n  \n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4xvyl06t.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp4xvyl06t.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 0\n  local length = #arr\n  \n  -- If\
    \ k is greater than the length of arr, then return an empty array.\n  if k > length\
    \ then\n    return result\n  end\n  \n  -- If k is less than or equal to zero,\
    \ then return an empty array.\n  if k < 0 then\n    return result\n  end\n  \n\
    \  -- If k is equal to the length of arr, then return arr.\n  if k == length then\n\
    \    for i = 1, length do\n      if arr[i] > max then\n        max = arr[i]\n\
    \        index = i\n      end\n    end\n  \n    -- Return the maximum number in\
    \ the array.\n    if index == 0 then\n      result = {max}\n    else\n      result\
    \ = {arr[index]}\n    end\n  \n  -- If k is greater than the length of arr, then\
    \ return an empty array.\n  else\n    for i = 1, k do\n      local max = 0\n \
    \     local index = 0\n      \n      -- If k is greater than the length of arr,\
    \ then return an empty array.\n      if k > length then\n        return result\n\
    \      end\n      \n      -- If k is less than or equal to zero, then return an\
    \ empty array.\n      if k < 0 then\n        return result\n      end\n      \n\
    \      -- If k is equal to the length of arr, then return arr.\n      if k ==\
    \ length then\n        for i = 1, length do\n          if arr[i] > max then\n\
    \            max = arr[i]\n            index = i\n          end\n        end\n\
    \      \n        -- Return the maximum number in the array.\n        if index\
    \ == 0 then\n          result = {max}\n        else\n          result = {arr[index]}\n\
    \        end\n      \n      -- If k is greater than the length of arr, then return\
    \ an empty array.\n      else\n        for i = 1, length do\n          if arr[i]\
    \ > max then\n            max = arr[i]\n            index = i\n          end\n\
    \        end\n      \n        -- Return the maximum number in the array.\n   \
    \     if index == 0 then\n          result = {max}\n        else\n          result\
    \ = {arr[index]}\n        end\n      end\n    end\n  end\n  \n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5ghoiyn.lua:105:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpm5ghoiyn.lua:105:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the result\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    if arr[i] > max_element then\n      table.insert(sorted_arr,\
    \ arr[i])\n    end\n  end\n  return sorted_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdw0yibo2.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpdw0yibo2.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to #arr')\n\
    \  local max_arr = {}\n  local max_num = -math.inf\n  for i = 1, k do\n    if\
    \ arr[i] > max_num then\n      max_num = arr[i]\n    end\n  end\n  for i = 1,\
    \ k do\n    if arr[i] > max_num then\n      max_arr[i] = arr[i]\n    end\n  end\n\
    \  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9uuy_zp.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpf9uuy_zp.lua:19: in local 'candidate'\n\t/tmp/tmpf9uuy_zp.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the array\n  local max_element = arr[1]\n  for i = 2, #arr do\n    if arr[i]\
    \ > max_element then\n      max_element = arr[i]\n    end\n  end\n  \n  -- Find\
    \ the max element in the remaining array\n  local max_element_rest = arr[1]\n\
    \  for i = 2, #arr do\n    if arr[i] > max_element_rest then\n      max_element_rest\
    \ = arr[i]\n    end\n  end\n  \n  -- Return the max element and the max element\
    \ rest\n  return max_element, max_element_rest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7y3yq4um.lua:45:\
    \ expected: {-4, -3, 5}\nactual: 5\nstack traceback:\n\t/tmp/tmp7y3yq4um.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max\
    \ = {}\n  local i = 1\n  while i <= k do\n    local m = -1000\n    for j = 1,\
    \ i do\n      if arr[j] > m then\n        m = arr[j]\n      end\n    end\n   \
    \ table.insert(max, m)\n    i = i + 1\n  end\n  return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kr89x1t.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -3, 5}\nstack traceback:\n\t/tmp/tmp7kr89x1t.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local n = #arr\n  for i = 1, k do\n    local max = -math.inf\n    for\
    \ j = 1, n do\n      if arr[j] > max then\n        max = arr[j]\n      end\n \
    \   end\n    result[#result + 1] = max\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiysa179b.lua:20:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpiysa179b.lua:20: in local 'candidate'\n\t/tmp/tmpiysa179b.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k must be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirqwdtp7.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpirqwdtp7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  local result\
    \ = {}\n  local pos = 1\n  local max = 0\n  local i = 1\n  while i <= k do\n \
    \   if arr[i] > max then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n\
    \  while i <= k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  \
    \  result[pos] = max\n    pos = pos + 1\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqtfidfz.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpaqtfidfz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the middle element\n\
    \  local middle = math.floor((k - 1) / 2)\n  -- Get the max element in the left\
    \ half\n  local left_max = maximum(arr, middle - 1)\n  -- Get the max element\
    \ in the right half\n  local right_max = maximum(arr, middle + 1)\n  -- Get the\
    \ max element in the left and right half\n  local max_element = left_max > right_max\
    \ and left_max or right_max\n  -- Return the max element in the left and right\
    \ half\n  return arr:sub(1, middle + 1):append(max_element)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp22ddnx90.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp22ddnx90.lua:22: in upvalue 'maximum'\n\
    \t/tmp/tmp22ddnx90.lua:24: in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24: in\
    \ upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24: in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24:\
    \ in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24: in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24:\
    \ in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24: in upvalue 'maximum'\n\t/tmp/tmp22ddnx90.lua:24:\
    \ in upvalue 'maximum'\n\t...\t(skipping 249969 levels)\n\t/tmp/tmp22ddnx90.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmp22ddnx90.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.140 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local pos = 0\n  local len = #arr\n  \n  -- If k is less than or equal\
    \ to zero, return an empty array.\n  if k < 1 then\n    return result\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsdxw4gc2.lua:42: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k must be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local max_so_far = nil\n  local max_ending_here =\
    \ nil\n  for i = 1, k do\n    if max_so_far == nil then\n      max_ending_here\
    \ = arr[i]\n      max_so_far = max_ending_here\n    else\n      if arr[i] > max_ending_here\
    \ then\n        max_ending_here = arr[i]\n      end\n    end\n  end\n  if max_so_far\
    \ == nil then\n    return nil\n  end\n  return max_so_far\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6mp3_6ng.lua:39:\
    \ expected: {-4, -3, 5}\nactual: -3\nstack traceback:\n\t/tmp/tmp6mp3_6ng.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  if k ==\
    \ 0 then\n    return arr\n  else\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, #arr do\n      if arr[i] > max_ending_here then\n \
    \       max_ending_here = max_so_far\n      end\n      max_so_far = max_ending_here\n\
    \      max_ending_here = arr[i]\n    end\n    return arr[k] <= max_ending_here\
    \ and arr or arr:sub(1, k - 1):append(arr[k])\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0i2bj3s1.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp0i2bj3s1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Write\
    \ your code here.\n  local max_arr = {}\n  for i = 1, k do\n    max_arr[i] = arr[i]\n\
    \  end\n  for i = k + 1, #arr do\n    max_arr[i] = arr[i]\n  end\n  return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx8c4imb.lua:31:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpgx8c4imb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1, k do\n    local max_val\
    \ = arr[max_idx]\n    for j = 1, #arr do\n      if arr[j] > max_val then\n   \
    \     max_val = arr[j]\n      end\n    end\n    max_arr[i] = max_val\n    max_idx\
    \ = max_idx + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp53ciq2vb.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp53ciq2vb.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  if k ==\
    \ 0 then\n    return arr\n  else\n    local max_so_far = arr[1]\n    local max_ending_here\
    \ = arr[1]\n    for i = 2, #arr do\n      if arr[i] > max_ending_here then\n \
    \       max_ending_here = arr[i]\n      end\n      if max_ending_here > max_so_far\
    \ then\n        max_so_far = max_ending_here\n      end\n    end\n    return arr[k]\
    \ <= max_so_far and arr or arr .. {max_so_far}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4fgzdik.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpy4fgzdik.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to the\
    \ length of the array')\n  local result = {}\n  local max = 0\n  local index =\
    \ 1\n  while index <= k do\n    local element = arr[index]\n    if element > max\
    \ then\n      max = element\n    end\n    index = index + 1\n  end\n  table.insert(result,\
    \ max)\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxy9qxrg3.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpxy9qxrg3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, 'k should be an integer and greater than 0')\n  local max_arr\
    \ = {}\n  local max_idx = 1\n  local max_val = arr[1]\n  for i = 2, #arr do\n\
    \    if arr[i] > max_val then\n      max_val = arr[i]\n      max_idx = i\n   \
    \ end\n  end\n  for i = 1, k do\n    max_arr[max_idx] = arr[i]\n    max_idx =\
    \ max_idx + 1\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi1nz6it.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {3=-3, 4=-4, 5=5}\nstack traceback:\n\t/tmp/tmpwi1nz6it.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less or equal than length\
    \ of array\")\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    if\
    \ arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k do\n \
    \   if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zt8e7cd.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp4zt8e7cd.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    local element = arr[i]\n    if element > max then\n   \
    \   max = element\n    end\n    result[i] = element\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7vpzc1p.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpa7vpzc1p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 1\n  local size = #arr\n  while index\
    \ <= size do\n    if arr[index] > max then\n      max = arr[index]\n    end\n\
    \    index = index + 1\n  end\n  \n  while k <= size do\n    if arr[k] > max then\n\
    \      max = arr[k]\n    end\n    k = k + 1\n  end\n  \n  for i = 1, size do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  \n  for i = 1,\
    \ size do\n    if arr[i] > max then\n      table.insert(result, arr[i])\n    end\n\
    \  end\n  \n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwx76jomc.lua:53:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpwx76jomc.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to #arr\")\n  local result = {}\n  local max = 0\n  for i = 1, k do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7rg7dui.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpj7rg7dui.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    local element = arr[i]\n    if\
    \ element > max then\n      max = element\n    end\n  end\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if element == max then\n      table.insert(result,\
    \ element)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsze0a94u.lua:37:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpsze0a94u.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local len = #arr\n  \n  if k > len then\n    return nil\n  elseif k\
    \ == 0 then\n    return arr\n  else\n    local max_idx = 1\n    local max_val\
    \ = arr[max_idx]\n    for idx = 2, len do\n      if arr[idx] > max_val then\n\
    \        max_idx = idx\n        max_val = arr[idx]\n      end\n    end\n    \n\
    \    for idx = 1, k do\n      result[max_idx] = arr[max_idx]\n      max_idx =\
    \ max_idx + 1\n      max_val = arr[max_idx]\n    end\n    \n    return result\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n   \
    \ lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkape1nsz.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {3=5}\nstack traceback:\n\t/tmp/tmpkape1nsz.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the maximum element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the result with\
    \ the maximum element\n  return {max_element, {max_element_rest}}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxo8ofjl_.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, {5}}\nstack traceback:\n\t/tmp/tmpxo8ofjl_.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local size = #arr\n  local max_count = 0\n  local max_element = nil\n\
    \  local max_index = nil\n  for i = 1, size do\n    local element = arr[i]\n \
    \   if max_count < k then\n      if element > max_element then\n        max_count\
    \ = k\n        max_element = element\n        max_index = i\n      end\n    elseif\
    \ element > max_element then\n      max_count = max_count + 1\n      max_element\
    \ = element\n      max_index = i\n    end\n  end\n  result[max_index] = max_element\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbc_xxv9u.lua:25:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpbc_xxv9u.lua:25:\
    \ in local 'candidate'\n\t/tmp/tmpbc_xxv9u.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local max_arr\
    \ = {}\n  local max_count = 0\n  for i = 1, k do\n    if max_count == 0 then\n\
    \      max_count = arr[i]\n      max_arr[i] = arr[i]\n    elseif arr[i] > max_count\
    \ then\n      max_count = arr[i]\n      max_arr[i] = arr[i]\n    end\n  end\n\
    \  return max_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ool5dzg.lua:34:\
    \ expected: {-4, -3, 5}\nactual: {-3, 3=5}\nstack traceback:\n\t/tmp/tmp8ool5dzg.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum number in\
    \ the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n    if\
    \ arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n  --\
    \ Sort the remaining elements\n  table.sort(arr, function(x, y)\n    return x\
    \ > y\n  end)\n  -- Return the first k elements\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxoi1p73j.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpxoi1p73j.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ result = {}\n    local len = #arr\n    if k > len then\n        return nil\n\
    \    end\n    if k == 0 then\n        for i = 1, len do\n            if arr[i]\
    \ > result[1] then\n                result[1] = arr[i]\n            end\n    \
    \    end\n        return result\n    end\n    local max_idx = 1\n    for i = 1,\
    \ k do\n        local max_val = arr[max_idx]\n        for j = 1, len do\n    \
    \        if arr[j] > max_val then\n                max_val = arr[j]\n        \
    \        max_idx = j\n            end\n        end\n        result[i] = max_val\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qswpzvz.lua:47:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp8qswpzvz.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the max number in the\
    \ first k elements\n  local max_element = arr[1]\n  -- Get the max number in the\
    \ remaining elements\n  for i = 2, k do\n    if arr[i] > max_element then\n  \
    \    max_element = arr[i]\n    end\n  end\n  -- Return the max number in the first\
    \ k elements\n  return arr .. {max_element}\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12da2xir.lua:30:\
    \ attempt to concatenate a table value (local 'arr')\nstack traceback:\n\t/tmp/tmp12da2xir.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmp12da2xir.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum number in\
    \ the first k elements\n  local max_num = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > max_num then\n      max_num = arr[i]\n    end\n  end\n  -- Sort the remaining\
    \ elements and return the first k elements\n  table.sort(arr, function(x, y)\n\
    \    return x > y\n  end)\n  return arr\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbzo0ey61.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5, -3, -4}\nstack traceback:\n\t/tmp/tmpbzo0ey61.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr)\n  local max_arr = {}\n  local max_idx = 1\n  for i = 1,\
    \ k do\n    local max_val = arr[i]\n    for j = 1, #arr do\n      if arr[j] >\
    \ max_val then\n        max_val = arr[j]\n        max_idx = j\n      end\n   \
    \ end\n    max_arr[i] = max_val\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j3qwmez.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmp3j3qwmez.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less or equal than length\
    \ of array\")\n  \n  local max_arr = {}\n  local max_idx = 1\n  \n  for i = 1,\
    \ k do\n    if arr[i] > arr[max_idx] then\n      max_idx = i\n    end\n  end\n\
    \  \n  for i = 1, k do\n    if arr[i] > arr[max_idx] then\n      max_arr[i] =\
    \ arr[max_idx]\n    end\n  end\n  \n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uisqp08.lua:40:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmp_uisqp08.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max_count = 0\n  local max_element = nil\n  for i = 1, k do\n\
    \    local element = arr[i]\n    if max_count < element then\n      max_count\
    \ = element\n      max_element = element\n    end\n  end\n  table.insert(result,\
    \ max_element)\n  for i = k + 1, #arr do\n    local element = arr[i]\n    if max_count\
    \ < element then\n      max_count = element\n      max_element = element\n   \
    \ end\n    table.insert(result, element)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptf06ww18.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmptf06ww18.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  -- Get the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  -- Get the remaining\
    \ elements in the array\n  for i = 2, k do\n    if arr[i] > max_element then\n\
    \      max_element = arr[i]\n    end\n  end\n  -- Return the maximum element in\
    \ the first k elements\n  return arr .. {max_element}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppqhfea7e.lua:30:\
    \ attempt to concatenate a table value (local 'arr')\nstack traceback:\n\t/tmp/tmppqhfea7e.lua:30:\
    \ in local 'candidate'\n\t/tmp/tmppqhfea7e.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local index = 0\n  local length = #arr\n  \n  -- The\
    \ first k elements are the maximum\n  -- The rest are sorted from max to min\n\
    \  for i = 1, k do\n    local element = arr[index]\n    \n    -- If the element\
    \ is the maximum\n    if element > max then\n      max = element\n    end\n  \
    \  \n    -- If the element is the minimum\n    if element < max then\n      --\
    \ If the element is the maximum\n      if element == max then\n        -- If the\
    \ element is the maximum\n        if index == length - 1 then\n          -- Add\
    \ the element to the result\n          result[#result + 1] = element\n       \
    \ end\n      else\n        -- If the element is not the maximum\n        -- Add\
    \ the element to the result\n        result[#result + 1] = element\n      end\n\
    \    end\n    \n    -- Increment the index\n    index = index + 1\n  end\n  \n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50hr8fej.lua:28:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp50hr8fej.lua:28:\
    \ in local 'candidate'\n\t/tmp/tmp50hr8fej.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the max element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Find the max element in the remaining elements\n  local max_element_rest\
    \ = arr[k]\n  for i = k + 1, #arr do\n    if arr[i] > max_element_rest then\n\
    \      max_element_rest = arr[i]\n    end\n  end\n  \n  -- Return the max element\
    \ and the max element rest\n  return {max_element, max_element_rest}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8cuqcnx8.lua:45:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp8cuqcnx8.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        table.insert(max, -math.inf)\n    end\n\
    \    for i = 1, #arr do\n        local element = arr[i]\n        if element >\
    \ max[i - 1] then\n            table.insert(max, element)\n        end\n    end\n\
    \    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpukgmxlwh.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpukgmxlwh.lua:19: in local 'candidate'\n\t/tmp/tmpukgmxlwh.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local results\
    \ = {}\n  for i = 1, k do\n    local max = -math.inf\n    for j = 1, #arr do\n\
    \      if arr[j] > max then\n        max = arr[j]\n      end\n    end\n    results[i]\
    \ = max\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxvky1typ.lua:19:\
    \ attempt to perform arithmetic on a nil value (field 'inf')\nstack traceback:\n\
    \t/tmp/tmpxvky1typ.lua:19: in local 'candidate'\n\t/tmp/tmpxvky1typ.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    table.insert(result, max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbliq34q0.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpbliq34q0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ arr_size = #arr\n    local max_arr_size = k\n    local max_arr = {}\n    local\
    \ max_arr_count = 0\n    local max_arr_i = 1\n    local max_arr_j = 1\n    local\
    \ max_arr_k = 1\n    local max_arr_v = 1\n    local max_arr_v1 = 1\n    local\
    \ max_arr_v2 = 1\n    local max_arr_v3 = 1\n    local max_arr_v4 = 1 -- v4 means\
    \ v1 + v2 + v3\n    local max_arr_v5 = 1 -- v5 means v4 + v3\n    local max_arr_v6\
    \ = 1 -- v6 means v4 + v5\n    local max_arr_v7 = 1 -- v7 means v6 + v5\n    local\
    \ max_arr_v8 = 1 -- v8 means v6 + v4\n    local max_arr_v9 = 1 -- v9 means v8\
    \ + v4\n    local max_arr_v10 = 1 -- v10 means v8 + v3\n    local max_arr_v11\
    \ = 1 -- v11 means v10 + v3\n    local max_arr_v12 = 1 -- v12 means v11 + v3\n\
    \    local max_arr_v13 = 1 -- v13 means v12 + v3\n    local max_arr_v14 = 1 --\
    \ v14 means v13 + v3\n    local max_arr_v15 = 1 -- v15 means v14 + v3\n    local\
    \ max_arr_v16 = 1 -- v16 means v15 + v3\n    local max_arr_v17 = 1 -- v17 means\
    \ v16 + v3\n    local max_arr_v18 = 1 -- v18 means v17 + v3\n    local max_arr_v19\
    \ = 1 -- v19 means v18 + v3\n    local max_arr_v20 = 1 -- v20 means v19 + v3\n\
    \    local max_arr_v21 = 1 -- v21 means v20 + v3\n    local max_arr_v22 = 1 --\
    \ v22 means v21 + v3\n    local max_arr_v23 = 1 -- v23 means v22 + v3\n    local\
    \ max_arr_v24 = 1 -- v24 means v23 + v3\n    local max_arr_v25 = 1 -- v25 means\
    \ v24 + v3\n    local max_arr_v26 = 1 -- v26 means v25 + v3\n    local max_arr_v27\
    \ = 1 -- v27 means v26 + v3\n    local max_arr_v28 = 1 -- v28 means v27 + v3\n\
    \    local max_arr_v29 = 1 -- v29 means v28 + v3\n    local max_arr_v30 = 1 --\
    \ v30 means v29 + v3\n    local max_arr_v31 = 1 -- v3\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7__5au64.lua:73: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to the length of the array\")\n  local max_arr = {}\n  local max_idx =\
    \ 1\n  local max_val = arr[1]\n  for idx = 2, #arr do\n    if arr[idx] > max_val\
    \ then\n      max_val = arr[idx]\n      max_idx = idx\n    end\n  end\n  for idx\
    \ = 1, k do\n    max_arr[idx] = arr[max_idx]\n  end\n  return max_arr\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd13x5np1.lua:36:\
    \ expected: {-4, -3, 5}\nactual: {5, 5, 5}\nstack traceback:\n\t/tmp/tmpd13x5np1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    local i = 1\n    while i <= k do\n        local m = -1000\n  \
    \      for j = 1, i do\n            if arr[j] > m then\n                m = arr[j]\n\
    \            end\n        end\n        max[#max + 1] = m \n        i = i + 1\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnw8ln30.lua:35:\
    \ expected: {-4, -3, 5}\nactual: {-3, -3, 5}\nstack traceback:\n\t/tmp/tmpqnw8ln30.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr}\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph3o9p29m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  i = k\n  while i\
    \ <= k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n    i = i +\
    \ 1\n  end\n  while i <= k do\n    result[#result + 1] = arr[i]\n    i = i + 1\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes8qe5e5.lua:43:\
    \ expected: {-4, -3, 5}\nactual: {}\nstack traceback:\n\t/tmp/tmpes8qe5e5.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return {arr[1]}\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprnh_9ig0.lua:38: ''end'' expected (to close ''function'' at
    line 16) near <eof>

    '
  stdout: ''
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and k should be less than or\
    \ equal to the length of the array\")\n  local max_arr = {}\n  local max_idx =\
    \ 1\n  for i = 1, k do\n    if arr[i] > max_arr[i] then\n      max_arr[i] = arr[i]\n\
    \      max_idx = i\n    end\n  end\n  return max_arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2759v_wy.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2759v_wy.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp2759v_wy.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max = 0\n  for i = 1, k do\n    local element\
    \ = arr[i]\n    if element > max then\n      max = element\n    end\n  end\n \
    \ for i = 1, k do\n    local element = arr[i]\n    if element == max then\n  \
    \    table.insert(result, element)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjkc7hsb_.lua:38:\
    \ expected: {-4, -3, 5}\nactual: {5}\nstack traceback:\n\t/tmp/tmpjkc7hsb_.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n    local\
    \ max = {}\n    for i = 1, k do\n        local maxElement = nil\n        for j\
    \ = 1, #arr do\n            if arr[j] > maxElement then\n                maxElement\
    \ = arr[j]\n            end\n        end\n        max[i] = maxElement\n    end\n\
    \    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3,\
    \ 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf7c2va53.lua:21:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpf7c2va53.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmpf7c2va53.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\n  \n  -- Find the maximum element\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return them\n  local sorted_array =\
    \ table.copy(arr)\n  for i = 2, k do\n    table.insert(sorted_array, max_element)\n\
    \    max_element = arr[i]\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7m1tqrb.lua:31:\
    \ attempt to call a nil value (field 'copy')\nstack traceback:\n\t/tmp/tmpd7m1tqrb.lua:31:\
    \ in local 'candidate'\n\t/tmp/tmpd7m1tqrb.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local max_arr = {}\n  local max_idx = {}\n  for i = 1, k do\n    max_arr[i]\
    \ = arr[i]\n    max_idx[i] = i\n  end\n  for i = k, #arr do\n    local max_val\
    \ = arr[i]\n    for j = 1, k do\n      if max_val < max_arr[j] then\n        max_arr[j]\
    \ = max_val\n        max_idx[j] = i\n      end\n    end\n  end\n  return max_arr\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3g89f2cz.lua:39:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmp3g89f2cz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  local result\
    \ = {}\n  local max = 0\n  local i = 1\n  while i <= k do\n    if arr[i] > max\
    \ then\n      max = arr[i]\n    end\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= k do\n    if arr[j] > max then\n      max = arr[j]\n    end\n    j = j\
    \ + 1\n  end\n  local i = 1\n  while i <= k do\n    if arr[i] < max then\n   \
    \   table.insert(result, max)\n    end\n    i = i + 1\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_96e4lcg.lua:46:\
    \ expected: {-4, -3, 5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp_96e4lcg.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\n  \n  -- Find the maximum number\
    \ in the first k elements\n  local max_element = arr[1]\n  for i = 2, k do\n \
    \   if arr[i] > max_element then\n      max_element = arr[i]\n    end\n  end\n\
    \  \n  -- Sort the remaining elements and return the result\n  local sorted_arr\
    \ = {}\n  for i = 2, k do\n    table.insert(sorted_arr, arr[i])\n  end\n  table.sort(sorted_arr)\n\
    \  return sorted_arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = maximum\n    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4,\
    \ -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3,\
    \ 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123, -123, 20,\
    \ 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0,\
    \ 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13,\
    \ -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0,\
    \ 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1),\
    \ {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0sd3jfxd.lua:42:\
    \ expected: {-4, -3, 5}\nactual: {-4, 5}\nstack traceback:\n\t/tmp/tmp0sd3jfxd.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to #arr\"\
    )\n  local result = {}\n  local max_so_far = nil\n  for i = 1, k do\n    max_so_far\
    \ = arr[i] or max_so_far\n    result[i] = max_so_far\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
    \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
    \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1},\
    \ 1), {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2,\
    \ 20, 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1,\
    \ 2, 20})\n    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13,\
    \ -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2),\
    \ {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
    \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n\
    \    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjepj8cv1.lua:30:\
    \ expected: {-4, -3, 5}\nactual: {-3, -4, 5}\nstack traceback:\n\t/tmp/tmpjepj8cv1.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823655
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 0 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn53ndh6m.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
- exit_code: 1
  program: "-- Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n--\
    \ >>> maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4,\
    \ -4, 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1},\
    \ 1)\n-- {2}\n-- Note:\n-- 1. The length of the array will be in the range of\
    \ [1, 1000].\n-- 2. The elements in the array will be in the range of [-1000,\
    \ 1000].\n-- 3. 0 <= k <= len(arr)\nlocal function maximum(arr, k)\n  -- Base\
    \ case\n  if k == 1 then\n    return arr\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = maximum\n    lu.assertEquals(candidate({-3,\
    \ -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4, -4, 4}, 2), {4,\
    \ 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1), {2})\n    lu.assertEquals(candidate({123,\
    \ -123, 20, 0, 1, 2, -3}, 3), {2, 20, 123})\n    lu.assertEquals(candidate({-123,\
    \ 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n    lu.assertEquals(candidate({5, 15,\
    \ 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3, 5, 15})\n    lu.assertEquals(candidate({-1,\
    \ 0, 2, 5, 3, -10}, 2), {3, 5})\n    lu.assertEquals(candidate({1, 0, 5, -7},\
    \ 1), {5})\n    lu.assertEquals(candidate({4, -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10,\
    \ 10}, 2), {-10, 10})\n    lu.assertEquals(candidate({1, 2, 3, -23, 243, -400,\
    \ 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2tt_qymb.lua:38: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750311
