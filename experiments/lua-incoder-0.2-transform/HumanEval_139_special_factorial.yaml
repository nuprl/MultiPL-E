name: HumanEval_139_special_factorial
language: lua
prompt: "-- The Brazilian factorial is defined as:\n-- brazilian_factorial(n) = n!\
  \ * (n-1)! * (n-2)! * ... * 1!\n-- where n > 0\n-- For example:\n-- >>> special_factorial(4)\n\
  -- 288\n-- The function will receive an integer as input and should return the special\n\
  -- factorial of this integer.\nlocal function special_factorial(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = special_factorial\n\
  \    lu.assertEquals(candidate(4), 288)\n    lu.assertEquals(candidate(5), 34560)\n\
  \    lu.assertEquals(candidate(7), 125411328000)\n    lu.assertEquals(candidate(1),\
  \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n == 0 then\n    return 1\n  elseif n < 0 then\n    return nil\n\
    \  else\n    return n * special_factorial(n - 1)\n  end\nend", "  if n == 0 then\n\
    \    return 1\n  elseif n == 1 then\n    return 1\n  elseif n == 2 then\n    return\
    \ 2\n  elseif n == 3 then\n    return 6\n  elseif n == 4 then\n    return 24\n\
    \  elseif n == 5 then\n    return 120\n  elseif n == 6 then\n    return 720\n\
    \  elseif n == 7 then\n    return 5040\n  elseif n == 8 then\n    return 40320\n\
    \  elseif n == 9 then\n    return 362880\n  elseif n == 10 then\n    return 3628800\n\
    \  elseif n == 11 then\n    return 39916800\n  elseif n == 12 then\n    return\
    \ 479001600\n  elseif n == 13 then\n    return 6227020800\n  elseif n == 14 then\n\
    \    return 87178291200\n  elseif n == 15 then\n    return 1307674368000\n  elseif\
    \ n == 16 then\n    return 20922789888000\n  elseif n == 17 then\n    return 355687428096000\n\
    \  elseif n == 18 then\n    return 6402373705728000\n  elseif n == 19 then\n \
    \   return 121645100408832000\n  elseif n == 20 then\n    return 2432902008176640000\n\
    \  elseif n == 21 then\n    return 51090942171709440000\n  elseif n == 22 then\n\
    \    return 1124000727777607680000\n  elseif n == 23 then\n    return 25852016738884976640000\n\
    \  elseif n == 24 then\n    return 620448401733239439360000\n  elseif n == 25\
    \ then\n    return 15511210043330985984000000\n  elseif n == 26 then\n    return\
    \ 403291461126605635584000000\n  elseif n == 27 then\n    return 10888869450418352160768000000\n\
    \  elseif n == 28 then\n    return 304888344611713860501504000000\n  elseif n\
    \ == 29 then\n    return 8841761993739701954543616000000\n  elseif n == 30 then\n\
    \    return 265252859812191058636308480000000\n  elseif n == 31 then\n    return\
    \ 8222838654177922817725562880000000\n  elseif n == 32 then\n    return 1764574322217662576331878258080000000\n\
    \  elseif n == 33 then\n    return 6763759669", "  if n < 1 then return 1 end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "  if n < 0 then\n    error(\"Negative factorial not\
    \ allowed\")\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial =\
    \ factorial * i\n  end\n  return factorial\nend", "  if n < 0 then\n    error(\"\
    The argument must be positive\")\n  end\n  if n == 0 then\n    return 1\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "  if n < 0 then\n    return 0\n  end\n  local factorial\
    \ = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  if n < 1 then\n    return 1\n  else\n    return n * special_factorial(n\
    \ - 1)\n  end\nend", "  if n < 1 then return 0 end\n  local factorial = 1\n  for\
    \ i = 1, n do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local factorial = 1\n  for i =\
    \ 1, n do\n    factorial = factorial * i\n  end\n  return factorial\nend", " \
    \ if n < 0 then\n    error(\"Negative factorial not allowed.\")\n  end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend", "  if n == 0 then\n    return 1\n  elseif n == 1 then\n   \
    \ return 1\n  elseif n == 2 then\n    return 2\n  elseif n == 3 then\n    return\
    \ 6\n  elseif n == 4 then\n    return 24\n  elseif n == 5 then\n    return 120\n\
    \  elseif n == 6 then\n    return 720\n  elseif n == 7 then\n    return 5040\n\
    \  elseif n == 8 then\n    return 40320\n  elseif n == 9 then\n    return 362880\n\
    \  elseif n == 10 then\n    return 3628800\n  elseif n == 11 then\n    return\
    \ 39916800\n  elseif n == 12 then\n    return 479001600\n  elseif n == 13 then\n\
    \    return 6227020800\n  elseif n == 14 then\n    return 87178291200\n  elseif\
    \ n == 15 then\n    return 1307674368000\n  elseif n == 16 then\n    return 20922789888000\n\
    \  elseif n == 17 then\n    return 355687428096000\n  elseif n == 18 then\n  \
    \  return 6402373705728000\n  elseif n == 19 then\n    return 121645100408832000\n\
    \  elseif n == 20 then\n    return 2432902008176640000\n  elseif n == 21 then\n\
    \    return 51090942171709440000\n  elseif n == 22 then\n    return 1124000727777607680000\n\
    \  elseif n == 23 then\n    return 25852016738884976640000\n  elseif n == 24 then\n\
    \    return 620448401733239439360000\n  elseif n == 25 then\n    return 15511210043330985984000000\n\
    \  elseif n == 26 then\n    return 403291461126605635584000000\n  elseif n ==\
    \ 27 then\n    return 10888869450418352160768000000\n  elseif n == 28 then\n \
    \   return 304888344611713860501504000000\n  elseif n == 29 then\n    return 8841761993739701954543616000000\n\
    \  elseif n == 30 then\n    return 265252859812191058636308480000000\n  elseif\
    \ n == 31 then\n    return 8222838654177922817725562880000000\n  elseif n == 32\
    \ then\n    return 17641777817028823096939503360000000\n  elseif n == 33 then\n\
    \    return 351843720", "  if n < 0 then\n    return 0\n  end\n  local factorial\
    \ = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  assert(n > 0, \"The factorial of a negative number is not defined.\"\
    )\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * (i +\
    \ 1)\n  end\n  return factorial\nend", "  if n < 1 then return 0 end\n  local\
    \ factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n  return\
    \ factorial\nend", "  if n < 0 then\n    error(\"Negative factorials are not allowed\"\
    )\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial = factorial\
    \ * i\n  end\n  return factorial\nend", "  if n < 0 then\n    error(\"factorial\
    \ function only accepts positive integers\")\n  end\n  local factorial = 1\n \
    \ for i = 1, n do\n    factorial = factorial * i\n  end\n  return factorial\n\
    end", "  if n < 0 then\n    error(\"Negative factorial not allowed\")\n  end\n\
    \  local factorial = 1\n  for i = 1, n do\n    factorial = factorial * i\n  end\n\
    \  return factorial\nend", "  if n < 0 then\n    error(\"Negative factorials are\
    \ not allowed\")\n  end\n  local factorial = 1\n  for i = 1, n do\n    factorial\
    \ = factorial * i\n  end\n  return factorial\nend", "  assert(n > 0, \"The factorial\
    \ of a negative number is not defined.\")\n  local factorial = 1\n  for i = 1,\
    \ n do\n    factorial = factorial * (i - 1)\n  end\n  return factorial\nend",
  "  if n < 2 then\n    return 1\n  else\n    return n * special_factorial(n - 1)\n\
    \  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
