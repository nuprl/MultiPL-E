name: HumanEval_56_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"<\" and \">\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
  -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
  -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
  \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
  \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
  \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
  \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
  \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)',\
    \ '\\2')\n  local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\\
    1')\n  return opening_brackets == closing_brackets\nend", "   if brackets == '<'\
    \ then\n      return false\n   elseif brackets == '>' then\n      return true\n\
    \   else\n      return false\n   end\nend", "  local opening_brackets = brackets:gsub('(<)([^>]+)(>)',\
    \ '\\2')\n  local closing_brackets = brackets:gsub('(<)([^>]+)(>)', '\\1')\n \
    \ return opening_brackets ~= closing_brackets\nend", "  local opening_brackets\
    \ = brackets:gsub('>*$', '>')\n  local closing_brackets = brackets:gsub('^>*',\
    \ '<')\n  return opening_brackets:len() == closing_brackets:len()\nend", "  local\
    \ open_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local close_brackets =\
    \ brackets:gsub('(>)', '%s*%L+%L+')\n  return open_brackets:gsub('%L+', '>') ~=\
    \ close_brackets:gsub('%L+', '<')\nend", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend", "  local opening_brackets\
    \ = brackets:gsub('(<%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+)(%*)%>)', '%%%1%%%2%%%3')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, -1) == closing_brackets:sub(1,\
    \ -1)\nend", "  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local\
    \ closing_brackets = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:sub(1,\
    \ #opening_brackets) == closing_brackets\nend", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend", "  local opening_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets = brackets:gsub('(<)([^>]+)(>)',\
    \ '\\1')\n  return opening_brackets == closing_brackets\nend", "  local opening\
    \ = brackets:gsub('<', '(')\n  local closing = brackets:gsub('>', ')')\n  return\
    \ opening:len() == closing:len() and opening:sub(1, -1) == closing:sub(1, -1)\n\
    end", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i:len(i)+1] ~= closing_brackets[i:len(i)+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local opening_brackets\
    \ = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend", "  local opening_brackets\
    \ = brackets:gsub('%<([^>]+)>%', function(x)\n    return x:reverse()\n  end)\n\
    \  local closing_brackets = brackets:gsub('%<([^>]+)>%', function(x)\n    return\
    \ x:reverse()\n  end)\n  for i = 1, #opening_brackets do\n    if opening_brackets[i]\
    \ ~= closing_brackets[i] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local opening_brackets = brackets:gsub('(<)', '\\1')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end", "  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\1\\2')\n  local\
    \ closing_brackets = brackets:gsub('(<)([^>]+)$', '\\2\\1')\n  return opening_brackets\
    \ == closing_brackets\nend", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return\
    \ opening_brackets:find(closing_brackets) == nil\nend", "  local opening_brackets\
    \ = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end", "  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  local\
    \ opening_brackets_count = opening_brackets:gsub('%2','%1'):gsub('%1','%2'):gsub('%2','%1')\n\
    \  return opening_brackets_count == closing_brackets\nend", "  local opening_brackets\
    \ = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i:len(i)+1] ~= closing_brackets[i:len(i)+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
