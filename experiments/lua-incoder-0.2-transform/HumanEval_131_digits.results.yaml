language: lua
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrq1ih1d.lua:16:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpvrq1ih1d.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpvrq1ih1d.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local result = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      result =\
    \ result * i\n    end\n    n = n / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3h6h17a5.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp3h6h17a5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n /\
    \ 10) * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100\
    \ + digits(n % 100)\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdy_acjj.lua:26:\
    \ expected: 5, actual: 58\nstack traceback:\n\t/tmp/tmpcdy_acjj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrq1ih1d.lua:16:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpvrq1ih1d.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpvrq1ih1d.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n  for\
    \ digit = 1, n do\n    product = product * digit\n  end\n  return product\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_jcm2p9b.lua:25:\
    \ expected: 5, actual: 120\nstack traceback:\n\t/tmp/tmp_jcm2p9b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n \
    \   local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpudn1qtx0.lua:17:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpudn1qtx0.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpudn1qtx0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n \
    \   digit = n * 10 + digit\n    n = math.floor(n/10)\n  end\n  return digit\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunuldotc.lua:25:\
    \ expected: 5, actual: 50\nstack traceback:\n\t/tmp/tmpunuldotc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local digits = \"\"\n  local i = 1\n  while n > 0 do\n    digits = digits ..\
    \ string.format(\"%d\", n % 10)\n    n = math.floor(n / 10)\n  end\n  if n ==\
    \ 0 then\n    return 0\n  end\n  return tonumber(digits)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3asxzk83.lua:26:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3asxzk83.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n\
    \    n = n % 10\n  end\n  return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdei3rqo.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmdei3rqo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local result = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      result =\
    \ result * 2\n    end\n    n = n / 2\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw722zv2m.lua:24:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpw722zv2m.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif n\
    \ < 100 then\n    return n * 2\n  elseif n < 1000 then\n    return n * 3\n  elseif\
    \ n < 10000 then\n    return n * 5\n  elseif n < 100000 then\n    return n * 7\n\
    \  elseif n < 1000000 then\n    return n * 9\n  elseif n < 10000000 then\n   \
    \ return n * 11\n  elseif n < 100000000 then\n    return n * 13\n  elseif n <\
    \ 1000000000 then\n    return n * 17\n  else\n    return n * 19\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51w0c42t.lua:40:\
    \ expected: 5, actual: 108\nstack traceback:\n\t/tmp/tmp51w0c42t.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n /\
    \ 10) * 10 + n % 10\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwepk7ph.lua:24:\
    \ expected: 5, actual: 58\nstack traceback:\n\t/tmp/tmpcwepk7ph.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n \
    \   local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n   \
    \ return digits*10 + digits(remainder)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp4yzqr6p.lua:18:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpp4yzqr6p.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpp4yzqr6p.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphr0ycnr4.lua:22:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmphr0ycnr4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n \
    \   digit = digit * 10 + n % 10\n    n = n / 10\n  end\n  return digit\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiv6adkzv.lua:25:\
    \ expected: 5, actual: #Inf\nstack traceback:\n\t/tmp/tmpiv6adkzv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product\
    \ = product * i\n    end\n    n = n / 2\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhzaq4pk.lua:24:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmphhzaq4pk.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvrq1ih1d.lua:16:\
    \ attempt to call local 'digits' (a number value)\nstack traceback:\n\t/tmp/tmpvrq1ih1d.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpvrq1ih1d.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  local product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3byg5k64.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3byg5k64.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n /\
    \ 10) * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n / 100) * 100\
    \ + digits(n % 100)\n  else\n    return 0\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdy_acjj.lua:26:\
    \ expected: 5, actual: 58\nstack traceback:\n\t/tmp/tmpcdy_acjj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750428
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n\
    -- >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n\
    \  if n == 0 then\n    return 0\n  end\n  local n1 = math.floor(n)\n  local n2\
    \ = n - n1\n  local product = 1\n  while n2 > 0 do\n    product = product * 10\
    \ + n2\n    n2 = n2 - (n2 % 2)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1o22ku6i.lua:27:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp1o22ku6i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750457
