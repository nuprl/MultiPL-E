name: HumanEval_10_make_palindrome
language: lua
prompt: "-- Find the shortest palindrome that begins with a supplied string.\n-- Algorithm\
  \ idea is simple:\n-- - Find the longest postfix of supplied string that is a palindrome.\n\
  -- - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n-- >>> make_palindrome('')\n-- ''\n-- >>> make_palindrome('cat')\n\
  -- 'catac'\n-- >>> make_palindrome('cata')\n-- 'catac'\nlocal function make_palindrome(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
  \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
  \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local postfix = string\n  local palindrome = string\n  while true\
    \ do\n    local postfix = string.sub(postfix, 1, string.len(postfix) - 1)\n  \
    \  if string.sub(postfix, 1, string.len(postfix)) == string.sub(postfix, 1, string.len(postfix)\
    \ - 1) then\n      palindrome = palindrome .. string.sub(postfix, 1, string.len(postfix)\
    \ - 1) .. string.reverse(string.sub(postfix, string.len(postfix) - 1, string.len(postfix)))\n\
    \      break\n    end\n  end\n  return palindrome\nend", "    local palindrome\
    \ = string\n    local palindrome_length = #string\n    local palindrome_start\
    \ = #string\n    local palindrome_end = #string\n    local palindrome_prefix_length\
    \ = 0\n    local palindrome_suffix_length = 0\n    local palindrome_prefix_start\
    \ = #string\n    local palindrome_prefix_end = #string\n    while palindrome_length\
    \ > 1 do\n        local palindrome_prefix_length = palindrome_end - palindrome_start\n\
    \        local palindrome_suffix_length = palindrome_end - palindrome_prefix_start\n\
    \        local palindrome_prefix = string\n        local palindrome_suffix = string\n\
    \        local palindrome_prefix_start = palindrome_prefix_end\n        local\
    \ palindrome_prefix_end = palindrome_prefix_start + palindrome_prefix_length\n\
    \        local palindrome_suffix = string\n        local palindrome_suffix_start\
    \ = palindrome_suffix_end\n        local palindrome_suffix_end = palindrome_suffix_start\
    \ + palindrome_suffix_length\n        local palindrome_prefix = string\n     \
    \   local palindrome_suffix = string\n        local palindrome_prefix_length =\
    \ palindrome_end - palindrome_start\n        local palindrome_suffix_length =\
    \ palindrome_end - palindrome_prefix_start\n        local palindrome_prefix =\
    \ string\n        local palindrome_suffix = string\n        local palindrome_prefix_start\
    \ = palindrome_prefix_end\n        local palindrome_prefix_end = palindrome_prefix_start\
    \ + palindrome_prefix_length\n        local palindrome_suffix = string\n     \
    \   local palindrome_suffix_start = palindrome_suffix_end\n        local palindrome_suffix_end\
    \ = palindrome_suffix_start + palindrome_suffix_length\n        local palindrome_prefix\
    \ = string\n        local palindrome_suffix = string\n        local palindrome_prefix_length\
    \ = palindrome_end - palindrome_start\n        local palindrome_suffix_length\
    \ = palindrome_end - palindrome_prefix_start\n        local palindrome_prefix\
    \ = string\n        local palindrome_suffix = string\n        local palindrome_prefix_start\
    \ = palindrome_prefix_end\n        local palindrome_prefix_end = palindrome_prefix_start\
    \ + palindrome_prefix_length\n        local p", "    local postfix = string\n\
    \    local suffix = ''\n    local palindrome = ''\n    while true do\n       \
    \ postfix = string.sub(postfix, 1, string.len(postfix) - 1) .. suffix\n      \
    \  local reverse = string.sub(postfix, 1, string.len(postfix) - 1) .. suffix\n\
    \        if reverse == postfix then\n            palindrome = postfix .. suffix\n\
    \            break\n        end\n        suffix = reverse\n    end\n    return\
    \ palindrome\nend", "  local postfix = string\n  local suffix = ''\n  local palindrome\
    \ = ''\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_reverse = string.gsub(postfix,\
    \ \"^.\", \"\"):reverse()\n    local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".$\", \"\"):reverse()\n    local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n    local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n    if postfix_length == #postfix_reverse then\n   \
    \   postfix = postfix_reverse .. postfix\n      break\n    end\n    postfix =\
    \ postfix_reverse .. postfix\n  end\n  local postfix_length = #postfix\n  if postfix_length\
    \ == 0 then\n    return ''\n  end\n  local postfix_reverse = string.gsub(postfix,\
    \ \"^.\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"$\", \"\"):reverse()\n  local postfix_reverse = string.gsub(postfix_reverse,\
    \ \"^\", \"\"):reverse()\n  local postfix_reverse", "  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  while palindrome_length > 1 do\n    local\
    \ palindrome_postfix_length = #palindrome_postfix\n    local palindrome_prefix_length\
    \ = #palindrome_prefix\n    local palindrome_prefix_postfix = palindrome_prefix\n\
    \    local palindrome_prefix_postfix_length = #palindrome_prefix_postfix\n   \
    \ local palindrome_prefix_postfix_postfix = palindrome_prefix_postfix\n    local\
    \ palindrome_prefix_postfix_postfix_length = #palindrome_prefix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length =\
    \ #palindrome_prefix_postfix_postfix_postfix_postfix_postfix\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\n    local\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix =\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\n    local\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = palindrome_prefix_postfix_postfix_postfix_post", "    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = #string\n\
    \    for i = 1, length do\n        postfix = string..postfix\n        reverse\
    \ = reverse..string\n        if string.sub(reverse, i, i) ~= string.sub(postfix,\
    \ i, i) then\n            palindrome = palindrome..string.sub(reverse, i, i)\n\
    \        end\n    end\n    return palindrome\nend", "  local palindrome = string\n\
    \  local length = #string\n  local index = 1\n  while true do\n    local postfix\
    \ = string.sub(palindrome, index, index + 1)\n    local reverse = string.sub(postfix,\
    \ 1, #postfix - 1)\n    if reverse == postfix then\n      palindrome = string.sub(palindrome,\
    \ 1, index - 1)\n      break\n    end\n    index = index + 1\n  end\n  return\
    \ palindrome\nend", "  local palindrome = string\n  local prefix_length = 0\n\
    \  while palindrome ~= string.sub(string, 1, prefix_length) do\n    prefix_length\
    \ = prefix_length + 1\n  end\n  local postfix_length = 0\n  while palindrome ~=\
    \ string.sub(string, prefix_length + 1) do\n    postfix_length = postfix_length\
    \ + 1\n  end\n  local reversed_string = string.sub(string, 1, prefix_length +\
    \ postfix_length)\n  local reversed_palindrome = reversed_string\n  while reversed_palindrome\
    \ ~= string.sub(reversed_string, 1, prefix_length + postfix_length) do\n    reversed_palindrome\
    \ = reversed_palindrome .. string.sub(reversed_string, 1, prefix_length + postfix_length)\n\
    \  end\n  return reversed_palindrome\nend", "  -- If string is empty, return empty\
    \ string.\n  if string == '' then\n    return ''\n  end\n  -- Find the longest\
    \ postfix of supplied string that is a palindrome.\n  local postfix = string\n\
    \  local longest = 0\n  while true do\n    longest = longest + 1\n    local postfix\
    \ = string\n    for i = 1, longest do\n      postfix = string..string\n    end\n\
    \    -- If postfix is a palindrome, return it.\n    if string.gsub(postfix, '^(.-)$',\
    \ '') == string.gsub(string.gsub(postfix, '(.-)$', ''), '^(.-)$', '') then\n \
    \     return postfix\n    end\n  end\nend", "  local palindrome = string\n  local\
    \ length = #string\n  local index = 1\n  while index <= length do\n    local char\
    \ = string.sub(palindrome, index, index)\n    local reverse = string.sub(palindrome,\
    \ length - index, length - index)\n    if char == reverse then\n      palindrome\
    \ = palindrome .. reverse .. char\n      length = length - 1\n    else\n     \
    \ index = index + 1\n    end\n  end\n  return palindrome\nend", "  local postfix\
    \ = string\n  local suffix = ''\n  while true do\n    local reversed_postfix =\
    \ reverse(string)\n    if reversed_postfix == postfix then\n      break\n    end\n\
    \    postfix = reversed_postfix\n    suffix = suffix .. postfix..string\n  end\n\
    \  return suffix\nend", "    local palindrome = string\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = string\n    local longest_postfix_length_length\
    \ = string\n    local longest_postfix_length_length_length = string\n    local\
    \ longest_postfix_length_length_length_length = string\n    local longest_postfix_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n    local ", "  -- Find the longest postfix of supplied string that\
    \ is a palindrome.\n  local postfix = string\n  local longest = 0\n  while true\
    \ do\n    longest = longest + 1\n    local postfix_reverse = string.gsub(postfix,\
    \ \"(.)\", function (c)\n      return string.rep(c:reverse(), 1)\n    end)\n \
    \   if postfix_reverse == postfix then\n      break\n    end\n    postfix = postfix_reverse\n\
    \  end\n  -- Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n  local palindrome = string\n  for i = 1, longest\
    \ do\n    palindrome = palindrome .. string.rep(\"a\", i - 1)\n  end\n  return\
    \ palindrome\nend", "  local palindrome = string\n  local postfix = string\n \
    \ local reverse = string\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix)\
    \ - 1) ~= reverse then\n      break\n    end\n    reverse = reverse..string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n  end\n  postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - 1)\n  if string.len(postfix) > 1 then\n    palindrome = string.sub(palindrome,\
    \ 1, string.len(palindrome) - 1)\n    palindrome = palindrome..reverse\n  end\n\
    \  return palindrome\nend", "    local postfix = string\n    local reverse = ''\n\
    \    local prefix = ''\n    while true do\n        local index = string.find(postfix,\
    \ reverse)\n        if index == nil then\n            return prefix..reverse\n\
    \        end\n        prefix = prefix..string.sub(postfix, 1, index-1)\n     \
    \   reverse = string.sub(postfix, index+1)\n    end\nend", "  local palindrome\
    \ = string\n  local longest = string.len(string)\n  local longestPostfix = 0\n\
    \  local longestPrefix = 0\n  while true do\n    local postfix = string.sub(string,\
    \ longestPostfix, longestPostfix + longest)\n    if string.sub(postfix, longestPostfix,\
    \ longestPostfix + longest) == string.sub(postfix, longestPrefix, longestPrefix\
    \ + longest) then\n      longestPostfix = longestPostfix + longest\n      longestPrefix\
    \ = longestPrefix + longest\n    else\n      longestPostfix = longestPostfix +\
    \ 1\n      longestPrefix = longestPrefix + 1\n      palindrome = palindrome ..\
    \ string.sub(postfix, longestPrefix, longestPrefix)\n      break\n    end\n  end\n\
    \  return palindrome\nend", "    local palindrome = string\n    local postfix\
    \ = string\n    local reverse = string\n    local length = #string\n    for i\
    \ = 1, length do\n        postfix = string.sub(postfix, 1, i-1..-1)\n        reverse\
    \ = string.sub(reverse, 1, i-1..-1)\n        if string.sub(postfix, 1, i) == reverse\
    \ then\n            palindrome = string.sub(palindrome, 1, i-1..-1..string.reverse(string.sub(postfix,\
    \ 1, i)))\n        end\n    end\n    return palindrome\nend", "    local palindrome\
    \ = string\n    local postfix = string\n    local reverse = ''\n    local length\
    \ = #string\n    while length > 0 do\n        postfix = string\n        reverse\
    \ = reverse .. string\n        length = length - 1\n        while length > 0 do\n\
    \            if string[length] == string[length] then\n                postfix\
    \ = postfix .. string[length]\n                length = length - 1\n         \
    \   else\n                postfix = postfix .. string[length]\n              \
    \  length = length - 1\n                break\n            end\n        end\n\
    \        if postfix ~= reverse then\n            palindrome = palindrome .. postfix\
    \ .. reverse\n        end\n    end\n    return palindrome\nend", "    local palindrome\
    \ = string\n    local postfix = string\n    local reverse = string\n    local\
    \ length = #string\n    while length > 1 do\n        postfix = string.sub(postfix,\
    \ 1, length - 1)\n        reverse = string.sub(reverse, 1, length - 1)\n     \
    \   if reverse == postfix then\n            palindrome = string.sub(palindrome,\
    \ 1, length - 1)\n            length = length - 1\n        else\n            length\
    \ = length - 1\n        end\n    end\n    return palindrome\nend", "  local postfix\
    \ = string\n  local palindrome = string\n  local i = #string\n  while i do\n \
    \   local j = #postfix\n    while j > 0 do\n      local c = postfix:sub(j, j)\n\
    \      if c ~= c:reverse() then\n        postfix = postfix:sub(1, j-1)\n     \
    \   break\n      end\n      j = j - 1\n    end\n    i = i - 1\n    if i > 0 then\n\
    \      palindrome = palindrome .. string\n    end\n  end\n  return palindrome\n\
    end", "  local palindrome = string\n  local prefix_len = #string\n  local suffix_len\
    \ = #string\n  while suffix_len > 0 do\n    local suffix_len = suffix_len - 1\
    \ -- decrement by one since we already incremented above\n    local postfix =\
    \ string[prefix_len..suffix_len]\n    local reversed_postfix = string.reverse(postfix)\n\
    \    if reversed_postfix ~= postfix then\n      palindrome = palindrome .. reversed_postfix\n\
    \      prefix_len = prefix_len + 1\n      suffix_len = suffix_len - 1\n    end\n\
    \  end\n  return palindrome\nend", "  local palindrome = string\n  local palindrome_length\
    \ = #string\n  local palindrome_start = #palindrome\n  local palindrome_end =\
    \ #palindrome\n  while palindrome_length > 1 do\n    local palindrome_length =\
    \ palindrome_length - 1\n    local palindrome_start = palindrome_start - 1\n \
    \   local palindrome_end = palindrome_end - 1\n    local palindrome_reverse =\
    \ string.reverse(palindrome)\n    if palindrome_reverse == palindrome then\n \
    \     palindrome = palindrome .. palindrome_reverse\n      palindrome_length =\
    \ palindrome_length + 1\n      palindrome_start = palindrome_start + 1\n     \
    \ palindrome_end = palindrome_end + 1\n    end\n  end\n  return palindrome\nend",
  "  local palindrome = string\n  local palindrome_length = #string\n  local palindrome_start\
    \ = #palindrome\n  local palindrome_end = #palindrome\n  while palindrome_length\
    \ > 1 do\n    local palindrome_length = palindrome_length - 1\n    local palindrome_start\
    \ = palindrome_start + 1\n    local palindrome_end = palindrome_end - 1\n    local\
    \ palindrome_suffix = string[palindrome_start:palindrome_end]\n    local palindrome_prefix_length\
    \ = #palindrome_suffix\n    local palindrome_prefix_start = palindrome_start -\
    \ palindrome_prefix_length\n    local palindrome_prefix_end = palindrome_end -\
    \ palindrome_prefix_length\n    local palindrome_prefix_suffix = string[palindrome_prefix_start:palindrome_prefix_end]\n\
    \    local palindrome_prefix_suffix_length = #palindrome_prefix_suffix\n    local\
    \ palindrome_prefix_suffix_start = palindrome_prefix_end - palindrome_prefix_suffix_length\n\
    \    local palindrome_prefix_suffix_end = palindrome_end - palindrome_prefix_suffix_length\n\
    \    local palindrome_prefix_suffix_suffix = string[palindrome_prefix_suffix_start:palindrome_prefix_suffix_end]\n\
    \    local palindrome_prefix_suffix_suffix_length = #palindrome_prefix_suffix_suffix\n\
    \    local palindrome_prefix_suffix_suffix_start = palindrome_prefix_suffix_end\
    \ - palindrome_prefix_suffix_suffix_length\n    local palindrome_prefix_suffix_suffix_end\
    \ = palindrome_end - palindrome_prefix_suffix_suffix_length\n    local palindrome_prefix_suffix_suffix_suffix\
    \ = string[palindrome_prefix_suffix_suffix_start:palindrome_prefix_suffix_suffix_end]\n\
    \    local palindrome_prefix_suffix_suffix_suffix_length = #palindrome_prefix_suffix_suffix_suffix\n\
    \    local palindrome_prefix_suffix_suffix_suffix_start = palindrome_prefix_suffix_suffix_end\
    \ - palindrome_prefix_suffix_suffix_suffix_length\n    local palindrome_prefix_suffix_suffix_suffix_end\
    \ = palindrome_end - palindrome_prefix_suffix_suffix_suffix_length\n    local\
    \ palindrome_prefix_suffix_suffix_suffix_", "  -- Find longest postfix that is\
    \ a palindrome.\n  local postfix = string\n  while true do\n    local postfix\
    \ = string.sub(postfix, 1, string.len(postfix)-1)\n    if string.sub(postfix,\
    \ 1, string.len(postfix)) == string.sub(postfix, 1, string.len(postfix)-1) then\n\
    \      break\n    end\n  end\n  -- Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n  local reverse =\
    \ string.sub(postfix, 1, string.len(postfix)-1)\n  local reversed = reverse\n\
    \  while true do\n    local reversed = reversed...reverse\n    if string.sub(reversed,\
    \ 1, string.len(reversed)) == string.sub(reversed, 1, string.len(reversed)) then\n\
    \      break\n    end\n  end\n  return string..reversed\nend", "    local postfix\
    \ = string\n    local reversed_postfix = string\n    local longest_postfix = string\n\
    \    local longest_postfix_length = -1\n    local longest_postfix_postfix = string\n\
    \    local longest_postfix_postfix_length = -1\n    local longest_postfix_postfix_postfix\
    \ = string\n    local longest_postfix_postfix_postfix_length = -1\n    local longest_postfix_postfix_postfix_postfix\
    \ = string\n    local longest_postfix_postfix_postfix_postfix_length = -1\n  \
    \  local longest_postfix_postfix_postfix_postfix_postfix = string\n    local longest_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix = string\n \
    \   local longest_postfix_postfix_postfix_postfix_postfix_length = -1\n    local\
    \ longest_postfix_postfix_postfix_postfix_postfix_postfix = string\n    local\
    \ longest_postfix_postfix_postfix_postfix_postfix_postfix_length = -1\n    local\
    \ longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix = string\n \
    \   local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1\n    local longest_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = -1", "  local palindrome = string\n  local longest = string.len(string)\n\
    \  local suffix = ''\n  while string.len(palindrome) > 1 do\n    local postfix\
    \ = string.sub(palindrome, longest, string.len(palindrome))\n    local reverse\
    \ = string.sub(postfix, 1, string.len(postfix)-1)\n    palindrome = palindrome\
    \ .. reverse\n    longest = string.len(palindrome)\n    suffix = suffix .. reverse\n\
    \  end\n  return palindrome .. suffix\nend", "    local palindrome = string\n\
    \    local reversed_string = string\n    local prefix_length = 1\n    while reversed_string\
    \ ~= palindrome do\n        reversed_string = reversed_string..string[prefix_length]\n\
    \        prefix_length = prefix_length + 1\n    end\n    return string..reversed_string\n\
    end", "  local postfix = string\n  local suffix = ''\n  while true do\n    local\
    \ reversed_postfix = reverse(string)\n    if postfix ~= reversed_postfix then\n\
    \      postfix = reversed_postfix\n      suffix = string\n    else\n      break\n\
    \    end\n  end\n  return string..suffix\nend", "  local postfix = string\n  local\
    \ reverse = ''\n  local palindrome = ''\n  while true do\n    local postfix =\
    \ string\n    local reverse = ''\n    for i = #postfix, 1, -1 do\n      reverse\
    \ = reverse .. postfix:sub(i, i)\n    end\n    if reverse == postfix then\n  \
    \    palindrome = palindrome .. reverse\n      break\n    end\n  end\n  return\
    \ palindrome\nend", "    local palindrome = string\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local prefix_length = #string\n    while\
    \ true do\n        postfix = string\n        reversed_postfix = string\n     \
    \   for i = 1, prefix_length do\n            postfix = postfix .. string[i]\n\
    \        end\n        reversed_postfix = reversed_postfix .. string[prefix_length]\n\
    \        if palindrome == reversed_postfix then\n            return palindrome\n\
    \        end\n        prefix_length = prefix_length - 1\n    end\nend", "  local\
    \ postfix = string\n  local palindrome = string\n  local length = #string\n  local\
    \ index = 1\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_reverse = string.sub(postfix,\
    \ 1, postfix_length - 1)\n    local postfix_reverse_reverse = string.sub(postfix_reverse,\
    \ #postfix_reverse)\n    if postfix_reverse ~= postfix_reverse_reverse then\n\
    \      postfix = string.sub(postfix, 1, index - 1) .. postfix_reverse .. string.sub(postfix,\
    \ index + postfix_length + 1)\n      palindrome = string.sub(palindrome, 1, index\
    \ - 1) .. postfix_reverse_reverse .. string.sub(palindrome, index + postfix_length\
    \ + 1)\n    end\n    index = index + 1\n  end\n  return palindrome\nend", "  \
    \  local palindrome = string\n    local postfix = string\n    local reverse =\
    \ string\n    local i = #string\n    while i do\n        postfix = string\n  \
    \      reverse = string\n        i = i - 1\n        while i do\n            postfix\
    \ = string\n            reverse = string\n            i = i - 1\n            if\
    \ postfix ~= reverse then\n                break\n            end\n        end\n\
    \        palindrome = palindrome .. reverse .. postfix\n    end\n    return palindrome\n\
    end", "  local palindrome = string\n  local palindrome_length = #string\n  local\
    \ palindrome_postfix = string\n  local palindrome_postfix_length = #string\n \
    \ local palindrome_postfix_reverse = ''\n  local palindrome_postfix_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse = ''\n  local palindrome_prefix_reverse_length\
    \ = #string\n  local palindrome_prefix_length = 0\n  local palindrome_prefix_length_reverse\
    \ = 0\n  local palindrome_prefix_length_reverse_length = #string\n  local palindrome_prefix_reverse_index\
    \ = 0\n  local palindrome_prefix_reverse_index_length = #string\n  local palindrome_prefix_reverse_index_reverse\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_length = #string\n  local\
    \ palindrome_prefix_reverse_index_reverse_index = 0\n  local palindrome_prefix_reverse_index_reverse_index_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse = 0\n\
    \  local palindrome_prefix_reverse_index_reverse_index_reverse_length = #string\n\
    \  local palindrome_prefix_reverse_index_reverse_index_reverse_index = 0\n  local\
    \ palindrome_prefix_reverse_index_reverse_index_reverse_length = #string\n  local\
    \ palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse = 0\n  local\
    \ palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_length =\
    \ #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse\
    \ = 0\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_length\
    \ = #string\n  local palindrome_prefix_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index_reverse_index\
    \ = 0\n  ", "    local palindrome = string\n    local prefix_length = 1\n    local\
    \ suffix_length = 1\n    local suffix_index = #string\n    while suffix_index\
    \ > 1 do\n        local suffix_char = string[suffix_index - 1]\n        local\
    \ suffix_char = string.sub(suffix_char, suffix_index - 1, 1)\n        local suffix_char\
    \ = string.lower(suffix_char)\n        local suffix_char = string.upper(suffix_char)\n\
    \        local suffix_char = string.gsub(suffix_char, \"%c\", \"\")\n        local\
    \ suffix_char = string.gsub(suffix_char, \"%\", \"\") -- Remove all non-alphanumeric\
    \ characters.\n        local suffix_char = string.gsub(suffix_char, \"[%]\", \"\
    \")\n        local suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n  \
    \      local suffix_char = string.gsub(suffix_char, \"[%]\", \"\")\n        local\
    \ suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n        local suffix_char\
    \ = string.gsub(suffix_char, \"[%]\", \"\")\n        local suffix_char = string.gsub(suffix_char,\
    \ \"[%-]\", \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%]\"\
    , \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n\
    \        local suffix_char = string.gsub(suffix_char, \"[%]\", \"\")\n       \
    \ local suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n        local\
    \ suffix_char = string.gsub(suffix_char, \"[%]\", \"\")\n        local suffix_char\
    \ = string.gsub(suffix_char, \"[%-]\", \"\")\n        local suffix_char = string.gsub(suffix_char,\
    \ \"[%]\", \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%-]\"\
    , \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%]\", \"\")\n\
    \        local suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n      \
    \  local suffix_char = string.gsub(suffix_char, \"[%]\", \"\")\n        local\
    \ suffix_char = string.gsub(suffix_char, \"[%-]\", \"\")\n        local suffix_char\
    \ = string.gsub(suffix_char, \"[%]\", \"\")\n        local suffix_char = string.gsub(suffix_char,\
    \ \"[%-]\", \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%]\"\
    , \"\")\n        local suffix_char = string.gsub(suffix_char, \"[%-]", "  -- Find\
    \ longest postfix of string that is a palindrome.\n  local postfix = string\n\
    \  local i = #string\n  while i do\n    i = i - 1\n    postfix = postfix .. string[i]\n\
    \  end\n  -- Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n  postfix = postfix .. string[#string]\n  --\
    \ Return postfix.\n  return postfix\nend", "  local postfix = string\n  local\
    \ suffix = ''\n  while true do\n    local postfix_length = #postfix - 1\n    local\
    \ suffix_length = #suffix - 1\n    if postfix_length == 0 or suffix_length ==\
    \ 0 then\n      return string\n    end\n    if postfix_length < suffix_length\
    \ then\n      postfix = postfix..suffix\n      suffix = string\n    else\n   \
    \   postfix = postfix..suffix\n      suffix = suffix..string\n    end\n  end\n\
    end", "  -- If string is empty, return empty string.\n  if string == '' then\n\
    \    return ''\n  end", "    local palindrome = string\n    local prefix_length\
    \ = 0\n    local suffix_length = 0\n    local longest_postfix_length = 0\n   \
    \ local longest_postfix_string = ''\n    local longest_postfix_index = 0\n   \
    \ local longest_postfix_string_index = 0\n    local longest_postfix_string_index2\
    \ = 0\n    local longest_postfix_string_index3 = 0\n    local longest_postfix_string_index4\
    \ = 0\n    local longest_postfix_string_index5 = 0\n    local longest_postfix_string_index6\
    \ = 0\n    local longest_postfix_string_index7 = 0\n    local longest_postfix_string_index8\
    \ = 0\n    local longest_postfix_string_index9 = 0\n    local longest_postfix_string_index10\
    \ = 0\n    local longest_postfix_string_index11 = 0\n    local longest_postfix_string_index12\
    \ = 0\n    local longest_postfix_string_index13 = 0\n    local longest_postfix_string_index14\
    \ = 0\n    local longest_postfix_string_index15 = 0\n    local longest_postfix_string_index16\
    \ = 0\n    local longest_postfix_string_index17 = 0\n    local longest_postfix_string_index18\
    \ = 0\n    local longest_postfix_string_index19 = 0\n    local longest_postfix_string_index20\
    \ = 0\n    local longest_postfix_string_index21 = 0\n    local longest_postfix_string_index22\
    \ = 0\n    local longest_postfix_string_index23 = 0\n    local longest_postfix_string_index24\
    \ = 0\n    local longest_postfix_string_index25 = 0\n    local longest_postfix_string_index26\
    \ = 0\n    local longest_postfix_string_index27 = 0\n    local longest_postfix_string_index28\
    \ = 0\n    local longest_postfix_string_index29 = 0\n    local longest_postfix_string_index30\
    \ = 0\n    local longest_postfix_string_index31 = 0\n    local longest_postfix_string_index32\
    \ = 0\n    local longest_postfix_string_index33 = 0\n    local longest_postfix_string_index34\
    \ = 0\n    local longest_postfix_string_index35 = 0\n    local longest_postfix_string_index36\
    \ = 0\n    local longest_postfix_string_index37 = 0\n    local longest_postfix_string_index38\
    \ = 0\n    local longest_postfix_string_index39 = 0\n    local longest_postfix_string_index40\
    \ = 0\n    local longest_postfix_string_index41 = 0\n    local longest_postfix_string_index42\
    \ = 0\n    local ", "  local postfix = string\n  local palindrome = string\n \
    \ local prefix_length = 1\n  while palindrome ~= postfix do\n    prefix_length\
    \ = prefix_length + 1\n    postfix = string.sub(postfix, -prefix_length)\n   \
    \ palindrome = string.sub(palindrome, -prefix_length)\n  end\n  local reversed_postfix\
    \ = string.reverse(postfix)\n  return reversed_postfix .. palindrome\nend", " \
    \ local reversed_string = string\n  local longest_postfix_length = 1\n  for i\
    \ = 1, #string do\n    local postfix_length = #string - i\n    if postfix_length\
    \ >= longest_postfix_length then\n      longest_postfix_length = postfix_length\n\
    \      reversed_string = reversed_string..string[#string-i..i]\n    end\n  end\n\
    \  return reversed_string\nend", "  local longest, longestPrefix, longestSuffix\
    \ = 0, 0, 0\n  for i = 1, #string do\n    local prefix = string:sub(i, i)\n  \
    \  local suffix = string:sub(i + 1, #string)\n    local reversedPrefix = prefix:reverse()\n\
    \    local reversedSuffix = suffix:reverse()\n    if prefix ~= reversedPrefix\
    \ then\n      longest = i\n      longestPrefix = prefix\n      longestSuffix =\
    \ suffix\n    end\n    if suffix ~= reversedSuffix then\n      longest = i\n \
    \     longestPrefix = prefix\n      longestSuffix = suffix\n    end\n  end\n \
    \ if longest == 0 then\n    return string\n  end\n  local palindrome = string\n\
    \  local longestPalindrome = string\n  for i = longest - longestPrefix + 1, longest,\
    \ -1 do\n    palindrome = palindrome:sub(i, i + longestSuffix)\n    longestPalindrome\
    \ = longestPalindrome:sub(i, i + longestSuffix)\n  end\n  return palindrome\n\
    end", "  local palindrome = string\n  local prefix_length = 1\n  while prefix_length\
    \ <= string.len(string) do\n    local postfix_length = string.len(string) - prefix_length\n\
    \    local postfix = string.sub(string,prefix_length,prefix_length + postfix_length)\n\
    \    local reversed_postfix = string.reverse(postfix)\n    if reversed_postfix\
    \ ~= postfix then\n      palindrome = palindrome .. reversed_postfix\n    end\n\
    \    prefix_length = prefix_length + postfix_length\n  end\n  return palindrome\n\
    end", "  local reversed_string = string\n  local longest_postfix_length = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  for\
    \ i = 1, #string do\n    local postfix_length = string:sub(i, i)\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_string = string\n    for\
    \ j = 1, postfix_length do\n      postfix_string = postfix_string .. string:sub(i,\
    \ i + j)\n    end\n    local postfix_reversed_string = postfix_string:reverse()\n\
    \    if postfix_reversed_string == postfix_string then\n      longest_postfix_length\
    \ = postfix_length\n      longest_postfix_string = postfix_string\n      longest_postfix_index\
    \ = i\n    end\n  end\n  if longest_postfix_length == 0 then\n    return ''\n\
    \  end\n  local postfix_string = string\n  for j = 1, longest_postfix_length do\n\
    \    postfix_string = postfix_string .. string:sub(longest_postfix_index, longest_postfix_index\
    \ + j)\n  end\n  return postfix_string\nend", "    local palindrome = string\n\
    \    local postfix = string\n    local reversed_postfix = string\n    local prefix_length\
    \ = #string\n    while true do\n        postfix = string.sub(postfix, 1, prefix_length-1)\n\
    \        reversed_postfix = string.sub(reversed_postfix, 1, #reversed_postfix-1)\n\
    \        if postfix ~= reversed_postfix then\n            palindrome = palindrome\
    \ .. reversed_postfix\n            break\n        end\n        prefix_length =\
    \ prefix_length - 1\n    end\n    return palindrome\nend", "  local palindrome\
    \ = string\n  local length = #string\n  local index = 1\n  while index <= length\
    \ do\n    local prefix = string\n    while index <= length do\n      prefix =\
    \ prefix .. string[index + 1]\n      index = index + 1\n    end\n    local suffix\
    \ = string\n    while index <= length do\n      suffix = suffix .. string[index\
    \ + 1]\n      index = index + 1\n    end\n    if palindrome == prefix .. suffix\
    \ then\n      palindrome = prefix .. reverse(palindrome) .. suffix\n    end\n\
    \  end\n  return palindrome\nend", "  -- Find the longest postfix of supplied\
    \ string that is a palindrome.\n  local postfix = string\n  local longest = 0\n\
    \  while true do\n    longest = longest + 1\n    local postfix_reverse = string.sub(postfix,\
    \ 1, longest)\n    if postfix_reverse == string.sub(postfix, longest, longest)\
    \ then\n      break\n    end\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  postfix = string.sub(postfix,\
    \ longest, #postfix)\n  postfix = postfix .. string.sub(postfix, 1, longest) ..\
    \ string.reverse(string.sub(postfix, longest))\n  return postfix\nend", "    local\
    \ palindrome = string\n    local postfix = string\n    local reversed_postfix\
    \ = string\n    local longest_postfix = string\n    local longest_postfix_length\
    \ = -1\n    local longest_postfix_start = -1\n    local longest_postfix_end =\
    \ -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    local longest_postfix_end_index\
    \ = -1\n    local longest_postfix_start_index = -1\n    ", "  -- Find the longest\
    \ postfix that is a palindrome.\n  local postfix = string\n  local longest_postfix\
    \ = string\n  local longest_postfix_length = #string\n  local longest_postfix_index\
    \ = 1\n  for i = 1, #string do\n    if string[i] ~= string[#string] then\n   \
    \   longest_postfix = string\n      longest_postfix_length = #string\n      longest_postfix_index\
    \ = i\n    end\n  end\n  -- Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n  local reversed_prefix =\
    \ string\n  local reversed_prefix_length = #string\n  for i = 1, longest_postfix_length\
    \ do\n    reversed_prefix = string\n    reversed_prefix_length = #string\n   \
    \ for j = 1, longest_postfix_index do\n      reversed_prefix = reversed_prefix..string[j]\n\
    \    end\n    if longest_postfix_length < #string then\n      reversed_prefix\
    \ = reversed_prefix..string[#string]\n    end\n  end\n  -- Return the palindrome\
    \ that begins with the supplied string.\n  return reversed_prefix..string..reversed_prefix\n\
    end", "    local palindrome = string\n    local prefix_length = 1\n    while palindrome\
    \ ~= string.sub(string, 1, prefix_length) do\n        prefix_length = prefix_length\
    \ + 1\n    end\n    local postfix_length = 1\n    while palindrome ~= string.sub(string,\
    \ prefix_length, string) do\n        postfix_length = postfix_length + 1\n   \
    \ end\n    local reversed_string = string.sub(string, 1, prefix_length) .. string.reverse(string.sub(string,\
    \ prefix_length, postfix_length))\n    return palindrome .. reversed_string\n\
    end", "  local palindrome = string\n  local postfix = string\n  local reverse\
    \ = string\n  local i, j = 1, #string\n  while i <= j do\n    if string[i] ~=\
    \ string[j] then\n      postfix = string..reverse\n      reverse = string..postfix\n\
    \      break\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return palindrome..reverse\n\
    end", "  local postfix = string\n  local suffix = ''\n  local longest_postfix\
    \ = 1\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_reverse = string.gsub(postfix,\
    \ \"^.\", \"\"):reverse()\n    local postfix_reverse = string.gsub(postfix_reverse,\
    \ \".$\", \"\")\n    if postfix_length == longest_postfix then\n      postfix\
    \ = postfix_reverse .. suffix\n      longest_postfix = postfix_length\n    else\n\
    \      postfix = postfix_reverse .. suffix\n      longest_postfix = postfix_length\n\
    \    end\n  end\n  return postfix .. suffix\nend", "    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = -1\n    local longest_postfix_start_index = -1\n\
    \    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index = 0\n    local longest_postfix_start_index\
    \ = 0\n    local longest_postfix_end_index", "  -- Find the longest postfix of\
    \ supplied string that is a palindrome.\n  local function find_longest_palindrome(string,\
    \ palindrome)\n    local function is_palindrome(string, palindrome)\n      --\
    \ Return true if the supplied string is a palindrome.\n      -- If supplied string\
    \ is a palindrome return true, otherwise false.\n      -- If supplied string is\
    \ not a palindrome return false, false.\n      -- If supplied string is a palindrome\
    \ and has same length as palindrome return true, otherwise false.\n      return\
    \ string.sub(palindrome, 1, string.len(palindrome))\n        == string.sub(string,\
    \ 1, string.len(string))\n    end\n    local function find_longest_palindrome_helper(string,\
    \ palindrome)\n      -- If supplied string is a palindrome return true, otherwise\
    \ false.\n      -- If supplied string is not a palindrome return false, false.\n\
    \      -- If supplied string is a palindrome and has same length as palindrome\
    \ return true, otherwise false.\n      if is_palindrome(string, palindrome) then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   local function find_longest_palindrome_helper(string, palindrome)\n      --\
    \ If supplied string is a palindrome return true, otherwise false.\n      -- If\
    \ supplied string is not a palindrome return false, false.\n      -- If supplied\
    \ string is a palindrome and has same length as palindrome return true, otherwise\
    \ false.\n      if is_palindrome(string, palindrome) then\n        return true\n\
    \      else\n        return false\n      end\n    end\n    local function find_longest_palindrome_helper(string,\
    \ palindrome)\n      -- If supplied string is a palindrome return true, otherwise\
    \ false.\n      -- If supplied string is not a palindrome return false, false.\n\
    \      -- If supplied string is a palindrome and has same length as palindrome\
    \ return true, otherwise false.\n      if is_palindrome(string, palindrome) then\n\
    \        return true\n      else\n        return false\n      end\n    end\n \
    \   local function find_longest_palindrome_helper(string, palindrome)\n      --\
    \ If supplied string is a palindrome return true, otherwise false.\n      -- If\
    \ supplied string is not a palindrome return false, false.\n      -- If supplied\
    \ string is a palindrome and has same length as palindrome return true, otherwise\
    \ false.\n      if ", "  local palindrome = string\n  local prefix_length = 1\n\
    \  while palindrome ~= string.reverse do\n    prefix_length = prefix_length +\
    \ 1\n    palindrome = string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. string.reverse\
    \ .. string.reverse .. string.reverse .. string.reverse .. string.reverse .. ",
  "  local postfix = string\n  local palindrome = string\n  local i = #string\n  while\
    \ i do\n    local j = #postfix\n    while j > 0 do\n      if string.sub(palindrome,\
    \ j, j + 1) ~= string.sub(postfix, j, j + 1) then\n        postfix = string.sub(postfix,\
    \ 1, j - 1) .. string.sub(postfix, j + 1, #postfix)\n        break\n      end\n\
    \      j = j - 1\n    end\n    i = i - 1\n    palindrome = string.sub(palindrome,\
    \ 1, #palindrome) .. postfix\n  end\n  return palindrome\nend", "    local postfix\
    \ = string\n    local reverse = ''\n    local palindrome = ''\n    while #postfix\
    \ > 0 do\n        local index = #postfix - 1\n        local char = postfix[index]\n\
    \        if char == reverse then\n            palindrome = palindrome .. char\n\
    \        else\n            reverse = reverse .. char\n        end\n        postfix\
    \ = postfix:sub(1, index)\n    end\n    return palindrome\nend", "  local palindrome\
    \ = string\n  local postfix = string\n  local reversed_postfix = string\n  local\
    \ longest_postfix = string\n  local longest_postfix_length = -1\n  local longest_postfix_start\
    \ = -1\n  local longest_postfix_end = -1\n  local longest_postfix_start_length\
    \ = -1\n  local longest_postfix_end_length = -1\n  local longest_postfix_start_start\
    \ = -1\n  local longest_postfix_end_start = -1\n  local longest_postfix_start_end\
    \ = -1\n  local longest_postfix_end_end = -1\n  local longest_postfix_start_start_length\
    \ = -1\n  local longest_postfix_end_start_length = -1\n  local longest_postfix_start_end_length\
    \ = -1\n  local longest_postfix_end_end_length = -1\n  local longest_postfix_start_start_start\
    \ = -1\n  local longest_postfix_end_start_start = -1\n  local longest_postfix_start_end_start\
    \ = -1\n  local longest_postfix_end_end_start = -1\n  local longest_postfix_start_start_end\
    \ = -1\n  local longest_postfix_end_start_end = -1\n  local longest_postfix_start_end_end\
    \ = -1\n  local longest_postfix_start_start_end_length = -1\n  local longest_postfix_end_start_end_length\
    \ = -1\n  local longest_postfix_start_end_end_length = -1\n  local longest_postfix_end_end_end_length\
    \ = -1\n  local longest_postfix_start_start_end_start = -1\n  local longest_postfix_end_start_start_end\
    \ = -1\n  local longest_postfix_start_end_end_start = -1\n  local longest_postfix_end_end_end_start\
    \ = -1\n  local longest_postfix_start_start_end_end = -1\n  local longest_postfix_end_start_end_end\
    \ = -1\n  local longest_postfix_start_end_end_end = -1\n  local longest_postfix_start_start_end_end_length\
    \ = -1\n  local longest_postfix_end_start_end_end_length = -1\n  local longest_postfix_start_end_end_end_length\
    \ = -1\n  local longest_postfix_end_end_end_end_length = -1\n  local longest_postfix_start_start_end_end_start\
    \ = -1\n  local longest_postfix_end_start_start_end_end = -1\n  local longest_postfix_start_end_end_end_start\
    \ = -1\n  local longest_postfix_end_end_end_end_start = -1\n  local longest_postfix_start_end_end_end_end\
    \ = -1\n  local longest_postfix_start_end_end_end_end = -1\n  local longest_postfix_start_end_",
  "  local postfix = string\n  local reverse = ''\n  while true do\n    local postfix\
    \ = string.sub(postfix, 1, string.len(postfix) - 2)\n    if string.sub(postfix,\
    \ 1, string.len(postfix) - 2) ~= reverse then\n      reverse = reverse .. postfix\n\
    \      break\n    end\n  end\n  return string .. reverse\nend", "  local palindrome\
    \ = string\n  local prefix_length = 0\n  local suffix_length = 0\n  local reversed_string\
    \ = ''\n  while palindrome ~= '' do\n    local postfix = palindrome:sub(1, prefix_length)\n\
    \    local reversed_postfix = reversed_string:sub(1, reversed_string:len()-suffix_length)\n\
    \    if postfix ~= reversed_postfix then\n      palindrome = palindrome:sub(2)\n\
    \      prefix_length = prefix_length + 1\n      reversed_string = reversed_string\
    \ .. postfix:reverse()\n      suffix_length = suffix_length + 1\n    else\n  \
    \    palindrome = palindrome:sub(3)\n      prefix_length = prefix_length + 1\n\
    \    end\n  end\n  return reversed_string\nend", "  -- If string is empty, return\
    \ empty string.\n  if string == '' then\n    return ''\n  end", "  -- If string\
    \ is empty, return empty string.\n  if string == '' then\n    return ''\n  end",
  "    local postfix = string\n    local suffix = ''\n    while true do\n        local\
    \ reversed_postfix = reverse(string)\n        local palindrome = postfix + reversed_postfix\n\
    \        if palindrome == string then\n            return palindrome\n       \
    \ end\n        postfix = suffix\n        suffix = reversed_postfix\n    end\n\
    end", "  local palindrome = string\n  local prefix_length = 0\n  while palindrome\
    \ ~= string.reverse do\n    prefix_length = prefix_length + 1\n    palindrome\
    \ = palindrome .. string.reverse .. string.sub(palindrome, prefix_length)\n  end\n\
    \  return palindrome\nend", "  local palindrome = string\n  local palindrome_length\
    \ = #string\n  local palindrome_postfix = string\n  local palindrome_postfix_length\
    \ = #string\n  local palindrome_postfix_reverse = ''\n  local palindrome_postfix_reverse_length\
    \ = #string\n  local palindrome_postfix_reverse_length2 = 0\n  local palindrome_postfix_reverse_length3\
    \ = 0\n  local palindrome_postfix_reverse_length4 = 0\n  local palindrome_postfix_reverse_length5\
    \ = 0\n  local palindrome_postfix_reverse_length6 = 0\n  local palindrome_postfix_reverse_length7\
    \ = 0\n  local palindrome_postfix_reverse_length8 = 0\n  local palindrome_postfix_reverse_length9\
    \ = 0\n  local palindrome_postfix_reverse_length10 = 0\n  local palindrome_postfix_reverse_length11\
    \ = 0\n  local palindrome_postfix_reverse_length12 = 0\n  local palindrome_postfix_reverse_length13\
    \ = 0\n  local palindrome_postfix_reverse_length14 = 0\n  local palindrome_postfix_reverse_length15\
    \ = 0\n  local palindrome_postfix_reverse_length16 = 0\n  local palindrome_postfix_reverse_length17\
    \ = 0\n  local palindrome_postfix_reverse_length18 = 0\n  local palindrome_postfix_reverse_length19\
    \ = 0\n  local palindrome_postfix_reverse_length20 = 0\n  local palindrome_postfix_reverse_length21\
    \ = 0\n  local palindrome_postfix_reverse_length22 = 0\n  local palindrome_postfix_reverse_length23\
    \ = 0\n  local palindrome_postfix_reverse_length24 = 0\n  local palindrome_postfix_reverse_length25\
    \ = 0\n  local palindrome_postfix_reverse_length26 = 0\n  local palindrome_postfix_reverse_length27\
    \ = 0\n  local palindrome_postfix_reverse_length28 = 0\n  local palindrome_postfix_reverse_length29\
    \ = 0\n  local palindrome_postfix_reverse_length30 = 0\n  local palindrome_postfix_reverse_length31\
    \ = 0\n  local palindrome_postfix_reverse_length32 = 0\n  local palindrome_postfix_reverse_length33\
    \ = 0\n  local palindrome_postfix_reverse_length34 = 0\n  local palindrome_postfix_reverse_length35\
    \ = 0\n  local palin", "  local palindrome = string\n  local length = #string\n\
    \  local index = 1\n  while index <= length do\n    local substring = string.sub(palindrome,\
    \ index, index)\n    local reverse = string.sub(substring, 1, #substring)\n  \
    \  if reverse == substring then\n      palindrome = string.sub(palindrome, 1,\
    \ #palindrome)\n      index = index + 1\n    else\n      palindrome = string.sub(palindrome,\
    \ #palindrome + 1)\n      index = index + 1\n    end\n  end\n  return palindrome\n\
    end", "    local palindrome = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = 1\n    local longest_postfix_index = 1\n    local\
    \ longest_postfix_index_length = 1\n    while longest_postfix_index <= #string\
    \ do\n        local postfix = string\n        postfix = string.sub(postfix, 1,\
    \ longest_postfix_index)\n        postfix = string.sub(postfix, longest_postfix_index\
    \ + 1, #postfix)\n        postfix = string.sub(postfix, 1, longest_postfix_index_length)\n\
    \        postfix = string.sub(postfix, longest_postfix_index_length + 1, #postfix)\n\
    \        postfix = string.sub(postfix, 1, longest_postfix_length)\n        postfix\
    \ = string.sub(postfix, longest_postfix_length + 1, #postfix)\n        postfix\
    \ = string.sub(postfix, 1, #postfix)\n        postfix = string.sub(postfix, #postfix,\
    \ #postfix)\n        if string.sub(postfix, 1, #postfix) == postfix then\n   \
    \         longest_postfix_length = #postfix\n            longest_postfix_index\
    \ = longest_postfix_index + 1\n            longest_postfix_index_length = longest_postfix_index_length\
    \ + 1\n        else\n            longest_postfix_length = #postfix\n         \
    \   longest_postfix_index = longest_postfix_index + 1\n            longest_postfix_index_length\
    \ = longest_postfix_index_length + 1\n        end\n    end\n    palindrome = string.sub(palindrome,\
    \ 1, #longest_postfix_index)\n    palindrome = string.sub(palindrome, longest_postfix_index\
    \ + 1, #palindrome)\n    palindrome = string.sub(palindrome, 1, #longest_postfix_index_length)\n\
    \    palindrome = string.sub(palindrome, longest_postfix_index_length + 1, #palindrome)\n\
    \    palindrome = string.sub(palindrome, 1, #longest_postfix_length)\n    palindrome\
    \ = string.sub(palindrome, longest_postfix_length + 1, #palindrome)\n    palindrome\
    \ = string.sub(palindrome, 1, #palindrome)\n    palindrome = string.sub(palindrome,\
    \ #palindrome, #palindrome)\n    return palindrome\nend", "    local postfix =\
    \ string\n    local reverse = ''\n    local palindrome = ''\n    while true do\n\
    \        local index = string.find(postfix, reverse)\n        if index == nil\
    \ then\n            palindrome = palindrome .. reverse\n            break\n  \
    \      end\n        postfix = string.sub(postfix, index + 1)\n        reverse\
    \ = string.sub(postfix, 1, index - 1)\n    end\n    return palindrome\nend", " \
    \ local postfix = string\n  local longest = 0\n  while true do\n    local reverse\
    \ = string.gsub(postfix, '.', function(c) return c:reverse() end)\n    if reverse\
    \ == postfix then\n      return postfix\n    end\n    longest = longest > reverse\
    \ and longest or reverse\n    postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - longest)\n  end\nend", "  local palindrome = string\n  local suffix = ''\n\
    \  local longest_postfix = 1\n  while palindrome ~= '' do\n    longest_postfix\
    \ = longest_postfix + 1\n    suffix = suffix .. string.rep('c', longest_postfix)\n\
    \    palindrome = string.sub(palindrome, 1, string.len(palindrome) - longest_postfix)\n\
    \  end\n  suffix = suffix .. string.rep('c', longest_postfix - 1)\n  return string.sub(palindrome,\
    \ 1, string.len(palindrome) - longest_postfix) .. suffix\nend", "  local palindrome\
    \ = string\n  local longest_postfix = string\n  local longest_postfix_length =\
    \ #string\n  local longest_postfix_suffix_length = #string\n  local longest_postfix_suffix_reversed\
    \ = string\n  local longest_postfix_suffix_reversed_length = #string\n  local\
    \ longest_postfix_suffix_reversed_reversed = string\n  local longest_postfix_suffix_reversed_reversed_length\
    \ = #string\n  local longest_postfix_suffix_reversed_reversed_reversed = string\n\
    \  local longest_postfix_suffix_reversed_reversed_reversed_length = #string\n\
    \  local longest_postfix_suffix_reversed_reversed_reversed_reversed = string\n\
    \  local longest_postfix_suffix_reversed_reversed_reversed_reversed_length = #string\n\
    \  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed =\
    \ string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "    local palindrome = string\n    local palindrome_len = #string\n    local palindrome_postfix\
    \ = string\n    local palindrome_postfix_len = #string\n    local palindrome_postfix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_len = #string\n    local palindrome_postfix_reverse_len2\
    \ = 0\n    local palindrome_postfix_reverse2 = ''\n    local palindrome_postfix_reverse2_len\
    \ = #string\n    local palindrome_postfix_reverse2_len2 = 0\n    local palindrome_postfix_reverse3\
    \ = ''\n    local palindrome_postfix_reverse3_len = #string\n    local palindrome_postfix_reverse3_len2\
    \ = 0\n    local palindrome_postfix_reverse4 = ''\n    local palindrome_postfix_reverse4_len\
    \ = #string\n    local palindrome_postfix_reverse4_len2 = 0\n    local palindrome_postfix_reverse5\
    \ = ''\n    local palindrome_postfix_reverse5_len = #string\n    local palindrome_postfix_reverse5_len2\
    \ = 0\n    local palindrome_postfix_reverse6 = ''\n    local palindrome_postfix_reverse6_len\
    \ = #string\n    local palindrome_postfix_reverse6_len2 = 0\n    local palindrome_postfix_reverse7\
    \ = ''\n    local palindrome_postfix_reverse7_len = #string\n    local palindrome_postfix_reverse7_len2\
    \ = 0\n    local palindrome_postfix_reverse8 = ''\n    local palindrome_postfix_reverse8_len\
    \ = #string\n    local palindrome_postfix_reverse8_len2 = 0\n    local palindrome_postfix_reverse9\
    \ = ''\n    local palindrome_postfix_reverse9_len = #string\n    local palindrome_postfix_reverse9_len2\
    \ = 0\n    local palindrome_postfix_reverse10 = ''\n    local palindrome_postfix_reverse10_len\
    \ = #string\n    local palindrome_postfix_reverse10_len2 = 0\n    local palindrome_postfix_reverse11\
    \ = ''\n    local palindrome_postfix_reverse11_len = #string\n    local palindrome_postfix_reverse11_len2\
    \ = 0\n    local palindrome_postfix_reverse12 = ''\n    local palindrome_postfix_reverse12_len\
    \ = #string\n    local palindrome_post", "  local palindrome = string\n  local\
    \ prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length = 0\n\
    \  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed = ''\n\
    \  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed = ''\n\
    \  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''\n  local prefix_length = 0\n  local suffix_length = 0\n  local palindrome_length\
    \ = 0\n  local suffix_start = 0\n  local suffix_end = 0\n  local suffix_reversed\
    \ = ''\n  local prefix_start = 0\n  local prefix_end = 0\n  local prefix_reversed\
    \ = ''", "  -- Find the longest postfix that is a palindrome.\n  local postfix\
    \ = string\n  local longest = 0\n  local longestLength = 0\n  for i = #string\
    \ - 1, 1, -1 do\n    local length = #string - i\n    if length > longest then\n\
    \      longest = length\n      longestLength = i\n    end\n  end\n  longest =\
    \ longest - 1\n  longestLength = longestLength + 1\n  -- Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local reverse = string\n  for i = 1, longestLength do\n    reverse = reverse..string[longestLength-i]\n\
    \  end\n  return reverse..postfix\nend", "    local postfix = string\n    local\
    \ reverse = ''\n    local palindrome = ''\n    while true do\n        local index\
    \ = string.find(postfix, reverse)\n        if index == nil then\n            palindrome\
    \ = palindrome .. postfix .. reverse\n            break\n        end\n       \
    \ postfix = string.sub(postfix, index + 1, #postfix)\n        reverse = string.sub(reverse,\
    \ 1, #reverse)\n    end\n    return palindrome\nend", "  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local length = #string\n\
    \  while length > 1 do\n    local mid = math.floor(length / 2)\n    postfix =\
    \ string.sub(string, mid, mid+1)\n    reverse = string.sub(reverse, mid, mid+1)\n\
    \    if string.sub(postfix, 1, mid) == reverse then\n      palindrome = string.sub(palindrome,\
    \ mid+1, #palindrome)\n      length = length - mid\n    else\n      length = length\
    \ - mid\n    end\n  end\n  return palindrome\nend", "  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_prefix_length = #string\n\
    \  local palindrome_suffix_length = #string\n  local palindrome_prefix_reverse\
    \ = ''\n  local palindrome_suffix_reverse = ''\n  local palindrome_prefix_reverse_index\
    \ = 0\n  local palindrome_suffix_reverse_index = 0\n  while palindrome_prefix_reverse_index\
    \ < palindrome_prefix_length do\n    local palindrome_prefix_reverse_char = palindrome_prefix:sub(palindrome_prefix_reverse_index,\
    \ palindrome_prefix_reverse_index + 1)\n    local palindrome_suffix_reverse_char\
    \ = palindrome_suffix:sub(palindrome_suffix_reverse_index, palindrome_suffix_reverse_index\
    \ + 1)\n    if palindrome_prefix_reverse_char == palindrome_suffix_reverse_char\
    \ then\n      palindrome_prefix_reverse = palindrome_prefix:sub(0, palindrome_prefix_reverse_index\
    \ - 1)\n      palindrome_suffix_reverse = palindrome_suffix:sub(palindrome_suffix_reverse_index\
    \ + 1, palindrome_suffix_length)\n      palindrome_prefix_reverse_index = palindrome_prefix_reverse_index\
    \ + 1\n      palindrome_suffix_reverse_index = palindrome_suffix_reverse_index\
    \ + 1\n    else\n      palindrome_prefix_reverse = palindrome_prefix:sub(palindrome_prefix_reverse_index\
    \ + 1, palindrome_prefix_length)\n      palindrome_suffix_reverse = palindrome_suffix:sub(0,\
    \ palindrome_suffix_reverse_index - 1)\n      palindrome_prefix_reverse_index\
    \ = palindrome_prefix_reverse_index + 1\n      palindrome_suffix_reverse_index\
    \ = palindrome_suffix_reverse_index + 1\n    end\n  end\n  local palindrome_prefix_reverse_index\
    \ = 0\n  local palindrome_suffix_reverse_index = 0\n  while palindrome_prefix_reverse_index\
    \ < palindrome_prefix_length do\n    local palindrome_prefix_reverse_char = palindrome_prefix:sub(palindrome_prefix_reverse_index,\
    \ palindrome_prefix_reverse_index + 1)\n    local palindrome_suffix_reverse_char\
    \ = palindrome_suffix:sub(palindrome_suffix_reverse_index, palindrome_suffix_reverse_index\
    \ + 1)\n    if palindrome_prefix_reverse_char == palindrome_suffix_reverse_char\
    \ then\n      palindrome_prefix_", "  -- The longest postfix of supplied string\
    \ that is a palindrome.\n  local longest = string\n  -- The string prefix that\
    \ comes before the palindromic suffix.\n  local prefix = string\n  -- The string\
    \ reverse of the string prefix that comes before the palindromic suffix.\n  local\
    \ suffix = string\n  -- The length of the longest postfix of supplied string that\
    \ is a palindrome.\n  local longestLength = 1\n  -- The length of the string prefix\
    \ that comes before the palindromic suffix.\n  local prefixLength = 1\n  -- The\
    \ length of the string reverse of the string prefix that comes before the palindromic\
    \ suffix.\n  local suffixLength = 1\n  -- The length of the longest postfix of\
    \ supplied string that is a palindrome.\n  local longestLengthOfPalindrome = 1\n\
    \  -- The length of the string prefix that comes before the palindromic suffix.\n\
    \  local prefixLengthOfPalindrome = 1\n  -- The length of the string reverse of\
    \ the string prefix that comes before the palindromic suffix.\n  local suffixLengthOfPalindrome\
    \ = 1\n  -- The length of the longest postfix of supplied string that is a palindrome.\n\
    \  local longestLengthOfPalindromeOfPalindrome = 1\n  -- The length of the string\
    \ prefix that comes before the palindromic suffix.\n  local prefixLengthOfPalindromeOfPalindrome\
    \ = 1\n  -- The length of the string reverse of the string prefix that comes before\
    \ the palindromic suffix.\n  local suffixLengthOfPalindromeOfPalindrome = 1\n\
    \  -- The length of the longest postfix of supplied string that is a palindrome.\n\
    \  local longestLengthOfPalindromeOfPalindromeOfPalindrome = 1\n  -- The length\
    \ of the string prefix that comes before the palindromic suffix.\n  local prefixLengthOfPalindromeOfPalindromeOfPalindrome\
    \ = 1\n  -- The length of the string reverse of the string prefix that comes before\
    \ the palindromic suffix.\n  local suffixLengthOfPalindromeOfPalindromeOfPalindrome\
    \ = 1\n  -- The length of the longest postfix of supplied string that is a palindrome.\n\
    \  local longestLengthOfPalindromeOfPalindromeOfPalindromeOfPalindrome = 1\n \
    \ -- The length of the string prefix that come", "    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_start = #string\n\
    \    local palindrome_end = #string\n    local palindrome_prefix = string\n  \
    \  local palindrome_prefix_length = #string\n    local palindrome_suffix = string\n\
    \    local palindrome_suffix_length = #string\n    local palindrome_prefix_reverse\
    \ = string\n    local palindrome_suffix_reverse = string\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n\
    \    local palindrome_suffix_reverse_index\n    local palindrome_prefix_reverse_index\n",
  "  local palindrome = string\n  local palindrome_length = #string\n  local palindrome_start\
    \ = #string\n  local palindrome_end = #string\n  local palindrome_prefix = string\n\
    \  local palindrome_prefix_length = #string\n  local palindrome_suffix = string\n\
    \  local palindrome_suffix_length = #string\n  local palindrome_prefix_reverse\
    \ = string\n  local palindrome_suffix_reverse = string\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n\
    \  local palindrome_suffix_reverse_index\n  local palindrome_prefix_reverse_index\n",
  "  -- Find the longest postfix that is a palindrome.\n  local postfix = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = #string\n\
    \  while longest_postfix_length > 1 do\n    longest_postfix = string\n    longest_postfix_length\
    \ = #string\n    for i = 1, #string do\n      local c = string[i]\n      local\
    \ j = i - 1\n      while j >= 0 do\n        local k = string[j]\n        if c\
    \ == k then\n          longest_postfix = string..k\n          longest_postfix_length\
    \ = #longest_postfix\n          break\n        end\n        j = j - 1\n      end\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local reversed_postfix = string\n\
    \  local reversed_postfix_length = #string\n  while reversed_postfix_length >\
    \ 1 do\n    local reversed_postfix_substring = reversed_postfix\n    local reversed_postfix_substring_length\
    \ = #reversed_postfix_substring\n    for i = 1, #string do\n      local c = string[i]\n\
    \      local j = i - 1\n      while j >= 0 do\n        local k = string[j]\n \
    \       if c == k then\n          reversed_postfix_substring = reversed_postfix_substring..k\n\
    \          reversed_postfix_substring_length = #reversed_postfix_substring\n \
    \         break\n        end\n        j = j - 1\n      end\n    end\n    if reversed_postfix_substring\
    \ == longest_postfix then\n      break\n    end\n    reversed_postfix = reversed_postfix..reversed_postfix_substring\n\
    \    reversed_postfix_length = #reversed_postfix\n  end\n  return reversed_postfix\n\
    end", "  local postfix = string\n  local reverse = ''\n  while true do\n    local\
    \ postfix = string.sub(postfix, 1, string.len(postfix) - 1)\n    if string.sub(postfix,\
    \ 1, string.len(postfix)) = string.sub(postfix, 1, string.len(postfix)) then\n\
    \      reverse = reverse .. string.sub(postfix, 1, string.len(postfix))\n    \
    \  break\n    end\n  end\n  return string .. reverse .. postfix\nend", "  local\
    \ palindrome = string\n  local postfix = string\n  local reverse = string\n  local\
    \ i = #string\n  while i do\n    local char = string.sub(string,i,i)\n    local\
    \ reverse = reverse .. char\n    if char == reverse then\n      postfix = postfix\
    \ .. char\n      i = i - 1\n    else\n      palindrome = palindrome .. reverse\n\
    \      i = i - 1\n    end\n  end\n  return palindrome .. postfix\nend", "  local\
    \ postfix = string\n  local palindrome = string\n  local length = #string\n  local\
    \ index = 1\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local palindrome_length = #palindrome\n\
    \    if palindrome_length == 0 then\n      break\n    end\n    if postfix_length\
    \ < palindrome_length then\n      break\n    end\n    local postfix_index = postfix_length\
    \ - 1\n    local palindrome_index = palindrome_length - 1\n    while postfix_index\
    \ >= 0 and palindrome_index >= 0 do\n      if postfix[postfix_index] == palindrome[palindrome_index]\
    \ then\n        postfix_index = postfix_index - 1\n        palindrome_index =\
    \ palindrome_index - 1\n      else\n        break\n      end\n    end\n    if\
    \ postfix_index == -1 then\n      postfix = postfix .. string.reverse(postfix)\n\
    \      palindrome = palindrome .. string.reverse(palindrome)\n      length = length\
    \ - 1\n      index = index - 1\n    end\n  end\n  return palindrome\nend", " \
    \ local palindrome = string\n  local postfix = string\n  local reversed_postfix\
    \ = string\n  local prefix_length = #string\n  while true do\n    local postfix_length\
    \ = #postfix\n    if postfix_length == 0 then\n      break\n    end\n    local\
    \ reversed_postfix_length = #reversed_postfix\n    if reversed_postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_char = postfix[postfix_length\
    \ - 1]\n    local reversed_postfix_char = reversed_postfix[reversed_postfix_length\
    \ - 1]\n    if postfix_char == reversed_postfix_char then\n      postfix = postfix:sub(1,\
    \ postfix_length - 1)\n      reversed_postfix = reversed_postfix:sub(1, reversed_postfix_length\
    \ - 1)\n      postfix_length = postfix_length - 1\n      reversed_postfix_length\
    \ = reversed_postfix_length - 1\n    else\n      postfix = postfix .. postfix_char\n\
    \      reversed_postfix = reversed_postfix .. reversed_postfix_char\n      postfix_length\
    \ = postfix_length + 1\n      reversed_postfix_length = reversed_postfix_length\
    \ + 1\n    end\n  end\n  postfix = postfix .. reversed_postfix\n  local palindrome_length\
    \ = #palindrome\n  if palindrome_length == 0 then\n    palindrome = ''\n  end\n\
    \  if palindrome_length > prefix_length then\n    palindrome = palindrome:sub(1,\
    \ prefix_length)\n  end\n  return palindrome\nend", "  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_len = #string\n  local palindrome_prefix_postfix = string\n\
    \  local palindrome_prefix_postfix_len = #string\n  local palindrome_prefix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_len = #string\n  local palindrome_prefix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_len = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "  local palindrome = string\n  local palindrome_length = #string\n  local palindrome_postfix\
    \ = string\n  local palindrome_prefix_length = #string\n  local palindrome_prefix_postfix\
    \ = string\n  local palindrome_prefix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_length = #string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post",
  "    local postfix = string\n    local longest = 0\n    local longestPostfix = ''\n\
    \    local longestPostfixLength = 0\n    local longestPrefix = ''\n    local longestPrefixLength\
    \ = 0\n    local longestSuffix = ''\n    local longestSuffixLength = 0\n    local\
    \ longestPalindrome = ''\n    local longestPalindromeLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0\n    local longestPalindromePrefix\
    \ = ''\n    local longestPalindromePrefixLength = 0\n    local longestPalindromeSuffix\
    \ = ''\n    local longestPalindromeSuffixLength = 0", "  local palindrome = string\n\
    \  local postfix = string\n  local longest = 0\n  while true do\n    longest =\
    \ longest + 1\n    local postfix_reverse = string.gsub(postfix, '.', function(c)\n\
    \      return string.char(tonumber(c) + longest - 1)\n    end)\n    if postfix_reverse\
    \ == postfix then\n      break\n    end\n    postfix = postfix_reverse\n  end\n\
    \  local postfix_reverse = string.gsub(postfix, '.', function(c)\n    return string.char(tonumber(c)\
    \ + longest - 1)\n  end)\n  if postfix_reverse == postfix then\n    return string\n\
    \  end\n  local palindrome_reverse = string.gsub(postfix_reverse, '.', function(c)\n\
    \    return string.char(tonumber(c) + longest - 1)\n  end)\n  return palindrome\
    \ .. palindrome_reverse\nend", "  local palindrome = string\n  local longest =\
    \ #string\n  local longestPostfix = 0\n  local longestPrefix = 0\n  local longestSuffix\
    \ = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local\
    \ longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse\
    \ = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n \
    \ local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse\
    \ = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n \
    \ local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse\
    \ = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local\
    \ longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse\
    \ = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n \
    \ local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse\
    \ = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n \
    \ local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse\
    \ = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local\
    \ longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse\
    \ = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n \
    \ local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse\
    \ = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n \
    \ local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse\
    \ = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local\
    \ longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse\
    \ = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n \
    \ local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n  local longestPrefixReverse\
    \ = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse = 0\n \
    \ local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local longestPostfixReverse\
    \ = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse = 0\n  local\
    \ longestPostfixReverse = 0\n  local longestPrefixReverse = 0\n  local longestSuffixReverse\
    \ = 0\n  ", "    local postfix = string\n    local reverse = ''\n    local length\
    \ = 0\n    while true do\n        local index = string.find(postfix, reverse)\n\
    \        if index == nil then\n            return string\n        end\n      \
    \  postfix = string.sub(postfix, index + 1)\n        reverse = string.sub(reverse,\
    \ index - 1)\n        length = length + 1\n    end\nend", "  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local max_len =\
    \ #string\n  for i = 1, max_len do\n    local char = string.sub(string,i,i)\n\
    \    if char == string.sub(postfix,max_len,max_len) then\n      postfix = string.sub(string,max_len,max_len+1)\n\
    \      break\n    end\n  end\n  -- Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n  postfix = string.sub(postfix,1,max_len-#postfix)\n\
    \  postfix = string.reverse(postfix)\n  return string..postfix\nend", "  local\
    \ reversed_string = ''\n  local longest_postfix_length = 0\n  for i = 1, #string\
    \ do\n    local postfix_length = #string - i\n    if postfix_length >= longest_postfix_length\
    \ then\n      reversed_string = reversed_string .. string[postfix_length]\n  \
    \    longest_postfix_length = postfix_length\n    end\n  end\n  reversed_string\
    \ = reversed_string .. string[#string]\n  return reversed_string\nend", "  local\
    \ postfix = string\n  local suffix = ''\n  local palindrome = ''\n  while true\
    \ do\n    local postfix = string\n    local suffix = ''\n    local palindrome\
    \ = ''\n    for i = 1, #string do\n      local c = string.sub(string,i,i)\n  \
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      \
    \  suffix = suffix .. c\n      elseif c == 'c' or c == 't' or c == 'a' or c ==\
    \ 'g' or c == 's' then\n        postfix = postfix .. suffix\n      else\n    \
    \    postfix = postfix .. c\n      end\n    end\n    if suffix == postfix then\n\
    \      palindrome = palindrome .. suffix\n      break\n    end\n  end\n  return\
    \ palindrome\nend", "    local postfix = string\n    local reverse = ''\n    local\
    \ longest = 0\n    while #postfix > 0 do\n        longest = longest + 1\n    \
    \    local index = #postfix - 1\n        while index >= 0 do\n            local\
    \ c = postfix[index]\n            reverse = reverse .. c\n            if c ==\
    \ ctoi(reverse) then\n                postfix = postfix .. reverse\n         \
    \       index = index - 1\n                break\n            end\n          \
    \  index = index - 1\n        end\n    end\n    return string\nend", "  local\
    \ palindrome = string\n  local postfix = string\n  local reverse = string\n  local\
    \ length = 1\n  while true do\n    local postfix = string.sub(palindrome, length\
    \ - 1, length)\n    if postfix ~= reverse then\n      palindrome = palindrome\
    \ .. reverse .. postfix\n      reverse = string.sub(reverse, 1, length - 1)\n\
    \    end\n    length = length + 1\n    if string.sub(palindrome, length - 1, length)\
    \ == reverse then\n      break\n    end\n  end\n  return palindrome\nend", " \
    \ -- If string is empty or null, return empty string.\n  if string == nil then\n\
    \    return ''\n  end\n  -- If string length is odd, return empty string.\n  if\
    \ #string % 2 ~= 0 then\n    return ''\n  end\n  -- Create reversed string and\
    \ reverse it back.\n  local reversed_string = string\n  reversed_string:reverse()\n\
    \  -- Create empty string and append the reversed string to the end.\n  local\
    \ palindrome = ''\n  local i = 0\n  while i <= #string do\n    -- Append the character\
    \ at the current index to the palindrome.\n    palindrome = palindrome .. string[i]\n\
    \    -- Increment the index to move to the next character.\n    i = i + 1\n  end\n\
    \  -- Append the reversed string to the end of the palindrome.\n  palindrome =\
    \ palindrome .. reversed_string\n  -- Return the palindrome.\n  return palindrome\n\
    end", "    local postfix = string\n    local reverse = ''\n    local palindrome\
    \ = ''\n    while true do\n        local postfix = postfix .. reverse\n      \
    \  local length = #postfix\n        if length == 0 or length == #string then\n\
    \            return palindrome\n        end\n        local prefix = string\n \
    \       local i = 0\n        while i <= length - 1 do\n            local char\
    \ = string.sub(prefix, i, i + 1)\n            if char == char then\n         \
    \       i = i + 1\n            else\n                prefix = prefix .. char\n\
    \                break\n            end\n        end\n        reverse = string.sub(prefix,\
    \ 1, length - 1)\n        palindrome = palindrome .. char\n    end\nend", "  --\
    \ Find the longest postfix that is a palindrome.\n  local postfix = string\n \
    \ local longest_postfix = string\n  local longest_postfix_length = string\n  local\
    \ longest_postfix_length_index = 0\n  local longest_postfix_length_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed\n  local longest_postfix_length_reversed_reversed\n\
    \  local longest_postfix_length_reversed_reversed_index\n  while true do\n   \
    \ longest_postfix_length = longest_postfix_length_index\n    longest_postfix_length_reversed_index\
    \ = longest_postfix_length_reversed_index\n    longest_postfix_length_reversed\
    \ = longest_postfix_length_reversed_reversed\n    longest_postfix_length_reversed_reversed\
    \ = string\n    for i = 1, #string do\n      local char = string[i]\n      if\
    \ char == postfix then\n        longest_postfix_length = i\n        longest_postfix_length_reversed_index\
    \ = i - 1\n        longest_postfix_length_reversed = string\n      end\n     \
    \ if char == longest_postfix_length_reversed_reversed[longest_postfix_length_reversed_index]\
    \ then\n        longest_postfix_length_reversed_reversed_index = longest_postfix_length_reversed_index\
    \ - 1\n        longest_postfix_length_reversed_reversed = string\n      end\n\
    \    end\n    if longest_postfix_length_reversed_index == 0 then\n      break\n\
    \    end\n    postfix = longest_postfix_length_reversed[longest_postfix_length_reversed_index]\n\
    \  end\n  -- Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n  local reversed_postfix_length = longest_postfix_length\
    \ - longest_postfix_length_reversed_index\n  local reversed_postfix_reversed_index\
    \ = longest_postfix_length_reversed_index\n  local reversed_postfix_reversed =\
    \ string\n  for i = 1, #string do\n    local char = string[i]\n    if char ==\
    \ longest_postfix_length_reversed[longest_postfix_length_reversed_index] then\n\
    \      reversed_postfix_reversed_index = i\n      reversed_postfix_reversed =\
    \ string\n    end\n  end\n  local reversed_postfix_reversed_reversed_index = longest_postfix_length_reversed_reversed_index\n\
    \  local reversed_postfix_reversed_reversed = string\n  for i = 1, #string do\n\
    \    local char = ", "  local palindrome = string\n  local palindrome_length =\
    \ #string\n  local palindrome_postfix = string\n  local palindrome_prefix_length\
    \ = #string\n  local palindrome_prefix_postfix = string\n  while palindrome_length\
    \ > 1 do\n    local palindrome_prefix_length = palindrome_prefix_length - 1\n\
    \    local palindrome_prefix_postfix = palindrome_prefix_postfix + string[palindrome_prefix_length]\n\
    \    local palindrome_postfix = palindrome_postfix + string[palindrome_length]\n\
    \    local palindrome = palindrome .. string[palindrome_length]\n    palindrome_length\
    \ = palindrome_length - 1\n  end\n  return palindrome\nend", "  local postfix\
    \ = string\n  local reverse = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix))\
    \ == string.sub(postfix, 1, string.len(postfix) - 1) then\n      reverse = reverse\
    \ .. postfix\n      break\n    end\n  end\n  return string .. reverse\nend", " \
    \ local reversed_string = string\n  local palindrome = string\n  local prefix_length\
    \ = #string\n  while true do\n    local postfix_length = #reversed_string\n  \
    \  if postfix_length == 0 then\n      break\n    end\n    local postfix = reversed_string:sub(1,\
    \ postfix_length)\n    if postfix ~= postfix then\n      break\n    end\n    reversed_string\
    \ = reversed_string:sub((postfix_length + 1), #reversed_string)\n    if reversed_string\
    \ ~= string then\n      break\n    end\n    prefix_length = prefix_length - 1\n\
    \    if prefix_length == 0 then\n      break\n    end\n    palindrome = palindrome\
    \ .. reversed_string:sub(1, prefix_length)\n  end\n  return palindrome\nend",
  "    local postfix = string\n    local reverse = ''\n    local palindrome = ''\n\
    \    local length = 0\n    while true do\n        local postfix_length = #postfix\n\
    \        local postfix_reverse = reverse:sub(1, #reverse)\n        if postfix_length\
    \ == 0 then\n            break\n        end\n        local postfix_reverse = postfix_reverse:sub(1,\
    \ #postfix_reverse)\n        if postfix_reverse ~= postfix_length then\n     \
    \       postfix = postfix:sub(1, postfix_length)\n        else\n            postfix\
    \ = postfix:sub(2)\n        end\n        length = length + 1\n        if postfix_length\
    \ == 0 then\n            break\n        end\n        if postfix_reverse ~= postfix_length\
    \ then\n            postfix = postfix:sub(1, postfix_length)\n        else\n \
    \           postfix = postfix:sub(2)\n        end\n        reverse = reverse ..\
    \ postfix_reverse\n    end\n    palindrome = postfix .. reverse\n    return palindrome\n\
    end", "  local palindrome = string\n  local palindrome_len = #string\n  local\
    \ palindrome_postfix = string\n  local palindrome_prefix_len = #string\n  while\
    \ palindrome_len > 1 do\n    local palindrome_postfix_len = #palindrome_postfix\n\
    \    local palindrome_prefix_len = #palindrome_prefix\n    local palindrome_suffix\
    \ = string\n    local palindrome_suffix_len = #string\n    while palindrome_suffix_len\
    \ > 1 do\n      local palindrome_suffix_postfix_len = #palindrome_suffix\n   \
    \   local palindrome_suffix_prefix_len = #palindrome_prefix\n      local palindrome_suffix_suffix\
    \ = string\n      local palindrome_suffix_suffix_len = #string\n      while palindrome_suffix_suffix_len\
    \ > 1 do\n        local palindrome_suffix_suffix_postfix_len = #palindrome_suffix_suffix\n\
    \        local palindrome_suffix_suffix_prefix_len = #palindrome_prefix_prefix\n\
    \        local palindrome_suffix_suffix_suffix = string\n        local palindrome_suffix_suffix_suffix_len\
    \ = #string\n        while palindrome_suffix_suffix_suffix_len > 1 do\n      \
    \    local palindrome_suffix_suffix_suffix_postfix_len = #palindrome_suffix_suffix_suffix\n\
    \          local palindrome_suffix_suffix_suffix_prefix_len = #palindrome_prefix_prefix_prefix\n\
    \          local palindrome_suffix_suffix_suffix_suffix = string\n          local\
    \ palindrome_suffix_suffix_suffix_suffix_len = #string\n          while palindrome_suffix_suffix_suffix_suffix_len\
    \ > 1 do\n            local palindrome_suffix_suffix_suffix_suffix_postfix_len\
    \ = #palindrome_suffix_suffix_suffix_suffix\n            local palindrome_suffix_suffix_suffix_suffix_prefix_len\
    \ = #palindrome_prefix_prefix_prefix_prefix\n            local palindrome_suffix_suffix_suffix_suffix_suffix\
    \ = string\n            local palindrome_suffix_suffix_suffix_suffix_suffix_len\
    \ = #string\n            while palindrome_suffix_suffix_suffix_suffix_suffix_len\
    \ > 1 do\n              local palindrome_suffix_suffix_suffix_suffix_suffix_postfix_len\
    \ = #", "  local postfix = string\n  local reverse = ''\n  while true do\n   \
    \ local index = string.find(postfix, reverse)\n    if index == nil then\n    \
    \  return string\n    end\n    local suffix = string[index:len() - 1]\n    local\
    \ prefix = string\n    if index > 0 then\n      prefix = prefix:sub(0, index -\
    \ 1)\n    end\n    local reverse = reverse .. suffix\n    postfix = prefix:sub(1,\
    \ index - 1) .. suffix\n  end\nend", "    local palindrome = string\n    local\
    \ postfix = string\n    local suffix = ''\n    local i = 0\n    while true do\n\
    \        postfix = string.sub(postfix, 1, string.len(postfix) - i)\n        suffix\
    \ = string.sub(postfix, 1, string.len(postfix) - i)\n        if suffix == suffix\
    \ then\n            i = i + 1\n        else\n            break\n        end\n\
    \    end\n    local reverse = string.sub(postfix, 1, string.len(postfix) - i)\n\
    \    local reversed = reverse\n    for i = 1, string.len(reverse) do\n       \
    \ reversed = reversed .. reverse:sub(i, i)\n    end\n    palindrome = palindrome\
    \ .. reversed\n    return palindrome\nend", "    local palindrome = string\n \
    \   local postfix = string\n    local reverse = string\n    local i = #string\n\
    \    while i do\n        postfix = string\n        reverse = string\n        i\
    \ = i - 1\n        while i > 0 do\n            postfix = string\n            reverse\
    \ = string\n            i = i - 1\n            if string[i] ~= string[#string]\
    \ then\n                break\n            end\n        end\n        if reverse\
    \ == postfix then\n            palindrome = palindrome .. reverse .. postfix\n\
    \        end\n    end\n    return palindrome\nend", "    local reverse = string\n\
    \    local longest = string.len(string)\n    for i = 1, string.len(string) do\n\
    \        local substring = string.sub(reverse, i, i)\n        if substring ==\
    \ substring then\n            longest = i\n        end\n    end\n    local prefix\
    \ = string.sub(reverse, longest, longest)\n    return prefix .. string.reverse(substring)\n\
    end", "    local palindrome = string\n    local postfix = string\n    local reverse\
    \ = string\n    local i = 1\n    while true do\n        postfix = string.sub(postfix,\
    \ 0, i) + string.reverse(string.sub(postfix, i, #postfix))\n        reverse =\
    \ reverse .. string.reverse(string.sub(postfix, 1, #postfix))\n        if string.sub(postfix,\
    \ #postfix) == palindrome then\n            palindrome = reverse .. string.reverse(string.sub(postfix,\
    \ 1, #postfix))\n            break\n        end\n        i = i + 1\n    end\n\
    \    return palindrome\nend", "    local palindrome = string\n    local prefix_length\
    \ = 1\n    while palindrome ~= string.sub(string, 1, prefix_length) do\n     \
    \   prefix_length = prefix_length + 1\n    end\n    local postfix_length = string.len(string)\
    \ - prefix_length\n    local reversed_postfix = string.sub(string, prefix_length,\
    \ reversed_postfix_length)\n    local reversed_palindrome = reversed_postfix ..\
    \ string.sub(reversed_postfix, 1, prefix_length) .. palindrome\n    return reversed_palindrome\n\
    end", "    local palindrome = string\n    local postfix = string\n    local suffix\
    \ = ''\n    local length = 0\n    while postfix ~= '' do\n        length = length\
    \ + 1\n        postfix = postfix .. string.rev(postfix)\n    end\n    if length\
    \ < 2 then\n        return string\n    end\n    local palindrome = string\n  \
    \  local postfix = string\n    local suffix = ''\n    local length = 0\n    while\
    \ postfix ~= '' do\n        length = length + 1\n        postfix = postfix ..\
    \ string.rev(postfix)\n    end\n    if length < 2 then\n        return string\n\
    \    end\n    local palindrome = string\n    local postfix = string\n    local\
    \ suffix = ''\n    local length = 0\n    while postfix ~= '' do\n        length\
    \ = length + 1\n        postfix = postfix .. string.rev(postfix)\n    end\n  \
    \  if length < 2 then\n        return string\n    end\n    local palindrome =\
    \ string\n    local postfix = string\n    local suffix = ''\n    local length\
    \ = 0\n    while postfix ~= '' do\n        length = length + 1\n        postfix\
    \ = postfix .. string.rev(postfix)\n    end\n    if length < 2 then\n        return\
    \ string\n    end\n    local palindrome = string\n    local postfix = string\n\
    \    local suffix = ''\n    local length = 0\n    while postfix ~= '' do\n   \
    \     length = length + 1\n        postfix = postfix .. string.rev(postfix)\n\
    \    end\n    if length < 2 then\n        return string\n    end\n    local palindrome\
    \ = string\n    local postfix = string\n    local suffix = ''\n    local length\
    \ = 0\n    while postfix ~= '' do\n        length = length + 1\n        postfix\
    \ = postfix .. string.rev(postfix)\n    end\n    if length < 2 then\n        return\
    \ string\n    end\n    local palindrome = string\n    local postfix = string\n\
    \    local suffix = ''\n    local length = 0\n    while postfix ~= '' do\n   \
    \     length = length + 1\n        postfix = postfix .. string.rev(postfix)\n\
    \    end\n    if length < 2 then\n        return string\n    end\n    local palindrome\
    \ = string\n    local postfix = string\n    local suffix = ''\n    local length\
    \ = 0\n    while postfix ~= '' do\n        length = length + 1\n        postfix\
    \ = postfix .. string.rev(postfix)\n    end\n    if length < ", "  local palindrome\
    \ = string\n  local palindrome_len = #string\n  local palindrome_postfix = string\n\
    \  local palindrome_prefix_len = #string\n  local palindrome_prefix_postfix =\
    \ string\n  while palindrome_len > 0 do\n    local palindrome_postfix_len = #palindrome_postfix\n\
    \    local palindrome_prefix_postfix_len = #palindrome_prefix_postfix\n    local\
    \ palindrome_prefix_postfix_postfix = palindrome_prefix_postfix .. string.rev(palindrome_postfix)\n\
    \    local palindrome_prefix_postfix_postfix_len = #palindrome_prefix_postfix_postfix\n\
    \    if palindrome_prefix_postfix_postfix_len > palindrome_prefix_len then\n \
    \     palindrome_prefix_postfix = palindrome_prefix_postfix .. string.rev(palindrome_prefix_postfix)\n\
    \      palindrome_prefix_postfix_postfix_len = #palindrome_prefix_postfix_postfix\n\
    \    end\n    if palindrome_prefix_postfix_postfix_len > palindrome_len then\n\
    \      palindrome_postfix = palindrome_postfix .. string.rev(palindrome_postfix)\n\
    \      palindrome_postfix_len = #palindrome_postfix\n    end\n    if palindrome_postfix_len\
    \ > palindrome_len then\n      palindrome = palindrome .. string.rev(palindrome)\n\
    \      palindrome_len = #palindrome\n    end\n    palindrome_postfix = palindrome_postfix\
    \ .. string.rev(palindrome_postfix)\n    palindrome_postfix_len = #palindrome_postfix\n\
    \    palindrome_prefix_postfix = palindrome_prefix_postfix .. string.rev(palindrome_prefix_postfix)\n\
    \    palindrome_prefix_postfix_postfix_len = #palindrome_prefix_postfix_postfix\n\
    \    palindrome_prefix_postfix_postfix = palindrome_prefix_postfix .. string.rev(palindrome_prefix_postfix)\n\
    \    palindrome_prefix_postfix_postfix_len = #palindrome_prefix_postfix_postfix\n\
    \    palindrome_prefix_postfix_postfix_postfix = palindrome_prefix_postfix ..\
    \ string.rev(palindrome_prefix_postfix_postfix)\n    palindrome_prefix_postfix_postfix_postfix_len\
    \ = #p", "  -- Find the longest postfix that is a palindrome.\n  local postfix\
    \ = string\n  local i = #string\n  while i do\n    local j = #postfix\n    while\
    \ j > 0 do\n      -- If current character is a palindrome then append it to the\
    \ palindrome suffix.\n      if string.sub(string,i,j) == string.sub(postfix,j,j)\
    \ then\n        postfix = string.sub(postfix,1,j-1..j) .. string.sub(string,i,j)\n\
    \      end\n      j = j - 1\n    end\n    i = i - 1\n  end\n  return postfix\n\
    end", "  local palindrome = string\n  local postfix = string\n  local reverse\
    \ = string\n  while true do\n    local postfix = string\n    local reverse = string\n\
    \    for i = 1, #string do\n      local char = string[i]\n      if char == postfix.sub(i,\
    \ 1) then\n        postfix = postfix.sub(i, 1)\n        reverse = reverse.sub(i,\
    \ 1)\n      else\n        postfix = postfix.sub(i, 1)\n      end\n    end\n  \
    \  if reverse == postfix then\n      palindrome = palindrome .. reverse\n    \
    \  break\n    end\n  end\n  return palindrome\nend", "  -- Find longest palindrome\
    \ that begins with string.\n  local longest = string\n  local longestLength =\
    \ 1\n  for i = 1, #string do\n    local substring = string\n    substring = substring:sub(1,\
    \ i)\n    local reverse = substring:reverse()\n    if reverse == substring then\n\
    \      longest = substring .. longest\n      longestLength = i\n    end\n  end\n\
    \  -- Append reverse of longest palindrome that begins with string.\n  longest\
    \ = longest .. longest:reverse()\n  return longest\nend", "    local postfix =\
    \ string\n    local reverse = ''\n    local suffix = ''\n    while true do\n \
    \       local index = string.find(postfix, reverse)\n        if index == nil then\n\
    \            return string\n        end\n        postfix = string.sub(postfix,\
    \ index + 1)\n        reverse = string.sub(reverse, index - 1)\n        suffix\
    \ = string.sub(postfix, 1, string.len(postfix) - 1)\n        if suffix == reverse\
    \ then\n            return string\n        end\n    end\nend", "    local postfix\
    \ = string\n    local palindrome = string\n    local prefix_length = 0\n    while\
    \ postfix ~= '' do\n        local postfix_length = #postfix\n        local postfix_reverse\
    \ = string.sub(postfix, 1, postfix_length-1)\n        postfix = string.sub(postfix,\
    \ postfix_length+1)\n        if postfix_reverse ~= postfix then\n            palindrome\
    \ = palindrome .. postfix_reverse .. postfix\n        end\n        prefix_length\
    \ = prefix_length + postfix_length\n    end\n    return palindrome .. string.sub(string,\
    \ prefix_length)\nend", "  local palindrome = string\n  local longest = string.len(string)\n\
    \  local reversed_string = string\n  local prefix = ''\n  while true do\n    local\
    \ postfix = reversed_string\n    local suffix = string\n    local i = string.len(postfix)\
    \ - 1\n    while i >= 0 do\n      postfix = string.sub(postfix, 1, i) + postfix\
    \ + string.sub(postfix, i + 1)\n      i = i - 1\n    end\n    if string.sub(postfix,\
    \ 1, longest) == string.sub(postfix, longest, longest) then\n      palindrome\
    \ = string.sub(postfix, 1, longest) + palindrome + suffix\n      break\n    end\n\
    \    prefix = string.sub(postfix, 1, longest) + prefix\n    reversed_string =\
    \ string.sub(postfix, longest, string.len(postfix)) + reversed_string\n  end\n\
    \  return palindrome\nend", "  local postfix = string\n  local reverse = ''\n\
    \  while true do\n    local postfix = postfix .. reverse\n    if postfix ~= string.gsub(string.gsub(postfix,\
    \ '^(.-)$', '\\1'), '(.-)$', '\\1') then\n      break\n    end\n    reverse =\
    \ reverse .. string.sub(postfix, 1, #postfix)\n  end\n  return postfix .. reverse\n\
    end", "  -- If string is empty, return empty string.\n  if string == '' then\n\
    \    return ''\n  end", "  local postfix = string\n  local suffix = ''\n  local\
    \ length = 1\n  while true do\n    local reverse = reverse(string)\n    if reverse\
    \ == string then\n      break\n    end\n    length = length + 1\n    postfix =\
    \ postfix .. reverse\n    suffix = suffix .. string\n  end\n  return postfix ..\
    \ suffix\nend", "    local palindrome = string\n    local postfix = string\n \
    \   local reverse = string\n    local length = #string\n    for i = 1, length\
    \ do\n        postfix = string.sub(postfix, 1, i-1) + postfix\n        reverse\
    \ = reverse .. string.sub(string,i,i)\n    end\n    if reverse == postfix then\n\
    \        palindrome = string\n    end\n    return palindrome\nend", "  local postfix\
    \ = string\n  local reverse = ''\n  while postfix ~= '' do\n    local index =\
    \ string.find(postfix, reverse)\n    if index == nil then\n      reverse = reverse\
    \ .. postfix\n    else\n      reverse = reverse .. string.sub(postfix, index,\
    \ index) .. string.sub(postfix, index + 1, string.len(postfix))\n    end\n   \
    \ postfix = string.sub(postfix, index + 1, string.len(postfix))\n  end\n  return\
    \ reverse\nend", "  local palindrome = string\n  local postfix = string\n  local\
    \ reversed_postfix = string\n  local longest_postfix = string\n  local longest_postfix_length\
    \ = string\n  local longest_postfix_length_index = 0\n  local longest_postfix_length_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_length = 0\n  local longest_postfix_length_reversed_string\
    \ = ''\n  local longest_postfix_length_reversed_string_index = 0\n  local longest_postfix_length_reversed_string_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length = string\n  local\
    \ longest_postfix_length_reversed_string_length_index = 0\n  local longest_postfix_length_reversed_string_length_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length_reversed_index =\
    \ 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed =\
    \ ''\n  local longest_postfix_length_reversed_string_length_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_length\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_length\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_length\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_reversed_length\
    \ = 0\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = ''\n  local longest_postfix_length_reversed_string_length_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0", "  local postfix = string\n  local reversed_postfix = string\n  local\
    \ longest_postfix = string\n  local longest_postfix_length = -1\n  local longest_postfix_start_index\
    \ = -1\n  local longest_postfix_end_index = -1\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index = 0\n  local longest_postfix_start_index\
    \ = 0\n  local longest_postfix_end_index", "  local palindrome = string\n  local\
    \ longest_postfix = string\n  local longest_postfix_length = string\n  local longest_postfix_length_index\
    \ = 0\n  local longest_postfix_length_reversed = string\n  local longest_postfix_length_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_length_index = 0\n  local\
    \ longest_postfix_length_reversed_reversed = string\n  local longest_postfix_length_reversed_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_reversed_length_index = 0\n\
    \  local longest_postfix_length_reversed_reversed_reversed = string\n  local longest_postfix_length_reversed_reversed_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed = string\n\
    \  local longest_postfix_length_reversed_reversed_reversed_length_index = 0\n\
    \  local longest_postfix_length_reversed_reversed_reversed_reversed_length = string\n\
    \  local longest_postfix_length_reversed_reversed_reversed_length_index = 0\n\
    \  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed =\
    \ string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string\n  local longest_postfix_length_reversed_reversed_reversed_reversed_reversed_reversed_length_index\
    \ = 0\n  local longest_postfix_length_reversed_", "  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  while palindrome_length > 1 do\n    palindrome_postfix\
    \ = string\n    palindrome_postfix_length = #string\n    for i = 1, palindrome_length\
    \ do\n      local char = string.sub(palindrome, i - 1, palindrome_length)\n  \
    \    local reversed_char = string.sub(string, i - 1, palindrome_length)\n    \
    \  palindrome = palindrome .. reversed_char .. char\n      palindrome_length =\
    \ palindrome_length - 1\n      palindrome_postfix = palindrome_postfix .. reversed_char\
    \ .. char\n      palindrome_postfix_length = palindrome_postfix_length - 1\n \
    \   end\n  end\n  return palindrome\nend", "  -- If string is empty or null, return\
    \ empty string.\n  -- If string has length 1, return string.\n  -- If string has\
    \ length 2, return string with reversed first and last characters.\n  if string\
    \ == nil or string == '' then\n    return ''\n  elseif string.lenght == 1 then\n\
    \    return string\n  elseif string.lenght == 2 then\n    return string.sub(1,\
    \ string.length - 1) .. string.sub(string.length - 2, string.length)\n  end",
  "    local postfix = string\n    local reverse = ''\n    local longest = 0\n   \
    \ while true do\n        longest = longest + 1\n        local postfix_reverse\
    \ = postfix:reverse()\n        if postfix_reverse == postfix then\n          \
    \  return string\n        end\n        postfix = postfix_reverse\n    end\nend",
  "  local palindrome = string\n  local postfix = string\n  local reversed_postfix\
    \ = string\n  local longest_postfix = string\n  local longest_postfix_length =\
    \ string\n  local longest_postfix_length_count = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_count_index = string\n  local longest_postfix_length_count_index\
    \ = string\n  local longest_postfix_length_", "    local postfix = string\n  \
    \  local reverse = ''\n    local longest_postfix = ''\n    local longest_postfix_length\
    \ = 0\n    while true do\n        local postfix_length = #postfix\n        if\
    \ postfix_length == 0 then\n            break\n        end\n        local postfix_reverse\
    \ = reverse:sub(1, #reverse):reverse()\n        if postfix_length == longest_postfix_length\
    \ then\n            postfix = postfix .. postfix_reverse\n        else\n     \
    \       postfix = postfix .. postfix_reverse .. postfix_length\n            longest_postfix_length\
    \ = postfix_length\n        end\n    end\n    return postfix\nend", "    local\
    \ postfix = string\n    local palindrome = string\n    local length = #string\n\
    \    for i = 1, length do\n        postfix = string..postfix..string\n       \
    \ local reverse = string.gsub(postfix, '.', function(c)\n            return string.char(tonumber(c))\n\
    \        end)\n        if reverse == palindrome then\n            palindrome =\
    \ postfix.. reverse\n        end\n    end\n    return palindrome\nend", "    local\
    \ postfix = string\n    local palindrome = string\n    local length = #string\n\
    \    for i = 1, length / 2 do\n        postfix = string.rev(string:sub(i, i +\
    \ 1))\n        palindrome = palindrome .. string.rev(string:sub(i, i + 1))\n \
    \   end\n    return palindrome .. postfix\nend", "    local palindrome = string\n\
    \    local prefix_length = 1\n    local suffix_length = 1\n    while palindrome\
    \ ~= string.reverse do\n        local postfix_length = string.len(palindrome)\n\
    \        local postfix = string.sub(palindrome, prefix_length, prefix_length +\
    \ postfix_length)\n        local reversed_postfix = string.reverse(postfix)\n\
    \        palindrome = palindrome .. reversed_postfix\n        prefix_length =\
    \ prefix_length + postfix_length\n        suffix_length = suffix_length + postfix_length\n\
    \    end\n    return palindrome\nend", "  -- If string is empty, return empty\
    \ string.\n  if string == '' then\n    return ''\n  end", "    local palindrome\
    \ = string\n    local reversed_string = string\n    local prefix_length = 0\n\
    \    local suffix_length = 0\n    while true do\n        local postfix_length\
    \ = #palindrome + prefix_length\n        if postfix_length == 0 then\n       \
    \     break\n        end\n        local postfix = palindrome:sub(1, postfix_length)\n\
    \        reversed_string = reversed_string .. postfix:reverse()\n        prefix_length\
    \ = prefix_length + #postfix\n        palindrome = palindrome:sub(postfix_length)\n\
    \    end\n    return reversed_string .. palindrome\nend", "    local reversed_string\
    \ = string\n    local longest_postfix_length = 0\n    local longest_postfix_index\
    \ = 0\n    for i = 1, #string do\n        local postfix_length = #string - i\n\
    \        if postfix_length >= longest_postfix_length then\n            longest_postfix_length\
    \ = postfix_length\n            longest_postfix_index = i\n        end\n    end\n\
    \    local longest_postfix = string\n    for i = longest_postfix_index, 1, -1\
    \ do\n        local postfix = string\n        postfix = string.sub(postfix, i,\
    \ i)\n        postfix = string.reverse(postfix)\n        if postfix ~= reversed_string\
    \ then\n            longest_postfix = string\n            break\n        end\n\
    \    end\n    return longest_postfix .. reversed_string\nend", "  local postfix\
    \ = string\n  local palindrome = string\n  while true do\n    local postfix =\
    \ string\n    local reversed_postfix = string\n    for i = #postfix, 1, -1 do\n\
    \      reversed_postfix = reversed_postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..postfix..post",
  "    local palindrome = string\n    local postfix = string\n    local reverse =\
    \ string\n    local i = 0\n    while true do\n        postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - i)\n        reverse = string.sub(reverse, 1, string.len(reverse)\
    \ - i)\n        if string.sub(postfix, 1, string.len(postfix) - i) == reverse\
    \ then\n            palindrome = palindrome .. postfix .. reverse\n          \
    \  break\n        end\n        i = i + 1\n    end\n    return palindrome\nend",
  "  local longest, longestPrefix, longestSuffix = string.find(string, \"^(.-)$\"\
    ), string.sub(string, 1, string.find(string, \"^(.-)$\")), string.sub(string,\
    \ string.find(string, \"^(.-)$\"))\n  local longestPalindrome = longest\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = longestPrefix, longestSuffix\n\
    \  local longestPalindromeSuffix = string.sub(longestPalindromeSuffix, 1, string.find(longestPalindromeSuffix,\
    \ \"^(.-)$\"))\n  local longestPalindromePrefix = string.sub(longestPalindromePrefix,\
    \ 1, string.find(longestPalindromePrefix, \"^(.-)$\"))\n  while string.find(longestPalindromeSuffix,\
    \ \"^(.-)$\") do\n    longestPalindromeSuffix = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\"))\n    longestPalindromePrefix\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\"))\n  end\n  longestPalindromeSuffix = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\"))\n  longestPalindromePrefix\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\"))\n  while string.find(longestPalindromePrefix, \"^(.-)$\") do\n\
    \    longestPalindromePrefix = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\"))\n    longestPalindromeSuffix = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\"))\n  end\n  longestPalindromePrefix\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\"))\n  while string.find(longestPalindromePrefix, \"^(.-)$\") do\n\
    \    longestPalindromePrefix = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\"))\n    longestPalindromeSuffix = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)", "  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix_length = 1\n  while\
    \ postfix ~= '' do\n    local postfix_length = #postfix\n    if postfix_length\
    \ >= longest_postfix_length then\n      longest_postfix_length = postfix_length\n\
    \    end\n    postfix = string.sub(postfix, 1, postfix_length - 1)\n    reversed_postfix\
    \ = string.sub(reversed_postfix, 1, #reversed_postfix)\n  end\n  reversed_postfix\
    \ = reversed_postfix .. reversed_postfix\n  return postfix .. reversed_postfix\n\
    end", "  local longest, longestPrefix, longestSuffix, longestPalindrome = string.find(string,\
    \ \"^(.-)$\"), string.find(string, \"^(.-)$\"), string.find(string, \"^(.-)$\"\
    ), \"\"\n  if longest == nil then\n    return string\n  end\n  local longestPrefix,\
    \ longestSuffix = string.sub(string, 1, longest), string.sub(string, longest+1,\
    \ string.len(string))\n  longestPalindrome = longestPrefix .. longestSuffix ..\
    \ string.reverse(longestPrefix)\n  return longestPalindrome\nend", "  local longest,\
    \ longestLength, longestPrefix, longestSuffix\n  longest, longestLength, longestPrefix,\
    \ longestSuffix = find_longest_palindrome(string.gsub(string.gsub(string, '^%s+',\
    \ ''), '%s+$', ''))\n  return string.gsub(string.gsub(longestPrefix, '^%s+', ''),\
    \ '%s+$', '') .. string.sub(longestSuffix, 1, longestLength) .. string.sub(longestSuffix,\
    \ longestLength + 1)\nend", "  local postfix = string\n  local suffix = ''\n \
    \ local palindrome = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix)\
    \ - 1) ~= suffix then\n      palindrome = palindrome .. suffix\n      suffix =\
    \ postfix\n    else\n      break\n    end\n  end\n  return palindrome .. suffix\n\
    end", "    local postfix = string\n    local reverse = string\n    local suffix\
    \ = ''\n    local length = 0\n    while true do\n        local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - length)\n        local reverse = string.sub(reverse,\
    \ 1, string.len(reverse) - length)\n        if postfix ~= reverse then\n     \
    \       length = length + 1\n            suffix = suffix .. reverse\n        else\n\
    \            break\n        end\n    end\n    return string .. suffix\nend", " \
    \ local palindrome = string\n  local longest_postfix = string\n  local longest_postfix_length\
    \ = #string\n  local longest_postfix_index = 0\n  local longest_postfix_index_length\
    \ = #string\n  local longest_postfix_index_index = 0\n  local longest_postfix_index_index_length\
    \ = #string\n  local longest_postfix_index_index_index = 0\n  while longest_postfix_index_index_index\
    \ == 0 do\n    longest_postfix_index_index_index = longest_postfix_index_index_length\n\
    \    longest_postfix_index_index_length = longest_postfix_index_length\n    longest_postfix_index_length\
    \ = longest_postfix_length\n    longest_postfix_index = longest_postfix_index\n\
    \    longest_postfix_index_index = longest_postfix_index_index + 1\n  end\n  while\
    \ longest_postfix_index_index_index > 0 do\n    longest_postfix_index_index_index\
    \ = longest_postfix_index_index_index - 1\n    longest_postfix_index_index_length\
    \ = longest_postfix_index_length\n    longest_postfix_index_length = longest_postfix_length\n\
    \    longest_postfix_index = longest_postfix_index\n    longest_postfix_index_index\
    \ = longest_postfix_index_index - 1\n  end\n  while longest_postfix_index_index\
    \ > 0 do\n    longest_postfix_index_index_length = longest_postfix_index_length\n\
    \    longest_postfix_index_length = longest_postfix_length\n    longest_postfix_index\
    \ = longest_postfix_index\n    longest_postfix_index_index = longest_postfix_index_index\
    \ - 1\n  end\n  while longest_postfix_index_index > 0 do\n    longest_postfix_index_index_length\
    \ = longest_postfix_index_length\n    longest_postfix_index_length = longest_postfix_length\n\
    \    longest_postfix_index = longest_postfix_index\n    longest_postfix_index_index\
    \ = longest_postfix_index_index - 1\n  end\n  while longest_postfix_index_index\
    \ > 0 do\n    longest_postfix_index_index_length = longest_postfix_index_length\n\
    \    longest_postfix_index_length = longest_postfix_length\n    longest_postfix_index\
    \ = longest_postfix_index\n    longest_postfix_index_index = longest_postfix_index_index\
    \ - 1\n  end\n  while longest_postfix_index_index > 0 do\n    longest_postfix_index_index_length\
    \ = longest_postfix_index_length\n    longest_postfix_index_length = longest_postfix_length\n\
    \    longest_postfix_index = longest_postfix_index", "    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = #string\n\
    \    local index = 1\n    while index <= length do\n        postfix = string.sub(postfix,\
    \ 1, index - 1) + postfix + string.sub(postfix, index + 1)\n        reverse =\
    \ reverse..string.sub(palindrome, 1, index - 1)..reverse\n        index = index\
    \ + 1\n    end\n    postfix = postfix .. reverse\n    return postfix\nend", " \
    \ local postfix = string\n  local reversed_postfix = string\n  local palindrome\
    \ = string\n  local prefix_length = 1\n  while true do\n    local postfix_length\
    \ = #postfix + 1\n    local reversed_postfix_length = #reversed_postfix + 1\n\
    \    local palindrome_length = #palindrome + 1\n    local palindrome_suffix =\
    \ string.rep(palindrome_suffix, palindrome_length)\n    local postfix_suffix =\
    \ string.rep(postfix, postfix_length)\n    local reversed_postfix_suffix = string.reverse(postfix_suffix)\n\
    \    if palindrome_length == postfix_length then\n      palindrome = palindrome_suffix\n\
    \      break\n    end\n    if palindrome_length == reversed_postfix_length then\n\
    \      palindrome = palindrome_suffix\n      break\n    end\n    if palindrome_length\
    \ < postfix_length then\n      postfix = postfix_suffix\n      prefix_length =\
    \ prefix_length + 1\n      continue\n    end\n    if palindrome_length < reversed_postfix_length\
    \ then\n      reversed_postfix = reversed_postfix_suffix\n      prefix_length\
    \ = prefix_length + 1\n      continue\n    end\n    if palindrome_length > postfix_length\
    \ then\n      postfix = postfix_suffix\n      prefix_length = prefix_length +\
    \ 1\n      continue\n    end\n    if palindrome_length > reversed_postfix_length\
    \ then\n      reversed_postfix = reversed_postfix_suffix\n      prefix_length\
    \ = prefix_length + 1\n      continue\n    end\n    if palindrome_length == postfix_length\
    \ and palindrome_length == reversed_postfix_length then\n      palindrome = palindrome_suffix\n\
    \      break\n    end\n  end\n  return palindrome\nend", "  local postfix = string\n\
    \  local suffix = ''\n  while true do\n    local reverse = reverse(string)\n \
    \   if reverse == string then\n      break\n    end\n    postfix = string..reverse\n\
    \    suffix = string..suffix\n    string = postfix\n  end\n  return string..suffix\n\
    end", "    local postfix = string\n    local suffix = ''\n    local longest =\
    \ 0\n    while true do\n        local postfix_reverse = string.gsub(postfix, '.',\
    \ function(c)\n            suffix = suffix .. c\n            longest = longest\
    \ + 1\n            return suffix\n        end)\n        if postfix_reverse ==\
    \ postfix then\n            return string\n        end\n        postfix = postfix_reverse\n\
    \    end\nend", "  local postfix = string\n  local reverse = ''\n  while true\
    \ do\n    local postfix = string\n    local reverse = ''\n    for i = #string,\
    \ 1, -1 do\n      local char = string[i]\n      reverse = reverse .. char\n  \
    \    if char == reverse then\n        postfix = postfix .. char\n      else\n\
    \        postfix = postfix .. reverse\n        break\n      end\n    end\n   \
    \ if postfix ~= string then\n      return postfix\n    end\n  end\nend", "  local\
    \ palindrome = string\n  local max_len = #string\n  local max_palindrome = string\n\
    \  local max_palindrome_len = #string\n  while max_len > 1 do\n    local palindrome_len\
    \ = #palindrome\n    local palindrome_postfix = palindrome:sub(1, palindrome_len\
    \ - 1)\n    local palindrome_prefix_len = #palindrome_postfix\n    local palindrome_prefix_postfix\
    \ = palindrome_postfix:sub(1, palindrome_prefix_len - 1)\n    local palindrome_prefix_reverse\
    \ = palindrome_prefix_postfix:reverse()\n    local palindrome_prefix_reverse_reverse\
    \ = palindrome_prefix_reverse:reverse()\n    local palindrome_prefix_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse:reverse()\n    local palindrome_prefix_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse:reverse()\n    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse_reverse:reverse()\n    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse_reverse_reverse:reverse()\n    local\
    \ palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse = palindrome_prefix_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse =\
    \ palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse:reverse()\n\
    \    local palindrome_prefix_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = palin", "    local postfix = string\n    local reverse = ''\n    local longest\
    \ = 0\n    while true do\n        local start = string.find(postfix, reverse)\n\
    \        if start == nil then\n            break\n        end\n        longest\
    \ = start + longest\n        postfix = string.sub(postfix, start + 1)\n      \
    \  reverse = string.sub(postfix, 1, start - 1) + reverse\n    end\n    return\
    \ string.sub(postfix, longest, #postfix)\nend", "    local postfix = string\n\
    \    local suffix = ''\n    local palindrome = ''\n    while true do\n       \
    \ local postfix_length = #postfix\n        local suffix_length = #suffix\n   \
    \     if postfix_length == 0 then\n            palindrome = suffix\n         \
    \   break\n        end\n        if suffix_length == 0 then\n            palindrome\
    \ = postfix\n            break\n        end\n        local postfix_reverse = reverse(postfix)\n\
    \        local suffix_reverse = reverse(suffix)\n        if postfix_reverse ~=\
    \ suffix_reverse then\n            postfix = postfix_reverse\n            suffix\
    \ = suffix_reverse\n        else\n            postfix = postfix_reverse\n    \
    \        suffix = suffix_reverse\n            postfix_length = postfix_length\
    \ - 1\n            suffix_length = suffix_length - 1\n        end\n        if\
    \ postfix_length == 0 then\n            palindrome = suffix\n            break\n\
    \        end\n        if suffix_length == 0 then\n            palindrome = postfix\n\
    \            break\n        end\n    end\n    return palindrome\nend", "  local\
    \ palindrome = string\n  local postfix = string\n  local reverse = string\n  while\
    \ true do\n    local postfix = string.sub(palindrome, #palindrome)\n    if postfix\
    \ == reverse then\n      break\n    end\n    reverse = reverse .. postfix\n  end\n\
    \  -- Append reverse of postfix to palindrome.\n  local i = #palindrome\n  while\
    \ i > 0 do\n    local c = string.sub(palindrome, i, i)\n    if c == reverse then\n\
    \      palindrome = palindrome .. c\n      i = i - 1\n    else\n      palindrome\
    \ = palindrome .. c\n    end\n    i = i - 1\n  end\n  return palindrome\nend",
  "  -- Find longest postfix of string that is a palindrome.\n  local postfix = string\n\
    \  local postfix_len = #string\n  local longest_postfix = string\n  while postfix_len\
    \ > 1 do\n    local postfix_len = postfix_len - 1\n    local postfix_postfix =\
    \ string\n    for i = 1, postfix_len do\n      postfix_postfix = postfix_postfix..string[i]\n\
    \    end\n    if postfix_postfix ~= postfix_postfix.. postfix_postfix.. postfix_postfix\
    \ then\n      postfix = postfix_postfix\n      longest_postfix = postfix_postfix\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local reversed_prefix = string\n\
    \  local reversed_prefix_len = #string\n  for i = 1, #longest_postfix do\n   \
    \ reversed_prefix = reversed_prefix..string[reversed_prefix_len+i]\n  end\n  return\
    \ reversed_prefix..longest_postfix\nend", "  -- If string is empty, return empty\
    \ string.\n  if string == '' then return '' end\n  -- If string has only one character,\
    \ return string.\n  if #string == 1 then return string end\n  -- Find the longest\
    \ postfix of supplied string that is a palindrome.\n  local longest_postfix =\
    \ string\n  local longest_postfix_length = 1\n  for i = 1, #string do\n    --\
    \ Find the longest postfix of string that is a palindrome.\n    local postfix\
    \ = string\n    local postfix_length = i\n    for j = 1, #string do\n      --\
    \ If string is a palindrome, append the reverse of the string prefix that comes\
    \ before the palindromic suffix.\n      if string[i] == string[j] then\n     \
    \   postfix = string\n        postfix_length = j\n      end\n    end\n    -- If\
    \ postfix is a palindrome, append it to the longest postfix.\n    if postfix_length\
    \ == longest_postfix_length then\n      longest_postfix = postfix .. longest_postfix\n\
    \      longest_postfix_length = longest_postfix_length + 1\n    end\n  end\n \
    \ return longest_postfix\nend", "  local postfix = string\n  local reverse = string\n\
    \  local i = #string\n  while i do\n    local c = string.sub(string,i,i)\n   \
    \ if c ~= string.sub(reverse,#reverse,#reverse) then\n      postfix = string.sub(string,i,i..#reverse)\n\
    \      reverse = reverse .. c\n    end\n    i = i - 1\n  end\n  return postfix\
    \ .. reverse .. string\nend", "  local palindrome = string\n  local suffix = ''\n\
    \  local suffixLength = 0\n  local longestPalindrome = ''\n  local longestPalindromeLength\
    \ = 0\n  while palindrome ~= '' do\n    suffixLength = palindrome:len()\n    suffix\
    \ = suffix:reverse()\n    longestPalindromeLength = palindrome:len() + suffixLength\n\
    \    if suffixLength > longestPalindromeLength then\n      longestPalindrome =\
    \ suffix:reverse()\n    end\n    palindrome = palindrome:sub(1, palindrome:len()\
    \ - suffixLength)\n  end\n  return longestPalindrome\nend", "  local palindrome\
    \ = string\n  local postfix = string.gsub(string, '^%s*$', '') -- Remove all prefix\n\
    \  local reversed_postfix = string.gsub(string.gsub(postfix, '%s*$', ''), '^%s*$',\
    \ '')\n  if postfix ~= reversed_postfix then\n    palindrome = palindrome .. reversed_postfix\n\
    \  end\n  return palindrome\nend", "    local postfix = string\n    local reverse\
    \ = ''\n    local length = 0\n    while true do\n        local index = string.find(postfix,\
    \ '%a', 1, true)\n        if index == nil then\n            break\n        end\n\
    \        postfix = string.sub(postfix, index + 1)\n        local reverse = reverse\
    \ .. string.sub(postfix, 1, index - 1)\n        length = length + 1\n    end\n\
    \    return postfix .. reverse .. string\nend", "  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  for\
    \ i = 1, #string do\n    local prefix = string\n    prefix = prefix:sub(1, i)\n\
    \    local reverse = prefix:reverse()\n    if reverse == prefix then\n      longest\
    \ = i\n      break\n    end\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local result\
    \ = string\n  result = result:sub(1, longest)\n  result = result .. string\n \
    \ result = result:reverse()\n  return result\nend", "  local postfix = string\n\
    \  local palindrome = string\n  local i = #string\n  while i ~= 0 do\n    local\
    \ char = string.sub(string,i,i)\n    if char == string.sub(postfix,#postfix,#postfix)\
    \ then\n      postfix = string.sub(postfix,1,#postfix)\n      palindrome = palindrome\
    \ .. string.sub(postfix,#postfix,#postfix) .. char\n      i = i - 1\n    else\n\
    \      postfix = postfix .. char\n      i = i - 1\n    end\n  end\n  return palindrome\n\
    end", "    local palindrome = string\n    local postfix = string\n    local length\
    \ = #string\n    while length > 1 do\n        postfix = string\n        length\
    \ = length - 1\n        while length > 1 do\n            postfix = postfix ..\
    \ string\n            length = length - 1\n        end\n        postfix = postfix\
    \ .. string\n        palindrome = palindrome .. string\n        length = length\
    \ - 1\n    end\n    return palindrome .. postfix\nend", "  -- Find the longest\
    \ postfix that is a palindrome.\n  local postfix = string\n  local longest_postfix\
    \ = string\n  while true do\n    local postfix = postfix .. string\n    if string.find(postfix,\
    \ string.reverse(postfix)) then\n      longest_postfix = postfix\n      break\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local reversed_prefix = string\n\
    \  local reversed_prefix_length = #string\n  for i = 1, #longest_postfix do\n\
    \    reversed_prefix = reversed_prefix .. string.reverse(longest_postfix:sub(i,\
    \ i))\n    reversed_prefix_length = math.max(reversed_prefix_length, #reversed_prefix)\n\
    \  end\n  return reversed_prefix .. string.reverse(longest_postfix:sub(reversed_prefix_length))\n\
    end", "  local postfix = string\n  local reverse = ''\n  while true do\n    local\
    \ postfix = string.sub(postfix, 1, string.len(postfix) - 1) .. reverse\n    if\
    \ string.sub(postfix, 1, string.len(postfix)) ~= string.sub(postfix, 1, string.len(postfix)\
    \ - 1) then\n      break\n    end\n    reverse = reverse .. string.sub(postfix,\
    \ string.len(postfix) - 1, 1)\n  end\n  return postfix .. reverse\nend", "  local\
    \ postfix = string\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local reverse = string.sub(postfix, 1, longest - 1)\n    if reverse\
    \ ~= reverse then\n      postfix = string.sub(postfix, 1, longest - 1) + reverse\
    \ + string.sub(postfix, longest + 1)\n      break\n    end\n  end\n  return postfix\
    \ .. string.reverse(string.sub(postfix, longest + 1))\nend", "    local palindrome\
    \ = string\n    local postfix = string\n    local reverse = string\n    local\
    \ length = #string\n    for i = 1, length do\n        postfix = postfix .. string[length\
    \ - i - 1]\n        reverse = reverse .. string[length - i - 1]\n        if postfix\
    \ ~= reverse then\n            palindrome = palindrome .. string[length - i -\
    \ 1]\n        end\n    end\n    return palindrome\nend", "  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest =\
    \ 0\n  for i = #string - 1, 1, -1 do\n    local prefix = string\n    prefix =\
    \ prefix:sub(i, i)\n    local reverse = string\n    reverse = reverse:reverse()\n\
    \    if prefix ~= reverse then\n      longest = i\n      postfix = prefix .. reverse\n\
    \      break\n    end\n  end\n  -- Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n  postfix = string\n\
    \  postfix = postfix .. string:sub(1, longest)\n  return postfix\nend", "  --\
    \ If string is empty or null, return empty string.\n  if string == nil then\n\
    \    return ''\n  end", "    local palindrome = string\n    local reversed_string\
    \ = string\n    local prefix_length = 0\n    local suffix_length = 0\n    while\
    \ true do\n        local postfix_length = #string - prefix_length - suffix_length\n\
    \        if postfix_length == 0 then\n            break\n        end\n       \
    \ local postfix = string[prefix_length:prefix_length + postfix_length]\n     \
    \   reversed_string = reversed_string..postfix..reversed_string\n        prefix_length\
    \ = prefix_length + postfix_length\n        suffix_length = suffix_length + postfix_length\n\
    \    end\n    return palindrome..reversed_string\nend", "  local palindrome =\
    \ string\n  local longest_postfix = string\n  local longest_postfix_length = string\n\
    \  local longest_prefix_length = string\n  local longest_prefix_postfix = string\n\
    \  local longest_prefix_postfix_length = string\n  local longest_prefix_postfix_postfix\
    \ = string\n  local longest_prefix_postfix_postfix_length = string\n  local longest_prefix_postfix_postfix_postfix\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_length = string\n \
    \ local longest_prefix_postfix_postfix_postfix_postfix = string\n  local longest_prefix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local longest_prefix_postfix_postfix_postfix_postfix_postfix_length = string\n\
    \  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = string\n  local longest_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_",
  "  local palindrome = string\n  local postfix = string\n  local reverse = string\n\
    \  local length = #string\n  while length > 1 do\n    local mid = math.floor((length\
    \ - 1) / 2)\n    postfix = string.sub(string, mid, mid+1)\n    reverse = string.sub(reverse,\
    \ mid, mid+1)\n    if string.sub(postfix, 1, mid) == reverse then\n      palindrome\
    \ = string.sub(palindrome, mid+1, #palindrome)\n      length = length - mid\n\
    \    else\n      length = length - mid\n    end\n  end\n  return palindrome\n\
    end", "    local palindrome = string\n    local postfix = string\n    local reverse\
    \ = string\n    local length = #string\n    for i = 1, length / 2 do\n       \
    \ postfix = string.sub(postfix, 1, i-1) + string.sub(postfix, i+1)\n        reverse\
    \ = reverse + string.sub(palindrome, 1, i-1) + string.sub(palindrome, i+1)\n \
    \   end\n    palindrome = string.sub(palindrome, 1, length-1) + reverse + string.sub(palindrome,\
    \ length-1)\n    return palindrome\nend", "  local palindrome = string\n  local\
    \ postfix = string\n  local reverse = string\n  local length = #string\n  while\
    \ length > 1 do\n    local half = math.floor(length / 2)\n    postfix = string[half]:reverse()\n\
    \    reverse = string[half]:reverse()\n    palindrome = palindrome .. postfix\
    \ .. reverse\n    length = length - half\n  end\n  return palindrome\nend", " \
    \   local postfix = string\n    local reverse = ''\n    local longest = 0\n  \
    \  for i = #string, 1, -1 do\n        local char = string[i]\n        longest\
    \ = longest > #char and #char or longest\n        reverse = reverse .. char\n\
    \        if reverse == postfix then\n            return string\n        end\n\
    \    end\n    return string\nend", "  local postfix = string\n  local reverse\
    \ = ''\n  local palindrome = ''\n  while postfix ~= '' do\n    local postfix_length\
    \ = #postfix\n    local reverse_length = #reverse\n    if postfix_length == 0\
    \ then\n      break\n    end\n    local postfix_reverse = reverse:sub(1, reverse_length)\n\
    \    local postfix_reverse = postfix_reverse:reverse()\n    if postfix_reverse\
    \ == postfix then\n      palindrome = palindrome .. postfix_reverse\n    end\n\
    \    postfix = postfix:sub(1, postfix_length - 1)\n  end\n  return palindrome\n\
    end", "    local palindrome = string\n    local postfix = string\n    local reverse\
    \ = string\n    local i = #string\n    while i do\n        postfix = string.sub(string,i,i-1)..postfix\n\
    \        reverse = reverse..string.sub(string,i-1,i)\n        i = i - 1\n    end\n\
    \    postfix = string.sub(string,1,#string-1)..postfix\n    if reverse == postfix\
    \ then\n        palindrome = string\n    end\n    return palindrome\nend", " \
    \ local postfix = string\n  local reverse = ''\n  while true do\n    local postfix\
    \ = string.sub(postfix, 1, string.len(postfix) - 1) .. reverse\n    if string.sub(postfix,\
    \ 1, string.len(postfix)) ~= string then\n      break\n    end\n    reverse =\
    \ reverse .. string.sub(postfix, string.len(postfix))\n  end\n  return postfix\
    \ .. reverse\nend", "  local reversed_string = ''\n  local longest_postfix_length\
    \ = 0\n  local longest_postfix_index = 0\n  for i = 1, #string do\n    local postfix_length\
    \ = string:sub(i, i)\n    if postfix_length == 0 then\n      break\n    end\n\
    \    local postfix_index = #string - i - 1\n    local postfix_string = string\n\
    \    if postfix_index > 0 then\n      postfix_string = string\n      postfix_string:sub(1,\
    \ postfix_index) = string\n    end\n    if postfix_length < longest_postfix_length\
    \ then\n      longest_postfix_length = postfix_length\n      longest_postfix_index\
    \ = postfix_index\n    end\n    local postfix_reversed_string = postfix_string:reverse()\n\
    \    if postfix_reversed_string == postfix_string then\n      reversed_string\
    \ = reversed_string .. postfix_string\n    end\n  end\n  if reversed_string ~=\
    \ '' then\n    return reversed_string .. string:sub(longest_postfix_index + 1,\
    \ #string)\n  end\n  return ''\nend", "  local postfix = string\n  local palindrome\
    \ = string\n  local palindrome_length = #string\n  local palindrome_start = #string\n\
    \  while palindrome_length > 1 do\n    local postfix_length = #postfix\n    local\
    \ postfix_start = #postfix\n    while postfix_length > 1 do\n      local postfix_mid\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid2\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid3\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid4\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid5\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid6\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid7\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid8\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid9\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid10\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid11\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid12\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid13\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid14\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid15\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid16\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid17\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid18\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid19\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid20\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid21\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid22\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid23\
    \ = math.floor((postfix_start + postfix_length) / 2)\n      local postfix_mid24\
    \ = math.floor((postfix_start + postfix_length) / 2)", "    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    for i = #postfix, 1, -1 do\n\
    \        local char = postfix:sub(i, i)\n        reverse = reverse .. char\n \
    \       if char == reverse then\n            longest = i\n        end\n    end\n\
    \    postfix = postfix .. reverse\n    return postfix\nend", "    local palindrome\
    \ = string\n    local max_len = string.len(string)\n    for i = 1, max_len do\n\
    \        local prefix = string\n        for j = 1, i do\n            prefix =\
    \ prefix .. string[j]\n        end\n        local suffix = string\n        for\
    \ j = i, max_len do\n            suffix = suffix .. string[j]\n        end\n \
    \       if suffix == prefix then\n            palindrome = palindrome .. string\n\
    \        end\n    end\n    return palindrome\nend", "  local palindrome = string\n\
    \  local suffix = ''\n  local prefix_length = 0\n  local longest_postfix_length\
    \ = 0\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_", "  local postfix = string\n  local reverse = string\n  local\
    \ length = #string\n  while length > 1 do\n    local mid = math.floor((length\
    \ + 1) / 2)\n    if string[mid] == string[mid] then\n      postfix = string[mid]:reverse():append(postfix)\n\
    \      reverse = string[mid]:reverse():append(reverse)\n      length = mid\n \
    \   else\n      length = mid\n    end\n  end\n  return postfix .. reverse\nend",
  "  local palindrome = string\n  local prefix_length = 1\n  while palindrome ~= string.sub(string,\
    \ 1, prefix_length) do\n    prefix_length = prefix_length + 1\n  end\n  local\
    \ postfix_length = string.len(string) - prefix_length\n  local reversed_string\
    \ = string.sub(string, prefix_length, postfix_length)\n  local palindrome_suffix\
    \ = reversed_string\n  local palindrome_prefix = string.sub(string, 1, prefix_length)\n\
    \  local palindrome = string.sub(palindrome, prefix_length, postfix_length)\n\
    \  local palindrome = palindrome .. palindrome_suffix .. palindrome_prefix\n \
    \ return palindrome\nend", "    local palindrome = string\n    local postfix =\
    \ string.len(string)\n    while postfix > 1 do\n        local reverse = string.sub(string,\
    \ 1, postfix - 1)\n        local prefix = string.sub(string, 1, postfix - 1)\n\
    \        if reverse == prefix then\n            palindrome = palindrome .. reverse\
    \ .. string.sub(string, postfix - 1)\n        end\n        postfix = postfix -\
    \ 1\n    end\n    return palindrome\nend", "  local postfix = string\n  local\
    \ reverse = ''\n  local longest = 0\n  while true do\n    longest = longest +\
    \ 1\n    local postfix = string\n    for i = 1, longest do\n      postfix = postfix\
    \ .. string[#string]\n    end\n    local reverse = reverse .. string\n    if string.sub(reverse,\
    \ 1, #string) == postfix then\n      break\n    end\n  end\n  return reverse ..\
    \ string\nend", "  local palindrome = string\n  local palindrome_len = #string\n\
    \  while palindrome_len > 1 do\n    local postfix_len = palindrome_len - 2\n \
    \   local postfix = string..string.rev(palindrome:sub(1, postfix_len))\n    if\
    \ postfix ~= palindrome then\n      palindrome = postfix\n      palindrome_len\
    \ = #postfix\n    end\n  end\n  return palindrome\nend", "  local palindrome =\
    \ string\n  local longest = 0\n  local longestLength = 0\n  local longestPostfix\
    \ = 0\n  local longestPostfixLength = 0\n  for i = 1, #string do\n    local postfix\
    \ = string\n    local postfixLength = 0\n    for j = 1, i do\n      postfix =\
    \ postfix .. string[j]\n      postfixLength = postfixLength + 1\n    end\n   \
    \ local postfixLength2 = #postfix - 1\n    if postfixLength2 > longestLength then\n\
    \      longest = postfix\n      longestLength = postfixLength2\n      longestPostfix\
    \ = postfix\n      longestPostfixLength = postfixLength\n    end\n  end\n  if\
    \ longestLength > longestPostfixLength then\n    palindrome = string\n  end\n\
    \  local reverse = string\n  for i = 1, #string do\n    reverse = reverse .. string[#string\
    \ - i - 1]\n  end\n  return palindrome .. reverse .. string\nend", "  -- If string\
    \ is empty, return empty string.\n  if string == '' then\n    return ''\n  end",
  "  local palindrome = string\n  local suffix = ''\n  local prefix_length = 0\n \
    \ local max_prefix_length = 0\n  local max_suffix_length = 0\n  local max_suffix_length_index\
    \ = 0\n  local max_suffix_length_index2 = 0\n  local max_suffix_length_index3\
    \ = 0\n  local max_suffix_length_index4 = 0\n  local max_suffix_length_index5\
    \ = 0\n  local max_suffix_length_index6 = 0\n  local max_suffix_length_index7\
    \ = 0\n  local max_suffix_length_index8 = 0\n  local max_suffix_length_index9\
    \ = 0\n  local max_suffix_length_index10 = 0\n  local max_suffix_length_index11\
    \ = 0\n  local max_suffix_length_index12 = 0\n  local max_suffix_length_index13\
    \ = 0\n  local max_suffix_length_index14 = 0\n  local max_suffix_length_index15\
    \ = 0\n  local max_suffix_length_index16 = 0\n  local max_suffix_length_index17\
    \ = 0\n  local max_suffix_length_index18 = 0\n  local max_suffix_length_index19\
    \ = 0\n  local max_suffix_length_index20 = 0\n  local max_suffix_length_index21\
    \ = 0\n  local max_suffix_length_index22 = 0\n  local max_suffix_length_index23\
    \ = 0\n  local max_suffix_length_index24 = 0\n  local max_suffix_length_index25\
    \ = 0\n  local max_suffix_length_index26 = 0\n  local max_suffix_length_index27\
    \ = 0\n  local max_suffix_length_index28 = 0\n  local max_suffix_length_index29\
    \ = 0\n  local max_suffix_length_index30 = 0\n  local max_suffix_length_index31\
    \ = 0\n  local max_suffix_length_index32 = 0\n  local max_suffix_length_index33\
    \ = 0\n  local max_suffix_length_index34 = 0\n  local max_suffix_length_index35\
    \ = 0\n  local max_suffix_length_index36 = 0\n  local max_suffix_length_index37\
    \ = 0\n  local max_suffix_length_index38 = 0\n  local max_suffix_length_index39\
    \ = 0\n  local max_suffix_length_index40 = 0\n  local max_suffix_length_index41\
    \ = 0\n  local max_suffix_length_index42 = 0\n  local max_suffix_length_index43\
    \ = 0\n  local max_suffix_length_index44 = 0\n  local max_suffix_length_index45\
    \ = 0\n  local max_suffix_length_index46 = 0\n  local max_suffix_length_index47\
    \ = 0\n  local max_suffix_length_index48", "  local reversed_string = string\n\
    \  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n  for\
    \ i = 1, #string do\n    local postfix_length = #string - i\n    if postfix_length\
    \ >= longest_postfix_length then\n      longest_postfix_length = postfix_length\n\
    \      longest_postfix_index = i\n    end\n  end\n  local postfix_length = longest_postfix_length\
    \ - 1\n  local postfix_start = longest_postfix_index + 1\n  local postfix_end\
    \ = #string + longest_postfix_length\n  local postfix_string = string\n  local\
    \ postfix_reversed_string = ''\n  for i = postfix_start, postfix_end do\n    postfix_reversed_string\
    \ = postfix_reversed_string .. string[i]\n  end\n  if postfix_reversed_string\
    \ == postfix_string then\n    return string\n  end\n  local palindrome = string\n\
    \  local prefix_length = #string\n  local prefix_start = postfix_start - 1\n \
    \ local prefix_end = postfix_end - 1\n  local prefix_string = string\n  for i\
    \ = prefix_start, prefix_end do\n    prefix_string = prefix_string .. string[i]\n\
    \  end\n  local prefix_reversed_string = ''\n  for i = prefix_start, prefix_end\
    \ do\n    prefix_reversed_string = prefix_reversed_string .. string[i]\n  end\n\
    \  local prefix_length = #prefix_string\n  for i = 1, prefix_length do\n    palindrome\
    \ = palindrome .. prefix_reversed_string[i]\n  end\n  return palindrome\nend",
  "  -- Find the longest postfix that is a palindrome.\n  local postfix = string\n\
    \  local i = #string\n  while i do\n    local c = string.sub(string,i,i)\n   \
    \ if c ~= string.sub(string,i,i) or c ~= string.sub(string,i,i-1) then\n     \
    \ postfix = string.sub(string,i,i-1)..postfix\n      i = i-1\n    else\n     \
    \ i = i-1\n    end\n  end\n  -- Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n  postfix = string.sub(string,#postfix)..string.sub(postfix,1,#postfix)\n\
    \  return postfix\nend", "    local postfix = string\n    local reverse = ''\n\
    \    local longest = 0\n    while true do\n        longest = longest + 1\n   \
    \     local postfix_reverse = postfix:reverse()\n        if postfix_reverse ==\
    \ postfix then\n            return string\n        end\n        if postfix_reverse:sub(1,\
    \ longest) == postfix then\n            postfix = postfix_reverse\n        end\n\
    \    end\nend", "    local palindrome = string\n    local postfix = string\n \
    \   local reversed_postfix = string\n    local prefix_length = 0\n    local suffix_length\
    \ = 0\n    while true do\n        prefix_length = prefix_length + 1\n        postfix\
    \ = string.sub(palindrome, prefix_length, string.length(palindrome))\n       \
    \ reversed_postfix = string.sub(reversed_postfix, 1, string.length(reversed_postfix)-1)\n\
    \        if string.sub(postfix, 1, string.length(postfix)) == reversed_postfix\
    \ then\n            suffix_length = suffix_length + 1\n            palindrome\
    \ = string.sub(palindrome, prefix_length, string.length(palindrome))\n       \
    \ else\n            break\n        end\n    end\n    return palindrome .. reversed_postfix\
    \ .. string.sub(palindrome, prefix_length, string.length(palindrome))\nend", " \
    \ local postfix = string\n  local longest = 0\n  local longestLength = 0\n  local\
    \ longestPostfix = ''\n  local longestPostfixLength = 0\n  while true do\n   \
    \ local postfix = string\n    local reversedPostfix = string\n    local reversedPostfixLength\
    \ = 0\n    for i = #postfix, 1, -1 do\n      local char = string.sub(postfix,\
    \ i, i)\n      reversedPostfix = reversedPostfix .. char\n      reversedPostfixLength\
    \ = reversedPostfixLength + #char\n      if char == string.sub(reversedPostfix,\
    \ reversedPostfixLength - 1, reversedPostfixLength) then\n        postfix = string.sub(postfix,\
    \ 1, i)\n        postfix = postfix .. string.sub(reversedPostfix, reversedPostfixLength\
    \ - 1, reversedPostfixLength)\n        longestPostfix = longestPostfix .. char\n\
    \        longestPostfixLength = longestPostfixLength + #char\n      end\n    end\n\
    \    if #postfix > longest then\n      longest = #postfix\n      longestPostfix\
    \ = postfix\n      longestPostfixLength = longestPostfixLength\n    end\n    if\
    \ #postfix < longest then\n      break\n    end\n  end\n  return longestPostfix\
    \ .. string.sub(reversedPostfix, longestPostfixLength - 1, longestPostfixLength)\n\
    end", "  local palindrome = string\n  local suffix = ''\n  local suffixLength\
    \ = 0\n  local longestPalindrome = ''\n  local longestPalindromeLength = 0\n \
    \ local longestPalindromeSuffix = ''\n  local longestPalindromeSuffixLength =\
    \ 0\n  for i = 1, #string do\n    local char = string[i]\n    local reverse =\
    \ string:reverse()\n    if char == reverse then\n      suffixLength = suffixLength\
    \ + 1\n      suffix = suffix .. char\n    else\n      if suffixLength > longestPalindromeLength\
    \ then\n        longestPalindrome = string\n        longestPalindromeLength =\
    \ suffixLength\n        longestPalindromeSuffix = suffix\n        longestPalindromeSuffixLength\
    \ = suffixLength\n      end\n      suffixLength = 0\n    end\n  end\n  if suffixLength\
    \ > longestPalindromeLength then\n    longestPalindrome = string\n    longestPalindromeLength\
    \ = suffixLength\n    longestPalindromeSuffix = suffix\n    longestPalindromeSuffixLength\
    \ = suffixLength\n  end\n  return longestPalindrome .. suffix:reverse()\nend",
  "    local reversed_string = string\n    local longest_postfix_length = 1\n    local\
    \ longest_postfix_index = 1\n    while reversed_string ~= string do\n        local\
    \ postfix_length = string.len(reversed_string)\n        if postfix_length >= longest_postfix_length\
    \ then\n            longest_postfix_length = postfix_length\n            longest_postfix_index\
    \ = longest_postfix_length\n        end\n        reversed_string = reversed_string..string\n\
    \    end\n    local postfix_length = string.len(reversed_string)\n    if postfix_length\
    \ >= longest_postfix_length then\n        return string\n    else\n        return\
    \ string..reversed_string\n    end\nend", "  local palindrome = string\n  local\
    \ suffix = ''\n  local longest_postfix_length = 0\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ lon", "    local postfix = string\n    local reverse = ''\n    local palindrome\
    \ = ''\n    while true do\n        local postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - 1)\n        reverse = reverse .. postfix\n        local palindrome = string.sub(reverse,\
    \ 1, string.len(reverse) - 1)\n        if palindrome == postfix then\n       \
    \     return palindrome\n        end\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
