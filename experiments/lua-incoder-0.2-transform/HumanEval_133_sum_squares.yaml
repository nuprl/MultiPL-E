name: HumanEval_133_sum_squares
language: lua
prompt: "-- You are given a list of numbers.\n-- You need to return the sum of squared\
  \ numbers in the given list,\n-- round each element in the list to the upper int(Ceiling)\
  \ first.\n-- Examples:\n-- >>> lst({1.0, 2.0, 3.0})\n-- 14\n-- >>> lst({1.0, 4.0,\
  \ 9.0})\n-- 98\n-- >>> lst({1.0, 3.0, 5.0, 7.0})\n-- 84\n-- >>> lst({1.4, 4.2, 0.0})\n\
  -- 29\n-- >>> lst({-2.4, 1.0, 1.0})\n-- 6\nlocal function sum_squares(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_squares\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0}), 14)\n    lu.assertEquals(candidate({1.0, 3.0, 5.0, 7.0}), 84)\n  \
  \  lu.assertEquals(candidate({1.4, 4.2, 0.0}), 29)\n    lu.assertEquals(candidate({-2.4,\
  \ 1.0, 1.0}), 6)\n    lu.assertEquals(candidate({100.0, 1.0, 15.0, 2.0}), 10230)\n\
  \    lu.assertEquals(candidate({10000.0, 10000.0}), 200000000)\n    lu.assertEquals(candidate({-1.4,\
  \ 4.6, 6.3}), 75)\n    lu.assertEquals(candidate({-1.4, 17.9, 18.9, 19.9}), 1086)\n\
  \    lu.assertEquals(candidate({0.0}), 0)\n    lu.assertEquals(candidate({-1.0}),\
  \ 1)\n    lu.assertEquals(candidate({-1.0, 1.0, 0.0}), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + math.pow(v,2)\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    sum =\
    \ sum + lst[i] * lst[i]\n  end\n  return sum\nend", "  local sum = 0\n  for _,\
    \ v in ipairs(lst) do\n    sum = sum + math.pow(v,2)\n  end\n  return sum\nend",
  "  local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v*v\n  end\n  return\
    \ sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] *\
    \ lst[i]\n  end\n  return sum\nend", "  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    sum = sum + v * v\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ _, v in ipairs(lst) do\n    sum = sum + v * v\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i]\
    \ * lst[i]\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n\
    \    sum = sum + lst[i] * lst[i]\n  end\n  return sum\nend", "  local sum = 0\n\
    \  for i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n  return sum\nend",
  "  local sum = 0\n  for i = 1, #lst do\n    sum = sum + lst[i] * lst[i]\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    sum =\
    \ sum + v*v\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n\
    \    sum = sum + math.pow(lst[i], 2)\n  end\n  return sum\nend", "  local sum\
    \ = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v*v\n  end\n  return sum\n\
    end", "  local sum = 0\n  for i = 1, #lst do\n    sum = sum + math.pow(lst[i],\
    \ 2)\n  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    sum\
    \ = sum + lst[i] * lst[i]\n  end\n  return sum\nend", "  local sum = 0\n  for\
    \ i = 1, #lst do\n    sum = sum + lst[i]*lst[i]\n  end\n  return sum\nend", " \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    sum = sum + v * v\n  end\n\
    \  return sum\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    sum =\
    \ sum + v * v\n  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
