language: lua
name: HumanEval_11_string_xor
results:
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = ''\n \
    \   for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > '9' then\n\
    \            c = c - '9' + '0'\n        elseif c < '0' then\n            c = c\
    \ + 10\n        end\n        result = result .. c\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4gfn8rnb.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp4gfn8rnb.lua:8: in function 'candidate'\n\t/tmp/tmp4gfn8rnb.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = tostring(c):byte(1, -1)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzd2_u9dy.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzd2_u9dy.lua:8: in function 'candidate'\n\t/tmp/tmpzd2_u9dy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local ret = ''\n    for\
    \ i = 1, #a do\n        ret = ret .. string.rep(a[i], #b) .. b[i]\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5097fpnq.lua:8:\
    \ bad argument #1 to 'rep' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp5097fpnq.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp5097fpnq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n  end\n  return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw3yyret.lua:16:\
    \ expected: \"010010\"\nactual: \"6.600972468622e+821.3471372384943e+816.600972468622e+825.0070207826346e+802.4033699756646e+825.0070207826346e+80\"\
    \nstack traceback:\n\t/tmp/tmpcw3yyret.lua:16: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local c = ''\n  for i =\
    \ 1, #a do\n    c = c .. string.rep(a[i], #b[i])\n  end\n  return c\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw_sjv3kk.lua:8:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpw_sjv3kk.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpw_sjv3kk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local bin1 = tonumber(a,\
    \ 2)\n  local bin2 = tonumber(b, 2)\n  local xor = bin1 xor bin2\n  local result\
    \ = tostring(bin2) and tostring(xor) or tostring(xor and bin1 or bin2)\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q97jfa0.lua:8: ''='' expected near ''bin2''

    '
  stdout: ''
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      res = res\
    \ .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgta1bhl4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpgta1bhl4.lua:8: in function 'candidate'\n\t/tmp/tmpgta1bhl4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local s = ''\n  for i =\
    \ 1, #a do\n    local c = a[i]\n    local d = b[i]\n    s = s .. string.format('%x',\
    \ c ^ d)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl1w2skj.lua:10:\
    \ attempt to perform arithmetic on local 'c' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpzl1w2skj.lua:10: in function 'candidate'\n\t/tmp/tmpzl1w2skj.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbak2ly2n.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpbak2ly2n.lua:8: in function 'candidate'\n\t/tmp/tmpbak2ly2n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local binA = '0b'\n  local\
    \ binB = '0b'\n  for i = 1, #a do\n    binA = binA .. tostring(a:byte(i))\n  end\n\
    \  for i = 1, #b do\n    binB = binB .. tostring(b:byte(i))\n  end\n  return binA:sub(1,\
    \ #binA) .. binB:sub(1, #binB)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0nn0htrh.lua:20:\
    \ expected: \"010010\"\nactual: \"0b4949494848480b494849484948\"\nstack traceback:\n\
    \t/tmp/tmp0nn0htrh.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbak2ly2n.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpbak2ly2n.lua:8: in function 'candidate'\n\t/tmp/tmpbak2ly2n.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a[i]) ^ tostring(b[i])\n    if c >\
    \ 1 then\n      result = result .. \"1\"\n    elseif c < 1 then\n      result\
    \ = result .. \"0\"\n    else\n      result = result .. c\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_4m58j0d.lua:8:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmp_4m58j0d.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp_4m58j0d.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu4pkexq.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplu4pkexq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local res = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      res = res\
    \ .. \"1\"\n    else\n      res = res .. \"0\"\n    end\n  end\n  return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgta1bhl4.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpgta1bhl4.lua:8: in function 'candidate'\n\t/tmp/tmpgta1bhl4.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result\
    \ = result .. \"1\"\n    elseif c = 0 then\n      result = result .. \"0\"\n \
    \   else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9p5q9kuw.lua:11: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local s = ''\n    for\
    \ i = 1, #a do\n        s = s .. string.rep(a[i], #b[i])\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = string_xor\n    lu.assertEquals(candidate('111000', '101010'), '010010')\n\
    \    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd9p_qns4.lua:8:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpd9p_qns4.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpd9p_qns4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = tostring(a:sub(i, i))\n    local d = tostring(b:sub(i,\
    \ i))\n    local res = c:byte() ^ d:byte()\n    local carry = tostring(1 - (res\
    \ % 2))\n    result = result .. carry .. tostring(res % 2)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
    \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
    \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9sqdmxvq.lua:20:\
    \ expected: \"010010\"\nactual: \"101010101010\"\nstack traceback:\n\t/tmp/tmp9sqdmxvq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750267
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1jm__5e.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpu1jm__5e.lua:8: in function 'candidate'\n\t/tmp/tmpu1jm__5e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n  local result = \"\"\n \
    \ for i = 1, #a do\n    local c = a[i]\n    local d = b[i]\n    if c ~= d then\n\
    \      result = result .. c\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = string_xor\n    lu.assertEquals(candidate('111000',\
    \ '101010'), '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplu4pkexq.lua:20:\
    \ expected: \"010010\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplu4pkexq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750241
- exit_code: 1
  program: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
    \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
    \ '110')\n-- '100'\nlocal function string_xor(a, b)\n    local result = \"\"\n\
    \    for i = 1, #a do\n        local c = a[i] ^ b[i]\n        if c > 0 then\n\
    \            c = string.format(\"%x\", c)\n        end\n        result = result\
    \ .. c\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = string_xor\n    lu.assertEquals(candidate('111000', '101010'),\
    \ '010010')\n    lu.assertEquals(candidate('1', '1'), '0')\n    lu.assertEquals(candidate('0101',\
    \ '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1jm__5e.lua:8:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpu1jm__5e.lua:8: in function 'candidate'\n\t/tmp/tmpu1jm__5e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750241
