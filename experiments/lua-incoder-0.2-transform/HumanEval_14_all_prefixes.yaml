name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(i, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local prefix = ''\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n\
    \    prefixes[prefix] = true\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ length = #string\n  for i = 1, length do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n \
    \ for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes +\
    \ 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local longest = #string\n  local shortest = #string - 1\n  while shortest >\
    \ 0 do\n    local prefix = string[shortest]\n    shortest = shortest - 1\n   \
    \ prefixes[prefix] = prefixes[prefix] or {}\n    prefixes[prefix] = prefixes[prefix]\
    \ .. prefix\n  end\n  while longest > 0 do\n    local prefix = string[longest]\n\
    \    longest = longest - 1\n    prefixes[prefix] = prefixes[prefix] or {}\n  \
    \  prefixes[prefix] = prefixes[prefix] .. prefix\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  local shortest = #string\n  while longest > 0 do\n    local prefix = ''\n \
    \   for i = 1, longest do\n      prefix = prefix .. string[i]\n      if prefixes[prefix]\
    \ == nil then\n        prefixes[prefix] = true\n      else\n        shortest =\
    \ shortest - 1\n        break\n      end\n    end\n    longest = longest - 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest, shortest\n\
    \  for _, c in string.gmatch('(.-)') do\n    longest, shortest = longest, c or\
    \ shortest\n    prefixes[c] = true\n  end\n  return prefixes and prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local length = 0\n  for i = 1, #string\
    \ do\n    length = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes +\
    \ 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[i] = string\n  end\n  for i = 1, longest do\n  \
    \  local prefix = string\n    for j = 1, longest do\n      prefix = prefix ..\
    \ string[j]\n    end\n    prefixes[i] = prefix\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local index = 1\n  while true do\n    prefixes[index]\
    \ = string\n    index = index + 1\n    if index > #string then break end\n   \
    \ string = string.sub(string, 1)\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local prefix = {}\n  local i = 1\n  while i <= #string do\n    prefix[#prefix+1]\
    \ = string[i]\n    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefixes[#prefixes+1]\
    \ = prefix[#prefix]\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local i = #string\n  while\
    \ i do\n    prefixes[#prefixes + 1] = string[i]\n    i = i - 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string\
    \ do\n    prefix = prefix .. string[i]\n    prefixes[prefix] = true\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes,\
    \ function(a, b)\n    return #a > #b\n  end)\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest\
    \ = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[i] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  table.sort(prefixes, function(a, b) return #a < #b end)\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local longest, shortest =\
    \ string.len(), string\n  for i = 1, string.len() do\n    local prefix = string[1:i]\n\
    \    if prefix ~= \"\" then\n      longest, shortest = longest, prefix\n     \
    \ prefixes[prefix] = true\n    end\n  end\n  return prefixes, longest, shortest\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local longest, shortest\n  for _, c in string.gmatch(\"\
    (.-)\") do\n    if not shortest or #c < #shortest then\n      longest, shortest\
    \ = c, c\n    end\n    prefixes[c] = true\n  end\n  if shortest then\n    for\
    \ _, c in string.gmatch(\"(.-)\") do\n      if not prefixes[c] then\n        prefixes[c]\
    \ = true\n      end\n    end\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n \
    \ for i = 1, longest do\n    prefixes[i] = string\n  end\n  while #prefixes >\
    \ 0 do\n    local longest = #prefixes\n    for i = 1, longest do\n      local\
    \ prefix = prefixes[i]\n      local index = #string + longest\n      while index\
    \ > 1 do\n        local c = string[index]\n        if c ~= prefix[index] then\n\
    \          prefixes[i] = prefix\n          break\n        end\n        index =\
    \ index - 1\n      end\n    end\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local longest = #string\n  local shortest = longest\n  while longest\
    \ > 0 do\n    local prefix = ''\n    for i = 1, longest do\n      prefix = prefix\
    \ .. string[i]\n      prefixes[prefix] = true\n    end\n    longest = longest\
    \ - 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,i,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    prefixes[i] = string\n  end\n\
    \  while true do\n    longest = longest - 1\n    for i = 1, longest do\n     \
    \ if string.sub(i, i + 1) ~= string[i + 1] then\n        longest = longest - 1\n\
    \        break\n      end\n    end\n    if longest == 0 then\n      break\n  \
    \  end\n    prefixes[longest] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i =\
    \ 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ len = #string\n  for i = 1, len do\n    table.insert(prefixes, string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest_prefix = nil\n  for\
    \ i = 1, #string do\n    local prefix = string\n    for j = 1, i do\n      prefix\
    \ = prefix .. string[j]\n    end\n    table.insert(prefixes, prefix)\n    if longest_prefix\
    \ and #longest_prefix > #prefix then\n      longest_prefix = prefix\n    end\n\
    \  end\n  if longest_prefix then\n    table.insert(prefixes, longest_prefix)\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n  \
    \  prefixes[i] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[i] = string\n\
    \  end\n  for i = 1, longest do\n    for j = 1, longest do\n      if i > j then\n\
    \        prefixes[i] = prefixes[i] .. string[j]\n      end\n    end\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    local prefix = string[1:i]\n    if prefixes[prefix]\
    \ == nil then\n      table.insert(prefixes, prefix)\n    end\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local len = #string\n  for i = 1,\
    \ len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ prefix = ''\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n   \
    \ prefixes[prefix] = true\n  end\n  return prefixes\nend", "  local prefixes =\
    \ {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local len = #string\n  for\
    \ i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local length = #string\n  for i =\
    \ 1, length do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local len = #string\n  for i = 1,\
    \ len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest, shortest\n  longest, shortest =\
    \ #string, string\n  while longest > 0 do\n    longest, shortest = longest - 1,\
    \ string.sub(string, 1, longest)\n    prefixes[shortest] = true\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a <\
    \ #b\n  end)\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i =\
    \ 1, #string do\n    table.insert(prefixes, string[i])\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
