language: lua
name: HumanEval_81_numerical_letter_grade
results:
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local letter_grades\
    \ = {}\n  local i = 1\n  while i <= grades_length do\n    local grade = grades_sorted[i]\n\
    \    local letter_grade = string.sub(grade, 2, 1)\n    if grade ~= nil then\n\
    \      if grade < 3.0 then\n        letter_grade = string.sub(grade, 1, 1)\n \
    \     elseif grade < 4.0 then\n        letter_grade = 'A+'\n      elseif grade\
    \ < 4.7 then\n        letter_grade = 'A'\n      elseif grade < 5.0 then\n    \
    \    letter_grade = 'A-'\n      elseif grade < 5.7 then\n        letter_grade\
    \ = 'B+'\n      elseif grade < 6.0 then\n        letter_grade = 'B'\n      elseif\
    \ grade < 6.7 then\n        letter_grade = 'B-'\n      elseif grade < 7.0 then\n\
    \        letter_grade = 'C+'\n      elseif grade < 7.7 then\n        letter_grade\
    \ = 'C'\n      elseif grade < 8.0 then\n        letter_grade = 'C-'\n      elseif\
    \ grade < 8.7 then\n        letter_grade = 'D+'\n      elseif grade < 9.0 then\n\
    \        letter_grade = 'D'\n      elseif grade < 9.7 then\n        letter_grade\
    \ = 'D-'\n      elseif grade < 10.0 then\n        letter_grade = 'E'\n      else\n\
    \        letter_grade = 'F'\n      end\n    end\n    table.insert(letter_grades,\
    \ letter_grade)\n    i = i + 1\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8b8trywm.lua:25:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp8b8trywm.lua:25: in function 'candidate'\n\t/tmp/tmp8b8trywm.lua:73:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local grade_string\
    \ = grade > 0 and \"A+\" or \"A\"\n    if grade > 0 then\n      grade_string =\
    \ grade > 2 and \"A-\" or \"A\"\n    end\n    grades_string = grades_string ..\
    \ grade_string\n  end\n  return grades_string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqpeev73.lua:39:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A-A-AAA-\"\nstack\
    \ traceback:\n\t/tmp/tmpeqpeev73.lua:39: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grades_average\n\
    \    local grades_average = grades_average + grades_average * grade\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpns1zlv0h.lua:66: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_sorted_length = #grades_sorted\n  local\
    \ letter_grades = {}\n  for i = 1, grades_sorted_length do\n    local grade =\
    \ grades_sorted[i]\n    local letter_grade = string.sub(grade, 2)\n    letter_grades[grade]\
    \ = letter_grade\n  end\n  return letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9yx3a8a.lua:25:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpj9yx3a8a.lua:25: in function 'candidate'\n\t/tmp/tmpj9yx3a8a.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_copy\
    \ = grades\n    local grades_copy2 = {}\n    local grades_copy3 = {}\n    local\
    \ grades_copy4 = {}\n    local grades_copy5 = {}\n    local grades_copy6 = {}\n\
    \    local grades_copy7 = {}\n    local grades_copy8 = {}\n    local grades_copy9\
    \ = {}\n    local grades_copy10 = {}\n    local grades_copy11 = {}\n    local\
    \ grades_copy12 = {}\n    local grades_copy13 = {}\n    local grades_copy14 =\
    \ {}\n    local grades_copy15 = {}\n    local grades_copy16 = {}\n    local grades_copy17\
    \ = {}\n    local grades_copy18 = {}\n    local grades_copy19 = {}\n    local\
    \ grades_copy20 = {}\n    local grades_copy21 = {}\n    local grades_copy22 =\
    \ {}\n    local grades_copy23 = {}\n    local grades_copy24 = {}\n    local grades_copy25\
    \ = {}\n    local grades_copy26 = {}\n    local grades_copy27 = {}\n    local\
    \ grades_copy28 = {}\n    local grades_copy29 = {}\n    local grades_copy30 =\
    \ {}\n    local grades_copy31 = {}\n    local grades_copy32 = {}\n    local grades_copy33\
    \ = {}\n    local grades_copy34 = {}\n    local grades_copy35 = {}\n    local\
    \ grades_copy36 = {}\n    local grades_copy37 = {}\n    local grades_copy38 =\
    \ {}\n    local grades_copy39 = {}\n    local grades_copy40 = {}\n    local grades_copy41\
    \ = {}\n    local grades_copy42 = {}\n    local grades_copy43 = {}\n    local\
    \ grades_copy44 = {}\n    local grades_copy45 = {}\n    local grades_copy46 =\
    \ {}\n    local grades_copy47 = {}\n    local grades_copy48 = {}\n    local grades_copy49\
    \ = {}\n    local grades_copy50 = {}\n    local grades_copy51 = {}\n    local\
    \ grades_copy52 = {}\n    local grades_copy53 = {}\n    local grades_copy54 =\
    \ {}\n    local grades_copy55 = {}\n    local grades_copy56 = {}\n    local grades_copy57\
    \ = {}\n    local grades_copy58 = {}\n    local grades_copy59 = {}\n    local\
    \ grades_copy60 = {}\n    local grades_copy61 = {}\n    local grades_copy62 =\
    \ {}\n    local grades_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7bycx11w.lua:99: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grades_average\
    \ = grades_average * grades_average\n    local grades_average = grades_average\
    \ / grades_length\n    local grades_average = grades_average * grades_average\n\
    \    local grades_average = grades_average / grades_length\n    local grade\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7ktahbxu.lua:74: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length / 2\n  local grades_average_string = string.format(\"%.2f\"\
    , grades_average)\n  local grades_average_string_length = string.len(grades_average_string)\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + 2\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + 2\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + 2\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + 2\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + 2\n\
    \  local grades_average_string_length = grades_average_string_length + 2\n  local\
    \ grades_average_string_length = grades_average_string_length + 2\n  local grades_average_string_length\
    \ = grades_average_string_length + 2\n  local grades_average_string_length = grades_average_string_length\
    \ + 2\n  local grades_average_string_length = grades_average_string_length + \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7h0ksszc.lua:59: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    local grades_letters_index = 1\n   \
    \ local grades_letters_length = grades_length\n    local grades_letter_grades\
    \ = {}\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\n    local grades_letter_grades_length\
    \ = grades_length\n    local grades_letter_grades_index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmz6vky44.lua:84: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_sorted_length = #grades_sorted\n    local\
    \ grades_sorted_index = grades_sorted_length - 1\n    local grades_sorted_value\
    \ = grades_sorted[grades_sorted_index]\n    local grades_sorted_index_plus_one\
    \ = grades_sorted_index + 1\n    local grades_sorted_value_plus_one = grades_sorted[grades_sorted_index_plus_one]\n\
    \    local grades_sorted_index_minus_one = grades_sorted_index - 1\n    local\
    \ grades_sorted_value_minus_one = grades_sorted[grades_sorted_index_minus_one]\n\
    \    local grades_sorted_index_minus_two = grades_sorted_index - 2\n    local\
    \ grades_sorted_value_minus_two = grades_sorted[grades_sorted_index_minus_two]\n\
    \    local grades_sorted_index_minus_three = grades_sorted_index - 3\n    local\
    \ grades_sorted_value_minus_three = grades_sorted[grades_sorted_index_minus_three]\n\
    \    local grades_sorted_index_minus_four = grades_sorted_index - 4\n    local\
    \ grades_sorted_value_minus_four = grades_sorted[grades_sorted_index_minus_four]\n\
    \    local grades_sorted_index_minus_five = grades_sorted_index - 5\n    local\
    \ grades_sorted_value_minus_five = grades_sorted[grades_sorted_index_minus_five]\n\
    \    local grades_sorted_index_minus_six = grades_sorted_index - 6\n    local\
    \ grades_sorted_value_minus_six = grades_sorted[grades_sorted_index_minus_six]\n\
    \    local grades_sorted_index_minus_seven = grades_sorted_index - 7\n    local\
    \ grades_sorted_value_minus_seven = grades_sorted[grades_sorted_index_minus_seven]\n\
    \    local grades_sorted_index_minus_eight = grades_sorted_index - 8\n    local\
    \ grades_sorted_value_minus_eight = grades_sorted[grades_sorted_index_minus_eight]\n\
    \    local grades_sorted_index_minus_nine = grades_sorted_index - 9\n    local\
    \ grades_sorted_value_minus_nine = grades_sorted[grades_sorted_index_minus_nine]\n\
    \    local grades_sorted_index_minus_ten = grades_sorted_index - 10\n    local\
    \ grades_sorted_value_minus_ten = grades_sorted[grades_sorted_index_minus_ten]\n\
    \    local grades_sorted_index_minus_eleven = grades_sorted_index - \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6ql1dgy5.lua:51: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / (grades_length - 1)\n    local grades_sum = 0\n    local grades_count\
    \ = 0\n    local grades_letters = {}\n    for i = 1, grades_length do\n      \
    \  grades_sum = grades_sum + grades_sorted[i]\n        grades_count = grades_count\
    \ + 1\n    end\n    grades_average = grades_sum / grades_count\n    local grades_letter_grades\
    \ = {}\n    for i = 1, grades_length do\n        if grades_average < grades_sorted[i]\
    \ then\n            grades_letter_grades[#grades_letter_grades+1] = grades_sorted[i]\n\
    \        end\n    end\n    return grades_letter_grades\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8k3k8en1.lua:25:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp8k3k8en1.lua:25: in function 'candidate'\n\t/tmp/tmp8k3k8en1.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_grades = {}\n    local grades_letter_grades\
    \ = {}\n    for i = 1, grades_length do\n        local grade = grades_sorted[i]\n\
    \        local grades_grades[grade] = grades_grades[grade] + 1\n        local\
    \ letter_grade = string.sub(grades_average, grades_average, grades_average+1)\n\
    \        grades_letter_grades[grade] = letter_grade\n    end\n    return grades_letter_grades\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6vfdwx6k.lua:31: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  for i = 1, #grades do\n    local grade = grades[i]\n    local gpa\
    \ = grades[i]\n    if gpa > 0 then\n      grades_string = grades_string .. \"\
    A+\"\n    elseif gpa > 3.7 then\n      grades_string = grades_string .. \"A\"\n\
    \    elseif gpa > 3.3 then\n      grades_string = grades_string .. \"A-\"\n  \
    \  elseif gpa > 3 then\n      grades_string = grades_string .. \"B+\"\n    elseif\
    \ gpa > 2.7 then\n      grades_string = grades_string .. \"B\"\n    elseif gpa\
    \ > 2.3 then\n      grades_string = grades_string .. \"B-\"\n    elseif gpa >\
    \ 2 then\n      grades_string = grades_string .. \"C+\"\n    elseif gpa > 1.7\
    \ then\n      grades_string = grades_string .. \"C\"\n    elseif gpa > 1.3 then\n\
    \      grades_string = grades_string .. \"C-\"\n    elseif gpa > 1 then\n    \
    \  grades_string = grades_string .. \"D+\"\n    elseif gpa > 0.7 then\n      grades_string\
    \ = grades_string .. \"D\"\n    elseif gpa > 0 then\n      grades_string = grades_string\
    \ .. \"D-\"\n    else\n      grades_string = grades_string .. \"E\"\n    end\n\
    \  end\n  return grades_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2rgsknqc.lua:62:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+A+A+A+A+\"\nstack\
    \ traceback:\n\t/tmp/tmp2rgsknqc.lua:62: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sum\
    \ = 0\n    local grades_count = 0\n    for _, grade in pairs(grades) do\n    \
    \    grades_sum = grades_sum + grade\n        grades_count = grades_count + 1\n\
    \    end\n    local grades_average = grades_sum / grades_count\n    local grades_letter\
    \ = \"\"\n    if grades_average >= 4.0 then\n        grades_letter = \"A+\"\n\
    \    elseif grades_average >= 3.7 then\n        grades_letter = \"A\"\n    elseif\
    \ grades_average >= 3.3 then\n        grades_letter = \"A-\"\n    elseif grades_average\
    \ >= 3.0 then\n        grades_letter = \"B+\"\n    elseif grades_average >= 2.7\
    \ then\n        grades_letter = \"B\"\n    elseif grades_average >= 2.3 then\n\
    \        grades_letter = \"B-\"\n    elseif grades_average >= 2.0 then\n     \
    \   grades_letter = \"C+\"\n    elseif grades_average >= 1.7 then\n        grades_letter\
    \ = \"C\"\n    elseif grades_average >= 1.3 then\n        grades_letter = \"C-\"\
    \n    elseif grades_average >= 1.0 then\n        grades_letter = \"D+\"\n    elseif\
    \ grades_average >= 0.7 then\n        grades_letter = \"D\"\n    elseif grades_average\
    \ >= 0.0 then\n        grades_letter = \"D-\"\n    else\n        grades_letter\
    \ = \"E\"\n    end\n    return grades_letter\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbj8r6nz.lua:65:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"B\"\nstack traceback:\n\
    \t/tmp/tmphbj8r6nz.lua:65: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_sorted\
    \ = table.sort(grades)\n  local grades_length = #grades_sorted\n  local grades_average\
    \ = grades_length and grades_sorted[grades_length/2] or 0\n  local grades_sum\
    \ = 0\n  for _, grade in ipairs(grades_sorted) do\n    grades_sum = grades_sum\
    \ + grade\n  end\n  local grades_average = grades_sum / grades_length\n  local\
    \ grades_letters = {}\n  local grades_letter_grades = {}\n  for _, grade in ipairs(grades_sorted)\
    \ do\n    local grades_letter_grade = \n      (grade >= grades_average and '+'\
    \ or '-') ..\n      (grade < grades_average and grade or '')\n    grades_letters[grade]\
    \ = grades_letter_grade\n    grades_letter_grades[grades_letter_grade] = grade\n\
    \  end\n  return grades_letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxlr881wo.lua:25:\
    \ attempt to get length of local 'grades_sorted' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpxlr881wo.lua:25: in function 'candidate'\n\t/tmp/tmpxlr881wo.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_sorted_length = #grades_sorted\n    local\
    \ grades_sorted_first = grades_sorted[1]\n    local grades_sorted_last = grades_sorted[grades_sorted_length]\n\
    \    local grades_sorted_first_index = #grades_sorted - 1\n    local grades_sorted_last_index\
    \ = grades_sorted_length - 1\n    local grades_sorted_first_grade = grades_sorted[grades_sorted_first_index]\n\
    \    local grades_sorted_last_grade = grades_sorted[grades_sorted_last_index]\n\
    \    local grades_sorted_first_grade_length = #grades_sorted_first\n    local\
    \ grades_sorted_last_grade_length = #grades_sorted_last\n    local grades_sorted_first_grade_grade\
    \ = grades_sorted_first[grades_sorted_first_grade_length]\n    local grades_sorted_last_grade_grade\
    \ = grades_sorted_last[grades_sorted_last_grade_length]\n    local grades_sorted_first_grade_grade_length\
    \ = #grades_sorted_first_grade\n    local grades_sorted_last_grade_grade_length\
    \ = #grades_sorted_last_grade\n    local grades_sorted_first_grade_grade_grade\
    \ = grades_sorted_first_grade[grades_sorted_first_grade_grade_length]\n    local\
    \ grades_sorted_last_grade_grade_grade = grades_sorted_last_grade[grades_sorted_last_grade_grade_length]\n\
    \    local grades_sorted_first_grade_grade_grade_length = #grades_sorted_first_grade_grade\n\
    \    local grades_sorted_last_grade_grade_grade_length = #grades_sorted_last_grade_grade\n\
    \    local grades_sorted_first_grade_grade_grade_grade = grades_sorted_first_grade_grade[grades_sorted_first_grade_grade_grade_length]\n\
    \    local grades_sorted_last_grade_grade_grade_grade = grades_sorted_last_grade_grade[grades_sorted_last_grade_grade_grade_length]\n\
    \    local grades_sorted_first_grade_grade_grade_grade_length = #grades_sorted_first_grade_grade_grade\n\
    \    local grades_sorted_last_grade_grade_grade_grade_length = #grades_sorted_last_grade_grade_grade\n\
    \    local grades_sorted_first_grade_grade_grade_grade_grade = grades_sorted_first_grade_grade_grade[grades_sorted_first_grade_grade_grade_grade_length]\n\
    \    local grades_sorted_last_grade_grade_grade_grade_grade = grades_sorted_last_grade_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpioaepo63.lua:60: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_index\
    \ = 1\n    local grades_letters = {}\n    local grades_letters_index = 1\n   \
    \ local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grades_length\n    local grades_letters_index\
    \ = 1\n    local grades_letters_length = grade\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkzrig4cq.lua:88: ''end'' expected (to close ''function'' at
    line 23) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average = grades_average:round()\n   \
    \ local grades_average = grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:float()\n    local grades_average =\
    \ grades_average:float()\n    local grades_average = grades_average:float()\n\
    \    local grades_average = grades_average:\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgkh76ahh.lua:67: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_length / 2\n    local grades_average_string = string.format(\"%.2f\"\
    , grades_average)\n    local grades_average_string_length = string.len(grades_average_string)\n\
    \    local grades_average_string_length = grades_average_string_length + 2\n \
    \   local grades_average_string_length = grades_average_string_length + 2\n  \
    \  local grades_average_string_length = grades_average_string_length + 2\n   \
    \ local grades_average_string_length = grades_average_string_length + 2\n    local\
    \ grades_average_string_length = grades_average_string_length + 2\n    local grades_average_string_length\
    \ = grades_average_string_length + 2\n    local grades_average_string_length =\
    \ grades_average_string_length + 2\n    local grades_average_string_length = grades_average_string_length\
    \ + 2\n    local grades_average_string_length = grades_average_string_length +\
    \ 2\n    local grades_average_string_length = grades_average_string_length + 2\n\
    \    local grades_average_string_length = grades_average_string_length + 2\n \
    \   local grades_average_string_length = grades_average_string_length + 2\n  \
    \  local grades_average_string_length = grades_average_string_length + 2\n   \
    \ local grades_average_string_length = grades_average_string_length + 2\n    local\
    \ grades_average_string_length = grades_average_string_length + 2\n    local grades_average_string_length\
    \ = grades_average_string_length + 2\n    local grades_average_string_length =\
    \ grades_average_string_length + 2\n    local grades_average_string_length = grades_average_string_length\
    \ + 2\n    local grades_average_string_length = grades_average_string_length +\
    \ 2\n    local grades_average_string_length = grades_average_string_length + 2\n\
    \    local grades_average_string_length = grades_average_string_length + 2\n \
    \   local grades_average_string_length = grades_average_string_length + 2\n  \
    \  local grades_average_string_length = grades_average_string_length + 2\n   \
    \ local grades_average_string_length = grades_average_string_length + 2\n    local\
    \ grades_average_string_length = grades_average_string_length + 2\n    local grades_average_string_length\
    \ = grades_average_string_length + 2\n    local grades_average_string_length =\
    \ grades_average_string_length + 2\n    local grades_average_string_length = grades_average_string_length\
    \ + 2\n    local grades_average_string_length = grades_average_string_length +\
    \ 2\n    local grades_average_string_length = grades_average_string_length + \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = numerical_letter_grade\n\
    \    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C',\
    \ 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n    lu.assertEquals(candidate({0.5}),\
    \ {'D-'})\n    lu.assertEquals(candidate({0.0}), {'E'})\n    lu.assertEquals(candidate({1.0,\
    \ 0.3, 1.5, 2.8, 3.3}), {'D', 'D-', 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0,\
    \ 0.7}), {'E', 'D-'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprncnir9i.lua:59: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n  local grades_string\
    \ = \"\"\n  local grades_length = #grades\n  for i = 1, grades_length do\n   \
    \ local grade = grades[i]\n    if grade > 0 then\n      grades_string = grades_string\
    \ .. \"A+\"\n    elseif grade < 0 then\n      grades_string = grades_string ..\
    \ \"A-\"\n    elseif grade == 0 then\n      grades_string = grades_string .. \"\
    D+\"\n    else\n      grades_string = grades_string .. \"D-\"\n    end\n  end\n\
    \  return grades_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = numerical_letter_grade\n    lu.assertEquals(candidate({4.0,\
    \ 3, 1.7, 2, 3.5}), {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}),\
    \ {'D+'})\n    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mjp1olm.lua:44:\
    \ expected: {\"A+\", \"B\", \"C-\", \"C\", \"A-\"}\nactual: \"A+A+A+A+A+\"\nstack\
    \ traceback:\n\t/tmp/tmp3mjp1olm.lua:44: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750597
- exit_code: 1
  program: "-- It is the last week of the semester and the teacher has to give the\
    \ grades\n-- to students. The teacher has been making her own algorithm for grading.\n\
    -- The only problem is, she has lost the code she used for grading.\n-- She has\
    \ given you a list of GPAs for some students and you have to write \n-- a function\
    \ that can output a list of letter grades using the following table:\n-- GPA \
    \      |    Letter grade\n-- 4.0                A+\n-- > 3.7                A\
    \ \n-- > 3.3                A- \n-- > 3.0                B+\n-- > 2.7        \
    \        B \n-- > 2.3                B-\n-- > 2.0                C+\n-- > 1.7\
    \                C\n-- > 1.3                C-\n-- > 1.0                D+ \n\
    -- > 0.7                D \n-- > 0.0                D-\n-- 0.0               \
    \ E\n-- Example:\n-- >>> grade_equation({4.0, 3, 1.7, 2, 3.5})\n-- {'A+', 'B',\
    \ 'C-', 'C', 'A-'}\nlocal function numerical_letter_grade(grades)\n    local grades_sorted\
    \ = table.sort(grades)\n    local grades_length = #grades_sorted\n    local grades_average\
    \ = grades_sorted and grades_sorted[grades_length / 2] or 0\n    local grades_letters\
    \ = {}\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or 0\n    local grades_letters_length = grades_length\n    local grades_letters_average\
    \ = grades_average and grades_average or 0\n    local grades_letters_length =\
    \ grades_length\n    local grades_letters_average = grades_average and grades_average\
    \ or \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ numerical_letter_grade\n    lu.assertEquals(candidate({4.0, 3, 1.7, 2, 3.5}),\
    \ {'A+', 'B', 'C-', 'C', 'A-'})\n    lu.assertEquals(candidate({1.2}), {'D+'})\n\
    \    lu.assertEquals(candidate({0.5}), {'D-'})\n    lu.assertEquals(candidate({0.0}),\
    \ {'E'})\n    lu.assertEquals(candidate({1.0, 0.3, 1.5, 2.8, 3.3}), {'D', 'D-',\
    \ 'C-', 'B', 'B+'})\n    lu.assertEquals(candidate({0.0, 0.7}), {'E', 'D-'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk8vbdsqe.lua:60: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750597
