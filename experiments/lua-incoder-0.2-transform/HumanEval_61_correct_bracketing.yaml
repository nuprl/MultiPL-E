name: HumanEval_61_correct_bracketing
language: lua
prompt: "-- brackets is a string of \"(\" and \")\".\n-- return True if every opening\
  \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('(')\n\
  -- false\n-- >>> correct_bracketing('()')\n-- true\n-- >>> correct_bracketing('(()())')\n\
  -- true\n-- >>> correct_bracketing(')(()')\n-- false\nlocal function correct_bracketing(brackets)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
  \    lu.assertEquals(candidate('()'), true)\n    lu.assertEquals(candidate('(()())'),\
  \ true)\n    lu.assertEquals(candidate('()()(()())()'), true)\n    lu.assertEquals(candidate('()()((()()())())(()()(()))'),\
  \ true)\n    lu.assertEquals(candidate('((()())))'), false)\n    lu.assertEquals(candidate(')(()'),\
  \ false)\n    lu.assertEquals(candidate('('), false)\n    lu.assertEquals(candidate('(((('),\
  \ false)\n    lu.assertEquals(candidate(')'), false)\n    lu.assertEquals(candidate('(()'),\
  \ false)\n    lu.assertEquals(candidate('()()(()())())(()'), false)\n    lu.assertEquals(candidate('()()(()())()))()'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local opening_brackets = brackets:gsub('%[(%)%]', function(x)\n \
    \   return x:reverse()\n  end)\n  local closing_brackets = brackets:gsub('%[%[(%)]%]',\
    \ function(x)\n    return x:reverse()\n  end)\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(1,\
    \ i)\n    local closing_bracket = closing_brackets:sub(1, i)\n    if opening_bracket\
    \ ~= closing_bracket then\n      return false\n    end\n  end\n  return true\n\
    end", "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n\
    \  return opening:find(closing) == nil\nend", "  local opening_brackets = brackets:gsub('%[(%)].*$',\
    \ ''):gsub('%[)]$', '')\n  local closing_brackets = brackets:gsub('%[)](%)$',\
    \ ''):gsub('%[(%)]$', '')\n  return opening_brackets == closing_brackets\nend",
  "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n  return\
    \ opening ~= closing and opening ~= '(' and opening ~= ')'\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%)].*$', '\\0')\n  local closing_brackets = brackets:gsub('%[%)](.*)$',\
    \ '\\0')\n  local opening_brackets_count = opening_brackets:len()\n  local closing_brackets_count\
    \ = closing_brackets:len()\n  local opening_brackets_table = { }\n  local closing_brackets_table\
    \ = { }\n  for i = 1, opening_brackets_count do\n    local opening_bracket = opening_brackets:sub(i,\
    \ i)\n    opening_brackets_table[opening_bracket] = true\n  end\n  for i = 1,\
    \ closing_brackets_count do\n    local closing_bracket = closing_brackets:sub(i,\
    \ i)\n    closing_brackets_table[closing_bracket] = true\n  end\n  for opening_bracket,\
    \ closing_bracket in pairs(opening_brackets_table) do\n    if not closing_brackets_table[closing_bracket]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%)%]', function(x)\n    return x:lower()\n  end)\n  local\
    \ closing_brackets = brackets:gsub('%[%[(%)]%]', function(x)\n    return x:lower()\n\
    \  end)\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend", "  local opening_brackets\
    \ = brackets:gsub('(%[(%)%])', function(x)\n    return x:reverse()\n  end)\n \
    \ local closing_brackets = brackets:gsub('(%[%[(%)]%])', function(x)\n    return\
    \ x:reverse()\n  end)\n  return opening_brackets:len() == closing_brackets:len()\n\
    end", "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n\
    \  return opening:find(closing) == nil\nend", "  local open_brackets = brackets:gsub('%[(%)%]',\
    \ function(x)\n    return x:reverse()\n  end)\n  local close_brackets = brackets:gsub('%[%[(%)]%]',\
    \ function(x)\n    return x:reverse()\n  end)\n  return open_brackets:len() ==\
    \ close_brackets:len() and\n    open_brackets:all(ipairs, close_brackets:len())\
    \ and\n    open_brackets:all(ipairs, close_brackets:len()) and\n    open_brackets:all(ipairs,\
    \ close_brackets:len())\nend", "  local opening = brackets:sub(1, 1)\n  local\
    \ closing = brackets:sub(2, 2)\n  return opening:find(closing) == nil\nend", " \
    \ local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n  return\
    \ opening:find(closing) == nil\nend", "  local opening_brackets = brackets:gsub('%[(%)][(%)]','')\n\
    \  local closing_brackets = brackets:gsub('%[)](%)','')\n  return opening_brackets\
    \ ~= closing_brackets\nend", "  local opening = brackets:sub(1,1)\n  local closing\
    \ = brackets:sub(2,2)\n  return opening and closing and opening:sub(1,1) == closing:sub(1,1)\n\
    end", "  local opening = brackets:sub(1,1)\n  local closing = brackets:sub(2,2)\n\
    \  return opening and closing and opening == closing\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%)][(%)]+', '()')\n  local closing_brackets = brackets:gsub('%[)](%)][)]+',\
    \ '()')\n  return opening_brackets ~= closing_brackets\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%)%]', function(x)\n    return x:reverse()\n  end)\n  local\
    \ closing_brackets = brackets:gsub('%[%[(%)]%]', function(x)\n    return x:reverse()\n\
    \  end)\n  return opening_brackets:len() == closing_brackets:len()\nend", "  local\
    \ opening_brackets = brackets:gsub('(%[(%)%])', function(x)\n    return x:reverse()\n\
    \  end)\n  local closing_brackets = brackets:gsub('(%[%[(%)]%])', function(x)\n\
    \    return x:reverse()\n  end)\n  return opening_brackets:len() == closing_brackets:len()\
    \ and\n    opening_brackets:all(ipairs, 1, closing_brackets:len()) and\n    closing_brackets:all(ipairs,\
    \ 1, opening_brackets:len())\nend", "  local opening_brackets = brackets:gsub('%[(%)%]',\
    \ function(x)\n    return x:reverse()\n  end)\n  local closing_brackets = brackets:gsub('%[%[(%)]%]',\
    \ function(x)\n    return x:reverse()\n  end)\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  local opening_brackets_index = 1\n  local closing_brackets_index = 1\n  while\
    \ opening_brackets_index < opening_brackets_count do\n    local opening_bracket\
    \ = opening_brackets:sub(opening_brackets_index, opening_brackets_index)\n   \
    \ local closing_bracket = closing_brackets:sub(closing_brackets_index, closing_brackets_index)\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \    opening_brackets_index = opening_brackets_index + 1\n    closing_brackets_index\
    \ = closing_brackets_index + 1\n  end\n  return true\nend", "  local opening_brackets\
    \ = brackets:gsub('%[(%)%]', function(x)\n    return x:reverse()\n  end)\n  local\
    \ closing_brackets = brackets:gsub('%[%[(%)]%]', function(x)\n    return x:reverse()\n\
    \  end)\n  return opening_brackets:len() == closing_brackets:len()\nend", "  local\
    \ opening = brackets:sub(1, 1)\n  local closing = brackets:sub(2, 2)\n  return\
    \ opening and closing and opening:sub(1, 1) == closing:sub(1, 1)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
