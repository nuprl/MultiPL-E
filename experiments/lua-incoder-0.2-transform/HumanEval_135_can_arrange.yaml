name: HumanEval_135_can_arrange
language: lua
prompt: "-- Create a function which returns the largest index of an element which\n\
  -- is not greater than or equal to the element immediately preceding it. If\n--\
  \ no such element exists then return -1. The given array will not contain\n-- duplicate\
  \ values.\n-- Examples:\n-- >>> can_arrange({1, 2, 4, 3, 5})\n-- 3\n-- >>> can_arrange({1,\
  \ 2, 3})\n-- -1\nlocal function can_arrange(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = can_arrange\n\
  \    lu.assertEquals(candidate({1, 2, 4, 3, 5}), 3)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 5}), -1)\n    lu.assertEquals(candidate({1, 4, 2, 5, 6, 7, 8, 9, 10}), 2)\n\
  \    lu.assertEquals(candidate({4, 8, 5, 7, 3}), 4)\n    lu.assertEquals(candidate({}),\
  \ -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local largest = -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest]\
    \ then\n      largest = i\n    end\n  end\n  return largest\nend", "  local largest\
    \ = arr[1]\n  for i = 2, #arr do\n    if arr[i] > largest then\n      largest\
    \ = arr[i]\n    end\n  end\n  return largest\nend", "  local largest = nil\n \
    \ for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest = i\n\
    \    end\n  end\n  return largest and largest\nend", "  local largest = -1\n \
    \ for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest = i\n\
    \    end\n  end\n  return largest\nend", "  local max = 0\n  for i = 1, #arr do\n\
    \    if arr[i] <= arr[max] then\n      max = i\n    end\n  end\n  return max\n\
    end", "  local largest = -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest]\
    \ then\n      largest = i\n    end\n  end\n  return largest\nend", "  local largest\
    \ = nil\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n    end\n  end\n  return largest or -1\nend", "  local function helper(arr,\
    \ i, j)\n    if i == j then\n      return -1\n    end\n    if arr[i] <= arr[j]\
    \ then\n      return helper(arr, i + 1, j)\n    else\n      return helper(arr,\
    \ i, j - 1)\n    end\n  end\n  return helper(arr, 1, #arr)\nend", "  local largest\
    \ = -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend", "  local function helper(arr, i,\
    \ j)\n    if i == j then\n      return -1\n    end\n    if arr[i] <= arr[j] then\n\
    \      return helper(arr, i + 1, j)\n    else\n      return helper(arr, i, j -\
    \ 1)\n    end\n  end\n  return helper(arr, 1, #arr)\nend", "  local largest =\
    \ -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend", "  local largest = -1\n  for i\
    \ = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n\
    \  end\n  return largest\nend", "  local largest = nil\n  for i = 1, #arr do\n\
    \    if arr[i] <= arr[largest] then\n      largest = i\n    end\n  end\n  return\
    \ largest or -1\nend", "  local largest = nil\n  for i = 1, #arr do\n    if arr[i]\
    \ <= arr[largest] then\n      largest = i\n    end\n  end\n  return largest or\
    \ -1\nend", "  local largest = -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest]\
    \ then\n      largest = i\n    end\n  end\n  return largest\nend", "  local largest\
    \ = -1\n  for i = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend", "  local largest = -1\n  for i\
    \ = 1, #arr do\n    if arr[i] <= arr[largest] then\n      largest = i\n    end\n\
    \  end\n  return largest\nend", "  local largest = arr[1]\n  for i = 2, #arr do\n\
    \    if arr[i] > largest then\n      largest = arr[i]\n    end\n  end\n  return\
    \ largest\nend", "  local function helper(arr, low, high)\n    if high == low\
    \ then\n      return high\n    end\n    local mid = math.floor((low + high) /\
    \ 2)\n    if arr[mid] > arr[high] then\n      return helper(arr, low, mid)\n \
    \   else\n      return helper(arr, mid + 1, high)\n    end\n  end\n  return helper(arr,\
    \ 0, #arr)\nend", "  local largest = -1\n  for i = 1, #arr do\n    if arr[i] <=\
    \ arr[largest] then\n      largest = i\n    end\n  end\n  return largest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
