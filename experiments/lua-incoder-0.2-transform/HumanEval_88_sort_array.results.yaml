language: lua
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    if sum %\
    \ 2 == 1 then\n      table.insert(new_array, value)\n    else\n      table.insert(new_array,\
    \ -value)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4oim76f.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {-2, -4, 3, 0, -1, 5}\nstack traceback:\n\
    \t/tmp/tmpp4oim76f.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n\
    \  else\n    table.sort(sorted_array, function(a, b)\n      return b - a\n   \
    \ end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxaxk46k.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpjxaxk46k.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v1 <= v2\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc6memz_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplc6memz_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  local odd = (sum % 2 == 1)\n  if odd\
    \ then\n    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n\
    \      return (a < b) or (a > b)\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_l2zdl3.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp5_l2zdl3.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7dh7hu.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprm7dh7hu.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local temp = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    temp[i] = array[i]\n  end\n\
    \  if sum % 2 ~= 0 then\n    table.sort(temp)\n  else\n    table.sort(temp, function(a,\
    \ b) return b - a end)\n  end\n  return temp\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_e8s9wm.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpg_e8s9wm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, value in pairs(array) do\n    sum = sum + value\n    if sum % 2 == 1\
    \ then\n      table.insert(result, value)\n    else\n      table.insert(result,\
    \ value)\n      table.insert(result, -value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz1omnon.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, -2, 4, -4, 3, 0, 1, -1, 5}\nstack\
    \ traceback:\n\t/tmp/tmpzz1omnon.lua:35: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu3l9h2z.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptu3l9h2z.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllcxroov.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpllcxroov.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio1z09m0.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpio1z09m0.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b)\n      return b - a\n    end)\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl138sst.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyl138sst.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(a, b)\n      return b - a\n   \
    \ end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjycqwf4u.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjycqwf4u.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1bweqoo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpe1bweqoo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1bweqoo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpe1bweqoo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(v1,\
    \ v2)\n      return v1 > v2\n    end)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiy26jdd.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkiy26jdd.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqlynrnt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpiqlynrnt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
