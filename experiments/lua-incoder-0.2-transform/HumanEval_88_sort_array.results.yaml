language: lua
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    if sum %\
    \ 2 == 1 then\n      table.insert(new_array, value)\n    else\n      table.insert(new_array,\
    \ -value)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4oim76f.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {-2, -4, 3, 0, -1, 5}\nstack traceback:\n\
    \t/tmp/tmpp4oim76f.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n\
    \  else\n    table.sort(sorted_array, function(a, b)\n      return b - a\n   \
    \ end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxaxk46k.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpjxaxk46k.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v1 <= v2\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplc6memz_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplc6memz_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  local odd = (sum % 2 == 1)\n  if odd\
    \ then\n    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n\
    \      return (a < b) or (a > b)\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5_l2zdl3.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp5_l2zdl3.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprm7dh7hu.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprm7dh7hu.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local temp = {}\n\
    \  for i = 1, #array do\n    sum = sum + array[i]\n    temp[i] = array[i]\n  end\n\
    \  if sum % 2 ~= 0 then\n    table.sort(temp)\n  else\n    table.sort(temp, function(a,\
    \ b) return b - a end)\n  end\n  return temp\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_e8s9wm.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpg_e8s9wm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, value in pairs(array) do\n    sum = sum + value\n    if sum % 2 == 1\
    \ then\n      table.insert(result, value)\n    else\n      table.insert(result,\
    \ value)\n      table.insert(result, -value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzz1omnon.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, -2, 4, -4, 3, 0, 1, -1, 5}\nstack\
    \ traceback:\n\t/tmp/tmpzz1omnon.lua:35: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu3l9h2z.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptu3l9h2z.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllcxroov.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpllcxroov.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpio1z09m0.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpio1z09m0.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b)\n      return b - a\n    end)\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl138sst.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyl138sst.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(a, b)\n      return b - a\n   \
    \ end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjycqwf4u.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjycqwf4u.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1bweqoo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpe1bweqoo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1bweqoo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpe1bweqoo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(v1,\
    \ v2)\n      return v1 > v2\n    end)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiy26jdd.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkiy26jdd.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqlynrnt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpiqlynrnt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi_45fro.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpxi_45fro.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleo6jb3s.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpleo6jb3s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b)\n      return b - a\n    end)\n  end\n  return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyl138sst.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyl138sst.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj361394.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpgj361394.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local index = 1\n\
    \  local temp = {}\n  local length = #array\n  while index <= length do\n    sum\
    \ = sum + array[index]\n    if sum % 2 == 1 then\n      table.insert(temp, array[index])\n\
    \    else\n      table.insert(temp, array[index])\n      table.insert(temp, array[index\
    \ - 1])\n    end\n    index = index + 1\n  end\n  return temp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfjw1ccvb.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 2, 3, 0, 1, 0, 5}\nstack traceback:\n\
    \t/tmp/tmpfjw1ccvb.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    if sum % 2 ==\
    \ 1 then\n      table.insert(result, value)\n    else\n      table.remove(result,\
    \ #result)\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgkug96y.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {4, 3, 1, 5}\nstack traceback:\n\t/tmp/tmpsgkug96y.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvgw4u9n.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptvgw4u9n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(left,\
    \ right)\n      return right - left\n    end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnztb_g0q.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnztb_g0q.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(first, last)\n   \
    \   return last - first\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36nknun7.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp36nknun7.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpleo6jb3s.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpleo6jb3s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s6bdatj.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp4s6bdatj.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xo1uali.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6xo1uali.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfdit4adw.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpfdit4adw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(left, right)\n      return right - left\n\
    \    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8qupwex.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpi8qupwex.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57wxe126.lua:42:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp57wxe126.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2\
    \ ~= 0 then\n    for _, v in ipairs(array) do\n      new_array[#new_array + 1]\
    \ = v\n    end\n  else\n    for _, v in ipairs(array) do\n      new_array[#new_array\
    \ + 1] = v\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h4qlg27.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp_h4qlg27.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      if x\
    \ < y then\n        return -1\n      else\n        return 1\n      end\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2x9ygdc.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpc2x9ygdc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return y > x\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu57os1we.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpu57os1we.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmwfw2hj.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplmwfw2hj.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj75lzw_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaj75lzw_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 0\
    \ then\n      table.insert(sorted_array, array[i])\n    else\n      table.insert(sorted_array,\
    \ array[#sorted_array + 1])\n    end\n  end\n  return sorted_array\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01tf_7ci.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp01tf_7ci.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    if sum % 2 ==\
    \ 1 then\n      table.insert(result, value)\n    else\n      table.remove(result,\
    \ #result - 1)\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8oi9txn.lua:23:\
    \ bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmp_8oi9txn.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp_8oi9txn.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, v in ipairs(array) do\n    sum = sum + v\n    results[#results\
    \ + 1] = v\n  end\n  if sum % 2 == 1 then\n    table.sort(results, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(results, function(a, b) return\
    \ a > b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppbainym2.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmppbainym2.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj75lzw_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaj75lzw_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpojbwi372.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpojbwi372.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyusmeorl.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyusmeorl.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y - x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaekprhfm.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaekprhfm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzig6eyl.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpuzig6eyl.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(v1,\
    \ v2)\n      return v1 > v2\n    end)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiy26jdd.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpkiy26jdd.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqo3ksy6.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpkqo3ksy6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    table.insert(results,\
    \ array[i])\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n\
    \    table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpca12d5qz.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpca12d5qz.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxolije4p.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpxolije4p.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxolije4p.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpxolije4p.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local length = #array\n\
    \  for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y - x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gzgrldy.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp3gzgrldy.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlnm5q4a.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvlnm5q4a.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(sorted, v)\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(sorted)\n  else\n    table.sort(sorted,\
    \ function(a, b)\n      return a > b\n    end)\n  end\n  return sorted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplktzobku.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplktzobku.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6zktxw6.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpm6zktxw6.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvgw4u9n.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptvgw4u9n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a < b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s6bdatj.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp4s6bdatj.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(first,\
    \ last)\n      return last - first\n    end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rhvs2x1.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp1rhvs2x1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsruik_69.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsruik_69.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(_, value2)\n     \
    \ return -value2\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjm2f5s5.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqjm2f5s5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvgw4u9n.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptvgw4u9n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results, function(a, b)\
    \ return a < b end)\n  else\n    table.sort(results, function(a, b) return a >\
    \ b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5erku6w9.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp5erku6w9.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.reverse(table.sort(array))\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqml442i1.lua:23:\
    \ attempt to call a nil value (field 'reverse')\nstack traceback:\n\t/tmp/tmpqml442i1.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmpqml442i1.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    results[#results\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(results, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(results, function(a, b) return\
    \ a > b end)\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxgdv881.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaxgdv881.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmwfw2hj.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmplmwfw2hj.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(_, value)\n\
    \      return -value -- descending order\n    end)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1apomnj.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpl1apomnj.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local index = 1\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    if sum % 2 ==\
    \ 1 then\n      table.insert(array, value)\n    else\n      table.remove(array,\
    \ index)\n      table.insert(array, value)\n    end\n    index = index + 1\n \
    \ end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6db2n3ul.lua:35:\
    \ expected: {5}\nactual: {5, 5}\nstack traceback:\n\t/tmp/tmp6db2n3ul.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht4_7mdr.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpht4_7mdr.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n\
    \      table.insert(results, i)\n    end\n  end\n  table.sort(results)\n  for\
    \ i = 1, #array do\n    array[i] = results[i]\n  end\n  return array\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_45bydxg.lua:35:\
    \ expected: {5}\nactual: {1}\nstack traceback:\n\t/tmp/tmp_45bydxg.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiqlynrnt.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpiqlynrnt.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    if sum\
    \ % 2 == 1 then\n      table.insert(new_array, value)\n    else\n      table.insert(new_array,\
    \ -value)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr8yrwvp5.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {-2, -4, 3, 0, -1, 5}\nstack traceback:\n\
    \t/tmp/tmpr8yrwvp5.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted = {}\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(sorted,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted)\n  else\n    table.sort(sorted,\
    \ function(a, b)\n      return a > b\n    end)\n  end\n  return sorted\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj290i_4.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpgj290i_4.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local length = #array\n\
    \  for i = 1, length do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n\
    \    table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if\
    \ a < b then\n        return -1\n      elseif a > b then\n        return 1\n \
    \     else\n        return 0\n      end\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsr1f1kq.lua:43:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpzsr1f1kq.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = array\n  for _, value in ipairs(sorted_array) do\n    sum = sum + value\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b) return b - a end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvab3rprf.lua:35:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvab3rprf.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b) return b - a end)\n  end\n  return\
    \ sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu6yswsi.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvu6yswsi.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      if a\
    \ > b then\n        return -1\n      elseif a < b then\n        return 1\n   \
    \   else\n        return 0\n      end\n    end)\n  end\n  return array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24km_9lg.lua:42:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp24km_9lg.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22q38y9s.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp22q38y9s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvgw4u9n.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptvgw4u9n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n  end\n  if\
    \ sum % 2 == 1 then\n    for _, value in ipairs(array) do\n      table.insert(sorted_array,\
    \ value)\n    end\n  else\n    for _, value in ipairs(array) do\n      table.insert(sorted_array,\
    \ value)\n    end\n    table.sort(sorted_array)\n  end\n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpakhmx5qk.lua:39:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpakhmx5qk.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = array\n  local\
    \ sum = 0\n  for _, value in ipairs(sorted_array) do\n    sum = sum + value\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(first, last)\n      return last - first\n    end)\n  end\n  return\
    \ sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pwbwbqi.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp8pwbwbqi.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyusmeorl.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyusmeorl.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(first, last)\n      return last - first\n\
    \    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppskw4zwd.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmppskw4zwd.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      return x > y\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexozeag0.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpexozeag0.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp408zrck7.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp408zrck7.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in pairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtfm6vxc.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqtfm6vxc.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b) return b - a end)\n  end\n  return\
    \ sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu6yswsi.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvu6yswsi.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(x, y)\n      if x < y then\n        return\
    \ -1\n      else\n        return 1\n      end\n    end)\n  end\n  return array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyp5kx05.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpoyp5kx05.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return b - a end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_dm6svoc.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp_dm6svoc.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlnm5q4a.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvlnm5q4a.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(_, value2)\n\
    \      return -value2\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq58zq286.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpq58zq286.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj75lzw_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaj75lzw_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n\
    \      table.insert(results, array[i])\n    else\n      table.insert(results,\
    \ array[#array])\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqdbfreu2.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 5, 3, 0, 5, 5}\nstack traceback:\n\
    \t/tmp/tmpqdbfreu2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y - x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaekprhfm.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaekprhfm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(v1,\
    \ v2)\n      return v2 < v1\n    end)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3qai6v5.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpv3qai6v5.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return right - left\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj75lzw_.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaj75lzw_.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n\
    \      table.insert(results, i)\n    else\n      table.insert(results, #array\
    \ + i)\n    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9z5u72hi.lua:33:\
    \ expected: {5}\nactual: {1}\nstack traceback:\n\t/tmp/tmp9z5u72hi.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(left, right)\n   \
    \   return left > right\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq61ml9y.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmprq61ml9y.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82tfkc_w.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp82tfkc_w.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsruik_69.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsruik_69.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y - x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaekprhfm.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpaekprhfm.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht4_7mdr.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpht4_7mdr.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return b - a end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcf_odk8.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpkcf_odk8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsruik_69.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsruik_69.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = {}\n  local\
    \ sum = 0\n  for _, value in pairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhtehy11.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpyhtehy11.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph33w01vo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph33w01vo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1 then\n\
    \      table.insert(results, array[i])\n    else\n      table.insert(results,\
    \ array[i])\n      table.insert(results, array[i])\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavt_dukq.lua:35:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 2, 4, 4, 3, 0, 1, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpavt_dukq.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm70vgvz2.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpm70vgvz2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ a > b\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglxmr98a.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpglxmr98a.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    table.insert(sorted_array,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbqxvx8j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpbbqxvx8j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgj361394.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpgj361394.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi_45fro.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpxi_45fro.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b) return a < b end)\n  else\n    table.sort(sorted_array, function(a, b) return\
    \ a > b end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0gpfefw.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpj0gpfefw.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b) return b - a end)\n  end\n  return\
    \ sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykl_hy7z.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpykl_hy7z.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = {}\n  local\
    \ sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsth4wpv8.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsth4wpv8.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ return table.sort(array, \"asc\")\n  else\n    return table.sort(array, \"desc\"\
    )\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lal2o6s.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2lal2o6s.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    table.insert(results,\
    \ array[i])\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n\
    \    table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemq1oj7o.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpemq1oj7o.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b)\n      return a > b\n    end)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd9xqatan.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpd9xqatan.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm70vgvz2.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpm70vgvz2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(x, y)\n      return\
    \ y - x\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6b263i8d.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp6b263i8d.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptvgw4u9n.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmptvgw4u9n.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(_, value2)\n     \
    \ return -value2\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqjm2f5s5.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqjm2f5s5.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sorted_array = array\n  local\
    \ sum = 0\n  for i = 1, #array do\n    sum = sum + array[i]\n  end\n  if sum %\
    \ 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return sorted_array\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw16zpgfe.lua:37:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpw16zpgfe.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(_,x)\
    \ return -x end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzn2vl5bj.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpzn2vl5bj.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = array\n  for _, value in ipairs(sorted_array) do\n    sum = sum + value\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b) return b - a end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvab3rprf.lua:35:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvab3rprf.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqo3ksy6.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpkqo3ksy6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    results[i] = array[i]\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(results, function(a, b) return\
    \ a < b end)\n  else\n    table.sort(results, function(a, b) return a > b end)\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj63iomh.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmj63iomh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ a > b\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglxmr98a.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpglxmr98a.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = array\n  for _, value in ipairs(sorted_array) do\n    sum = sum + value\n\
    \  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n    table.sort(sorted_array,\
    \ function(a, b) return b - a end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l_rd6l3.lua:35:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp3l_rd6l3.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2\
    \ == 1 then\n    for _, v in ipairs(array) do\n      table.insert(new_array, v)\n\
    \    end\n  else\n    for _, v in ipairs(array) do\n      table.insert(new_array,\
    \ v)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvkwa0a4.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmpjvkwa0a4.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result, v)\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b) return b - a end)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxl4i857.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqxl4i857.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 == 1 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvujdjmiq.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpvujdjmiq.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm70vgvz2.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpm70vgvz2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    results[#results\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(results, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(results, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpss6j8n8h.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpss6j8n8h.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in pairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmhu2n78.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmphmhu2n78.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ pairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    return\
    \ table.sort(array)\n  else\n    return table.sort(array, function(v1, v2)\n \
    \     return v1 > v2\n    end)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhppa106.lua:32:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpnhppa106.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ return table.sort(array)\n  else\n    return table.sort(array, function(_,x)\
    \ return -x end)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_wzyihz.lua:30:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpy_wzyihz.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a < b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2wy89w1.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpn2wy89w1.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm70vgvz2.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpm70vgvz2.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    results[i] = array[i]\n\
    \  end\n  if sum % 2 ~= 0 then\n    table.sort(results, function(a, b) return\
    \ a < b end)\n  else\n    table.sort(results, function(a, b) return a > b end)\n\
    \  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj63iomh.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmj63iomh.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n  end\n  if\
    \ sum % 2 == 1 then\n    for _, value in ipairs(array) do\n      new_array[#new_array\
    \ + 1] = value\n    end\n  else\n    for _, value in ipairs(array) do\n      new_array[#new_array\
    \ + 1] = value\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_xdainz9.lua:38:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {2, 4, 3, 0, 1, 5}\nstack traceback:\n\
    \t/tmp/tmp_xdainz9.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    if sum % 2 == 1\
    \ then\n      table.insert(new_array, array[i])\n    else\n      table.insert(new_array,\
    \ array[#array])\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc61iyw27.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {5, 5, 3, 0, 5, 5}\nstack traceback:\n\
    \t/tmp/tmpc61iyw27.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a > b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqo3ksy6.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpkqo3ksy6.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return b - a\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt5ui1o42.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpt5ui1o42.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local result = {}\n\
    \  for _, value in ipairs(array) do\n    sum = sum + value\n    if sum % 2 ==\
    \ 1 then\n      table.insert(result, value)\n    else\n      table.remove(result,\
    \ #result - 1)\n      table.insert(result, value)\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_8oi9txn.lua:23:\
    \ bad argument #1 to 'remove' (position out of bounds)\nstack traceback:\n\t/tmp/tmp_8oi9txn.lua:23:\
    \ in local 'candidate'\n\t/tmp/tmp_8oi9txn.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(new_array,\
    \ v)\n  end\n  if sum % 2 == 1 then\n    table.sort(new_array)\n  else\n    table.sort(new_array,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return new_array\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5999jvo.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpv5999jvo.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbzladct.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpgbzladct.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = array\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(x, y)\n      return x > y\n    end)\n \
    \ end\n  return sorted_array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmsbfrtqq.lua:38:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmsbfrtqq.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      if a < b then\n        return\
    \ -1\n      elseif a > b then\n        return 1\n      else\n        return 0\n\
    \      end\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap9ezf8u.lua:42:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpap9ezf8u.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local results =\
    \ {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    table.insert(results,\
    \ value)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(results)\n  else\n   \
    \ table.sort(results, function(a, b) return a < b end)\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
    \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
    \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21,\
    \ 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22q38y9s.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp22q38y9s.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsruik_69.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpsruik_69.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq0jeegkk.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq0jeegkk.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local new_array\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    if sum %\
    \ 2 == 1 then\n      table.insert(new_array, value)\n    else\n      table.insert(new_array,\
    \ -value)\n    end\n  end\n  return new_array\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4oim76f.lua:34:\
    \ expected: {0, 1, 2, 3, 4, 5}\nactual: {-2, -4, 3, 0, -1, 5}\nstack traceback:\n\
    \t/tmp/tmpp4oim76f.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v2 < v1\n    end)\n\
    \  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr65ex0j.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpnr65ex0j.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b)\n      return\
    \ b - a\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqek7crur.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpqek7crur.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750538
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for i = 1, #array\
    \ do\n    sum = sum + array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n  return\
    \ array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2620uby.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpq2620uby.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(first, last)\n   \
    \   return last - first\n    end)\n  end\n  return array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4iedh_j9.lua:36:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmp4iedh_j9.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  for _, value in\
    \ ipairs(array) do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n   \
    \ table.sort(array)\n  else\n    table.sort(array, function(a, b) return a > b\
    \ end)\n  end\n  return array\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_array\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}),\
    \ {5})\n    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n\
    \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n\
    \    lu.assertEquals(candidate({2, 1}), {1, 2})\n    lu.assertEquals(candidate({15,\
    \ 42, 87, 32, 11, 0}), {0, 11, 15, 32, 42, 87})\n    lu.assertEquals(candidate({21,\
    \ 14, 23, 11}), {23, 21, 14, 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmjgzuqr3.lua:34:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmpmjgzuqr3.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
- exit_code: 1
  program: "-- Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n-- you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n-- or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n-- Note:\n\
    -- * don't change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n\
    -- >>> sort_array({5})\n-- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0,\
    \ 1, 2, 3, 4, 5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2,\
    \ 1, 0}\nlocal function sort_array(array)\n  local sum = 0\n  local sorted_array\
    \ = {}\n  for _, value in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array\
    \ + 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_array\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({5}), {5})\n    lu.assertEquals(candidate({2,\
    \ 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2, 4, 3,\
    \ 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2, 1}),\
    \ {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11, 15,\
    \ 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
    \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph33w01vo.lua:40:\
    \ expected: {6, 5, 4, 3, 2, 1, 0}\nactual: {0, 1, 2, 3, 4, 5, 6}\nstack traceback:\n\
    \t/tmp/tmph33w01vo.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822313
