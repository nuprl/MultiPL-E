language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local bal = 0\n  local sum = 0\n  for i =\
    \ 1, #q do\n    sum = sum + q[i]\n    bal = bal + (w / sum) * q[i]\n  end\n  return\
    \ bal <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqvyhu4ah.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqvyhu4ah.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if w == 0 then return true end\n  local max_weight\
    \ = math.min(w, #q)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n\
    \    if sum > max_weight then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvgbtubnn.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvgbtubnn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45y81vzk.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp45y81vzk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4jnqnhe.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz4jnqnhe.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if #q == 0 then return true end\n  local max_weight\
    \ = w\n  local balanced = true\n  for i = 1, #q do\n    if q[i] ~= q[#q] then\
    \ balanced = false end\n    max_weight = max_weight - q[i]\n    if max_weight\
    \ < 0 then balanced = false end\n  end\n  return balanced and max_weight <= 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_td9qjje.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_td9qjje.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6os0c7o7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6os0c7o7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal bal = 0\n\tlocal sum = 0\n\tfor i =\
    \ 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum > w then\n\t\t\tbal = bal + 1\n\t\
    \tend\n\tend\n\treturn bal <= 1 and sum <= w\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ckaen1j.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3ckaen1j.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckg90hqs.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpckg90hqs.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local function is_balanced(l)\n    local sum\
    \ = 0\n    for _, v in pairs(l) do\n      sum = sum + v\n    end\n    return sum\
    \ == w\n  end\n  local function is_palindrome(l)\n    local s = ''\n    for _,\
    \ v in pairs(l) do\n      s = s .. v\n    end\n    return s == reverse(l)\n  end\n\
    \  local function is_weight_valid(l)\n    return is_balanced(l) and is_palindrome(l)\
    \ and w <= sum(l)\n  end\n  return is_weight_valid(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5oa5hjjx.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5oa5hjjx.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6os0c7o7.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6os0c7o7.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckg90hqs.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpckg90hqs.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpipbrbr38.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpipbrbr38.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if q == nil or w == nil then\n\
    \    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj5u3od7k.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750537
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local balanced = true\n  local sum = 0\n \
    \ for i = 1, #q do\n    sum = sum + q[i]\n    if sum > w then\n      balanced\
    \ = false\n    end\n  end\n  return balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wop_7qu.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8wop_7qu.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750537
