language: lua
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_count = 0\n  local\
    \ paren_level = 0\n  local paren_groups = { }\n  local paren_group_level = 0\n\
    \  local paren_group_count = 0\n  local paren_group_groups = { }\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_count = 0\n  local paren_group_group_groups =\
    \ { }\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_count\
    \ = 0\n  local paren_group_group_group_groups = { }\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8av_lruv.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n\
    \  local paren_level = 0\n  local paren_groups = {}\n  local paren_group = 0\n\
    \  local paren_group_size = 0\n  local paren_group_level = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_groups = {}\n  local\
    \ paren_group_group = 0\n  local paren_group_group_size = 0\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_levels = {}\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_groups = {}\n  local paren_group_group_group\
    \ = 0\n  local paren_group_group_group_size = 0\n  local paren_group_group_group_level\
    \ = 0\n  local paren_group_group_group_levels = {}\n  local paren_group_group_group_level\
    \ = 0\n  local paren_group_group_group_groups = {}\n  local paren_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_size = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_size = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_group_size = 0\n  local paren_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_levels = {}\n  local\
    \ paren_group_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_group_group_size\
    \ = 0\n  local paren_group_group_group_group_group_group_group_level = 0\n  local\
    \ paren_group_group_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_group_groups = {}\n \
    \ local paren_group_group_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevx1tjmx.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_string = ''\n  local paren_group_start = 1\n  local\
    \ paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprc8e7hi3.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  for paren_group\
    \ in string.gmatch(paren_string, '%[(%a+)%]') do\n    local level_of_nesting =\
    \ #paren_group\n    if level_of_nesting > max_level then\n      max_level = level_of_nesting\n\
    \      max_level_paren_string = paren_group\n    end\n  end\n  return max_level,\
    \ max_level_paren_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvah9uyh.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpfvah9uyh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_level_max\
    \ = 0\n  local paren_nesting_level_max_index = 0\n  local paren_nesting_level_max_index2\
    \ = 0\n  local paren_nesting_level_max_index3 = 0\n  local paren_nesting_level_max_index4\
    \ = 0\n  local paren_nesting_level_max_index5 = 0\n  local paren_nesting_level_max_index6\
    \ = 0\n  local paren_nesting_level_max_index7 = 0\n  local paren_nesting_level_max_index8\
    \ = 0\n  local paren_nesting_level_max_index9 = 0\n  local paren_nesting_level_max_index10\
    \ = 0\n  local paren_nesting_level_max_index11 = 0\n  local paren_nesting_level_max_index12\
    \ = 0\n  local paren_nesting_level_max_index13 = 0\n  local paren_nesting_level_max_index14\
    \ = 0\n  local paren_nesting_level_max_index15 = 0\n  local paren_nesting_level_max_index16\
    \ = 0\n  local paren_nesting_level_max_index17 = 0\n  local paren_nesting_level_max_index18\
    \ = 0\n  local paren_nesting_level_max_index19 = 0\n  local paren_nesting_level_max_index20\
    \ = 0\n  local paren_nesting_level_max_index21 = 0\n  local paren_nesting_level_max_index22\
    \ = 0\n  local paren_nesting_level_max_index23 = 0\n  local paren_nesting_level_max_index24\
    \ = 0\n  local paren_nesting_level_max_index25 = 0\n  local paren_nesting_level_max_index26\
    \ = 0\n  local paren_nesting_level_max_index27 = 0\n  local paren_nesting_level_max_index28\
    \ = 0\n  local paren_nesting_level_max_index29 = 0\n  local paren_nesting_level_max_index30\
    \ = 0\n  local paren_nesting_level_max_index31 = 0\n  local paren_nesting_level_max_index32\
    \ = 0\n  local paren_nesting_level_max_index33 = 0\n  local paren_nesting_level_max_index34\
    \ = 0\n  local paren_nesting_level_max_index35 = 0\n  local paren_nesting_level_max_index36\
    \ = 0\n  local paren_nesting_level_max_index37 = 0\n  local paren_nesting_level_max_index38\
    \ = 0\n  local paren_nesting_level_max_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpywhrcyib.lua:61: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_group = 1\n  local paren_group_count = 1\n  local paren_group_start =\
    \ 0\n  local paren_group_end = 0\n  local paren_group_length = 0\n  local paren_group_length_count\
    \ = 0\n  local paren_group_length_start = 0\n  local paren_group_length_end =\
    \ 0\n  local paren_group_length_length = 0\n  local paren_group_length_length_count\
    \ = 0\n  local paren_group_length_length_start = 0\n  local paren_group_length_length_end\
    \ = 0\n  local paren_group_length_length_length = 0\n  local paren_group_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_start = 0\n  local paren_group_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length = 0\n  local paren_group_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_start = 0\n  local paren_group_length_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length_length = 0\n  local paren_group_length_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_length_start = 0\n  local\
    \ paren_group_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_count = 0\n  local\
    \ paren_group_length_length_length_length_length_start = 0\n  local paren_group_length_length_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length_length_length = 0\n  local\
    \ paren_group_length_length_length_length_length_length_count = 0\n  local paren_group_length_length_length_length_length_length_start\
    \ = 0\n  local paren_group_length_length_length_length_length_end = 0\n  local\
    \ paren_group_length_length_length_length_length_length = 0\n  local paren_group_length_length_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_length_length_start = 0\n\
    \  local paren_group_length_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_length_count = 0\n\
    \  local paren_group_length_length_length_length_length_length_start = 0\n  local\
    \ paren_group_length_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_length_length_count\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplitp55w2.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv8dp4hx6.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4fupccc.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvus8z1ll.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_stack\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp250psvgd.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_string = ''\n  for paren_group in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = 1\n    local paren_group_level = #paren_group\n\
    \    for i = 1, paren_group_level do\n      local char = paren_group[i]\n    \
    \  if char == '(' or char == ')' then\n        level = level + 1\n      elseif\
    \ char == '{' or char == '}' then\n        level = level - 1\n      end\n    end\n\
    \    if level > max_level then\n      max_level = level\n      max_level_string\
    \ = paren_group\n    end\n  end\n  return max_level_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0s9wy57.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw0s9wy57.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  local level = 0\n  local paren_level\
    \ = 0\n  for paren in string.gmatch(paren_string, '%[(%a*)%]') do\n    paren_level\
    \ = level\n    level = level + 1\n    if paren == '(' or paren == '[' then\n \
    \     paren_stack[#paren_stack + 1] = paren\n    elseif paren == ')' or paren\
    \ == ']' then\n      local last_paren = paren_stack[#paren_stack]\n      if last_paren\
    \ ~= '(' and last_paren ~= '[' then\n        level = level - 1\n      end\n  \
    \    local last_paren_level = paren_level\n      while #paren_stack > 0 do\n \
    \       local last_paren_level_next = paren_stack[#paren_stack + 1]\n        if\
    \ last_paren_level_next == '(' or last_paren_level_next == '[' then\n        \
    \  paren_stack[#paren_stack + 1] = last_paren\n        elseif last_paren_level_next\
    \ == ')' or last_paren_level_next == ']' then\n          local last_paren_next\
    \ = paren_stack[#paren_stack]\n          if last_paren_next ~= '(' and last_paren_next\
    \ ~= '[' then\n            level = level - 1\n          end\n          paren_stack[#paren_stack]\
    \ = last_paren\n        else\n          break\n        end\n      end\n      if\
    \ paren_stack[#paren_stack] == last_paren then\n        level = level - 1\n  \
    \    end\n    end\n    if level > max_level then\n      max_level = level\n  \
    \  end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfyf0357.lua:50:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmphfyf0357.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[()%]') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsm_9_ck.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmppsm_9_ck.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[#paren_stack+1]\
    \ = paren\n    level = level + 1\n    if paren == '(' and level > max_level then\n\
    \      max_level = level\n    end\n  end\n  local result = {}\n  for i = 1, #paren_stack\
    \ do\n    local paren = paren_stack[i]\n    local level = paren_stack[i + 1] -\
    \ paren\n    if level > max_level then\n      result[#result+1] = level\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jdx6wif.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp3jdx6wif.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpasqpes48.lua:9: unfinished string near ''''%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_string = ''\n  for paren_group in string.gmatch(paren_string,\
    \ '([^()]+)')\n  do\n    local level = 1\n    local paren_group_string = paren_group\n\
    \    while paren_group_string ~= '' do\n      local paren_group_char = paren_group_string:sub(1,\
    \ 1)\n      paren_group_string = paren_group_string:sub(2)\n      if paren_group_char\
    \ == '(' or paren_group_char == '[' then\n        level = level + 1\n      elseif\
    \ paren_group_char == ')' or paren_group_char == ']' then\n        level = level\
    \ - 1\n      else\n        level = level\n      end\n    end\n    if level > max_level\
    \ then\n      max_level = level\n      max_level_string = paren_group\n    end\n\
    \  end\n  return max_level_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w2ehakb.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: \" \"\nstack traceback:\n\t/tmp/tmp9w2ehakb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_level_count = 0\n  local paren_level_max = 0\n\
    \  local paren_level_max_count = 0\n  local paren_level_max_string = ''\n  local\
    \ paren_level_max_string_count = 0\n  local paren_level_max_string_length = 0\n\
    \  local paren_level_max_string_length_count = 0\n  local paren_level_max_string_length_string\
    \ = ''\n  local paren_level_max_string_length_count_string = ''\n  local paren_level_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_count = 0\n  local paren_level_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_count = 0\n  local\
    \ paren_level_max_string_length_length_max_string_length = 0\n  local paren_level_max_string_length_length_max_string_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_string =\
    \ ''\n  local paren_level_max_string_length_length_max_string_length_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length =\
    \ 0\n  local paren_level_max_string_length_length_max_string_length_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_length_length_max_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string_length\
    \ = 0\n  local paren_level_max_string_length_length_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0sbrvhay.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_size\
    \ = #paren_string\n  local paren_stack_index = 1\n  local paren_stack_last_index\
    \ = 1\n  local paren_stack_last_paren_level = 0\n  local paren_stack_last_paren_level_index\
    \ = 1\n  local paren_stack_last_paren_level_size = 1\n  local paren_stack_last_paren_level_char\
    \ = ''\n  local paren_stack_last_paren_level_char_length = 1\n  local paren_stack_last_paren_level_char_offset\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpstu4b7oe.lua:57: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_level = 0\n  local paren_level_string = ''\n  local paren_level_strings\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqazve9gn.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = #paren_stack\n    table.insert(paren_stack,\
    \ paren)\n    table.insert(paren_levels, paren_level)\n  end\n  local max_level\
    \ = #paren_stack\n  local max_levels = {}\n  for i = 1, max_level do\n    table.insert(max_levels,\
    \ i)\n  end\n  local max_level_length = #max_levels\n  local max_level_lengths\
    \ = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_levels[i])\n  end\n  local max_level_length = #max_level_lengths\n  local\
    \ max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgdccg5dk.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
