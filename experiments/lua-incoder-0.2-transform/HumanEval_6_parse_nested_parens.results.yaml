language: lua
name: HumanEval_6_parse_nested_parens
results:
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_count = 0\n  local\
    \ paren_level = 0\n  local paren_groups = { }\n  local paren_group_level = 0\n\
    \  local paren_group_count = 0\n  local paren_group_groups = { }\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_count = 0\n  local paren_group_group_groups =\
    \ { }\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_count\
    \ = 0\n  local paren_group_group_group_groups = { }\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8av_lruv.lua:64: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n\
    \  local paren_level = 0\n  local paren_groups = {}\n  local paren_group = 0\n\
    \  local paren_group_size = 0\n  local paren_group_level = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_groups = {}\n  local\
    \ paren_group_group = 0\n  local paren_group_group_size = 0\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_levels = {}\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_groups = {}\n  local paren_group_group_group\
    \ = 0\n  local paren_group_group_group_size = 0\n  local paren_group_group_group_level\
    \ = 0\n  local paren_group_group_group_levels = {}\n  local paren_group_group_group_level\
    \ = 0\n  local paren_group_group_group_groups = {}\n  local paren_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_size = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_size = 0\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_group_group_size = 0\n  local paren_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_levels = {}\n  local\
    \ paren_group_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_group_group_size\
    \ = 0\n  local paren_group_group_group_group_group_group_group_level = 0\n  local\
    \ paren_group_group_group_group_group_group_group_levels = {}\n  local paren_group_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_group_groups = {}\n \
    \ local paren_group_group_group_group_group_group_group_group = 0\n  local paren_group_group_group_group_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpevx1tjmx.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_string = ''\n  local paren_group_start = 1\n  local\
    \ paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_start = 1\n  local paren\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprc8e7hi3.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  for paren_group\
    \ in string.gmatch(paren_string, '%[(%a+)%]') do\n    local level_of_nesting =\
    \ #paren_group\n    if level_of_nesting > max_level then\n      max_level = level_of_nesting\n\
    \      max_level_paren_string = paren_group\n    end\n  end\n  return max_level,\
    \ max_level_paren_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvah9uyh.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpfvah9uyh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750372
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_level_max\
    \ = 0\n  local paren_nesting_level_max_index = 0\n  local paren_nesting_level_max_index2\
    \ = 0\n  local paren_nesting_level_max_index3 = 0\n  local paren_nesting_level_max_index4\
    \ = 0\n  local paren_nesting_level_max_index5 = 0\n  local paren_nesting_level_max_index6\
    \ = 0\n  local paren_nesting_level_max_index7 = 0\n  local paren_nesting_level_max_index8\
    \ = 0\n  local paren_nesting_level_max_index9 = 0\n  local paren_nesting_level_max_index10\
    \ = 0\n  local paren_nesting_level_max_index11 = 0\n  local paren_nesting_level_max_index12\
    \ = 0\n  local paren_nesting_level_max_index13 = 0\n  local paren_nesting_level_max_index14\
    \ = 0\n  local paren_nesting_level_max_index15 = 0\n  local paren_nesting_level_max_index16\
    \ = 0\n  local paren_nesting_level_max_index17 = 0\n  local paren_nesting_level_max_index18\
    \ = 0\n  local paren_nesting_level_max_index19 = 0\n  local paren_nesting_level_max_index20\
    \ = 0\n  local paren_nesting_level_max_index21 = 0\n  local paren_nesting_level_max_index22\
    \ = 0\n  local paren_nesting_level_max_index23 = 0\n  local paren_nesting_level_max_index24\
    \ = 0\n  local paren_nesting_level_max_index25 = 0\n  local paren_nesting_level_max_index26\
    \ = 0\n  local paren_nesting_level_max_index27 = 0\n  local paren_nesting_level_max_index28\
    \ = 0\n  local paren_nesting_level_max_index29 = 0\n  local paren_nesting_level_max_index30\
    \ = 0\n  local paren_nesting_level_max_index31 = 0\n  local paren_nesting_level_max_index32\
    \ = 0\n  local paren_nesting_level_max_index33 = 0\n  local paren_nesting_level_max_index34\
    \ = 0\n  local paren_nesting_level_max_index35 = 0\n  local paren_nesting_level_max_index36\
    \ = 0\n  local paren_nesting_level_max_index37 = 0\n  local paren_nesting_level_max_index38\
    \ = 0\n  local paren_nesting_level_max_index\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpywhrcyib.lua:61: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_group = 1\n  local paren_group_count = 1\n  local paren_group_start =\
    \ 0\n  local paren_group_end = 0\n  local paren_group_length = 0\n  local paren_group_length_count\
    \ = 0\n  local paren_group_length_start = 0\n  local paren_group_length_end =\
    \ 0\n  local paren_group_length_length = 0\n  local paren_group_length_length_count\
    \ = 0\n  local paren_group_length_length_start = 0\n  local paren_group_length_length_end\
    \ = 0\n  local paren_group_length_length_length = 0\n  local paren_group_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_start = 0\n  local paren_group_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length = 0\n  local paren_group_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_start = 0\n  local paren_group_length_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length_length = 0\n  local paren_group_length_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_length_start = 0\n  local\
    \ paren_group_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_count = 0\n  local\
    \ paren_group_length_length_length_length_length_start = 0\n  local paren_group_length_length_length_length_length_end\
    \ = 0\n  local paren_group_length_length_length_length_length_length = 0\n  local\
    \ paren_group_length_length_length_length_length_length_count = 0\n  local paren_group_length_length_length_length_length_length_start\
    \ = 0\n  local paren_group_length_length_length_length_length_end = 0\n  local\
    \ paren_group_length_length_length_length_length_length = 0\n  local paren_group_length_length_length_length_length_length_count\
    \ = 0\n  local paren_group_length_length_length_length_length_length_start = 0\n\
    \  local paren_group_length_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_length_count = 0\n\
    \  local paren_group_length_length_length_length_length_length_start = 0\n  local\
    \ paren_group_length_length_length_length_length_end = 0\n  local paren_group_length_length_length_length_length_length_length\
    \ = 0\n  local paren_group_length_length_length_length_length_length_length_count\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplitp55w2.lua:62: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv8dp4hx6.lua:65: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  local paren_group_length = 0\n  local paren_group_lengths\
    \ = {}\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_length = 0\n  local paren_group_lengths = {}\n  local paren_group_length\
    \ = 0\n  local paren_group_lengths = {}\n  local paren_group_length = 0\n  local\
    \ paren_group_lengths = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn4fupccc.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_index = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size\
    \ = #paren_level_stack\n  local paren_level_index = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_size = #paren_level_stack\n  local paren_level_index\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_size = #paren_level_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvus8z1ll.lua:69: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_stack\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack_index\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp250psvgd.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_string = ''\n  for paren_group in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = 1\n    local paren_group_level = #paren_group\n\
    \    for i = 1, paren_group_level do\n      local char = paren_group[i]\n    \
    \  if char == '(' or char == ')' then\n        level = level + 1\n      elseif\
    \ char == '{' or char == '}' then\n        level = level - 1\n      end\n    end\n\
    \    if level > max_level then\n      max_level = level\n      max_level_string\
    \ = paren_group\n    end\n  end\n  return max_level_string\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw0s9wy57.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: \"\"\nstack traceback:\n\t/tmp/tmpw0s9wy57.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  local level = 0\n  local paren_level\
    \ = 0\n  for paren in string.gmatch(paren_string, '%[(%a*)%]') do\n    paren_level\
    \ = level\n    level = level + 1\n    if paren == '(' or paren == '[' then\n \
    \     paren_stack[#paren_stack + 1] = paren\n    elseif paren == ')' or paren\
    \ == ']' then\n      local last_paren = paren_stack[#paren_stack]\n      if last_paren\
    \ ~= '(' and last_paren ~= '[' then\n        level = level - 1\n      end\n  \
    \    local last_paren_level = paren_level\n      while #paren_stack > 0 do\n \
    \       local last_paren_level_next = paren_stack[#paren_stack + 1]\n        if\
    \ last_paren_level_next == '(' or last_paren_level_next == '[' then\n        \
    \  paren_stack[#paren_stack + 1] = last_paren\n        elseif last_paren_level_next\
    \ == ')' or last_paren_level_next == ']' then\n          local last_paren_next\
    \ = paren_stack[#paren_stack]\n          if last_paren_next ~= '(' and last_paren_next\
    \ ~= '[' then\n            level = level - 1\n          end\n          paren_stack[#paren_stack]\
    \ = last_paren\n        else\n          break\n        end\n      end\n      if\
    \ paren_stack[#paren_stack] == last_paren then\n        level = level - 1\n  \
    \    end\n    end\n    if level > max_level then\n      max_level = level\n  \
    \  end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfyf0357.lua:50:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmphfyf0357.lua:50:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[()%]') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppsm_9_ck.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmppsm_9_ck.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[#paren_stack+1]\
    \ = paren\n    level = level + 1\n    if paren == '(' and level > max_level then\n\
    \      max_level = level\n    end\n  end\n  local result = {}\n  for i = 1, #paren_stack\
    \ do\n    local paren = paren_stack[i]\n    local level = paren_stack[i + 1] -\
    \ paren\n    if level > max_level then\n      result[#result+1] = level\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jdx6wif.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp3jdx6wif.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpasqpes48.lua:9: unfinished string near ''''%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_string = ''\n  for paren_group in string.gmatch(paren_string,\
    \ '([^()]+)')\n  do\n    local level = 1\n    local paren_group_string = paren_group\n\
    \    while paren_group_string ~= '' do\n      local paren_group_char = paren_group_string:sub(1,\
    \ 1)\n      paren_group_string = paren_group_string:sub(2)\n      if paren_group_char\
    \ == '(' or paren_group_char == '[' then\n        level = level + 1\n      elseif\
    \ paren_group_char == ')' or paren_group_char == ']' then\n        level = level\
    \ - 1\n      else\n        level = level\n      end\n    end\n    if level > max_level\
    \ then\n      max_level = level\n      max_level_string = paren_group\n    end\n\
    \  end\n  return max_level_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w2ehakb.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: \" \"\nstack traceback:\n\t/tmp/tmp9w2ehakb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_level = 0\n  local paren_level_count = 0\n  local paren_level_max = 0\n\
    \  local paren_level_max_count = 0\n  local paren_level_max_string = ''\n  local\
    \ paren_level_max_string_count = 0\n  local paren_level_max_string_length = 0\n\
    \  local paren_level_max_string_length_count = 0\n  local paren_level_max_string_length_string\
    \ = ''\n  local paren_level_max_string_length_count_string = ''\n  local paren_level_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_count = 0\n  local paren_level_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_count = 0\n  local\
    \ paren_level_max_string_length_length_max_string_length = 0\n  local paren_level_max_string_length_length_max_string_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_string =\
    \ ''\n  local paren_level_max_string_length_length_max_string_length_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length =\
    \ 0\n  local paren_level_max_string_length_length_max_string_length_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_length_length_max_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string\
    \ = ''\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string_count\
    \ = 0\n  local paren_level_max_string_length_length_max_string_length_length_max_string_length_length_max_string_length\
    \ = 0\n  local paren_level_max_string_length_length_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0sbrvhay.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_size\
    \ = #paren_string\n  local paren_stack_index = 1\n  local paren_stack_last_index\
    \ = 1\n  local paren_stack_last_paren_level = 0\n  local paren_stack_last_paren_level_index\
    \ = 1\n  local paren_stack_last_paren_level_size = 1\n  local paren_stack_last_paren_level_char\
    \ = ''\n  local paren_stack_last_paren_level_char_length = 1\n  local paren_stack_last_paren_level_char_offset\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local paren_stack_last_paren_level_char_offset_index = 1\n  local paren_stack_last_paren_level_char_offset_size\
    \ = 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpstu4b7oe.lua:57: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_level = 0\n  local paren_level_string = ''\n  local paren_level_strings\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_level_strings_len = 0\n  local paren_level_strings_lens\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqazve9gn.lua:70: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = #paren_stack\n    table.insert(paren_stack,\
    \ paren)\n    table.insert(paren_levels, paren_level)\n  end\n  local max_level\
    \ = #paren_stack\n  local max_levels = {}\n  for i = 1, max_level do\n    table.insert(max_levels,\
    \ i)\n  end\n  local max_level_length = #max_levels\n  local max_level_lengths\
    \ = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_levels[i])\n  end\n  local max_level_length = #max_level_lengths\n  local\
    \ max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n  for i = 1, max_level_length do\n    table.insert(max_level_lengths,\
    \ max_level_lengths[i])\n  end\n  local max_level_length = #max_level_lengths\n\
    \  local max_level_lengths = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgdccg5dk.lua:81: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750425
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_level_count = 0\n  local paren_level_string = ''\n  local paren_level_char\
    \ = ''\n  local paren_level_char_length = 0\n  local paren_level_char_position\
    \ = 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next =\
    \ 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n\
    \  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local\
    \ paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous\
    \ = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous =\
    \ 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous = 0\n\
    \  local paren_level_char_next = 0\n  local paren_level_char_previous = 0\n  local\
    \ paren_level_char_next = 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next\
    \ = 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next =\
    \ 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n\
    \  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local\
    \ paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous\
    \ = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous =\
    \ 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous = 0\n\
    \  local paren_level_char_next = 0\n  local paren_level_char_previous = 0\n  local\
    \ paren_level_char_next = 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next\
    \ = 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next =\
    \ 0\n  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n\
    \  local paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local\
    \ paren_level_char_previous = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous\
    \ = 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous =\
    \ 0\n  local paren_level_char_next = 0\n  local paren_level_char_previous = 0\n\
    \  local paren_level_char_next = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpao5ut9li.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_levels = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_count = {}\n  local paren_group_level_max_index = {}\n\
    \  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_index\
    \ = {}\n  local paren_group_level_max_count\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5b_70p7b.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_g1h9xpf.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_levels_stack = {}\n  local paren_group_nestings_stack\
    \ = {}\n  local paren_group_levels_stack_index = 0\n  local paren_group_nestings_stack_index\
    \ = 0\n  local paren_group_levels_stack_index2 = 0\n  local paren_group_nestings_stack_index2\
    \ = 0\n  local paren_group_levels_stack_index3 = 0\n  local paren_group_nestings_stack_index3\
    \ = 0\n  local paren_group_levels_stack_index4 = 0\n  local paren_group_nestings_stack_index4\
    \ = 0\n  local paren_group_levels_stack_index5 = 0\n  local paren_group_nestings_stack_index5\
    \ = 0\n  local paren_group_levels_stack_index6 = 0\n  local paren_group_nestings_stack_index6\
    \ = 0\n  local paren_group_levels_stack_index7 = 0\n  local paren_group_nestings_stack_index7\
    \ = 0\n  local paren_group_levels_stack_index8 = 0\n  local paren_group_nestings_stack_index8\
    \ = 0\n  local paren_group_levels_stack_index9 = 0\n  local paren_group_nestings_stack_index9\
    \ = 0\n  local paren_group_levels_stack_index10 = 0\n  local paren_group_nestings_stack_index10\
    \ = 0\n  local paren_group_levels_stack_index11 = 0\n  local paren_group_nestings_stack_index11\
    \ = 0\n  local paren_group_levels_stack_index12 = 0\n  local paren_group_nestings_stack_index12\
    \ = 0\n  local paren_group_levels_stack_index13 = 0\n  local paren_group_nestings_stack_index13\
    \ = 0\n  local paren_group_levels_stack_index14 = 0\n  local paren_group_nestings_stack_index14\
    \ = 0\n  local paren_group_levels_stack_index15 = 0\n  local paren_group_nestings_stack_index15\
    \ = 0\n  local paren_group_levels_stack_index16 = 0\n  local paren_group_nestings_stack_index16\
    \ = 0\n  local paren_group_levels_stack_index17 = 0\n  local paren_group_nestings_stack_index17\
    \ = 0\n  local paren_group_levels_stack_index18 = 0\n  local paren_group_nesting\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzkgfxh0_.lua:60: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_level = {}\n  local\
    \ paren_level_count = {}\n  local paren_level_max_count = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index[1] = 1\n  local paren_level_max_count_index[2]\
    \ = 2\n  local paren_level_max_count_index[3] = 3\n  local paren_level_max_count_index[4]\
    \ = 4\n  local paren_level_max_count_index[5] = 5\n  local paren_level_max_count_index[6]\
    \ = 6\n  local paren_level_max_count_index[7] = 7\n  local paren_level_max_count_index[8]\
    \ = 8\n  local paren_level_max_count_index[9] = 9\n  local paren_level_max_count_index[10]\
    \ = 10\n  local paren_level_max_count_index[11] = 11\n  local paren_level_max_count_index[12]\
    \ = 12\n  local paren_level_max_count_index[13] = 13\n  local paren_level_max_count_index[14]\
    \ = 14\n  local paren_level_max_count_index[15] = 15\n  local paren_level_max_count_index[16]\
    \ = 16\n  local paren_level_max_count_index[17] = 17\n  local paren_level_max_count_index[18]\
    \ = 18\n  local paren_level_max_count_index[19] = 19\n  local paren_level_max_count_index[20]\
    \ = 20\n  local paren_level_max_count_index[21] = 21\n  local paren_level_max_count_index[22]\
    \ = 22\n  local paren_level_max_count_index[23] = 23\n  local paren_level_max_count_index[24]\
    \ = 24\n  local paren_level_max_count_index[25] = 25\n  local paren_level_max_count_index[26]\
    \ = 26\n  local paren_level_max_count_index[27] = 27\n  local paren_level_max_count_index[28]\
    \ = 28\n  local paren_level_max_count_index[29] = 29\n  local paren_level_max_count_index[30]\
    \ = 30\n  local paren_level_max_count_index[31] = 31\n  local paren_level_max_count_index[32]\
    \ = 32\n  local paren_level_max_count_index[33] = 33\n  local paren_level_max_count_index[34]\
    \ = 34\n  local paren_level_max_count_index[35] = 35\n  local paren_level_max_count_index[36]\
    \ = 36\n  local paren_level_max_count_index[37] = 37\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu3_hgv8w.lua:13: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%]') do\n    local paren_level = #paren_stack\n    local paren_open\
    \ = paren:sub(1, 1)\n    local paren_close = paren:sub(2)\n    local paren_groups\
    \ = paren:sub(3)\n    local paren_groups = string.gsub(paren_groups, '()', '')\n\
    \    local paren_groups = string.gsub(paren_groups, '{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}', '')\n    local paren_groups = string.gsub(paren_groups,\
    \ '{}{}{}', '')\n    local paren_groups = string.gsub(paren_groups, '{}{}{}{}',\
    \ '')\n    local paren_groups = string.gsub(paren_groups, '{}{}{}{}{}', '')\n\
    \    local paren_groups = string.gsub(paren_groups, '{}{}{}{}{}{}', '')\n    local\
    \ paren_groups = string.gsub(paren_groups, '{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local paren_groups\
    \ = string.gsub(paren_groups, '{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}', '')\n    local\
    \ paren_groups = string.gsub(paren_groups, '{}{}{}{}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx08fys6e.lua:32: unfinished string near ''''{}{}{}{}''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren_group_start = nil\n  local paren_group_end\
    \ = nil\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren_group_start = nil\n  local paren_group_end\
    \ = nil\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren_group_start = nil\n  local paren_group_end\
    \ = nil\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren_group_start = nil\n  local paren_group_end\
    \ = nil\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren_group_start = nil\n  local paren_group_end\
    \ = nil\n  local paren_group_start = nil\n  local paren_group_end = nil\n  local\
    \ paren_group_start = nil\n  local paren_group_end = nil\n  local paren_group_start\
    \ = nil\n  local paren_group_end = nil\n  local paren_group_start = nil\n  local\
    \ paren_group_end = nil\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3mfqg4ds.lua:81: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local paren_level = #paren_stack\n    table.insert(paren_stack,\
    \ paren)\n    table.insert(paren_levels, paren_level)\n  end\n  local max_levels\
    \ = #paren_levels\n  local max_level = 0\n  for i = 1, max_levels do\n    if paren_levels[i]\
    \ > max_level then\n      max_level = paren_levels[i]\n    end\n  end\n  local\
    \ results = {}\n  for i = 1, max_levels do\n    local paren_level = paren_levels[i]\n\
    \    local paren_stack_size = #paren_stack\n    for j = 1, paren_level do\n  \
    \    local paren = table.concat(paren_stack, '+')\n      table.insert(results,\
    \ paren)\n      table.insert(paren_stack, paren)\n    end\n  end\n  return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpikuxdmzm.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpikuxdmzm.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_count = 0\n  local paren_nesting_string_count\
    \ = 0\n  local paren_level_last_char = ''\n  local paren_nesting_last_char = ''\n\
    \  local paren_level_last_char_count = 0\n  local paren_nesting_last_char_count\
    \ = 0\n  local paren_level_last_char_is_space = false\n  local paren_nesting_last_char_is_space\
    \ = false\n  local paren_level_last_char_is_newline = false\n  local paren_nesting_last_char_is_newline\
    \ = false\n  local paren_level_last_char_is_newline_or_space = false\n  local\
    \ paren_nesting_last_char_is_newline_or_space = false\n  local paren_level_last_char_is_newline_or_newline\
    \ = false\n  local paren_nesting_last_char_is_newline_or_newline = false\n  local\
    \ paren_level_last_char_is_newline_or_newline_or_space = false\n  local paren_nesting_last_char_is_newline_or_newline_or_space\
    \ = false\n  local paren_level_last_char_is_newline_or_newline_or_newline = false\n\
    \  local paren_nesting_last_char_is_newline_or_newline_or_newline = false\n  local\
    \ paren_level_last_char_is_newline_or_newline_or_newline_or_space = false\n  local\
    \ paren_nesting_last_char_is_newline_or_newline_or_newline_or_space = false\n\
    \  local paren_level_last_char_is_newline_or_newline_or_newline_or_newline = false\n\
    \  local paren_nesting_last_char_is_newline_or_newline_or_newline_or_newline =\
    \ false\n  local paren_level_last_char_is_newline_or_newline_or_newline_or_newline_or_space\
    \ = false\n  local paren_nesting_last_char_is_newline_or_newline_or_newline_or_newline_or_space\
    \ = false\n  local paren_level_last_char_is_newline_or_newline_or_newline_or_newline_or_newline\
    \ = false\n  local paren_nesting_last_char_is_newline_or_newline_or_newline_or_newline_or_newline\
    \ = false\n  local paren_level_last_char_is_newline_or_newline_or_newline_or_newline_or_newline_or_space\
    \ = false\n  local paren_nesting_last_char_is_newline_or_newline_or_newline_or_newline_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpem1ga_gt.lua:50: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_groups =\
    \ {}\n  local paren_group_index = 1\n  local paren_group_index2 = 0\n  local paren_group_index3\
    \ = 0\n  local paren_group_index4 = 0\n  local paren_group_index5 = 0\n  local\
    \ paren_group_index6 = 0\n  local paren_group_index7 = 0\n  local paren_group_index8\
    \ = 0\n  local paren_group_index9 = 0\n  local paren_group_index10 = 0\n  local\
    \ paren_group_index11 = 0\n  local paren_group_index12 = 0\n  local paren_group_index13\
    \ = 0\n  local paren_group_index14 = 0\n  local paren_group_index15 = 0\n  local\
    \ paren_group_index16 = 0\n  local paren_group_index17 = 0\n  local paren_group_index18\
    \ = 0\n  local paren_group_index19 = 0\n  local paren_group_index20 = 0\n  local\
    \ paren_group_index21 = 0\n  local paren_group_index22 = 0\n  local paren_group_index23\
    \ = 0\n  local paren_group_index24 = 0\n  local paren_group_index25 = 0\n  local\
    \ paren_group_index26 = 0\n  local paren_group_index27 = 0\n  local paren_group_index28\
    \ = 0\n  local paren_group_index29 = 0\n  local paren_group_index30 = 0\n  local\
    \ paren_group_index31 = 0\n  local paren_group_index32 = 0\n  local paren_group_index33\
    \ = 0\n  local paren_group_index34 = 0\n  local paren_group_index35 = 0\n  local\
    \ paren_group_index36 = 0\n  local paren_group_index37 = 0\n  local paren_group_index38\
    \ = 0\n  local paren_group_index39 = 0\n  local paren_group_index40 = 0\n  local\
    \ paren_group_index41 = 0\n  local paren_group_index42 = 0\n  local paren_group_index43\
    \ = 0\n  local paren_group_index44 = 0\n  local paren_group_index45 = 0\n  local\
    \ paren_group_index46 = 0\n  local paren_group_index47 = 0\n  local paren_group_index48\
    \ = 0\n  local paren_group_index49 = 0\n  local paren_group_index50 = 0\n  local\
    \ paren_group_index51 = 0\n  local paren_group_index52 = 0\n  local paren_group_index53\
    \ = 0\n  local paren_group_index54 = 0\n  local paren\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkg2nzlsu.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_count = {}\n  local paren_level_count = {}\n  local\
    \ paren_stack_string = ''\n  local paren_level_string = ''\n  local paren_stack_count\
    \ = 0\n  local paren_level_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_level_string = ''\n  local paren_stack_count = 0\n  local paren_level_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_level_string = ''\n  local\
    \ paren_stack_count = 0\n  local paren_level_count = 0\n  local paren_stack_string\
    \ = ''\n  local paren_level_string = ''\n  local paren_stack_count = 0\n  local\
    \ paren_level_count = 0\n  local paren_stack_string = ''\n  local paren_level_string\
    \ = ''\n  local paren_stack_count = 0\n  local paren_level_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_level_string = ''\n  local paren_stack_count\
    \ = 0\n  local paren_level_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_level_string = ''\n  local paren_stack_count = 0\n  local paren_level_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_level_string = ''\n  local\
    \ paren_stack_count = 0\n  local paren_level_count = 0\n  local paren_stack_string\
    \ = ''\n  local paren_level_string = ''\n  local paren_stack_count = 0\n  local\
    \ paren_level_count = 0\n  local paren_stack_string = ''\n  local paren_level_string\
    \ = ''\n  local paren_stack_count = 0\n  local paren_level_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_level_string = ''\n  local paren_stack_count\
    \ = 0\n  local paren_level_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_level_string = ''\n  local paren_stack_count = 0\n  local paren_level_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_level_string = ''\n  local\
    \ paren_stack_count = 0\n  local paren_level_count = 0\n  local paren_stack_string\
    \ = ''\n  local paren_level_string = ''\n  local paren_stack_count = 0\n  local\
    \ paren_level_count = 0\n  local paren_stack_string = ''\n  local paren_level_string\
    \ = ''\n  local paren_stack_count = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptim9wu2d.lua:81: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = #paren_level\n\
    \  local paren_level_index = 1\n  local paren_stack_index = 1\n  local paren_stack_value\
    \ = paren_string\n  local paren_level_value = paren_string\n  local paren_stack_value_index\
    \ = 1\n  local paren_level_value_index = 1\n  local paren_stack_value_value =\
    \ 1\n  local paren_level_value_value = 1\n  local paren_stack_value_index = 1\n\
    \  local paren_level_value_index = 1\n  local paren_stack_value_value = 1\n  local\
    \ paren_level_value_value = 1\n  local paren_stack_value_index = 1\n  local paren_level_value_index\
    \ = 1\n  local paren_stack_value_value = 1\n  local paren_level_value_value =\
    \ 1\n  local paren_stack_value_index = 1\n  local paren_level_value_index = 1\n\
    \  local paren_stack_value_value = 1\n  local paren_level_value_value = 1\n  local\
    \ paren_stack_value_index = 1\n  local paren_level_value_index = 1\n  local paren_stack_value_value\
    \ = 1\n  local paren_level_value_value = 1\n  local paren_stack_value_index =\
    \ 1\n  local paren_level_value_index = 1\n  local paren_stack_value_value = 1\n\
    \  local paren_level_value_value = 1\n  local paren_stack_value_index = 1\n  local\
    \ paren_level_value_index = 1\n  local paren_stack_value_value = 1\n  local paren_level_value_value\
    \ = 1\n  local paren_stack_value_index = 1\n  local paren_level_value_index =\
    \ 1\n  local paren_stack_value_value = 1\n  local paren_level_value_value = 1\n\
    \  local paren_stack_value_index = 1\n  local paren_level_value_index = 1\n  local\
    \ paren_stack_value_value = 1\n  local paren_level_value_value = 1\n  local paren_stack_value_index\
    \ = 1\n  local paren_level_value_index = 1\n  local paren_stack_value_value =\
    \ 1\n  local paren_level_value_value = 1\n  local paren_stack_value_index = 1\n\
    \  local paren_level_value_index = 1\n  local paren_stack_value_value = 1\n  local\
    \ paren_level_value_value = 1\n  local paren_stack_value_index = 1\n  local paren_level_value_index\
    \ = 1\n  local paren_stack_value_value = 1\n  local paren_level_value_value =\
    \ 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ss09_61.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local level = 0\n  local paren_count = 0\n  for paren_char\
    \ in paren_string:gmatch('%[(%a%)]') do\n    local new_level = level + 1\n   \
    \ levels[level] = new_level\n    level = new_level\n    paren_count = paren_count\
    \ + 1\n  end\n  assert(paren_count == paren_string:len())\n  return levels\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgvtrp3h7.lua:16:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpgvtrp3h7.lua:16: in local 'candidate'\n\
    \t/tmp/tmpgvtrp3h7.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = {}\n  local paren_level_count\
    \ = {}\n  local paren_level_max_count = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index2 = {}\n  local paren_level_max_count_index3\
    \ = {}\n  local paren_level_max_count_index4 = {}\n  local paren_level_max_count_index5\
    \ = {}\n  local paren_level_max_count_index6 = {}\n  local paren_level_max_count_index7\
    \ = {}\n  local paren_level_max_count_index8 = {}\n  local paren_level_max_count_index9\
    \ = {}\n  local paren_level_max_count_index10 = {}\n  local paren_level_max_count_index11\
    \ = {}\n  local paren_level_max_count_index12 = {}\n  local paren_level_max_count_index13\
    \ = {}\n  local paren_level_max_count_index14 = {}\n  local paren_level_max_count_index15\
    \ = {}\n  local paren_level_max_count_index16 = {}\n  local paren_level_max_count_index17\
    \ = {}\n  local paren_level_max_count_index18 = {}\n  local paren_level_max_count_index19\
    \ = {}\n  local paren_level_max_count_index20 = {}\n  local paren_level_max_count_index21\
    \ = {}\n  local paren_level_max_count_index22 = {}\n  local paren_level_max_count_index23\
    \ = {}\n  local paren_level_max_count_index24 = {}\n  local paren_level_max_count_index25\
    \ = {}\n  local paren_level_max_count_index26 = {}\n  local paren_level_max_count_index27\
    \ = {}\n  local paren_level_max_count_index28 = {}\n  local paren_level_max_count_index29\
    \ = {}\n  local paren_level_max_count_index30 = {}\n  local paren_level_max_count_index31\
    \ = {}\n  local paren_level_max_count_index32 = {}\n  local paren_level_max_count_index33\
    \ = {}\n  local paren_level_max_count_index34 = {}\n  local paren_level_max_count_index35\
    \ = {}\n  local paren_level_max_count_index36 = {}\n  local paren_level_max_count_index37\
    \ = {}\n  local paren_level_max_count_index38 = {}\n  local paren_level_max_count_index39\
    \ = {}\n  local paren_level_max_count_index40 = {}\n  local paren_level_max_count_index41\
    \ = {}\n  local paren_level_max_count_index42 = {}\n  local paren_level_max_count_index43\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzimtw2oa.lua:64: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_start = 1\n  local paren_group_end\
    \ = 1\n  local paren_group_length = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_nesting_depth = 1\n  local paren_group_nesting_end = 1\n\
    \  local paren_group_nesting_length = 1\n  local paren_group_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_nesting_depth = 1\n  local paren_group_nesting_nesting_end\
    \ = 1\n  local paren_group_nesting_nesting_length = 1\n  local paren_group_nesting_nesting_nesting_level\
    \ = 1\n  local paren_group_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp197sr6aj.lua:61: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_size = #paren_level_stack\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local\
    \ paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index =\
    \ 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n\
    \  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local\
    \ paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value =\
    \ 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local\
    \ paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index =\
    \ 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n\
    \  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local\
    \ paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value\
    \ = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value =\
    \ 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n\
    \  local paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local\
    \ paren_level_stack_index = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index\
    \ = 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index =\
    \ 1\n  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n\
    \  local paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local\
    \ paren_level_stack_value = 1\n  local paren_level_stack_index = 1\n  local paren_level_stack_value\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_d63kdyw.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_level_count = 0\n  local paren_level_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_level_char = ''\n  local paren_level_char_count = 0\n  local\
    \ paren_level_char_prev = ''\n  local paren_level_char_prev_count = 0\n  local\
    \ paren_level_char_next = ''\n  local paren_level_char_next_count = 0\n  local\
    \ paren_level_char_next_prev = ''\n  local paren_level_char_next_prev_count =\
    \ 0\n  local paren_level_char_next_next = ''\n  local paren_level_char_next_next_count\
    \ = 0\n  local paren_level_char_next_next_prev = ''\n  local paren_level_char_next_next_prev_count\
    \ = 0\n  local paren_level_char_next_next_next = ''\n  local paren_level_char_next_next_next_count\
    \ = 0\n  local paren_level_char_next_next_next_prev = ''\n  local paren_level_char_next_next_next_prev_count\
    \ = 0\n  local paren_level_char_next_next_next_next = ''\n  local paren_level_char_next_next_next_next_count\
    \ = 0\n  local paren_level_char_next_next_next_prev_prev = ''\n  local paren_level_char_next_next_next_prev_count\
    \ = 0\n  local paren_level_char_next_next_next_prev_prev = ''\n  local paren_level_char_next_next_next_prev_prev\
    \ = ''\n  local paren_level_char_next_next_next_prev_prev = ''\n  local paren_level_char_next_next_next_prev_prev_count\
    \ = 0\n  local paren_level_char_next_next_next_prev_prev_prev = ''\n  local paren_level_char_next_next_next_prev_prev_prev\
    \ = ''\n  local paren_level_char_next_next_next_prev_prev_prev = ''\n  local paren_level_char_next_next_next_prev_prev_prev_count\
    \ = 0\n  local paren_level_char_next_next_next_prev_prev_prev_prev = ''\n  local\
    \ paren_level_char_next_next_next_prev_prev_prev_prev = ''\n  local paren_level_char_next_next_next_prev_prev_prev_prev\
    \ = ''\n  local paren_level_char_next_next_next_prev_prev_prev_prev = ''\n  local\
    \ paren_level_char_next_next_next_prev_prev_prev_prev_count = 0\n  local paren_level_char_next_next_next_prev_prev_prev_prev_prev\
    \ = ''\n  local paren_level_char_next_next_next_prev_prev_prev_prev_prev = ''\n\
    \  local paren_level_char_next_next_next_prev_prev_prev_prev_prev = ''\n  local\
    \ paren_level_char_next_next_next_prev_prev_prev_prev_prev_count = 0\n  local\
    \ paren_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfg92fyqg.lua:60: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_index = 0\n  local paren_group_max_level_count\
    \ = 0\n  local paren_group_max_level_group_index = 1\n  local paren_group_max_level_group_count\
    \ = 0\n  local paren_group_max_level_group_max_level_index = 1\n  local paren_group_max_level_group_max_level_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_index = 1\n  local\
    \ paren_group_max_level_group_max_level_group_count = 0\n  local paren_group_max_level_group_max_level_group_max_level_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_count = 0\n\
    \  local paren_group_max_level_group_max_level_group_max_level_group_index = 1\n\
    \  local paren_group_max_level_group_max_level_group_max_level_group_count = 0\n\
    \  local paren_group_max_level_group_max_level_group_max_level_group_max_level_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_count\
    \ = 0\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_index\
    \ = 1\n  local paren_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_max_level_group_count\
    \ = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqzc48xgf.lua:49: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_levels\
    \ = {}\n  local paren_group_groups = {}\n  local paren_group_group_index = {}\n\
    \  local paren_group_group_levels = {}\n  local paren_group_group_groups = {}\n\
    \  local paren_group_group_group_index = {}\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_groups = {}\n  local paren_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_index = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_levels = {}\n  local\
    \ paren_group_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_group_levels = {}\n\
    \  local paren_group_group_group_group_group_group_group_groups = {}\n  local\
    \ paren_group_group_group_group_group_group_group_group_index = {}\n  local paren_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_groups =\
    \ {}\n  local paren_group_group_group_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_group_group_group_index\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_group_group_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaf5uplkj.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_index[0] = 0\n  local\
    \ paren_stack_index[1] = #paren_string\n  local paren_stack_index[2] = #paren_string\n\
    \  local paren_stack_index[3] = #paren_string\n  local paren_stack_index[4] =\
    \ #paren_string\n  local paren_stack_index[5] = #paren_string\n  local paren_stack_index[6]\
    \ = #paren_string\n  local paren_stack_index[7] = #paren_string\n  local paren_stack_index[8]\
    \ = #paren_string\n  local paren_stack_index[9] = #paren_string\n  local paren_stack_index[10]\
    \ = #paren_string\n  local paren_stack_index[11] = #paren_string\n  local paren_stack_index[12]\
    \ = #paren_string\n  local paren_stack_index[13] = #paren_string\n  local paren_stack_index[14]\
    \ = #paren_string\n  local paren_stack_index[15] = #paren_string\n  local paren_stack_index[16]\
    \ = #paren_string\n  local paren_stack_index[17] = #paren_string\n  local paren_stack_index[18]\
    \ = #paren_string\n  local paren_stack_index[19] = #paren_string\n  local paren_stack_index[20]\
    \ = #paren_string\n  local paren_stack_index[21] = #paren_string\n  local paren_stack_index[22]\
    \ = #paren_string\n  local paren_stack_index[23] = #paren_string\n  local paren_stack_index[24]\
    \ = #paren_string\n  local paren_stack_index[25] = #paren_string\n  local paren_stack_index[26]\
    \ = #paren_string\n  local paren_stack_index[27] = #paren_string\n  local paren_stack_index[28]\
    \ = #paren_string\n  local paren_stack_index[29] = #paren_string\n  local paren_stack_index[30]\
    \ = #paren_string\n  local paren_stack_index[31] = #paren_string\n  local paren_stack_index[32]\
    \ = #paren_string\n  local paren_stack_index[33] = #paren_string\n  local paren_stack_index[34]\
    \ = #paren_string\n  local paren_stack_index[35] = #paren_string\n  local paren_stack_index[36]\
    \ = #paren_string\n  local paren_stack_index[37] = #paren_string\n  local paren_stack\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5b7850hk.lua:12: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxw3m1o4o.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_map = {}\n  local paren_levels_map_keys = {}\n  local\
    \ paren_levels_map_values = {}\n  local paren_levels_map_keys_sorted = {}\n  local\
    \ paren_levels_map_values_sorted = {}\n  local paren_levels_map_keys_sorted_index\
    \ = 1\n  local paren_levels_map_values_sorted_index = 1\n  local paren_levels_map_keys_sorted_index_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next = 1\n  local paren_levels_map_keys_sorted_index_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next = 1\n  local paren_levels_map_keys_sorted_index_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next = 1\n  local\
    \ paren_levels_map_keys_sorted_index_next_next_next_next = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next\
    \ = 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next = 1\n\
    \  local paren_levels_map_values_sorted_index_next_next_next_next_next = 1\n \
    \ local paren_levels_map_keys_sorted_index_next_next_next_next_next_next = 1\n\
    \  local paren_levels_map_values_sorted_index_next_next_next_next_next_next =\
    \ 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_keys_sorted_index_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_map_values_sorted_index_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7e5wbm14.lua:50: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%[(%a*)%[(%a*)%[([%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpluuvj52j.lua:9: unfinished string near ''''%[(%a*)%[(%a*)%[(%a*)%[([%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a*)%[(%a''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n\
    \  for paren in string.gmatch(paren_string, '%[(%a+)%]') do\n    local level =\
    \ #paren_stack\n    paren_stack[level] = paren\n    paren_levels[level] = level\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  local\
    \ levels = max_level\n  local paren_levels_sorted = {}\n  for i = 1, levels do\n\
    \    table.insert(paren_levels_sorted, paren_levels[i])\n  end\n  table.sort(paren_levels_sorted)\n\
    \  local paren_levels_sorted = {}\n  for i = 1, levels do\n    table.insert(paren_levels_sorted,\
    \ paren_levels[i])\n  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted\
    \ = {}\n  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiik93m3m.lua:69: '')'' expected (to close ''('' at line 68)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplho1etpu.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_max_levels\
    \ = {}\n  local paren_group_counts = {}\n  local paren_group_max_counts = {}\n\
    \  local paren_group_count = 1\n  local paren_group_max_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_max_level = 1\n  local paren_group_start = 1\n  local\
    \ paren_group_end = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start\
    \ = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n\
    \  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local\
    \ paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end\
    \ = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n\
    \  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local\
    \ paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start\
    \ = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n\
    \  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local\
    \ paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end\
    \ = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n\
    \  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local\
    \ paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start\
    \ = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n\
    \  local paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local\
    \ paren_group_last_end = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end\
    \ = 1\n  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n\
    \  local paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local\
    \ paren_group_last_start = 1\n  local paren_group_last_end = 1\n  local paren_group_last_start\
    \ = 1\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6a_hly_.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_levels\
    \ = {}\n  local paren_group_level_index = {}\n  local paren_group_stack = {}\n\
    \  local paren_group_stack_index = {}\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\n  local paren_group_level_index\n\
    \  local paren_group_stack_index\n  local paren_group\n  local paren_group_index\n\
    \  local paren_group_level\n  local paren_group_level_index\n  local paren_group_stack_index\n\
    \  local paren_group\n  local paren_group_index\n  local paren_group_level\n \
    \ local paren_group_level_index\n  local paren_group_stack_index\n  local paren_group\n\
    \  local paren_group_index\n  local paren_group_level\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_otd51cy.lua:87: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]') do\n    local level = #paren_stack\n    paren_stack[level] = paren\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzk4_7ecv.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpzk4_7ecv.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, \"%[(%a)(%a)]*\") do\n    if paren\
    \ == \"(\" then\n      paren_stack[#paren_stack + 1] = paren_level\n      paren_level\
    \ = paren_level + 1\n    elseif paren == \")\" then\n      paren_level = paren_stack[#paren_stack]\n\
    \      paren_stack[#paren_stack] = nil\n    else\n      paren_groups[#paren_groups\
    \ + 1] = paren\n    end\n  end\n  return paren_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfuslycad.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpfuslycad.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrmd66ys.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_nesting\
    \ = paren_nesting + 1\n    if paren_nesting > paren_level then\n      paren_level\
    \ = paren_nesting\n    end\n    parsed_parens[#parsed_parens + 1] = paren_level\n\
    \  end\n  return parsed_parens\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwafiygp8.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpwafiygp8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local current_level = 1\n  local opening_parens = 0\n\
    \  local opening_parens_count = 0\n  local opening_parens_level = 0\n  local opening_parens_level_max\
    \ = 0\n  local opening_parens_level_max_index = 0\n  local opening_parens_level_max_index2\
    \ = 0\n  local opening_parens_level_max_index3 = 0\n  local opening_parens_level_max_index4\
    \ = 0\n  local opening_parens_level_max_index5 = 0\n  local opening_parens_level_max_index6\
    \ = 0\n  local opening_parens_level_max_index7 = 0\n  local opening_parens_level_max_index8\
    \ = 0\n  local opening_parens_level_max_index9 = 0\n  local opening_parens_level_max_index10\
    \ = 0\n  local opening_parens_level_max_index11 = 0\n  local opening_parens_level_max_index12\
    \ = 0\n  local opening_parens_level_max_index13 = 0\n  local opening_parens_level_max_index14\
    \ = 0\n  local opening_parens_level_max_index15 = 0\n  local opening_parens_level_max_index16\
    \ = 0\n  local opening_parens_level_max_index17 = 0\n  local opening_parens_level_max_index18\
    \ = 0\n  local opening_parens_level_max_index19 = 0\n  local opening_parens_level_max_index20\
    \ = 0\n  local opening_parens_level_max_index21 = 0\n  local opening_parens_level_max_index22\
    \ = 0\n  local opening_parens_level_max_index23 = 0\n  local opening_parens_level_max_index24\
    \ = 0\n  local opening_parens_level_max_index25 = 0\n  local opening_parens_level_max_index26\
    \ = 0\n  local opening_parens_level_max_index27 = 0\n  local opening_parens_level_max_index28\
    \ = 0\n  local opening_parens_level_max_index29 = 0\n  local opening_parens_level_max_index30\
    \ = 0\n  local opening_parens_level_max_index31 = 0\n  local opening_parens_level_max_index32\
    \ = 0\n  local opening_parens_level_max_index33 = 0\n  local opening_parens_level_max_index34\
    \ = 0\n  local opening_parens_level_max_index35 = 0\n  local opening_parens_level_max_index36\
    \ = 0\n  local opening_parens_level_max_index37 = 0\n  local opening_parens_level_max_index38\
    \ = 0\n  local opening_parens_level_max_index39\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5zq4tv_l.lua:61: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]') do\n    local paren_level\
    \ = paren_stack[#paren_stack]\n    if paren_level == nil then\n      paren_level\
    \ = level\n    end\n    level = level + 1\n    paren_stack[#paren_stack] = level\n\
    \    paren_levels[level] = paren_level\n  end\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, #paren_levels do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp65bcbka2.lua:65: '')'' expected (to close ''('' at line 64)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nestings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a*)%]') do\n    local paren_level = tonumber(paren)\n    local paren_nesting\
    \ = paren_nesting + 1\n    paren_levels[paren_level] = paren_level\n    paren_nestings[paren_nesting]\
    \ = paren_nesting\n    if paren_nesting > 1 then\n      paren_levels_string =\
    \ paren_levels_string .. paren_level\n      paren_nestings_string = paren_nestings_string\
    \ .. paren_nesting\n    end\n  end\n  local max_nesting = tonumber(paren_nestings_string)\n\
    \  local max_level = tonumber(paren_levels_string)\n  local max_level_groups =\
    \ {}\n  for i = 1, max_level do\n    local level_groups = {}\n    for j = 1, max_nesting\
    \ do\n      local level_group = paren_stack[j]\n      level_groups[level_group]\
    \ = level_groups[level_group] or {}\n      level_groups[level_group][paren_stack[j]]\
    \ = i\n    end\n    max_level_groups[i] = level_groups\n  end\n  return max_level_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjfvcy92.lua:27:\
    \ bad 'for' limit (number expected, got nil)\nstack traceback:\n\t/tmp/tmpzjfvcy92.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpzjfvcy92.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)(%a)]+') do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    level = level + 1\n    if paren == '(' and level > max_level\
    \ then\n      max_level = level\n    end\n  end\n  local result = {max_level}\n\
    \  for i = 1, #paren_stack do\n    local paren = paren_stack[i]\n    local level\
    \ = paren_stack[i + 1] - paren\n    if level > result[#result] then\n      result[#result]\
    \ = level\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgduy4kzc.lua:31:\
    \ expected: {2, 3, 1, 3}\nactual: {0}\nstack traceback:\n\t/tmp/tmpgduy4kzc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_string = {}\n  local\
    \ paren_level_stack = {}\n  local paren_level_stack_count = {}\n  local paren_level_stack_string\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_stack_string_count = {}\n  local paren_level_stack_string_count\
    \ = {}\n  local paren_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpphktttq9.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_index[0] = 0\n  local paren_stack_index[1] = #paren_string\n\
    \  local paren_stack_index[2] = #paren_string\n  local paren_stack_index[3] =\
    \ #paren_string\n  local paren_stack_index[4] = #paren_string\n  local paren_stack_index[5]\
    \ = #paren_string\n  local paren_stack_index[6] = #paren_string\n  local paren_stack_index[7]\
    \ = #paren_string\n  local paren_stack_index[8] = #paren_string\n  local paren_stack_index[9]\
    \ = #paren_string\n  local paren_stack_index[10] = #paren_string\n  local paren_stack_index[11]\
    \ = #paren_string\n  local paren_stack_index[12] = #paren_string\n  local paren_stack_index[13]\
    \ = #paren_string\n  local paren_stack_index[14] = #paren_string\n  local paren_stack_index[15]\
    \ = #paren_string\n  local paren_stack_index[16] = #paren_string\n  local paren_stack_index[17]\
    \ = #paren_string\n  local paren_stack_index[18] = #paren_string\n  local paren_stack_index[19]\
    \ = #paren_string\n  local paren_stack_index[20] = #paren_string\n  local paren_stack_index[21]\
    \ = #paren_string\n  local paren_stack_index[22] = #paren_string\n  local paren_stack_index[23]\
    \ = #paren_string\n  local paren_stack_index[24] = #paren_string\n  local paren_stack_index[25]\
    \ = #paren_string\n  local paren_stack_index[26] = #paren_string\n  local paren_stack_index[27]\
    \ = #paren_string\n  local paren_stack_index[28] = #paren_string\n  local paren_stack_index[29]\
    \ = #paren_string\n  local paren_stack_index[30] = #paren_string\n  local paren_stack_index[31]\
    \ = #paren_string\n  local paren_stack_index[32] = #paren_string\n  local paren_stack_index[33]\
    \ = #paren_string\n  local paren_stack_index[34] = #paren_string\n  local paren_stack_index[35]\
    \ = #paren_string\n  local paren_stack_index[36] = #paren_string\n  local paren_stack_index[37]\
    \ = #paren_string\n  local paren_stack_index[38] = #paren_string\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq9axe6d1.lua:11: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4i53sel5.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm0e0klwy.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_nesting_level = 0\n  local paren_nesting_count = 0\n  local paren_nesting_max\
    \ = 0\n  local paren_nesting_max_level = 0\n  local paren_nesting_max_count =\
    \ 0\n  local paren_nesting_max_max = 0\n  local paren_nesting_max_max_level =\
    \ 0\n  local paren_nesting_max_max_count = 0\n  local paren_nesting_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_count = 0\n  local paren_nesting_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_count = 0\n  local paren_nesting_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_count = 0\n  local paren_nesting_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_count = 0\n  local paren_nesting_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_count = 0\n  local paren_nesting_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_level\
    \ = 0\n  local paren_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe_kovbcf.lua:63: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_level = {}\n  local\
    \ paren_level_count = {}\n  local paren_level_max_count = {}\n  local paren_level_max_count_index\
    \ = {}\n  local paren_level_max_count_index2 = {}\n  local paren_level_max_count_index3\
    \ = {}\n  local paren_level_max_count_index4 = {}\n  local paren_level_max_count_index5\
    \ = {}\n  local paren_level_max_count_index6 = {}\n  local paren_level_max_count_index7\
    \ = {}\n  local paren_level_max_count_index8 = {}\n  local paren_level_max_count_index9\
    \ = {}\n  local paren_level_max_count_index10 = {}\n  local paren_level_max_count_index11\
    \ = {}\n  local paren_level_max_count_index12 = {}\n  local paren_level_max_count_index13\
    \ = {}\n  local paren_level_max_count_index14 = {}\n  local paren_level_max_count_index15\
    \ = {}\n  local paren_level_max_count_index16 = {}\n  local paren_level_max_count_index17\
    \ = {}\n  local paren_level_max_count_index18 = {}\n  local paren_level_max_count_index19\
    \ = {}\n  local paren_level_max_count_index20 = {}\n  local paren_level_max_count_index21\
    \ = {}\n  local paren_level_max_count_index22 = {}\n  local paren_level_max_count_index23\
    \ = {}\n  local paren_level_max_count_index24 = {}\n  local paren_level_max_count_index25\
    \ = {}\n  local paren_level_max_count_index26 = {}\n  local paren_level_max_count_index27\
    \ = {}\n  local paren_level_max_count_index28 = {}\n  local paren_level_max_count_index29\
    \ = {}\n  local paren_level_max_count_index30 = {}\n  local paren_level_max_count_index31\
    \ = {}\n  local paren_level_max_count_index32 = {}\n  local paren_level_max_count_index33\
    \ = {}\n  local paren_level_max_count_index34 = {}\n  local paren_level_max_count_index35\
    \ = {}\n  local paren_level_max_count_index36 = {}\n  local paren_level_max_count_index37\
    \ = {}\n  local paren_level_max_count_index38 = {}\n  local paren_level_max_count_index39\
    \ = {}\n  local paren_level_max_count_index40 = {}\n  local paren_level_max_count_index41\
    \ = {}\n  local paren_level_max_count_index42 = {}\n  local paren_level_max_count_index43\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn14zpl9x.lua:64: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm4vd3kdo.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_level_index = 1\n  local paren_group_level_count =\
    \ 0\n  local paren_group_level_max_count = 1\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_count = 0\n  local paren\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4upw1est.lua:72: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting = 0\n  local\
    \ paren_nesting_nesting_level = 0\n  for paren_level,paren_nesting,paren_nesting_level,paren_nesting_nesting,paren_nesting_nesting_level\
    \ in ipairs(paren_string:gmatchn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_wa0ivey.lua:13: unfinished string near

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_len = {}\n  local paren_levels_max_len = 0\n  local paren_levels_max_len_index\
    \ = 0\n  local paren_levels_max_len_value = 0\n  local paren_levels_max_len_index2\
    \ = 0\n  local paren_levels_max_len_value2 = 0\n  local paren_levels_max_len_index3\
    \ = 0\n  local paren_levels_max_len_value3 = 0\n  local paren_levels_max_len_index4\
    \ = 0\n  local paren_levels_max_len_value4 = 0\n  local paren_levels_max_len_index5\
    \ = 0\n  local paren_levels_max_len_value5 = 0\n  local paren_levels_max_len_index6\
    \ = 0\n  local paren_levels_max_len_value6 = 0\n  local paren_levels_max_len_index7\
    \ = 0\n  local paren_levels_max_len_value7 = 0\n  local paren_levels_max_len_index8\
    \ = 0\n  local paren_levels_max_len_value8 = 0\n  local paren_levels_max_len_index9\
    \ = 0\n  local paren_levels_max_len_value9 = 0\n  local paren_levels_max_len_index10\
    \ = 0\n  local paren_levels_max_len_value10 = 0\n  local paren_levels_max_len_index11\
    \ = 0\n  local paren_levels_max_len_value11 = 0\n  local paren_levels_max_len_index12\
    \ = 0\n  local paren_levels_max_len_value12 = 0\n  local paren_levels_max_len_index13\
    \ = 0\n  local paren_levels_max_len_value13 = 0\n  local paren_levels_max_len_index14\
    \ = 0\n  local paren_levels_max_len_value14 = 0\n  local paren_levels_max_len_index15\
    \ = 0\n  local paren_levels_max_len_value15 = 0\n  local paren_levels_max_len_index16\
    \ = 0\n  local paren_levels_max_len_value16 = 0\n  local paren_levels_max_len_index17\
    \ = 0\n  local paren_levels_max_len_value17 = 0\n  local paren_levels_max_len_index18\
    \ = 0\n  local paren_levels_max_len_value18 = 0\n  local paren_levels_max_len_index19\
    \ = 0\n  local paren_levels_max_len_value19 = 0\n  local paren_levels_max_len_index20\
    \ = 0\n  local paren_levels_max_len_value20 = 0\n  local paren_levels_max_len_index21\
    \ = 0\n  local paren_levels_max_len_value21 = 0\n  local paren_levels_max_len_index22\
    \ = 0\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppyladw4h.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_levels = {}\n  local paren_group_counts = {}\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_count = 0\n  local paren_group_max_paren_level\
    \ = 0\n  local paren_group_max_paren_count = 0\n  local paren_group_max_paren_level_count\
    \ = 0\n  local paren_group_max_paren_level_count_count = 0\n  local paren_group_max_paren_level_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count = 0\n  local\
    \ paren_group_max_paren_level_count_count_count_count_count = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n  local paren_group_max_paren_level_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpires660a.lua:45: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_index\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_level = 0\n  local\
    \ paren_stack_max_level = 0\n  local paren_stack_max_level_char = ''\n  local\
    \ paren_stack_max_level_char_index = 0\n  local paren_stack_max_level_char_length\
    \ = 0\n  local paren_stack_max_level_char_length_index = 0\n  local paren_stack_max_level_char_length_string\
    \ = ''\n  local paren_stack_max_level_char_length_string_index = 0\n  local paren_stack_max_level_char_length_string_length\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_index = 0\n  local\
    \ paren_stack_max_level_char_length_string_length_string = ''\n  local paren_stack_max_level_char_length_string_length_string_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length =\
    \ 0\n  local paren_stack_max_level_char_length_string_length_string_length_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string\
    \ = ''\n  local paren_stack_max_level_char_length_string_length_string_length_string_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string\
    \ = ''\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_length_string_index\
    \ = 0\n  local paren_stack_max_level_char_length_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local paren_stack_max_level_char_length\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy485fjmp.lua:51: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_levels = {}\n  local paren_group_level_index\
    \ = 1\n  local paren_group_level_max = 0\n  local paren_group_level_max_index\
    \ = 1\n  local paren_group_level_max_index2 = 0\n  local paren_group_level_max_index3\
    \ = 0\n  local paren_group_level_max_index4 = 0\n  local paren_group_level_max_index5\
    \ = 0\n  local paren_group_level_max_index6 = 0\n  local paren_group_level_max_index7\
    \ = 0\n  local paren_group_level_max_index8 = 0\n  local paren_group_level_max_index9\
    \ = 0\n  local paren_group_level_max_index10 = 0\n  local paren_group_level_max_index11\
    \ = 0\n  local paren_group_level_max_index12 = 0\n  local paren_group_level_max_index13\
    \ = 0\n  local paren_group_level_max_index14 = 0\n  local paren_group_level_max_index15\
    \ = 0\n  local paren_group_level_max_index16 = 0\n  local paren_group_level_max_index17\
    \ = 0\n  local paren_group_level_max_index18 = 0\n  local paren_group_level_max_index19\
    \ = 0\n  local paren_group_level_max_index20 = 0\n  local paren_group_level_max_index21\
    \ = 0\n  local paren_group_level_max_index22 = 0\n  local paren_group_level_max_index23\
    \ = 0\n  local paren_group_level_max_index24 = 0\n  local paren_group_level_max_index25\
    \ = 0\n  local paren_group_level_max_index26 = 0\n  local paren_group_level_max_index27\
    \ = 0\n  local paren_group_level_max_index28 = 0\n  local paren_group_level_max_index29\
    \ = 0\n  local paren_group_level_max_index30 = 0\n  local paren_group_level_max_index31\
    \ = 0\n  local paren_group_level_max_index32 = 0\n  local paren_group_level_max_index33\
    \ = 0\n  local paren_group_level_max_index34 = 0\n  local paren_group_level_max_index35\
    \ = 0\n  local paren_group_level_max_index36 = 0\n  local paren_group_level_max_index37\
    \ = 0\n  local paren_group_level_max_index38 = 0\n  local paren_group_level_max_index39\
    \ = 0\n  local paren_group_level_max_index40 = 0\n  local paren_group_level_max_index41\
    \ = 0\n  local paren_group_level_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo3kihdbi.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_levels = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_count = {}\n  local paren_group_level_max_index = {}\n\
    \  local paren_group_level_max_count = {}\n  local paren_group_level_max_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index = {}\n  local paren_group_level_max_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index = {}\n  local\
    \ paren_group_level_max_index_count_index_count_index_count = {}\n  local paren_group_level_max_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local paren_group_level_max_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = {}\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkzsli_t8.lua:51: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_nesting_level = 1\n\
    \  local paren_group_levels = {}\n  local paren_group_nesting_levels = {}\n  local\
    \ paren_group_levels_index = 1\n  local paren_group_nesting_levels_index = 1\n\
    \  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local paren_group_nesting_levels_index\
    \ = 1\n  local paren_group_levels_index = 1\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnhnytwru.lua:66: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_nesting\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_nesting_count = {}\n  local paren_group_stack_count = {}\n\
    \  local paren_group_level_max_count = {}\n  local paren_group_nesting_max_count\
    \ = {}\n  local paren_group_level_max_count_stack = {}\n  local paren_group_nesting_max_count_stack\
    \ = {}\n  local paren_group_level_max_count_stack_count = {}\n  local paren_group_nesting_max_count_stack_count\
    \ = {}\n  local paren_group_level_max_count_stack_counts = {}\n  local paren_group_nesting_max_count_stack_counts\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack = {}\n  local paren_group_nesting_max_count_stack_counts_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack = {}\n  local\
    \ paren_group_nesting_max_count_stack_counts_stack_stack = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack = {}\n\
    \  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack = {}\n\
    \  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack = {}\n\
    \  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack = {}\n\
    \  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_stack_stack_stack_stack_stack_stack\
    \ = {}\n  local paren_group_level_max_count_stack_counts_stack_stack_stack_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp07vku0tg.lua:53: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_max_level = {}\n  local paren_group_max_level_stack\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n  local paren_group_max_level_stack_count\
    \ = {}\n  local paren_group_max_level_stack_index = {}\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_g_u_cl.lua:66: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_stack = { 0 }\n  local paren_level = 0\n\
    \  local paren_levels = { 0 }\n  local paren_levels_stack = { 0 }\n  local paren_levels_stack_index\
    \ = 0\n  local paren_levels_stack_size = #paren_levels_stack\n  local paren_levels_stack_is_empty\
    \ = paren_levels_stack_index == paren_levels_stack_size\n  local paren_levels_stack_is_not_empty\
    \ = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index\
    \ > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n\
    \  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local\
    \ paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty\
    \ = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index\
    \ > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n\
    \  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local\
    \ paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty\
    \ = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index\
    \ > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n\
    \  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local\
    \ paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty\
    \ = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index\
    \ > 0\n  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n\
    \  local paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local\
    \ paren_levels_stack_is_not_empty = paren_levels_stack_index > 0\n  local paren_levels_stack_is_not_empty\
    \ = paren_levels_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmkvj8arq.lua:45: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_level_stack = {}\n  local paren_group_level_stack_count =\
    \ {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\n  local paren_group_level_stack_count\
    \ = {}\n  local paren_group_level_stack_count = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp06p9hcea.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm4vd3kdo.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    if level > max_level then\n\
    \      max_level = level\n    end\n    table.insert(paren_stack, paren)\n  end\n\
    \  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6gs29_t.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpj6gs29_t.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_levels_stack_index = {}\n  local paren_levels_stack_index\
    \ = {}\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm0e0klwy.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = 0\n  local paren_group_level = 0\n  local paren_group_start = 0\n  local paren_group_end\
    \ = 0\n  local paren_group_length = 0\n  local paren_group_lengths = {}\n  local\
    \ paren_group_lengths_index = {}\n  local paren_group_lengths_count = 0\n  local\
    \ paren_group_lengths_start = 0\n  local paren_group_lengths_end = 0\n  local\
    \ paren_group_lengths_length = 0\n  local paren_group_lengths_lengths = {}\n \
    \ local paren_group_lengths_lengths_index = {}\n  local paren_group_lengths_lengths_count\
    \ = 0\n  local paren_group_lengths_lengths_start = 0\n  local paren_group_lengths_lengths_end\
    \ = 0\n  local paren_group_lengths_lengths_length = 0\n  local paren_group_lengths_lengths_lengths\
    \ = {}\n  local paren_group_lengths_lengths_lengths_index = {}\n  local paren_group_lengths_lengths_lengths_count\
    \ = 0\n  local paren_group_lengths_lengths_lengths_start = 0\n  local paren_group_lengths_lengths_lengths_end\
    \ = 0\n  local paren_group_lengths_lengths_lengths_length = 0\n  local paren_group_lengths_lengths_lengths_lengths\
    \ = {}\n  local paren_group_lengths_lengths_lengths_lengths_index = {}\n  local\
    \ paren_group_lengths_lengths_lengths_lengths_count = 0\n  local paren_group_lengths_lengths_lengths_lengths_start\
    \ = 0\n  local paren_group_lengths_lengths_lengths_lengths_end = 0\n  local paren_group_lengths_lengths_lengths_lengths_length\
    \ = 0\n  local paren_group_lengths_lengths_lengths_lengths_lengths = {}\n  local\
    \ paren_group_lengths_lengths_lengths_lengths_index = {}\n  local paren_group_lengths_lengths_lengths_lengths_lengths_count\
    \ = 0\n  local paren_group_lengths_lengths_lengths_lengths_start = 0\n  local\
    \ paren_group_lengths_lengths_lengths_lengths_end = 0\n  local paren_group_lengths_lengths_lengths_lengths_lengths_length\
    \ = 0\n  local paren_group_lengths_lengths_lengths_lengths_lengths_lengths = {}\n\
    \  local paren_group_lengths_lengths_lengths_lengths_lengths_index = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7qc5qbmb.lua:59: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_levels = { }\n  local paren_levels_string =\
    \ paren_string\n  local paren_levels_string = paren_levels_string:gsub('()', '\
    \ ')\n  local paren_levels_string = paren_levels_string:gsub('(', ' ')\n  local\
    \ paren_levels_string = paren_levels_string:gsub(')', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('\
    \  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n\
    \  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('\
    \  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n\
    \  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('\
    \  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n\
    \  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('\
    \  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n\
    \  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('\
    \  ', ' ')\n  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n\
    \  local paren_levels_string = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_string\
    \ = paren_levels_string:gsub('  ', ' ')\n  local paren_levels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzzxhiz6y.lua:47: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = 0\n  local paren_levels_stack_is_empty = true\n\
    \  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = false\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj878uf2g.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local max_level_string = ''\n  for\
    \ paren in string.gmatch(paren_string, '%[(%a)(%a)]+') do\n    if paren == '('\
    \ or paren == ')' then\n      level = level + 1\n      if level > max_level then\n\
    \        max_level = level\n        max_level_string = paren\n      end\n    else\n\
    \      level = level - 1\n    end\n  end\n  return max_level, max_level_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyifc106j.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpyifc106j.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  local paren_string\
    \ = paren_string:gsub('%[(%[(%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdpl8wbeb.lua:9: unfinished string near ''''%[(%[(%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%[%''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  for paren in string.gmatch(paren_string, '%[(%a*)%]') do\n    local\
    \ paren_level = #paren_stack\n    if paren_level > max_level then\n      max_level\
    \ = paren_level\n    end\n    paren_stack[paren_level + 1] = paren\n    paren_levels[paren]\
    \ = paren_level\n  end\n  local paren_levels_sorted = {}\n  for i = 1, max_level\
    \ do\n    table.insert(paren_levels_sorted, paren_levels[i])\n  end\n  table.sort(paren_levels_sorted)\n\
    \  local paren_levels_sorted = {}\n  for i = 1, max_level do\n    table.insert(paren_levels_sorted,\
    \ paren_levels[i])\n  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted\
    \ = {}\n  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_levels[i])\n\
    \  end\n  table.sort(paren_levels_sorted)\n  local paren_levels_sorted = {}\n\
    \  for i = 1, max_level do\n    table.insert(paren_levels_sorted, paren_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyv9ddeo7.lua:67: '')'' expected (to close ''('' at line 66)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_string = {}\n  local level = 1\n  local paren_count = 0\n  for\
    \ paren in string.gmatch(paren_string, '%[(%a*)%[(%a*)%]]') do\n    paren_count\
    \ = paren_count + 1\n    local current_level = level\n    level = level + 1\n\
    \    parsed_string[paren_count] = current_level\n  end\n  return parsed_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslb8ojuk.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpslb8ojuk.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index =\
    \ 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_max_level_stack_index44\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk029pnn3.lua:64: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  for paren in string.gmatch(paren_string, \"%[(%a*)%]\") do\n    if paren ==\
    \ \"(\" then\n      paren_count = paren_count + 1\n      paren_level = paren_level\
    \ + 1\n    elseif paren == \")\" then\n      paren_count = paren_count - 1\n \
    \     paren_level = paren_level - 1\n    end\n    if paren_count == 0 then\n \
    \     table.insert(paren_stack, paren_level)\n    end\n  end\n  return table.max(paren_stack)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ps3u7ce.lua:22:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmp2ps3u7ce.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp2ps3u7ce.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_nesting\
    \ = 1\n  local paren_group_nesting_level = 0\n  local paren_group_level = 1\n\
    \  local paren_group_levels = {}\n  local paren_group_level_nesting = 1\n  local\
    \ paren_group_level_nesting_level = 0\n  local paren_group_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting = 1\n  local paren_group_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_levels = {}\n  local paren_group_level_nesting_level_nesting_level_nesting\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level = 0\n\
    \  local paren_group_level_nesting_level_nesting_level_nesting_levels = {}\n \
    \ local paren_group_level_nesting_level_nesting_level_nesting_level_nesting =\
    \ 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting\
    \ = 1\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level\
    \ = 0\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_levels\
    \ = {}\n  local paren_group_level_nesting_level_nesting_level_nesting_level_nesting_level_nesting_level_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_04dtlgi.lua:47: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = #paren_levels\n    paren_levels[paren] =\
    \ level\n    if level > max_level then\n      max_level = level\n    end\n  end\n\
    \  return max_level, paren_levels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqm0kobmd.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpqm0kobmd.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_stack = {}\n  local paren_level_count = {}\n  local\
    \ paren_level_count_stack = {}\n  local paren_level_count_stack_index = 0\n  local\
    \ paren_level_count_stack_index2 = 0\n  local paren_level_count_stack_index3 =\
    \ 0\n  local paren_level_count_stack_index4 = 0\n  local paren_level_count_stack_index5\
    \ = 0\n  local paren_level_count_stack_index6 = 0\n  local paren_level_count_stack_index7\
    \ = 0\n  local paren_level_count_stack_index8 = 0\n  local paren_level_count_stack_index9\
    \ = 0\n  local paren_level_count_stack_index10 = 0\n  local paren_level_count_stack_index11\
    \ = 0\n  local paren_level_count_stack_index12 = 0\n  local paren_level_count_stack_index13\
    \ = 0\n  local paren_level_count_stack_index14 = 0\n  local paren_level_count_stack_index15\
    \ = 0\n  local paren_level_count_stack_index16 = 0\n  local paren_level_count_stack_index17\
    \ = 0\n  local paren_level_count_stack_index18 = 0\n  local paren_level_count_stack_index19\
    \ = 0\n  local paren_level_count_stack_index20 = 0\n  local paren_level_count_stack_index21\
    \ = 0\n  local paren_level_count_stack_index22 = 0\n  local paren_level_count_stack_index23\
    \ = 0\n  local paren_level_count_stack_index24 = 0\n  local paren_level_count_stack_index25\
    \ = 0\n  local paren_level_count_stack_index26 = 0\n  local paren_level_count_stack_index27\
    \ = 0\n  local paren_level_count_stack_index28 = 0\n  local paren_level_count_stack_index29\
    \ = 0\n  local paren_level_count_stack_index30 = 0\n  local paren_level_count_stack_index31\
    \ = 0\n  local paren_level_count_stack_index32 = 0\n  local paren_level_count_stack_index33\
    \ = 0\n  local paren_level_count_stack_index34 = 0\n  local paren_level_count_stack_index35\
    \ = 0\n  local paren_level_count_stack_index36 = 0\n  local paren_level_count_stack_index37\
    \ = 0\n  local paren_level_count_stack_index38 = 0\n  local paren_level_count_stack_index39\
    \ = 0\n  local paren_level_count_stack_index40 = 0\n  local paren_level_count_stack_index41\
    \ = 0\n  local paren_level_count_stack_index42 = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr47vut0e.lua:66: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_start_string\
    \ = ''\n  local paren_group_end_string = ''\n  local paren_group_level_string\
    \ = ''\n  local paren_group_start_string = ''\n  local paren_group_end_string\
    \ = ''\n  local paren_group_level_string = ''\n  local paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd2epbnqn.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgddx5mdq.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_len = 0\n  local paren_group_max_level_char\
    \ = ''\n  local paren_group_max_level_char_count = 0\n  local paren_group_max_level_char_count_len\
    \ = 0\n  local paren_group_max_level_char_index = 0\n  local paren_group_max_level_char_index_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_max_level_char_index_count_len\
    \ = 0\n  local paren_group_max_level_char_index_count = 0\n  local paren_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzejovynm.lua:62: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_stack_index = 1\n  local paren_level_index = 1\n  local paren_stack_string\
    \ = paren_string\n  local paren_level_string = paren_string\n  local paren_stack_start\
    \ = paren_stack_index\n  local paren_level_start = paren_level_index\n  local\
    \ paren_stack_end\n  local paren_level_end\n  while paren_stack_index <= paren_stack_size\
    \ do\n    paren_stack_string = paren_stack_string:sub(1, paren_stack_index - 1)\n\
    \    paren_level_string = paren_level_string:sub(1, paren_level_index - 1)\n \
    \   paren_stack_end = string.find(paren_stack_string, '()')\n    paren_level_end\
    \ = string.find(paren_level_string, '()')\n    if paren_stack_end ~= nil then\n\
    \      paren_stack[paren_stack_index] = paren_stack_string:sub(1, paren_stack_end\
    \ - 1)\n      paren_level[paren_level_index] = paren_level_string:sub(1, paren_level_end\
    \ - 1)\n      paren_stack_index = paren_stack_end + 1\n      paren_level_index\
    \ = paren_level_end + 1\n    end\n    paren_stack_index = paren_stack_index +\
    \ 1\n    paren_level_index = paren_level_index + 1\n  end\n  while level <= max_level\
    \ do\n    local paren_stack_start = paren_stack_index\n    local paren_level_start\
    \ = paren_level_index\n    local paren_stack_end\n    local paren_level_end\n\
    \    while paren_stack_index <= paren_stack_size do\n      paren_stack_string\
    \ = paren_stack_string:sub(1, paren_stack_index - 1)\n      paren_level_string\
    \ = paren_level_string:sub(1, paren_level_index - 1)\n      paren_stack_end =\
    \ string.find(paren_stack_string, '()')\n      paren_level_end = string.find(paren_level_string,\
    \ '()')\n      if paren_stack_end ~= nil then\n        paren_stack[paren_stack_index]\
    \ = paren_stack_string:sub(1, paren_stack_end - 1)\n        paren_level[paren_level_index]\
    \ = paren_level_string:sub(1, paren_level_end - 1)\n        paren_stack_index\
    \ = paren_stack_end + 1\n        paren_level_index = paren_level_end + 1\n   \
    \   end\n      paren_stack_index = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_dq543d8.lua:52: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = 1\n    while paren_stack[level] ~= nil do\n\
    \      level = level + 1\n    end\n    paren_stack[level] = paren\n    max_level\
    \ = level\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsonud_jz.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpsonud_jz.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    paren_stack[level] = paren\n\
    \    if level > max_level then\n      max_level = level\n    end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r_2gzjp.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp9r_2gzjp.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local level = #paren_stack\n    if paren == '(' and level\
    \ > max_level then\n      max_level = level\n    end\n    table.insert(paren_stack,\
    \ paren)\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnzfu7mm.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpfnzfu7mm.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nestings = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nestings_string = ''\n  local paren_levels_index = 0\n \
    \ local paren_nestings_index = 0\n  local paren_levels_index2 = 0\n  local paren_nestings_index2\
    \ = 0\n  local paren_levels_index3 = 0\n  local paren_nestings_index3 = 0\n  local\
    \ paren_levels_index4 = 0\n  local paren_nestings_index4 = 0\n  local paren_levels_index5\
    \ = 0\n  local paren_nestings_index5 = 0\n  local paren_levels_index6 = 0\n  local\
    \ paren_nestings_index6 = 0\n  local paren_levels_index7 = 0\n  local paren_nestings_index7\
    \ = 0\n  local paren_levels_index8 = 0\n  local paren_nestings_index8 = 0\n  local\
    \ paren_levels_index9 = 0\n  local paren_nestings_index9 = 0\n  local paren_levels_index10\
    \ = 0\n  local paren_nestings_index10 = 0\n  local paren_levels_index11 = 0\n\
    \  local paren_nestings_index11 = 0\n  local paren_levels_index12 = 0\n  local\
    \ paren_nestings_index12 = 0\n  local paren_levels_index13 = 0\n  local paren_nestings_index13\
    \ = 0\n  local paren_levels_index14 = 0\n  local paren_nestings_index14 = 0\n\
    \  local paren_levels_index15 = 0\n  local paren_nestings_index15 = 0\n  local\
    \ paren_levels_index16 = 0\n  local paren_nestings_index16 = 0\n  local paren_levels_index17\
    \ = 0\n  local paren_nestings_index17 = 0\n  local paren_levels_index18 = 0\n\
    \  local paren_nestings_index18 = 0\n  local paren_levels_index19 = 0\n  local\
    \ paren_nestings_index19 = 0\n  local paren_levels_index20 = 0\n  local paren_nestings_index20\
    \ = 0\n  local paren_levels_index21 = 0\n  local paren_nestings_index21 = 0\n\
    \  local paren_levels_index22 = 0\n  local paren_nestings_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp39it9z4a.lua:67: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_levels = {}\n  local paren_group_levels_index = 1\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n  local paren_group_levels_index = 0\n\
    \  local paren_group_levels_indexs = {}\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph7q5l7kf.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrmd66ys.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  local level = 0\n  local paren_count\
    \ = 0\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_count\
    \ = paren_count + 1\n    local paren_level = level\n    if paren == '(' or paren\
    \ == '[' then\n      paren_stack[paren_level] = true\n      level = paren_level\
    \ + 1\n    elseif paren == ')' or paren == ']' then\n      level = paren_level\
    \ - 1\n      if level == 0 then\n        level = max_level\n      end\n      if\
    \ paren_stack[level] then\n        level = level - 1\n      else\n        max_level\
    \ = level\n      end\n    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmy9v0ymh.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpmy9v0ymh.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = paren_level + 1\n    local paren_max_level\
    \ = paren_max_level + 1\n    local paren_max_level_stack[paren_level] = paren_max_level_stack[paren_level]\
    \ or 0\n    if paren_level > paren_max_level_stack[paren_level] then\n      paren_max_level_stack[paren_level]\
    \ = paren_level\n    end\n    paren_stack[paren_level] = paren\n  end\n  local\
    \ paren_max_level_stack[paren_max_level] = paren_max_level\n  local paren_max_level_stack[paren_max_level\
    \ + 1] = paren_max_level\n  local paren_max_level_stack[paren_max_level + 2] =\
    \ paren_max_level\n  local paren_max_level_stack[paren_max_level + 3] = paren_max_level\n\
    \  local paren_max_level_stack[paren_max_level + 4] = paren_max_level\n  local\
    \ paren_max_level_stack[paren_max_level + 5] = paren_max_level\n  local paren_max_level_stack[paren_max_level\
    \ + 6] = paren_max_level\n  local paren_max_level_stack[paren_max_level + 7] =\
    \ paren_max_level\n  local paren_max_level_stack[paren_max_level + 8] = paren_max_level\n\
    \  local paren_max_level_stack[paren_max_level + 9] = paren_max_level\n  local\
    \ paren_max_level_stack[paren_max_level + 10] = paren_max_level\n  local paren_max_level_stack[paren_max_level\
    \ + 11] = paren_max_level\n  local paren_max_level_stack[paren_max_level + 12]\
    \ = paren_max_level\n  local paren_max_level_stack[paren_max_level + 13] = paren_max_level\n\
    \  local paren_max_level_stack[paren_max_level + 14] = paren_max_level\n  local\
    \ paren_max_level_stack[paren_max_level + 15] = paren_max_level\n  local paren_max_level_stack[paren_max_level\
    \ + 16] = paren_max_level\n  local paren_max_level_stack[paren_max_level + 17]\
    \ = paren_max_level\n  local paren_max_level_stack[paren_max_level + 18\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp09s74oqp.lua:14: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_groups = { }\n  local paren_group_index = 1\n  local paren_group_string\
    \ = ''\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_nesting_level = 0\n  local paren_group_nesting_string = ''\n  local\
    \ paren_group_nesting_level_string = ''\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_level_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_level_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\n  local paren_group_nesting_string_index\
    \ = 1\n  local paren_group_nesting_string_index = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzkd2_xjl.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_levels = {}\n  local paren_group_level = 0\n  local\
    \ paren_group_groups = {}\n  local paren_group_group = 0\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_levels = {}\n  local paren_group_group_level\
    \ = 0\n  local paren_group_group_groups = {}\n  local paren_group_group_group\
    \ = 0\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_level = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvfwxc5b0.lua:71: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_nesting_level = 0\n  local paren_nesting_level_max = 0\n  local\
    \ paren_nesting_level_max_index = 0\n  local paren_nesting_level_max_index2 =\
    \ 0\n  local paren_nesting_level_max_index3 = 0\n  local paren_nesting_level_max_index4\
    \ = 0\n  local paren_nesting_level_max_index5 = 0\n  local paren_nesting_level_max_index6\
    \ = 0\n  local paren_nesting_level_max_index7 = 0\n  local paren_nesting_level_max_index8\
    \ = 0\n  local paren_nesting_level_max_index9 = 0\n  local paren_nesting_level_max_index10\
    \ = 0\n  local paren_nesting_level_max_index11 = 0\n  local paren_nesting_level_max_index12\
    \ = 0\n  local paren_nesting_level_max_index13 = 0\n  local paren_nesting_level_max_index14\
    \ = 0\n  local paren_nesting_level_max_index15 = 0\n  local paren_nesting_level_max_index16\
    \ = 0\n  local paren_nesting_level_max_index17 = 0\n  local paren_nesting_level_max_index18\
    \ = 0\n  local paren_nesting_level_max_index19 = 0\n  local paren_nesting_level_max_index20\
    \ = 0\n  local paren_nesting_level_max_index21 = 0\n  local paren_nesting_level_max_index22\
    \ = 0\n  local paren_nesting_level_max_index23 = 0\n  local paren_nesting_level_max_index24\
    \ = 0\n  local paren_nesting_level_max_index25 = 0\n  local paren_nesting_level_max_index26\
    \ = 0\n  local paren_nesting_level_max_index27 = 0\n  local paren_nesting_level_max_index28\
    \ = 0\n  local paren_nesting_level_max_index29 = 0\n  local paren_nesting_level_max_index30\
    \ = 0\n  local paren_nesting_level_max_index31 = 0\n  local paren_nesting_level_max_index32\
    \ = 0\n  local paren_nesting_level_max_index33 = 0\n  local paren_nesting_level_max_index34\
    \ = 0\n  local paren_nesting_level_max_index35 = 0\n  local paren_nesting_level_max_index36\
    \ = 0\n  local paren_nesting_level_max_index37 = 0\n  local paren_nesting_level_max_index38\
    \ = 0\n  local paren_nesting_level_max_index39 = 0\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa6pth_r1.lua:61: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_paren_string = ''\n  for paren_group\
    \ in string.gmatch(paren_string, '%[(%a*)%]') do\n    local level_of_nesting =\
    \ #paren_group\n    if level_of_nesting > max_level then\n      max_level = level_of_nesting\n\
    \      max_level_paren_string = paren_group\n    end\n  end\n  return max_level,\
    \ max_level_paren_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper9n_fcz.lua:22:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmper9n_fcz.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, \"%[(%a)]\") do\n    level = level + 1\n    paren_stack[#paren_stack+1]\
    \ = paren\n    if paren == \"(\" then\n      if level > max_level then\n     \
    \   max_level = level\n      end\n    elseif paren == \")\" then\n      if level\
    \ < max_level then\n        max_level = level\n      end\n    end\n  end\n  return\
    \ max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4ch0opk.lua:29:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpx4ch0opk.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrmd66ys.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  local level = 0\n  local paren_count\
    \ = 0\n  for paren in string.gmatch(paren_string, '%[()%]') do\n    paren_count\
    \ = paren_count + 1\n    if paren == '(' and paren_stack[level] == nil then\n\
    \      level = level + 1\n      paren_stack[level] = paren_count\n    elseif paren\
    \ == ')' and paren_stack[level] ~= nil then\n      level = level - 1\n      paren_count\
    \ = paren_stack[level]\n    end\n    if level > max_level then\n      max_level\
    \ = level\n    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpenn9ug75.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpenn9ug75.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_char = ''\n  local paren_group_chars = {}\n  local\
    \ paren_group_char_index = 0\n  local paren_group_char_length = 0\n  local paren_group_char_lengths\
    \ = {}\n  local paren_group_char_length_index = 0\n  local paren_group_char_length_indexes\
    \ = {}\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_index = 0\n  local paren_group_char_length\
    \ = 0\n  local paren_group_char_length_indexes = {}\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_index\
    \ = 0\n  local paren_group_char_length = 0\n  local paren_group_char_length_indexes\
    \ = {}\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_index = 0\n  local paren_group_char_length\
    \ = 0\n  local paren_group_char_length_indexes = {}\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_index\
    \ = 0\n  local paren_group_char_length = 0\n  local paren_group_char_length_indexes\
    \ = {}\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_index = 0\n  local paren_group_char_length\
    \ = 0\n  local paren_group_char_length_indexes = {}\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_index\
    \ = 0\n  local paren_group_char_length = 0\n  local paren_group_char_length_indexes\
    \ = {}\n  local paren_group_char_length_indexes_index = 0\n  local paren_group_char_length_indexes_index\
    \ = 0\n  local paren_group_char_length_index = 0\n  local paren\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkh4cexf7.lua:68: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nest\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4hmhl84a.lua:54: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  local level = 0\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)(%a)]+') do\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren_level == nil then\n      paren_stack[#paren_stack] = level\n   \
    \   level = level + 1\n    end\n    if paren == '(' then\n      level = paren_level\
    \ + 1\n    elseif paren == ')' then\n      level = paren_level - 1\n    end\n\
    \    max_level = math.max(max_level, level)\n  end\n  local result = {}\n  for\
    \ i = 1, max_level do\n    table.insert(result, level)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplssg25t4.lua:33:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmplssg25t4.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_level = {}\n  local\
    \ paren_level_count = {}\n  local paren_level_max = {}\n  local paren_level_max_count\
    \ = {}\n  local paren_level_max_index = {}\n  local paren_level_max_index[1] =\
    \ 1\n  local paren_level_max_index[2] = 2\n  local paren_level_max_index[3] =\
    \ 3\n  local paren_level_max_index[4] = 4\n  local paren_level_max_index[5] =\
    \ 5\n  local paren_level_max_index[6] = 6\n  local paren_level_max_index[7] =\
    \ 7\n  local paren_level_max_index[8] = 8\n  local paren_level_max_index[9] =\
    \ 9\n  local paren_level_max_index[10] = 10\n  local paren_level_max_index[11]\
    \ = 11\n  local paren_level_max_index[12] = 12\n  local paren_level_max_index[13]\
    \ = 13\n  local paren_level_max_index[14] = 14\n  local paren_level_max_index[15]\
    \ = 15\n  local paren_level_max_index[16] = 16\n  local paren_level_max_index[17]\
    \ = 17\n  local paren_level_max_index[18] = 18\n  local paren_level_max_index[19]\
    \ = 19\n  local paren_level_max_index[20] = 20\n  local paren_level_max_index[21]\
    \ = 21\n  local paren_level_max_index[22] = 22\n  local paren_level_max_index[23]\
    \ = 23\n  local paren_level_max_index[24] = 24\n  local paren_level_max_index[25]\
    \ = 25\n  local paren_level_max_index[26] = 26\n  local paren_level_max_index[27]\
    \ = 27\n  local paren_level_max_index[28] = 28\n  local paren_level_max_index[29]\
    \ = 29\n  local paren_level_max_index[30] = 30\n  local paren_level_max_index[31]\
    \ = 31\n  local paren_level_max_index[32] = 32\n  local paren_level_max_index[33]\
    \ = 33\n  local paren_level_max_index[34] = 34\n  local paren_level_max_index[35]\
    \ = 35\n  local paren_level_max_index[36] = 36\n  local paren_level_max_index[37]\
    \ = 37\n  local paren_level_max_index[38] = 38\n  local paren_level_max_index[39]\
    \ = 39\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1a5sm_6y.lua:14: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local paren_level = 0\n  local paren_nesting =\
    \ 0\n  for paren in string.gmatch(paren_string, \"%[(%a*)%]\") do\n    if paren\
    \ == \"(\" then\n      paren_nesting = paren_nesting + 1\n    elseif paren ==\
    \ \")\" then\n      paren_nesting = paren_nesting - 1\n    end\n    if paren_nesting\
    \ == 0 then\n      paren_level = paren_level + 1\n      parsed_parens[#parsed_parens+1]\
    \ = paren_level\n    end\n  end\n  return parsed_parens\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjn_b8bh.lua:27:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpsjn_b8bh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_group = 0\n  local paren_group_level\
    \ = 0\n  local paren_group_nesting = 0\n  local paren_group_levels = {}\n  local\
    \ paren_group_nestings = {}\n  local paren_group_level = 0\n  local paren_group_nesting\
    \ = 0\n  local paren_group_levels = {}\n  local paren_group_nestings = {}\n  local\
    \ paren_group_level = 0\n  local paren_group_nesting = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_nestings = {}\n  local paren_group_level = 0\n  local\
    \ paren_group_nesting = 0\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_levels = {}\n  local paren_group_nestings = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_nesting = 0\n  local paren_group_levels = {}\n  local\
    \ paren_group_nestings = {}\n  local paren_group_level = 0\n  local paren_group_nesting\
    \ = 0\n  local paren_group_levels = {}\n  local paren_group_nestings = {}\n  local\
    \ paren_group_level = 0\n  local paren_group_nesting = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_nestings = {}\n  local paren_group_level = 0\n  local\
    \ paren_group_nesting = 0\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n  local paren_group_level = 0\n  local paren_group_nesting = 0\n  local\
    \ paren_group_levels = {}\n  local paren_group_nestings = {}\n  local paren_group_level\
    \ = 0\n  local paren_group_nesting = 0\n  local paren_group_levels = {}\n  local\
    \ paren_group_nestings = {}\n  local paren_group_level = 0\n  local paren_group_nesting\
    \ = 0\n  local paren_group_levels = {}\n  local paren_group_nestings = {}\n  local\
    \ paren_group_level = 0\n  local paren_group_nesting = 0\n  local paren_group_levels\
    \ = {}\n  local paren_group_nestings = {}\n  local paren_group_level = 0\n  local\
    \ paren_group_nesting = 0\n  local paren_group_levels = {}\n  local paren_group_nestings\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgni1x2zl.lua:78: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = paren_string:gsub('(%w+)', ' '):gsub('(%w+) ', ' '):gsub('(%w+)(\
    \ +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)( +%w+)',\
    \ ' '):gsub('(%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)',\
    \ ' '):gsub('(%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('(%w+)( +%w+)( +%w+)(\
    \ +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)( +%w+)', ' '):gsub('\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprqce8r78.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_level_count = {}\n  local paren_group_level_max =\
    \ {}\n  local paren_group_level_max_count = {}\n  local paren_group_level_max_count_index\
    \ = {}\n  local paren_group_level_max_count_index2 = {}\n  local paren_group_level_max_count_index3\
    \ = {}\n  local paren_group_level_max_count_index4 = {}\n  local paren_group_level_max_count_index5\
    \ = {}\n  local paren_group_level_max_count_index6 = {}\n  local paren_group_level_max_count_index7\
    \ = {}\n  local paren_group_level_max_count_index8 = {}\n  local paren_group_level_max_count_index9\
    \ = {}\n  local paren_group_level_max_count_index10 = {}\n  local paren_group_level_max_count_index11\
    \ = {}\n  local paren_group_level_max_count_index12 = {}\n  local paren_group_level_max_count_index13\
    \ = {}\n  local paren_group_level_max_count_index14 = {}\n  local paren_group_level_max_count_index15\
    \ = {}\n  local paren_group_level_max_count_index16 = {}\n  local paren_group_level_max_count_index17\
    \ = {}\n  local paren_group_level_max_count_index18 = {}\n  local paren_group_level_max_count_index19\
    \ = {}\n  local paren_group_level_max_count_index20 = {}\n  local paren_group_level_max_count_index21\
    \ = {}\n  local paren_group_level_max_count_index22 = {}\n  local paren_group_level_max_count_index23\
    \ = {}\n  local paren_group_level_max_count_index24 = {}\n  local paren_group_level_max_count_index25\
    \ = {}\n  local paren_group_level_max_count_index26 = {}\n  local paren_group_level_max_count_index27\
    \ = {}\n  local paren_group_level_max_count_index28 = {}\n  local paren_group_level_max_count_index29\
    \ = {}\n  local paren_group_level_max_count_index30 = {}\n  local paren_group_level_max_count_index31\
    \ = {}\n  local paren_group_level_max_count_index32 = {}\n  local paren_group_level_max_count_index33\
    \ = {}\n  local paren_group_level_max_count_index34 = {}\n  local paren_group_level_max_count_index35\
    \ = {}\n  local paren_group_level_max_count_index36 = {}\n  local paren_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbdl07mef.lua:63: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index2 = {}\n  local paren_levels_stack_index3 = {}\n\
    \  local paren_levels_stack_index4 = {}\n  local paren_levels_stack_index5 = {}\n\
    \  local paren_levels_stack_index6 = {}\n  local paren_levels_stack_index7 = {}\n\
    \  local paren_levels_stack_index8 = {}\n  local paren_levels_stack_index9 = {}\n\
    \  local paren_levels_stack_index10 = {}\n  local paren_levels_stack_index11 =\
    \ {}\n  local paren_levels_stack_index12 = {}\n  local paren_levels_stack_index13\
    \ = {}\n  local paren_levels_stack_index14 = {}\n  local paren_levels_stack_index15\
    \ = {}\n  local paren_levels_stack_index16 = {}\n  local paren_levels_stack_index17\
    \ = {}\n  local paren_levels_stack_index18 = {}\n  local paren_levels_stack_index19\
    \ = {}\n  local paren_levels_stack_index20 = {}\n  local paren_levels_stack_index21\
    \ = {}\n  local paren_levels_stack_index22 = {}\n  local paren_levels_stack_index23\
    \ = {}\n  local paren_levels_stack_index24 = {}\n  local paren_levels_stack_index25\
    \ = {}\n  local paren_levels_stack_index26 = {}\n  local paren_levels_stack_index27\
    \ = {}\n  local paren_levels_stack_index28 = {}\n  local paren_levels_stack_index29\
    \ = {}\n  local paren_levels_stack_index30 = {}\n  local paren_levels_stack_index31\
    \ = {}\n  local paren_levels_stack_index32 = {}\n  local paren_levels_stack_index33\
    \ = {}\n  local paren_levels_stack_index34 = {}\n  local paren_levels_stack_index35\
    \ = {}\n  local paren_levels_stack_index36 = {}\n  local paren_levels_stack_index37\
    \ = {}\n  local paren_levels_stack_index38 = {}\n  local paren_levels_stack_index39\
    \ = {}\n  local paren_levels_stack_index40 = {}\n  local paren_levels_stack_index41\
    \ = {}\n  local paren_levels_stack_index42 = {}\n  local paren_levels_stack_index43\
    \ = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcfumocxj.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_levels = {}\n  local paren_nesting_levels = {}\n  local paren_levels_string\
    \ = ''\n  local paren_nesting_levels_string = ''\n  local paren_levels_index =\
    \ 0\n  local paren_nesting_levels_index = 0\n  local paren_levels_index2 = 0\n\
    \  local paren_nesting_levels_index2 = 0\n  local paren_levels_index3 = 0\n  local\
    \ paren_nesting_levels_index3 = 0\n  local paren_levels_index4 = 0\n  local paren_nesting_levels_index4\
    \ = 0\n  local paren_levels_index5 = 0\n  local paren_nesting_levels_index5 =\
    \ 0\n  local paren_levels_index6 = 0\n  local paren_nesting_levels_index6 = 0\n\
    \  local paren_levels_index7 = 0\n  local paren_nesting_levels_index7 = 0\n  local\
    \ paren_levels_index8 = 0\n  local paren_nesting_levels_index8 = 0\n  local paren_levels_index9\
    \ = 0\n  local paren_nesting_levels_index9 = 0\n  local paren_levels_index10 =\
    \ 0\n  local paren_nesting_levels_index10 = 0\n  local paren_levels_index11 =\
    \ 0\n  local paren_nesting_levels_index11 = 0\n  local paren_levels_index12 =\
    \ 0\n  local paren_nesting_levels_index12 = 0\n  local paren_levels_index13 =\
    \ 0\n  local paren_nesting_levels_index13 = 0\n  local paren_levels_index14 =\
    \ 0\n  local paren_nesting_levels_index14 = 0\n  local paren_levels_index15 =\
    \ 0\n  local paren_nesting_levels_index15 = 0\n  local paren_levels_index16 =\
    \ 0\n  local paren_nesting_levels_index16 = 0\n  local paren_levels_index17 =\
    \ 0\n  local paren_nesting_levels_index17 = 0\n  local paren_levels_index18 =\
    \ 0\n  local paren_nesting_levels_index18 = 0\n  local paren_levels_index19 =\
    \ 0\n  local paren_nesting_levels_index19 = 0\n  local paren_levels_index20 =\
    \ 0\n  local paren_nesting_levels_index20 = 0\n  local paren_levels_index21 =\
    \ 0\n  local paren_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7x1mpwke.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_count\
    \ = 1\n  local paren_group_stack = {}\n  local paren_group_levels = {}\n  local\
    \ paren_group_groups = {}\n  local paren_group_group_index = 1\n  local paren_group_group_count\
    \ = 1\n  local paren_group_group_stack = {}\n  local paren_group_group_levels\
    \ = {}\n  local paren_group_group_groups = {}\n  local paren_group_group_group_index\
    \ = 1\n  local paren_group_group_group_count = 1\n  local paren_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_levels = {}\n  local paren_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_index = 1\n  local paren_group_group_group_group_count\
    \ = 1\n  local paren_group_group_group_group_stack = {}\n  local paren_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_index = 1\n  local paren_group_group_group_group_group_count\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_groups\
    \ = {}\n  local paren_group_group_group_group_group_index = 1\n  local paren_group_group_group_group_group_count\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_stack\
    \ = {}\n  local paren_group_group_group_group_levels = {}\n  local paren_group_group_group_group_groups\
    \ = {}\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9qhra_g6.lua:67: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_index = {}\n  for i, paren in ipairs(paren_string:gsub('(%b()%b()%b)',\
    \ ''):gmatch('%b()%b()%b')) do\n    local level_of_nesting = paren:gsub('%b()',\
    \ '')\n    local level_of_nesting_length = level_of_nesting:len()\n    if level_of_nesting_length\
    \ > max_level then\n      max_level = level_of_nesting_length\n      max_level_index\
    \ = i\n    end\n  end\n  return max_level, max_level_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54soo0tf.lua:9:\
    \ malformed pattern (missing arguments to '%b')\nstack traceback:\n\t/tmp/tmp54soo0tf.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp54soo0tf.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrmd66ys.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_levels = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    paren_stack[#paren_stack + 1] = paren\n    paren_level = #paren_stack\n\
    \    paren_groups[paren] = paren_level\n    paren_group_levels[paren] = paren_level\n\
    \  end\n  local max_level = 0\n  for paren in pairs(paren_stack) do\n    local\
    \ level = paren_group_levels[paren]\n    if level > max_level then\n      max_level\
    \ = level\n    end\n  end\n  local max_level_groups = {}\n  for paren in pairs(paren_stack)\
    \ do\n    local level = paren_group_levels[paren]\n    if level == max_level then\n\
    \      max_level_groups[paren] = paren\n    end\n  end\n  local max_level_group\n\
    \  for paren in pairs(max_level_groups) do\n    local paren_groups = paren_groups[paren]\n\
    \    local max_level = max_level\n    for paren_group in pairs(paren_groups) do\n\
    \      local level = paren_group_levels[paren_group]\n      if level > max_level\
    \ then\n        max_level = level\n      end\n    end\n    max_level_groups[paren]\
    \ = max_level\n  end\n  return max_level_groups\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi50u48cb.lua:49:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpi50u48cb.lua:49:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_levels = { 0 }\n  local paren_level\
    \ = 0\n  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_count\
    \ = 0\n  local paren_nesting_max = 0\n  local paren_nesting_max_level = 0\n  local\
    \ paren_nesting_max_count = 0\n  local paren_nesting_max_max = 0\n  local paren_nesting_max_max_level\
    \ = 0\n  local paren_nesting_max_max_count = 0\n  local paren_nesting_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_level = 0\n  local paren_nesting_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max = 0\n  local paren_nesting_max_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_max_count = 0\n  local paren_nesting_max_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_max_level = 0\n  local paren_nesting_max_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max_max = 0\n  local paren_nesting_max_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_max_count = 0\n  local paren_nesting_max_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_max_level = 0\n  local paren_nesting_max_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max_max = 0\n  local paren_nesting_max_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_max_count = 0\n  local paren_nesting_max_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_max_level = 0\n  local paren_nesting_max_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max_max = 0\n  local paren_nesting_max_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_max_count = 0\n  local paren_nesting_max_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_max_level = 0\n  local paren_nesting_max_max_max_max_count\
    \ = 0\n  local paren_nesting_max_max_max_max_max = 0\n  local paren_nesting_max_max_max_max_level\
    \ = 0\n  local paren_nesting_max_max_max_max_count = 0\n  local paren_nesting_max_max_max_max_max\
    \ = 0\n  local paren_nesting_max_max_max_max_level = 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp45zerdjk.lua:61: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_groups = { }\n  local paren_group_index = 1\n  local paren_group_count\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_start = paren_group_index\n\
    \  local paren_group_end\n  local paren_group_contents\n  local paren_group_contents_index\n\
    \  local paren_group_contents_count\n  local paren_group_contents_start\n  local\
    \ paren_group_contents_end\n  local paren_group_contents_contents\n  local paren_group_contents_contents_index\n\
    \  local paren_group_contents_contents_count\n  local paren_group_contents_contents_start\n\
    \  local paren_group_contents_contents_end\n  local paren_group_contents_contents_contents\n\
    \  local paren_group_contents_contents_contents_index\n  local paren_group_contents_contents_contents_count\n\
    \  local paren_group_contents_contents_contents_start\n  local paren_group_contents_contents_contents_end\n\
    \  local paren_group_contents_contents_contents_contents\n  local paren_group_contents_contents_contents_contents_index\n\
    \  local paren_group_contents_contents_contents_contents_count\n  local paren_group_contents_contents_contents_contents_start\n\
    \  local paren_group_contents_contents_contents_contents_end\n  local paren_group_contents_contents_contents_contents_contents\n\
    \  local paren_group_contents_contents_contents_contents_contents_index\n  local\
    \ paren_group_contents_contents_contents_contents_contents_count\n  local paren_group_contents_contents_contents_contents_contents_start\n\
    \  local paren_group_contents_contents_contents_contents_contents_end\n  local\
    \ paren_group_contents_contents_contents_contents_contents_contents\n  local paren_group_contents_contents_contents_contents_contents_contents_index\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_count\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_start\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_end\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents\n\
    \  local paren_group_contents_contents_contents_contents_contents_contents_contents_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0o0c6bzx.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_level_string = ''\n  for paren_char\
    \ in paren_string:gmatch('%[(%a)(%a)(%a)]') do\n    local paren_char = paren_char:sub(1,\
    \ 1)\n    local paren_level = paren_levels[paren_char]\n    local paren_nesting\
    \ = paren_nesting + 1\n    local paren_level_string = paren_level_string .. paren_char\n\
    \    paren_levels[paren_char] = paren_level + 1\n    if paren_nesting > paren_level\
    \ then\n      paren_stack[paren_level] = paren_level_string\n    end\n  end\n\
    \  return paren_stack\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnmi0nu_4.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpnmi0nu_4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nest\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwtjetwsc.lua:54: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local max_level_group = 0\n  local groups = {}\n  for\
    \ paren in string.gmatch(paren_string, \"%[(%a)]+\") do\n    local level_of_nesting\
    \ = paren:gsub(\"%[(%a)]+\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting,\
    \ \"%a\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"()\", \"\")\n    local level_of_nesting_groups = string.gsub(level_of_nesting_groups,\
    \ \"\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj_d1xhtu.lua:34: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n \
    \ local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local\
    \ paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n \
    \ local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local\
    \ paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n \
    \ local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local\
    \ paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n \
    \ local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local\
    \ paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n \
    \ local paren_nesting_level = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level\
    \ = 0\n  local paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local\
    \ paren_nesting_levels = {}\n  local paren_nesting_level = 0\n  local paren_nesting_levels\
    \ = {}\n  local paren_nesting_level = 0\n  local paren_nesting_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8ui6l5xm.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    level = level + 1\n    if paren == '(' and level > max_level\
    \ then\n      max_level = level\n    end\n  end\n  local nested_parens = {}\n\
    \  for i = 1, #paren_stack do\n    local paren = paren_stack[i]\n    if paren\
    \ ~= '(' and paren ~= ')' then\n      table.insert(nested_parens, max_level)\n\
    \    end\n  end\n  return table.max(nested_parens)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5o4oozf.lua:24:\
    \ attempt to call a nil value (field 'max')\nstack traceback:\n\t/tmp/tmpf5o4oozf.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpf5o4oozf.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_group = 1\n  local paren_group_count = 0\n  local paren_group_max = 0\n\
    \  local paren_group_max_index = 0\n  local paren_group_max_count = 0\n  local\
    \ paren_group_max_string = ''\n  local paren_group_max_string_index = 0\n  local\
    \ paren_group_max_string_count = 0\n  local paren_group_max_string_len = 0\n \
    \ local paren_group_max_string_len_index = 0\n  local paren_group_max_string_len_count\
    \ = 0\n  local paren_group_max_string_len_string = ''\n  local paren_group_max_string_len_string_index\
    \ = 0\n  local paren_group_max_string_len_string_count = 0\n  local paren_group_max_string_len_string_len\
    \ = 0\n  local paren_group_max_string_len_string_len_index = 0\n  local paren_group_max_string_len_string_len_count\
    \ = 0\n  local paren_group_max_string_len_string_len_string = ''\n  local paren_group_max_string_len_string_len_string_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_len_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_len_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_len_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_len_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_len_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_len_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_len_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_len_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  local paren_group_max_string_len_string_len_string_len_index\
    \ = 0\n  local paren_group_max_string_len_string_len_string_len_count = 0\n  local\
    \ paren_group_max_string_len_string_len_string_len = 0\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpri97rsub.lua:59: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_count = 0\n  local paren_level\
    \ = {}\n  local paren_stack = {}\n  local paren_stack_index = 0\n  local paren_stack_size\
    \ = #paren_stack\n  local paren_stack_string = ''\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_size = 0\n  local paren_stack_string_reversed\
    \ = {}\n  local paren_stack_string_reversed_index = 0\n  local paren_stack_string_reversed_size\
    \ = 0\n  local paren_stack_string_reversed_string = ''\n  local paren_stack_string_reversed_string_index\
    \ = 0\n  local paren_stack_string_reversed_string_size = 0\n  local paren_stack_string_reversed_string_reversed\
    \ = {}\n  local paren_stack_string_reversed_string_reversed_index = 0\n  local\
    \ paren_stack_string_reversed_string_reversed_size = 0\n  local paren_stack_string_reversed_string_reversed_string\
    \ = ''\n  local paren_stack_string_reversed_string_reversed_string_index = 0\n\
    \  local paren_stack_string_reversed_string_reversed_string_size = 0\n  local\
    \ paren_stack_string_reversed_string_reversed_string_reversed = {}\n  local paren_stack_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_size\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string\
    \ = ''\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_index\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_size\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed\
    \ = {}\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed_index\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed_size\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed_string\
    \ = ''\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed_string_index\
    \ = 0\n  local paren_stack_string_reversed_string_reversed_string_reversed_string_reversed_string_size\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2pebrzf_.lua:51: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[()%]') do\n    local level = #paren_stack\n    if paren == '(' and level\
    \ == 0 then\n      paren_stack = paren_stack + 1\n    elseif paren == ')' and\
    \ level > 0 then\n      paren_stack = paren_stack - 1\n    elseif paren == '('\
    \ and level > 0 then\n      paren_stack = paren_stack + 1\n    elseif paren ==\
    \ ')' and level == 0 then\n      paren_stack = paren_stack - 1\n    end\n    if\
    \ level > max_level then\n      max_level = level\n    end\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptb87jzy4.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmptb87jzy4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_count\
    \ = 0\n  local paren_nesting_count_max = 0\n  local paren_nesting_count_max_index\
    \ = 0\n  local paren_nesting_count_max2 = 0\n  local paren_nesting_count_max2_index\
    \ = 0\n  local paren_nesting_count_max3 = 0\n  local paren_nesting_count_max3_index\
    \ = 0\n  local paren_nesting_count_max4 = 0\n  local paren_nesting_count_max4_index\
    \ = 0\n  local paren_nesting_count_max5 = 0\n  local paren_nesting_count_max5_index\
    \ = 0\n  local paren_nesting_count_max6 = 0\n  local paren_nesting_count_max6_index\
    \ = 0\n  local paren_nesting_count_max7 = 0\n  local paren_nesting_count_max7_index\
    \ = 0\n  local paren_nesting_count_max8 = 0\n  local paren_nesting_count_max8_index\
    \ = 0\n  local paren_nesting_count_max9 = 0\n  local paren_nesting_count_max9_index\
    \ = 0\n  local paren_nesting_count_max10 = 0\n  local paren_nesting_count_max10_index\
    \ = 0\n  local paren_nesting_count_max11 = 0\n  local paren_nesting_count_max11_index\
    \ = 0\n  local paren_nesting_count_max12 = 0\n  local paren_nesting_count_max12_index\
    \ = 0\n  local paren_nesting_count_max13 = 0\n  local paren_nesting_count_max13_index\
    \ = 0\n  local paren_nesting_count_max14 = 0\n  local paren_nesting_count_max14_index\
    \ = 0\n  local paren_nesting_count_max15 = 0\n  local paren_nesting_count_max15_index\
    \ = 0\n  local paren_nesting_count_max16 = 0\n  local paren_nesting_count_max16_index\
    \ = 0\n  local paren_nesting_count_max17 = 0\n  local paren_nesting_count_max17_index\
    \ = 0\n  local paren_nesting_count_max18 = 0\n  local paren_nesting_count_max18_index\
    \ = 0\n  local paren_nesting_count_max19 = 0\n  local paren_nesting_count_max19_index\
    \ = 0\n  local paren_nesting_count_max20 = 0\n  local paren_nesting_count_max20_index\
    \ = 0\n  local paren_nesting_count_max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi0dldghb.lua:63: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local paren_stack = {}\n  for paren in string.gmatch(paren_string,\
    \ \"%[(%a*)%]\") do\n    local level = 1\n    local paren_level = 1\n    for c\
    \ in paren do\n      if c == '(' or c == '[' then\n        paren_level = paren_level\
    \ + 1\n      elseif c == ')' or c == ']' then\n        paren_level = paren_level\
    \ - 1\n      elseif paren_level == 0 then\n        level = level + 1\n      end\n\
    \    end\n    if level > max_level then\n      max_level = level\n    end\n  \
    \  table.insert(paren_stack, paren_level)\n  end\n  return max_level\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55ro59s9.lua:32:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmp55ro59s9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local stack = {}\n  local open_brackets\
    \ = 0\n  local close_brackets = 0\n  local paren_levels = {}\n  local paren_levels_map\
    \ = {}\n  local paren_levels_map_keys = {}\n  local paren_levels_map_values =\
    \ {}\n  local paren_levels_map_values_map = {}\n  local paren_levels_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values = {}\n  local paren_levels_map_values_map_values_map\
    \ = {}\n  local paren_levels_map_values_map_values_map_keys = {}\n  local paren_levels_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map = {}\n  local\
    \ paren_levels_map_values_map_values_map_values_map_keys = {}\n  local paren_levels_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map =\
    \ {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_keys\
    \ = {}\n  local paren_levels_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values_map_values\
    \ = {}\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8zvuvu4a.lua:50: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = #paren_level\n\
    \  local paren_level_index = 1\n  local paren_stack_index = 1\n  local paren_level_string\
    \ = ''\n  local paren_stack_string = ''\n  local paren_level_char\n  local paren_stack_char\n\
    \  local paren_level_char_index = 1\n  local paren_stack_char_index = 1\n  local\
    \ paren_level_char_length\n  local paren_stack_char_length\n  local paren_level_char_length_index\n\
    \  local paren_stack_char_length_index\n  local paren_level_char_length_string\n\
    \  local paren_stack_char_length_string\n  local paren_level_char_string\n  local\
    \ paren_stack_char_string\n  local paren_level_char_index\n  local paren_stack_char_index\n\
    \  local paren_level_char_length\n  local paren_stack_char_length\n  local paren_level_char_length_index\n\
    \  local paren_stack_char_length_index\n  local paren_level_char_length_string\n\
    \  local paren_stack_char_length_string\n  local paren_level_char_string\n  local\
    \ paren_stack_char_string\n  local paren_level_char_index\n  local paren_stack_char_index\n\
    \  local paren_level_char_length\n  local paren_stack_char_length\n  local paren_level_char_length_index\n\
    \  local paren_stack_char_length_index\n  local paren_level_char_length_string\n\
    \  local paren_stack_char_length_string\n  local paren_level_char_string\n  local\
    \ paren_stack_char_string\n  local paren_level_char_index\n  local paren_stack_char_index\n\
    \  local paren_level_char_length\n  local paren_stack_char_length\n  local paren_level_char_length_index\n\
    \  local paren_stack_char_length_index\n  local paren_level_char_length_string\n\
    \  local paren_stack_char_length_string\n  local paren_level_char_string\n  local\
    \ paren_stack_char_string\n  local paren_level_char_index\n  local paren_stack_char_index\n\
    \  local paren_level_char_length\n  local paren_stack_char_length\n  local paren_level_char_length_index\n\
    \  local paren_stack_char_length_index\n  local paren_level_char_length_string\n\
    \  local paren_stack_char_length_string\n  local paren_level_char_string\n  local\
    \ paren_stack_char\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp15mlb_fj.lua:78: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_groups = { }\n  local paren_group_level = 0\n  local paren_group_count\
    \ = 0\n  local paren_group_groups = { }\n  local paren_group_group_level = 0\n\
    \  local paren_group_group_count = 0\n  local paren_group_group_groups = { }\n\
    \  local paren_group_group_group_level = 0\n  local paren_group_group_group_count\
    \ = 0\n  local paren_group_group_group_groups = { }\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_groups\
    \ = { }\n  local paren_group_group_group_group_group_level = 0\n  local paren_group_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_group_groups = { }\n  local paren_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_count = 0\n  local paren_group_group_group_group_group_group_groups\
    \ = { }\n  local paren_group_group_group_group_group_group_group_level = 0\n \
    \ local paren_group_group_group_group_group_group_group_count = 0\n  local paren_group_group_group_group_group_group_group_groups\
    \ = { }\n  local paren_group_group_group_group_group_group_group_group_level =\
    \ 0\n  local paren_group_group_group_group_group_group_group_group_count = 0\n\
    \  local paren_group_group_group_group_group_group_group_group_groups = { }\n\
    \  local paren_group_group_group_group_group_group_group_group_group_level = 0\n\
    \  local paren_group_group_group_group_group_group_group_group_group_count = 0\n\
    \  local paren_group_group_group_group_group_group_group_group_group_groups =\
    \ { }\n  local paren_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_group_group_group_group_group_group_groups\
    \ = { }\n  local paren_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_group_group_group_group_group_group_group_groups\
    \ = { }\n  local paren_group_group_group_group_group_group_group_group_group_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group_group_group_group_group_group_group_group_group_count\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppid39jqj.lua:56: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_count\
    \ = 1\n  local paren_group_level = 1\n  local paren_group_stack = {}\n  local\
    \ paren_group_levels = {}\n  local paren_group_groups = {}\n  local paren_group_group_index\
    \ = 1\n  local paren_group_group_count = 1\n  local paren_group_group_level =\
    \ 1\n  local paren_group_group_stack = {}\n  local paren_group_group_levels =\
    \ {}\n  local paren_group_group_groups = {}\n  local paren_group_group_group_index\
    \ = 1\n  local paren_group_group_group_count = 1\n  local paren_group_group_group_level\
    \ = 1\n  local paren_group_group_group_stack = {}\n  local paren_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_groups = {}\n  local paren_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_count = 1\n  local paren_group_group_group_group_level\
    \ = 1\n  local paren_group_group_group_group_stack = {}\n  local paren_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_level\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_level\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_group_count = 1\n  local paren_group_group_group_group_group_level\
    \ = 1\n  local paren_group_group_group_group_group_stack = {}\n  local paren_group_group_group_group_group_levels\
    \ = {}\n  local paren_group_group_group_group_group_groups = {}\n  local paren_group_group_group_group_group_group_index\
    \ = 1\n  local paren_group_group_group_group_group_group_count = 1\n  local paren_group_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz86sgan4.lua:66: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_max_level\
    \ = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_max_level_stack_index44\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3re2rer3.lua:64: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnn221o7k.lua:82: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_groups = { }\n  local paren_group_index = 0\n  local paren_group_count\
    \ = 0\n  local paren_group_level = 0\n  local paren_group_start = 0\n  local paren_group_end\
    \ = 0\n  local paren_group_contents = { }\n  local paren_group_contents_index\
    \ = 0\n  local paren_group_contents_count = 0\n  local paren_group_contents_start\
    \ = 0\n  local paren_group_contents_end = 0\n  local paren_group_contents_contents\
    \ = { }\n  local paren_group_contents_contents_index = 0\n  local paren_group_contents_contents_count\
    \ = 0\n  local paren_group_contents_contents_start = 0\n  local paren_group_contents_contents_end\
    \ = 0\n  local paren_group_contents_contents_contents = { }\n  local paren_group_contents_contents_contents_index\
    \ = 0\n  local paren_group_contents_contents_contents_count = 0\n  local paren_group_contents_contents_contents_start\
    \ = 0\n  local paren_group_contents_contents_contents_end = 0\n  local paren_group_contents_contents_contents_contents\
    \ = { }\n  local paren_group_contents_contents_contents_contents_index = 0\n \
    \ local paren_group_contents_contents_contents_contents_count = 0\n  local paren_group_contents_contents_contents_contents_start\
    \ = 0\n  local paren_group_contents_contents_contents_contents_end = 0\n  local\
    \ paren_group_contents_contents_contents_contents_contents = { }\n  local paren_group_contents_contents_contents_contents_contents_index\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_count\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_start\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_end =\
    \ 0\n  local paren_group_contents_contents_contents_contents_contents_contents\
    \ = { }\n  local paren_group_contents_contents_contents_contents_contents_contents_index\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_contents_count\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_contents_start\
    \ = 0\n  local paren_group_contents_contents_contents_contents_contents_contents_end\
    \ = 0\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7znbmguw.lua:56: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_level = {}\n  local paren_group_stack\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_level_index\
    \ = {}\n  local paren_group_stack_index = {}\n  local paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphswklqqf.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local paren_stack = {}\n  local paren_levels = {}\n  local\
    \ paren_max_level = 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_index2 = 0\n  local paren_max_level_stack_index3\
    \ = 0\n  local paren_max_level_stack_index4 = 0\n  local paren_max_level_stack_index5\
    \ = 0\n  local paren_max_level_stack_index6 = 0\n  local paren_max_level_stack_index7\
    \ = 0\n  local paren_max_level_stack_index8 = 0\n  local paren_max_level_stack_index9\
    \ = 0\n  local paren_max_level_stack_index10 = 0\n  local paren_max_level_stack_index11\
    \ = 0\n  local paren_max_level_stack_index12 = 0\n  local paren_max_level_stack_index13\
    \ = 0\n  local paren_max_level_stack_index14 = 0\n  local paren_max_level_stack_index15\
    \ = 0\n  local paren_max_level_stack_index16 = 0\n  local paren_max_level_stack_index17\
    \ = 0\n  local paren_max_level_stack_index18 = 0\n  local paren_max_level_stack_index19\
    \ = 0\n  local paren_max_level_stack_index20 = 0\n  local paren_max_level_stack_index21\
    \ = 0\n  local paren_max_level_stack_index22 = 0\n  local paren_max_level_stack_index23\
    \ = 0\n  local paren_max_level_stack_index24 = 0\n  local paren_max_level_stack_index25\
    \ = 0\n  local paren_max_level_stack_index26 = 0\n  local paren_max_level_stack_index27\
    \ = 0\n  local paren_max_level_stack_index28 = 0\n  local paren_max_level_stack_index29\
    \ = 0\n  local paren_max_level_stack_index30 = 0\n  local paren_max_level_stack_index31\
    \ = 0\n  local paren_max_level_stack_index32 = 0\n  local paren_max_level_stack_index33\
    \ = 0\n  local paren_max_level_stack_index34 = 0\n  local paren_max_level_stack_index35\
    \ = 0\n  local paren_max_level_stack_index36 = 0\n  local paren_max_level_stack_index37\
    \ = 0\n  local paren_max_level_stack_index38 = 0\n  local paren_max_level_stack_index39\
    \ = 0\n  local paren_max_level_stack_index40 = 0\n  local paren_max_level_stack_index41\
    \ = 0\n  local paren_max_level_stack_index42 = 0\n  local paren_max_level_stack_index43\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm4vd3kdo.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_size = #paren_string\n  local paren_level_size = 0\n\
    \  local paren_stack_index = 0\n  local paren_level_index = 0\n  local paren_level_string\
    \ = ''\n  local paren_level_char = ''\n  local paren_level_char_index = 0\n  local\
    \ paren_level_char_length = 0\n  local paren_level_char_length_index = 0\n  local\
    \ paren_level_char_length_string = ''\n  local paren_level_char_length_string_length\
    \ = 0\n  local paren_level_char_length_string_index = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length_index\
    \ = 0\n  local paren_level_char_length_string_length = 0\n  local paren_level_char_length_string_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgg03363d.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_levels\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_level_index = 1\n\
    \  local paren_group_stack_index = 1\n  local paren_group_level\n  local paren_group\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_level\n  local paren_group_level\n  local paren_group_level\n\
    \  local paren_group_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc2i0e_g7.lua:89: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_open = 0\n  local paren_close = 0\n  local paren_level_count = 0\n  local\
    \ paren_open_count = 0\n  local paren_close_count = 0\n  for i, c in ipairs(paren_string)\
    \ do\n    if c == '(' and paren_open ~= 0 then\n      paren_open = paren_open\
    \ + 1\n      paren_open_count = paren_open_count + 1\n      paren_stack[paren_level]\
    \ = paren_open\n      paren_level_count = paren_level_count\n      paren_level\
    \ = paren_level + 1\n      levels[paren_level] = paren_open_count\n    elseif\
    \ c == ')' and paren_close ~= 0 then\n      paren_close = paren_close + 1\n  \
    \    paren_close_count = paren_close_count + 1\n      paren_level = paren_level\
    \ - 1\n      levels[paren_level] = paren_close_count\n    elseif c == '(' and\
    \ paren_level == 0 then\n      paren_open = paren_open + 1\n      paren_open_count\
    \ = paren_open_count + 1\n      paren_stack[paren_level] = paren_open\n      paren_level_count\
    \ = paren_level_count\n      paren_level = paren_level + 1\n      levels[paren_level]\
    \ = paren_open_count\n    elseif c == ')' and paren_level == 0 then\n      paren_close\
    \ = paren_close + 1\n      paren_close_count = paren_close_count + 1\n      paren_level\
    \ = paren_level - 1\n      levels[paren_level] = paren_close_count\n    elseif\
    \ c == '(' and paren_level > 0 then\n      paren_open = paren_open + 1\n     \
    \ paren_open_count = paren_open_count + 1\n      paren_stack[paren_level] = paren_open\n\
    \      paren_level_count = paren_level_count\n      paren_level = paren_level\
    \ + 1\n      levels[paren_level] = paren_open_count\n    elseif c == ')' and paren_level\
    \ > 0 then\n      paren_close = paren_close + 1\n      paren_close_count = paren_close_count\
    \ + 1\n      paren_level = paren_level - 1\n      levels[paren_level] = paren_close_count\n\
    \    elseif c == '(' and paren_level < paren_level_count then\n      paren_open\
    \ = paren_open + 1\n      paren_open_count = paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppwnk1wpc.lua:64: ''end'' expected (to close ''if'' at line
    16) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_index2\
    \ = 0\n  local paren_group_count = 1\n  local paren_group_count2 = 0\n  local\
    \ paren_group_count3 = 0\n  local paren_group_count4 = 0\n  local paren_group_count5\
    \ = 0\n  local paren_group_count6 = 0\n  local paren_group_count7 = 0\n  local\
    \ paren_group_count8 = 0\n  local paren_group_count9 = 0\n  local paren_group_count10\
    \ = 0\n  local paren_group_count11 = 0\n  local paren_group_count12 = 0\n  local\
    \ paren_group_count13 = 0\n  local paren_group_count14 = 0\n  local paren_group_count15\
    \ = 0\n  local paren_group_count16 = 0\n  local paren_group_count17 = 0\n  local\
    \ paren_group_count18 = 0\n  local paren_group_count19 = 0\n  local paren_group_count20\
    \ = 0\n  local paren_group_count21 = 0\n  local paren_group_count22 = 0\n  local\
    \ paren_group_count23 = 0\n  local paren_group_count24 = 0\n  local paren_group_count25\
    \ = 0\n  local paren_group_count26 = 0\n  local paren_group_count27 = 0\n  local\
    \ paren_group_count28 = 0\n  local paren_group_count29 = 0\n  local paren_group_count30\
    \ = 0\n  local paren_group_count31 = 0\n  local paren_group_count32 = 0\n  local\
    \ paren_group_count33 = 0\n  local paren_group_count34 = 0\n  local paren_group_count35\
    \ = 0\n  local paren_group_count36 = 0\n  local paren_group_count37 = 0\n  local\
    \ paren_group_count38 = 0\n  local paren_group_count39 = 0\n  local paren_group_count40\
    \ = 0\n  local paren_group_count41 = 0\n  local paren_group_count42 = 0\n  local\
    \ paren_group_count43 = 0\n  local paren_group_count44 = 0\n  local paren_group_count45\
    \ = 0\n  local paren_group_count46 = 0\n  local paren_group_count47 = 0\n  local\
    \ paren_group_count48 = 0\n  local paren_group_count49 = 0\n  local paren_group_count50\
    \ = 0\n  local paren_group_count51 = 0\n  local paren_group_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphqygw_3b.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_count_stack = {}\n\
    \  local paren_level_stack = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7_z53l2d.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_count = 0\n  local\
    \ paren_level = 0\n  local paren_group = 0\n  local paren_group_count = 0\n  local\
    \ paren_group_level = 0\n  local paren_group_group = 0\n  local paren_group_group_count\
    \ = 0\n  local paren_group_group_level = 0\n  local paren_group_group_group =\
    \ 0\n  local paren_group_group_group_count = 0\n  local paren_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_group_group_group_group_level = 0\n  local paren_group_group_group_group_group\
    \ = 0\n  local paren_group_group_group_group_count = 0\n  local paren_group_group_group_group_level\
    \ = 0\n  local paren_group_group_group_group_group = 0\n  local paren_group_group_group_group_count\
    \ = 0\n  local paren_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvhh8u62o.lua:68: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%]') do\n    local level = #paren_stack\n    paren_stack[level] = paren\n\
    \    max_level = level if level > max_level else max_level\n  end\n  return max_level\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2by5t9vc.lua:12: ''then'' expected near ''else''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = paren_string:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_5e37ta.lua:7: unfinished string near

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = #paren_levels_stack\n  local paren_levels_stack_index2\
    \ = 0\n  local paren_levels_stack_size2 = #paren_levels_stack\n  local paren_levels_stack_index3\
    \ = 0\n  local paren_levels_stack_size3 = #paren_levels_stack\n  local paren_levels_stack_index4\
    \ = 0\n  local paren_levels_stack_size4 = #paren_levels_stack\n  local paren_levels_stack_index5\
    \ = 0\n  local paren_levels_stack_size5 = #paren_levels_stack\n  local paren_levels_stack_index6\
    \ = 0\n  local paren_levels_stack_size6 = #paren_levels_stack\n  local paren_levels_stack_index7\
    \ = 0\n  local paren_levels_stack_size7 = #paren_levels_stack\n  local paren_levels_stack_index8\
    \ = 0\n  local paren_levels_stack_size8 = #paren_levels_stack\n  local paren_levels_stack_index9\
    \ = 0\n  local paren_levels_stack_size9 = #paren_levels_stack\n  local paren_levels_stack_index10\
    \ = 0\n  local paren_levels_stack_size10 = #paren_levels_stack\n  local paren_levels_stack_index11\
    \ = 0\n  local paren_levels_stack_size11 = #paren_levels_stack\n  local paren_levels_stack_index12\
    \ = 0\n  local paren_levels_stack_size12 = #paren_levels_stack\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_size13 = #paren_levels_stack\n  local paren_levels_stack_index14\
    \ = 0\n  local paren_levels_stack_size14 = #paren_levels_stack\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_size15 = #paren_levels_stack\n  local paren_levels_stack_index16\
    \ = 0\n  local paren_levels_stack_size16 = #paren_levels_stack\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_size17 = #paren_levels_stack\n  local paren_levels_stack_index18\
    \ = 0\n  local paren_level\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqccx2lh.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group_counts = {}\n  local paren_group_levels\
    \ = {}\n  local paren_group_starts = {}\n  local paren_group_ends = {}\n  local\
    \ paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz3y15q2_.lua:81: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_stack_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_count = {}\n\
    \  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\n  local paren_group_level_count_index\
    \ = {}\n  local paren_group_level_count_index = {}\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2kc_bysj.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_stack = { 0 }\n  local paren_level = 0\n\
    \  local paren_group = 1\n  local paren_group_count = 0\n  local paren_group_max\
    \ = 0\n  local paren_group_max_count = 0\n  local paren_group_max_depth = 0\n\
    \  local paren_group_max_depth_count = 0\n  local paren_group_max_depth_max =\
    \ 0\n  local paren_group_max_depth_max_count = 0\n  local paren_group_max_depth_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max = 0\n  local paren_group_max_depth_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count = 0\n  local paren_group_max_depth_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count = 0\n  local\
    \ paren_group_max_depth_max_count_max_count_max_count = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count =\
    \ 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n  local paren_group_max_depth_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmple7wu2jh.lua:49: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { 0 }\n  local paren_stack = { 0 }\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nest\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5xiwhxke.lua:54: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { 0 }\n  local paren_level = 0\n  local paren_groups =\
    \ {}\n  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 1\n  local paren_group_end = 1\n  local paren_group_level_count\
    \ = 1\n  local paren_group_level_start = 1\n  local paren_group_level_end = 1\n\
    \  local paren_group_level_max_count = 1\n  local paren_group_level_max_start\
    \ = 1\n  local paren_group_level_max_end = 1\n  local paren_group_level_max_count_start\
    \ = 1\n  local paren_group_level_max_count_end = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_max_count_index = 1\n  local paren_group_level_max_count_index\
    \ = 1\n  local paren_group_level_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8z7l3vrf.lua:66: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_size = #paren_levels_stack\n  local paren_levels_stack_index2\
    \ = 0\n  local paren_levels_stack_size2 = #paren_levels_stack\n  local paren_levels_stack_index3\
    \ = 0\n  local paren_levels_stack_size3 = #paren_levels_stack\n  local paren_levels_stack_index4\
    \ = 0\n  local paren_levels_stack_size4 = #paren_levels_stack\n  local paren_levels_stack_index5\
    \ = 0\n  local paren_levels_stack_size5 = #paren_levels_stack\n  local paren_levels_stack_index6\
    \ = 0\n  local paren_levels_stack_size6 = #paren_levels_stack\n  local paren_levels_stack_index7\
    \ = 0\n  local paren_levels_stack_size7 = #paren_levels_stack\n  local paren_levels_stack_index8\
    \ = 0\n  local paren_levels_stack_size8 = #paren_levels_stack\n  local paren_levels_stack_index9\
    \ = 0\n  local paren_levels_stack_size9 = #paren_levels_stack\n  local paren_levels_stack_index10\
    \ = 0\n  local paren_levels_stack_size10 = #paren_levels_stack\n  local paren_levels_stack_index11\
    \ = 0\n  local paren_levels_stack_size11 = #paren_levels_stack\n  local paren_levels_stack_index12\
    \ = 0\n  local paren_levels_stack_size12 = #paren_levels_stack\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_size13 = #paren_levels_stack\n  local paren_levels_stack_index14\
    \ = 0\n  local paren_levels_stack_size14 = #paren_levels_stack\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_size15 = #paren_levels_stack\n  local paren_levels_stack_index16\
    \ = 0\n  local paren_levels_stack_size16 = #paren_levels_stack\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_size17 = #paren_levels_stack\n  local paren_levels_stack_index18\
    \ = 0\n  local paren_level\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoqccx2lh.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_level = 0\n  local paren_levels = {}\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]') do\n    local paren_level\
    \ = paren_level + 1\n    paren_levels[paren_level] = true\n    paren_groups[paren]\
    \ = paren\n  end\n  local max_level = 0\n  for paren in pairs(paren_groups) do\n\
    \    if paren_levels[paren] then\n      max_level = max_level + 1\n    end\n \
    \ end\n  local max_level_groups = {}\n  for i = 1, max_level do\n    local paren_group\
    \ = {}\n    for paren in pairs(paren_groups) do\n      if paren_levels[paren]\
    \ then\n        paren_group[#paren_group + 1] = paren\n      end\n    end\n  \
    \  max_level_groups[i] = paren_group\n  end\n  return max_level_groups\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzp6uaej.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpjzp6uaej.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_count = 1\n  local paren_group_max_level\
    \ = 0\n  local paren_group_max_level_length = 0\n  local paren_group_max_level_char\
    \ = ''\n  local paren_group_max_level_char_length = 0\n  local paren_group_max_level_char_position\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_group_max_level_char_position_index\
    \ = 0\n  local paren_group_max_level_char_position_index = 0\n  local paren_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplaq2cnpv.lua:62: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_count = 0\n  local paren_level = 0\n  local\
    \ paren_stack = { }\n  local paren_stack_level = 0\n  local paren_stack_string\
    \ = ''\n  local paren_stack_string_count = 0\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string_index = 0\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n\
    \  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string_index = 0\n  local\
    \ paren_stack_string_count = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string_index = 0\n  local paren_stack_string_count\
    \ = 0\n  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n\
    \  local paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string_index = 0\n  local paren_stack_string_count = 0\n  local\
    \ paren_stack_string = ''\n  local paren_stack_string_count = 0\n  local paren_stack_string_index\
    \ = 0\n  local paren_stack_string_count = 0\n  local paren_stack_string = ''\n\
    \  local paren_stack_string_count = 0\n  local paren\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppt5g2ggo.lua:76: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_level\
    \ = {}\n  local paren_group_stack = {}\n  local paren_group_stack_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level_index = {}\n\
    \  local paren_group_level_index = {}\n  local paren_group_level\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbxdbxqln.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuu4cw4j7.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index = {}\n  local paren_stack_count = {}\n  local\
    \ paren_stack_index = {}\n  local paren_stack_count = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_count = {}\n  local paren_stack_index = {}\n  local\
    \ paren_stack_count = {}\n  local paren_stack_index = {}\n  local paren_stack_count\
    \ = {}\n  local paren_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9twi6v_b.lua:81: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_index2\
    \ = {}\n  local paren_group_index3 = {}\n  local paren_group_index4 = {}\n  local\
    \ paren_group_index5 = {}\n  local paren_group_index6 = {}\n  local paren_group_index7\
    \ = {}\n  local paren_group_index8 = {}\n  local paren_group_index9 = {}\n  local\
    \ paren_group_index10 = {}\n  local paren_group_index11 = {}\n  local paren_group_index12\
    \ = {}\n  local paren_group_index13 = {}\n  local paren_group_index14 = {}\n \
    \ local paren_group_index15 = {}\n  local paren_group_index16 = {}\n  local paren_group_index17\
    \ = {}\n  local paren_group_index18 = {}\n  local paren_group_index19 = {}\n \
    \ local paren_group_index20 = {}\n  local paren_group_index21 = {}\n  local paren_group_index22\
    \ = {}\n  local paren_group_index23 = {}\n  local paren_group_index24 = {}\n \
    \ local paren_group_index25 = {}\n  local paren_group_index26 = {}\n  local paren_group_index27\
    \ = {}\n  local paren_group_index28 = {}\n  local paren_group_index29 = {}\n \
    \ local paren_group_index30 = {}\n  local paren_group_index31 = {}\n  local paren_group_index32\
    \ = {}\n  local paren_group_index33 = {}\n  local paren_group_index34 = {}\n \
    \ local paren_group_index35 = {}\n  local paren_group_index36 = {}\n  local paren_group_index37\
    \ = {}\n  local paren_group_index38 = {}\n  local paren_group_index39 = {}\n \
    \ local paren_group_index40 = {}\n  local paren_group_index41 = {}\n  local paren_group_index42\
    \ = {}\n  local paren_group_index43 = {}\n  local paren_group_index44 = {}\n \
    \ local paren_group_index45 = {}\n  local paren_group_index46 = {}\n  local paren_group_index47\
    \ = {}\n  local paren_group_index48 = {}\n  local paren_group_index49 = {}\n \
    \ local paren_group_index50 = {}\n  local paren_group_index51 = {}\n  local paren_group_index52\
    \ = {}\n  local paren_group\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpth9j52tg.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_level = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+')\
    \ do\n    paren_stack[#paren_stack + 1] = paren\n    paren_level = #paren_stack\n\
    \  end\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_group\
    \ = paren\n    local paren_group_level = #paren_groups\n    local paren_group_count\
    \ = 1\n    while #paren_group > 0 do\n      local paren_group_count = paren_group_count\
    \ + 1\n      local paren_group_char = paren_group:sub(1, 1)\n      local paren_group_char\
    \ = paren_group_char:lower()\n      if paren_group_char == '(' or paren_group_char\
    \ == '[' then\n        paren_groups[paren_group_level] = paren_group\n       \
    \ paren_group_level = paren_group_level + 1\n      elseif paren_group_char ==\
    \ ')' or paren_group_char == ']' then\n        paren_group_level = paren_group_level\
    \ - 1\n        if paren_group_level == 0 then\n          paren_groups[paren_group_level]\
    \ = paren_group\n        end\n      else\n        paren_groups[paren_group_level]\
    \ = paren_group\n      end\n      paren_group = paren_group:sub(2)\n    end\n\
    \    paren_groups[paren_group_level] = paren_group\n    paren_group_level = paren_group_level\
    \ + 1\n  end\n  local max_level = 0\n  for i = 1, #paren_groups do\n    local\
    \ level = #paren_groups[i]\n    if level > max_level then\n      max_level = level\n\
    \    end\n  end\n  local max_level_groups = {}\n  for i = 1, max_level do\n  \
    \  local level_groups = {}\n    for j = 1, #paren_groups do\n      if paren_groups[j]:sub(1,\
    \ 1) == paren_groups[i]:sub(1, 1) then\n        level_groups[#level_groups + 1]\
    \ = paren_groups[j]\n      end\n    end\n    max_level_groups[i] = level_groups\n\
    \  end\n  local max_level_group_count = {}\n  for i = 1, #max_level_groups do\n\
    \    local level_group_count = 1\n    for j = 1, #max_level_groups[i] do\n   \
    \   if max_level_groups[i][j] == max_level_groups[i][j]:sub(1, 1) then\n     \
    \   level_group_count = level_group_count + 1\n      end\n    end\n    max_level_group_count[i]\
    \ = level_group_count\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtd30eab.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 0\n  local paren_group_level = 0\n  local paren_group_start\
    \ = 0\n  local paren_group_end = 0\n  local paren_group_string = ''\n  local paren_group_char\
    \ = ''\n  local paren_group_is_open = false\n  local paren_group_is_close = false\n\
    \  local paren_group_is_opening_paren = false\n  local paren_group_is_closing_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren = false\n  local\
    \ paren_group_is_opening_paren_or_closing_paren_or_opening_paren = false\n  local\
    \ paren_group_is_closing_paren_or_opening_paren = false\n  local paren_group_is_closing_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_opening_paren_or_closing_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren_or_opening_paren\
    \ = false\n  local paren_group_is_closing_paren_or_opening_paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwj2vvr0l.lua:43: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_stack_index\
    \ = {}\n  local paren_stack_max = 0\n  local paren_stack_max_index = 0\n  local\
    \ paren_stack_max_index2 = 0\n  local paren_stack_max_index3 = 0\n  local paren_stack_max_index4\
    \ = 0\n  local paren_stack_max_index5 = 0\n  local paren_stack_max_index6 = 0\n\
    \  local paren_stack_max_index7 = 0\n  local paren_stack_max_index8 = 0\n  local\
    \ paren_stack_max_index9 = 0\n  local paren_stack_max_index10 = 0\n  local paren_stack_max_index11\
    \ = 0\n  local paren_stack_max_index12 = 0\n  local paren_stack_max_index13 =\
    \ 0\n  local paren_stack_max_index14 = 0\n  local paren_stack_max_index15 = 0\n\
    \  local paren_stack_max_index16 = 0\n  local paren_stack_max_index17 = 0\n  local\
    \ paren_stack_max_index18 = 0\n  local paren_stack_max_index19 = 0\n  local paren_stack_max_index20\
    \ = 0\n  local paren_stack_max_index21 = 0\n  local paren_stack_max_index22 =\
    \ 0\n  local paren_stack_max_index23 = 0\n  local paren_stack_max_index24 = 0\n\
    \  local paren_stack_max_index25 = 0\n  local paren_stack_max_index26 = 0\n  local\
    \ paren_stack_max_index27 = 0\n  local paren_stack_max_index28 = 0\n  local paren_stack_max_index29\
    \ = 0\n  local paren_stack_max_index30 = 0\n  local paren_stack_max_index31 =\
    \ 0\n  local paren_stack_max_index32 = 0\n  local paren_stack_max_index33 = 0\n\
    \  local paren_stack_max_index34 = 0\n  local paren_stack_max_index35 = 0\n  local\
    \ paren_stack_max_index36 = 0\n  local paren_stack_max_index37 = 0\n  local paren_stack_max_index38\
    \ = 0\n  local paren_stack_max_index39 = 0\n  local paren_stack_max_index40 =\
    \ 0\n  local paren_stack_max_index41 = 0\n  local paren_stack_max_index42 = 0\n\
    \  local paren_stack_max_index43 = 0\n  local paren_stack_max_index44 = 0\n  local\
    \ paren_stack_max_index45 = 0\n  local paren_stack_max_index46 = 0\n  local paren_stack_max_index47\
    \ = 0\n  local paren_stack_max_index48 = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0o1u_9ar.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_count = 0\n  local paren_level = 0\n\
    \  local paren_groups = {}\n  local paren_group_levels = {}\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a)]+') do\n    local paren_level = paren_level + 1\n    paren_stack[paren_level]\
    \ = paren\n    paren_count = paren_count + 1\n    local paren_group = paren\n\
    \    while string.find(paren_group, '%[(%a)]') do\n      paren_group = string.gsub(paren_group,\
    \ '%[(%a)]+', '')\n      paren_groups[paren_level] = paren_group\n      paren_group_levels[paren_level]\
    \ = paren_level\n      paren_level = paren_level + 1\n    end\n  end\n  local\
    \ max_level = 0\n  local max_level_index = 0\n  for i = 1, paren_count do\n  \
    \  local paren_level = paren_stack[i]\n    local paren_group = paren_groups[i]\n\
    \    local paren_group_level = paren_group_levels[i]\n    if paren_level > max_level\
    \ then\n      max_level = paren_level\n      max_level_index = i\n    end\n  end\n\
    \  local max_level_str = paren_stack[max_level_index]\n  local max_level_groups\
    \ = paren_groups[max_level_index]\n  local max_level_group_levels = paren_group_levels[max_level_index]\n\
    \  local max_level_group_index = -1\n  for i = 1, paren_count do\n    local paren_level\
    \ = paren_stack[i]\n    local paren_group = paren_groups[i]\n    local paren_group_level\
    \ = paren_group_levels[i]\n    if paren_level == max_level_str then\n      max_level_group_index\
    \ = i\n    end\n  end\n  local max_level_group_str = max_level_groups[max_level_group_index]\n\
    \  local max_level_group_level = max_level_group_levels[max_level_group_index]\n\
    \  local max_level_group_str = max_level_group_str\n  if max_level_group_level\
    \ > 0 then\n    max_level_group_str = max_level_group_str..' '\n  end\n  local\
    \ max_level_group_str = max_level_group_str..'('..max_level_str..')'\n  local\
    \ max_level_group_str = max_level_group_str..' '\n  local max_level_group_str\
    \ = max_level_group_str..'('..max_level_group_str..')'\n  local max_level_group_str\
    \ = max_level_group_str..' '\n  local max_level_group_str = max_level_group_str..'('..max_level_group_str..')'\n\
    \  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbwjhnf70.lua:68: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local max_level = 0\n  for paren in string.gmatch(paren_string,\
    \ '%[(%a+)%z]')\n  do\n    local level_of_paren = #paren_stack\n    if level_of_paren\
    \ > max_level then\n      max_level = level_of_paren\n    end\n    table.insert(paren_stack,\
    \ paren)\n  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_n9ss6l.lua:23:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpb_n9ss6l.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_index = {}\n  local paren_levels_index[1] = 1\n \
    \ local paren_levels_index[2] = 2\n  local paren_levels_index[3] = 3\n  local\
    \ paren_levels_index[4] = 4\n  local paren_levels_index[5] = 5\n  local paren_levels_index[6]\
    \ = 6\n  local paren_levels_index[7] = 7\n  local paren_levels_index[8] = 8\n\
    \  local paren_levels_index[9] = 9\n  local paren_levels_index[10] = 10\n  local\
    \ paren_levels_index[11] = 11\n  local paren_levels_index[12] = 12\n  local paren_levels_index[13]\
    \ = 13\n  local paren_levels_index[14] = 14\n  local paren_levels_index[15] =\
    \ 15\n  local paren_levels_index[16] = 16\n  local paren_levels_index[17] = 17\n\
    \  local paren_levels_index[18] = 18\n  local paren_levels_index[19] = 19\n  local\
    \ paren_levels_index[20] = 20\n  local paren_levels_index[21] = 21\n  local paren_levels_index[22]\
    \ = 22\n  local paren_levels_index[23] = 23\n  local paren_levels_index[24] =\
    \ 24\n  local paren_levels_index[25] = 25\n  local paren_levels_index[26] = 26\n\
    \  local paren_levels_index[27] = 27\n  local paren_levels_index[28] = 28\n  local\
    \ paren_levels_index[29] = 29\n  local paren_levels_index[30] = 30\n  local paren_levels_index[31]\
    \ = 31\n  local paren_levels_index[32] = 32\n  local paren_levels_index[33] =\
    \ 33\n  local paren_levels_index[34] = 34\n  local paren_levels_index[35] = 35\n\
    \  local paren_levels_index[36] = 36\n  local paren_levels_index[37] = 37\n  local\
    \ paren_levels_index[38] = 38\n  local paren_levels_index[39] = 39\n  local paren_levels_index[40]\
    \ = 40\n  local paren_levels_index[41] = 41\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwgppn713.lua:12: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren_group_index = {}\n  local paren_group_index\
    \ = {}\n  local paren_group_index = {}\n  local paren_group_index = {}\n  local\
    \ paren_group_index = {}\n  local paren\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxdgd_pss.lua:81: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_group = 1\n  local paren_group_count = 0\n  local paren_group_length =\
    \ 0\n  local paren_group_start = -1\n  local paren_group_end = -1\n  local paren_group_start_index\
    \ = 0\n  local paren_group_end_index = 0\n  local paren_group_length_index = 0\n\
    \  local paren_group_length = 0\n  local paren_group_start_index = 0\n  local\
    \ paren_group_end_index = 0\n  local paren_group_length_index = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_start_index = 0\n  local paren_group_end_index = 0\n\
    \  local paren_group_length_index = 0\n  local paren_group_length = 0\n  local\
    \ paren_group_start_index = 0\n  local paren_group_end_index = 0\n  local paren_group_length_index\
    \ = 0\n  local paren_group_length = 0\n  local paren_group_start_index = 0\n \
    \ local paren_group_end_index = 0\n  local paren_group_length_index = 0\n  local\
    \ paren_group_length = 0\n  local paren_group_start_index = 0\n  local paren_group_end_index\
    \ = 0\n  local paren_group_length_index = 0\n  local paren_group_length = 0\n\
    \  local paren_group_start_index = 0\n  local paren_group_end_index = 0\n  local\
    \ paren_group_length_index = 0\n  local paren_group_length = 0\n  local paren_group_start_index\
    \ = 0\n  local paren_group_end_index = 0\n  local paren_group_length_index = 0\n\
    \  local paren_group_length = 0\n  local paren_group_start_index = 0\n  local\
    \ paren_group_end_index = 0\n  local paren_group_length_index = 0\n  local paren_group_length\
    \ = 0\n  local paren_group_start_index = 0\n  local paren_group_end_index = 0\n\
    \  local paren_group_length_index = 0\n  local paren_group_length = 0\n  local\
    \ paren_group_start_index = 0\n  local paren_group_end_index = 0\n  local paren_group_length_index\
    \ = 0\n  local paren_group_length = 0\n  local paren_group_start_index = 0\n \
    \ local paren_group_end_index = 0\n  local paren_group_length_index = 0\n  local\
    \ paren_group_length = 0\n  local paren_group_start_index = 0\n  local paren_group_end_index\
    \ = 0\n  local paren_group_length_index = 0\n  local paren_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp3njjykt.lua:76: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_nesting = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting\
    \ = 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting\
    \ = 0\n  local paren_nesting_level = 0\n  local paren_nesting = 0\n  local paren_level\
    \ = 0\n  local paren_nesting_level = 0\n  local paren_nesting_nesting_level =\
    \ 0\n  local paren_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local paren_nesting_nesting_nesting_level = 0\n  local paren_nesting_nesting_nesting_level\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4jet0hq2.lua:58: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_count = {}\n  local\
    \ paren\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((())) () ((())()())'),\
    \ {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1,\
    \ 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4i53sel5.lua:75: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local current_level = 1\n  local paren_count = 0\n  local\
    \ opening_paren = 0\n  local opening_paren_level = 1\n  local opening_paren_char\
    \ = ''\n  local opening_paren_char_level = 1\n  local opening_paren_char_count\
    \ = 0\n  local opening_paren_char_prev = ''\n  local opening_paren_char_prev_level\
    \ = 1\n  local opening_paren_char_prev_count = 0\n  local opening_paren_char_next\
    \ = ''\n  local opening_paren_char_next_level = 1\n  local opening_paren_char_next_count\
    \ = 0\n  local opening_paren_char_next2 = ''\n  local opening_paren_char_next2_level\
    \ = 1\n  local opening_paren_char_next2_count = 0\n  local opening_paren_char_next3\
    \ = ''\n  local opening_paren_char_next3_level = 1\n  local opening_paren_char_next3_count\
    \ = 0\n  local opening_paren_char_next4 = ''\n  local opening_paren_char_next4_level\
    \ = 1\n  local opening_paren_char_next4_count = 0\n  local opening_paren_char_next5\
    \ = ''\n  local opening_paren_char_next5_level = 1\n  local opening_paren_char_next5_count\
    \ = 0\n  local opening_paren_char_next6 = ''\n  local opening_paren_char_next6_level\
    \ = 1\n  local opening_paren_char_next6_count = 0\n  local opening_paren_char_next7\
    \ = ''\n  local opening_paren_char_next7_level = 1\n  local opening_paren_char_next7_count\
    \ = 0\n  local opening_paren_char_next8 = ''\n  local opening_paren_char_next8_level\
    \ = 1\n  local opening_paren_char_next8_count = 0\n  local opening_paren_char_next9\
    \ = ''\n  local opening_paren_char_next9_level = 1\n  local opening_paren_char_next9_count\
    \ = 0\n  local opening_paren_char_next10 = ''\n  local opening_paren_char_next10_level\
    \ = 1\n  local opening_paren_char_next10_count = 0\n  local opening_paren_char_next11\
    \ = ''\n  local opening_paren_char_next11_level = 1\n  local opening_paren_char_next11_count\
    \ = 0\n  local opening_paren_char_next12 = ''\n  local opening_paren_char_next12_level\
    \ = 1\n  local opening_paren_char_next12_count = 0\n  local opening_paren_char_next\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj8mtoq_b.lua:64: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    paren_levels[paren] = level\n    level = level + 1\n    if\
    \ level > max_level then\n      max_level = level\n    end\n  end\n  local max_level_paren\
    \ = nil\n  for i = 1, #paren_stack do\n    if paren_levels[paren_stack[i]] > max_level\
    \ then\n      max_level_paren = paren_stack[i]\n    end\n  end\n  local max_level_paren_level\
    \ = 0\n  for i = 1, #paren_stack do\n    if paren_levels[paren_stack[i]] > max_level_paren_level\
    \ then\n      max_level_paren_level = paren_levels[paren_stack[i]]\n    end\n\
    \  end\n  return max_level_paren_level\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1amfb5s.lua:37:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpo1amfb5s.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local paren_stack = { }\n  local paren_level = 0\n  local\
    \ paren_nesting = 0\n  local paren_levels = { }\n  local paren_nesting_level =\
    \ 0\n  local paren_nesting_nesting = 0\n  local paren_levels_string = paren_string\n\
    \  local paren_nesting_level_string = paren_string\n  local paren_nesting_nesting_string\
    \ = paren_string\n  local paren_levels_count = #paren_string\n  local paren_nesting_count\
    \ = #paren_string\n  local paren_levels_index = 1\n  local paren_nesting_level_index\
    \ = 1\n  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index\
    \ = 1\n  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index = 1\n\
    \  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index = 1\n\
    \  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index = 1\n\
    \  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index = 1\n\
    \  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_nesting_level_index = 1\n  local paren_levels_index = 1\n\
    \  local paren_nesting_level_index = 1\n  local paren_nesting_nesting_level_index\
    \ = 1\n  local paren_levels_index = 1\n  local paren_nesting_level_index = 1\n\
    \  local paren_nesting_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_okboad0.lua:67: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = { }\n  local paren_level = 0\n  local paren_nesting = 0\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    paren_stack[paren_level]\
    \ = paren\n    paren_level = paren_level + 1\n    if paren == '(' and paren_nesting\
    \ == 0 then\n      paren_nesting = paren_nesting + 1\n    elseif paren == ')'\
    \ and paren_nesting > 0 then\n      paren_nesting = paren_nesting - 1\n    end\n\
    \  end\n  return paren_stack\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg64lj2d.lua:25:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmpfg64lj2d.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_g1h9xpf.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  local paren_max_level_stack = {}\n  local paren_max_level_stack_index =\
    \ 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  local paren_max_level_stack_index\
    \ = 0\n  local paren_max_level_stack_size = 0\n  \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpele1aqvc.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_max_level =\
    \ 0\n  for paren in string.gmatch(paren_string, \"%[(%a*)%]\") do\n    paren_stack[#paren_stack\
    \ + 1] = paren\n    paren_level = #paren_stack\n    paren_max_level = math.max(paren_max_level,\
    \ paren_level)\n  end\n  local max_level = paren_max_level\n  local level = 0\n\
    \  local paren_stack_string = \"\"\n  for i = 1, #paren_stack do\n    local paren\
    \ = paren_stack[i]\n    if paren == \"(\" then\n      level = level + 1\n    elseif\
    \ paren == \")\" then\n      level = level - 1\n      if level == 0 then\n   \
    \     paren_stack_string = paren_stack_string .. paren\n      end\n    end\n \
    \ end\n  return max_level, level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk1sykgzy.lua:35:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpk1sykgzy.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpttdqhhaj.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  for paren in string.gmatch(paren_string, \"%[(%a*)%]\") do\n    local paren_level\
    \ = paren_level + 1\n    local paren_group = paren_groups[paren_level]\n    if\
    \ not paren_group then\n      paren_group = paren_level\n      paren_groups[paren_level]\
    \ = paren_group\n    end\n    table.insert(paren_stack, paren)\n  end\n  local\
    \ max_level = 0\n  for paren in paren_stack do\n    local paren_level = paren_groups[paren]\n\
    \    if not paren_level then\n      paren_level = max_level\n      max_level =\
    \ paren_level\n    end\n  end\n  return max_level\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_74j6k6.lua:20:\
    \ attempt to call a table value (for iterator 'for iterator')\nstack traceback:\n\
    \t/tmp/tmp3_74j6k6.lua:20: in local 'candidate'\n\t/tmp/tmp3_74j6k6.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local parsed_parens = {}\n  local paren_level = 0\n  local paren_stack = {}\n\
    \  local paren_levels = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index\
    \ = 0\n  local paren_levels_stack_size = 0\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_levels_stack_is_full = true\n  local paren_levels_stack_is_empty\
    \ = true\n  local paren_level\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbnsdnzvh.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 1\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index = {}\n  local paren_levels_stack_index = {}\n\
    \  local paren_levels_stack_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzisz9jjz.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_index = {}\n  local paren_levels_index[1] = 1\n \
    \ local paren_levels_index[2] = 2\n  local paren_levels_index[3] = 3\n  local\
    \ paren_levels_index[4] = 4\n  local paren_levels_index[5] = 5\n  local paren_levels_index[6]\
    \ = 6\n  local paren_levels_index[7] = 7\n  local paren_levels_index[8] = 8\n\
    \  local paren_levels_index[9] = 9\n  local paren_levels_index[10] = 10\n  local\
    \ paren_levels_index[11] = 11\n  local paren_levels_index[12] = 12\n  local paren_levels_index[13]\
    \ = 13\n  local paren_levels_index[14] = 14\n  local paren_levels_index[15] =\
    \ 15\n  local paren_levels_index[16] = 16\n  local paren_levels_index[17] = 17\n\
    \  local paren_levels_index[18] = 18\n  local paren_levels_index[19] = 19\n  local\
    \ paren_levels_index[20] = 20\n  local paren_levels_index[21] = 21\n  local paren_levels_index[22]\
    \ = 22\n  local paren_levels_index[23] = 23\n  local paren_levels_index[24] =\
    \ 24\n  local paren_levels_index[25] = 25\n  local paren_levels_index[26] = 26\n\
    \  local paren_levels_index[27] = 27\n  local paren_levels_index[28] = 28\n  local\
    \ paren_levels_index[29] = 29\n  local paren_levels_index[30] = 30\n  local paren_levels_index[31]\
    \ = 31\n  local paren_levels_index[32] = 32\n  local paren_levels_index[33] =\
    \ 33\n  local paren_levels_index[34] = 34\n  local paren_levels_index[35] = 35\n\
    \  local paren_levels_index[36] = 36\n  local paren_levels_index[37] = 37\n  local\
    \ paren_levels_index[38] = 38\n  local paren_levels_index[39] = 39\n  local paren_levels_index[40]\
    \ = 40\n  local paren_levels_index[41] = 41\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqije9cbd.lua:12: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local levels = { }\n  local level = 0\n  local paren_count = 0\n  local opening_paren\
    \ = 0\n  for i = 1, #paren_string do\n    local c = paren_string[i]\n    if c\
    \ == '(' and opening_paren == 0 then\n      opening_paren = level + 1\n    end\n\
    \    if c == ')' and opening_paren > 0 then\n      levels[level] = levels[level]\
    \ - 1\n      opening_paren = opening_paren - 1\n    end\n    if opening_paren\
    \ > 0 then\n      levels[level] = levels[level] + 1\n    end\n    if c == '('\
    \ then\n      paren_count = paren_count + 1\n    end\n    if c == ')' then\n \
    \     paren_count = paren_count - 1\n    end\n  end\n  return levels\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp77d73ctr.lua:36:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp77d73ctr.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  for paren in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level\
    \ = paren_level + 1\n    paren_groups[paren_level] = paren_groups[paren_level]\
    \ or {}\n    paren_groups[paren_level][#paren_groups[paren_level] + 1] = paren\n\
    \  end\n  for i = 1, #paren_groups do\n    local paren_level = paren_levels[i]\n\
    \    local paren_group = {}\n    for j = 1, #paren_groups[i] do\n      paren_group[j]\
    \ = paren_groups[i][j]\n    end\n    paren_levels[paren_level] = paren_levels[paren_level]\
    \ or {}\n    paren_levels[paren_level][#paren_levels[paren_level] + 1] = paren_group\n\
    \  end\n  local max_level = 0\n  for i = 1, #paren_groups do\n    local paren_level\
    \ = paren_levels[i]\n    local max_level = math.max(max_level, #paren_groups[i])\n\
    \  end\n  local max_level_groups = {}\n  for i = 1, max_level do\n    local groups\
    \ = {}\n    for j = 1, #paren_groups[i] do\n      groups[j] = paren_groups[i][j]\n\
    \    end\n    max_level_groups[i] = groups\n  end\n  return max_level_groups\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68bzu8zl.lua:43:\
    \ expected: {2, 3, 1, 3}\nactual: {}\nstack traceback:\n\t/tmp/tmp68bzu8zl.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[(%a)]+') do\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren_level == nil then\n      paren_stack[#paren_stack] = level\n   \
    \ end\n    level = level + 1\n    if paren == '(' and level > max_level then\n\
    \      max_level = level\n    end\n    if paren == ')' and level == max_level\
    \ then\n      level = level - 1\n    end\n    paren_stack[#paren_stack] = level\n\
    \  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj9xr92wf.lua:30:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmpj9xr92wf.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_groups = {}\n  local paren_levels = {}\n  local paren_level = 0\n\
    \  local paren_level_count = 0\n  local paren_level_string = ''\n  local paren_level_string_count\
    \ = 0\n  local paren_level_string = ''\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    \  local paren_level_string_count = 0\n  local paren_level_string_count = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvd5udt2p.lua:74: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = 1\n  local paren_group_level\
    \ = 1\n  local paren_group_start = 0\n  local paren_group_end = 0\n  local paren_group_len\
    \ = 0\n  local paren_group_lens = {}\n  local paren_group_lens_index = 1\n  local\
    \ paren_group_lens_start = 0\n  local paren_group_lens_end = 0\n  local paren_group_lens_len\
    \ = 0\n  local paren_group_lens_lens = {}\n  local paren_group_lens_lens_index\
    \ = 1\n  local paren_group_lens_lens_start = 0\n  local paren_group_lens_lens_end\
    \ = 0\n  local paren_group_lens_lens_len = 0\n  local paren_group_lens_lens_lens\
    \ = {}\n  local paren_group_lens_lens_lens_index = 1\n  local paren_group_lens_lens_lens_start\
    \ = 0\n  local paren_group_lens_lens_lens_end = 0\n  local paren_group_lens_lens_lens_len\
    \ = 0\n  local paren_group_lens_lens_lens_lens = {}\n  local paren_group_lens_lens_lens_lens_index\
    \ = 1\n  local paren_group_lens_lens_lens_lens_start = 0\n  local paren_group_lens_lens_lens_lens_end\
    \ = 0\n  local paren_group_lens_lens_lens_lens_len = 0\n  local paren_group_lens_lens_lens_lens_lens\
    \ = {}\n  local paren_group_lens_lens_lens_lens_lens_index = 1\n  local paren_group_lens_lens_lens_lens_lens_start\
    \ = 0\n  local paren_group_lens_lens_lens_lens_lens_end = 0\n  local paren_group_lens_lens_lens_lens_lens_len\
    \ = 0\n  local paren_group_lens_lens_lens_lens_lens_lens = {}\n  local paren_group_lens_lens_lens_lens_lens_lens_index\
    \ = 1\n  local paren_group_lens_lens_lens_lens_lens_lens_start = 0\n  local paren_group_lens_lens_lens_lens_lens_lens_end\
    \ = 0\n  local paren_group_lens_lens_lens_lens_lens_lens_len = 0\n  local \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbgfzeuqw.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_level = 0\n  local paren_groups = {}\n\
    \  local paren_group_index = 1\n  local paren_group_level = 1\n  local paren_group_start\
    \ = 1\n  local paren_group_end = 1\n  local paren_group_length = 1\n  local paren_group_char\n\
    \  local paren_group_chars\n  local paren_group_char_index\n  local paren_group_char_length\n\
    \  local paren_group_char_char\n  local paren_group_char_chars\n  local paren_group_char_char_index\n\
    \  local paren_group_char_char_length\n  local paren_group_char_char_char\n  local\
    \ paren_group_char_char_chars\n  local paren_group_char_char_char_index\n  local\
    \ paren_group_char_char_char_length\n  local paren_group_char_char_char_char\n\
    \  local paren_group_char_char_char_chars\n  local paren_group_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_length\n  local paren_group_char_char_char_char_char\n\
    \  local paren_group_char_char_char_char_chars\n  local paren_group_char_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_char_length\n  local paren_group_char_char_char_char_char_char\n\
    \  local paren_group_char_char_char_char_char_chars\n  local paren_group_char_char_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_char_char_length\n  local paren_group_char_char_char_char_char_char_char\n\
    \  local paren_group_char_char_char_char_char_char_chars\n  local paren_group_char_char_char_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_char_char_char_length\n  local paren_group_char_char_char_char_char_char_char_char\n\
    \  local paren_group_char_char_char_char_char_char_char_chars\n  local paren_group_char_char_char_char_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_char_char_char_char_length\n  local paren_group_char_char_char_char_char_char_char_char_char\n\
    \  local paren_group_char_char_char_char_char_char_char_char_chars\n  local paren_group_char_char_char_char_char_char_char_char_char_index\n\
    \  local paren_group_char_char_char_char_char_char_char_char_char_length\n  local\
    \ paren_group_char_char_char_char_char_char_char_char_char_char\n  local paren_group_char_char_char_char_char_char_char_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n\
    \    lu.assertEquals(candidate('(()()) ((())) () ((())()())'), {2, 3, 1, 3})\n\
    \    lu.assertEquals(candidate('() (()) ((())) (((())))'), {1, 2, 3, 4})\n   \
    \ lu.assertEquals(candidate('(()(())((())))'), {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppx5v1cb8.lua:62: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_stack_is_empty = true\n  local paren_levels_stack_is_full\
    \ = true\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp21mc6k6a.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_levels_stack = {}\n  local paren_levels_stack_index = 0\n\
    \  local paren_levels_stack_index2 = 0\n  local paren_levels_stack_index3 = 0\n\
    \  local paren_levels_stack_index4 = 0\n  local paren_levels_stack_index5 = 0\n\
    \  local paren_levels_stack_index6 = 0\n  local paren_levels_stack_index7 = 0\n\
    \  local paren_levels_stack_index8 = 0\n  local paren_levels_stack_index9 = 0\n\
    \  local paren_levels_stack_index10 = 0\n  local paren_levels_stack_index11 =\
    \ 0\n  local paren_levels_stack_index12 = 0\n  local paren_levels_stack_index13\
    \ = 0\n  local paren_levels_stack_index14 = 0\n  local paren_levels_stack_index15\
    \ = 0\n  local paren_levels_stack_index16 = 0\n  local paren_levels_stack_index17\
    \ = 0\n  local paren_levels_stack_index18 = 0\n  local paren_levels_stack_index19\
    \ = 0\n  local paren_levels_stack_index20 = 0\n  local paren_levels_stack_index21\
    \ = 0\n  local paren_levels_stack_index22 = 0\n  local paren_levels_stack_index23\
    \ = 0\n  local paren_levels_stack_index24 = 0\n  local paren_levels_stack_index25\
    \ = 0\n  local paren_levels_stack_index26 = 0\n  local paren_levels_stack_index27\
    \ = 0\n  local paren_levels_stack_index28 = 0\n  local paren_levels_stack_index29\
    \ = 0\n  local paren_levels_stack_index30 = 0\n  local paren_levels_stack_index31\
    \ = 0\n  local paren_levels_stack_index32 = 0\n  local paren_levels_stack_index33\
    \ = 0\n  local paren_levels_stack_index34 = 0\n  local paren_levels_stack_index35\
    \ = 0\n  local paren_levels_stack_index36 = 0\n  local paren_levels_stack_index37\
    \ = 0\n  local paren_levels_stack_index38 = 0\n  local paren_levels_stack_index39\
    \ = 0\n  local paren_levels_stack_index40 = 0\n  local paren_levels_stack_index41\
    \ = 0\n  local paren_levels_stack_index42 = 0\n  local paren_levels_stack_index43\
    \ = 0\n  local paren_levels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgrmd66ys.lua:65: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local paren_stack = {}\n  local paren_levels = {}\n  local paren_level = 1\n\
    \  local paren_nesting = 1\n  local paren_level_string = ''\n  local paren_nesting_string\
    \ = ''\n  local paren_level_string_len = 0\n  local paren_nesting_string_len =\
    \ 0\n  local paren_level_string_lens = {}\n  local paren_nesting_string_lens =\
    \ {}\n  local paren_level_string_lens_len = 0\n  local paren_nesting_string_lens_len\
    \ = 0\n  local paren_level_string_lens_lens = {}\n  local paren_nesting_string_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_len = 0\n  local paren_nesting_string_lens_lens_len\
    \ = 0\n  local paren_level_string_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_len = 0\n  local paren_nesting_string_lens_lens_lens_len\
    \ = 0\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_len = 0\n  local paren_nesting_string_lens_lens_lens_len\
    \ = 0\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level_string_lens_lens_lens_lens = {}\n  local paren_nesting_string_lens_lens_lens\
    \ = {}\n  local paren_level\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo9x13jtu.lua:57: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_levels\
    \ = {}\n  local paren_groups = {}\n  local paren_group_index = {}\n  local paren_group_count\
    \ = {}\n  local paren_group_levels = {}\n  local paren_group_counts = {}\n  local\
    \ paren_group_levels_index = {}\n  local paren_group_levels_count = {}\n  local\
    \ paren_group_levels_index = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_indexs = {}\n  local paren_group_levels_counts = {}\n  local\
    \ paren_group_levels_index\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc15uaawo.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_stack_count = {}\n  local paren_level_count = {}\n  local\
    \ paren_stack_string = {}\n  local paren_level_string = {}\n  local paren_stack_string_count\
    \ = {}\n  local paren_level_string_count = {}\n  local paren_stack_string_string\
    \ = {}\n  local paren_level_string_string = {}\n  local paren_stack_string_string_count\
    \ = {}\n  local paren_level_string_string_count = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\n  local paren_stack_string_string_string\
    \ = {}\n  local paren_level_string_string_string = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()())\
    \ ((())) () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (())\
    \ ((())) (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6rtyv7sg.lua:70: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local max_level = 0\n  local level = 0\n  local paren_stack = {}\n  local paren_level\
    \ = {}\n  local paren_level_count = {}\n  local paren_level_stack = {}\n  local\
    \ paren_level_stack_count = {}\n  local paren_level_stack_index = {}\n  local\
    \ paren_level_stack_index2 = {}\n  local paren_level_stack_index3 = {}\n  local\
    \ paren_level_stack_index4 = {}\n  local paren_level_stack_index5 = {}\n  local\
    \ paren_level_stack_index6 = {}\n  local paren_level_stack_index7 = {}\n  local\
    \ paren_level_stack_index8 = {}\n  local paren_level_stack_index9 = {}\n  local\
    \ paren_level_stack_index10 = {}\n  local paren_level_stack_index11 = {}\n  local\
    \ paren_level_stack_index12 = {}\n  local paren_level_stack_index13 = {}\n  local\
    \ paren_level_stack_index14 = {}\n  local paren_level_stack_index15 = {}\n  local\
    \ paren_level_stack_index16 = {}\n  local paren_level_stack_index17 = {}\n  local\
    \ paren_level_stack_index18 = {}\n  local paren_level_stack_index19 = {}\n  local\
    \ paren_level_stack_index20 = {}\n  local paren_level_stack_index21 = {}\n  local\
    \ paren_level_stack_index22 = {}\n  local paren_level_stack_index23 = {}\n  local\
    \ paren_level_stack_index24 = {}\n  local paren_level_stack_index25 = {}\n  local\
    \ paren_level_stack_index26 = {}\n  local paren_level_stack_index27 = {}\n  local\
    \ paren_level_stack_index28 = {}\n  local paren_level_stack_index29 = {}\n  local\
    \ paren_level_stack_index30 = {}\n  local paren_level_stack_index31 = {}\n  local\
    \ paren_level_stack_index32 = {}\n  local paren_level_stack_index33 = {}\n  local\
    \ paren_level_stack_index34 = {}\n  local paren_level_stack_index35 = {}\n  local\
    \ paren_level_stack_index36 = {}\n  local paren_level_stack_index37 = {}\n  local\
    \ paren_level_stack_index38 = {}\n  local paren_level_stack_index39 = {}\n  local\
    \ paren_level_stack_index40 = {}\n  local paren_level_stack_index41 = {}\n  local\
    \ paren_level_stack_index42 = {}\n  local paren_level_stack_index43 = {}\n  local\
    \ paren_level_stack_index44 = {}\n  local paren_level_stack_index45 = {}\n  local\
    \ paren_level_stack_index4\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7xepcj24.lua:69: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822129
- exit_code: 1
  program: "-- Input to this function is a string represented multiple groups for\
    \ nested parentheses separated by spaces.\n-- For each of the group, output the\
    \ deepest level of nesting of parentheses.\n-- E.g. (()()) has maximum two levels\
    \ of nesting while ((())) has three.\n-- >>> parse_nested_parens('(()()) ((()))\
    \ () ((())()())')\n-- {2, 3, 1, 3}\nlocal function parse_nested_parens(paren_string)\n\
    \  local level = 0\n  local max_level = 0\n  local paren_stack = {}\n  for paren\
    \ in string.gmatch(paren_string, '%[()%]') do\n    local paren_level = paren_stack[#paren_stack]\n\
    \    if paren == '(' and paren_level == 0 then\n      paren_stack[#paren_stack]\
    \ = level\n    elseif paren == ')' and paren_level > 0 then\n      local new_level\
    \ = paren_level - 1\n      if new_level > max_level then\n        max_level =\
    \ new_level\n      end\n      paren_stack[#paren_stack] = new_level\n    end\n\
    \  end\n  return max_level\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = parse_nested_parens\n    lu.assertEquals(candidate('(()()) ((()))\
    \ () ((())()())'), {2, 3, 1, 3})\n    lu.assertEquals(candidate('() (()) ((()))\
    \ (((())))'), {1, 2, 3, 4})\n    lu.assertEquals(candidate('(()(())((())))'),\
    \ {4})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph_5uopwv.lua:28:\
    \ expected: {2, 3, 1, 3}\nactual: 0\nstack traceback:\n\t/tmp/tmph_5uopwv.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822129
