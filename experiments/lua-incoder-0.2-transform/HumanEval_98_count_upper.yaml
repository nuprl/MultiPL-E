name: HumanEval_98_count_upper
language: lua
prompt: "-- Given a string s, count the number of uppercase vowels in even indices.\n\
  -- For example:\n-- >>> count_upper('aBCdEf')\n-- 1\n-- >>> count_upper('abcdefg')\n\
  -- 0\n-- >>> count_upper('dBBE')\n-- 0\nlocal function count_upper(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_upper\n\
  \    lu.assertEquals(candidate('aBCdEf'), 1)\n    lu.assertEquals(candidate('abcdefg'),\
  \ 0)\n    lu.assertEquals(candidate('dBBE'), 0)\n    lu.assertEquals(candidate('B'),\
  \ 0)\n    lu.assertEquals(candidate('U'), 1)\n    lu.assertEquals(candidate(''),\
  \ 0)\n    lu.assertEquals(candidate('EEEE'), 2)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local n = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) ~= 'A'\
    \ then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local n = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      n = n + 1\n    end\n\
    \  end\n  return n\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= 'A' then n = n + 1 end\n  end\n  return n\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      count = count\
    \ + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1,\
    \ #s do\n    if string.sub(s, i, i) ~= 'A' then\n      count = count + 1\n   \
    \ end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n \
    \   if string.sub(s,i,i) == string.sub(s,i,i) then count = count + 1 end\n  end\n\
    \  return count\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)\
    \ == string.sub(s,i,i) then count = count + 1 end\n  end\n  return count\nend",
  "  local count = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) then count = count\
    \ + 1 end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) ~= 'A' then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend", "  local n = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= 'A' then\n      n = n + 1\n    end\n  end\n  return n\nend", "  local\
    \ n = 0\n  for i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      n =\
    \ n + 1\n    end\n  end\n  return n\nend", "  local n = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == string.sub(s,i,i) .. 'A' then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend", "  local count = 0\n  for i = 1, #s do\n  \
    \  if string.sub(s,i,i) == string.sub(s,i,i) then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) ~= 'A' and string.sub(s,i,i) ~= 'a' then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if string.sub(s, i, i) ~= 'A' then\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if string.sub(s,i,i) == 'A' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend", "  local count = 0\n  for i = 1, #s do\n    if string.sub(s,\
    \ i, i) ~= 'A' then\n      count = count + 1\n    end\n  end\n  return count\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
