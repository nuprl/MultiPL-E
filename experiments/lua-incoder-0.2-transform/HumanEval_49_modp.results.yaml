language: lua
name: HumanEval_49_modp
results:
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  elseif t < 0 then\n    return modp((t\
    \ - p) + p, p)\n  else\n    return t\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750523
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxpq_rt4s.lua:16:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\
    \t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16: in function\
    \ 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16:\
    \ in function 'modp'\n\t/tmp/tmpxpq_rt4s.lua:16: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return nn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgf1h3064.lua:21:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpgf1h3064.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 or p == 2 or p == 3 then\n    return n\n  end\n\
    \  local r = n % p\n  if r == 0 then\n    return r\n  end\n  return modp(r, p)\
    \ + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fzp8hrn.lua:23:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\
    \t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23: in function\
    \ 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23:\
    \ in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23:\
    \ in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23:\
    \ in function 'modp'\n\t/tmp/tmp2fzp8hrn.lua:23: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local r = n % p\n  if r == 0 then\n    return modp(n,\
    \ p - 1)\n  else\n    return modp(r * p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ympn3bt.lua:33:\
    \ expected: 3, actual: 12\nstack traceback:\n\t/tmp/tmp5ympn3bt.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750518
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  if p == 1 then return n end\n  if p == n then return 1 end\n\
    \  if p == -1 then return -1 end\n  local q = modp(n / p, p)\n  if n % p == 0\
    \ then return q end\n  return q * p + (n - q * p) * p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pwtuagx.lua:17:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\
    \t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17: in function\
    \ 'modp'\n\t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17:\
    \ in function 'modp'\n\t/tmp/tmp0pwtuagx.lua:17: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.350 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg112sc60.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\
    \t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  if nn < 0 then return nil end\n  if nn == 0 then return 1 end\n  local r =\
    \ n % p\n  if r == 0 then return 1 end\n  if r > 0 then return modp(nn, p) end\n\
    \  return modp(nn - 1, p) * p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750523
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n    return q\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyhyu_myq.lua:19:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\
    \t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function\
    \ 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19:\
    \ in function 'modp'\n\t/tmp/tmpyhyu_myq.lua:19: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.320 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  -- Return 2^n\
    \ modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101,\
    \ 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n\
    \  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n    return 1\n  end\n  --\
    \ Return 2^n modulo p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n\
    \  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>>\
    \ modp(100, 101)\n  -- 1\n  local r = 1\n  local m = 1\n  while n > 0 do\n   \
    \ r = r * 2 % p\n    n = n / 2\n    m = m * 2 % p\n  end\n  -- Return r modulo\
    \ p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>>\
    \ modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n\
    \  -- 1\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsw1an9ka.lua:62:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsw1an9ka.lua:62: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750518
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local nn = math.floor(n)\n\
    \  local p = p or 1\n  if nn == n then\n    return p\n  elseif nn == 0 then\n\
    \    return 0\n  end\n  local r = n % p\n  if r == 0 then\n    return modp(nn,\
    \ p)\n  else\n    return modp(r * p, p)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = modp\n    lu.assertEquals(candidate(3,\
    \ 5), 3)\n    lu.assertEquals(candidate(1101, 101), 2)\n    lu.assertEquals(candidate(0,\
    \ 101), 1)\n    lu.assertEquals(candidate(3, 11), 8)\n    lu.assertEquals(candidate(100,\
    \ 101), 1)\n    lu.assertEquals(candidate(30, 5), 4)\n    lu.assertEquals(candidate(31,\
    \ 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeg6doivg.lua:31:\
    \ expected: 3, actual: 5\nstack traceback:\n\t/tmp/tmpeg6doivg.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750518
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local t = 1\n\
    \  while n > p do\n    t = t * p\n    n = n - t\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n  \
    \  lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
    \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp04kwz8e4.lua:24:\
    \ expected: 3, actual: 1\nstack traceback:\n\t/tmp/tmp04kwz8e4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p == n then\n\
    \    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n    return\
    \ q * p + n\n  end\n  return q\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg112sc60.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\
    \t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t/tmp/tmpg112sc60.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpg112sc60.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: -1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  local n1 = math.floor(n)\n\
    \  local n2 = n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n \
    \ local n5 = math.floor(n1 * n4)\n  local n6 = n1 - n5\n  return n5 * p + n6\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
    \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1apbwzh.lua:25:\
    \ expected: 3, actual: 63\nstack traceback:\n\t/tmp/tmpo1apbwzh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750518
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpczngxfdf.lua:26:\
    \ expected: 2, actual: 91\nstack traceback:\n\t/tmp/tmpczngxfdf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp10tw2pwx.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\
    \t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function\
    \ 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14:\
    \ in function 'modp'\n\t/tmp/tmp10tw2pwx.lua:14: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.370 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n   \
    \ return -n\n  end\n  local q = n / p\n  local r = n % p\n  return modp(q, p)\
    \ * p + r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc8k7n8cd.lua:22:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\
    \t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22: in function\
    \ 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22:\
    \ in function 'modp'\n\t/tmp/tmpc8k7n8cd.lua:22: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.430 seconds, 0 successes, 1 error\n"
  timestamp: 1659750519
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if n == 0 then\
    \ return 1 end\n  if p == 0 then return 0 end\n  if p == 1 or p == 2 then return\
    \ n end\n  if p == 3 then return n end\n  if p == 4 then return n end\n  if p\
    \ == 5 then return n end\n  if p == 6 then return n end\n  if p == 7 then return\
    \ n end\n  if p == 8 then return n end\n  if p == 9 then return n end\n  if p\
    \ == 10 then return n end\n  if p == 11 then return n end\n  if p == 12 then return\
    \ n end\n  if p == 13 then return n end\n  if p == 14 then return n end\n  if\
    \ p == 15 then return n end\n  if p == 16 then return n end\n  if p == 17 then\
    \ return n end\n  if p == 18 then return n end\n  if p == 19 then return n end\n\
    \  if p == 20 then return n end\n  if p == 21 then return n end\n  if p == 22\
    \ then return n end\n  if p == 23 then return n end\n  if p == 24 then return\
    \ n end\n  if p == 25 then return n end\n  if p == 26 then return n end\n  if\
    \ p == 27 then return n end\n  if p == 28 then return n end\n  if p == 29 then\
    \ return n end\n  if p == 30 then return n end\n  if p == 31 then return n end\n\
    \  if p == 32 then return n end\n  if p == 33 then return n end\n  if p == 34\
    \ then return n end\n  if p == 35 then return n end\n  if p == 36 then return\
    \ n end\n  if p == 37 then return n end\n  if p == 38 then return n end\n  if\
    \ p == 39 then return n end\n  if p == 40 then return n end\n  if p == 41 then\
    \ return n end\n  if p == 42 then return n end\n  if p == 43 then return n end\n\
    \  if p == 44 then return n end\n  if p == 45 then return n end\n  if p == 46\
    \ then return n end\n  if p == 47 then return n end\n  if p == 48 then return\
    \ n end\n  if p == 49 then return n end\n  if p == 50 then return n end\n  if\
    \ p == 51 then return n end\n  if p == 52 then return n end\n  if p == 53 then\
    \ return n end\n  if p == 54 then return n end\n  if p == 55 then return n end\n\
    \  if p == 56 then \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp62_16uks.lua:83: ''end'' expected (to close ''if'' at line
    69) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750518
- exit_code: 1
  program: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n--\
    \ 3\n-- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n\
    -- 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = modp\n    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101,\
    \ 101), 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
    \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
    \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprp_fxxmr.lua:18:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\
    \t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function\
    \ 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18:\
    \ in function 'modp'\n\t/tmp/tmprp_fxxmr.lua:18: in function 'modp'\n\t...\n\n\
    Ran 1 tests in 0.360 seconds, 0 successes, 1 error\n"
  timestamp: 1659750487
