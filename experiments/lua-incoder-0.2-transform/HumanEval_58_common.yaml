name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two lists.\n-- >>> common({1,\
  \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
  \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local common = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in\
    \ pairs(l2) do\n      if v1 == v2 then\n        table.insert(common, v1)\n   \
    \   end\n    end\n  end\n  return common\nend", "  local common = {}\n  local\
    \ i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n    local e2 =\
    \ l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1 = i1 + 1\n \
    \     i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] = true\n     \
    \ i2 = i2 + 1\n    else\n      common[e1] = true\n      i1 = i1 + 1\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  local i1, i2 = 1, #l1\n  while i1 <= i2 do\n    local e1 = l1[i1]\n    local\
    \ e2 = l2[i2]\n    if e1 == e2 then\n      common[e1] = true\n      i1 = i1 +\
    \ 1\n      i2 = i2 + 1\n    elseif common[e1] then\n      common[e2] = true\n\
    \      i2 = i2 + 1\n    else\n      common[e1] = true\n      i1 = i1 + 1\n   \
    \ end\n  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v1 in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v1 ==\
    \ v2 then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common\
    \ = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1] == l2[j1]\
    \ then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n        j1\
    \ = j1 + 1\n      elseif l1[i1] < l2[j1] then\n        j1 = j1 + 1\n      else\n\
    \        i1 = i1 + 1\n      end\n    end\n    while j1 <= j2 do\n      table.insert(common,\
    \ l2[j1])\n      j1 = j1 + 1\n    end\n    i1 = i1 + 1\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2)\
    \ do\n      if v1 == v2 then\n        table.insert(common, v1)\n      end\n  \
    \  end\n  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local l3 = {}\n  for\
    \ _, v in ipairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in ipairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  local l4 = {}\n  for\
    \ _, v in ipairs(l3) do\n    table.insert(l4, v)\n  end\n  return l4\nend", " \
    \ local common = {}\n  local i1\n  local i2\n  for i1, l1 in ipairs(l1) do\n \
    \   for i2, l2 in ipairs(l2) do\n      if l1 == l2 then\n        common[i1] =\
    \ true\n      end\n    end\n  end\n  return common\nend", "  local l3 = {}\n \
    \ for _, v in pairs(l1) do\n    table.insert(l3, v)\n  end\n  for _, v in pairs(l2)\
    \ do\n    table.insert(l3, v)\n  end\n  table.sort(l3)\n  local l4 = {}\n  for\
    \ _, v in pairs(l3) do\n    table.insert(l4, v)\n  end\n  return l4\nend", " \
    \ local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n\
    \  local common = {}\n  while i1 <= i2 do\n    while j1 <= j2 do\n      if l1[i1]\
    \ == l2[j1] then\n        table.insert(common, l1[i1])\n        i1 = i1 + 1\n\
    \        j1 = j1 + 1\n      else\n        j2 = j2 + 1\n      end\n    end\n  \
    \  i2 = i2 + 1\n  end\n  return common\nend", "  local common = {}\n  for _, v\
    \ in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n  \
    \      table.insert(common, v)\n      end\n    end\n  end\n  return common\nend",
  "  local i1, i2 = 1, #l1\n  local j1, j2 = 1, #l2\n  local common = {}\n  while\
    \ i1 <= i2 do\n    local e1 = l1[i1]\n    local e2 = l2[j2]\n    common[e1] =\
    \ common[e1] or e2\n    i1 = i1 + 1\n    j2 = j2 + 1\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
