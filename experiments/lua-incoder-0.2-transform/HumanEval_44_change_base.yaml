name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  local i = 1\n  while x > 0 do\n    local digit =\
    \ x%base\n    s = string.format('%s%d', s, digit)\n    x = math.floor(x/base)\n\
    \    i = i + 1\n  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local remainder = x - base*digits\n\
    \  return tostring(digits)..change_base(remainder, base)\nend", "  -- base numbers\
    \ are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)*base\n\
    \  local result = {}\n  for i = 1, digits do\n    result[#result + 1] = string.char((x\
    \ % base) + ord('0'))\n  end\n  return table.concat(result, '') .. string.char(x\
    \ - digits*base)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.char(digit+48)\n    x = math.floor(x/10)\n  end\n\
    \  if x ~= 0 then\n    result = result .. string.char(x+48)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  local remainder\n  while digits do\n    remainder = x % base\n    x = x / base\n\
    \    result = result .. string.format(\"%d\", remainder)\n    digits = digits\
    \ - 1\n  end\n  return result .. string.format(\"%d\", x)\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base * digits\n  return tostring(digits) .. tostring(x)\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  local i = 0\n\
    \  while digits > 0 do\n    local digit = math.floor((x - base * math.pow(base,\
    \ digits)) / math.pow(base, digits))\n    if digit == 0 then\n      break\n  \
    \  end\n    result = result .. digit\n    digits = digits - 1\n    i = i + 1\n\
    \  end\n  if digits == 0 then\n    result = result .. \"0\"\n  end\n  return result\n\
    end", "  if base < 2 then\n    error('Base must be greater than 1.')\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result =\
    \ {}\n  while x ~= 0 do\n    table.insert(result, string.format('%0', base))\n\
    \    x = math.floor(x/base)\n  end\n  table.insert(result, string.format('%0',\
    \ digits))\n  return table.concat(result)\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base * digits\n  return string.format('%d', digits) ..\
    \ string.format('%0*d', base, remainder)\nend", "\tlocal digits = math.floor(x/base)\n\
    \tx = x - base*digits\n\tlocal result = \"\"\n\twhile x > 0 do\n\t\tresult = string.format(\"\
    %0\" .. digits .. \"d\", x%base) .. result\n\t\tx = math.floor(x/base)\n\tend\n\
    \treturn result\nend", "    if x < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n", "\tlocal digits = math.floor(math.log(x, base))\n\t\
    local result = \"\"\n\tlocal i = 0\n\twhile digits > 0 do\n\t\tlocal digit = x\
    \ % base\n\t\tx = x / base\n\t\tresult = string.format(\"%s%s\", digit, result)\n\
    \t\tdigits = digits - 1\n\tend\n\tif x > 1 then\n\t\tresult = string.format(\"\
    %s%s\", x, result)\n\tend\n\treturn result\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  if remainder < 0 then\n    digits = digits\
    \ + 1\n    remainder = 0\n  end\n  return table.concat(digits, base), remainder\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - digits * base\n\
    \  return string.format('%d', digits) .. string.format('%d', remainder)\nend",
  "  if base < 10 then\n    local digits = math.floor(x/base)+1\n    return base *\
    \ digits .. x%base\n  end\n  return x\nend", "  local s = \"\"\n  local i = 1\n\
    \  while x > 0 do\n    local digit = x%base\n    s = string.rep(\"0\", digit)\
    \ + s\n    x = math.floor(x/base)\n  end\n  return s\nend", "    if x < 10 then\n\
    \        return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  if x < 10 then\n    return tostring(x)\n \
    \ end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ .. tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n  while\
    \ x > 0 do\n    local digit = tostring(x)\n    local carry = 1\n    if x > 1 then\n\
    \      digit = digit .. \"0\"\n      carry = digit:sub(1, 1)\n    end\n    if\
    \ digits > 0 then\n      digit = digit .. \"0\"\n    end\n    if carry > 0 then\n\
    \      digit = digit .. \"1\"\n    end\n    result = result .. digit\n    x =\
    \ x - carry .. base\n    digits = digits - 1\n  end\n  return result\nend", " \
    \ -- base numbers are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
