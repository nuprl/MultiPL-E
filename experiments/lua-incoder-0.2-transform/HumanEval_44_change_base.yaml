name: HumanEval_44_change_base
language: lua
prompt: "-- Change numerical base of input number x to base.\n-- return string representation\
  \ after the conversion.\n-- base numbers are less than 10.\n-- >>> change_base(8,\
  \ 3)\n-- '22'\n-- >>> change_base(8, 2)\n-- '1000'\n-- >>> change_base(7, 2)\n--\
  \ '111'\nlocal function change_base(x, base)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
  \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9, 3),\
  \ '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
  \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
  \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
  \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
  \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
  \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  local i = 1\n  while x > 0 do\n    local digit =\
    \ x%base\n    s = string.format('%s%d', s, digit)\n    x = math.floor(x/base)\n\
    \    i = i + 1\n  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local remainder = x - base*digits\n\
    \  return tostring(digits)..change_base(remainder, base)\nend", "  -- base numbers\
    \ are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)*base\n\
    \  local result = {}\n  for i = 1, digits do\n    result[#result + 1] = string.char((x\
    \ % base) + ord('0'))\n  end\n  return table.concat(result, '') .. string.char(x\
    \ - digits*base)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.char(digit+48)\n    x = math.floor(x/10)\n  end\n\
    \  if x ~= 0 then\n    result = result .. string.char(x+48)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  local remainder\n  while digits do\n    remainder = x % base\n    x = x / base\n\
    \    result = result .. string.format(\"%d\", remainder)\n    digits = digits\
    \ - 1\n  end\n  return result .. string.format(\"%d\", x)\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n \
    \ x = x - base * digits\n  return tostring(digits) .. tostring(x)\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  local i = 0\n\
    \  while digits > 0 do\n    local digit = math.floor((x - base * math.pow(base,\
    \ digits)) / math.pow(base, digits))\n    if digit == 0 then\n      break\n  \
    \  end\n    result = result .. digit\n    digits = digits - 1\n    i = i + 1\n\
    \  end\n  if digits == 0 then\n    result = result .. \"0\"\n  end\n  return result\n\
    end", "  if base < 2 then\n    error('Base must be greater than 1.')\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result =\
    \ {}\n  while x ~= 0 do\n    table.insert(result, string.format('%0', base))\n\
    \    x = math.floor(x/base)\n  end\n  table.insert(result, string.format('%0',\
    \ digits))\n  return table.concat(result)\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base * digits\n  return string.format('%d', digits) ..\
    \ string.format('%0*d', base, remainder)\nend", "\tlocal digits = math.floor(x/base)\n\
    \tx = x - base*digits\n\tlocal result = \"\"\n\twhile x > 0 do\n\t\tresult = string.format(\"\
    %0\" .. digits .. \"d\", x%base) .. result\n\t\tx = math.floor(x/base)\n\tend\n\
    \treturn result\nend", "    if x < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 16 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 2 then\n        return string.format('%0',\
    \ base) .. x\n    end\n    if base < 10 then\n        return string.format('%0',\
    \ base) .. x\n    end\n", "\tlocal digits = math.floor(math.log(x, base))\n\t\
    local result = \"\"\n\tlocal i = 0\n\twhile digits > 0 do\n\t\tlocal digit = x\
    \ % base\n\t\tx = x / base\n\t\tresult = string.format(\"%s%s\", digit, result)\n\
    \t\tdigits = digits - 1\n\tend\n\tif x > 1 then\n\t\tresult = string.format(\"\
    %s%s\", x, result)\n\tend\n\treturn result\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  if remainder < 0 then\n    digits = digits\
    \ + 1\n    remainder = 0\n  end\n  return table.concat(digits, base), remainder\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - digits * base\n\
    \  return string.format('%d', digits) .. string.format('%d', remainder)\nend",
  "  if base < 10 then\n    local digits = math.floor(x/base)+1\n    return base *\
    \ digits .. x%base\n  end\n  return x\nend", "  local s = \"\"\n  local i = 1\n\
    \  while x > 0 do\n    local digit = x%base\n    s = string.rep(\"0\", digit)\
    \ + s\n    x = math.floor(x/base)\n  end\n  return s\nend", "    if x < 10 then\n\
    \        return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  if x < 10 then\n    return tostring(x)\n \
    \ end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ .. tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n  while\
    \ x > 0 do\n    local digit = tostring(x)\n    local carry = 1\n    if x > 1 then\n\
    \      digit = digit .. \"0\"\n      carry = digit:sub(1, 1)\n    end\n    if\
    \ digits > 0 then\n      digit = digit .. \"0\"\n    end\n    if carry > 0 then\n\
    \      digit = digit .. \"1\"\n    end\n    result = result .. digit\n    x =\
    \ x - carry .. base\n    digits = digits - 1\n  end\n  return result\nend", " \
    \ -- base numbers are less than 10.\n  assert(base < 10)\n  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = x / base\n    local\
    \ mod = math.floor(digit % base)\n    result = mod .. result\n    x = digit\n\
    \  end\n  return result .. x\nend", "  local digits = math.floor(x/base)\n  local\
    \ remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n \
    \ local digits = math.floor(x/base)\n  x = x - base*digits\n  local result = \"\
    \"\n  while x > 0 do\n    local digit = tostring(x%base)\n    x = x/base\n   \
    \ result = digit .. result\n  end\n  return result .. tostring(x)\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return change_base(remainder, base) +\
    \ tostring(digits)\nend", "  -- Base 10 numbers are represented as strings. Convert\
    \ to a number of\n  -- base base by multiplying by base raised to the power of\
    \ base.\n  -- >>> change_base(8, 3)\n  -- '22'\n  -- >>> change_base(8, 2)\n \
    \ -- '1000'\n  -- >>> change_base(7, 2)\n  -- '111'\n  -- >>> change_base(7, 3)\n\
    \  -- '1110'\n  -- >>> change_base(7, 4)\n  -- '11100'\n  -- >>> change_base(7,\
    \ 5)\n  -- '111010'\n  -- >>> change_base(7, 6)\n  -- '1110100'\n  -- >>> change_base(7,\
    \ 7)\n  -- '11101011'\n  -- >>> change_base(7, 8)\n  -- '111010110'\n  -- >>>\
    \ change_base(7, 9)\n  -- '1110101011'\n  -- >>> change_base(7, 10)\n  -- '11101011010'\n\
    \  -- >>> change_base(7, 11)\n  -- '1110101101011'\n  -- >>> change_base(7, 12)\n\
    \  -- '11101011010110'\n  -- >>> change_base(7, 13)\n  -- '1110101101011010'\n\
    \  -- >>> change_base(7, 14)\n  -- '111010110101101011'\n  -- >>> change_base(7,\
    \ 15)\n  -- '1110101101011010110'\n  -- >>> change_base(7, 16)\n  -- '111010110101101011010'\n\
    \  -- >>> change_base(7, 17)\n  -- '11101011010110101101011'\n  -- >>> change_base(7,\
    \ 18)\n  -- '111010110101101011010110'\n  -- >>> change_base(7, 19)\n  -- '11101011010110101101011010'\n\
    \  -- >>> change_base(7, 20)\n  -- '1110101101011010110101101011'\n  -- >>> change_base(7,\
    \ 21)\n  -- '11101011010110101101011010110'\n  -- >>> change_base(7, 22)\n  --\
    \ '1110101101011010110101101011010'\n  -- >>> change_base(7, 23)\n  -- '1110101101011010110101101011010110'\n\
    \  -- >>> change_base(7, 24)\n  -- '111010110101101011010110101101011010'\n  --\
    \ >>> change_base(7, 25)\n  -- '111010110101101011010110101101011010110'\n  --\
    \ >>> change_", "\tlocal digits = math.floor(x/base)\n\tx = x - base*digits\n\t\
    local result = \"\"\n\twhile x > 0 do\n\t\tresult = string.format(\"%0\" .. digits\
    \ .. \"d\", x%base) .. result\n\t\tx = x/base\n\tend\n\treturn result\nend", "\t\
    local digits = math.floor(math.log(x, base))\n\tlocal result = \"\"\n\twhile digits\
    \ > 0 do\n\t\tlocal digit = x % base\n\t\tx = x / base\n\t\tresult = string.format(\"\
    %s%s\", digit, result)\n\t\tdigits = digits - 1\n\tend\n\treturn result\nend",
  "  if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n    return\
    \ string.format(\"%0*d\", base, x)\n  end\nend", "    if x < 10 then\n       \
    \ return string.format(\"%0*d\", base, x)\n    else\n        return string.format(\"\
    %0*d\", base, x)\n    end\nend", "  -- base is less than 10\n  if base < 10 then\n\
    \    -- base is less than 10\n    if base == 0 then\n      -- base is less than\
    \ 10\n      -- return string representation after the conversion.\n      return\
    \ tostring(x)\n    else\n      -- base is less than 10\n      -- return string\
    \ representation after the conversion.\n      return tostring(x * base^0)\n  \
    \  end\n  else\n    -- base is greater than 10\n    -- return string representation\
    \ after the conversion.\n    return tostring(x/base^0)\n  end\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x ~= 0 do\n    local\
    \ digit = tostring(x%base)\n    x = x/base\n    result = digit .. result\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. digit\n    x = math.floor(x/10)\n  end\n  if x > 0 then\n\
    \    result = result .. x\n  end\n  return result\nend", "  local digits = math.floor(math.log(abs(x),\
    \ base))\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / base) % (base))\n    result = string.format(\"%s%s\", digit, result)\n   \
    \ x = x / base\n  end\n  return result\nend", "  if x < 10 then\n    return string.format(\"\
    %0\" .. base .. \"d\", x)\n  end\n  local s = \"\"\n  local i = 1\n  while x >\
    \ 0 do\n    local digit = x % base\n    x = x / base\n    s = string.format(\"\
    %0\" .. base .. \"d\", digit) .. s\n    i = i + 1\n  end\n  return s\nend", " \
    \ local digits = math.floor(x/base)+1\n  x = x - base*digits\n  local result =\
    \ \"\"\n  while x ~= 0 do\n    local digit = math.floor(x/base)+1\n    if digit\
    \ > 9 then\n      result = result .. \"0\"\n    end\n    result = result .. digit\n\
    \    x = x - base*digit\n  end\n  return result\nend", "  local digits = math.floor(math.log(math.abs(x),\
    \ base))\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor((x / base ** i) * base)\n    result = result .. digit\n \
    \   i = i + 1\n  end\n  return result\nend", "  if base < 2 then\n    error('Base\
    \ must be 2 or greater.')\n  end\n  local digits = math.floor(x/base^0)\n  return\
    \ base * digits\nend", "  -- base numbers are less than 10.\n  assert(base < 10)\n\
    \  local digits = math.floor(x/base)*base\n  x = x - digits + base\n  return x\n\
    end", "  if x < 10 then\n    return string.format(\"%0\" .. base .. \"d\", x)\n\
    \  else\n    return string.format(\"%0\" .. base .. \"d\", x / base)\n  end\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0\" .. digits .. \"d\", x)\nend", "  local digits = math.floor(x/base)\n  local\
    \ remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ remainder)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n  while\
    \ x > 0 do\n    local digit = tostring(x)\n    local carry = 1\n    if x > base\
    \ then\n      digit = digit..\"0\"\n      carry = 1\n    end\n    if digits >\
    \ 0 then\n      digit = digit..\"0\"\n    end\n    if carry > 0 then\n      digit\
    \ = digit..\"1\"\n    end\n    result = digit..result\n    x = x - carry * base\n\
    \    digits = digits - 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x/base)\n\
    \    digits = math.floor(x/base)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits do\n    local\
    \ digit = math.floor(x/base*base)+1\n    if digit > 9 then\n      result = result\
    \ .. \"0\"\n    end\n    result = result .. digit\n    x = x - digit*base\n  end\n\
    \  return result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(math.log(x / base))\n  local digits_str = tostring(digits)\n\
    \  local digits_len = #digits_str\n  local digits_pow = math.pow(base, digits)\n\
    \  local digits_div = digits_pow / x\n  local digits_mod = digits_pow % x\n  local\
    \ digits_str = digits_str:sub(1, digits_len - digits_div)\n  local digits_str\
    \ = digits_str .. tostring(digits_mod)\n  return digits_str\nend", "  if x < 10\
    \ then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(abs(x),\
    \ base))\n  if digits == 0 then\n    return tostring(x)\n  end\n  local factor\
    \ = 10^(digits - 1)\n  local digit = x % factor\n  x = x / factor\n  local result\
    \ = \"\"\n  while x > 0 do\n    local digit = x % base\n    x = x / base\n   \
    \ result = tostring(digit) + result\n  end\n  return result\nend", "\tlocal digits\
    \ = math.floor(x/base)+1\n\tlocal result = \"\"\n\twhile digits > 0 do\n\t\tlocal\
    \ digit = math.mod(x, base)\n\t\tx = math.floor(x/base)\n\t\tresult = string.format(\"\
    %s%d%s\", result, digit, base > 1 and \"-\" or \"\")\n\tend\n\treturn result\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return tostring(digits)..change_base(rest,\
    \ base)\nend", "  if base < 2 then\n    error(\"Base must be greater than or equal\
    \ to 2\", 2)\n  end\n  local digits = math.floor(x/base^0)\n  x = x - base*digits\n\
    \  return tostring(base^digits)\nend", "  if x < 10 then\n    return string.format(\"\
    %0*d\", base, x)\n  else\n    return string.format(\"%0*d\", base, x - 10)\n \
    \ end\nend", "  -- Base 10 to base 36\n  if base == 10 then\n    local digits\
    \ = x:gsub(\"^(-?%d+)$\", \"%1\")\n    return string.char(digits + 48)\n  -- Base\
    \ 36 to base 10\n  elseif base == 36 then\n    local digits = x:gsub(\"^(-?%d+)$\"\
    , \"%1\")\n    return string.char(digits - 10)\n  -- Base 10 to base 10\n  elseif\
    \ base == 10 then\n    return x\n  end\n  -- Base 36 to base 36\n  elseif base\
    \ == 36 then\n    return x\n  end\nend", "    if x < 10 then\n        return string.format(\"\
    %0*d\", base, x)\n    else\n        return string.format(\"%0*d\", base, x - 10)\n\
    \    end\nend", "    if base < 2 then\n        error('Base must be greater than\
    \ 1.')\n    end\n    if base == 2 then\n        return string.format('%0*d', x,\
    \ x)\n    end\n    local digits = math.floor(math.log(x, base))\n    if digits\
    \ == 0 then\n        return string.format('%0*d', x, x)\n    end\n    local factor\
    \ = 10^(digits - 1)\n    local digit = x % factor\n    return string.format('%0*d',\
    \ digit, factor - digit)\nend", "  local s = \"\"\n  local bases = {\n    [0]\
    \ = \"0\",\n    [1] = \"1\",\n    [2] = \"2\",\n    [3] = \"3\",\n    [4] = \"\
    4\",\n    [5] = \"5\",\n    [6] = \"6\",\n    [7] = \"7\",\n    [8] = \"8\",\n\
    \    [9] = \"9\",\n  }\n  local base_index = bases[base]\n  while x >= base_index\
    \ do\n    s = base_index .. s\n    x = x - base_index\n    base_index = bases[base]\n\
    \  end\n  return s\nend", "  local digits = math.floor(x/base)\n  local remainder\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%d',\
    \ remainder)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - digits * base\n  local result = \"\"\n\
    \  while x > 0 do\n    local digit = tostring(x%base)\n    x = math.floor(x/base)\n\
    \    result = digit .. result\n  end\n  return result .. tostring(x)\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + change_base(x, base)\n\
    end", "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n \
    \ return string.format('%d', digits)..string.format('%d', rest)\nend", "  if x\
    \ < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  if x < 10 then\n    return\
    \ tostring(x)\n  end\n  local digits = math.floor(x", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format('%0*d', base, digits)\nend", " \
    \   if x < 10 then\n        return string.format(\"%0\" .. base .. \"d\", x)\n\
    \    else\n        return change_base(x / base, base)\n    end\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  while digits\
    \ > 0 do\n    local digit = math.floor((digits - 1) / base) * base\n    result\
    \ = string.format(\"%s%0*d\", result, base, digit)\n    digits = digits - (digit\
    \ - math.floor((digits - 1) / base) * base)\n  end\n  return result\nend", " \
    \ if base < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local result = \"\"\n  while x >= base do\n    local\
    \ digit = tostring(x%base)\n    x = x / base\n    result = result .. digit\n \
    \ end\n  return result .. tostring(x)\nend", "  if x < 10 then\n    return string.format(\"\
    %0*d\", base, x)\n  else\n    return string.format(\"%0*d\", base, x)\n  end\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = x % base\n    local remainder = x /\
    \ base\n    local new_digit = math.floor(remainder)\n    result = result .. string.format(\"\
    %0\" .. digits .. \"d\", new_digit)\n    x = remainder\n  end\n  return result\
    \ .. string.format(\"%0\" .. digits .. \"d\", x)\nend", "  if x < 10 then\n  \
    \  return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  local base10 = 10\n  local base2 = 2\n  local base8 = 8\n  local base16 = 16\n\
    \  local base32 = 32\n  local base64 = 64\n  local base128 = 128\n  local base256\
    \ = 256\n  local base512 = 512\n  local base1024 = 1024\n  local base2048 = 2048\n\
    \  local base4096 = 4096\n  local base8192  = 8192\n  local base16384 = 16384\n\
    \  local base32768 = 32768\n  local base65536 = 65536\n  local base131072 = 131072\n\
    \  local base262144 = 262144\n  local base524288 = 524288\n  local base1048576\
    \ = 1048576\n  local base2097152 = 2097152\n  local base4194304 = 4194304\n  local\
    \ base8388608 = 8388608\n  local base16777216 = 16777216\n  local base33554432\
    \ = 33554432\n  local base67108864 = 67108864\n  local base134217728 = 134217728\n\
    \  local base268435456 = 268435456\n  local base536870912 = 536747712\n  local\
    \ base1073741824 = 1073741824\n  local base2147483648 = 2147483648\n  local base4294967296\
    \ = 4294967296\n  local base8589934592 = 8589934592\n  local base17179869184 =\
    \ 17179869184\n  local base34359738368 = 34359738368\n  local base68719476736\
    \ = 28794001728\n  local base137438953472 = 32825814784\n  local base274877906944\
    \ = 28794001728\n  local base549755813888 = 549755813888\n  local base1099511627776\
    \ = 327670080\n  local base2199023255552 = 28794001728\n  local base4398046511104\
    \ = 4398046511104\n  local base8796093022208 = 8796093022208\n  local base17592186044416\
    \ = 1759218", "    if x < 10 then\n        return tostring(x)\n    end\n    local\
    \ digits = math.floor(x/base)\n    local rest = x - base*digits\n    return tostring(digits)..change_base(rest,\
    \ base)\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/base%10)\n   \
    \ result = string.sub(result, 1, digits-1) + digit\n    x = math.floor(x/10)\n\
    \    digits = digits - 1\n  end\n  return result .. x\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) .. tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base%10)\n    local carry = digit > 0 and\
    \ 1 or 0\n    local digit = digit == 0 and 1 or digit\n    local digit = digit\
    \ * base\n    local digit = digit + carry\n    result = result .. digit\n    x\
    \ = x - digit*base\n  end\n  return result\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x/base)\n\
    \    digits = digits-1 \n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format(\"%0*d\", base, digits)\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + tostring(x)\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  local digits_str = tostring(digits)\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digits_len = #digits_str\n\
    \  local digits_len = #digits_str\n  local digits_len = #digits_str\n  local digits_len\
    \ = #digits_str\n  local digits_len = #digits_str\n  local digit", "  local digits\
    \ = math.floor(x/base)+1\n  x = x - base*digits\n  local result = \"\"\n  while\
    \ x >= base do\n    result = string.format(\"%0*d\", base, x%base) + result\n\
    \    x = x/base\n  end\n  return string.format(\"%0*d\", digits, x) + result\n\
    end", "  -- base numbers are less than 10.\n  assert(base < 10)\n  local digits\
    \ = math.floor(x/base)*base\n  -- return string representation after the conversion.\n\
    \  return string.sub(tostring(digits), 1, base-1)\nend", "  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, rest)\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.sub(result, 1, i-1) + digit\n    x = math.floor(x/10)\n \
    \ end\n  return result .. x\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result\
    \ = \"\"\n  while x >= base do\n    local digit = tostring(x)\n    x = x - base\n\
    \    result = result .. digit\n  end\n  return result .. tostring(x)\nend", "\t\
    local digits = math.floor(x/base)\n\tx = x - base*digits\n\treturn string.format(\"\
    %0*d\", base, digits)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n\
    \  while x > 0 do\n    local digit = tostring(x)\n    local carry = 1\n    if\
    \ x > base then\n      digit = digit..\"0\"\n      carry = 1\n    end\n    local\
    \ digits = math.floor(x/base)\n    x = x % base\n    if digits > 0 then\n    \
    \  result = digit..carry..result\n    end\n  end\n  if digits > 0 then\n    result\
    \ = digit..result\n  end\n  return result\nend", "  local s = \"\"\n  local i\
    \ = 1\n  while x > 0 do\n    local digit = x%base\n    s = string.format(\"%0\"\
    \ .. tostring(base) .. \"d\", digit) + s\n    x = math.floor(x/base)\n  end\n\
    \  return s\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x - digits * base\n  local digits_str = tostring(digits)\n\
    \  if digits_str ~= '0' then\n    digits_str = change_base(digits_str, base)\n\
    \  end\n  return digits_str .. tostring(x)\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ % base) / 10)\n    digits = math.floor((digits % base) / 10)\n    result = string.sub(bases[base],\
    \ digit, digit-1) + result\n  end\n  return result\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) + tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  while digits do\n\
    \    local digit = x / base\n    local remainder = x % base\n    local result\
    \ = result .. string.format(\"%0*d\", digits, remainder)\n    x = base\n    digits\
    \ = digits - 1\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - digits * base\n  return string.format('%d', digits) ..\
    \ string.format('%0', base) .. string.format('%d', remainder)\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = math.floor(x/base)\n    local remainder = x - digit*base\n\
    \    if remainder > 0 then\n      result = string.format(\"%s%d%s\", result, digit,\
    \ remainder)\n    else\n      result = string.format(\"%s%d\", result, digit)\n\
    \    end\n    x = x - digit*base\n    digits = digits - 1\n  end\n  return result\n\
    end", "  -- base numbers are less than 10.\n  assert(base < 10)\n  local digits\
    \ = math.floor(math.log(abs(x), base))\n  local result = \"\"\n  local i = 0\n\
    \  while i < digits do\n    local digit = math.floor((x / base ** i) % 10)\n \
    \   result = string.sub(result, 1, i-1) + digit\n    i = i + 1\n  end\n  return\
    \ result\nend", "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n\
    \  return string.format('%d', digits)..string.format('%0*d', base, rest)\nend",
  "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    local digit = math.floor(x/base*base)+1\n    result = result .. digit\n\
    \    x = x - digit*base\n  end\n  return result\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ base)+1\n    local digitstr = string.format(\"%0*d\", base, digit)\n    result\
    \ = result .. digitstr\n    x = math.floor(x/base)\n  end\n  return result\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  if x > 9 then\n    digits = digits + 1\n  end\n  return\
    \ tostring(digits) .. tostring(x)\nend", "  local s = \"\"\n  local i = 1\n  while\
    \ x > 0 do\n    local digit = x % base\n    s = string.rep(\"0\", i - 1) + digit\
    \ .. s\n    x = math.floor(x/base)\n    i = i + 1\n  end\n  return s\nend", "\t\
    local digits = math.floor(math.log(x, base))\n\tlocal result = \"\"\n\twhile digits\
    \ > 0 do\n\t\tlocal digit = x % base\n\t\tx = x / base\n\t\tresult = string.sub(tostring(digit),\
    \ -digit, -1) + result\n\t\tdigits = digits - 1\n\tend\n\treturn result .. tostring(x)\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", base, digits)\nend", "  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return string.format(\"%0*d\", base, digits)\nend", "  local digits = math.floor(x/base)\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.mod(x, base)\n\
    \    result = string.format(\"%s%s\", digit, result)\n    x = math.floor(x/base)\n\
    \    digits = math.floor(x/base)\n  end\n  return result\nend", "  if x < 10 then\n\
    \    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return tostring(base*digits) + tostring(x)\nend", "  local digits\
    \ = math.floor(math.log(abs(x), base))\n  local result = \"\"\n  local i = 1\n\
    \  while i <= digits do\n    local digit = math.floor(x/base**i)\n    result =\
    \ string.format(\"%0\" .. digit .. \"d\", base) .. result\n    i = i + 1\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log(x, base))\n  local\
    \ result = \"\"\n  local i = 0\n  while digits > 0 do\n    local digit = math.floor(x/base%10)\n\
    \    result = string.sub(bases, digit*base+digit) + result\n    x = math.floor(x/base)\n\
    \    digits = digits - 1\n  end\n  return result..x\nend", "  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  local res = ''\n  while digits > 0 do\n    local digit\
    \ = digits % base\n    res = string.format('%s%d%s', res, digit, mod and '-' or\
    \ '+')\n    digits = math.floor(digits/base)\n    mod = mod % base\n  end\n  return\
    \ res\nend", "  local digits = math.floor(x/base)+1\n  x = x - base*digits\n \
    \ local result = \"\"\n  while x ~= 0 do\n    local digit = math.floor(x/base)+1\n\
    \    if digit > 9 then\n      result = result .. \"0\"\n    end\n    result =\
    \ result .. tostring(digit)\n    x = x - base*digit\n  end\n  return result\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - base * digits\n\
    \  return string.format('%d', digits) .. string.format('%0', math.abs(remainder))\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - digits * base\n  return tostring(x) + tostring(digits)\nend", "  local\
    \ digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0\" .. digits .. \"d\", x)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ + tostring(x)\nend", "  if base < 2 then\n    error('base must be >= 2')\n \
    \ end\n  local digits = math.floor(math.log(x, base))\n  if digits == 0 then\n\
    \    return string.format(\"%g\", x)\n  end\n  local factor = 10^(digits - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digits_str, 1, digits_len - 1)\n\
    \  local digits_str = string.format(\"%g\", x / factor)\n  local digits_len =\
    \ #digits_str\n  local digits_str = string.sub(digit", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.mod(x,\
    \ base)\n    result = result .. string.format(\"%d\", digit)\n    x = math.floor(x/base)\n\
    \  end\n  return result .. string.format(\"%d\", x)\nend", "\tlocal digits = math.floor(x/base)\n\
    \tlocal mod = x % base\n\treturn string.format('%d', digits)..string.format('%c',\
    \ mod)\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  while digits > 0 do\n    local digit = x % base\n    local remainder\
    \ = x / base\n    local result = string.format(\"%s%s\", digit, result)\n    x\
    \ = remainder\n    digits = digits - 1\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/base)+1\n  local result = {}\n  for i = 1, digits do\n\
    \    table.insert(result, base*i)\n  end\n  return table.concat(result)\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local result = \"\"\n  while x ~= 0 do\n    local digit\
    \ = tostring(x%base)\n    x = x/base\n    if x ~= 0 then\n      result = digit\
    \ .. result\n    end\n  end\n  return result .. tostring(digits)\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = math.mod(x, base)\n    result = string.format(\"%s%s\", digit,\
    \ result)\n    x = math.floor(x/base)\n    digits = math.floor(x/base)\n  end\n\
    \  return result\nend", "  if base < 2 then\n    error(\"base must be >= 2\")\n\
    \  end\n  local s = \"\"\n  while x > 0 do\n    local digit = x%base\n    s =\
    \ string.format(\"%d%s\", digit, s)\n    x = math.floor(x/base)\n  end\n  return\
    \ s\nend", "  local s = \"\"\n  local i = 1\n  while x > 0 do\n    local digit\
    \ = x%base\n    s = string.rep(\"0\", digit) + s\n    x = math.floor(x/base)\n\
    \    i = i + 1\n  end\n  return s\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result\
    \ = \"\"\n  while x > 0 do\n    local digit = tostring(x)\n    x = x - digit\n\
    \    result = digit .. result\n  end\n  return result\nend", "  local digits =\
    \ math.floor(x/base)\n  local mod = x % base\n  return string.format('%d', digits)\
    \ .. string.format('%0', mod)\nend", "  -- Base must be less than 10\n  if base\
    \ < 10 then\n    error('Base must be less than 10')\n  end\n  -- Base must be\
    \ greater than or equal to 1\n  if base > 1 then\n    error('Base must be greater\
    \ than or equal to 1')\n  end\n  -- Base must be an integer\n  if base ~= tonumber(base)\
    \ then\n    error('Base must be an integer')\n  end\n  -- Base must be greater\
    \ than or equal to 0\n  if base < 0 then\n    error('Base must be greater than\
    \ or equal to 0')\n  end\n  -- Base must be less than or equal to 10\n  if base\
    \ > 10 then\n    error('Base must be less than or equal to 10')\n  end\n  -- Base\
    \ must be an integer\n  if base ~= tonumber(base) then\n    error('Base must be\
    \ an integer')\n  end\n  -- Base must be greater than or equal to 0\n  if base\
    \ < 0 then\n    error('Base must be greater than or equal to 0')\n  end\n  --\
    \ Base must be less than or equal to 10\n  if base > 10 then\n    error('Base\
    \ must be less than or equal to 10')\n  end\n  -- Base must be an integer\n  if\
    \ base ~= tonumber(base) then\n    error('Base must be an integer')\n  end\n \
    \ -- Base must be greater than or equal to 0\n  if base < 0 then\n    error('Base\
    \ must be greater than or equal to 0')\n  end\n  -- Base must be less than or\
    \ equal to 10\n  if base > 10 then\n    error('Base must be less than or equal\
    \ to 10')\n  end\n  -- Base must be an integer\n  if base ~= tonumber(base) then\n\
    \    error('Base must be an integer')\n  end\n  -- Base must be greater than or\
    \ equal to 0\n  if base < 0 then\n    error('Base must be greater than or equal\
    \ to 0')\n  end\n  -- Base must be less than or equal to 10\n  if base > 10 then\n\
    \    error('Base must be less than or equal to 10')\n  end\n  -- Base must be\
    \ an integer\n  if base ~= tonumber(base) then\n    error('Base must be an integer')\n\
    \  end\n  -- Base must be greater than or equal to 0\n  if base < 0 then\n   \
    \ error('Base must be greater than or equal to 0')\n  end\n  -- Base must be less\
    \ than or equal to 10\n  if base > 10 then\n    error('Base must be less than\
    \ or equal to 10')\n  end\n  -- Base must be an integer\n  if base ~= tonumber(base)\
    \ then\n    error('Base must be an integer')\n  end\n  -- Base must be greater\
    \ than or equal to 0\n  if base < 0 then\n    error('Base must be greater than\
    \ or equal to 0')\n  end\n  -- Base must be less than or equal to 10\n  if base\
    \ > 10 then\n    ", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n  \
    \  result = string.sub(result, 1, i-1) + digit\n    x = math.floor(x/10)\n  end\n\
    \  if x > 0 then\n    result = result .. x\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  while digits\
    \ > 0 do\n    local digit = x % base\n    local remainder = x / base\n    local\
    \ result = string.format(\"%s%0*d\", result,\n      math.abs(digits), digit)\n\
    \    x = remainder\n    digits = digits - 1\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log(x, base))\n  local result = \"\"\n  for i\
    \ = 1, digits do\n    local digit = math.floor(x/base%10)\n    result = result\
    \ .. string.char(digit)\n    x = math.floor(x/10)\n  end\n  return result .. x\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  local result = \"\"\n  local power = base\n  for i = 1, digits do\n\
    \    local digit = tostring(x:mod(power))\n    local mod = x:mod(power)\n    local\
    \ carry = (mod == 0 and 1 or mod)\n    power = power * base\n    result = result\
    \ .. digit\n    if carry then\n      result = result .. \"+\"\n    end\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log(abs(x), base))\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n\
    \    result = result .. string.format(\"%d\", digit)\n    x = math.floor(x/base)\n\
    \  end\n  if x > 0 then\n    result = result .. string.format(\"%d\", x)\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/base)+1\n  local result\
    \ = \"\"\n  local i = 1\n  while digits > 0 do\n    local digit = math.floor(x/base*base)+1\n\
    \    local digitString = string.format(\"%0*d\", base, digit)\n    if i == 1 then\n\
    \      result = digitString\n    else\n      result = result .. digitString\n\
    \    end\n    x = x - digit*base\n    digits = math.floor(x/base)+1\n    i = i\
    \ + 1\n  end\n  return result\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  while digits > 0 do\n    local digit = x %\
    \ base\n    local remainder = x / base\n    local result = string.format(\"%s%0*d\"\
    , result,\n      math.abs(digits), digit)\n    x = remainder\n    digits = digits\
    \ - 1\n  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result\
    \ = \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n    x = x/base\n\
    \    if x ~= 0 then\n      result = digit .. result\n    end\n  end\n  return\
    \ result .. tostring(digits)\nend", "  local s = \"\"\n  local i = 1\n  while\
    \ x > 0 do\n    local t = x % base\n    x = math.floor(x/base)\n    s = string.format(\"\
    %0\" .. tostring(base) .. \"d\", t) .. s\n    i = i + 1\n  end\n  return s\nend",
  "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format('%d',\
    \ digits)..string.format('%0*d', base, rest)\nend", "  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return string.format(\"%0\" .. digits .. \"d\", x)\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format('%d',\
    \ x) + string.format('%0*d', base, digits)\nend", "  local digits = math.floor(math.log(x,\
    \ base))\n  local result = \"\"\n  local i = 1\n  while digits > 0 do\n    local\
    \ digit = math.floor(x/base%10)\n    i = i + 1\n    result = result .. string.format(\"\
    %0\" .. digits .. \"d\", digit)\n    x = x % base\n    digits = digits - 1\n \
    \ end\n  return result .. string.format(\"%0\" .. digits .. \"d\", x)\nend", " \
    \ if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  else\n    return\
    \ string.format(\"%0*d\", base, x)\n  end\nend", "  if x < 10 then\n    return\
    \ string.format(\"%g\", x)\n  end\n  local digits = math.floor(math.log(x / base))\n\
    \  local digits_str = string.format(\"%g\", x / base)\n  local digits_len = #digits_str\n\
    \  local digits_pow = math.pow(base, digits)\n  local digits_pow_str = string.format(\"\
    %g\", digits_pow)\n  local digits_pow_len = #digits_pow_str\n  local digits_pow_pow\
    \ = math.pow(digits_pow, digits)\n  local digits_pow_pow_str = string.format(\"\
    %g\", digits_pow_pow)\n  local digits_pow_pow_len = #digits_pow_pow_str\n  local\
    \ digits_pow_pow_pow = math.pow(digits_pow_pow, digits)\n  local digits_pow_pow_pow_str\
    \ = string.format(\"%g\", digits_pow_pow_pow)\n  local digits_pow_pow_pow_pow_len\
    \ = #digits_pow_pow_pow_str\n  local digits_pow_pow_pow_pow_len = #digits_pow_pow_pow_str\n\
    \  local digits_pow_pow_pow_pow_str\n  if digits_pow_pow_pow_len > 0 then\n  \
    \  digits_pow_pow_pow_pow_str = string.format(\"%g\", digits_pow_pow_pow_pow)\n\
    \    digits_pow_pow_pow_pow_pow_len = #digits_pow_pow_pow_pow_pow_str\n  end\n\
    \  if digits_pow_pow_pow_pow_len > 0 then\n    digits_pow_pow_pow_pow_pow_str\
    \ = string.format(\"%g\", digits_pow_pow_pow_pow_pow)\n    digits_pow_pow_pow_pow_pow_len\
    \ = #digits_pow_pow_pow_pow_pow_str\n  end\n  if digits_pow_pow_pow_pow_len >\
    \ 0 then\n    digits_pow_pow_pow_pow_pow_str = string.format(\"%g\", digits_pow_pow_pow_pow_pow_pow)\n\
    \    digits_pow_pow_pow_pow_pow_len = #digits_pow_pow_pow_pow_pow_pow_str\n  end\n\
    \  if digits_pow_pow_pow_pow_pow_len > 0 then\n    digits_pow_pow_pow_pow_pow_pow_str\
    \ = string.format(\"%g\", digits_pow_pow_pow_pow_pow_pow_pow)\n    digits_pow_pow_pow_pow_pow_pow_len\
    \ = #digits_pow_pow_pow_pow_pow_pow_pow_str\n  end\n  if digits_pow_pow_pow_pow_pow_len\
    \ > 0 then\n    digits_pow_pow_pow_pow_pow_pow_str = string.format(\"%g\", digits_pow_pow_pow_pow_pow_pow_pow)\n\
    \    digits_pow_pow_pow_pow_pow_pow_pow_len = #digits_pow_pow_pow_pow_pow_pow_pow_pow_str\n",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x % base\n  local result = \"\"\n  while x do\n    local digit = tostring(x)\n\
    \    if digits > 0 then\n      result = result .. digit\n      digits = digits\
    \ - 1\n    end\n    x = x / base\n  end\n  return result .. tostring(x)\nend",
  "  local digits = math.floor(x/base)\n  local result = {}\n  local i = 1\n  while\
    \ digits > 0 do\n    table.insert(result, math.floor(x/base))\n    x = math.floor(x/base)\n\
    \    i = i + 1\n  end\n  if x > 0 then\n    table.insert(result, x)\n  end\n \
    \ return table.concat(result, '') .. base\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base*base)+1\n\
    \    result = result .. string.format(\"%d\", digit)\n    x = x - digit*base\n\
    \  end\n  return result\nend", "\tlocal digits = math.floor(x/base)\n\tlocal rest\
    \ = x - base*digits\n\treturn string.format('%0*d', digits, rest)\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  local rest = x - base*digits\n  return change_base(rest, base) .. tostring(digits)\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n    local carry\
    \ = digit > 0 and 1 or 0\n    local digit = digit == 0 and 1 or digit\n    result\
    \ = result .. string.format(\"%c\", digit*base + carry)\n  end\n  return result\n\
    end", "  local digits = math.floor(x/base)\n  local rest = x - base*digits\n \
    \ return string.format('%d', digits)..string.format('%0*d', base, rest)\nend",
  "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n  for i\
    \ = 1, digits do\n    local digit = x % base\n    local remainder = x / base\n\
    \    local result = result .. string.format(\"%d\", remainder)\n    if digit >\
    \ 0 then\n      result = result .. string.format(\"%\", digit)\n    end\n    x\
    \ = digit\n  end\n  return result\nend", "  if base < 2 then\n    error('base\
    \ must be greater than or equal to 2')\n  end\n  local digits = math.floor(x/base^0)\n\
    \  x = x - base*digits\n  return string.format('%0*d', base, digits)\nend", " \
    \ if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local result = \"\"\n  while x > 0 do\n    local digit\
    \ = tostring(x%base)\n    x = x/base\n    result = digit .. result\n  end\n  return\
    \ result .. tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x % base\n  local result = \"\"\n\
    \  while x do\n    local digit = digits % base\n    digits = digits / base\n \
    \   result = tostring(digit) + result\n    x = x * base + digit\n  end\n  return\
    \ result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits\
    \ = math.floor(x/base)\n  x = x % base\n  return tostring(base * digits + x)\n\
    end", "  local digits = math.floor(math.log(x, base))\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n    result =\
    \ string.format(\"%s%d%s\", result, digit, base.chars[i])\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ rest)\nend", "  local digits = math.floor(math.log(x, base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x/base%10)\n  \
    \  result = string.format(\"%s%d%s\", result, digit, base.chars[i])\n    x = math.floor(x/base)\n\
    \  end\n  return result\nend", "  if x < 10 then\n    return string.format(\"\
    %u\", x)\n  else\n    local digits = math.floor(math.log(x / base, base))\n  \
    \  return string.format(\"%u\", x / base * base^(digits + 1))\n  end\nend", " \
    \ local digits = math.floor(math.log(x, base))\n  local result = \"\"\n  while\
    \ digits > 0 do\n    local digit = math.floor(x/base%10)\n    local remainder\
    \ = x - digit*base\n    if remainder > 0 then\n      result = string.format(\"\
    %s%d\", result, remainder)\n    end\n    x = digit\n    digits = digits - 1\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  x = x -\
    \ base*digits\n  return string.format(\"%0*d\", base, digits)\nend", "  if x <\
    \ 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + tostring(x)\nend", " \
    \ local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", base, digits)\nend", "\tlocal digits = math.floor(x/base)+1\n\tlocal result\
    \ = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = math.mod(x, base)+1\n\t\tx\
    \ = digit\n\t\tresult = string.format(\"%s%0*d\", result, base, digit)\n\tend\n\
    \treturn result\nend", "  local s = \"\"\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  while x >= base do\n    s = string.format(\"%0\" ..\
    \ digits .. \"d\", x%base) + s\n    x = x/base\n  end\n  return s\nend", "  local\
    \ digits = math.floor(math.log(x, base))\n  local result = \"\"\n  local power\
    \ = base\n  for i = 1, digits do\n    local digit = x / power\n    local remainder\
    \ = x - digit * power\n    power = power * base\n    result = result .. string.format(\"\
    %d\", digit)\n    if remainder > 0 then\n      result = result .. string.format(\"\
    %\", remainder)\n    end\n  end\n  return result\nend", "  if x < 10 then\n  \
    \  return tostring(x)\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  return tostring(base*digits) + tostring(x)\nend", "  local digits = math.floor(x/base)\n\
    \  local mod = x % base\n  return string.format('%d', digits)..string.format('%c',\
    \ mod)\nend", "  local digits = math.floor(math.log(abs(x), base))\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / base) % (base))\n\
    \    result = string.format(\"%s%s\", digit, result)\n    x = math.floor((x /\
    \ base) / base)\n  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  local remainder = x - base*digits\n\
    \  return tostring(digits, base) + tostring(remainder)\nend", "  local digits\
    \ = math.floor(math.log(x, base))\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = x % base\n    x = x / base\n    result = string.format(\"%s%s\"\
    , digit, result)\n    digits = digits - 1\n  end\n  return result\nend", "  if\
    \ x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  local digits_str = tostring(digits)\n  local digits_len\
    \ = #digits_str\n  if digits_len > 1 then\n    digits_str = digits_str:sub(1,\
    \ digits_len-1)\n  end\n  return digits_str .. tostring(x)\nend", "  local digits\
    \ = math.floor(x/base)\n  local result = {}\n  for i = 1, digits do\n    table.insert(result,\
    \ math.floor(x/base))\n    x = x % base\n  end\n  table.insert(result, x)\n  return\
    \ table.concat(result)\nend", "  local digits = math.floor(x/base)\n  local remainder\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%b',\
    \ base*digits)..string.format('%d', remainder)\nend", "  local digits = math.floor(x/base)+1\n\
    \  local result = \"\"\n  for i = 1, digits do\n    result = result .. string.sub(tostring(base),\
    \ -base+i)\n  end\n  return result\nend", "  local digits = math.floor(x/base)\n\
    \  local remainder = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, remainder)\nend", "  local digits = math.floor(x/base)*base\n  x = x -\
    \ digits*base\n  return string.format(\"%0*d\", base, digits)\nend", "  local\
    \ digits = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format('%d',\
    \ digits)..string.format('%b', rest)\nend", "  if x < 10 then\n    return string.format(\"\
    %0\" .. base .. \"d\", x)\n  end\n  local digits = math.floor(x/base)\n  local\
    \ rest = x - base*digits\n  return string.format(\"%0\" .. base .. \"d\", digits)\
    \ .. change_base(rest, base)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n  local digits_str\
    \ = tostring(digits)\n  local digits_len = #digits_str\n  if digits_len > 1 then\n\
    \    digits_str = digits_str .. '0'\n  end\n  return digits_str .. tostring(x)\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ + 1, base))\n  local result = tostring(base^digits)\n  if digits > 0 then\n\
    \    result = change_base(result, \"base\" .. base)\n  end\n  return result\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) .. tostring(x)\nend", " \
    \ if x < 10 then\n    return string.format(\"%0*d\", base, x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  local rest = x - base*digits\n  return string.format(\"\
    %0*d\", base+digits, rest)\nend", "  local digits = math.floor(math.log(abs(x),\
    \ base))\n  local digits_str = string.format(\"%0.\" .. digits .. \"d\", x / base^digits)\n\
    \  return digits_str\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  local result =\
    \ \"\"\n  while x > 0 do\n    local digit = tostring(x%base)\n    x = x/base\n\
    \    if x ~= 0 then\n      result = digit .. result\n    end\n  end\n  return\
    \ result .. tostring(digits)\nend", "  local digits = math.floor(math.log(x, base))\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = x / base\n  \
    \  local remainder = x % base\n    local new_digit = math.floor((digit - remainder)\
    \ / digits)\n    local remainder_digit = remainder % digit\n    result = result\
    \ .. new_digit .. tostring(base^remainder_digit)\n    x = digit\n    digits =\
    \ digits - 1\n  end\n  return result\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(x/base)\n  x = x - digits * base\n  return\
    \ tostring(digits) .. tostring(x)\nend", "  if x < 10 then\n    return tostring(x)\n\
    \  end\n  local digits = math.floor(math.log(x / base))\n  local digit = digits\
    \ % base\n  local result = tostring(x / base)\n  result = result .. tostring(digit)\n\
    \  return result\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(math.log(base * x + 1, base))\n  local result = tostring(base\
    \ * x / base)\n  for i = 1, digits do\n    result = tostring(base * result + tostring(base))\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local mod\
    \ = x % base\n  return string.format('%d', digits) .. change_base(mod, base)\n\
    end", "  local digits = math.floor(x/base)\n  local remainder = x - base*digits\n\
    \  return base*digits .. string.format(\"%0*d\", base, remainder)\nend", "   \
    \ if x < 10 then\n        return tostring(x)\n    end\n    local digits = math.floor(x/base)\n\
    \    return tostring(base * digits) + tostring(x - base * digits)\nend", "  local\
    \ digits = math.floor(x/base)\n  local result = \"\"\n  while digits > 0 do\n\
    \    local digit = math.mod(x, base)\n    result = string.format(\"%s%s\", digit,\
    \ result)\n    x = math.floor(x / base)\n    digits = math.floor(x/base)\n  end\n\
    \  return result\nend", "    if x < 10 then\n        return string.format(\"%0*d\"\
    , base, x)\n    else\n        return string.format(\"%0*d\", base, x)\n    end\n\
    end", "  local digits = math.floor(x/base)\n  x = x - base*digits\n  return string.format(\"\
    %0*d\", base, digits)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(math.log(x + 1, base))\n  local new_base = base *\
    \ math.pow(base, digits)\n  return tostring(math.floor(x / new_base) * new_base)\n\
    end", "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(x/base)\n\
    \  x = x - base*digits\n  return tostring(base*digits) + tostring(x)\nend", " \
    \ local digits = math.floor(x/base)+1\n  if digits == 0 then\n    return ''\n\
    \  end\n  local digits_str = table.concat(digits, '') .. '0'\n  return base *\
    \ tonumber(digits_str)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - base*digits\n  return tostring(base*digits)\
    \ .. tostring(x)\nend", "  -- base numbers are less than 10.\n  assert(base <\
    \ 10)\n  local digits = math.floor(math.log(abs(x), base))\n  -- return string\
    \ representation after the conversion.\n  -- base numbers are less than 10.\n\
    \  assert(digits < 10)\n  local result = \"\"\n  -- Change numerical (base) number\
    \ x to string.\n  -- The first digit is the most significant.\n  -- The remaining\
    \ digits are less significant.\n  -- >>> change_base(8, 3)\n  -- '22'\n  -- >>>\
    \ change_base(8, 2)\n  -- '1000'\n  -- >>> change_base(7, 2)\n  -- '111'\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor(x/base) % base\n\
    \    local remainder = x % base\n    x = remainder\n    result = result .. digit\n\
    \  end\n  return result\nend", "  local digits = math.floor(x/base)\n  local rest\
    \ = x - base*digits\n  return string.format('%d', digits)..string.format('%0*d',\
    \ base, rest)\nend", "    if x < 10 then\n        return tostring(x)\n    end\n\
    \    local digits = math.floor(x/base)\n    local mod = x % base\n    return tostring(base\
    \ * digits + mod)\nend", "  if x < 10 then\n    return tostring(x)\n  end\n  local\
    \ digits = math.floor(x/base)\n  x = x - digits * base\n  return tostring(x) +\
    \ tostring(base)\nend", "\tlocal digits = math.floor(math.log(x, base))\n\tlocal\
    \ result = \"\"\n\twhile digits > 0 do\n\t\tlocal digit = x / base\n\t\tx = x\
    \ - digit * base\n\t\tresult = result .. digit\n\t\tdigits = digits - 1\n\tend\n\
    \treturn result .. x\nend", "  if x < 10 then\n    return tostring(x)\n  end\n\
    \  local digits = math.floor(x/base)\n  x = x - digits * base\n  local result\
    \ = \"\"\n  while x ~= 0 do\n    local digit = math.floor(x/10)\n    result =\
    \ tostring(digit) + result\n    x = x - digit * 10\n  end\n  return result\nend",
  "  if x < 10 then\n    return tostring(x)\n  end\n  local digits = math.floor(math.log(x\
    \ / base))\n  local digit = digits % base\n  local new_digits = digits - digit\n\
    \  local new_x = x / base\n  local new_base = base * new_digits\n  return change_base(new_x,\
    \ new_base)\nend", "  if base < 2 then\n    error('Base must be greater than or\
    \ equal to 2')\n  end\n  local digits = math.floor(x/base)\n  x = x - base*digits\n\
    \  local result = {}\n  for i = 1, digits do\n    table.insert(result, string.format('%0',\
    \ base))\n  end\n  table.insert(result, string.format('%0', x))\n  return table.concat(result)\n\
    end", "  -- base numbers are less than 10.\n  assert(base < 10)\n  local s = ''\n\
    \  -- Convert to string and remove all non-digits from the string.\n  -- This\
    \ removes any leading zeros and any trailing zeros.\n  -- This also removes any\
    \ leading or trailing spaces.\n  -- This also removes any spaces after the decimal\
    \ point.\n  s = x:gsub('%a%d+', function(x)\n    -- Remove any leading zeros.\n\
    \    if x:sub(1, 1) == '0' then\n      return ''\n    end\n    -- Remove any trailing\
    \ zeros.\n    if x:sub(x, x:len()) == '0' then\n      return ''\n    end\n   \
    \ -- Remove any spaces after the decimal point.\n    if x:sub(x, x:len()) == '.'\
    \ then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(1, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' then\n      return ''\n    end\n    -- Remove any spaces before the decimal\
    \ point.\n    if x:sub(x, x:len()) == '.' then\n      return ''\n    end\n   \
    \ -- Remove any spaces before the decimal point.\n    if x:sub(x, x:len()) ==\
    \ '.' ", "  local digits = math.floor(x/base)+1\n  local result = \"\"\n  while\
    \ digits > 0 do\n    local digit = math.mod(x, base)\n    local remainder = math.floor(digit/base)\n\
    \    digit = digit-remainder*base\n    result = result .. string.format(\"%d\"\
    , digit)\n    x = math.floor(x/base)\n    digits = digits-1\n  end\n  return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
