name: HumanEval_71_triangle_area
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return the area of\n\
  -- the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n-- Otherwise return -1\n-- Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n-- than the third side.\n-- Example:\n-- >>> triangle_area(3,\
  \ 4, 5)\n-- 6.0\n-- >>> triangle_area(1, 2, 10)\n-- -1\nlocal function triangle_area(a,\
  \ b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triangle_area\n\
  \    lu.assertEquals(candidate(3, 4, 5), 6.0)\n    lu.assertEquals(candidate(1,\
  \ 2, 10), -1)\n    lu.assertEquals(candidate(4, 8, 5), 8.18)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), 1.73)\n    lu.assertEquals(candidate(1, 2, 3), -1)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), 16.25)\n    lu.assertEquals(candidate(2, 6, 3), -1)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), 0.43)\n    lu.assertEquals(candidate(2, 2, 10), -1)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal s = a + b + c\n\tif s > a then return -1 end\n\tif s > b then\
    \ return -1 end\n\tif s > c then return -1 end\n\treturn (s - a) * (s - b) * (s\
    \ - c) / 6\nend", "\tlocal s = a + b + c\n\tif s <= a or s <= b or s <= c then\
    \ return -1 end\n\treturn math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", " \
    \   if a + b > c then\n        return (a * b) / c\n    elseif a + c > b then\n\
    \        return (a * b) / c\n    elseif b + c > a then\n        return (a * b)\
    \ / c\n    else\n        return -1\n    end\nend", "\tlocal s = a + b + c\n\t\
    if s > a then return s end\n\tif s > b then return s end\n\tif s > c then return\
    \ s end\n\treturn -1\nend", "\tlocal s = a + b + c\n\tif s > a then return -1\
    \ end\n\tif s > b then return -1 end\n\tif s > c then return -1 end\n\treturn\
    \ (a + b + c) / 2\nend", "  local s = a + b + c\n  if s > a then return -1 end\n\
    \  if s > b then return -1 end\n  if s > c then return -1 end\n  return math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\nend", "  if a + b > c then\n    return -1\n\
    \  elseif a + c > b then\n    return -1\n  elseif b + c > a then\n    return -1\n\
    \  else\n    return math.sqrt(math.pow(a, 2) + math.pow(b, 2) + math.pow(c, 2))\n\
    \  end\nend", "\tlocal s = a + b + c\n\tif s > a then return s end\n\tif s > b\
    \ then return s end\n\tif s > c then return s end\n\treturn -1\nend", "\tlocal\
    \ s = a + b + c\n\tif s > a then return s end\n\tif s > b then return s end\n\t\
    if s > c then return s end\n\treturn -1\nend", "\tlocal s = a + b + c\n\tif s\
    \ > a then return -1 end\n\tif s > b then return -1 end\n\tif s > c then return\
    \ -1 end\n\treturn math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", "  local\
    \ s = a + b + c\n  if s <= a or s <= b or s <= c then return -1 end\n  return\
    \ math.sqrt(s * (s - a) * (s - b) * (s - c))\nend", "  local s = a + b + c\n \
    \ if s <= 0 then\n    return -1\n  elseif s == 1 then\n    return b * b\n  elseif\
    \ s == 2 then\n    return a * c\n  elseif s == 3 then\n    return a * b * c\n\
    \  else\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))\n  end\nend", "\t\
    local s = a + b + c\n\tif s > a then return s end\n\tif s > b then return s end\n\
    \tif s > c then return s end\n\treturn -1\nend", "\tlocal s = a + b + c\n\tif\
    \ s > a then return s end\n\tif s > b then return s end\n\tif s > c then return\
    \ s end\n\treturn -1\nend", "\tlocal s = a + b + c\n\tif s > a then return s end\n\
    \tif s > b then return s end\n\tif s > c then return s end\n\treturn -1\nend",
  "  local s = a + b + c\n  if s <= 0 then return -1 end\n  local t = math.sqrt(s\
    \ * (s - a) * (s - b) * (s - c))\n  return t / 2\nend", "\tlocal s = a + b + c\n\
    \tif s == 0 then\n\t\treturn -1\n\telseif s == a then\n\t\treturn b\n\telseif\
    \ s == b then\n\t\treturn c\n\telseif s == c then\n\t\treturn a\n\telse\n\t\t\
    return -1\n\tend\nend", "  if a + b > c then\n    return -1\n  elseif a + c >\
    \ b then\n    return -1\n  elseif b + c > a then\n    return -1\n  else\n    return\
    \ (a * b * c) / 2\n  end\nend", "\tlocal s = a + b + c\n\tif s > a then return\
    \ s end\n\tif s > b then return s end\n\tif s > c then return s end\n\treturn\
    \ -1\nend", "  if a + b > c then return -1 end\n  if a + c > b then return -1\
    \ end\n  if b + c > a then return -1 end\n  return (b * b) - (4 * a * c)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
