name: HumanEval_2_truncate_number
language: lua
prompt: "-- Given a positive floating point number, it can be decomposed into\n--\
  \ and integer part (largest integer smaller than given number) and decimals\n--\
  \ (leftover part always smaller than 1).\n-- Return the decimal part of the number.\n\
  -- >>> truncate_number(3.5)\n-- 0.5\nlocal function truncate_number(number)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = truncate_number\n\
  \    lu.assertEquals(candidate(3.5), 0.5)\n    lu.assertEquals(candidate(1.25),\
  \ 0.25)\n    lu.assertEquals(candidate(123.0), 0.0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local decimals = math.floor(math.log(number, 10))\n  local integer_part\
    \ = math.trunc(number)\n  local remainder = number - integer_part\n  return integer_part\
    \ + (remainder * 10^decimals)\nend", "  if number < 0 then\n    return 0\n  end\n\
    \  local _, decimals = math.modf(number)\n  return math.floor(number):reverse():sub(1,\
    \ decimals)\nend", "  if number < 1 then\n    return number\n  end\n  local integer_part\
    \ = math.floor(number)\n  local decimal_part = math.modf(number - integer_part)[1]\n\
    \  return integer_part + decimal_part\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimal_part = math.floor(number)\n  local integer_part = math.floor(number\
    \ - decimal_part)\n  return decimal_part + integer_part * math.pow(10, math.floor(math.log(number,\
    \ 10)))\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n  local\
    \ integer_part = math.trunc(number)\n  return integer_part / 10^decimals, integer_part\
    \ % 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  local integer_part = math.trunc(number)\n  local result = integer_part / 10^decimals\n\
    \  if result < 1 then\n    return 0\n  else\n    return result\n  end\nend", " \
    \ local decimals = math.floor(math.log10(number))\n  local integer_part = math.pow(10,\
    \ decimals)\n  return math.floor(number * integer_part) / integer_part\nend",
  "  local decimals = math.floor(math.log(number) / math.log(10))\n  local integer_part\
    \ = math.trunc(number)\n  return integer_part * 10^decimals\nend", "  local decimals\
    \ = math.floor(math.log(number, 10) + 1)\n  return math.floor(number / 10^decimals)\
    \ / 10^decimals\nend", "  local decimals = math.floor(math.log(number, 10) + 1)\n\
    \  return math.floor(number / 10^decimals) / 10^decimals\nend", "  local decimal_part\
    \ = math.floor(number)\n  local integer_part = math.trunc(number)\n  return decimal_part\
    \ + integer_part\nend", "  local decimals = math.floor(math.log10(number))\n \
    \ local integer_part = math.pow(10, decimals)\n  local trunc_part = number - integer_part\n\
    \  return trunc_part / integer_part\nend", "    local factor = 1\n    local decimal_part\
    \ = number\n    while decimal_part > 1 do\n        decimal_part = decimal_part\
    \ / factor\n        factor = factor * 10\n    end\n    return decimal_part\nend",
  "  local decimals = math.floor(math.log(number, 10) + 1)\n  return math.floor(number\
    \ / 10^decimals) / 10^decimals\nend", "  local decimal_part = math.floor(number)\n\
    \  local integer_part = math.trunc(number)\n  local remainder = number - integer_part\n\
    \  return decimal_part + remainder\nend", "  if number < 0 then\n    return 0\n\
    \  end\n  local factor = 1\n  local decimal_part = 1\n  while number >= factor\
    \ do\n    number = number / factor\n    decimal_part = decimal_part + 1\n  end\n\
    \  return decimal_part * factor\nend", "  local factor = 1\n  local decimals =\
    \ 0\n  local decimal_part = number\n  while decimal_part > 1 do\n    decimal_part\
    \ = decimal_part / factor\n    factor = factor * 10\n    decimals = decimals +\
    \ 1\n  end\n  return decimal_part / factor\nend", "  local decimals = math.floor(math.log(number,\
    \ 10) + 1)\n  return math.floor(number / 10^decimals) / 10^decimals\nend", " \
    \ local decimals = math.floor(math.log(number, 10))\n  local integer_part = math.trunc(number)\n\
    \  return integer_part / 10^decimals, integer_part % 10^decimals\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
