name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "    if text == nil then\n        return nil\n    end", " \
    \ if text == nil then return end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len()-1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash\
    \ = ngx.md5(text)\n  return md5hash\nend", "  if text == nil then\n    return\
    \ nil\n  end", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend", "    local\
    \ md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return md5:sub(1, 8)\n\
    \    end\nend", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end", "  local md5sum\n  if text:len() > 0 then\n    md5sum =\
    \ ngx.md5(text)\n  else\n    md5sum = \"\"\n  end\n  return md5sum\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n\
    \  end\n  return md5\nend", "  if text == nil then return end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 2)\nend", "  local md5 = ngx.md5()\n  local len\
    \ = #text\n  local i = 1\n  while i <= len do\n    md5:update(ngx.encode_base64(ngx.md5(text)))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "  if text == nil then\n  \
    \  return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text == nil then\n    return nil\n  end\n  local md5_hash = ngx.md5(text)\n\
    \  md5 = string.sub(md5_hash, 1, 8)\n  return md5\nend", "  if text == nil then\
    \ return end\n  local hash = ngx.md5(text)\n  return hash\nend", "    if text\
    \ == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n  \
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash\
    \ = ngx.md5(text)\n  return md5hash\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
