name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "    if text == nil then\n        return nil\n    end", " \
    \ if text == nil then return end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len()-1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash\
    \ = ngx.md5(text)\n  return md5hash\nend", "  if text == nil then\n    return\
    \ nil\n  end", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend", "    local\
    \ md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return md5:sub(1, 8)\n\
    \    end\nend", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end", "  local md5sum\n  if text:len() > 0 then\n    md5sum =\
    \ ngx.md5(text)\n  else\n    md5sum = \"\"\n  end\n  return md5sum\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n\
    \  end\n  return md5\nend", "  if text == nil then return end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 2)\nend", "  local md5 = ngx.md5()\n  local len\
    \ = #text\n  local i = 1\n  while i <= len do\n    md5:update(ngx.encode_base64(ngx.md5(text)))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "  if text == nil then\n  \
    \  return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text == nil then\n    return nil\n  end\n  local md5_hash = ngx.md5(text)\n\
    \  md5 = string.sub(md5_hash, 1, 8)\n  return md5\nend", "  if text == nil then\
    \ return end\n  local hash = ngx.md5(text)\n  return hash\nend", "    if text\
    \ == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n  \
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash\
    \ = ngx.md5(text)\n  return md5hash\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5sum\n  local md5sum_hex\n  local md5sum_base64\n  local\
    \ md5sum_base64_hex\n  local md5sum_base64_utf8\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_hex\n\
    \  local md5sum_base64_utf8", "  local md5\n  if text:len() > 0 then\n    md5\
    \ = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n \
    \   return md5:sub(1, md5:len())\n  end\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5sum = ngx.md5(text)\n  return md5sum\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", "  local md5\n\
    \  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if text ~= '' then\n    md5\
    \ = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n    return\
    \ nil\n  end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if text == nil then\n\
    \    return nil\n  else\n    local md5_hash = md5.new()\n    md5_hash:update(text)\n\
    \    md5 = md5_hash:digest()\n  end\n  return tostring(md5)\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5sum, err = io.open(\"/dev/urandom\",\
    \ \"r\").read(16)\n  if md5sum == nil then\n    return nil, err\n  end\n  local\
    \ md5 = md5sum:sub(1, 16)\n  local sha1 = sha1(text)\n  local sha1_hash = sha1:sub(1,\
    \ 20)\n  local sha1_hash_hex = sha1_hash:sub(1, 32)\n  local sha1_hash_hex_upper\
    \ = sha1_hash_hex:upper()\n  local sha1_hash_hex_lower = sha1_hash_hex:lower()\n\
    \  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower\
    \ = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1,\
    \ 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper\
    \ = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1,\
    \ 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower\
    \ = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1,\
    \ 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper\
    \ = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1,\
    \ 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower\
    \ = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1,\
    \ 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper\
    \ = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1,\
    \ 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1, 32)\n  local sha1_hash_hex_lower\
    \ = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper = sha1_hash_hex_upper:sub(1,\
    \ 32)\n  local sha1_hash_hex_lower = sha1_hash_hex_lower:sub(1, 32)\n  local sha1_hash_hex_upper\
    \ = ", "  if text == nil then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil\
    \ then return end\n  local hash = ngx.md5(text)\n  return hash\nend", "  if text\
    \ == nil then\n    return nil\n  end", "  local md5sum\n  if text:len() > 0 then\n\
    \    md5sum = ngx.md5(text)\n  else\n    md5sum = \"\"\n  end\n  return md5sum\n\
    end", "  if text == nil then\n    return nil\n  end", "  if text == nil then\n\
    \    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", " \
    \ local md5 = ngx.md5()\n  local len = #text\n  if len == 0 then\n    return nil\n\
    \  end\n  md5:update(text)\n  return md5:final()\nend", "  local md5\n  if text\
    \ == nil then\n    return nil\n  elseif text:len() == 0 then\n    return nil\n\
    \  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  if text == nil then return end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local md5 = ngx.md5()\n    md5:update(text)\n    return md5:final()\n\
    end", "  if text == nil then\n    return nil\n  end", "  local md5\n  if text\
    \ == nil then\n    return nil\n  elseif text:len() == 0 then\n    return nil\n\
    \  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end", "  local md5\n  if text == nil then\n    return\
    \ nil\n  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text\
    \ == nil then\n    return nil\n  end", "  local md5 = ngx.md5(text)\n  if md5\
    \ ~= ngx.null then\n    return md5\n  end\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= nil then\n    return md5:sub(1, 32)\n  else\n    return nil\n  end\n\
    end", "  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end",
  "  if text == nil then\n    return nil\n  end", "  local md5\n  if text == nil then\n\
    \    return nil\n  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n\
    \  return md5\nend", "    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n\
    \        return md5:sub(1, 16)\n    end\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\n\
    end", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "  local md5\n  if text == nil then\n    md5 = ''\n  else\n\
    \    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  end\n  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend", "  if text\
    \ == nil then\n    return nil\n  end", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if\
    \ text == nil then\n    return nil\n  end", "  local md5\n  if text ~= '' then\n\
    \    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5\nend", "  if text == nil then return nil\
    \ end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5sum\n  local md5sum_hex\n\
    \  local md5sum_base64\n  local md5sum_base64_hex\n  local md5sum_base64_utf8\n\
    \  local md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_unicode\n  local md5sum_base64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_big5\n  local md5sum_base64_utf8_unicode_big5_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big5_b_hex\n\
    \  local md5sum_base64_utf8_unicode_big5_b_hex\n  local md5sum_base64_utf8_unicode_big",
  "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, 16)\n\
    \  else\n    return nil\n  end\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5\n  do\n    local md5_hash = md5.new()\n    md5_hash:update(text)\n\
    \    md5 = md5_hash:digest()\n  end\n  return tostring(md5)\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "    local md5 = ngx.md5(text)\n    if md5 ~= '' then\n\
    \        return md5\n    end\nend", "  if text == nil then\n    return nil\n \
    \ end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5\
    \ = ''\n  end\n  return md5\nend", "  local md5sum, err = io.open(\"/dev/urandom\"\
    , \"r\").read()\n  if err then\n    return nil\n  end\n  local md5 = md5sum:sub(1,\
    \ 16)\n  return md5:sub(1, 32)\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n\
    \  return md5\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return\
    \ md5\n  end\n  return nil\nend", "    if text == nil then\n        return nil\n\
    \    end\n    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return\
    \ md5\n    end\n    return nil\nend", "  local md5\n  if text:len() > 0 then\n\
    \    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  local md5\n  if text:len() == 0 then\n    return nil\n\
    \  end\n  local function md5_char(c1, c2)\n    local hex = string.char(c1 ^ c2)\n\
    \    return string.sub(hex, 1, 2):upper() .. string.sub(hex, 3)\n  end\n  local\
    \ function md5_chars(s)\n    local t = {}\n    for i = 1, #s do\n      t[#t +\
    \ 1] = md5_char(s[i - 1], s[i])\n    end\n    return table.concat(t)\n  end\n\
    \  md5 = md5_chars(text)\n  return md5:lower()\nend", "  if text == nil then\n\
    \    return nil\n  end", "  if text == nil then\n    return nil\n  end", "  if\
    \ text == nil then\n    return nil\n  end", "  if text == nil then return end\n\
    \  local hash = ngx.md5(text)\n  return hash\nend", "  if text == nil then\n \
    \   return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  local md5sum\n  if text:len() > 0 then\n    md5sum = ngx.md5(text)\n\
    \  else\n    md5sum = \"\"\n  end\n  return md5sum\nend", "  local md5 = ngx.md5()\n\
    \  local len = #text\n  local i = 1\n  while i <= len do\n    md5:update(text:sub(i,\
    \ i))\n    i = i + 1\n  end\n  return md5:final()\nend", "    local md5 = ngx.md5(text)\n\
    \    if md5 ~= nil then\n        return md5:sub(1, 8)\n    end\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= '' then\n    return md5\n  end\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= nil then\n    return md5:sub(1, md5:len())\n  end\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n\
    \  return md5hash\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5sum\n  md5sum = ngx.md5(text)\n  return md5sum\nend", "  local md5 = ngx.md5()\n\
    \  local len = #text\n  local i = 1\n  while i < len do\n    md5:update(ngx.encode_base64(text[i]))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "  local md5\n  if text:len()\
    \ > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  local md5\n\
    \  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend",
  "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  if text == nil then return end\n  local hash = ngx.md5(text)\n  return\
    \ hash\nend", "    if text == nil then\n        return nil\n    end", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n  return\
    \ md5hash\nend", "  if text == nil then\n    return nil\n  end\n  local md5 =\
    \ ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend", "  if text == nil then\n\
    \    return nil\n  end", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "    if text == nil then\n        return nil\n    end", " \
    \ if text == nil then return end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n \
    \ local md5hash = ngx.md5(text)\n  return md5hash\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if\
    \ text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if text:len() > 0 then\n  \
    \  md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\nend", "  local\
    \ md5sum, err = io.open(\"/dev/urandom\", \"r\").read(\"*all\")\n  if md5sum ==\
    \ nil then\n    md5sum, err = io.open(\"/dev/random\", \"r\").read(\"*all\")\n\
    \  end\n  if md5sum == nil then\n    return nil\n  end\n  local hash = md5.new()\n\
    \  hash:update(text)\n  return hash:digest()\nend", "    local md5 = ngx.md5(text)\n\
    \    if md5 ~= nil then\n        return md5:sub(1, 16)\n    end\nend", "  local\
    \ md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n \
    \ end\n  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ hash = ngx.md5(text)\n  return hash\nend", "    if text == nil then\n      \
    \  return nil\n    end\n    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n\
    \        return md5\n    end\n    return nil\nend", "  local md5sum\n  if text:len()\
    \ > 0 then\n    md5sum = ngx.md5(text)\n  end\n  return md5sum\nend", "  local\
    \ md5sum\n  if text:len() > 0 then\n    md5sum = ngx.md5(text)\n  else\n    md5sum\
    \ = \"\"\n  end\n  return md5sum\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "    if text == nil\
    \ then\n        return nil\n    end", "  if text == nil then\n    return nil\n\
    \  end\n  local hash = ngx.md5(text)\n  return hash\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5sum\n  local md5_hash = ngx.md5()\n  md5_hash:update(text)\n\
    \  md5sum = md5_hash:hexdigest()\n  return md5sum\nend", "  if text == nil then\n\
    \    return nil\n  end", "    if text == nil then\n        return nil\n    end\n\
    \    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 2)\nend", " \
    \   if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5\nend", "    if text == nil then\n        return nil\n    end\n\
    \    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len())\nend", "  local\
    \ md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend",
  "  local md5 = ngx.md5(text)\n  if md5 ~= ngx.null then\n    return md5:sub(1, md5:len())\n\
    \  end\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len()-1)\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local hash = ngx.md5(text)\n  return hash\nend", "    if text == nil\
    \ then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n    return\
    \ md5\nend", "    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return\
    \ md5:sub(1, 8)\n    end\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local hash\
    \ = ngx.md5(text)\n  return hash\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, 16)\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local\
    \ md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, md5:len())\n\
    \  end\nend", "  if text == nil then\n    return nil\n  end\n  local md5sum, err\
    \ = io.open(\"/dev/urandom\", \"r\")\n  if md5sum == nil then\n    return nil\n\
    \  end\n  local md5sum_bytes = md5sum:read(\"*all\")\n  md5sum:close()\n  return\
    \ md5sum_bytes\nend", "  if text == nil then\n    return nil\n  end", "  if text\
    \ == nil then\n    return nil\n  end", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5sum, err\
    \ = io.open(\"/dev/urandom\", \"r\").read(\"*all\")\n  if md5sum == nil then\n\
    \    return nil\n  end\n  local md5sum_bytes = md5sum:bytes()\n  local md5 = md5sum_bytes:sub(1,16)\n\
    \  local md5_hex = md5:gsub(\"%z\", tohex)\n  return md5_hex\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= ngx.null\
    \ then\n    return md5:sub(1, 16)\n  end\nend", "  local md5\n  if text:len()\
    \ > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  local md5 = ngx.md5(text)\n\
    \  return md5 ~= nil and md5:sub(1, 8)\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", "  local md5sum\n\
    \  if text == nil then\n    return nil\n  end\n  md5sum = ngx.md5(text)\n  return\
    \ md5sum\nend", "  if text == nil then\n    return nil\n  end\n  local md5\n \
    \ do\n    local md5_hash = ngx.md5(text)\n    md5 = md5_hash:sub(1, md5_hash:len()-1)\n\
    \  end\n  return md5\nend", "  local md5\n  if text == nil then\n    return nil\n\
    \  else\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  local md5\n  if\
    \ text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text\
    \ == nil then return end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 2)\nend", "    if text == nil then\n        return nil\n    end", "  local\
    \ md5 = ngx.md5(text)\n  if md5 ~= '' then\n    return md5\n  end\nend", "  local\
    \ md5\n  if text == nil then\n    return nil\n  end\n  md5 = ngx.md5(text)\n \
    \ return md5\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return\
    \ md5\n  else\n    return nil\n  end\nend", "  local md5\n  if text:len() > 0\
    \ then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= '' then\n    return md5\n  end\nend", "    local md5 = ngx.md5(text)\n\
    \    if md5 ~= nil then\n        return md5\n    end\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n  return md5hash\n\
    end", "  if text == nil then\n    return nil\n  end", "  local md5\n  local i\
    \ = 1\n  local len = #text\n  local block\n  local tmp\n  local i\n  local j\n\
    \  local k\n  local l\n  local n\n  local c\n  local h\n  local s\n  local t\n\
    \  local z\n  local i\n  local j\n  local k\n  local l\n  local n\n  local c\n\
    \  local h\n  local s\n  local t\n  local z\n  local i\n  local j\n  local k\n\
    \  local l\n  local n\n  local c\n  local h\n  local s\n  local t\n  local z\n\
    \  local i\n  local j\n  local k\n  local l\n  local n\n  local c\n  local h\n\
    \  local s\n  local t\n  local z\n  local i\n  local j\n  local k\n  local l\n\
    \  local n\n  local c\n  local h\n  local s\n  local t\n  local z\n  local i\n\
    \  local j\n  local k\n  local l\n  local n\n  local c\n  local h\n  local s\n\
    \  local t\n  local z\n  local i\n  local j\n  local k\n  local l\n  local n\n\
    \  local c\n  local h\n  local s\n  local t\n  local z\n  local i\n  local j\n\
    \  local k\n  local l\n  local n\n  local c\n  local h\n  local s\n  local t\n\
    \  local z\n  local i\n  local j\n  local k\n  local l\n  local n\n  local c\n\
    \  local h\n  local s\n  local t\n  local z\n  local i\n  local j\n  local k\n\
    \  local l\n  local n\n  local c\n  local h\n  local s\n  local t\n  local z\n\
    \  local i\n  local j\n  local k\n  local l\n  local n\n  local c\n  local h\n\
    \  local s\n  local t\n  local z\n  local i\n  local j\n  local k\n  local l\n\
    \  local n\n  local c\n  local h\n  local s\n  local t\n  local z\n  local i\n\
    \  local j\n  ", "    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n    \
    \    return md5:sub(1, 16)\n    end\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5\n\
    \  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end",
  "  local md5\n  local f = io.open('/dev/urandom', 'rb')\n  if f then\n    md5 =\
    \ f:read(\"*all\")\n    f:close()\n  else\n    md5 = os.date(\"%m%d%H%M%S\"):gsub(\"\
    %z\", \"\")\n  end\n  return md5\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  local md5sum, err = ngx.md5(text)\n  if err then\n\
    \    return nil, err\n  end\n  return md5sum\nend", "    if text == nil then\n\
    \        return nil\n    end\n    local md5 = ngx.md5(text)\n    return md5\n\
    end", "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n  if\
    \ md5 ~= nil then\n    return md5:sub(1, 32)\n  end\nend", "  if text == nil then\n\
    \    return nil\n  end", "  if text == nil then\n    return nil\n  end\n  local\
    \ hash = ngx.md5(text)\n  return hash\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
