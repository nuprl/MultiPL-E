name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n\
  -- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n--\
  \ {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest, largest = numbers[1], numbers[#numbers]\n  for i\
    \ = 2, #numbers do\n    local diff = math.abs(numbers[i] - largest)\n    if diff\
    \ < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < 0 then\n      largest, smallest\
    \ = smallest, numbers[i]\n    elseif diff > 0 then\n      smallest, largest =\
    \ numbers[i], largest\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_number ~= nil and smallest_number ~= second_smallest_number\
    \ then\n      local distance = math.abs(number - second_smallest_number)\n   \
    \   if distance < smallest_distance then\n        smallest_distance = distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    end\n\
    \    if current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil then\n      local second_distance = math.abs(number\
    \ - second_smallest_number)\n      if second_distance < smallest_distance then\n\
    \        smallest_distance = second_distance\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = largest - numbers[i]\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil and smallest_distance < distance then\n\
    \      second_smallest_number = smallest_number\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - largest)\n    if distance < smallest then\n\
    \      smallest, largest = distance, numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local smallest_distance = nil\n  local smallest_number =\
    \ nil\n  local second_smallest_distance = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for _, number\
    \ in ipairs(numbers) do\n    if smallest > number then\n      smallest = number\n\
    \    end\n    if largest < number then\n      largest = number\n    end\n  end\n\
    \  return smallest, largest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
