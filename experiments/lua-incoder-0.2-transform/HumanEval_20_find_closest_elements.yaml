name: HumanEval_20_find_closest_elements
language: lua
prompt: "-- From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n-- other and return them in order (smaller number,\
  \ larger number).\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.2})\n\
  -- {2.0, 2.2}\n-- >>> find_closest_elements({1.0, 2.0, 3.0, 4.0, 5.0, 2.0})\n--\
  \ {2.0, 2.0}\nlocal function find_closest_elements(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_closest_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}), {3.9, 4.0})\n  \
  \  lu.assertEquals(candidate({1.0, 2.0, 5.9, 4.0, 5.0}), {5.0, 5.9})\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2}), {2.0, 2.2})\n    lu.assertEquals(candidate({1.0, 2.0,\
  \ 3.0, 4.0, 5.0, 2.0}), {2.0, 2.0})\n    lu.assertEquals(candidate({1.1, 2.2, 3.1,\
  \ 4.1, 5.1}), {2.2, 3.1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest, largest = numbers[1], numbers[#numbers]\n  for i\
    \ = 2, #numbers do\n    local diff = math.abs(numbers[i] - largest)\n    if diff\
    \ < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < 0 then\n      largest, smallest\
    \ = smallest, numbers[i]\n    elseif diff > 0 then\n      smallest, largest =\
    \ numbers[i], largest\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_number ~= nil and smallest_number ~= second_smallest_number\
    \ then\n      local distance = math.abs(number - second_smallest_number)\n   \
    \   if distance < smallest_distance then\n        smallest_distance = distance\n\
    \        second_smallest_number = number\n      end\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    end\n\
    \    if current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil then\n      local second_distance = math.abs(number\
    \ - second_smallest_number)\n      if second_distance < smallest_distance then\n\
    \        smallest_distance = second_distance\n        second_smallest_number =\
    \ number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_number = numbers[1]\n\
    \  local second_smallest_number = numbers[1]\n  for _, number in pairs(numbers)\
    \ do\n    if number < smallest_number then\n      smallest_number = number\n \
    \   end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = largest - numbers[i]\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance ~= nil and smallest_distance < distance then\n\
    \      second_smallest_number = smallest_number\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ distance = math.abs(numbers[i] - largest)\n    if distance < smallest then\n\
    \      smallest, largest = distance, numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local smallest_distance = nil\n  local smallest_number =\
    \ nil\n  local second_smallest_distance = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local second_distance = math.abs(number - second_smallest_number)\n\
    \    if second_smallest_distance == nil then\n      second_smallest_distance =\
    \ distance\n      second_smallest_number = number\n    elseif second_smallest_distance\
    \ > distance then\n      second_smallest_distance = distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for _, number\
    \ in ipairs(numbers) do\n    if smallest > number then\n      smallest = number\n\
    \    end\n    if largest < number then\n      largest = number\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_element\n  local smallest_index\n\
    \  for index, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_element)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_element = number\n      smallest_index = index\n\
    \    end\n  end\n  return numbers[smallest_index], numbers[smallest_index + 1]\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < 0 then\n\
    \      largest = numbers[i]\n    elseif diff > 0 then\n      smallest = numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_number\
    \ = number\n      smallest_distance = distance\n    elseif smallest_distance >\
    \ distance then\n      smallest_number = number\n      smallest_distance = distance\n\
    \    elseif smallest_distance == distance then\n      second_smallest_number =\
    \ number\n    end\n  end\n  return smallest_number, second_smallest_number\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in ipairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local this_smallest, this_largest = numbers[i],\
    \ numbers[i - 1]\n    if this_smallest < smallest then\n      smallest = this_smallest\n\
    \    end\n    if this_largest > largest then\n      largest = this_largest\n \
    \   end\n  end\n  return smallest, largest\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current =\
    \ numbers[i]\n    if current < smallest then\n      smallest = current\n    elseif\
    \ current > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number\n  local largest_number\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    if number > largest_number then\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  local smallest_index = 2\n  local second_smallest_index = 2\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n      smallest_index = i\n   \
    \ elseif current_number > second_smallest_number then\n      second_smallest_number\
    \ = current_number\n      second_smallest_index = i\n    end\n  end\n  return\
    \ numbers[smallest_index], numbers[second_smallest_index]\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_distance = math.inf\n  local smallest_number = nil\n \
    \ local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_number ~= nil then\n      local distance = math.abs(number\
    \ - second_smallest_number)\n      if distance < smallest_distance then\n    \
    \    second_smallest_number = number\n      end\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_element\n  local smallest_element_index\n  for index, element in pairs(numbers)\
    \ do\n    local distance = math.abs(element - smallest_element)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_element\
    \ = element\n      smallest_element_index = index\n    end\n  end\n  return numbers[smallest_element_index],\
    \ numbers[smallest_element_index + 1]\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      largest = current\n    elseif current >\
    \ largest then\n      smallest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for _, number\
    \ in pairs(numbers) do\n    smallest, largest = number, smallest\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \     second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    elseif number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = math.abs(numbers[i] - largest)\n \
    \   if diff < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < smallest then\n      smallest, largest = distance,\
    \ numbers[i]\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_number = number\n      smallest_distance = distance\n \
    \   elseif smallest_distance == distance then\n      second_smallest_number =\
    \ number\n    end\n  end\n  return smallest_number, second_smallest_number\nend",
  "  local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local min_distance = nil\n  local min_number\
    \ = nil\n  local max_number = nil", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n\
    \      smallest, largest = dist, numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local distance = math.abs(numbers[i] - largest)\n\
    \    if distance < smallest then\n      smallest, largest = distance, numbers[i]\n\
    \    end\n  end\n  return largest, smallest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local min_dist = math.inf\n  local min_dist_index\
    \ = nil\n  local min_dist_value = nil\n  for i = 1, #numbers do\n    local dist\
    \ = math.abs(numbers[i] - numbers[min_dist_index])\n    if dist < min_dist then\n\
    \      min_dist = dist\n      min_dist_index = i\n      min_dist_value = numbers[i]\n\
    \    end\n  end\n  return min_dist_index, min_dist_value\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ dist = math.abs(numbers[i] - largest)\n    if dist < smallest then\n      smallest,\
    \ largest = dist, numbers[i]\n    end\n  end\n  return largest, smallest\nend",
  "  local smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if number > largest_number\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local distance = math.abs(numbers[i] - smallest)\n\
    \    if distance < smallest then\n      smallest = distance\n    end\n    distance\
    \ = math.abs(numbers[i] - largest)\n    if distance < largest then\n      largest\
    \ = distance\n    end\n  end\n  return { smallest, largest }\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ new_smallest, new_largest = numbers[i], numbers[i - 1]\n    if new_smallest\
    \ < smallest then\n      smallest = new_smallest\n    end\n    if new_largest\
    \ > largest then\n      largest = new_largest\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n    if\
    \ current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current_number = numbers[i]\n    if current_number < smallest_number\
    \ then\n      smallest_number = current_number\n    end\n    if current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local largest_number = numbers[1]\n  for _,\
    \ number in pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > largest_number then\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest_distance = math.inf\n  local smallest_number = nil\n  local largest_distance\
    \ = math.inf\n  local largest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    distance = math.abs(number - largest_number)\n    if\
    \ distance > largest_distance then\n      largest_distance = distance\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > second_smallest_number then\n      second_smallest_number = current_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest\
    \ = diff\n    end\n    diff = largest - numbers[i]\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = math.inf\n\
    \  local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        second_smallest_number = number\n      end\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for _, number in ipairs(numbers)\
    \ do\n    if smallest > number then\n      smallest = number\n    end\n    if\
    \ largest < number then\n      largest = number\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = math.inf\n  local smallest_number\
    \ = nil\n  local largest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if number > largest_number then\n      largest_number = number\n\
    \    end\n  end\n  return smallest_number, largest_number\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local smallest_index = nil\n  local\
    \ smallest_value = nil\n  local largest_distance = nil\n  local largest_number\
    \ = nil\n  local largest_index = nil\n  local largest_value = nil\n  for index,\
    \ value in ipairs(numbers) do\n    local distance = math.abs(value - smallest_value)\n\
    \    if smallest_distance == nil then\n      smallest_distance = distance\n  \
    \    smallest_number = smallest_index\n      smallest_value = value\n      smallest_index\
    \ = index\n    elseif smallest_distance > distance then\n      smallest_distance\
    \ = distance\n      smallest_number = smallest_index\n      smallest_value = value\n\
    \      smallest_index = index\n    else\n      largest_distance = distance\n \
    \     largest_number = largest_index\n      largest_value = value\n      largest_index\
    \ = index\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = nil\n \
    \ local smallest_number = nil\n  local smallest_index = nil\n  local smallest_value\
    \ = nil\n  for i, value in ipairs(numbers) do\n    local distance = math.abs(value\
    \ - smallest_value)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = value\n      smallest_index = i\n    elseif\
    \ smallest_distance > distance then\n      smallest_distance = distance\n    \
    \  smallest_number = value\n      smallest_index = i\n    end\n  end\n  return\
    \ smallest_number, numbers[smallest_index]\nend", "  local smallest_distance =\
    \ nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n \
    \ local second_smallest_distance = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = smallest_number\n      second_smallest_distance\
    \ = smallest_distance\n    elseif smallest_distance > distance then\n      smallest_distance\
    \ = distance\n      second_smallest_number = number\n      second_smallest_distance\
    \ = smallest_distance\n    elseif smallest_distance == distance then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      largest = current\n    elseif current > largest then\n      smallest =\
    \ current\n    end\n  end\n  return largest, smallest\nend", "  local closest_elements\
    \ = {}\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local\
    \ smallest_distance = nil\n  local smallest_distance = nil\n  local smallest_distance\
    \ = nil\n  local smallest_distance = nil\n  local smallest_distance = nil\n  local ",
  "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return largest, smallest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local closest_elements = {}\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local min_distance\
    \ = nil\n  local min_distance = nil\n  local min_distance = nil\n  local ", " \
    \ local smallest_distance = nil\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local smallest_index = nil\n  local\
    \ smallest_value = nil\n  for index, value in pairs(numbers) do\n    local distance\
    \ = math.abs(value - smallest_value)\n    if smallest_distance == nil then\n \
    \     smallest_distance = distance\n      smallest_number = index\n      smallest_index\
    \ = index\n      smallest_value = value\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = index\n  \
    \    smallest_index = index\n      smallest_value = value\n    end\n  end\n  return\
    \ numbers[smallest_number], numbers[smallest_index + 1]\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ min_distance = nil\n  local min_element = nil\n  local min_element_index = nil\n\
    \  local max_element = nil\n  local max_element_index = nil\n  for i = 1, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - numbers[min_element_index])\n\
    \    if min_distance == nil then\n      min_distance = distance\n      min_element\
    \ = numbers[i]\n      min_element_index = i\n    elseif distance < min_distance\
    \ then\n      min_distance = distance\n      min_element = numbers[i]\n      min_element_index\
    \ = i\n    end\n    local distance = math.abs(numbers[i] - numbers[max_element_index])\n\
    \    if max_element == nil then\n      max_element = numbers[i]\n      max_element_index\
    \ = i\n    elseif distance > max_element then\n      max_element = numbers[i]\n\
    \      max_element_index = i\n    end\n  end\n  return min_element_index, max_element_index\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local distance = math.abs(numbers[i] - largest)\n    if distance\
    \ < smallest then\n      smallest, largest = distance, numbers[i]\n    end\n \
    \ end\n  return largest, smallest\nend", "  local min_distance = math.inf\n  local\
    \ min_element = nil\n  local min_element_index = nil\n  for i = 1, #numbers do\n\
    \    local distance = math.abs(numbers[i] - numbers[min_element_index])\n    if\
    \ distance < min_distance then\n      min_distance = distance\n      min_element\
    \ = numbers[i]\n      min_element_index = i\n    end\n  end\n  return min_element,\
    \ min_element_index\nend", "  local smallest = numbers[1]\n  local largest = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if smallest_distance == nil\
    \ or distance < smallest_distance then\n      smallest_distance = distance\n \
    \     smallest_number = number\n    end\n    if second_smallest_number == nil\
    \ or distance < second_smallest_number then\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_number = numbers[1]\n  local largest_number = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n  end\n\
    \  return smallest_number, largest_number\nend", "  local smallest, largest =\
    \ numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local diff = math.abs(numbers[i]\
    \ - largest)\n    if diff < smallest then\n      smallest, largest = diff, numbers[i]\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest_distance = math.inf\n  local smallest_number\n\
    \  local second_smallest_number\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    if smallest_distance == math.inf then\n      break\n    end\n   \
    \ if smallest_distance > math.inf then\n      second_smallest_number = smallest_number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest = numbers[1]\n  local largest = numbers[1]\n  for i = 2, #numbers do\n\
    \    local distance = math.abs(numbers[i] - smallest)\n    if distance < smallest\
    \ then\n      smallest = distance\n    end\n    distance = math.abs(numbers[i]\
    \ - largest)\n    if distance < largest then\n      largest = distance\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = nil\n \
    \ local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil or distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    local second_distance\
    \ = math.abs(number - second_smallest_number)\n    if second_distance < smallest_distance\
    \ then\n      smallest_distance = second_distance\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff\
    \ < smallest then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n\
    \    if diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff\
    \ < smallest then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n\
    \    if diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ pairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest_distance = nil\n \
    \ local smallest_number = nil\n  local second_smallest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil then\n      smallest_distance = distance\n  \
    \    smallest_number = number\n      second_smallest_number = number\n    elseif\
    \ smallest_distance > distance then\n      smallest_distance = distance\n    \
    \  second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \      second_smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n  end\n  return {smallest_number, second_smallest_number}\nend", " \
    \ local smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local distance = math.abs(number - second_smallest_number)\n\
    \      if distance < smallest_distance then\n        second_smallest_distance\
    \ = distance\n        second_smallest_number = number\n      end\n    end\n  end\n\
    \  return smallest_number, second_smallest_number\nend", "  local smallest, largest\
    \ = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return largest, smallest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local smallest = numbers[1]\n  local\
    \ largest = numbers[1]\n  for i = 2, #numbers do\n    local dist = math.abs(numbers[i]\
    \ - smallest)\n    if dist < smallest then\n      smallest = dist\n    end\n \
    \   dist = math.abs(numbers[i] - largest)\n    if dist < largest then\n      largest\
    \ = dist\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_number = number\n      smallest_distance = distance\n \
    \   elseif smallest_distance == distance then\n      second_smallest_number =\
    \ number\n    end\n  end\n  return smallest_number, second_smallest_number\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - largest)\n    if distance < smallest\
    \ then\n      smallest, largest = distance, numbers[i]\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local min_value = numbers[1]\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min_value then\n\
    \      min_value = numbers[i]\n    elseif numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n    end\n  end\n  return min_value, max_value\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local closest_numbers\
    \ = {}\n  local smallest_number = numbers[1]\n  local largest_number = numbers[1]\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ < smallest_number then\n      smallest_number = current_number\n    elseif current_number\
    \ > largest_number then\n      largest_number = current_number\n    end\n    table.insert(closest_numbers,\
    \ smallest_number)\n    table.insert(closest_numbers, largest_number)\n  end\n\
    \  return closest_numbers\nend", "  local smallest_distance = math.inf\n  local\
    \ smallest_number\n  local largest_number\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if distance\
    \ < smallest_distance then\n      smallest_distance = distance\n      smallest_number\
    \ = number\n    end\n    if number > largest_number then\n      largest_number\
    \ = number\n    end\n  end\n  return smallest_number, largest_number\nend", " \
    \ local smallest_distance = math.inf\n  local smallest_number = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_distance < math.inf\
    \ then\n      second_smallest_number = smallest_number\n    end\n  end\n  return\
    \ smallest_number, second_smallest_number\nend", "  local smallest_distance =\
    \ math.inf\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_distance\
    \ == math.inf then\n      break\n    end\n    if smallest_number ~= nil then\n\
    \      local distance = math.abs(number - second_smallest_number)\n      if distance\
    \ < smallest_distance then\n        smallest_distance = distance\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  if smallest_number == nil then\n    return\
    \ nil\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest, largest\
    \ = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local diff =\
    \ numbers[i] - smallest\n    if diff < smallest then\n      smallest = diff\n\
    \    elseif diff > largest then\n      largest = diff\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if number > largest_number\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend", "  local smallest, largest = numbers[1], numbers[1]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local second_smallest_number =\
    \ nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if smallest_number\
    \ ~= nil then\n      local second_distance = math.abs(number - second_smallest_number)\n\
    \      if second_distance < smallest_distance then\n        second_smallest_number\
    \ = number\n      end\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local diff = numbers[i] - smallest\n    if diff < smallest\
    \ then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n    if\
    \ diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = math.inf\n  local smallest_index\n\
    \  local smallest_number", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local min_distance = math.inf\n  local min_element\
    \ = nil\n  local min_element_index = nil\n  for i, v in ipairs(numbers) do\n \
    \   local distance = math.abs(v - min_element)\n    if distance < min_distance\
    \ then\n      min_distance = distance\n      min_element = v\n      min_element_index\
    \ = i\n    end\n  end\n  return numbers[min_element_index], numbers[min_element_index\
    \ + 1]\nend", "  local min_distance = nil\n  local min_number = nil\n  local max_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    if min_distance == nil then\n\
    \      min_distance = number\n      min_number = number\n      max_number = number\n\
    \    else\n      local distance = math.abs(number - min_number)\n      if distance\
    \ < min_distance then\n        min_distance = distance\n        min_number = number\n\
    \      else\n        max_number = number\n      end\n    end\n  end\n  return\
    \ min_number, max_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ diff = numbers[i] - smallest\n    if diff < smallest then\n      smallest =\
    \ diff\n    end\n    diff = numbers[i] - largest\n    if diff > largest then\n\
    \      largest = diff\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local min_value = numbers[1]\n  local\
    \ max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min_value\
    \ then\n      min_value = numbers[i]\n    elseif numbers[i] > max_value then\n\
    \      max_value = numbers[i]\n    end\n  end\n  return min_value, max_value\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[1]\n  for i = 2, #numbers do\n    local current\
    \ = numbers[i]\n    if current < smallest then\n      smallest = current\n   \
    \ elseif current > largest then\n      largest = current\n    end\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local min_distance\
    \ = math.inf\n  local min_number = nil\n  local max_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    if number < min_number then\n      min_number = number\n\
    \      min_distance = math.abs(min_number)\n    elseif number > max_number then\n\
    \      max_number = number\n    end\n  end\n  if min_distance == math.inf then\n\
    \    return nil\n  end\n  if min_number == max_number then\n    return {min_number}\n\
    \  end\n  local min_distance = math.abs(min_number)\n  local max_distance = math.abs(max_number)\n\
    \  local min_number = nil\n  local max_number = nil\n  local min_distance = math.inf\n\
    \  for _, number in ipairs(numbers) do\n    if number < min_number then\n    \
    \  min_number = number\n      min_distance = math.abs(min_number)\n    elseif\
    \ number > max_number then\n      max_number = number\n    end\n  end\n  if min_distance\
    \ == math.inf then\n    return nil\n  end\n  if min_number == max_number then\n\
    \    return {min_number}\n  end\n  local min_distance = math.abs(min_number)\n\
    \  local max_distance = math.abs(max_number)\n  local min_number = nil\n  local\
    \ max_number = nil\n  local min_distance = math.inf\n  for _, number in ipairs(numbers)\
    \ do\n    if number < min_number then\n      min_number = number\n      min_distance\
    \ = math.abs(min_number)\n    elseif number > max_number then\n      max_number\
    \ = number\n    end\n  end\n  if min_distance == math.inf then\n    return nil\n\
    \  end\n  if min_number == max_number then\n    return {min_number}\n  end\n \
    \ local min_distance = math.abs(min_number)\n  local max_distance = math.abs(max_number)\n\
    \  local min_number = nil\n  local max_number = nil\n  local min_distance = math.inf\n\
    \  for _, number in ipairs(numbers) do\n    if number < min_number then\n    \
    \  min_number = number\n      min_distance = math.abs(min_number)\n    elseif\
    \ number > max_number then\n      max_number = number\n    end\n  end\n  if min_distance\
    \ == math.inf then\n    return nil\n  end\n  if min_number == max_number then\n\
    \    return {min_number}\n  end\n  local min_distance = math.abs(min_number)\n\
    \  local max_distance = math.abs(max_number)\n  local min_number = nil\n  local\
    \ max_number = nil\n  local min_distance = math.inf\n  for _, number in ipairs(numbers)\
    \ do\n    if number < min_number then\n      min_number = number\n      min_distance\
    \ = math.abs(min_number)\n    elseif number > max_number then\n      max_", " \
    \ local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    elseif current > largest then\n      largest = current\n    end\n\
    \  end\n  return smallest, largest\nend", "  local min_distance = math.inf\n \
    \ local min_element\n  for _, element in ipairs(numbers) do\n    local distance\
    \ = math.abs(element - min_element)\n    if distance < min_distance then\n   \
    \   min_distance = distance\n      min_element = element\n    end\n  end\n  return\
    \ min_element, min_distance\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_number = number\n      smallest_distance = distance\n \
    \   elseif smallest_distance == distance then\n      second_smallest_number =\
    \ number\n    end\n  end\n  return smallest_number, second_smallest_number\nend",
  "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers\
    \ do\n    local current = numbers[i]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    if current > largest then\n      largest = current\n\
    \    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local second_smallest_number = nil\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      second_smallest_number = number\n\
    \    elseif smallest_distance > distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n      second_smallest_number = number\n    end\n\
    \  end\n  return smallest_number, second_smallest_number\nend", "  local min_distance\
    \ = math.inf\n  local min_number = nil\n  local max_number = nil\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - min_number)\n\
    \    if distance < min_distance then\n      min_number = number\n      min_distance\
    \ = distance\n    elseif distance > max_distance then\n      max_number = number\n\
    \      max_distance = distance\n    end\n  end\n  return {min_number, max_number}\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local largest_distance = nil\n  local largest_number = nil\n  for _,\
    \ number in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if smallest_distance == nil then\n      smallest_distance = distance\n  \
    \    smallest_number = number\n    elseif smallest_distance > distance then\n\
    \      smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    distance = math.abs(number - largest_number)\n    if largest_distance ==\
    \ nil then\n      largest_distance = distance\n      largest_number = number\n\
    \    elseif largest_distance < distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest = numbers[1]\n  local largest = numbers[1]\n  for i =\
    \ 2, #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    end\n    if current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return largest, smallest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ this_smallest, this_largest = numbers[i], numbers[i - 1]\n    if this_smallest\
    \ < smallest then\n      smallest = this_smallest\n    end\n    if this_largest\
    \ > largest then\n      largest = this_largest\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n\
    \    local diff = math.abs(numbers[i] - largest)\n    if diff < smallest then\n\
    \      smallest, largest = diff, numbers[i]\n    end\n  end\n  return largest,\
    \ smallest\nend", "  local smallest_distance = math.inf\n  local smallest_number\
    \ = nil\n  local largest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      largest_number = number\n  \
    \  end\n  end\n  return smallest_number, largest_number\nend", "  local closest_elements\
    \ = {}\n  local smallest_distance = math.inf\n  local smallest_number = nil\n\
    \  local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n  end\n  table.insert(closest_elements, smallest_number)\n  table.insert(closest_elements,\
    \ largest_number)\n  return closest_elements\nend", "  local smallest = numbers[1]\n\
    \  local largest = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      largest = current\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - smallest\n    if diff\
    \ < smallest then\n      smallest = diff\n    end\n    diff = numbers[i] - largest\n\
    \    if diff > largest then\n      largest = diff\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_distance = nil\n  local smallest_number = nil\n\
    \  local second_smallest_number = nil\n  for _, number in ipairs(numbers) do\n\
    \    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_number = number\n      smallest_distance = distance\n\
    \    elseif distance < smallest_distance then\n      smallest_number = number\n\
    \      smallest_distance = distance\n    elseif distance == smallest_distance\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = math.abs(numbers[i] - largest)\n \
    \   if diff < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = numbers[1],\
    \ numbers[#numbers]\n  for i = 2, #numbers do\n    local current = numbers[i]\n\
    \    if current < smallest then\n      smallest = current\n    elseif current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local diff = numbers[i] - largest\n    if diff\
    \ < smallest then\n      smallest, largest = diff, numbers[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_number = nil\n  for _, number in ipairs(numbers)\
    \ do\n    local distance = math.abs(number - smallest_number)\n    if smallest_distance\
    \ == nil then\n      smallest_number = number\n      smallest_distance = distance\n\
    \    elseif smallest_distance > distance then\n      smallest_number = number\n\
    \      smallest_distance = distance\n    elseif smallest_distance == distance\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local min_value = numbers[1]\n  local max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < min_value then\n\
    \      min_value = numbers[i]\n    elseif numbers[i] > max_value then\n      max_value\
    \ = numbers[i]\n    end\n  end\n  table.sort(numbers)\n  return numbers[1], numbers[#numbers]\n\
    end", "  local min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff\
    \ = math.min(min_diff, math.abs(numbers[1] - numbers[3]))\n  local min_diff =\
    \ math.min(min_diff, math.abs(numbers[1] - numbers[4]))\n  local min_diff = math.min(min_diff,\
    \ math.abs(numbers[1] - numbers[5]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1]\
    \ - numbers[6]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] -\
    \ numbers[7]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[8]))\n\
    \  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[9]))\n  local\
    \ min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[10]))\n  local min_diff\
    \ = math.min(min_diff, math.abs(numbers[1] - numbers[11]))\n  local min_diff =\
    \ math.min(min_diff, math.abs(numbers[1] - numbers[12]))\n  local min_diff = math.min(min_diff,\
    \ math.abs(numbers[1] - numbers[13]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1]\
    \ - numbers[14]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] -\
    \ numbers[15]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[16]))\n\
    \  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[17]))\n \
    \ local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[18]))\n  local\
    \ min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[19]))\n  local min_diff\
    \ = math.min(min_diff, math.abs(numbers[1] - numbers[20]))\n  local min_diff =\
    \ math.min(min_diff, math.abs(numbers[1] - numbers[21]))\n  local min_diff = math.min(min_diff,\
    \ math.abs(numbers[1] - numbers[22]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1]\
    \ - numbers[23]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] -\
    \ numbers[24]))\n  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[25]))\n\
    \  local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[26]))\n \
    \ local min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[27]))\n  local\
    \ min_diff = math.min(min_diff, math.abs(numbers[1] - numbers[28]))\n  local min_diff\
    \ = math.min(", "  local smallest, largest = numbers[1], numbers[#numbers]\n \
    \ for _, number in ipairs(numbers) do\n    if smallest > number then\n      smallest\
    \ = number\n    end\n    if largest < number then\n      largest = number\n  \
    \  end\n  end\n  return smallest, largest\nend", "  local smallest_distance =\
    \ nil\n  local smallest_number = nil\n  local second_smallest_distance = nil\n\
    \  local second_smallest_number = nil", "  local smallest_distance = nil\n  local\
    \ smallest_number = nil\n  local largest_distance = nil\n  local largest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    elseif smallest_distance > distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if largest_distance\
    \ == nil then\n      largest_distance = distance\n      largest_number = number\n\
    \    elseif largest_distance < distance then\n      largest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest, largest = numbers[1], numbers[#numbers]\n  for i = 2,\
    \ #numbers do\n    local current = numbers[i]\n    if current < smallest then\n\
    \      smallest = current\n    elseif current > largest then\n      largest =\
    \ current\n    end\n  end\n  return smallest, largest\nend", "  local smallest_distance\
    \ = nil\n  local smallest_number = nil\n  local largest_distance = nil\n  local\
    \ largest_number = nil\n  for _, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if smallest_number ~= nil and smallest_distance\
    \ == nil then\n      smallest_distance = distance\n      smallest_number = number\n\
    \    elseif smallest_distance ~= nil and smallest_distance > distance then\n \
    \     smallest_distance = distance\n      smallest_number = number\n    end\n\
    \    local distance = math.abs(number - largest_number)\n    if largest_number\
    \ ~= nil and largest_distance == nil then\n      largest_distance = distance\n\
    \      largest_number = number\n    elseif largest_distance ~= nil and largest_distance\
    \ < distance then\n      largest_distance = distance\n      largest_number = number\n\
    \    end\n  end\n  return smallest_number, largest_number\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    elseif current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local closest_elements\
    \ = {}\n  local smallest_distance = nil\n  local smallest_number = nil\n  local\
    \ number_to_return = nil\n  for _, number in ipairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if smallest_distance == nil then\n\
    \      smallest_distance = distance\n      smallest_number = number\n      number_to_return\
    \ = number\n    elseif smallest_distance > distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n      number_to_return = number\n\
    \    end\n  end\n  table.insert(closest_elements, number_to_return)\n  return\
    \ closest_elements\nend", "  local smallest_distance = math.inf\n  local smallest_index\n\
    \  local smallest_number\n  local largest_distance = math.inf\n  local largest_index\n\
    \  local largest_number\n  for index, number in pairs(numbers) do\n    local distance\
    \ = math.abs(number - smallest_number)\n    if distance < smallest_distance then\n\
    \      smallest_distance = distance\n      smallest_index = index\n      smallest_number\
    \ = number\n    end\n    local distance = math.abs(number - largest_number)\n\
    \    if distance > largest_distance then\n      largest_distance = distance\n\
    \      largest_index = index\n      largest_number = number\n    end\n  end\n\
    \  return numbers[smallest_index], numbers[largest_index]\nend", "  local smallest_number\
    \ = numbers[1]\n  local second_smallest_number = numbers[1]\n  for _, number in\
    \ ipairs(numbers) do\n    if number < smallest_number then\n      smallest_number\
    \ = number\n    end\n    if number > second_smallest_number then\n      second_smallest_number\
    \ = number\n    end\n  end\n  return smallest_number, second_smallest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in ipairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    end\n    if current\
    \ > largest then\n      largest = current\n    end\n  end\n  return smallest,\
    \ largest\nend", "  local smallest_number = numbers[1]\n  local second_smallest_number\
    \ = numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest = numbers[1]\n  local largest\
    \ = numbers[1]\n  for i = 2, #numbers do\n    local current = numbers[i]\n   \
    \ if current < smallest then\n      smallest = current\n    elseif current > largest\
    \ then\n      largest = current\n    end\n  end\n  return largest, smallest\n\
    end", "  local closest_elements = {}\n  local smallest_distance = math.inf\n \
    \ local smallest_number = nil\n  local largest_number = nil\n  for i = 1, #numbers\
    \ do\n    local distance = math.abs(numbers[i] - numbers[smallest_number])\n \
    \   if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = i\n    end\n    if distance > largest_distance then\n\
    \      largest_distance = distance\n      largest_number = i\n    end\n  end\n\
    \  table.insert(closest_elements, smallest_number)\n  table.insert(closest_elements,\
    \ largest_number)\n  return closest_elements\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number = nil\n  local largest_distance = math.inf\n\
    \  local largest_number = nil\n  for _, number in ipairs(numbers) do\n    local\
    \ distance = math.abs(number - smallest_number)\n    if distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    distance = math.abs(number - largest_number)\n    if distance > largest_distance\
    \ then\n      largest_distance = distance\n      largest_number = number\n   \
    \ end\n  end\n  return {smallest_number, largest_number}\nend", "  local smallest_distance\
    \ = math.inf\n  local smallest_number\n  local largest_number\n  for _, number\
    \ in ipairs(numbers) do\n    local distance = math.abs(number - smallest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      smallest_number = number\n    end\n    distance = math.abs(number - largest_number)\n\
    \    if distance < smallest_distance then\n      smallest_distance = distance\n\
    \      largest_number = number\n    end\n  end\n  return smallest_number, largest_number\n\
    end", "  local smallest_number = numbers[1]\n  local second_smallest_number =\
    \ numbers[1]\n  for _, number in pairs(numbers) do\n    if number < smallest_number\
    \ then\n      smallest_number = number\n    end\n    if number > second_smallest_number\
    \ then\n      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    end\n    if current > largest then\n   \
    \   largest = current\n    end\n  end\n  return smallest, largest\nend", "  local\
    \ smallest_number = numbers[1]\n  local second_smallest_number = numbers[1]\n\
    \  for _, number in pairs(numbers) do\n    if number < smallest_number then\n\
    \      smallest_number = number\n    elseif number > second_smallest_number then\n\
    \      second_smallest_number = number\n    end\n  end\n  return smallest_number,\
    \ second_smallest_number\nend", "  local min_distance = nil\n  local min_number\
    \ = nil\n  local max_number = nil\n  for _, number in ipairs(numbers) do\n   \
    \ if min_number == nil then\n      min_number = number\n      min_distance = number\n\
    \      max_number = number\n    elseif number < min_number then\n      min_number\
    \ = number\n      min_distance = number\n      max_number = number\n    elseif\
    \ number > max_number then\n      max_number = number\n    end\n  end\n  return\
    \ min_number, max_number\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local smallest,\
    \ largest = numbers[1], numbers[#numbers]\n  for i = 2, #numbers do\n    local\
    \ current = numbers[i]\n    if current < smallest then\n      smallest = current\n\
    \    end\n    if current > largest then\n      largest = current\n    end\n  end\n\
    \  return smallest, largest\nend", "  local smallest, largest = numbers[1], numbers[#numbers]\n\
    \  for i = 2, #numbers do\n    local current = numbers[i]\n    if current < smallest\
    \ then\n      smallest = current\n    elseif current > largest then\n      largest\
    \ = current\n    end\n  end\n  return smallest, largest\nend", "  local min_diff\
    \ = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.abs(numbers[1] - numbers[2])\n  local min_diff = math.abs(numbers[1]\
    \ - numbers[2])\n  local min_diff = math.abs(numbers[1] - numbers[2])\n  local\
    \ min_diff = math.", "  local smallest_distance = nil\n  local smallest_number\
    \ = nil\n  local second_smallest_distance = nil\n  local second_smallest_number\
    \ = nil\n  for _, number in ipairs(numbers) do\n    local distance = math.abs(number\
    \ - smallest_number)\n    if smallest_distance == nil or distance < smallest_distance\
    \ then\n      smallest_distance = distance\n      smallest_number = number\n \
    \   end\n    local distance = math.abs(number - second_smallest_number)\n    if\
    \ second_smallest_distance == nil or distance < second_smallest_distance then\n\
    \      second_smallest_distance = distance\n      second_smallest_number = number\n\
    \    end\n  end\n  return smallest_number, second_smallest_number\nend", "  local\
    \ smallest_distance = math.inf\n  local smallest_number\n  local largest_number\n\
    \  for _, number in ipairs(numbers) do\n    local distance = math.abs(number -\
    \ smallest_number)\n    if distance < smallest_distance then\n      smallest_distance\
    \ = distance\n      smallest_number = number\n    end\n    if number > largest_number\
    \ then\n      largest_number = number\n    end\n  end\n  return smallest_number,\
    \ largest_number\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
