name: HumanEval_23_strlen
language: lua
prompt: "-- Return length of given string\n-- >>> strlen('')\n-- 0\n-- >>> strlen('abc')\n\
  -- 3\nlocal function strlen(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = strlen\n\
  \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('x'), 1)\n\
  \    lu.assertEquals(candidate('asdasnakj'), 9)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return string.len() or string.len()\nend", "  return string.len()\
    \ or string.sub(string, 1, string.len() - 1)\nend", "  return string.len() or\
    \ string.bytes and string.bytes.length(string) or string.gsub(string, \"[^\\x00-\\\
    x7F]\", \"\"):bytelen()\nend", "  return string.len() -- Lua 5.1\n  or string.bytelen()\n\
    \  or string.gsub(string, '\\\\n', ''):gsub('\\n', ''):gsub('\\r', ''):gsub('\\\
    t', '')\nend", "  return string.len() or string.bytelen() or string.gsub(string,\
    \ '[^\\x00-\\x7F]', '').len()\nend", "  if type(string) == 'string' then\n   \
    \ return string.len\n  else\n    return nil\n  end\nend", "  return string.len()\
    \ or 0 -- Lua 5.2\nend", "  return string.len() or string.bytelen() or string.gsub(string,\
    \ \"[^\\x00-\\x7F]\", \"\"):gsub(\"%z\", \"\"):gsub(\"%Z\", \"\"):gsub(\"%z\"\
    , \"\")\nend", "  return string.len\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ -- Lua 5.2\nend", "  return string.len() or string.sub(string, 1, string.len())\n\
    end", "  return string.len() or string.bytelen()\nend", "  return string.len()\
    \ or string.bytelen() or string.gsub(string, \"[^\\x00-\\x7F]\", \"\"):gsub(\"\
    %z\", \"\"):gsub(\"%Z\", \"\"):gsub(\"%z\", \"\"):gsub(\"%Z\", \"\")\nend", " \
    \ return string.len() or string.bytelen()\nend", "  return string.len() or string.bytelen()\n\
    end", "  return string.len() or string.bytes and string.len(string.bytes()) or\
    \ 0\nend", "  return string.len() -- Lua 5.2\nend", "  return string.len() or\
    \ string.bytelen()\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
