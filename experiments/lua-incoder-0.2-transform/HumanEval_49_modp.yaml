name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n\
  -- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--\
  \ 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = n % p\n  if t > 0 then\n    return modp(t, p)\n  elseif\
    \ t < 0 then\n    return modp((t - p) + p, p)\n  else\n    return t\n  end\nend",
  "  if p == 0 then return 1 end\n  if p == 1 then return n end\n  if p == n then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend", "  local nn = math.floor(n/p)\n  if nn ~= n then return\
    \ modp(nn, p) end\n  return nn\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 or p == 2 or p == 3 then\n    return n\n  end\n  local r = n % p\n\
    \  if r == 0 then\n    return r\n  end\n  return modp(r, p) + 1\nend", "  if p\
    \ == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if\
    \ p == n then\n    return 0\n  end\n  local r = n % p\n  if r == 0 then\n    return\
    \ modp(n, p - 1)\n  else\n    return modp(r * p, p)\n  end\nend", "  if p == 0\
    \ then return 1 end\n  if p == 1 then return n end\n  if p == n then return 1\
    \ end\n  if p == -1 then return -1 end\n  local q = modp(n / p, p)\n  if n % p\
    \ == 0 then return q end\n  return q * p + (n - q * p) * p\nend", "  if p == 0\
    \ then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p ==\
    \ n then\n    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * p + n\n  end\n  return q\nend", "  local nn = math.floor(n)\n\
    \  if nn < 0 then return nil end\n  if nn == 0 then return 1 end\n  local r =\
    \ n % p\n  if r == 0 then return 1 end\n  if r > 0 then return modp(nn, p) end\n\
    \  return modp(nn - 1, p) * p\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 then\n    return n\n  end\n  local q = modp(n / p, p)\n  if n % p\
    \ == 0 then\n    return q * p + q\n  else\n    return q\n  end\nend", "  -- Return\
    \ 2^n modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>>\
    \ modp(1101, 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n\
    \  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n    return 1\n  end\n\
    \  -- Return 2^n modulo p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n\
    \  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>>\
    \ modp(100, 101)\n  -- 1\n  local r = 1\n  local m = 1\n  while n > 0 do\n   \
    \ r = r * 2 % p\n    n = n / 2\n    m = m * 2 % p\n  end\n  -- Return r modulo\
    \ p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>>\
    \ modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n\
    \  -- 1\n  return r\nend", "  local nn = math.floor(n)\n  local p = p or 1\n \
    \ if nn == n then\n    return p\n  elseif nn == 0 then\n    return 0\n  end\n\
    \  local r = n % p\n  if r == 0 then\n    return modp(nn, p)\n  else\n    return\
    \ modp(r * p, p)\n  end\nend", "  local t = 1\n  while n > p do\n    t = t * p\n\
    \    n = n - t\n  end\n  return t\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 then\n    return n\n  end\n  if p == n then\n    return 0\n  end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + n\n  end\n\
    \  return q\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n\
    \    return modp(m, p)\n  end\nend", "  local n1 = math.floor(n)\n  local n2 =\
    \ n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n  local n5 = math.floor(n1\
    \ * n4)\n  local n6 = n1 - n5\n  return n5 * p + n6\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then return 1 end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend", "  if p == 0 then\n  \
    \  return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n    return\
    \ -n\n  end\n  local q = n / p\n  local r = n % p\n  return modp(q, p) * p + r\n\
    end", "  if n == 0 then return 1 end\n  if p == 0 then return 0 end\n  if p ==\
    \ 1 or p == 2 then return n end\n  if p == 3 then return n end\n  if p == 4 then\
    \ return n end\n  if p == 5 then return n end\n  if p == 6 then return n end\n\
    \  if p == 7 then return n end\n  if p == 8 then return n end\n  if p == 9 then\
    \ return n end\n  if p == 10 then return n end\n  if p == 11 then return n end\n\
    \  if p == 12 then return n end\n  if p == 13 then return n end\n  if p == 14\
    \ then return n end\n  if p == 15 then return n end\n  if p == 16 then return\
    \ n end\n  if p == 17 then return n end\n  if p == 18 then return n end\n  if\
    \ p == 19 then return n end\n  if p == 20 then return n end\n  if p == 21 then\
    \ return n end\n  if p == 22 then return n end\n  if p == 23 then return n end\n\
    \  if p == 24 then return n end\n  if p == 25 then return n end\n  if p == 26\
    \ then return n end\n  if p == 27 then return n end\n  if p == 28 then return\
    \ n end\n  if p == 29 then return n end\n  if p == 30 then return n end\n  if\
    \ p == 31 then return n end\n  if p == 32 then return n end\n  if p == 33 then\
    \ return n end\n  if p == 34 then return n end\n  if p == 35 then return n end\n\
    \  if p == 36 then return n end\n  if p == 37 then return n end\n  if p == 38\
    \ then return n end\n  if p == 39 then return n end\n  if p == 40 then return\
    \ n end\n  if p == 41 then return n end\n  if p == 42 then return n end\n  if\
    \ p == 43 then return n end\n  if p == 44 then return n end\n  if p == 45 then\
    \ return n end\n  if p == 46 then return n end\n  if p == 47 then return n end\n\
    \  if p == 48 then return n end\n  if p == 49 then return n end\n  if p == 50\
    \ then return n end\n  if p == 51 then return n end\n  if p == 52 then return\
    \ n end\n  if p == 53 then return n end\n  if p == 54 then return n end\n  if\
    \ p == 55 then return n end\n  if p == 56 then ", "  if p == 0 then\n    return\
    \ 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n / p, p) * p\
    \ + n % p\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return p\n \
    \ elseif m > 0 and p > 0 then\n    return modp(m, p)\n  elseif m > 0 and p < 0\
    \ then\n    return modp(-m, p)\n  elseif m < 0 and p > 0 then\n    return modp(-m,\
    \ p)\n  elseif m < 0 and p < 0 then\n    return modp(-m, p)\n  else\n    return\
    \ m\n  end\nend", "  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n =\
    \ n / 2\n  end\n  return r\nend", "  local n1 = n % p\n  if n1 < 0 then\n    return\
    \ modp(n + p, p)\n  else\n    return n1\n  end\nend", "  local m = n % p\n  if\
    \ m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend", "  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p ==\
    \ -1 then\n    return -n\n  end\n  local t = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return t\n  else\n    return t + p\n  end\nend", "  if p == 0 then return\
    \ 0 end\n  if p == 1 then return 1 end\n  if p == n then return p end\n  local\
    \ q = modp(n / p, p)\n  if n % p == 0 then return q else return q + p end\nend",
  "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n\
    \  if p == n then\n    return 0\n  end\n  if p > n then\n    return modp(n - p,\
    \ p)\n  end\n  if p < n then\n    return modp(n, p - n)\n  end\nend", "  local\
    \ m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n \
    \ end\nend", "  -- Return 2^n modulo p (be aware of numerics).\n  -- >>> modp(3,\
    \ 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n\
    \  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    local r = 1\n \
    \   while n > 0 do\n      if n >= p then\n        r = r * 2\n        n = n - p\n\
    \      else\n        r = r * 2\n        n = n - 1\n      end\n    end\n    return\
    \ r\n  end\nend", "  if p == 0 then return 1 end\n  if p == 1 or p == -1 then\
    \ return n end\n  if p == n then return p end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then\n    return q * p + q\n  else\n    return q\n  end\nend", " \
    \ local n1 = math.floor(n)\n  local n2 = n - n1\n  local n3 = math.floor(n2 /\
    \ p)\n  local n4 = n2 - n3 * p\n  return n1 * p + n3 * p + n4\nend", "  local\
    \ r = n % p\n  if r == 0 then\n    return 1\n  elseif r < p then\n    return modp(r,\
    \ p) * p + p\n  else\n    return r\n  end\nend", "  local r = 1\n  while n > p\
    \ do\n    r = r * p % n\n    n, p = n, p - 1\n  end\n  return r\nend", "  if p\
    \ == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1\
    \ then\n    return -n\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * p + n\n  else\n    return q\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  end\n  if p == 1 or p == 2 or p == 3 then\n    return n % p\n\
    \  end\n  if p == 4 then\n    return n - (n % p)\n  end\n  if p == 5 then\n  \
    \  return n - (n % p) + (n % p)\n  end\n  if p == 6 then\n    return n - (n %\
    \ p) + (n % p) + (n % p)\n  end\n  if p == 7 then\n    return n - (n % p) + (n\
    \ % p) + (n % p) + (n % p)\n  end\n  if p == 8 then\n    return n - (n % p) +\
    \ (n % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p == 9 then\n    return n\
    \ - (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p ==\
    \ 10 then\n    return n - (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n\
    \ % p) + (n % p)\n  end\n  if p == 11 then\n    return n - (n % p) + (n % p) +\
    \ (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p ==\
    \ 12 then\n    return n - (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n\
    \ % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p == 13 then\n    return n -\
    \ (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\
    \ + (n % p) + (n % p)\n  end\n  if p == 14 then\n    return n - (n % p) + (n %\
    \ p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n\
    \ % p) + (n % p)\n  end\n  if p == 15 then\n    return n - (n % p) + (n % p) +\
    \ (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\
    \ + (n % p) + (n % p)\n  end\n  if p == 16 then\n    return n - (n % p) + (n %\
    \ p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n\
    \ % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p == 17 then\n    return n -\
    \ (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\
    \ + (n % p) + (n % p) + (n % p) + (n % p) + (n % p)\n  end\n  if p == 18 then\n\
    \    return n - (n % p) + (n % p) + (n % p) + (n % p) + (", "  local m = n % p\n\
    \  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend", " \
    \ local r = 1\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return\
    \ r\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n    return\
    \ modp(m, p)\n  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n\
    \    return n\n  else\n    return modp(n / p, p)\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return\
    \ n\n  elseif p == -1 then\n    return -n\n  else\n    return n % p\n  end\nend",
  "  local m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n\
    \  end\nend", "  local function f(n)\n    if n == 0 then\n      return 1\n   \
    \ end\n    if n == 1 then\n      return p\n    end\n    return f((n / p) % p)\
    \ * p + n % p\n  end\n  return f(n)\nend", "  local r = 1\n  while n > 0 do\n\
    \    r = r * p % n\n    n = n / 2\n  end\n  return r\nend", "  local t = 1\n \
    \ while t <= n do\n    if t % p == 0 then\n      return t\n    end\n    t = t\
    \ * 2\n  end\n  return nil\nend", "  if p == 0 then\n    return 1\n  elseif p\
    \ == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p == 0\
    \ then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n\
    \    return -n\n  end\n  local q = 1\n  while q < n do\n    q = q * p + p\n  end\n\
    \  return q % p\nend", "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n\
    \    return n\n  end\n  if p == -1 then\n    return n ^ -1\n  end\n  if p == n\
    \ then\n    return 1\n  end\n  if p == -n then\n    return -1\n  end\n  local\
    \ r = 1\n  while n >= p do\n    r = r * p % n\n    n = n / p\n  end\n  return\
    \ r\nend", "  -- If n is less than p, return n.\n  if n < p then\n    return n\n\
    \  -- If n is greater than p, return p.\n  elseif n > p then\n    return p\n \
    \ -- If n is exactly p, return n.\n  else\n    return n\n  end\nend", "  if p\
    \ == 0 then return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return\
    \ q else return q + 1 end\nend", "  if p == 0 then return 0 end\n  if p == 1 then\
    \ return n end\n  if p == n then return p end\n  if p < n then return modp(n -\
    \ p, p) end\n  return modp(n, p % n)\nend", "  local t = n % p\n  if t > 0 then\n\
    \    return modp(t, p)\n  elseif t < 0 then\n    return modp(-t, p)\n  else\n\
    \    return t\n  end\nend", "  local n1 = math.floor(n)\n  local n2 = n - n1\n\
    \  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 * p\n  if n4 > 0 then\n\
    \    return modp(n4, p)\n  elseif n3 > 0 then\n    return modp(n3, p)\n  elseif\
    \ n2 > 0 then\n    return modp(n2, p)\n  else\n    return n1\n  end\nend", " \
    \ if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n \
    \   return n % p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif p ==\
    \ 1 then\n    return n\n  elseif p == -1 then\n    return -n\n  end\n  local t\
    \ = modp(n / p, p)\n  if n % p == 0 then\n    return t\n  else\n    return t +\
    \ p\n  end\nend", "  if p == 0 then return 1 end\n  local q = modp(n / p, p)\n\
    \  if n % p == 0 then return q else return q + 1 end\nend", "  local m = n % p\n\
    \  if m == 0 then\n    return 1\n  elseif m == p then\n    return 0\n  else\n\
    \    return modp(m, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n  \
    \  return 1\n  elseif m == p then\n    return 0\n  else\n    return modp(m, p)\n\
    \  end\nend", "  local n1 = math.floor(n)\n  local n2 = n - n1\n  local n3 = math.floor(n2\
    \ / p)\n  local n4 = n2 - n3 * p\n  return n1 * p + n3 * p + n4\nend", "  -- Return\
    \ 2^n modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>>\
    \ modp(1101, 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n\
    \  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n  -- >>> modp(101, 101)\n  -- 0\n  --\
    \ >>> modp(101, 0)\n  -- 1\n  -- >>> modp(101, -1)\n  -- 1\n  -- >>> modp(-101,\
    \ 101)\n  -- -1\n  -- >>> modp(-101, 0)\n  -- -1\n  -- >>> modp(-101, -1)\n  --\
    \ -1\n  -- >>> modp(-101, -101)\n  -- -1\n  -- >>> modp(-101, 0)\n  -- -1\n  --\
    \ >>> modp(-101, -1)\n  -- -1\n  -- >>> modp(-101, -101)\n  -- -1\n  -- >>> modp(-101,\
    \ 101)\n  -- -1\n  -- >>> modp(-101, 0)\n  -- -1\n  -- >>> modp(-101, -1)\n  --\
    \ -1\n  -- >>> modp(-101, -101)\n  -- -1\n  -- >>> modp(-101, 101)\n  -- -1\n\
    \  -- >>> modp(-101, 0)\n  -- -1\n  -- >>> modp(-101, -1)\n  -- -1\n  -- >>> modp(-101,\
    \ -101)\n  -- -1\n  -- >>> modp(-101, 101)\n  -- -1\n  -- >>> modp(-101, 0)\n\
    \  -- -1\n  -- >>> modp(-101, -1)\n  -- -1\n  -- >>> modp(-101, -101)\n  -- -1\n\
    \  -- >>> modp(-101, 101)\n  -- -1\n  -- >>> modp(-101, 0)\n  -- -1\n  -- >>>\
    \ modp(-101, -1)\n  -- -1\n  -- >>> modp(-101, -101)\n  -- -1\n  -- >>> modp(-101,\
    \ 101)\n  -- -1\n  -- >>> modp(-101, 0)\n  -- -1\n  -- >>> modp(-101, -1)\n  --\
    \ -1\n  -- >>> modp(-101, -101)\n  -- -1\n  -- ", "  local r = n % p\n  if r ==\
    \ 0 then\n    return p\n  else\n    return modp(r, p) * p\n  end\nend", "  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ modp(n / p, p) * p + n % p\n  end\nend", "  if n == 0 then return 1 end\n  if\
    \ p == 0 then return 0 end\n  if p == 1 or p == 2 then return n end\n  local q\
    \ = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + q\n  else\n    return\
    \ q\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n\
    \    return modp(m, p)\n  end\nend", "  if p == 0 then return 1 end\n  if p ==\
    \ 1 then return n end\n  if p == n then return p end\n  if p > n then return modp(n,\
    \ p - 1) end\n  local q = modp(n / p, p)\n  return q * p + (n % p)\nend", "  local\
    \ t = 1\n  while t <= n do\n    local r = n % p\n    if r == 0 then return t end\n\
    \    local m = p / r\n    t = t + m\n    p = r\n  end\n  return t\nend", "  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ modp(n / p, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return\
    \ 1\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then return 0 end\n\
    \  if p == 1 then return n end\n  if p == n then return p end\n  if p < n then\
    \ return modp(n - p, p) end\n  return modp((n - p) + 1, p) end\nend", "  local\
    \ m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n \
    \ end\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  elseif m >\
    \ 0 then\n    return modp(m, p)\n  else\n    return modp((n - m) / p, p)\n  end\n\
    end", "  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n\
    \  return r\nend", "  local nn = math.floor(n)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n  local nn = math.floor(nn)\n\
    \  local nn = math.floor(nn)\n", "  if p == 0 then\n    return 1\n  end\n  if\
    \ p == 1 then\n    return n\n  end\n  if p == n then\n    return 0\n  end\n  if\
    \ p > n then\n    return modp(n - p, p)\n  end\n  local r = 1\n  while p > 1 do\n\
    \    r = r * p % n\n    p = p / 2\n  end\n  return r\nend", "  local m = n % p\n\
    \  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend", " \
    \ if p == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + n\n  end\n\
    \  return q\nend", "  if p == 0 then\n    return 1\n  end\n  if p == 1 or p ==\
    \ 2 then\n    return n\n  end\n  if p == 3 or p == 4 then\n    return n % p\n\
    \  end\n  if p == 5 then\n    return n % p\n  end\n  if p == 6 then\n    return\
    \ n % p\n  end\n  if p == 7 then\n    return n % p\n  end\n  if p == 9 then\n\
    \    return n % p\n  end\n  if p == 10 then\n    return n % p\n  end\n  if p ==\
    \ 11 then\n    return n % p\n  end\n  if p == 12 then\n    return n % p\n  end\n\
    \  if p == 13 then\n    return n % p\n  end\n  if p == 14 then\n    return n %\
    \ p\n  end\n  if p == 15 then\n    return n % p\n  end\n  if p == 16 then\n  \
    \  return n % p\n  end\n  if p == 17 then\n    return n % p\n  end\n  if p ==\
    \ 18 then\n    return n % p\n  end\n  if p == 19 then\n    return n % p\n  end\n\
    \  if p == 20 then\n    return n % p\n  end\n  if p == 21 then\n    return n %\
    \ p\n  end\n  if p == 22 then\n    return n % p\n  end\n  if p == 23 then\n  \
    \  return n % p\n  end\n  if p == 24 then\n    return n % p\n  end\n  if p ==\
    \ 25 then\n    return n % p\n  end\n  if p == 26 then\n    return n % p\n  end\n\
    \  if p == 27 then\n    return n % p\n  end\n  if p == 28 then\n    return n %\
    \ p\n  end\n  if p == 29 then\n    return n % p\n  end\n  if p == 30 then\n  \
    \  return n % p\n  end\n  if p == 31 then\n    return n % p\n  end\n  if p ==\
    \ 32 then\n    return n % p\n  end\n  if p == 33 then\n    return n % p\n  end\n\
    \  if p == 34 then\n    return n % p\n  end\n  if p == 35 then\n    return n %\
    \ p\n  end\n  if p == 36 then\n    return n % p\n  end\n  if p == 37 then\n  \
    \  return n % p\n  end\n  if p == 38 then\n    return n % p\n  end\n  if p ==\
    \ 39 then\n    return n % p\n  end\n  if p == 40 then\n    return n % p\n  end\n\
    \  if p == 41 then\n    return n % p\n  end\n  if p == 42 then\n    return n %\
    \ p\n  end\n  if p == 43 then\n    return n % p\n  end\n  if p == 44 then\n  \
    \  return n % p\n  end\n  if p == 45 then\n    return n % ", "  local t = n %\
    \ p\n  if t > 0 then\n    return modp(t, p)\n  else\n    return t\n  end\nend",
  "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p\
    \ == -1 then\n    return -n\n  end\n  local r = n % p\n  if r == 0 then\n    return\
    \ r\n  else\n    return modp(r * p, p)\n  end\nend", "  local r = 1\n  while n\
    \ > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend", "  if n ==\
    \ 0 then return 1 end\n  if p == 0 then return 0 end\n  if p == 1 then return\
    \ n end\n  if p == -1 then return n end\n  if p == -1 then return n end\n  if\
    \ p == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then return\
    \ n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n  if p\
    \ == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then return\
    \ n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n  if p\
    \ == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then return\
    \ n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n  if p\
    \ == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then return\
    \ n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n  if p\
    \ == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then return\
    \ n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n  if p\
    \ == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then return\
    \ n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n  if p\
    \ == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then return\
    \ n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n  if p\
    \ == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then return\
    \ n end\n  if p == -1 then return n end\n  if p == 0 then return n end\n  if p\
    \ == 1 then return n end\n  if p == -1 then return n end\n  if p == 0 then return\
    \ n end\n  if p == 1 then return n end\n  if p == -1 then return n end\n  if p\
    \ == 0 then return n end\n  if p == 1 then return n end\n  if p == -1 then return\
    \ n end\n  if p == 0 then return n end\n  if p == 1 then return n end\n  if p\
    \ == -1 then return n end\n  if p == 0 then return n end\n  if p == 1 then return\
    \ n end\n  if p == -1 then return n end\n  if ", "  if n == 0 then return 1 end\n\
    \  if n == 1 then return p end\n  if p == 0 then return 1 end\n  if p == 1 then\
    \ return n end\n  if p < 0 then return modp(-n, p) end\n  local q, r = p * p,\
    \ n\n  while r > 0 do\n    q, r = divmod(q, p)\n  end\n  return q % p\nend", " \
    \ if p == 0 then return 1 end\n  if p == 1 or p == -1 then return n end\n  if\
    \ p == n then return p end\n  local r = n % p\n  if r == 0 then return modp(n,\
    \ p - 1) end\n  return modp(n, p)\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  elseif p == -1 then\n    return -n\n  end\n  local\
    \ q = modp(n / p, p)\n  if n % p == 0 then\n    return q * q\n  else\n    return\
    \ q\n  end\nend", "  if p == 0 then return 0 end\n  if p == 1 or p == 2 then return\
    \ n end\n  local q = modp(n / p, p)\n  return q * p + (n % p)\nend", "  local\
    \ m = n % p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n \
    \ end\nend", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n \
    \ local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + p end\n\
    end", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m,\
    \ p)\n  end\nend", "  local nn = math.floor(n/p)\n  if nn > 0 then\n    return\
    \ modp(math.floor(n/p), p)\n  else\n    return nn*p + p\n  end\nend", "  if p\
    \ == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if\
    \ p == n then\n    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p ==\
    \ 0 then\n    return q * p + n\n  else\n    return q\n  end\nend", "  local m\
    \ = n % p\n  if m == 0 then\n    return n\n  else\n    return modp(m, p)\n  end\n\
    end", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m,\
    \ p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n\
    \    return modp(m, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n  \
    \  return p\n  elseif m > 0 then\n    return modp(m, p)\n  else\n    return modp((n\
    \ - m) / p, p)\n  end\nend", "  if p == 0 then return 0 end\n  if p == 1 then\
    \ return 1 end\n  if p == n then return p end\n  local r = 1\n  while r < n do\n\
    \    r = r * p % p\n  end\n  return r\nend", "  local m = n % p\n  if m == 0 then\n\
    \    return p\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n /\
    \ p, p) * p + n % p\n  end\nend", "  -- Return 2^n modulo p (be aware of numerics).\n\
    \  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>> modp(0,\
    \ 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n\
    \  if n == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif\
    \ p == 0 or p == 1 then\n    return 0\n  elseif p == 2 then\n    return modp(n\
    \ / 2, p)\n  elseif p == 3 then\n    return modp((3 * n) / 4, p)\n  else\n   \
    \ return modp((3 * n) / 2, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n\
    \    return p\n  else\n    return modp(m, p)\n  end\nend", "  local r = 1\n  while\
    \ n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend", "  local\
    \ nn = math.floor(n)\n  local p = math.floor(p)\n  if nn < p then\n    return\
    \ modp(nn, p)\n  else\n    return math.mod(nn + p, p)\n  end\nend", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ n % p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n\
    \    return n\n  elseif p == -1 then\n    return -n\n  end\n  local t = modp(n\
    \ / p, p)\n  if n % p == 0 then\n    return t\n  else\n    return t + p\n  end\n\
    end", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n\
    \    return n % p\n  end\nend", "  local m = n % p\n  if m == 0 then\n    return\
    \ p\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then\n    return\
    \ 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n    return -n\n\
    \  else\n    return n % p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  elseif p == n then\n\
    \    return 1\n  else\n    return modp(n - p, p)\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return\
    \ n\n  else\n    return modp(n / p, p)\n  end\nend", "  if p == 0 then return\
    \ 1 end\n  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if n % p\
    \ == 0 then return q else return q + 1 end\nend", "  local m = n % p\n  if m ==\
    \ 0 then\n    return p\n  else\n    return modp(m, p)\n  end\nend", "  local m\
    \ = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\n\
    end", "  -- Return 2^n modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n\
    \  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  --\
    \ >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n  -- >>> modp(101,\
    \ 101)\n  -- 0\n  -- >>> modp(101, 0)\n  -- 1\n  -- >>> modp(101, -1)\n  -- 1\n\
    \  -- >>> modp(101, -2)\n  -- 0\n  -- >>> modp(101, -3)\n  -- -1\n  -- >>> modp(101,\
    \ -4)\n  -- -2\n  -- >>> modp(101, -5)\n  -- -8\n  -- >>> modp(101, -6)\n  --\
    \ -8\n  -- >>> modp(101, -7)\n  -- -8\n  -- >>> modp(101, -8)\n  -- -8\n  -- >>>\
    \ modp(101, -9)\n  -- -8\n  -- >>> modp(101, -10)\n  -- -8\n  -- >>> modp(101,\
    \ -11)\n  -- -8\n  -- >>> modp(101, -12)\n  -- -8\n  -- >>> modp(101, -13)\n \
    \ -- -8\n  -- >>> modp(101, -14)\n  -- -8\n  -- >>> modp(101, -15)\n  -- -8\n\
    \  -- >>> modp(101, -16)\n  -- -8\n  -- >>> modp(101, -17)\n  -- -8\n  -- >>>\
    \ modp(101, -18)\n  -- -8\n  -- >>> modp(101, -19)\n  -- -8\n  -- >>> modp(101,\
    \ -20)\n  -- -8\n  -- >>> modp(101, -21)\n  -- -8\n  -- >>> modp(101, -22)\n \
    \ -- -8\n  -- >>> modp(101, -23)\n  -- -8\n  -- >>> modp(101, -24)\n  -- -8\n\
    \  -- >>> modp(101, -25)\n  -- -8\n  -- >>> modp(101, -26)\n  -- -8\n  -- >>>\
    \ modp(101, -27)\n  -- -8\n  -- >>> modp(101, -28)\n  -- -8\n  -- >>> modp(101,\
    \ -29)\n", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n    return\
    \ modp(m, p)\n  end\nend", "  local n1 = math.floor(n)\n  local n2 = n - n1\n\
    \  local n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 * p\n  return n1 * p +\
    \ n3 * p + n4\nend", "  if p == 0 then\n    return 1\n  end\n  local q = 1\n \
    \ while q < n do\n    q = q * p % p\n  end\n  return q\nend", "  local nn = math.floor(n)\n\
    \  local p = p or 1\n  local r = n % p\n  if r == 0 then\n    return nn\n  else\n\
    \    return modp(nn, p)\n  end\nend", "  local nn = math.floor(n/p)\n  if nn ~=\
    \ n then return modp(nn, p) end\n  return nn*p\nend", "  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p) * p + n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return\
    \ n\n  else\n    return modp(n / p, p)\n  end\nend", "  -- Return 2^n modulo p\
    \ (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n\
    \  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>>\
    \ modp(100, 101)\n  -- 1\n  local m = math.pow(2, n)\n  if m == 0 then\n    return\
    \ 1\n  else\n    return m % p\n  end\nend", "  local m = n % p\n  if m == 0 then\n\
    \    return n\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n\
    \  if p == n then return 0 end\n  if p > n then return modp(n - p, p) end\n  if\
    \ p < n then return modp(n, p - 1) end\nend", "  local nn = math.floor(n)\n  local\
    \ nn = nn + (nn % p)\n  if nn > p then\n    return modp(nn, p)\n  else\n    return\
    \ nn\n  end\nend", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n\
    \  if p == n then return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * q\n  else\n    return q * q + p\n  end\nend", "  local nn = math.floor(n/p)\n\
    \  if nn ~= n then return modp(nn, p) end\n  return math.modf(n*p)[1]\nend", " \
    \ if p == 0 then return 1 end\n  if p == 1 then return n end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then return q else return q + 1 end\nend", "  local\
    \ m = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n \
    \ end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return\
    \ n\n  elseif p == -1 then\n    return -n\n  end\n  local q = modp(n / p, p)\n\
    \  if n % p == 0 then\n    return q * p + n\n  else\n    return q * p\n  end\n\
    end", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n\
    \    return n % p\n  end\nend", "  local nn = math.floor(n)\n  local nn = math.max(nn,\
    \ 1)\n  local nn = math.min(nn, p)\n  local r = n - nn\n  return nn + r\nend",
  "  local t = n % p\n  if t < 0 then\n    t += p\n  end\n  return t\nend", "  if\
    \ p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ n % p\n  end\nend", "  local nn = math.floor(n)\n  if nn < 0 then\n    return\
    \ modp(-n, p)\n  end\n  if nn == 0 then\n    return 1\n  end\n  local dp = p -\
    \ n\n  if dp < 0 then\n    return modp(-n, p)\n  end\n  if dp == 0 then\n    return\
    \ 0\n  end\n  local nn = nn + 1\n  local dp = dp + 1\n  local r = modp(n - nn\
    \ * dp, p)\n  r = r * dp % p\n  return r\nend", "  local nn = math.floor(n/p)\n\
    \  if nn == 0 then return 1 end\n  return modp(math.floor(n/nn), p) * nn + n %\
    \ nn\nend", "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n    return\
    \ n\n  end\n  if p == n then\n    return 0\n  end\n  if p < n then\n    return\
    \ modp(n - p, p)\n  end\n  return modp((n - p) + p, p)\nend", "  local n2 = n\
    \ * n\n  local n3 = n2 * n2\n  local n4 = n3 * n2\n  local n5 = n4 * n2\n  local\
    \ n6 = n5 * n2\n  local n7 = n6 * n2\n  local n8 = n7 * n2\n  local n9 = n8 *\
    \ n2\n  local n10 = n9 * n2\n  local n11 = n10 * n2\n  local n12 = n11 * n2\n\
    \  local n13 = n12 * n2\n  local n14 = n13 * n2\n  local n15 = n14 * n2\n  local\
    \ n16 = n15 * n2\n  local n17 = n16 * n2\n  local n18 = n17 * n2\n  local n19\
    \ = n18 * n2\n  local n20 = n19 * n2\n  local n21 = n20 * n2\n  local n22 = n21\
    \ * n2\n  local n23 = n22 * n2\n  local n24 = n23 * n2\n  local n25 = n24 * n2\n\
    \  local n26 = n25 * n2\n  local n27 = n26 * n2\n  local n28 = n27 * n2\n  local\
    \ n29 = n28 * n2\n  local n30 = n29 * n2\n  local n31 = n30 * n2\n  local n32\
    \ = n31 * n2\n  local n33 = n32 * n2\n  local n34 = n33 * n2\n  local n35 = n34\
    \ * n2\n  local n36 = n35 * n2\n  local n37 = n36 * n2\n  local n38 = n37 * n2\n\
    \  local n39 = n38 * n2\n  local n40 = n39 * n2\n  local n41 = n40 * n2\n  local\
    \ n42 = n41 * n2\n  local n43 = n42 * n2\n  local n44 = n43 * n2\n  local n45\
    \ = n44 * n2\n  local n46 = n45 * n2\n  local n47 = n46 * n2\n  local n48 = n47\
    \ * n2\n  local n49 = n48 * n2\n  local n50 = n49 * n2\n  local n51 = n50 * n2\n\
    \  local n52 = n51 * n2\n  local n53 = n52 * n2\n  local n54 = n53 * n2\n  local\
    \ n55 = n54 * n2\n  local n56 = n55 * n2\n  local n57 = n56 * n2\n  local n58\
    \ = n57 * ", "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n    return\
    \ n\n  end\n  if p == n then\n    return 0\n  end\n  local r = n % p\n  if r ==\
    \ 0 then\n    return r\n  end\n  return modp(r, p) + p\nend", "  local nn = math.floor(n)\n\
    \  local nn = math.floor(nn)\n  if nn < 0 then\n    return 0\n  end\n  if nn ==\
    \ 0 then\n    return 1\n  end\n  if nn == 1 then\n    return p\n  end\n  if p\
    \ < 1 then\n    return 0\n  end\n  if p == 1 then\n    return 1\n  end\n  if p\
    \ == 0 then\n    return 0\n  end\n  if p == -1 then\n    return -1\n  end\n  local\
    \ r = 1\n  local i = 1\n  while i <= nn do\n    r = r * p % i\n    i = i + 1\n\
    \  end\n  return r\nend", "  local n1 = n % p\n  if n1 == 0 then\n    return 1\n\
    \  elseif n1 < p then\n    return modp(n1, p) + modp(n1 - p, p)\n  else\n    return\
    \ modp(n1 - p, p)\n  end\nend", "  local nn = tostring(n)\n  local pp = tostring(p)\n\
    \  local nn = nn:gsub(\"^0+(.-)$\", \"%1\")\n  local pp = pp:gsub(\"^0+(.-)$\"\
    , \"%1\")\n  local nn = tonumber(nn)\n  local pp = tonumber(pp)\n  if nn == 0\
    \ then return 1 end\n  if pp > 0 then\n    local r = math.floor((nn + pp - 1)\
    \ / (pp))\n    return r * pp + nn\n  else\n    local r = math.floor((nn + pp)\
    \ / pp)\n    return r * pp + nn\n  end\nend", "  local nn = math.floor(n/p)\n\
    \  if nn > 0 then\n    return modp(nn, p) * p + nn * p\n  end\n  return nn * p\n\
    end", "  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n\
    \  return r\nend", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n\
    \  if p == n then return 0 end\n  if p > n then return modp(n - p, p) end\n  if\
    \ p < n then return modp(n, p - 1) end\nend", "  if p == 0 then return 1 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end", "  -- If n is negative, return 1\n  if n < 0 then\n    return 1\n  end\n\
    \  -- If n is zero, return 1\n  if n == 0 then\n    return 1\n  end\n  -- If p\
    \ is negative, return 1\n  if p < 0 then\n    return 1\n  end\n  -- If p is zero,\
    \ return 1\n  if p == 0 then\n    return 1\n  end\n  -- If p is positive, return\
    \ 2^n modulo p\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n\
    \  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100,\
    \ 101)\n  -- 1\n  -- >>> modp(3, -5)\n  -- -1\n  -- >>> modp(3, -10)\n  -- -2\n\
    \  -- >>> modp(3, -100)\n  -- -1\n  -- >>> modp(3, -1000)\n  -- -1\n  -- >>> modp(3,\
    \ -10000)\n  -- -1\n  -- >>> modp(3, -100000)\n  -- -1\n  -- >>> modp(3, -1000000)\n\
    \  -- -1\n  -- >>> modp(3, -10000000)\n  -- -1\n  -- >>> modp(3, -100000000)\n\
    \  -- -1\n  -- >>> modp(3, -1000000000)\n  -- -1\n  -- >>> modp(3, -10000000000)\n\
    \  -- -1\n  -- >>> modp(3, -100000000000)\n  -- -1\n  -- >>> modp(3, -1000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -10000000000000)\n  -- -1\n  -- >>> modp(3, -100000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -1000000000000000)\n  -- -1\n  -- >>> modp(3, -10000000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -100000000000000000)\n  -- -1\n  -- >>> modp(3, -1000000000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -10000000000000000000)\n  -- -1\n  -- >>> modp(3, -100000000000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -1000000000000000000000)\n  -- -1\n  -- >>> modp(3,\
    \ -10000000000000000000000)\n  -- -1\n  -- >>> modp(3, -100000000000000000000000)\n\
    \  -- -1\n  -- >>> modp(3, -1000000000000000000000000)\n  ", "  local m = n %\
    \ p\n  if m == 0 then\n    return p\n  elseif m == p then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend", "  local m = n % p\n  if m == 0 then\n  \
    \  return p\n  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then return\
    \ 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else return\
    \ q + 1 end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n   \
    \ return n\n  else\n    return n % p\n  end\nend", "  if p == 0 then\n    return\
    \ 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n  end\nend",
  "  local t = n % p\n  if t < 0 then\n    return modp(t + p, p)\n  elseif t > p then\n\
    \    return modp((t - p) + p, p)\n  else\n    return t\n  end\nend", "  local\
    \ t = 1\n  local r = 1\n  while t < n do\n    r = r * p % t\n    t = t + 1\n \
    \ end\n  return r\nend", "  local m = n % p\n  if m == 0 then\n    return p\n\
    \  elseif m == p then\n    return n\n  else\n    return modp(m, p)\n  end\nend",
  "  local function f(n)\n    if n == 0 then\n      return 1\n    end\n    if n ==\
    \ 1 then\n      return p\n    end\n    return f((n / p) % p) * p + p\n  end\n\
    \  return f(n)\nend", "  if p == 0 then return 0 end\n  if p == 1 then return\
    \ 1 end\n  if p == n then return p end\n  if p == p - 1 then return modp(n - 1,\
    \ p) end\n  return modp(n - 1, p) + modp(n, p - 1)\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return\
    \ n\n  else\n    return n % p\n  end\nend", "  if p == 0 then return 1 end\n \
    \ if p == 1 then return n end\n  if p == n then return p end\n  if p > n then\
    \ return modp(n - p, p) end\n  if p < n then return modp(n, p - 1) end\nend",
  "  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return\
    \ r\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n\
    \  else\n    return n % p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  local m\
    \ = n % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\n\
    end", "  if p == 0 then return 1 end\n  if p == 1 or p == 2 then return n end\n\
    \  if p == 3 then return n end\n  if p == 5 then return n end\n  if p == 9 then\
    \ return n end\n  if p == 16 then return n end\n  if p == 25 then return n end\n\
    \  if p == 36 then return n end\n  if p == 49 then return n end\n  if p == 64\
    \ then return n end\n  if p == 79 then return n end\n  if p == 128 then return\
    \ n end\n  if p == 163 then return n end\n  if p == 256 then return n end\n  if\
    \ p == 512 then return n end\n  if p == 1024 then return n end\n  if p == 2048\
    \ then return n end\n  if p == 4096 then return n end\n  if p == 8192 then return\
    \ n end\n  if p == 16384 then return n end\n  if p == 32768 then return n end\n\
    \  if p == 65536 then return n end\n  if p == 131072 then return n end\n  if p\
    \ == 262144 then return n end\n  if p == 524288 then return n end\n  if p == 1048576\
    \ then return n end\n  if p == 2097152 then return n end\n  if p == 4194304 then\
    \ return n end\n  if p == 8388608 then return n end\n  if p == 16777216 then return\
    \ n end\n  if p == 33554432 then return n end\n  if p == 67108864 then return\
    \ n end\n  if p == 134217728 then return n end\n  if p == 268435456 then return\
    \ n end\n  if p == 536870912 then return n end\n  if p == 1073741824 then return\
    \ n end\n  if p == -2147483648 then return n end\n  if p == -2147483649 then return\
    \ n end\n  if p == -2147483650 then return n end\n  if p == -2147483651 then return\
    \ n end\n  if p == -2147483652 then return n end\n  if p == -2147483653 then return\
    \ n end\n  if p == -2147483654 then return n end\n  if p == -2147483655 then return\
    \ n end\n  if p == -2147483656 then return n end\n  if p == -2147483657 then return\
    \ n end\n  if p == -2147483658", "  if n == 0 then return 1 end\n  if p == 0 then\
    \ return 0 end\n  if p == 1 then return n end\n  if p < 0 then return modp(-n,\
    \ -p) end\n  local m = n % p\n  if m == 0 then return modp(n, p - 1) end\n  return\
    \ modp(n - m, p) + m\nend", "  local r = 1\n  while n > 0 do\n    r = r * p %\
    \ n\n    n = n / 2\n  end\n  return r\nend", "  if p == 0 then\n    return 1\n\
    \  elseif p == 1 then\n    return n\n  else\n    return modp(n / p, p)\n  end\n\
    end", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n  if p ==\
    \ n then return 0 end\n  if p == -1 then return -1 end\n  local r = n % p\n  if\
    \ r == 0 then return modp(n, p - 1) end\n  return modp(n, p) + r\nend", "  if\
    \ p == 0 then return 1 end\n  if p == 1 or p == 2 then return n end\n  if p ==\
    \ 3 then return n end\n  if p == 4 then return n end\n  if p == 5 then return\
    \ n end\n  if p == 6 then return n end\n  if p == 7 then return n end\n  if p\
    \ == 8 then return n end\n  if p == 9 then return n end\n  if p == 10 then return\
    \ n end\n  if p == 11 then return n end\n  if p == 12 then return n end\n  if\
    \ p == 13 then return n end\n  if p == 14 then return n end\n  if p == 15 then\
    \ return n end\n  if p == 16 then return n end\n  if p == 17 then return n end\n\
    \  if p == 18 then return n end\n  if p == 19 then return n end\n  if p == 20\
    \ then return n end\n  if p == 21 then return n end\n  if p == 22 then return\
    \ n end\n  if p == 23 then return n end\n  if p == 24 then return n end\n  if\
    \ p == 25 then return n end\n  if p == 26 then return n end\n  if p == 27 then\
    \ return n end\n  if p == 28 then return n end\n  if p == 29 then return n end\n\
    \  if p == 30 then return n end\n  if p == 31 then return n end\n  if p == 32\
    \ then return n end\n  if p == 33 then return n end\n  if p == 34 then return\
    \ n end\n  if p == 35 then return n end\n  if p == 36 then return n end\n  if\
    \ p == 37 then return n end\n  if p == 38 then return n end\n  if p == 39 then\
    \ return n end\n  if p == 40 then return n end\n  if p == 41 then return n end\n\
    \  if p == 42 then return n end\n  if p == 43 then return n end\n  if p == 44\
    \ then return n end\n  if p == 45 then return n end\n  if p == 46 then return\
    \ n end\n  if p == 47 then return n end\n  if p == 48 then return n end\n  if\
    \ p == 49 then return n end\n  if p == 50 then return n end\n  if p == 51 then\
    \ return n end\n  if p == 52 then return n end\n  if p == 53 then return n end\n\
    \  if p == 54 then return n end\n  if p == 55 then return n end\n  if p == 56\
    \ then return n end\n  if p == 57", "  local nn = math.floor(n)\n  local nn =\
    \ nn + (n - nn) * (p / nn)\n  return nn\nend", "  if p == 0 then\n    return 1\n\
    \  end\n  if p == 1 then\n    return n\n  end\n  if p < 0 then\n    local t =\
    \ modp(-n, p)\n    return t * (-1)\n  end\n  local t = 1\n  local i = 1\n  while\
    \ i <= p do\n    t = t * n\n    i = i + 1\n  end\n  return t\nend", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ modp(n / p, p) * p + n % p\n  end\nend", "  local n2 = n * n\n  local n3 = n2\
    \ * n2\n  local n4 = n3 * n2\n  local n5 = n4 * n2\n  local n6 = n5 * n2\n  local\
    \ n7 = n6 * n2\n  local n8 = n7 * n2\n  local n9 = n8 * n2\n  local n10 = n9 *\
    \ n2\n  local n11 = n10 * n2\n  local n12 = n11 * n2\n  local n13 = n12 * n2\n\
    \  local n14 = n13 * n2\n  local n15 = n14 * n2\n  local n16 = n15 * n2\n  local\
    \ n17 = n16 * n2\n  local n18 = n17 * n2\n  local n19 = n18 * n2\n  local n20\
    \ = n19 * n2\n  local n21 = n20 * n2\n  local n22 = n21 * n2\n  local n23 = n22\
    \ * n2\n  local n24 = n23 * n2\n  local n25 = n24 * n2\n  local n26 = n25 * n2\n\
    \  local n27 = n26 * n2\n  local n28 = n27 * n2\n  local n29 = n28 * n2\n  local\
    \ n30 = n29 * n2\n  local n31 = n30 * n2\n  local n32 = n31 * n2\n  local n33\
    \ = n32 * n2\n  local n34 = n33 * n2\n  local n35 = n34 * n2\n  local n36 = n35\
    \ * n2\n  local n37 = n36 * n2\n  local n38 = n37 * n2\n  local n39 = n38 * n2\n\
    \  local n40 = n39 * n2\n  local n41 = n40 * n2\n  local n42 = n41 * n2\n  local\
    \ n43 = n42 * n2\n  local n44 = n43 * n2\n  local n45 = n44 * n2\n  local n46\
    \ = n45 * n2\n  local n47 = n46 * n2\n  local n48 = n47 * n2\n  local n49 = n48\
    \ * n2\n  local n50 = n49 * n2\n  local n51 = n50 * n2\n  local n52 = n51 * n2\n\
    \  local n53 = n52 * n2\n  local n54 = n53 * n2\n  local n55 = n54 * n2\n  local\
    \ n56 = n55 * n2\n  local n57 = n56 * n2\n  local n58 = n57 * ", "  if p == 0\
    \ then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n\
    \ % p\n  end\nend", "  local n1 = math.floor(n)\n  local n2 = n - n1\n  local\
    \ n3 = math.floor(n2 / p)\n  local n4 = n2 - n3 * p\n  return n1 * p + n3 + (n4\
    \ % p == 0)\nend", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n   \
    \ return n\n  else\n    return n % p\n  end\nend", "  local t = 1\n  local r =\
    \ 1\n  while t <= n do\n    r = r * p % t\n    t = t + 1\n  end\n  return r\n\
    end", "  if p == 0 then return 1 end\n  if p == 1 or p == 2 then return n end\n\
    \  if p == 3 then return n end\n  if p == 5 then return n end\n  if p == 11 then\
    \ return n end\n  if p == 16 then return n end\n  if p == 100 then return n end\n\
    \  if p == 1101 then return n end\n  if p == -1 then return n end\n  if p == -100\
    \ then return n end\n  if p == -101 then return n end\n  if p == -1 or p == -2\
    \ then return n end\n  if p == -3 then return n end\n  if p == -8 then return\
    \ n end\n  if p == -11 then return n end\n  if p == -16 then return n end\n  if\
    \ p == -100 then return n end\n  if p == -1101 then return n end\n  if p == -3\
    \ or p == -4 then return n end\n  if p == -8 then return n end\n  if p == -11\
    \ then return n end\n  if p == -16 then return n end\n  if p == -100 then return\
    \ n end\n  if p == -1101 then return n end\n  if p == -4 or p == -5 then return\
    \ n end\n  if p == -8 then return n end\n  if p == -11 then return n end\n  if\
    \ p == -16 then return n end\n  if p == -100 then return n end\n  if p == -1101\
    \ then return n end\n  if p == -5 then return n end\n  if p == -8 then return\
    \ n end\n  if p == -11 then return n end\n  if p == -16 then return n end\n  if\
    \ p == -100 then return n end\n  if p == -1101 then return n end\n  if p == -6\
    \ then return n end\n  if p == -8 then return n end\n  if p == -11 then return\
    \ n end\n  if p == -16 then return n end\n  if p == -100 then return n end\n \
    \ if p == -1101 then return n end\n  if p == -7 then return n end\n  if p == -8\
    \ then return n end\n  if p == -11 then return n end\n  if p == -16 then return\
    \ n end\n  if p == -100 then return n end\n  if p == -1101 then return n end\n\
    \  if p == -8 then return n end\n  if p == -11 then return n end\n", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ modp(n / p, p) * p + n % p\n  end\nend", "  if p == 0 then\n    return 1\n \
    \ elseif p == 1 then\n    return n\n  else\n    return modp(n / p, p)\n  end\n\
    end", "  local nn = math.floor(n/p)\n  if nn ~= n then return modp(nn, p) end\n\
    \  return nn*p\nend", "  local nn = math.floor(n/p)\n  if nn > 0 then\n    return\
    \ modp(n - nn * p, p)\n  else\n    return nn\n  end\nend", "  local nn = math.floor(n)\n\
    \  local p = math.floor(p)\n  if nn == n then\n    return p\n  elseif nn == 0\
    \ then\n    return 1\n  elseif nn == 1 then\n    return 0\n  else\n    return\
    \ modp(n - nn, p) + p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p ==\
    \ 0 then return 1 end\n  if p == 1 then return n end\n  if p == n then return\
    \ 0 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q end\n  return\
    \ q * p + (n - q * p) * p\nend", "  if p == 0 then\n    return 1\n  elseif p ==\
    \ 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  local m = n\
    \ % p\n  if m == 0 then\n    return p\n  else\n    return modp(m, p)\n  end\n\
    end", "  local r = 1\n  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n\
    \  return r\nend", "  local m = n % p\n  if m == 0 then\n    return n\n  else\n\
    \    return modp(m, p)\n  end\nend", "  -- Return 2^n modulo p (be aware of numerics).\n\
    \  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>> modp(0,\
    \ 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n\
    \  local n1 = math.floor(n)\n  local n2 = n - n1\n  local n3 = math.floor(p *\
    \ n2)\n  local n4 = p - n3\n  -- Return 2^n1 modulo p (be aware of numerics).\n\
    \  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>> modp(0,\
    \ 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n\
    \  return n1 * p + n3\nend", "  if p == 0 then\n    return 1\n  elseif p == 1\
    \ then\n    return n\n  else\n    return modp(n / p, p) * p + n % p\n  end\nend",
  "  if p == 0 then return 0 end\n  if p == 1 then return 1 end\n  if p == n then\
    \ return p end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend", "  local m = n % p\n  if m == 0 then\n    return p\n\
    \  else\n    return modp(m, p)\n  end\nend", "  if p == 0 then return 1 end\n\
    \  if p == 1 then return n end\n  local q = modp(n / p, p)\n  if n % p == 0 then\
    \ return q else return q + 1 end\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return modp(n / p, p)\n  end\nend", " \
    \ if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n \
    \   return n % p\n  end\nend", "  if p == 0 then\n    return 1\n  elseif p ==\
    \ 1 then\n    return n\n  elseif p == 2 then\n    return n ^ 2\n  elseif p ==\
    \ 3 then\n    return n ^ 3\n  elseif p == 4 then\n    return n ^ 4\n  elseif p\
    \ == 5 then\n    return n ^ 5\n  elseif p == 6 then\n    return n ^ 6\n  elseif\
    \ p == 7 then\n    return n ^ 7\n  elseif p == 8 then\n    return n ^ 8\n  elseif\
    \ p == 9 then\n    return n ^ 9\n  elseif p == 10 then\n    return n ^ 10\n  elseif\
    \ p == 11 then\n    return n ^ 11\n  elseif p == 12 then\n    return n ^ 12\n\
    \  elseif p == 13 then\n    return n ^ 13\n  elseif p == 14 then\n    return n\
    \ ^ 14\n  elseif p == 15 then\n    return n ^ 15\n  elseif p == 16 then\n    return\
    \ n ^ 16\n  elseif p == 17 then\n    return n ^ 17\n  elseif p == 18 then\n  \
    \  return n ^ 18\n  elseif p == 19 then\n    return n ^ 19\n  elseif p == 20 then\n\
    \    return n ^ 20\n  elseif p == 21 then\n    return n ^ 21\n  elseif p == 22\
    \ then\n    return n ^ 22\n  elseif p == 23 then\n    return n ^ 23\n  elseif\
    \ p == 24 then\n    return n ^ 24\n  elseif p == 25 then\n    return n ^ 25\n\
    \  elseif p == 26 then\n    return n ^ 26\n  elseif p == 27 then\n    return n\
    \ ^ 27\n  elseif p == 28 then\n    return n ^ 28\n  elseif p == 29 then\n    return\
    \ n ^ 29\n  elseif p == 30 then\n    return n ^ 30\n  elseif p == 31 then\n  \
    \  return n ^ 31\n  elseif p == 32 then\n    return n ^ 32\n  elseif p == 33 then\n\
    \    return n ^ 33\n  elseif p == 34 then\n    return n ^ 34\n  elseif p == 35\
    \ then\n    return n ^ 35\n  elseif p == 36 then\n    return n ^ 36\n  elseif\
    \ p == 37 then\n    return n ^ 37\n  elseif p == 38 then\n    return n ^ 38\n\
    \  elseif p == 39 then\n    return n ^ 39\n  elseif p == 4", "  local r = 1\n\
    \  while n > 0 do\n    r = r * p % n\n    n = n / 2\n  end\n  return r\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
