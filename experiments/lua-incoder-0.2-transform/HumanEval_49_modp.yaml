name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n\
  -- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--\
  \ 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local t = n % p\n  if t > 0 then\n    return modp(t, p)\n  elseif\
    \ t < 0 then\n    return modp((t - p) + p, p)\n  else\n    return t\n  end\nend",
  "  if p == 0 then return 1 end\n  if p == 1 then return n end\n  if p == n then\
    \ return 1 end\n  local q = modp(n / p, p)\n  if n % p == 0 then return q else\
    \ return q + 1 end\nend", "  local nn = math.floor(n/p)\n  if nn ~= n then return\
    \ modp(nn, p) end\n  return nn\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 or p == 2 or p == 3 then\n    return n\n  end\n  local r = n % p\n\
    \  if r == 0 then\n    return r\n  end\n  return modp(r, p) + 1\nend", "  if p\
    \ == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if\
    \ p == n then\n    return 0\n  end\n  local r = n % p\n  if r == 0 then\n    return\
    \ modp(n, p - 1)\n  else\n    return modp(r * p, p)\n  end\nend", "  if p == 0\
    \ then return 1 end\n  if p == 1 then return n end\n  if p == n then return 1\
    \ end\n  if p == -1 then return -1 end\n  local q = modp(n / p, p)\n  if n % p\
    \ == 0 then return q end\n  return q * p + (n - q * p) * p\nend", "  if p == 0\
    \ then\n    return 1\n  end\n  if p == 1 then\n    return n\n  end\n  if p ==\
    \ n then\n    return 0\n  end\n  local q = modp(n / p, p)\n  if n % p == 0 then\n\
    \    return q * p + n\n  end\n  return q\nend", "  local nn = math.floor(n)\n\
    \  if nn < 0 then return nil end\n  if nn == 0 then return 1 end\n  local r =\
    \ n % p\n  if r == 0 then return 1 end\n  if r > 0 then return modp(nn, p) end\n\
    \  return modp(nn - 1, p) * p\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 then\n    return n\n  end\n  local q = modp(n / p, p)\n  if n % p\
    \ == 0 then\n    return q * p + q\n  else\n    return q\n  end\nend", "  -- Return\
    \ 2^n modulo p (be aware of numerics).\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>>\
    \ modp(1101, 101)\n  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n\
    \  -- 8\n  -- >>> modp(100, 101)\n  -- 1\n  if n == 0 then\n    return 1\n  end\n\
    \  -- Return 2^n modulo p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n\
    \  -- 2\n  -- >>> modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>>\
    \ modp(100, 101)\n  -- 1\n  local r = 1\n  local m = 1\n  while n > 0 do\n   \
    \ r = r * 2 % p\n    n = n / 2\n    m = m * 2 % p\n  end\n  -- Return r modulo\
    \ p.\n  -- >>> modp(3, 5)\n  -- 3\n  -- >>> modp(1101, 101)\n  -- 2\n  -- >>>\
    \ modp(0, 101)\n  -- 1\n  -- >>> modp(3, 11)\n  -- 8\n  -- >>> modp(100, 101)\n\
    \  -- 1\n  return r\nend", "  local nn = math.floor(n)\n  local p = p or 1\n \
    \ if nn == n then\n    return p\n  elseif nn == 0 then\n    return 0\n  end\n\
    \  local r = n % p\n  if r == 0 then\n    return modp(nn, p)\n  else\n    return\
    \ modp(r * p, p)\n  end\nend", "  local t = 1\n  while n > p do\n    t = t * p\n\
    \    n = n - t\n  end\n  return t\nend", "  if p == 0 then\n    return 1\n  end\n\
    \  if p == 1 then\n    return n\n  end\n  if p == n then\n    return 0\n  end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then\n    return q * p + n\n  end\n\
    \  return q\nend", "  local m = n % p\n  if m == 0 then\n    return p\n  else\n\
    \    return modp(m, p)\n  end\nend", "  local n1 = math.floor(n)\n  local n2 =\
    \ n - n1\n  local n3 = math.floor(p * n2)\n  local n4 = p - n3\n  local n5 = math.floor(n1\
    \ * n4)\n  local n6 = n1 - n5\n  return n5 * p + n6\nend", "  if p == 0 then\n\
    \    return 1\n  elseif p == 1 then\n    return n\n  else\n    return n % p\n\
    \  end\nend", "  if p == 0 then return 1 end\n  local q = modp(n / p, p)\n  if\
    \ n % p == 0 then return q else return q + 1 end\nend", "  if p == 0 then\n  \
    \  return 1\n  elseif p == 1 then\n    return n\n  elseif p == -1 then\n    return\
    \ -n\n  end\n  local q = n / p\n  local r = n % p\n  return modp(q, p) * p + r\n\
    end", "  if n == 0 then return 1 end\n  if p == 0 then return 0 end\n  if p ==\
    \ 1 or p == 2 then return n end\n  if p == 3 then return n end\n  if p == 4 then\
    \ return n end\n  if p == 5 then return n end\n  if p == 6 then return n end\n\
    \  if p == 7 then return n end\n  if p == 8 then return n end\n  if p == 9 then\
    \ return n end\n  if p == 10 then return n end\n  if p == 11 then return n end\n\
    \  if p == 12 then return n end\n  if p == 13 then return n end\n  if p == 14\
    \ then return n end\n  if p == 15 then return n end\n  if p == 16 then return\
    \ n end\n  if p == 17 then return n end\n  if p == 18 then return n end\n  if\
    \ p == 19 then return n end\n  if p == 20 then return n end\n  if p == 21 then\
    \ return n end\n  if p == 22 then return n end\n  if p == 23 then return n end\n\
    \  if p == 24 then return n end\n  if p == 25 then return n end\n  if p == 26\
    \ then return n end\n  if p == 27 then return n end\n  if p == 28 then return\
    \ n end\n  if p == 29 then return n end\n  if p == 30 then return n end\n  if\
    \ p == 31 then return n end\n  if p == 32 then return n end\n  if p == 33 then\
    \ return n end\n  if p == 34 then return n end\n  if p == 35 then return n end\n\
    \  if p == 36 then return n end\n  if p == 37 then return n end\n  if p == 38\
    \ then return n end\n  if p == 39 then return n end\n  if p == 40 then return\
    \ n end\n  if p == 41 then return n end\n  if p == 42 then return n end\n  if\
    \ p == 43 then return n end\n  if p == 44 then return n end\n  if p == 45 then\
    \ return n end\n  if p == 46 then return n end\n  if p == 47 then return n end\n\
    \  if p == 48 then return n end\n  if p == 49 then return n end\n  if p == 50\
    \ then return n end\n  if p == 51 then return n end\n  if p == 52 then return\
    \ n end\n  if p == 53 then return n end\n  if p == 54 then return n end\n  if\
    \ p == 55 then return n end\n  if p == 56 then ", "  if p == 0 then\n    return\
    \ 1\n  elseif p == 1 then\n    return n\n  else\n    return modp(n / p, p) * p\
    \ + n % p\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
