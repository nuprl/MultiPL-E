name: HumanEval_82_prime_length
language: lua
prompt: "-- Write a function that takes a string and returns True if the string\n\
  -- length is a prime number or False otherwise\n-- Examples\n-- >>> prime_length('Hello')\n\
  -- true\n-- >>> prime_length('abcdcba')\n-- true\n-- >>> prime_length('kittens')\n\
  -- true\n-- >>> prime_length('orange')\n-- false\nlocal function prime_length(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_length\n\
  \    lu.assertEquals(candidate('Hello'), true)\n    lu.assertEquals(candidate('abcdcba'),\
  \ true)\n    lu.assertEquals(candidate('kittens'), true)\n    lu.assertEquals(candidate('orange'),\
  \ false)\n    lu.assertEquals(candidate('wow'), true)\n    lu.assertEquals(candidate('world'),\
  \ true)\n    lu.assertEquals(candidate('MadaM'), true)\n    lu.assertEquals(candidate('Wow'),\
  \ true)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('HI'),\
  \ true)\n    lu.assertEquals(candidate('go'), true)\n    lu.assertEquals(candidate('gogo'),\
  \ false)\n    lu.assertEquals(candidate('aaaaaaaaaaaaaaa'), false)\n    lu.assertEquals(candidate('Madam'),\
  \ true)\n    lu.assertEquals(candidate('M'), false)\n    lu.assertEquals(candidate('0'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your solution here\nend", "  -- Your code here\nend", " \
    \ -- Write your solution here\nend", "  -- Your code here\nend", "    local prime\
    \ = true\n    for i = 2, #string do\n        if string.sub(string,i,i) == '' then\n\
    \            prime = false\n            break\n        end\n    end\n    return\
    \ prime\nend", "    local prime = true\n    for i = 2, #string do\n        if\
    \ string.sub(string,i,i) == '' then\n            prime = false\n            break\n\
    \        end\n    end\n    return prime\nend", "  -- Write your solution here\n\
    end", "  -- Your code here\nend", "  -- Your code here\nend", "  -- Write your\
    \ solution here\nend", "  -- Write your solution here\nend", "  -- Write your\
    \ solution here\nend", "  -- Your code here\nend", "  if string == nil then return\
    \ false end\n  local count = 0\n  for i = 1, #string do\n    count = count + 1\n\
    \    if string[i] == string[i] then\n      count = count - 1\n    end\n  end\n\
    \  return count < 2\nend", "    local prime_numbers = { 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997}\n    local\
    \ prime_number_count = 0\n    for i = 1, #string do\n        if string.sub(i,\
    \ i, i) ~= '' then\n            prime_number_count = prime_number_count + 1\n\
    \        end\n    end\n    if prime_number_count > 1 then\n        return false\n\
    \    end\n    for i = 1, #prime_numbers do\n        if string.sub(i, i, i) ~=\
    \ '' then\n            if string.sub(i, i, i) == string.sub(string, 1, i) then\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend", "  -- Write your solution here\nend", "  -- Write your solution\
    \ here\nend", "  -- Your code here\nend", "  -- Write your solution here\nend",
  "  -- Write your solution here\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
