language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmhpwjmi5.lua:19: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5iyd3sy5.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp5iyd3sy5.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5iyd3sy5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n    \
    \    max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslxgywgb.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpslxgywgb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = rolling_max_index\
    \ + 1, #numbers do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgot8xj_.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphgot8xj_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphgot8xj_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5c40mmg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpd5c40mmg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpd5c40mmg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  local rolling_max_index\
    \ = rolling_max_index + 1\n  while rolling_max_index <= #numbers do\n    rolling_max\
    \ = numbers[rolling_max_index]\n    for i = rolling_max_index + 1, #numbers do\n\
    \      if numbers[i] < rolling_max then\n        rolling_max = numbers[i]\n  \
    \      rolling_max_index = i\n        rolling_max_value = rolling_max\n      end\n\
    \    end\n    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8uijfn4w.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp8uijfn4w.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8uijfn4w.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  for i = 1, #numbers do\n    local\
    \ max_value = numbers[i]\n    for j = 1, i do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0a19vdl.lua:6:\
    \ attempt to call field 'newlist' (a nil value)\nstack traceback:\n\t/tmp/tmpc0a19vdl.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpc0a19vdl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi7itnqn.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmppi7itnqn.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppi7itnqn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs4rk8o7.lua:68: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max_index\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n    if rolling_max_index ~= nil then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92qqvfer.lua:37:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp92qqvfer.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpber73dpq.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpber73dpq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpber73dpq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5c40mmg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpd5c40mmg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpd5c40mmg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdc45ouf.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprdc45ouf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmq1mw6d6.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshv2v1xm.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpshv2v1xm.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpshv2v1xm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i = 1,\
    \ #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64r4fqy_.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp64r4fqy_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp64r4fqy_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
