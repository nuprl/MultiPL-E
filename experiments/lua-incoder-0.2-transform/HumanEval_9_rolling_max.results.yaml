language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmhpwjmi5.lua:19: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5iyd3sy5.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp5iyd3sy5.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp5iyd3sy5.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  for i = 1, #numbers do\n    local max_element = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > max_element then\n    \
    \    max_element = numbers[j]\n      end\n    end\n    table.insert(rolling_max,\
    \ max_element)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpslxgywgb.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpslxgywgb.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = rolling_max_index\
    \ + 1, #numbers do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgot8xj_.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphgot8xj_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphgot8xj_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5c40mmg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpd5c40mmg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpd5c40mmg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  local rolling_max_index\
    \ = rolling_max_index + 1\n  while rolling_max_index <= #numbers do\n    rolling_max\
    \ = numbers[rolling_max_index]\n    for i = rolling_max_index + 1, #numbers do\n\
    \      if numbers[i] < rolling_max then\n        rolling_max = numbers[i]\n  \
    \      rolling_max_index = i\n        rolling_max_value = rolling_max\n      end\n\
    \    end\n    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8uijfn4w.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp8uijfn4w.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp8uijfn4w.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  for i = 1, #numbers do\n    local\
    \ max_value = numbers[i]\n    for j = 1, i do\n      if numbers[j] > max_value\
    \ then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc0a19vdl.lua:6:\
    \ attempt to call field 'newlist' (a nil value)\nstack traceback:\n\t/tmp/tmpc0a19vdl.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpc0a19vdl.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppi7itnqn.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmppi7itnqn.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppi7itnqn.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs4rk8o7.lua:68: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers do\n    if rolling_max\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max_index\
    \ ~= nil then\n      if rolling_max_value ~= numbers[i] then\n        rolling_max\
    \ = nil\n        rolling_max_index = nil\n      end\n    end\n    if rolling_max\
    \ ~= nil then\n      rolling_max_index = i\n      rolling_max_value = numbers[i]\n\
    \    end\n    if rolling_max_index ~= nil then\n      rolling_max = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp92qqvfer.lua:37:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp92qqvfer.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpber73dpq.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpber73dpq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpber73dpq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5c40mmg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpd5c40mmg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpd5c40mmg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdc45ouf.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprdc45ouf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmq1mw6d6.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshv2v1xm.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpshv2v1xm.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpshv2v1xm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i = 1,\
    \ #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp64r4fqy_.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmp64r4fqy_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp64r4fqy_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfh9pq7ip.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpfh9pq7ip.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpfh9pq7ip.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers.shift())\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcauh4z6d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcauh4z6d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcauh4z6d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4u0r78o.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpj4u0r78o.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj4u0r78o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_index2 = numbers.new()\n  local max_index3\
    \ = numbers.new()\n  local max_index4 = numbers.new()\n  local max_index5 = numbers.new()\n\
    \  local max_index6 = numbers.new()\n  local max_index7 = numbers.new()\n  local\
    \ max_index8 = numbers.new()\n  local max_index9 = numbers.new()\n  local max_index10\
    \ = numbers.new()\n  local max_index11 = numbers.new()\n  local max_index12 =\
    \ numbers.new()\n  local max_index13 = numbers.new()\n  local max_index14 = numbers.new()\n\
    \  local max_index15 = numbers.new()\n  local max_index16 = numbers.new()\n  local\
    \ max_index17 = numbers.new()\n  local max_index18 = numbers.new()\n  local max_index19\
    \ = numbers.new()\n  local max_index20 = numbers.new()\n  local max_index21 =\
    \ numbers.new()\n  local max_index22 = numbers.new()\n  local max_index23 = numbers.new()\n\
    \  local max_index24 = numbers.new()\n  local max_index25 = numbers.new()\n  local\
    \ max_index26 = numbers.new()\n  local max_index27 = numbers.new()\n  local max_index28\
    \ = numbers.new()\n  local max_index29 = numbers.new()\n  local max_index30 =\
    \ numbers.new()\n  local max_index31 = numbers.new()\n  local max_index32 = numbers.new()\n\
    \  local max_index33 = numbers.new()\n  local max_index34 = numbers.new()\n  local\
    \ max_index35 = numbers.new()\n  local max_index36 = numbers.new()\n  local max_index37\
    \ = numbers.new()\n  local max_index38 = numbers.new()\n  local max_index39 =\
    \ numbers.new()\n  local max_index40 = numbers.new()\n  local max_index41 = numbers.new()\n\
    \  local max_index42 = numbers.new()\n  local max_index43 = numbers.new()\n  local\
    \ max_index44 = numbers.new()\n  local max_index45 = numbers.new()\n  local max_index46\
    \ = numbers.new()\n  local max_index47 = numbers.new()\n  local max_index48 =\
    \ numbers.new()\n  local max_index49 = numbers.new()\n  local max_index50 = numbers.new()\n\
    \  local max_index51 = numbers.new\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplgv_dh9k.lua:69: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local value = numbers[i]\n    rolling_max[#rolling_max + 1] = value\n   \
    \ i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd5c40mmg.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmpd5c40mmg.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpd5c40mmg.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n  local rolling_max_time = numbers[1]\n  local\
    \ rolling_max_time = numbers[1]\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7zcniq0x.lua:74: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpej3ygs4s.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpej3ygs4s.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpej3ygs4s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpber73dpq.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpber73dpq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpber73dpq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  while rolling_max_index\
    \ do\n    rolling_max = numbers[rolling_max_index]\n    rolling_max_index = rolling_max_index\
    \ - 1\n    rolling_max_value = rolling_max\n  end\n  return rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkquhcuge.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpkquhcuge.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkquhcuge.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4u0r78o.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpj4u0r78o.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj4u0r78o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  while numbers:len() > 0 do\n    local current_value\
    \ = numbers.shift()\n    if current_value > rolling_max_value then\n      rolling_max_value\
    \ = current_value\n      rolling_max_index = rolling_max_index + 1\n    end\n\
    \  end\n  return rolling_max_value, rolling_max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkegnmbya.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpkegnmbya.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkegnmbya.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpicvk86uo.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  local max_value\
    \ = rolling_max\n  for i = 1, #numbers do\n    if numbers[i] < rolling_max then\n\
    \      rolling_max = numbers[i]\n      max_index = i\n      max_value = rolling_max\n\
    \    end\n  end\n  return max_index, max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgshrr1f1.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpgshrr1f1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpgshrr1f1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmq1mw6d6.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    local max_index = i\n    for j = i + 1,\
    \ #numbers do\n      if numbers[j] > max_value then\n        max_value = numbers[j]\n\
    \        max_index = j\n      end\n    end\n    rolling_max[max_index] = max_value\n\
    \    i = max_index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp5is8ljs.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpp5is8ljs.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpp5is8ljs.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojldk9un.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpojldk9un.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpojldk9un.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max:insert(max_value)\n  while index <= #numbers do\n    local value\
    \ = numbers[index]\n    if value > max_value then\n      rolling_max:insert(value)\n\
    \    else\n      rolling_max:insert(max_value)\n    end\n    max_value = value\n\
    \    index = index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf5xpxxm8.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpf5xpxxm8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf5xpxxm8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] < rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnikygg9m.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpnikygg9m.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpnikygg9m.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while #numbers > 0 do\n    rolling_max\
    \ = math.max(rolling_max, numbers[#numbers])\n    numbers = numbers:drop(1)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqsljmqg.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpwqsljmqg.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwqsljmqg.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdc45ouf.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprdc45ouf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rnob7ef.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp0rnob7ef.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0rnob7ef.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01goem9j.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp01goem9j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswwanm76.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpswwanm76.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpswwanm76.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j5g0idk.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmp3j5g0idk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswwanm76.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpswwanm76.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpswwanm76.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs4rk8o7.lua:68: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers.shift())\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcauh4z6d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcauh4z6d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcauh4z6d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max_value then\n      max_index\
    \ = i\n      max_value = numbers[i]\n    end\n  end\n  table.insert(rolling_max,\
    \ max_value)\n  for i = max_index, #numbers do\n    table.insert(rolling_max,\
    \ numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqhi7qqkr.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpqhi7qqkr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrteiv4b.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpdrteiv4b.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpdrteiv4b.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = nil\n  for i = 1, #numbers do\n    if max_value == nil then\n  \
    \    max_value = numbers[i]\n      max_index = i\n    else\n      if numbers[i]\
    \ > max_value then\n        max_value = numbers[i]\n        max_index = i\n  \
    \    end\n    end\n  end\n  rolling_max:insert(max_value)\n  rolling_max:insert(max_index)\n\
    \  rolling_max:insert(max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_guz0q3.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpx_guz0q3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpx_guz0q3.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwgcaunh.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpgwgcaunh.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpgwgcaunh.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = rolling_max:new(max_value)\n\
    \      max_value = numbers[i]\n    end\n    rolling_max:insert(numbers[i])\n \
    \ end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplafbrn8m.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmplafbrn8m.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplafbrn8m.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  while numbers do\n    local current_value\
    \ = numbers[rolling_max_index]\n    if current_value > rolling_max_value then\n\
    \      rolling_max_value = current_value\n      rolling_max_index = rolling_max_index\
    \ + 1\n    end\n    rolling_max = rolling_max\n  end\n  return rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0qimy_nr.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp0qimy_nr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0qimy_nr.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers.shift())\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcauh4z6d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcauh4z6d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcauh4z6d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7iakshq.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpm7iakshq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm7iakshq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  while numbers do\n    rolling_max = numbers[rolling_max_index] or rolling_max\n\
    \    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ins5d0.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp_0ins5d0.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_0ins5d0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wenzdp0.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp2wenzdp0.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp2wenzdp0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    else\n      rolling_max_value\
    \ = numbers[i]\n    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk23z74wv.lua:26:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmpk23z74wv.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0rnob7ef.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp0rnob7ef.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp0rnob7ef.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  while numbers do\n    rolling_max\
    \ = numbers[rolling_max_index] or rolling_max\n    rolling_max_index = rolling_max_index\
    \ + 1\n    rolling_max_value = numbers[rolling_max_index] or rolling_max_value\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl38z28d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpkl38z28d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkl38z28d.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  for i = 1, #numbers do\n \
    \   if numbers[i] > rolling_max[max_index] then\n      rolling_max[max_index]\
    \ = numbers[i]\n    end\n    max_index = max_index + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx2zdvvd5.lua:9:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx2zdvvd5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpx2zdvvd5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  for i\
    \ = 1, #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplyxyw5ps.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmplyxyw5ps.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplyxyw5ps.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  while numbers and rolling_max_index <= #numbers do\n    rolling_max = numbers[rolling_max_index]\
    \ or rolling_max\n    rolling_max_index = rolling_max_index + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v7sgu60.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp9v7sgu60.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp9v7sgu60.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] < rolling_max and numbers[i]:max(rolling_max) or rolling_max\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog4zlrr1.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpog4zlrr1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpog4zlrr1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpshv2v1xm.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpshv2v1xm.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpshv2v1xm.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local last_index = 0\n  local last_value = 0\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if last_index == 0 then\n\
    \      rolling_max[#rolling_max + 1] = value\n    else\n      if value > last_value\
    \ then\n        rolling_max[#rolling_max + 1] = value\n      else\n        rolling_max[#rolling_max\
    \ + 1] = last_value\n      end\n    end\n    last_index = i\n    last_value =\
    \ value\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppm0ex552.lua:31:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 4, 3, 2}\nstack traceback:\n\t/tmp/tmppm0ex552.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4u0r78o.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpj4u0r78o.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj4u0r78o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max_index == nil then\n      rolling_max_index = i\n    \
    \  rolling_max = numbers[i]\n    else\n      if numbers[i] > rolling_max then\n\
    \        rolling_max_index = i\n        rolling_max = numbers[i]\n      end\n\
    \    end\n  end\n  return rolling_max_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0e1ix7x6.lua:25:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp0e1ix7x6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n      rolling_max\
    \ = numbers[i]\n    else\n      if numbers[i] > max_value then\n        max_value\
    \ = numbers[i]\n        rolling_max = numbers[i]\n      else\n        rolling_max\
    \ = rolling_max .. \", \" .. numbers[i]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1bj73k7.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpa1bj73k7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4u0r78o.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpj4u0r78o.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj4u0r78o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local index = 1\n  local max_value = numbers[index]\n\
    \  rolling_max[index] = max_value\n  index = index + 1\n  while index <= #numbers\
    \ do\n    if numbers[index] > max_value then\n      max_value = numbers[index]\n\
    \    end\n    index = index + 1\n    rolling_max[index] = max_value\n  end\n \
    \ return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf5c02loe.lua:25:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 3=2, 4=3, 5=4}\nstack traceback:\n\t/tmp/tmpf5c02loe.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_so_far = numbers.new()\n  for\
    \ i = 1, numbers.n do\n    local value = numbers[i]\n    if max_so_far == nil\
    \ then\n      rolling_max[i] = value\n      max_so_far = value\n    else\n   \
    \   if value > max_so_far then\n        rolling_max[i] = value\n        max_so_far\
    \ = value\n      else\n        rolling_max[i] = max_so_far\n        max_so_far\
    \ = max_so_far\n      end\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwcjkaytp.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpwcjkaytp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwcjkaytp.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptt3x5uce.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmptt3x5uce.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptt3x5uce.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_index = rolling_max_index\
    \ + 1\n  while rolling_max_index <= #numbers do\n    rolling_max_value = rolling_max_value\
    \ or numbers[rolling_max_index]\n    if rolling_max_value > numbers[rolling_max_index]\
    \ then\n      rolling_max = numbers[rolling_max_index]\n      rolling_max_index\
    \ = rolling_max_index + 1\n    else\n      rolling_max = rolling_max_value\n \
    \     rolling_max_index = rolling_max_index + 1\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8t5s72xl.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp8t5s72xl.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp8t5s72xl.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  for i = 1, #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvsxcob1r.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpvsxcob1r.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvsxcob1r.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  local\
    \ max_index = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max:insert(max_value)\n      max_value = numbers[i]\n  \
    \    max_index = i\n    end\n    rolling_max:insert(numbers[i])\n  end\n  rolling_max:insert(max_value)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt9d42bkh.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpt9d42bkh.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpt9d42bkh.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmq1mw6d6.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpber73dpq.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpber73dpq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpber73dpq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mhzfi3o.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(numbers[rolling_max_index])\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6e2jlmfd.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmp6e2jlmfd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6e2jlmfd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(numbers[rolling_max_index])\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6e2jlmfd.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmp6e2jlmfd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6e2jlmfd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf973zqp_.lua:70: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] < rolling_max and numbers[i]:max(rolling_max) or rolling_max\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpog4zlrr1.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpog4zlrr1.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpog4zlrr1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n    rolling_max:insert(rolling_max_value)\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprln81b4g.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmprln81b4g.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmprln81b4g.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7iakshq.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpm7iakshq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm7iakshq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_time = i\n    end\n  end\n  rolling_max_index = rolling_max_time\n\
    \  for i = 1, #numbers do\n    if numbers[i] ~= rolling_max_value then\n     \
    \ rolling_max_value = numbers[i]\n      rolling_max_time = i\n    end\n  end\n\
    \  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy_1uayzj.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpy_1uayzj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpy_1uayzj.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    if rolling_max ~= nil then\n      if rolling_max_index == i then\n \
    \       rolling_max[rolling_max_index] = numbers[i]\n      else\n        rolling_max[rolling_max_index]\
    \ = rolling_max[rolling_max_index] or numbers[i]\n      end\n    else\n      rolling_max\
    \ = numbers[i]\n    end\n    rolling_max_index = i\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74ufil41.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp74ufil41.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers.shift())\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcauh4z6d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcauh4z6d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcauh4z6d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = nil\n  local rolling_max_time = nil\n  for i = 1, #numbers do\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = numbers[i]\n      rolling_max_index =\
    \ i\n      rolling_max_time = numbers[i]\n    else\n      if rolling_max_time\
    \ < numbers[i] then\n        rolling_max_value = numbers[i]\n        rolling_max_index\
    \ = i\n        rolling_max_time = numbers[i]\n      else\n        rolling_max_value\
    \ = rolling_max_value\n        rolling_max_index = rolling_max_index\n       \
    \ rolling_max_time = rolling_max_time\n      end\n    end\n  end\n  return rolling_max_index,\
    \ rolling_max_value, rolling_max_time\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdyv5kbsq.lua:33:\
    \ expected: {}\nactual: 0\nstack traceback:\n\t/tmp/tmpdyv5kbsq.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n    table.insert(rolling_max, rolling_max_value)\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwxvci_ly.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpwxvci_ly.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwxvci_ly.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(numbers[rolling_max_index])\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6e2jlmfd.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmp6e2jlmfd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6e2jlmfd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_value = 0\n  for i = 1, #numbers do\n \
    \   if numbers[i] > max_value then\n      max_value = numbers[i]\n    end\n  \
    \  table.insert(rolling_max, max_value)\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_element = numbers.new()\n \
    \ local last_element_index = 1\n  local last_element_value = numbers[1]\n  local\
    \ last_element_time = nil\n  for i = 2, #numbers do\n    local element = numbers[i]\n\
    \    if element > last_element_value then\n      rolling_max:insert(last_element_value)\n\
    \      last_element_index = last_element_index + 1\n      last_element_value =\
    \ element\n      last_element_time = last_element_time\n    else\n      last_element_value\
    \ = element\n    end\n  end\n  rolling_max:insert(last_element_value)\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptokbkcux.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmptokbkcux.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmptokbkcux.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_index = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max[rolling_max_index]\
    \ = rolling_max_value\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max[rolling_max_index] = rolling_max_value\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpli0mxgw3.lua:17:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpli0mxgw3.lua:17: in local 'candidate'\n\
    \t/tmp/tmpli0mxgw3.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[i] = element\n    i = i + 1\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplce2kg6a.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmplce2kg6a.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplce2kg6a.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max = numbers[rolling_max_index]\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqweciu9e.lua:22:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpqweciu9e.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7iakshq.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpm7iakshq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm7iakshq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_count = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_count\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_count = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_count = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_count = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf973zqp_.lua:70: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  while numbers do\n    rolling_max = numbers[rolling_max_index] or rolling_max\n\
    \    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ins5d0.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp_0ins5d0.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_0ins5d0.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmhpwjmi5.lua:19: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  local max_value = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max[max_index]\
    \ = max_value\n      max_value = numbers[i]\n      max_index = i\n    end\n  end\n\
    \  rolling_max[max_index] = max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq1c0henp.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmpq1c0henp.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local index = 1\n  local max_value\
    \ = numbers[1]\n  local max_index = numbers[1]\n  local max_element = numbers[1]\n\
    \  for i = 2, #numbers do\n    if numbers[i] ~= max_value then\n      rolling_max:insert(max_value)\n\
    \      index = index + 1\n      max_value = numbers[i]\n      max_index = i\n\
    \      max_element = numbers[i]\n    else\n      rolling_max:insert(max_element)\n\
    \      index = index + 1\n      max_value = numbers[i]\n      max_index = i\n\
    \      max_element = numbers[i]\n    end\n  end\n  rolling_max:insert(max_element)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4f9cho5.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpo4f9cho5.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpo4f9cho5.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_index = rolling_max_index\
    \ + 1\n  while rolling_max_index <= #numbers do\n    rolling_max_value = rolling_max\
    \ > numbers[rolling_max_index] and\n      rolling_max or numbers[rolling_max_index]\n\
    \    rolling_max_index = rolling_max_index + 1\n  end\n  return rolling_max_value\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpklqzaxyb.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpklqzaxyb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpklqzaxyb.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      rolling_max_element = math.max(rolling_max_element,\
    \ numbers[j])\n    end\n    rolling_max = rolling_max or rolling_max_element\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n_xlbrm.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp3n_xlbrm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  for i\
    \ = 1, #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe3b17xk.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpbe3b17xk.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbe3b17xk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  for i = 1, #numbers\
    \ do\n    if numbers[i] ~= rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4akitfpx.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp4akitfpx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4akitfpx.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n\
    \    local max_value = numbers[i]\n    for j = i + 1, #numbers do\n      if numbers[j]\
    \ > value then\n        value = numbers[j]\n        max_value = numbers[j]\n \
    \     end\n    end\n    numbers[i] = max_value\n    if rolling_max ~= nil then\n\
    \      rolling_max = rolling_max .. \", \" .. max_value\n    else\n      rolling_max\
    \ = max_value\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s53mnxh.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp4s53mnxh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm7iakshq.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpm7iakshq.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm7iakshq.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    if rolling_max_value == nil then\n    \
    \  rolling_max_value = numbers[i]\n      rolling_max_index = i\n    else\n   \
    \   if rolling_max_value < numbers[i] then\n        rolling_max_value = numbers[i]\n\
    \        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_value\
    \ ~= nil then\n    rolling_max = table.insert(rolling_max, rolling_max_value)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpra6rj7te.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpra6rj7te.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local index = 1\n  local max_value = numbers[index]\n\
    \  while index <= #numbers do\n    if numbers[index] > max_value then\n      rolling_max[#rolling_max\
    \ + 1] = max_value\n      max_value = numbers[index]\n    end\n    index = index\
    \ + 1\n  end\n  rolling_max[#rolling_max + 1] = max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx7_t14dm.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmpx7_t14dm.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max[i] = numbers[i]\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= #numbers do\n    if numbers[j] > rolling_max[#rolling_max] then\n     \
    \ rolling_max[#rolling_max] = numbers[j]\n    end\n    j = j + 1\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplw1yio_l.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmplw1yio_l.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplw1yio_l.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max[rolling_max_index] = rolling_max_value\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_0cka8u.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpo_0cka8u.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpo_0cka8u.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers[1]\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > max_value then\n      rolling_max = rolling_max:new(max_value)\n\
    \      max_value = numbers[i]\n    end\n    rolling_max:new(numbers[i])\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpigp8p21n.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpigp8p21n.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpigp8p21n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_index = numbers[1]\n  for i = 2, #numbers\
    \ do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_index)\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mn2xcub.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp7mn2xcub.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7mn2xcub.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_index = i\n      rolling_max_value\
    \ = numbers[i]\n    end\n    table.insert(rolling_max, rolling_max_value)\n  end\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8w98zl6s.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmp8w98zl6s.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp8w98zl6s.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  for i = 1, #numbers\
    \ do\n    if numbers[i] >= rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpso0797v3.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpso0797v3.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpso0797v3.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  local rolling_max_time = numbers[1]\n  for\
    \ i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_time = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_time)\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_time\
    \ = i\n    end\n    rolling_max:insert(rolling_max_value)\n    rolling_max:insert(rolling_max_time)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd87227cp.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpd87227cp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpd87227cp.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j5g0idk.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmp3j5g0idk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = nil\n  for\
    \ i = 1, #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  if rolling_max_index\
    \ ~= nil then\n    rolling_max = numbers[rolling_max_index]\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu4vpbtd.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmplu4vpbtd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplu4vpbtd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local i = 1\n  while i <= #numbers do\n    local\
    \ value = numbers[i]\n    local found = false\n    for j = i - 1, -1, -1 do\n\
    \      if numbers[j] > value then\n        found = true\n        break\n     \
    \ end\n    end\n    if not found then\n      table.insert(rolling_max, value)\n\
    \    end\n    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lg_lhwl.lua:12:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp0lg_lhwl.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp0lg_lhwl.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_value = rolling_max\n  for\
    \ i = 1, #numbers do\n    if numbers[i] > max_value then\n      max_value = numbers[i]\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5psuacts.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp5psuacts.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5psuacts.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp01goem9j.lua:25:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmp01goem9j.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or rolling_max\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7r39_0f4.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7r39_0f4.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7r39_0f4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmq1mw6d6.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2ff1xd9.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpr2ff1xd9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr2ff1xd9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 0\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max[rolling_max_index] = rolling_max_value\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_index = i\n    end\n\
    \  end\n  rolling_max[rolling_max_index] = rolling_max_value\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo_0cka8u.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpo_0cka8u.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpo_0cka8u.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index\
    \ = 1\n  local rolling_max_value = rolling_max\n  local rolling_max_count = 0\n\
    \  local rolling_max_index = 1\n  local rolling_max_value = rolling_max\n  local\
    \ rolling_max_count = 0\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index = 1\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = rolling_max\n  local rolling_max_count\
    \ = 0\n  local rolling_max_index = 1\n  local rolling_max_value = rolling_max\n\
    \  local rolling_max_count = 0\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index = 1\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = rolling_max\n  local rolling_max_count\
    \ = 0\n  local rolling_max_index = 1\n  local rolling_max_value = rolling_max\n\
    \  local rolling_max_count = 0\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index = 1\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = rolling_max\n  local rolling_max_count\
    \ = 0\n  local rolling_max_index = 1\n  local rolling_max_value = rolling_max\n\
    \  local rolling_max_count = 0\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  local rolling_max_count = 0\n  local rolling_max_index = 1\n\
    \  local rolling_max_value = rolling_max\n  local rolling_max_count = 0\n  local\
    \ rolling_max_index = 1\n  local rolling_max_value = rolling_max\n  local rolling_max_count\
    \ = 0\n  local rolling_max_index = 1\n  local rolling_max_value = rolling_max\n\
    \  local rolling_max_count = 0\n  local rolling_max_index = 1\n  local rolling_max_value\
    \ = rolling_max\n  local rolling_max_count = 0\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpys2rvh5t.lua:78: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  for i = 1, #numbers\
    \ do\n    if numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n \
    \     max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nme9c3h.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp3nme9c3h.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3nme9c3h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max_index = 0\n  for i = 1, #numbers do\n \
    \   if numbers[i] ~= numbers[max_index] then\n      table.insert(rolling_max,\
    \ numbers[i])\n      max_index = i\n    end\n  end\n  table.insert(rolling_max,\
    \ numbers[max_index])\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwzocx8o.lua:22:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 2, 3, 4, 4}\nstack traceback:\n\t/tmp/tmpqwzocx8o.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  while numbers do\n    rolling_max\
    \ = numbers[rolling_max_index] or rolling_max\n    rolling_max_index = rolling_max_index\
    \ + 1\n    rolling_max_value = numbers[rolling_max_index] or rolling_max_value\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkl38z28d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpkl38z28d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpkl38z28d.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  while numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[rolling_max_index])\n    rolling_max_index =\
    \ rolling_max_index + 1\n    rolling_max_value = rolling_max_value or rolling_max\n\
    \  end\n  return rolling_max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_c2q5fa.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp4_c2q5fa.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4_c2q5fa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpber73dpq.lua:6:\
    \ attempt to call field 'shift' (a nil value)\nstack traceback:\n\t/tmp/tmpber73dpq.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpber73dpq.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = nil\n  for\
    \ i = 1, #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  if rolling_max_index\
    \ ~= nil then\n    rolling_max = numbers[rolling_max_index]\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplu4vpbtd.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmplu4vpbtd.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplu4vpbtd.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpej3ygs4s.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpej3ygs4s.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpej3ygs4s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  for i = 1, #numbers\
    \ do\n    if numbers[i] < rolling_max then\n      rolling_max = numbers[i]\n \
    \     max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpawdycu18.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpawdycu18.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpawdycu18.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs4rk8o7.lua:68: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    rolling_max\
    \ = numbers[i] and rolling_max or numbers[i]\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj4u0r78o.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpj4u0r78o.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpj4u0r78o.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  local max_index = nil\n\
    \  for i = 1, #numbers do\n    if max_value == nil then\n      max_value = numbers[i]\n\
    \      max_index = i\n    else\n      if numbers[i] > max_value then\n       \
    \ max_value = numbers[i]\n        max_index = i\n      end\n    end\n  end\n \
    \ if max_value == nil then\n    rolling_max = {}\n  else\n    rolling_max = {numbers[max_index]}\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rjkg9qr.lua:32:\
    \ expected: {1, 2, 3, 4}\nactual: {4}\nstack traceback:\n\t/tmp/tmp9rjkg9qr.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbdxs2ek.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmplbdxs2ek.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplbdxs2ek.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppgzpg9og.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmppgzpg9og.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmppgzpg9og.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = 1\n  local max_value\
    \ = rolling_max\n  for i = 1, #numbers do\n    if numbers[i] ~= max_value then\n\
    \      rolling_max = numbers[i]\n      max_index = i\n      max_value = rolling_max\n\
    \    end\n  end\n  return rolling_max, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4_zmoc90.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp4_zmoc90.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4_zmoc90.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  while numbers do\n    local current_value\
    \ = numbers.shift()\n    if current_value > rolling_max_value then\n      rolling_max_value\
    \ = current_value\n      rolling_max_index = rolling_max_index + 1\n    end\n\
    \    rolling_max = rolling_max .. current_value\n  end\n  return rolling_max,\
    \ rolling_max_index, rolling_max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmdqchnjz.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpmdqchnjz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmdqchnjz.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers.last()\n  local\
    \ last_index = #numbers - 1\n  local current_value = numbers[last_index]\n  local\
    \ current_index = last_index\n  while current_index do\n    local next_value =\
    \ numbers[current_index + 1]\n    if next_value > current_value then\n      rolling_max:insert(current_value)\n\
    \      current_value = next_value\n      current_index = current_index + 1\n \
    \   else\n      current_value = current_value\n      current_index = current_index\
    \ + 1\n    end\n  end\n  rolling_max:insert(current_value)\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmum1slaa.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpmum1slaa.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpmum1slaa.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = 1, rolling_max_index\
    \ do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojldk9un.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpojldk9un.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpojldk9un.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max[1] = max_value\n  for i = 2, #numbers do\n    if numbers[i] > max_value\
    \ then\n      rolling_max[index] = numbers[i]\n      index = index + 1\n     \
    \ max_value = numbers[i]\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5op_a297.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp5op_a297.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5op_a297.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  local rolling_max_index\
    \ = 1\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value then\n\
    \      rolling_max_value = numbers[i]\n      rolling_max_time = numbers[i]\n \
    \     rolling_max_index = i\n    end\n  end\n  rolling_max:insert(rolling_max_value)\n\
    \  rolling_max:insert(rolling_max_time)\n  rolling_max:insert(rolling_max_index)\n\
    \  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6taiugg_.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp6taiugg_.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp6taiugg_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_count = 0\n  for i = 2, #numbers do\n    if\
    \ numbers[i] > rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_index = i\n      rolling_max_count = rolling_max_count + 1\n\
    \    end\n  end\n  if rolling_max_count > 1 then\n    rolling_max = table.concat(numbers,\
    \ rolling_max_index + 1, rolling_max_count)\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwbdiiiam.lua:26:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpwbdiiiam.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  for i\
    \ = 1, #numbers do\n    if numbers[i] >= rolling_max then\n      rolling_max =\
    \ numbers[i]\n      rolling_max_index = i\n    end\n  end\n  return rolling_max,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbe3b17xk.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpbe3b17xk.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpbe3b17xk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  for i = 1, #numbers do\n    local rolling_max_element\
    \ = numbers[i]\n    for j = 1, i do\n      rolling_max_element = rolling_max_element\
    \ > numbers[j] and rolling_max_element or numbers[j]\n    end\n    rolling_max\
    \ = rolling_max and rolling_max or rolling_max_element\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprdc45ouf.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprdc45ouf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local last_rolling_max = 0\n  for i = 1, #numbers\
    \ do\n    local rolling_max = numbers[i]\n    if last_rolling_max < rolling_max\
    \ then\n      rolling_max = last_rolling_max\n    end\n    last_rolling_max =\
    \ rolling_max\n    table.insert(rolling_max, rolling_max)\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7k1qd_m.lua:14:\
    \ bad argument #1 to 'insert' (table expected, got number)\nstack traceback:\n\
    \t/tmp/tmph7k1qd_m.lua:14: in local 'candidate'\n\t/tmp/tmph7k1qd_m.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers[1])\n    numbers = numbers[2:]\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpse3lun0r.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ < rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr2ff1xd9.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpr2ff1xd9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpr2ff1xd9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mhzfi3o.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplbdxs2ek.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmplbdxs2ek.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmplbdxs2ek.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  for i = 1, #numbers do\n    local value = numbers[i]\n    if rolling_max_value\
    \ == nil then\n      rolling_max_value = value\n      rolling_max_index = i\n\
    \    else\n      if value > rolling_max_value then\n        rolling_max_value\
    \ = value\n        rolling_max_index = i\n      end\n    end\n  end\n  if rolling_max_index\
    \ == nil then\n    return nil\n  end\n  local rolling_max_index = rolling_max_index\
    \ - 1\n  local rolling_max_value = rolling_max_value\n  local rolling_max_index\
    \ = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n  local\
    \ rolling_max_index = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n\
    \  local rolling_max_index = rolling_max_index - 1\n  local rolling_max_value\
    \ = rolling_max_value\n  local rolling_max_index = rolling_max_index - 1\n  local\
    \ rolling_max_value = rolling_max_value\n  local rolling_max_index = rolling_max_index\
    \ - 1\n  local rolling_max_value = rolling_max_value\n  local rolling_max_index\
    \ = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n  local\
    \ rolling_max_index = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n\
    \  local rolling_max_index = rolling_max_index - 1\n  local rolling_max_value\
    \ = rolling_max_value\n  local rolling_max_index = rolling_max_index - 1\n  local\
    \ rolling_max_value = rolling_max_value\n  local rolling_max_index = rolling_max_index\
    \ - 1\n  local rolling_max_value = rolling_max_value\n  local rolling_max_index\
    \ = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n  local\
    \ rolling_max_index = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n\
    \  local rolling_max_index = rolling_max_index - 1\n  local rolling_max_value\
    \ = rolling_max_value\n  local rolling_max_index = rolling_max_index - 1\n  local\
    \ rolling_max_value = rolling_max_value\n  local rolling_max_index = rolling_max_index\
    \ - 1\n  local rolling_max_value = rolling_max_value\n  local rolling_max_index\
    \ = rolling_max_index - 1\n  local rolling_max_value = rolling_max_value\n  local\
    \ rolling_max_index = rolling_max_index - 1\n  local rolling_max_value = \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmploq08g9n.lua:60: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i = 1,\
    \ #numbers do\n    if numbers[i] > rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwx__1nj2.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpwx__1nj2.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwx__1nj2.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local element = numbers[i]\n    rolling_max[#rolling_max + 1] = element\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wenzdp0.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp2wenzdp0.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp2wenzdp0.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  for i = 1, #numbers do\n    if numbers[i]\
    \ >= rolling_max then\n      rolling_max = numbers[i]\n    end\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpswwanm76.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpswwanm76.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpswwanm76.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  local rolling_max_value = nil\n  local\
    \ rolling_max_index = nil\n  local rolling_max_value = nil\n  local rolling_max_index\
    \ = nil\n  local rolling_max_value = nil\n  local rolling_max_index = nil\n  local\
    \ rolling_max_value = nil\n  local rolling_max_index = nil\n  local rolling_max_value\
    \ = nil\n  local rolling_max_index = nil\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mhzfi3o.lua:81: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = numbers.size - 1\n\
    \  for i = 1, numbers.size do\n    local current_max = numbers[i]\n    if current_max\
    \ > rolling_max then\n      rolling_max = current_max\n      max_index = i\n \
    \   end\n  end\n  return rolling_max, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_xahggx.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7_xahggx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7_xahggx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  local rolling_max_time = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n\
    \      rolling_max_time = i\n    end\n  end\n  rolling_max_index = rolling_max_time\n\
    \  rolling_max:insert(rolling_max_value)\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max:insert(numbers[i])\n      rolling_max_index\
    \ = i\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw8jdhrhz.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpw8jdhrhz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpw8jdhrhz.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local max_value = nil\n  for i = 1, #numbers do\n\
    \    if max_value == nil then\n      max_value = numbers[i]\n      rolling_max\
    \ = numbers[i]\n    else\n      if numbers[i] > max_value then\n        max_value\
    \ = numbers[i]\n        rolling_max = numbers[i]\n      else\n        rolling_max\
    \ = rolling_max .. \", \" .. numbers[i]\n      end\n    end\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1bj73k7.lua:27:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpa1bj73k7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_element = numbers[i]\n    for j = i - 1, i - 2, i - 3, i - 4, i\
    \ - 5, i - 6, i - 7, i - 8, i - 9, i - 10, i - 11, i - 12, i - 13, i - 14, i -\
    \ 15, i - 16, i - 17, i - 18, i - 19, i - 20, i - 21, i - 22, i - 23, i - 24,\
    \ i - 25, i - 26, i - 27, i - 28, i - 29, i - 30, i - 31, i - 32, i - 33, i -\
    \ 34, i - 35, i - 36, i - 37, i - 38, i - 39, i - 40, i - 41, i - 42, i - 43,\
    \ i - 44, i - 45, i - 46, i - 47, i - 48, i - 49, i - 50, i - 51, i - 52, i -\
    \ 53, i - 54, i - 55, i - 56, i - 57, i - 58, i - 59, i - 60, i - 61, i - 62,\
    \ i - 63, i - 64, i - 65, i - 66, i - 67, i - 68, i - 69, i - 70, i - 71, i -\
    \ 72, i - 73, i - 74, i - 75, i - 76, i - 77, i - 78, i - 79, i - 80, i - 81,\
    \ i - 82, i - 83, i - 84, i - 85, i - 86, i - 87, i - 88, i - 89, i - 90, i -\
    \ 91, i - 92, i - 93, i - 94, i - 95, i - 96, i - 97, i - 98, i - 99, i - 100,\
    \ i - 101, i - 102, i - 103, i - 104, i - 105, i - 106, i - 107, i - 108, i -\
    \ 109, i - 110, i - 111, i - 112, i - 113, i - 114, i - 115, i - 116, i - 117,\
    \ i - 118, i - 119, i - 120, i - 121, i - 122, i - 123, i - 124, i - 125, i -\
    \ 126, i - 127, i - 128, i - 129, i - 130, i - 131, i - 132, i - 133, i - 134,\
    \ i - 135, i - 136, i - 137, i - 138, i - 139, i - 140, i - 141, i - 142, i -\
    \ 143, i - 144, i - 145, i - 146, i - 147, i - 148, i - 149, i - 150, i - 151,\
    \ i - 152, i - 153, i - 154, i - 155, i - 156, i - 157, i - 158, i - 159, i -\
    \ 160, i - 161, i - 162, i - 163, i - 164, i - 165, i - 166, i - 167, i - 168,\
    \ i - 169, i - 170, i - 171, i - 172, i - 173, i - 174, i - 175, i - 176, i -\
    \ 177, i - 178, i - 179, i - 180, i - 181, i - 182, i - 183, i - 184, i - 185,\
    \ i - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdq1hw8_i.lua:10: ''do'' expected near '',''

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  local roll\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxs4rk8o7.lua:68: ''end'' expected (to close ''function'' at
    line 5) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max_value = numbers[i]\n      rolling_max_index = i\n  \
    \  end\n  end\n  rolling_max:insert(rolling_max_value)\n  for i = rolling_max_index\
    \ + 1, #numbers do\n    rolling_max:insert(numbers[i])\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphgot8xj_.lua:6:\
    \ attempt to call field 'new' (a nil value)\nstack traceback:\n\t/tmp/tmphgot8xj_.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmphgot8xj_.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    local max_value = numbers[i]\n    for j = i - 1, i - 1, -1 do\n      if numbers[j]\
    \ > max_value then\n        max_value = numbers[j]\n      end\n    end\n    rolling_max:insert(max_value)\n\
    \    i = i + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_wfdmcs.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmpf_wfdmcs.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpf_wfdmcs.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = numbers.size - 1\n\
    \  for i = 1, numbers.size do\n    local current_max = numbers[i]\n    if current_max\
    \ > rolling_max then\n      rolling_max = current_max\n      max_index = i\n \
    \   end\n  end\n  return rolling_max, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_xahggx.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmp7_xahggx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp7_xahggx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local last_value = numbers.new()\n  local\
    \ last_index = numbers.new()\n  local current_index = numbers.new()\n  local current_value\
    \ = numbers.new()\n  local max_value = numbers.new()\n  local max_index = numbers.new()\n\
    \  for i = 1, numbers.n do\n    current_value = numbers[i]\n    current_index\
    \ = i\n    last_value = numbers[i - 1]\n    last_index = i - 1\n    if last_value\
    \ == current_value then\n      rolling_max:insert(current_value)\n      max_value:insert(current_value)\n\
    \      max_index:insert(current_index)\n    else\n      rolling_max:insert(last_value)\n\
    \      max_value:insert(last_value)\n      max_index:insert(last_index)\n    end\n\
    \  end\n  return rolling_max, max_value, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5i9xafvj.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp5i9xafvj.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp5i9xafvj.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.newlist()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i]\
    \ ~= rolling_max_value then\n      rolling_max_value = numbers[i]\n      rolling_max_index\
    \ = i\n    end\n    table.insert(rolling_max, rolling_max_value)\n  end\n  return\
    \ rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof0r6sos.lua:6:\
    \ attempt to call a nil value (field 'newlist')\nstack traceback:\n\t/tmp/tmpof0r6sos.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpof0r6sos.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822061
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local rolling_max_index = 0\n  local rolling_max_value\
    \ = numbers[1]\n  for i = 2, #numbers do\n    if numbers[i] ~= rolling_max_value\
    \ then\n      rolling_max[rolling_max_index] = rolling_max_value\n      rolling_max_value\
    \ = numbers[i]\n      rolling_max_index = i\n    end\n  end\n  rolling_max[rolling_max_index]\
    \ = rolling_max_value\n  return rolling_max\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3j5g0idk.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {0=1, 2=2, 3=3, 4=4}\nstack traceback:\n\t/tmp/tmp3j5g0idk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = numbers.shift()\n\
    \  local rolling_max_value = numbers.shift()\n  while numbers do\n    if numbers[rolling_max_index]\
    \ > rolling_max then\n      rolling_max = numbers[rolling_max_index]\n      rolling_max_index\
    \ = rolling_max_index + 1\n      rolling_max_value = numbers[rolling_max_index]\n\
    \    end\n    numbers[rolling_max_index] = numbers[rolling_max_index] - 1\n  \
    \  if numbers[rolling_max_index] == 0 then\n      rolling_max_index = rolling_max_index\
    \ - 1\n      rolling_max_value = rolling_max_value - 1\n    end\n    rolling_max\
    \ = rolling_max + rolling_max_value\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvlx5fj46.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpvlx5fj46.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpvlx5fj46.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local max_index = nil\n  for i = 1,\
    \ #numbers do\n    if numbers[i] ~= rolling_max then\n      rolling_max = numbers[i]\n\
    \      max_index = i\n    end\n  end\n  return rolling_max, max_index\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm36l_raa.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpm36l_raa.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm36l_raa.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while numbers do\n    rolling_max =\
    \ math.max(rolling_max, numbers.shift())\n  end\n  return rolling_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcauh4z6d.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpcauh4z6d.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpcauh4z6d.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  while #numbers > 0 do\n    local max_element\
    \ = numbers[#numbers]\n    numbers[#numbers] = nil\n    for i = 1, #numbers do\n\
    \      if numbers[i] ~= nil then\n        if numbers[i] > max_element then\n \
    \         max_element = numbers[i]\n        end\n      end\n    end\n    rolling_max\
    \ = max_element\n    numbers = numbers\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjxiuvsr6.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpjxiuvsr6.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpjxiuvsr6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  rolling_max[1] = max_value\n  for i = 2, #numbers do\n    if numbers[i] ~=\
    \ max_value then\n      max_value = numbers[i]\n      rolling_max[index] = max_value\n\
    \      index = index + 1\n    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp11aiyw2j.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp11aiyw2j.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp11aiyw2j.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.shift()\n  local rolling_max_index = 1\n  local\
    \ rolling_max_value = rolling_max\n  for i = 1, #numbers do\n    if numbers[i]\
    \ ~= rolling_max then\n      rolling_max = numbers[i]\n      rolling_max_index\
    \ = i\n      rolling_max_value = rolling_max\n    end\n  end\n  return rolling_max_value,\
    \ rolling_max_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsg4zu3gw.lua:6:\
    \ attempt to call a nil value (field 'shift')\nstack traceback:\n\t/tmp/tmpsg4zu3gw.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpsg4zu3gw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = nil\n  local rolling_max_index = nil\n  for i = 1, #numbers\
    \ do\n    local rolling_max_index = i\n    local rolling_max_value = numbers[i]\n\
    \    for j = i + 1, #numbers do\n      if numbers[j] > rolling_max_value then\n\
    \        rolling_max_index = j\n        rolling_max_value = numbers[j]\n     \
    \ end\n    end\n    if rolling_max ~= nil then\n      rolling_max = rolling_max\
    \ .. \", \" .. rolling_max_value\n    else\n      rolling_max = rolling_max_value\n\
    \    end\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpabhfjx.lua:29:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvpabhfjx.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local max_value = numbers.new()\n  local\
    \ max_index = numbers.new()\n  local max_index_value = numbers.new()\n  local\
    \ max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n \
    \ local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  local max_index_value = numbers.new()\n\
    \  local max_index_value = numbers.new()\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsvklkkj.lua:74: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822060
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.[1]\n  for i = 2, #numbers do\n    rolling_max\
    \ = math.max(rolling_max, numbers[i])\n  end\n  return rolling_max\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpftyjp61u.lua:6: ''<name>'' expected near ''[''

    '
  stdout: ''
  timestamp: 1659750395
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local index = 1\n  local max_value = numbers[1]\n\
    \  while index <= #numbers do\n    if numbers[index] > max_value then\n      rolling_max:insert(max_value)\n\
    \      max_value = numbers[index]\n    else\n      max_value = numbers[index]\n\
    \    end\n    index = index + 1\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_irn7wrp.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmp_irn7wrp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_irn7wrp.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822061
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\n-- >>> rolling_max({1, 2, 3,\
    \ 2, 3, 4, 2})\n-- {1, 2, 3, 3, 3, 4, 4}\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = numbers.new()\n  local i = 1\n  while i <= #numbers do\n\
    \    rolling_max:insert(numbers[i])\n    i = i + 1\n  end\n  return rolling_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphshwdbf9.lua:6:\
    \ attempt to call a nil value (field 'new')\nstack traceback:\n\t/tmp/tmphshwdbf9.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphshwdbf9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822061
