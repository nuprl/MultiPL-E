name: HumanEval_43_pairs_sum_to_zero
language: lua
prompt: "-- pairs_sum_to_zero takes a list of integers as an input.\n-- it returns\
  \ True if there are two distinct elements in the list that\n-- sum to zero, and\
  \ False otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
  \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
  -- false\nlocal function pairs_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
  \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
  \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n\
    \  end\n  for _, v in pairs(l) do\n    if pairs[v] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local pairs = {}\n  for _, v in pairs(l)\
    \ do\n    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n    if pairs[v] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l)\
    \ do\n    if not pairs[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n\
    \  for _, v in pairs(l) do\n    if pairs[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for _, v in pairs(l) do\n\
    \    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n    if pairs[v] then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local pairs = {}\n\
    \  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l)\
    \ do\n    if pairs[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = pairs(l)\n  local zeros = 0\n  for _, v in pairs do\n \
    \   zeros = zeros + v\n  end\n  if zeros == 0 then\n    return false\n  end\n\
    \  for _, v in pairs do\n    if v == 0 then\n      return true\n    end\n  end\n\
    \  return false\nend", "  local result = {}\n  for _, v in pairs(l) do\n    if\
    \ v > 0 then\n      result[#result + 1] = v\n    end\n  end\n  if #result == 1\
    \ then\n    return true\n  end\n  return false\nend", "  local pairs = {}\n  for\
    \ _, v in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n\
    \    if not pairs[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n\
    \  for _, v in pairs(l) do\n    if pairs[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local pairs = {}\n  for _, v in pairs(l) do\n\
    \    pairs[v] = true\n  end\n  local zero = true\n  for _, v in pairs(l) do\n\
    \    zero = false and zero\n  end\n  return zero\nend", "  local pairs = {}\n\
    \  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l)\
    \ do\n    if pairs[v] then\n      return false\n    end\n  end\n  return true\n\
    end", "  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n\
    \  local zeros = 0\n  for _, v in pairs(l) do\n    if pairs[v] then\n      zeros\
    \ = zeros + 1\n    end\n  end\n  return zeros == 2\nend", "  local pairs = {}\n\
    \  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n  local zero = true\n\
    \  for _, v in pairs(l) do\n    if not pairs[v] then\n      zero = false\n   \
    \ end\n  end\n  return zero\nend", "  local result = {}\n  for _, v in ipairs(l)\
    \ do\n    local found = false\n    for _, v2 in ipairs(result) do\n      if v\
    \ + v2 == 0 then\n        found = true\n        break\n      end\n    end\n  \
    \  if not found then\n      table.insert(result, v)\n    end\n  end\n  return\
    \ #result == 0\nend", "  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v]\
    \ = true\n  end\n  for _, v in pairs(l) do\n    if not pairs[v] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n    if\
    \ pairs[v] then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ pairs = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n  end\n  for _,\
    \ v in pairs(l) do\n    if pairs[v] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local pairs = {}\n  for _, v in pairs(l) do\n    pairs[v]\
    \ = true\n  end\n  for _, v in pairs(l) do\n    if pairs[v] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local zero = 0\n  local pairs\
    \ = {}\n  for _, v in pairs(l) do\n    pairs[v] = true\n    zero = zero + v\n\
    \  end\n  for _, v in pairs(l) do\n    if pairs[v] == true then\n      return\
    \ false\n    end\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
