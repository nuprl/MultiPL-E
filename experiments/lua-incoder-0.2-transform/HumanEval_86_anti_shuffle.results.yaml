language: lua
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ - 97) + 64)\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt6uvg3wy.lua:16:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpt6uvg3wy.lua:16: in function 'candidate'\n\t/tmp/tmpt6uvg3wy.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 32 then\n\
    \        new_word = new_word .. string.char(ascii + 32)\n      else\n        new_word\
    \ = new_word .. c\n      end\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurl29zy4.lua:16:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpurl29zy4.lua:16: in function 'candidate'\n\t/tmp/tmpurl29zy4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = {}\n  local word_index = 1\n  local\
    \ word_length = #words\n  local word_index = 1\n  while word_index < word_length\
    \ do\n    local current_word = words[word_index]\n    sorted_words[#sorted_words\
    \ + 1] = current_word\n    word_index = word_index + 1\n  end\n  local sorted_s\
    \ = ''\n  for i = 1, #sorted_words do\n    sorted_s = sorted_s .. sorted_words[i]\n\
    \  end\n  return sorted_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_t2hxocf.lua:34:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_t2hxocf.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  local new_s = ''\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local new_word = word\n   \
    \ for j = 1, #word do\n      local c = string.byte(word[j])\n      local new_c\
    \ = c\n      if c > 127 then\n        new_c = string.byte(string.sub(word, 1,\
    \ j - 1)) + 256 - c\n      end\n      new_word = new_word .. string.char(new_c)\n\
    \    end\n    new_words[i] = new_word\n  end\n  for i = 1, #words do\n    new_s\
    \ = new_s .. new_words[i]\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe6solt4h.lua:17:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpe6solt4h.lua:17: in function 'candidate'\n\t/tmp/tmpe6solt4h.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = string.byte(word[j])\n      new_word = new_word .. string.char((c > 127\
    \ and 255 or c))\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpquysuydr.lua:19:\
    \ attempt to get length of local 'word' (a nil value)\nstack traceback:\n\t/tmp/tmpquysuydr.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpquysuydr.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      new_word = new_word .. string.char((string.byte(c) + 32)\
    \ % 256)\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn6t8d_a9.lua:16:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpn6t8d_a9.lua:16: in function 'candidate'\n\t/tmp/tmpn6t8d_a9.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n    return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n\
    \      return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n       \
    \ return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n          return\
    \ w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n            return w2\
    \ .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n              return w2\
    \ .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n                return\
    \ w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n                  return\
    \ w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n                   \
    \ return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n            \
    \          return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n   \
    \                     return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1,\
    \ w2)\n                          return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_,\
    \ w1, w2)\n                            return w2 .. w1:gsub('([%z\\1-9]+)(%S+)',\
    \ function(_, w1, w2)\n                              return w2 .. w1:gsub('([%z\\\
    1-9]+)(%S+)', function(_, w1, w2)\n                                return w2 ..\
    \ w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n                         \
    \         return w2 .. w1:gsub('([%z\\1-9]+)(%S+)', function(_, w1, w2)\n    \
    \                                return w2 .. w1:gsub('([%z\\1-9]+)(%\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmps4s3r5ih.lua:32: unfinished string near ''([%z\x01-9]+)(%'\n"
  stdout: ''
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local shuffled_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(shuffled_words, word)\n  end\n  table.sort(shuffled_words)\n\
    \  return table.concat(shuffled_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsromktch.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpsromktch.lua:16: in function 'candidate'\n\t/tmp/tmpsromktch.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' ')\n  local words = {}\n  for w in words:gmatch'([^\
    \ ]+)' do\n    table.insert(words, w)\n  end\n  table.sort(words)\n  return table.concat(words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm60xhmki.lua:16:\
    \ attempt to call method 'gmatch' (a nil value)\nstack traceback:\n\t/tmp/tmpm60xhmki.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpm60xhmki.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local i = 0\n    while i < #word do\n   \
    \   local c = string.byte(word[i])\n      if c > 127 then\n        c = string.byte(string.sub(word,\
    \ 1, i) + string.sub(word, i + 1))\n      end\n      new_word = new_word .. string.char(c\
    \ + ((i % 2 == 0) and 1 or -1))\n      i = i + 1\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cjs_k9v.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp8cjs_k9v.lua:16: in function 'candidate'\n\t/tmp/tmp8cjs_k9v.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local new_word_len = 0\n    for i = 1, #word\
    \ do\n      local c = string.byte(word, i)\n      local new_c = string.byte(new_word,\
    \ new_word_len)\n      if c > new_c then\n        new_word = new_word .. string.sub(word,\
    \ i, #word)\n      else\n        new_word_len = new_word_len + 1\n      end\n\
    \    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprccm63ko.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmprccm63ko.lua:16: in function 'candidate'\n\t/tmp/tmprccm63ko.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)') -- Split string into words\n  local word_count = {}\n\
    \  for i = 1, #words do -- Count occurences of each word\n    word_count[words[i]]\
    \ = word_count[words[i]] or 0\n    word_count[words[i]]  = word_count[words[i]]\
    \ + 1\n  end\n  -- Sort words by their occurences\n  table.sort(word_count, function(a,\
    \ b) return word_count[a] < word_count[b] end)\n  -- Rearrange words by their\
    \ occurences\n  local new_words = {}\n  for i = 1, #words do\n    new_words[i]\
    \ = words[i]\n  end\n  for i = 1, #word_count do\n    new_words[i] = word_count[i]\n\
    \  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7l9aegba.lua:16:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp7l9aegba.lua:16: in function 'candidate'\n\t/tmp/tmp7l9aegba.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- Split string into words\n  local new_words = {}\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n\
    \    for j = 1, #word do -- Iterate through each character in word\n      local\
    \ ascii = string.byte(word[j]) -- Get the ascii value of current character\n \
    \     local new_ascii = ascii + 1 -- Increment ascii value by 1\n      new_word\
    \ = new_word .. string.char(new_ascii) -- Append ascii value to new_word\n   \
    \ end\n    new_words[i] = new_word -- Append new_word to new_words\n  end\n  return\
    \ table.concat(new_words) -- Return new_words concatenated into one string\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn9noaokl.lua:16:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmpn9noaokl.lua:16: in function 'candidate'\n\t/tmp/tmpn9noaokl.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- get all words in the sentence\n  local sorted_words\
    \ = {}\n  -- sort words by ascii value\n  for i = 1, #words do\n    sorted_words[i]\
    \ = string.char(string.byte(words[i]) + 256)\n  end\n  -- rearrange the words\
    \ by sorting them in ascending order\n  for i = 1, #words do\n    words[i] = sorted_words[words[i]]\n\
    \  end\n  return table.concat(words) -- rearrange the words by sorting them in\
    \ ascending order\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp18hoccbi.lua:17:\
    \ attempt to get length of local 'words' (a function value)\nstack traceback:\n\
    \t/tmp/tmp18hoccbi.lua:17: in function 'candidate'\n\t/tmp/tmp18hoccbi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[i]\
    \ = words[i]\n  end\n  table.sort(sorted_words)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmk5lomfg.lua:26:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpmk5lomfg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for _, c in pairs(word) do\n      new_word\
    \ = new_word .. string.char((string.byte(c) + string.byte(new_word)) % 256)\n\
    \    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwv8eun8t.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpwv8eun8t.lua:16: in function 'candidate'\n\t/tmp/tmpwv8eun8t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  local\
    \ new_s = ''\n  for _, word in pairs(new_words) do\n    new_s = new_s .. word\
    \ .. ' '\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkyfvaj90.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpkyfvaj90.lua:16: in function 'candidate'\n\t/tmp/tmpkyfvaj90.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750539
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4cg75hb.lua:16:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmps4cg75hb.lua:16: in function 'candidate'\n\t/tmp/tmps4cg75hb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char((c - 65) + 64)\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnxqxud4p.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpnxqxud4p.lua:16: in local 'candidate'\n\t/tmp/tmpnxqxud4p.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(new_word)\n      if c > 96 then\n     \
    \   new_word = new_word .. string.sub(word, 1, j - 1)\n        j = j - 1\n   \
    \   else\n        new_word = new_word .. string.sub(word, j, #new_word)\n    \
    \    break\n      end\n    end\n    new_words[#new_words + 1] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljlmdtp3.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpljlmdtp3.lua:16: in local 'candidate'\n\t/tmp/tmpljlmdtp3.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      new_word = new_word ..\
    \ string.char(math.abs(ascii - 97))\n    end\n    new_words[i] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbkge5tu.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmprbkge5tu.lua:16: in local 'candidate'\n\t/tmp/tmprbkge5tu.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)') -- split words by space\n  local new_words = {}\n  local\
    \ new_s = ''\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = ''\n    for j = 1, #word do -- loop through each character in word\n     \
    \ local c = word[j]\n      local ascii = string.byte(c) -- get ascii value\n \
    \     -- if ascii value is greater than or equal to 97 then add ascii value\n\
    \      -- else add 97\n      if ascii >= 97 then\n        new_word = new_word\
    \ .. string.char(ascii)\n      else\n        new_word = new_word .. string.char(97\
    \ + ascii)\n      end\n    end\n    new_words[#new_words + 1] = new_word -- add\
    \ new word to new_words\n  end\n  for i = 1, #words do\n    new_s = new_s .. new_words[i]\
    \ -- add new word to new_s\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfafl9inl.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpfafl9inl.lua:17: in local 'candidate'\n\t/tmp/tmpfafl9inl.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 65\
    \ then\n      new_s = new_s .. string.sub(s,i,i)\n    elseif ascii < 91 then\n\
    \      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i)\n    elseif\
    \ ascii < 97 then\n      new_s = new_s .. string.sub(s,i,i-1) .. string.sub(s,i+1,i-1)\
    \ .. string.sub(s,i+2,i)\n    elseif ascii < 123 then\n      new_s = new_s ..\
    \ string.sub(s,i,i-1) .. string.sub(s,i+1,i-1) .. string.sub(s,i+2,i-1) .. string.sub(s,i+3,i)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndjqdb5q.lua:35:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpndjqdb5q.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      local new_c = string.char(ascii\
    \ - 1)\n      new_word = new_word .. new_c\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7km637x.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpd7km637x.lua:16: in local 'candidate'\n\t/tmp/tmpd7km637x.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- Get all words in the string.\n  local sorted_words\
    \ = nil -- Initialize a variable for storing sorted words.\n  for i = 1, #words\
    \ do\n    sorted_words = sorted_words or {} -- Initialize a variable for storing\
    \ sorted words.\n    for j = 1, #words do\n      local char = string.sub(words,\
    \ j, j) -- Get the current character.\n      local ascii = string.byte(char) --\
    \ Get the ascii value of the character.\n      sorted_words[#sorted_words + 1]\
    \ = string.char(ascii, char) -- Add the character to the sorted words.\n    end\n\
    \    words = sorted_words -- Assign the sorted words to the words variable.\n\
    \  end\n  return table.concat(words) -- Return the sorted string.\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpve_zyb5a.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpve_zyb5a.lua:16: in local 'candidate'\n\t/tmp/tmpve_zyb5a.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)') -- Split string into words.\n  local new_words = {}\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n\
    \    for j = 1, #word do -- For each character in word.\n      local ascii = string.byte(word[j])\n\
    \      -- If ascii value is greater than or equal to 97 and less than or equal\
    \ to 122\n      -- then append ascii value to the new_word.\n      if ascii >=\
    \ 97 and ascii <= 122 then\n        new_word = new_word .. string.char(ascii)\n\
    \      -- If ascii value is greater than or equal to 65 and less than or equal\
    \ to 90\n      -- then append ascii value to the new_word.\n      elseif ascii\
    \ >= 65 and ascii <= 90 then\n        new_word = new_word .. string.char(ascii\
    \ - 32)\n      -- If ascii value is greater than or equal to 48 and less than\
    \ or equal to 57\n      -- then append ascii value to the new_word.\n      elseif\
    \ ascii >= 48 and ascii <= 57 then\n        new_word = new_word .. string.char(ascii\
    \ - 48)\n      -- If ascii value is greater than or equal to 32 and less than\
    \ or equal to 47\n      -- then append ascii value to the new_word.\n      elseif\
    \ ascii >= 32 and ascii <= 47 then\n        new_word = new_word .. string.char(ascii\
    \ - 32)\n      -- If ascii value is greater than or equal to 0 and less than or\
    \ equal to 31\n      -- then append ascii value to the new_word.\n      elseif\
    \ ascii >= 0 and ascii <= 31 then\n        new_word = new_word .. string.char(ascii\
    \ - 48)\n      -- If ascii value is greater than or equal to 32 and less than\
    \ or equal to 127\n      -- then append ascii value to the new_word.\n      elseif\
    \ ascii >= 32 and ascii <= 127 then\n        new_word = new_word .. string.char(ascii\
    \ - 32)\n      -- If ascii value is greater than or equal to 128 and less than\
    \ or equal to 255\n      -- then append ascii value to the new_word.\n      elseif\
    \ ascii >= 128 and ascii <= 255 then\n        new_word = new_word .. string.char(ascii\
    \ - 128)\n      -- If ascii value is greater than or equal to 256 and less than\
    \ or equal to 65535\n      -- then append ascii value to the new_word.\n     \
    \ elseif ascii >= 256 and ascii <= 65535 then\n        new_word = new_word ..\
    \ string.char(ascii - 256)\n      -- If ascii value is greater than or equal to\
    \ 65536 and less than or equal to 1048575\n      -- then append ascii value to\
    \ the new_word.\n      elseif ascii >= 65536 and ascii <= 104857\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2fn1loq.lua:56: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('%w+', function(w)\n    local c = string.byte(w)\n \
    \   local n = string.len(w)\n    local i = 0\n    while i < n do\n      c = c\
    \ - string.byte(string.sub(w, i, i)) + 1\n      i = i + 1\n    end\n    return\
    \ string.char(c)\n  end)\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz52xtih7.lua:19:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmpz52xtih7.lua:19:\
    \ in function </tmp/tmpz52xtih7.lua:14>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpz52xtih7.lua:14: in local 'candidate'\n\t/tmp/tmpz52xtih7.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local sorted_words = {}\n  for i = 1, #words do\n \
    \   sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwnx_5ziz.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpwnx_5ziz.lua:16: in local 'candidate'\n\t/tmp/tmpwnx_5ziz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ord = string.byte(c)\n      if ord > 96 then\n    \
    \    ord = ord - 32\n      end\n      new_word = new_word .. string.char(ord)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxyy65ntb.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxyy65ntb.lua:16: in local 'candidate'\n\t/tmp/tmpxyy65ntb.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Hint: Use string.gsub to replace all spaces with an\
    \ underscore\n  -- Hint: Use string.gsub to replace all words with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with an underscore\n\
    \  -- Hint: Use string.gsub to replace all non-word characters with \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp60ryyckp.lua:55: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      if ascii < 65 then\n        ascii\
    \ = ascii + 1\n      elseif ascii < 91 then\n        ascii = ascii - 26\n    \
    \  else\n        ascii = ascii - 32\n      end\n      new_word = new_word .. string.char(ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprizrngyw.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmprizrngyw.lua:16: in local 'candidate'\n\t/tmp/tmprizrngyw.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for _, word in ipairs(words)\
    \ do\n    local new_word = word\n    local i = 0\n    while i < #word do\n   \
    \   local c = string.byte(word, i)\n      local j = i + 1\n      while j < #word\
    \ do\n        local c_ = string.byte(word, j)\n        if c > c_ then\n      \
    \    new_word = new_word .. string.sub(word, i, j)\n          i = j\n        else\n\
    \          j = j + 1\n        end\n      end\n      i = i + 1\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words = {}\n  for i =\
    \ 1, #words do\n    sorted_words[i] = words[i]:byte()\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67vn3ubv.lua:17:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp67vn3ubv.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp67vn3ubv.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ ascii = string.byte(word[j])\n      if ascii < 65 then\n        ascii = ascii\
    \ + 1\n      elseif ascii < 91 then\n        ascii = ascii - 26\n      else\n\
    \        ascii = ascii - 32\n      end\n      new_word = new_word .. string.char(ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpporfy7h0.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpporfy7h0.lua:16: in local 'candidate'\n\t/tmp/tmpporfy7h0.lua:38: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcygp7c8x.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpcygp7c8x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c,'[%z]')~=nil then\n      c = string.gsub(c,'[%z]',function(x)\n\
    \        return string.char(x+256)\n      end)\n    end\n    new_s = new_s ..\
    \ c\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8143zixj.lua:32:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp8143zixj.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    local n = string.len(c)\n    if n > 0 then\n      new_s = new_s .. string.sub(c,1,n-1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzef7k13g.lua:29:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpzef7k13g.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%a%d]+)', function(c)\
    \ return c:lower() end)\n  return sorted_words:gsub('%a+', '%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpceeyae5h.lua:22:\
    \ expected: \"Hi\"\nactual: \"hi\"\nstack traceback:\n\t/tmp/tmpceeyae5h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here.\n  -- Return the anti_shuffled string.\n  local new_s = ''\n\
    \  for i = 1, #s do\n    local char = string.sub(s,i,i)\n    if char == ' ' then\n\
    \      new_s = new_s .. char\n    else\n      new_s = new_s .. string.char(string.byte(char)\
    \ + #new_s)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1ttjzwm.lua:31:\
    \ expected: \"Hi\"\nactual: \"Hj\"\nstack traceback:\n\t/tmp/tmpo1ttjzwm.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub('([^\
    \ ]+)', function(w)\n    local letter = string.byte(w)\n    if letter > 126 then\n\
    \      return w\n    else\n      return string.char(letter + 64)\n    end\n  end)\n\
    \  return sorted_words:gsub('([^ ]+)', function(w)\n    local letter = string.byte(w)\n\
    \    if letter > 126 then\n      return w\n    else\n      return string.char(letter\
    \ - 64)\n    end\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps2beqgwi.lua:36:\
    \ expected: \"Hi\"\nactual: \" \"\nstack traceback:\n\t/tmp/tmps2beqgwi.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsivvnfw.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpcsivvnfw.lua:16: in local 'candidate'\n\t/tmp/tmpcsivvnfw.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    if ascii < 32\
    \ then\n      new_s = new_s .. char\n    else\n      new_s = new_s .. string.sub(s,i,i-1)\n\
    \    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycsodx70.lua:31:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpycsodx70.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%w])', function(c)\
    \ \n    local ord = string.byte(c) - string.byte('A')\n    return string.char(string.byte('A')\
    \ + ord % 26)\n  end)\n  return sorted_words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qgvmq2r.lua:25:\
    \ expected: \"Hi\"\nactual: \"HO\"\nstack traceback:\n\t/tmp/tmp7qgvmq2r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == ' ' then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.char(string.byte(char) - 32)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tds4qro.lua:30:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmp6tds4qro.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local new_word_len = 0\n    for i = 1, #word\
    \ do\n      local c = string.byte(word, i)\n      new_word = new_word .. string.char((c\
    \ > 126 ? c - 256 : c))\n      new_word_len = new_word_len + 1\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptsd1t0y1.lua:21: '')'' expected near ''?''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Don't forget to return the result\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytr2ktbj.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpytr2ktbj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = table.sort(words)\n  local\
    \ sorted_s = ''\n  for _, word in ipairs(sorted_words) do\n    sorted_s = sorted_s\
    \ .. word .. ' '\n  end\n  return sorted_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9q1q_q90.lua:15:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9q1q_q90.lua:15: in local 'candidate'\n\t/tmp/tmp9q1q_q90.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gmatch(s, '[%w\\s]+')\n  local sorted_words\
    \ = {}\n  for _, word in ipairs(words) do\n    table.insert(sorted_words, word)\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmodu8zs9.lua:15: invalid escape sequence near ''''[%w\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    table.insert(sorted_words, words[i])\n  end\n  table.sort(sorted_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtyroo38.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpbtyroo38.lua:16: in local 'candidate'\n\t/tmp/tmpbtyroo38.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Don't forget to return the result\n  return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytr2ktbj.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpytr2ktbj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsivvnfw.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpcsivvnfw.lua:16: in local 'candidate'\n\t/tmp/tmpcsivvnfw.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    local j = 1\n    while true\
    \ do\n      local c = string.byte(new_word)\n      if c < 65 then\n        new_word\
    \ = new_word .. string.char(c + 32)\n      elseif c < 97 then\n        new_word\
    \ = new_word .. string.char(c + 32)\n      elseif c < 123 then\n        new_word\
    \ = new_word .. string.char(c - 32)\n      else\n        new_word = new_word ..\
    \ string.char(c)\n      end\n      if j > #new_word then\n        break\n    \
    \  end\n      j = j + 1\n    end\n    new_s = new_s .. new_word\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw76k66nf.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpw76k66nf.lua:16: in local 'candidate'\n\t/tmp/tmpw76k66nf.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(new_word)\n      if c < 97 then\n     \
    \   new_word = new_word .. string.char(97 + j)\n      elseif c < 123 then\n  \
    \      new_word = new_word .. string.char(122 + j)\n      else\n        new_word\
    \ = new_word .. string.char(122 + j - 26)\n      end\n      j = j + 1\n      if\
    \ j > 26 then\n        break\n      end\n    end\n    new_words[#new_words + 1]\
    \ = new_word\n  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc_s8q14y.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpc_s8q14y.lua:16: in local 'candidate'\n\t/tmp/tmpc_s8q14y.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- Split string into words.\n  local sorted_words\
    \ = {}\n  local new_word = ''\n  for i = 1, #words do\n    sorted_words[#sorted_words\
    \ + 1] = words[i] -- Add word to sorted list.\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end) -- Sort words by\
    \ ascii value.\n  for i = 1, #sorted_words do\n    new_word = new_word .. sorted_words[i]\
    \ -- Add sorted word to new string.\n  end\n  return new_word\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpse3f75r2.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpse3f75r2.lua:17: in local 'candidate'\n\t/tmp/tmpse3f75r2.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', '').split(' ')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word:gsub('%W', '%#%W'))\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn3zr5523.lua:14:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpn3zr5523.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpn3zr5523.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"[%w\\s]+\") -- Split string into words\n  local new_words = {}\n\
    \  local new_word = \"\"\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local new_char = string.char(string.byte(word) + 1) -- Add ascii value\n\
    \    if new_char == \" \" then\n      new_words[#new_words + 1] = new_word\n \
    \     new_word = \"\"\n    else\n      new_word = new_word .. new_char\n    end\n\
    \  end\n  new_words[#new_words + 1] = new_word -- Add last word\n  return table.concat(new_words,\
    \ \"_\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphuz_394c.lua:14: invalid escape sequence near ''"[%w\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here.\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == ' ' then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.char(string.byte(char) - 32)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz99uero5.lua:30:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpz99uero5.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 255 and 255 or c) + 1)\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81ec6i1h.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp81ec6i1h.lua:16: in local 'candidate'\n\t/tmp/tmp81ec6i1h.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local word = words[i]\n    local new_word = ''\n    for j = 1, #word\
    \ do\n      local ascii = string.byte(word[j])\n      if ascii < 65 then\n   \
    \     ascii = ascii + 32\n      else\n        ascii = ascii - 32\n      end\n\
    \      new_word = new_word .. string.char(ascii)\n    end\n    new_words[i] =\
    \ new_word\n  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmptr4ltd.lua:19:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpmptr4ltd.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpmptr4ltd.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1ndrehr.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpt1ndrehr.lua:16: in local 'candidate'\n\t/tmp/tmpt1ndrehr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      local new_c = string.byte(new_word)\
    \ + 1\n      if new_c > 127 then\n        new_c = 1\n      else\n        new_c\
    \ = string.char(new_c)\n      end\n      new_word = new_word .. new_c\n    end\n\
    \    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9uzkaxow.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp9uzkaxow.lua:16: in local 'candidate'\n\t/tmp/tmp9uzkaxow.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local sorted_words = {}\n  for i = 1, #words\
    \ do\n    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pe10krv.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp2pe10krv.lua:16: in local 'candidate'\n\t/tmp/tmp2pe10krv.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub(' ', ' ')\n  local sorted_words_array\
    \ = sorted_words:gsub(' ', ' ')\n  local sorted_words_array_sorted = sorted_words_array:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted = sorted_words_array_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted = sorted_words_array_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted = sorted_words_array_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted = sorted_words_array_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted:gsub(' ', ' ')\n\
    \  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted =\
    \ sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub(' ',\
    \ ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted:gsub('\
    \ ', ' ')\n  local sorted_words_array_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted_sorted\
    \ = sorted_words_array_sorted_sorted_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptnqmqbfk.lua:45: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.sub(s,i,i)\n    end\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclvq9bz2.lua:29:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpclvq9bz2.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    local j = 1\n    while\
    \ true do\n      local c = string.byte(word)\n      local new_c = string.byte(new_word)\n\
    \      if c < new_c then\n        new_word = new_word .. string.sub(word, j, j\
    \ + 1)\n        j = j + 1\n      else\n        new_word = new_word .. string.sub(word,\
    \ j + 1, j + 2)\n        break\n      end\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxljihi_.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpcxljihi_.lua:16: in local 'candidate'\n\t/tmp/tmpcxljihi_.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 32 then\n\
    \        new_word = new_word .. string.char(ascii + 32)\n      else\n        new_word\
    \ = new_word .. c\n      end\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_fdapz2.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7_fdapz2.lua:16: in local 'candidate'\n\t/tmp/tmp7_fdapz2.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"[%w\\s]+\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp96bxb4wi.lua:14: invalid escape sequence near ''"[%w\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = string.byte(word[j])\n      local new_c = c\n      if c > 127 then\n   \
    \     new_c = string.byte(string.sub(word, 1, j - 1)) + 256\n      else\n    \
    \    new_c = string.byte(string.sub(word, 1, j))\n      end\n      new_word =\
    \ new_word .. string.char(new_c)\n    end\n    new_s = new_s .. new_word\n  end\n\
    \  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp23r79xg_.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp23r79xg_.lua:16: in local 'candidate'\n\t/tmp/tmp23r79xg_.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_words[#new_words + 1] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpck3x5f5e.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpck3x5f5e.lua:16: in local 'candidate'\n\t/tmp/tmpck3x5f5e.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local letters = {}\n    for i = 1, #word\
    \ do\n      table.insert(letters, string.char(string.byte(word[i]) + 1))\n   \
    \ end\n    table.sort(letters)\n    for _, letter in pairs(letters) do\n     \
    \ new_word = new_word .. letter\n    end\n    table.insert(new_words, new_word)\n\
    \  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmple9dtyy0.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmple9dtyy0.lua:16: in local 'candidate'\n\t/tmp/tmple9dtyy0.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for i = 1, #word do\n      local c = word[i]\n\
    \      local j = i - 1\n      while j >= 0 and word[j] > c do\n        word[j]\
    \ = word[j + 1]\n        j = j - 1\n      end\n      word[j] = c\n      new_word\
    \ = new_word .. word[i]\n    end\n    new_words[#new_words + 1] = new_word\n \
    \ end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_kkjk8_.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9_kkjk8_.lua:16: in local 'candidate'\n\t/tmp/tmp9_kkjk8_.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local new_s\
    \ = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if c ~= ' ' then\n\
    \      new_s = new_s .. string.char(string.byte(c) + #s)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3udxcerz.lua:27:\
    \ expected: \"Hi\"\nactual: \"Jk\"\nstack traceback:\n\t/tmp/tmp3udxcerz.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp097qo3x5.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp097qo3x5.lua:16: in local 'candidate'\n\t/tmp/tmp097qo3x5.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"([^ ]+)\")\n  local new_words = {}\n  for i = 1, #words do\n  \
    \  local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      if c < 97 then\n        c = c + 26\n\
    \      elseif c < 123 then\n        c = c - 26\n      end\n      new_word = new_word\
    \ .. string.char(c)\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvt_ia8g5.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpvt_ia8g5.lua:16: in local 'candidate'\n\t/tmp/tmpvt_ia8g5.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)') -- Split string into words\n  local new_words = {}\n \
    \ local new_s = ''\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ new_word = ''\n    for j = 1, #word do -- Iterate over each character in word\n\
    \      local c = word[j]\n      local ascii = string.byte(c) -- Get the ascii\
    \ value of character\n      -- If the ascii value is greater than the previous\
    \ ascii value, then\n      -- add a new character to the new_word and move on\
    \ to the next character\n      if ascii > new_word:byte() then\n        new_word\
    \ = new_word .. string.char(ascii + 1) -- Add ascii value + 1\n      else\n  \
    \      new_word = new_word .. c\n      end\n    end\n    new_words[i] = new_word\
    \ -- Add the new word to new_words\n  end\n  for i = 1, #words do\n    new_s =\
    \ new_s .. new_words[i] -- Add the new word to new_s\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4f456i6j.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp4f456i6j.lua:17: in local 'candidate'\n\t/tmp/tmp4f456i6j.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwbz1sp0.lua:31:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpjwbz1sp0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local new_s\
    \ = ''\n  for w in s:gmatch('%w+') do\n    local new_w = w\n    for i=1,#w do\n\
    \      local c = string.byte(w, i)\n      local j = math.floor((c+i)/2)\n    \
    \  new_w = string.sub(w, 1, j-1) .. string.sub(w, j+1, #w)\n    end\n    new_s\
    \ = new_s .. new_w\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjptg7qg.lua:31:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpnjptg7qg.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps4cg75hb.lua:16:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmps4cg75hb.lua:16: in function 'candidate'\n\t/tmp/tmps4cg75hb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)') -- Split string into words\n  local sorted_words = {}\n\
    \  local new_word = ''\n  for i = 1, #words do\n    sorted_words[i] = words[i]\
    \ -- Store the words in ascending order\n  end\n  for i = 1, #words do\n    local\
    \ j = math.random(#sorted_words) -- Choose a random index\n    new_word = new_word\
    \ .. sorted_words[j] .. ' ' -- Append the word in the new order\n    sorted_words[j]\
    \ = sorted_words[i] -- Swap the words in the new order\n    sorted_words[i] =\
    \ '' -- Reset the word in the new order\n  end\n  return new_word\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6yvuyil2.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp6yvuyil2.lua:17: in local 'candidate'\n\t/tmp/tmp6yvuyil2.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      new_word = new_word .. string.char(string.byte(word[j]) + 64)\n    end\n\
    \    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdjgeslad.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpdjgeslad.lua:16: in local 'candidate'\n\t/tmp/tmpdjgeslad.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local sorted_words = { }\n  local new_word\
    \ = ''\n  for i = 1, #words do\n    sorted_words[#sorted_words + 1] = words[i]\n\
    \  end\n  table.sort(sorted_words, function(a, b) return string.byte(a) < string.byte(b)\
    \ end)\n  for i = 1, #sorted_words do\n    new_word = new_word .. sorted_words[i]\n\
    \  end\n  return new_word\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeechr8f0.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpeechr8f0.lua:17: in local 'candidate'\n\t/tmp/tmpeechr8f0.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local result = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      if ascii < 32 then\n        new_word\
    \ = new_word .. string.char(ascii)\n      else\n        new_word = new_word ..\
    \ word[j]\n      end\n    end\n    new_words[#new_words + 1] = new_word\n  end\n\
    \  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0azrcti.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpq0azrcti.lua:16: in local 'candidate'\n\t/tmp/tmpq0azrcti.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpldpr0h8r.lua:14: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) > string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqign8fj1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpqign8fj1.lua:16: in local 'candidate'\n\t/tmp/tmpqign8fj1.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = string.byte(word[j])\n      local new_c = c\n      if c > 127 then\n   \
    \     new_c = string.byte(string.sub(word, 1, j - 1)) + 256 - c\n      end\n \
    \     new_word = new_word .. string.char(new_c)\n    end\n    new_s = new_s ..\
    \ new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7c_i3s3o.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7c_i3s3o.lua:16: in local 'candidate'\n\t/tmp/tmp7c_i3s3o.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('[^ ]', '')\n  local sorted_words = {}\n  for i = 1,\
    \ #words do\n    sorted_words[i] = words[i]:byte()\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74qh_ta1.lua:26:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp74qh_ta1.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 126 ? c - 256 : c))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2n2yh_tg.lua:21: '')'' expected near ''?''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- get all words\n  local sorted_words = {}\n  local\
    \ word_index = 1\n  for word in words do\n    sorted_words[word_index] = word\
    \ -- add word to sorted list\n    word_index = word_index + 1\n  end\n  table.sort(sorted_words)\
    \ -- sort words by ascii value\n  -- remove all spaces and add them back\n  s\
    \ = string.gsub(s, '[%z\\s]+', '')\n  s = s .. table.concat(sorted_words, ' ')\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuopiqdl_.lua:23: invalid escape sequence near ''''[%z\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = {}\n  for i = 1, #words do\n    sorted_words[i]\
    \ = words[i]\n  end\n  table.sort(sorted_words, function(a, b) return string.byte(a)\
    \ < string.byte(b) end)\n  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sbp7kt0.lua:26:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp6sbp7kt0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) > string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqign8fj1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpqign8fj1.lua:16: in local 'candidate'\n\t/tmp/tmpqign8fj1.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = string.byte(word[j])\n      if c < 128 then\n        c = c + 32768\n   \
    \   else\n        c = c - 32768\n      end\n      new_word = new_word .. string.char(c)\n\
    \    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwt2s0l89.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpwt2s0l89.lua:16: in local 'candidate'\n\t/tmp/tmpwt2s0l89.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = string.gmatch(s, '%w+')\n  local new_s = ''\n\
    \  for i = 1, #words do\n    local word = words[i]\n    local new_word = word\n\
    \    local j = 1\n    while true do\n      local c = string.byte(new_word)\n \
    \     if c > 127 then\n        -- If character is greater than 127, then swap\
    \ it with character at index\n        -- (j - 1) of new_word\n        local tmp\
    \ = new_word[j]\n        new_word[j] = new_word[j - 1]\n        new_word[j - 1]\
    \ = tmp\n      else\n        -- If character is less than 127, then increment\
    \ j\n        j = j + 1\n      end\n      if j > #new_word then\n        -- If\
    \ j is greater than length of new_word, then swap it with character at\n     \
    \   -- index of new_word (j - 1) of new_word\n        local tmp = new_word[j]\n\
    \        new_word[j] = new_word[j - 1]\n        new_word[j - 1] = tmp\n      \
    \  break\n      end\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl927cjin.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpl927cjin.lua:17: in local 'candidate'\n\t/tmp/tmpl927cjin.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      local new_ascii = ascii\n   \
    \   if ascii < 32 then\n        new_ascii = ascii + 32\n      elseif ascii < 127\
    \ then\n        new_ascii = ascii - 32\n      else\n        new_ascii = ascii\
    \ - 127\n      end\n      new_word = new_word .. string.char(new_ascii)\n    end\n\
    \    new_words[i] = new_word\n  end\n  return table.concat(new_words)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52qemxc9.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp52qemxc9.lua:16: in local 'candidate'\n\t/tmp/tmp52qemxc9.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    local i = 0\n    while i < #word do\n   \
    \   local c = string.byte(word, i)\n      i = i + 1\n      if c > 127 then\n \
    \       new_word = new_word .. string.char(c - 32)\n      else\n        new_word\
    \ = new_word .. string.char(c)\n      end\n    end\n    new_words[#new_words +\
    \ 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9cpqdmsg.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9cpqdmsg.lua:16: in local 'candidate'\n\t/tmp/tmp9cpqdmsg.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1ndrehr.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpt1ndrehr.lua:16: in local 'candidate'\n\t/tmp/tmpt1ndrehr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words)\n\
    \  local new_s = ''\n  for i = 1, #sorted_words do\n    new_s = new_s .. sorted_words[i]\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqwhztcqc.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpqwhztcqc.lua:16: in local 'candidate'\n\t/tmp/tmpqwhztcqc.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      local new_c = string.char(ascii\
    \ - 1)\n      new_word = new_word .. new_c\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuxr4445.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpkuxr4445.lua:16: in local 'candidate'\n\t/tmp/tmpkuxr4445.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for i = 1, #word do\n      local c = word[i]\n\
    \      local n = string.byte(c)\n      new_word = new_word .. string.char((n -\
    \ 65) + 65)\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsw9wuo7c.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpsw9wuo7c.lua:16: in local 'candidate'\n\t/tmp/tmpsw9wuo7c.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"[%w\\s]+\") -- Split string into words.\n  local sorted_words =\
    \ {}\n  for i = 1, #words do\n    sorted_words[i] = words[i] -- Store the words\
    \ in an array.\n  end\n  table.sort(sorted_words) -- Sort the array in ascending\
    \ order.\n  local new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. sorted_words[i]\
    \ .. ' ' -- Concatenate sorted words with space.\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt3lvokjk.lua:14: invalid escape sequence near ''"[%w\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii > 96 then\n      new_s = new_s .. string.sub(s,i,i)\n    else\n\
    \      new_s = new_s .. string.sub(s,i,i+1)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgnfq7zqb.lua:31:\
    \ expected: \"Hi\"\nactual: \"Hii\"\nstack traceback:\n\t/tmp/tmpgnfq7zqb.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local result = \"\"\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local j = 1\n    while true do\n      local c\
    \ = string.byte(word, j)\n      if c > 127 then\n        j = j + 1\n      else\n\
    \        local n = string.byte(word, j + 1)\n        if n > 127 then\n       \
    \   j = j + 2\n        else\n          local m = string.byte(word, j + 2)\n  \
    \        if m > 127 then\n            j = j + 3\n          else\n            local\
    \ o = string.byte(word, j + 3)\n            if o > 127 then\n              j =\
    \ j + 4\n            else\n              local p = string.byte(word, j + 4)\n\
    \              if p > 127 then\n                j = j + 5\n              else\n\
    \                local q = string.byte(word, j + 5)\n                if q > 127\
    \ then\n                  j = j + 6\n                else\n                  local\
    \ r = string.byte(word, j + 6)\n                  if r > 127 then\n          \
    \          j = j + 7\n                  else\n                    local s = string.byte(word,\
    \ j + 7)\n                    if s > 127 then\n                      j = j + 8\n\
    \                    else\n                      local t = string.byte(word, j\
    \ + 8)\n                      if t > 127 then\n                        j = j +\
    \ 9\n                      else\n                        local u = string.byte(word,\
    \ j + 9)\n                        if u > 127 then\n                          j\
    \ = j + 10\n                        else\n                          local v =\
    \ string.byte(word, j + 10)\n                          if v > 127 then\n     \
    \                       j = j + 11\n                          else\n         \
    \                   local w = string.byte(word, j + 11)\n                    \
    \        if w > 127 then\n                              j = j + 12\n         \
    \                   else\n                              local x = string.byte(word,\
    \ j + 12)\n                              return result .. string.sub(word, 1,\
    \ j - 1) .. string.sub(word, n + 1, j - n + 1) .. string.sub(word, m + 1, j -\
    \ m + 1) .. string.sub(word, o + 1, j - o + 1) .. string.sub(word, p + 1, j -\
    \ p + 1) .. string.sub(word, q + 1, j - q + 1) .. string.sub(word, r + 1, j -\
    \ r + 1) .. string.sub(word, s + 1, j - s + 1) .. string.sub(word, t + 1, j -\
    \ t + 1) .. string.sub(word, u + 1, j - u + 1) .. string.sub(word, v + 1, j -\
    \ v + 1) .. string.sub(word, w + 1, j - w + 1) .. string.sub(word, x + 1, j -\
    \ x + 1)\n                            end\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpohmk82vq.lua:85: ''end'' expected (to close ''if'' at line
    61) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_s = ''\n  for _, word in pairs(words)\
    \ do\n    new_s = new_s .. word:gsub('([%a])', function(c)\n      return string.char(tonumber(c)\
    \ + 32)\n    end)\n  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxv9ulppr.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpxv9ulppr.lua:16: in local 'candidate'\n\t/tmp/tmpxv9ulppr.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      new_word = new_word .. string.char(string.byte(word[j], string.ascii(word[j])))\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeip9r6y5.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpeip9r6y5.lua:16: in local 'candidate'\n\t/tmp/tmpeip9r6y5.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      if ascii < 65 then\n        new_word\
    \ = new_word .. string.char(97 + ascii)\n      elseif ascii < 91 then\n      \
    \  new_word = new_word .. string.char(ascii - 64)\n      else\n        new_word\
    \ = new_word .. word[j]\n      end\n    end\n    new_words[#new_words + 1] = new_word\n\
    \  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl2wd1i52.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpl2wd1i52.lua:16: in local 'candidate'\n\t/tmp/tmpl2wd1i52.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"[%w\\s]+\") -- Split string into words\n  local sorted_words =\
    \ {}\n  for i = 1, #words do\n    sorted_words[i] = words[i] -- Store the words\
    \ in an array\n  end\n  table.sort(sorted_words) -- Sort the array in ascending\
    \ order\n  local new_s = ''\n  for i = 1, #sorted_words do\n    new_s = new_s\
    \ .. sorted_words[i] .. ' ' -- Concatenate words with spaces\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr2nxylug.lua:14: invalid escape sequence near ''"[%w\s''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ ascii = string.byte(word[j])\n      if ascii < 128 then\n        new_word =\
    \ new_word .. string.char(ascii)\n      else\n        new_word = new_word .. word[j]\n\
    \      end\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2mh038o.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmps2mh038o.lua:16: in local 'candidate'\n\t/tmp/tmps2mh038o.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      if ascii < 128 then\n       \
    \ new_word = new_word .. string.char(ascii)\n      else\n        new_word = new_word\
    \ .. word[j]\n      end\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp89djygvz.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp89djygvz.lua:16: in local 'candidate'\n\t/tmp/tmp89djygvz.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    sorted_words[i] = words[i]\n  end\n  table.sort(sorted_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmped6evdxl.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmped6evdxl.lua:16: in local 'candidate'\n\t/tmp/tmped6evdxl.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfr3g5bi3.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpfr3g5bi3.lua:16: in local 'candidate'\n\t/tmp/tmpfr3g5bi3.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_s = ''\n  for _, word in ipairs(words)\
    \ do\n    local new_word = word\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char((c - 65) .. 65)\n    end\n    new_s\
    \ = new_s .. new_word\n  end\n  return new_s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      if c > 127 then\n        c = string.byte(string.sub(word,\
    \ 1, j))\n      end\n      new_word = new_word .. string.char(c)\n    end\n  \
    \  new_words[i] = new_word\n  end\n  return table.concat(new_words)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn850vmws.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn850vmws.lua:16: in local 'candidate'\n\t/tmp/tmpn850vmws.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      if c < 65 then\n        c = c + 32\n      elseif c < 97 then\n        c\
    \ = c - 32\n      elseif c < 123 then\n        c = c + 32\n      else\n      \
    \  c = c - 32\n      end\n      new_word = new_word .. string.char(c)\n    end\n\
    \    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjfvete4n.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpjfvete4n.lua:16: in local 'candidate'\n\t/tmp/tmpjfvete4n.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Don't forget to return\
    \ the result\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxlnj6cf.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpwxlnj6cf.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- return 'Your code goes here'\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp55sxzman.lua:21:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp55sxzman.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ''):gsub('[^ ]+', ' ')\n  local sorted_words = {}\n  for i = 1,\
    \ #words do\n    sorted_words[i] = words[i]:byte()\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptq6js592.lua:17:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmptq6js592.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmptq6js592.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local result = {}\n  for i = 1, #words do\n   \
    \ local word = words[i]\n    local new_word = {}\n    for j = 1, #word do\n  \
    \    table.insert(new_word, string.char(string.byte(word[j]) + 1))\n    end\n\
    \    table.insert(result, table.concat(new_word, ' '))\n  end\n  return table.concat(result,\
    \ '\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsy0q8uwr.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpsy0q8uwr.lua:16: in local 'candidate'\n\t/tmp/tmpsy0q8uwr.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Note: Use a dictionary to store all the characters\
    \ and their ascii values\n  -- Use a dictionary to store all the characters and\
    \ their ascii values\n  -- Use a dictionary to store all the characters and their\
    \ ascii values\n  -- Use a dictionary to store all the characters and their ascii\
    \ values\n  -- Use a dictionary to store all the characters and their ascii values\n\
    \  -- Use a dictionary to store all the characters and their ascii values\n  --\
    \ Use a dictionary to store all the characters and their ascii values\n  -- Use\
    \ a dictionary to store all the characters and their ascii values\n  -- Use a\
    \ dictionary to store all the characters and their ascii values\n  -- Use a dictionary\
    \ to store all the characters and their ascii values\n  -- Use a dictionary to\
    \ store all the characters and their ascii values\n  -- Use a dictionary to store\
    \ all the characters and their ascii values\n  -- Use a dictionary to store all\
    \ the characters and their ascii values\n  -- Use a dictionary to store all the\
    \ characters and their ascii values\n  -- Use a dictionary to store all the characters\
    \ and their ascii values\n  -- Use a dictionary to store all the characters and\
    \ their ascii values\n  -- Use a dictionary to store all the characters and their\
    \ ascii values\n  -- Use a dictionary to store all the characters and their ascii\
    \ values\n  -- Use a dictionary to store all the characters and their ascii values\n\
    \  -- Use a dictionary to store all the characters and their ascii values\n  --\
    \ Use a dictionary to store all the characters and their ascii values\n  -- Use\
    \ a dictionary to store all the characters and their ascii values\n  -- Use a\
    \ dictionary to store all the characters and their ascii values\n  -- Use a dictionary\
    \ to store all the characters and their ascii values\n  -- Use a dictionary to\
    \ store all the characters and their ascii values\n  -- Use a dictionary to store\
    \ all the characters and their ascii values\n  -- Use a dictionary to store all\
    \ the characters and their ascii values\n  -- Use a dictionary to store all the\
    \ characters and their ascii values\n  -- Use a dictionary to store all the characters\
    \ and their ascii values\n  -- Use a dictionary to store all the characters and\
    \ their ascii values\n  -- Use a dictionary to store all the characters and their\
    \ ascii values\n  -- Use a dictionary to store all the characters and their ascii\
    \ values\n  -- Use a dictionary to store all the characters and their ascii values\n\
    \  -- Use a dictionary to store all the characters and their ascii values\n  --\
    \ Use a dictionary to store all the characters and their ascii values\n  -- Use\
    \ a dictionary to store all the characters and their ascii values\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmponknnxvy.lua:65: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1ndrehr.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpt1ndrehr.lua:16: in local 'candidate'\n\t/tmp/tmpt1ndrehr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local sorted_words = {}\n  local new_word = ''\n  for\
    \ i = 1, #words do\n    sorted_words[i] = words[i]\n  end\n  for i = #words, 1,\
    \ -1 do\n    local j = math.random(i)\n    local temp = sorted_words[i]\n    sorted_words[i]\
    \ = sorted_words[j]\n    sorted_words[j] = temp\n  end\n  s = table.concat(sorted_words)\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfl4_sywg.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpfl4_sywg.lua:17: in local 'candidate'\n\t/tmp/tmpfl4_sywg.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  local new_s = ''\n  for\
    \ i = 1, #words do\n    local word = words[i]\n    local new_word = word\n   \
    \ for j = 1, #word do\n      local c = string.byte(word[j])\n      local n = string.byte(new_word[j])\n\
    \      if c > n then\n        new_word[j] = c\n      else\n        new_word[j]\
    \ = n\n      end\n    end\n    new_words[i] = new_word\n  end\n  for i = 1, #words\
    \ do\n    new_s = new_s .. new_words[i]\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6x_bn0i.lua:17:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpr6x_bn0i.lua:17: in local 'candidate'\n\t/tmp/tmpr6x_bn0i.lua:40: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local ascii = string.byte(word[j])\n      if ascii < 65 then\n        ascii\
    \ = ascii + 32\n      else\n        ascii = ascii - 32\n      end\n      new_word\
    \ = new_word .. string.char(ascii)\n    end\n    new_words[#new_words + 1] = new_word\n\
    \  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1yetvyn.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpn1yetvyn.lua:16: in local 'candidate'\n\t/tmp/tmpn1yetvyn.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local sorted_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(sorted_words, word)\n  end\n  table.sort(sorted_words)\n\
    \  return table.concat(sorted_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo7bs9vi4.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpo7bs9vi4.lua:16: in local 'candidate'\n\t/tmp/tmpo7bs9vi4.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local new_s\
    \ = ''\n  for w in string.gmatch(s, '([^ ]+) ') do\n    new_s = new_s .. string.char(string.byte(w,\
    \ 1) + string.byte(w, 2) + string.byte(w, 3) + string.byte(w, 4) + string.byte(w,\
    \ 5) + string.byte(w, 6) + string.byte(w, 7) + string.byte(w, 8) + string.byte(w,\
    \ 9) + string.byte(w, 10) + string.byte(w, 11) + string.byte(w, 12) + string.byte(w,\
    \ 13) + string.byte(w, 14) + string.byte(w, 15) + string.byte(w, 16) + string.byte(w,\
    \ 17) + string.byte(w, 18) + string.byte(w, 19) + string.byte(w, 20) + string.byte(w,\
    \ 21) + string.byte(w, 22) + string.byte(w, 23) + string.byte(w, 24) + string.byte(w,\
    \ 25) + string.byte(w, 26) + string.byte(w, 27) + string.byte(w, 28) + string.byte(w,\
    \ 29) + string.byte(w, 30) + string.byte(w, 31))\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9t8leeo.lua:24:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpy9t8leeo.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. string.char(string.byte(c) - 32)\n\
    \    else\n      new_s = new_s .. c\n    end\n  end\n  return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwm6rq7s4.lua:30:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpwm6rq7s4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution\
    \ code goes here\n  -- Solution code goes here\n  -- Solution code goes here\n\
    \  -- Solution code goes here\n  -- Solution code goes here\n  -- Solution code\
    \ goes here\n  -- Solution code goes here\n  -- Solution code goes here\n  --\
    \ Solution code goes here\n  -- Solution code goes here\n  -- Solution code goes\
    \ here\n  -- Solution code goes here\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe182k48w.lua:92: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local sorted_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(sorted_words, word)\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6ey26qz.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpc6ey26qz.lua:16: in local 'candidate'\n\t/tmp/tmpc6ey26qz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"[%w]+\")\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 65 then\n\
    \        c = string.char((ascii + 32) % 255)\n      end\n      new_word = new_word\
    \ .. c\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjgh6olcs.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpjgh6olcs.lua:16: in local 'candidate'\n\t/tmp/tmpjgh6olcs.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = word[j]\n      local ascii = string.byte(c)\n      if ascii <\
    \ 128 then\n        new_word = new_word .. string.char(ascii)\n      else\n  \
    \      new_word = new_word .. c\n      end\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcr8ewwgi.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpcr8ewwgi.lua:16: in local 'candidate'\n\t/tmp/tmpcr8ewwgi.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcuq771kz.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpcuq771kz.lua:16: in local 'candidate'\n\t/tmp/tmpcuq771kz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = {}\n  for i = 1, #words do\n\
    \    sorted_words[#sorted_words + 1] = words[i]\n  end\n  table.sort(sorted_words,\
    \ function(a, b) return string.byte(a) < string.byte(b) end)\n  return table.concat(sorted_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcuq771kz.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpcuq771kz.lua:16: in local 'candidate'\n\t/tmp/tmpcuq771kz.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) + #new_s)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9jwnqmms.lua:30:\
    \ expected: \"Hi\"\nactual: \"Hj\"\nstack traceback:\n\t/tmp/tmp9jwnqmms.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiy_62pd1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpiy_62pd1.lua:16: in local 'candidate'\n\t/tmp/tmpiy_62pd1.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcsivvnfw.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpcsivvnfw.lua:16: in local 'candidate'\n\t/tmp/tmpcsivvnfw.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local result = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = word\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 65 then\n\
    \        ascii = ascii + 32\n      elseif ascii < 91 then\n        ascii = ascii\
    \ - 32\n      else\n        ascii = ascii - 64\n      end\n      new_word = new_word\
    \ .. string.char(ascii)\n    end\n    result[#result + 1] = new_word\n  end\n\
    \  return table.concat(result)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc1t3gbqr.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpc1t3gbqr.lua:16: in local 'candidate'\n\t/tmp/tmpc1t3gbqr.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('%S+', function(x)\n    return string.char(tonumber(x)\
    \ + 97)\n  end)\n  return table.concat(words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3nhjeziv.lua:15:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp3nhjeziv.lua:15:\
    \ in function </tmp/tmp3nhjeziv.lua:14>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmp3nhjeziv.lua:14: in local 'candidate'\n\t/tmp/tmp3nhjeziv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ord = string.byte(c)\n      if ord > 96 then\n    \
    \    ord = ord - 32\n      end\n      new_word = new_word .. string.char(ord)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxyy65ntb.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxyy65ntb.lua:16: in local 'candidate'\n\t/tmp/tmpxyy65ntb.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = word\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char((c > 255 and 255 or c))\n    end\n \
    \   new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp26zgabo1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp26zgabo1.lua:16: in local 'candidate'\n\t/tmp/tmp26zgabo1.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"([^ ]+)\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word:gsub(\"%W\", function (c)\n      return\
    \ string.char(tonumber(c))\n    end))\n  end\n  return table.concat(new_words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4yg6bslf.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp4yg6bslf.lua:16: in local 'candidate'\n\t/tmp/tmp4yg6bslf.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 65 then\n\
    \        c = string.char((ascii + 32) % 256)\n      elseif ascii < 97 then\n \
    \       c = string.char((ascii - 32 + 26) % 256)\n      elseif ascii < 123 then\n\
    \        c = string.char((ascii - 32 + 52) % 256)\n      end\n      new_word =\
    \ new_word .. c\n    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphfr8hcya.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmphfr8hcya.lua:16: in local 'candidate'\n\t/tmp/tmphfr8hcya.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ''):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub(' ',\
    \ ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words:gsub(' ',\
    \ ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words_ascii = sorted_words_ascii:gsub('\
    \ ', ' '):gsub('[^ ]+', ' ')\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpratv9owv.lua:49: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ''):gsub('[^ ]+', ' ')\n  local sorted_words = {}\n  for i = 1,\
    \ #words do\n    sorted_words[i] = words[i]:byte()\n  end\n  table.sort(sorted_words)\n\
    \  local new_s = ''\n  for i = 1, #words do\n    new_s = new_s .. sorted_words[i]\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tv32ma7.lua:17:\
    \ attempt to index a nil value (field '?')\nstack traceback:\n\t/tmp/tmp3tv32ma7.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp3tv32ma7.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for i = 1, #word do\n      new_word = new_word\
    \ .. string.char(string.byte(word[i]) + 64)\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6t8t5so.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpo6t8t5so.lua:16: in local 'candidate'\n\t/tmp/tmpo6t8t5so.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ ascii = string.byte(word[j])\n      if ascii < 65 then\n        ascii = ascii\
    \ + 32\n      else\n        ascii = ascii - 32\n      end\n      new_word = new_word\
    \ .. string.char(ascii)\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzs9jny9g.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpzs9jny9g.lua:16: in local 'candidate'\n\t/tmp/tmpzs9jny9g.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local words = s:gsub(' ', ' ')\n  local new_words = {}\n \
    \ for i = 1, #words do\n    local word = words[i]\n    local new_word = ''\n \
    \   for j = 1, #word do\n      local c = word[j]\n      new_word = new_word ..\
    \ string.char((string.byte(c) + 128) % 256)\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl1zxxj7t.lua:20:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpl1zxxj7t.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpl1zxxj7t.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      local new_c = string.char(ascii\
    \ - 1)\n      new_word = new_word .. new_c\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqep6qeye.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpqep6qeye.lua:16: in local 'candidate'\n\t/tmp/tmpqep6qeye.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local result = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qnj4vwh.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp9qnj4vwh.lua:16: in local 'candidate'\n\t/tmp/tmp9qnj4vwh.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwbz1sp0.lua:31:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpjwbz1sp0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      if c > 127 then\n        c = string.byte(string.sub(word,\
    \ 1, j))\n      end\n      new_word = new_word .. string.char(c)\n    end\n  \
    \  new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmnouzdyp.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpmnouzdyp.lua:16: in local 'candidate'\n\t/tmp/tmpmnouzdyp.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  -- Don't forget to return the string after you finish\
    \ processing the string\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj4wwe40j.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpj4wwe40j.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+') -- get all words\n  local new_s = '' -- initialize\
    \ new string\n  for i = 1, #words do\n    local word = words[i]\n    local new_word\
    \ = word\n    local j = 1\n    while true do\n      local c = string.byte(word)\n\
    \      if c < 65 then\n        -- ascii value less than 65 means new word is appended\
    \ at the end\n        new_word = new_word .. string.sub(word, j, j + 1)\n    \
    \    break\n      elseif c > 122 then\n        -- ascii value greater than 122\
    \ means new word is appended at the beginning\n        new_word = string.sub(word,\
    \ 1, j - 1) .. new_word\n        break\n      else\n        -- ascii value between\
    \ 65 and 122 means new word is appended at the middle\n        j = j + 1\n   \
    \   end\n    end\n    new_s = new_s .. new_word\n  end\n  return new_s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs0xt4nc.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpjs0xt4nc.lua:16: in local 'candidate'\n\t/tmp/tmpjs0xt4nc.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 32 then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.sub(s,i,i-1)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwbz1sp0.lua:31:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpjwbz1sp0.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  local\
    \ new_s = ''\n  for _, word in ipairs(new_words) do\n    new_s = new_s .. word\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    if char == ' ' then\n      new_s = new_s .. char\n    else\n      new_s =\
    \ new_s .. string.char(string.byte(char) - 32)\n    end\n  end\n  return new_s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tds4qro.lua:30:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmp6tds4qro.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if c ~= ' ' then\n      new_s = new_s .. c\n    else\n      new_s = new_s\
    \ .. string.sub(s,i,i+1)\n    end\n  end\n  return new_s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqkbz3ad.lua:31:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpsqkbz3ad.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local result = {}\n  for i = 1, #words do\n   \
    \ local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word[j] = string.char((c+26)%256)\n\
    \    end\n    result[i] = new_word\n  end\n  return table.concat(result)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxd53eo0h.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpxd53eo0h.lua:16: in local 'candidate'\n\t/tmp/tmpxd53eo0h.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local result = {}\n  for _, word in ipairs(words) do\n\
    \    table.insert(result, word)\n  end\n  table.sort(result)\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 255 and 255 or c))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp9h5my8t.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpp9h5my8t.lua:16: in local 'candidate'\n\t/tmp/tmpp9h5my8t.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 32 then\n\
    \        new_word = new_word .. string.char((ascii + 32) % 256)\n      else\n\
    \        new_word = new_word .. c\n      end\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptbw753hb.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmptbw753hb.lua:16: in local 'candidate'\n\t/tmp/tmptbw753hb.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local sorted_words = table.sort(words)\n  local\
    \ sorted_s = ''\n  for i = 1, #sorted_words do\n    sorted_s = sorted_s .. sorted_words[i]\
    \ .. ' '\n  end\n  return sorted_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdrprz_so.lua:15:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpdrprz_so.lua:15: in local 'candidate'\n\t/tmp/tmpdrprz_so.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words\
    \ do\n    local char = string.char(string.byte(words[i]))\n    local new_char\
    \ = string.char(string.byte(char) + 1)\n    new_words[i] = new_char\n  end\n \
    \ return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6clvxv_p.lua:17:\
    \ bad argument #1 to 'byte' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp6clvxv_p.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmp6clvxv_p.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ''):gsub('%w+', function(w) return w:lower() end)\n  local sorted_words\
    \ = words:gsub('%w+', function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = sorted_words:gsub('%w+',\
    \ function(w) return w:lower() end)\n  sorted_words = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_e5di1cr.lua:43: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local new_s\
    \ = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,\
    \ '%') then\n      local j = string.find(c, '%')\n      local k = string.find(c,\
    \ '%', j+1)\n      local new_c = string.sub(s,i,j)\n      new_c = string.gsub(string.gsub(new_c,\
    \ '%', ''), '%', '')\n      new_c = string.gsub(new_c, '%', ' ')\n      new_s\
    \ = new_s .. new_c\n      i = k\n    else\n      new_s = new_s .. c\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj2p2y8do.lua:17:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpj2p2y8do.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpj2p2y8do.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    if char == ' ' then\n      new_s = new_s .. char\n  \
    \  else\n      new_s = new_s .. string.char(string.byte(char) - 32)\n    end\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq19279_.lua:30:\
    \ expected: \"Hi\"\nactual: \"(I\"\nstack traceback:\n\t/tmp/tmpnq19279_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub('([%a%d]+)', function(c)\
    \ return string.char(tonumber(c)) end)\n  return sorted_words:gsub('%a+', function(c)\
    \ return c:reverse() end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprx24mlhy.lua:15:\
    \ bad argument #1 to 'char' (number expected, got nil)\nstack traceback:\n\t/tmp/tmprx24mlhy.lua:15:\
    \ in function </tmp/tmprx24mlhy.lua:15>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmprx24mlhy.lua:15: in local 'candidate'\n\t/tmp/tmprx24mlhy.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ char = string.sub(words, i, i)\n    local ascii = string.byte(char):tostring()\n\
    \    local new_char = string.char(ascii + 1)\n    new_words[i] = new_char\n  end\n\
    \  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdjlpi10.lua:18:\
    \ attempt to index a number value\nstack traceback:\n\t/tmp/tmpgdjlpi10.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmpgdjlpi10.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local char =\
    \ string.sub(s,i,i)\n    local ascii = string.byte(char) -- ascii value of char\n\
    \    if ascii < 65 then\n      new_s = new_s .. string.sub(s,i,i)\n    elseif\
    \ ascii < 91 then\n      new_s = new_s .. string.sub(s,i,i-1)\n    elseif ascii\
    \ < 97 then\n      new_s = new_s .. string.sub(s,i-1,i-1)\n    elseif ascii <\
    \ 123 then\n      new_s = new_s .. string.sub(s,i-1,i)\n    end\n  end\n  return\
    \ new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xph4wtm.lua:36:\
    \ expected: \"ehllo\"\nactual: \"hheellllo\"\nstack traceback:\n\t/tmp/tmp8xph4wtm.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local sorted_words = words:gsub(' ', ' ')\n  local sorted_words_array\
    \ = sorted_words:split(' ')\n  local sorted_words_array_sorted = {}\n  for i =\
    \ 1, #sorted_words_array do\n    sorted_words_array_sorted[#sorted_words_array_sorted\
    \ + 1] = sorted_words_array[i]\n  end\n  sorted_words_array_sorted = table.concat(sorted_words_array_sorted)\n\
    \  return sorted_words_array_sorted\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7v1efx3.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpk7v1efx3.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpk7v1efx3.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      new_word = new_word .. string.char(string.byte(word[j], 7) - j)\n    end\n\
    \    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4whv6b6m.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp4whv6b6m.lua:16: in local 'candidate'\n\t/tmp/tmp4whv6b6m.lua:30: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"([^ ]+)\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf2auf0r6.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpf2auf0r6.lua:16: in local 'candidate'\n\t/tmp/tmpf2auf0r6.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"([^ ]+)\") -- Split string into words\n  local new_words = {}\n\
    \  local new_word = \"\"\n  local i = 0\n  for word in words do\n    i = i + 1\n\
    \    new_word = new_word .. word:lower() .. \" \" -- Convert word to lower case\n\
    \    new_words[i] = new_word -- Store new word in an array\n    new_word = \"\"\
    \ -- Reset new word\n  end\n  s = table.concat(new_words) -- Concatenate all words\
    \ into one string\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibe97h41.lua:31:\
    \ expected: \"Hi\"\nactual: \"hi \"\nstack traceback:\n\t/tmp/tmpibe97h41.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local words = string.gsub(s,' ','+')\n  local sorted_words\
    \ = string.gsub(words,'[^+]+','%1')\n  local sorted_words_sorted = string.gsub(sorted_words,'(%1)+','%1')\n\
    \  return string.gsub(sorted_words_sorted,'%1+',' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbx41wt_g.lua:17:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpbx41wt_g.lua:17: in local\
    \ 'candidate'\n\t/tmp/tmpbx41wt_g.lua:24: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      local new_c = string.char(ascii\
    \ - 1)\n      new_word = new_word .. new_c\n    end\n    new_words[i] = new_word\n\
    \  end\n  return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd7km637x.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmpd7km637x.lua:16: in local 'candidate'\n\t/tmp/tmpd7km637x.lua:33: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822250
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      new_word = new_word .. string.char((c\
    \ > 127 and 255 or c))\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp74n2jsb7.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp74n2jsb7.lua:16: in local 'candidate'\n\t/tmp/tmp74n2jsb7.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    local new_word = word\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char(math.abs(c) + math.random() * (#c -\
    \ 1))\n    end\n    new_words[#new_words + 1] = new_word\n  end\n  return table.concat(new_words)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1ndrehr.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpt1ndrehr.lua:16: in local 'candidate'\n\t/tmp/tmpt1ndrehr.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiy_62pd1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpiy_62pd1.lua:16: in local 'candidate'\n\t/tmp/tmpiy_62pd1.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = word\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      local new_c = c\n      if c > 127\
    \ then\n        new_c = string.byte(string.sub(word, 1, j - 1)) + 256\n      end\n\
    \      new_word = new_word .. string.char(new_c)\n    end\n    new_words[i] =\
    \ new_word\n  end\n  return table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lyvnnha.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp0lyvnnha.lua:16: in local 'candidate'\n\t/tmp/tmp0lyvnnha.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your solution here\n  local new_s = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n\
    \    if string.find(c,'%') then\n      local new_c = string.sub(s,i,i)\n     \
    \ new_c = string.gsub(string.gsub(new_c,'%',''),'%d','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%f','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%w','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%i','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%x','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%o','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%u','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%e','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%p','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%x','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%o','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%u','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%e','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%p','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%x','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%o','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%u','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%e','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%p','a')\n      new_c = string.gsub(string.gsub(new_c,'%',''),'%x','a')\n\
    \      new_c = string.gsub(string.gsub(new_c,'%',''),'%o','a')\n      new_c =\
    \ string.gsub(string.gsub(new_c,'%',''),'%u','a')\n      new_c = string.g\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj3l1bson.lua:56: ''end'' expected (to close ''if'' at line
    18) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) - string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3be8rd4f.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp3be8rd4f.lua:16: in local 'candidate'\n\t/tmp/tmp3be8rd4f.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      local n = string.byte(string.sub(word,\
    \ 1, j))\n      new_word = new_word .. string.char((c > n) and string.char((c\
    \ + n) - 1) or string.char(c - n))\n    end\n    new_words[i] = new_word\n  end\n\
    \  return table.concat(new_words)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gsu0bap.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7gsu0bap.lua:16: in local 'candidate'\n\t/tmp/tmp7gsu0bap.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  -- Write\
    \ your code here\n  local new_s = ''\n  for i = 1, #s do\n    local char = string.sub(s,i,i)\n\
    \    local ascii = string.byte(char) -- ascii value of char\n    local new_char\
    \ = string.char(ascii - 1) -- ascii value of char - 1\n    new_s = new_s .. new_char\n\
    \  end\n  return new_s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgkwxtwp9.lua:28:\
    \ expected: \"Hi\"\nactual: \"Gh\"\nstack traceback:\n\t/tmp/tmpgkwxtwp9.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local new_s\
    \ = ''\n  for i = 1, #s do\n    local c = string.sub(s,i,i)\n    if string.find(c,'%a')\
    \ then\n      local new_c = string.sub(s,i,i)\n      local j = 1\n      while\
    \ string.find(new_c,'%a') do\n        local new_c = string.sub(s,i,i+j)\n    \
    \    j = j + 1\n      end\n      new_c = string.sub(s,i,i+j)\n      new_c = string.gsub(new_c,'%a','a')\n\
    \      new_c = string.gsub(new_c,'%A','A')\n      new_c = string.gsub(new_c,'%w','a')\n\
    \      new_c = string.gsub(new_c,'%W','A')\n      new_c = string.gsub(new_c,'%c','a')\n\
    \      new_c = string.gsub(new_c,'%C','A')\n      new_c = string.gsub(new_c,'%x','a')\n\
    \      new_c = string.gsub(new_c,'%X','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','a')\n\
    \      new_c = string.gsub(new_c,'%','A')\n      new_c = string.gsub(new_c,'%','\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpolrdqd_8.lua:55: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' ')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ ascii = string.byte(word[j])\n      local new_ascii = ascii\n      if ascii\
    \ < 127 then\n        new_ascii = ascii + 64\n      else\n        new_ascii =\
    \ ascii - 64\n      end\n      new_word = new_word .. string.char(new_ascii)\n\
    \    end\n    new_words[i] = new_word\n  end\n  return table.concat(new_words,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbvzofujl.lua:19:\
    \ attempt to get length of a nil value (local 'word')\nstack traceback:\n\t/tmp/tmpbvzofujl.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpbvzofujl.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '%w+')\n  local new_words = {}\n  for i = 1, #words do\n\
    \    local word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n\
    \      local c = string.byte(word[j])\n      local new_c = c + math.random()\n\
    \      new_word = new_word .. string.char(new_c)\n    end\n    new_words[i] =\
    \ new_word\n  end\n  return table.concat(new_words)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54wkvnm4.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp54wkvnm4.lua:16: in local 'candidate'\n\t/tmp/tmp54wkvnm4.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch('([^ ]+)')\n  local new_words = {}\n  for i = 1, #words do\n    local\
    \ word = words[i]\n    local new_word = ''\n    for j = 1, #word do\n      local\
    \ c = word[j]\n      local ascii = string.byte(c)\n      if ascii < 32 then\n\
    \        new_word = new_word .. string.char(ascii + 32)\n      else\n        new_word\
    \ = new_word .. c\n      end\n    end\n    new_words[i] = new_word\n  end\n  return\
    \ table.concat(new_words, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_fdapz2.lua:16:\
    \ attempt to get length of a function value (local 'words')\nstack traceback:\n\
    \t/tmp/tmp7_fdapz2.lua:16: in local 'candidate'\n\t/tmp/tmp7_fdapz2.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) < string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7sbjkyjd.lua:16:\
    \ bad argument #1 to 'pairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7sbjkyjd.lua:16: in function 'candidate'\n\t/tmp/tmp7sbjkyjd.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ''):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub('(.)%1',\
    \ '%2'):gsub('(.)%2', '%1')\n  return sorted_words:gsub('(.)%1', '%2'):gsub('(.)%2',\
    \ '%1')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkx2pkjh9.lua:15:\
    \ invalid capture index %2\nstack traceback:\n\t/tmp/tmpkx2pkjh9.lua:15: in local\
    \ 'candidate'\n\t/tmp/tmpkx2pkjh9.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '([^ ]+)')\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words, function(a,\
    \ b) return string.byte(a) > string.byte(b) end)\n  return table.concat(new_words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqign8fj1.lua:16:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpqign8fj1.lua:16: in local 'candidate'\n\t/tmp/tmpqign8fj1.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gmatch(\"([^ ]+)\")\n  local new_words = {}\n  for _, word in pairs(words)\
    \ do\n    local new_word = ''\n    for i = 1, #word do\n      local c = string.byte(word[i])\n\
    \      new_word = new_word .. string.char((c > 127 ? 127 : c))\n    end\n    new_words[#new_words\
    \ + 1] = new_word\n  end\n  return table.concat(new_words, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9o074zxh.lua:20: '')'' expected near ''?''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub('[^ ]+', ' ')\n  local sorted_words = words:gsub(' ',\
    \ ' '):gsub('[^ ]+', ' ')\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_len = #sorted_words\n  local sorted_words_len\
    \ = #sorted_words\n  local sorted_words_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn3cqg_33.lua:82: ''end'' expected (to close ''function'' at
    line 13) near <eof>

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpldpr0h8r.lua:14: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = string.gmatch(s, '[^ ]+')\n  local new_words = {}\n  for _, word in ipairs(words)\
    \ do\n    table.insert(new_words, word)\n  end\n  table.sort(new_words)\n  return\
    \ table.concat(new_words, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822251
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\n-- >>> anti_shuffle('Hi')\n\
    -- 'Hi'\n-- >>> anti_shuffle('hello')\n-- 'ehllo'\n-- >>> anti_shuffle('Hello\
    \ World!!!')\n-- 'Hello !!!Wdlor'\nlocal function anti_shuffle(s)\n  local words\
    \ = s:gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\
    \ '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub('\
    \ ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ',\
    \ ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', ' '):gsub(' ', '\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpldpr0h8r.lua:14: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659822251
