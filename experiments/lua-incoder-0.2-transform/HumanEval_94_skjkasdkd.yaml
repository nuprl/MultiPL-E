name: HumanEval_94_skjkasdkd
language: lua
prompt: "-- You are given a list of integers.\n-- You need to find the largest prime\
  \ value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n--\
  \ >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n--\
  \ 25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0,\
  \ 8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n\
  \    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
  \ 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2,\
  \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,\
  \ 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n\
  \    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,\
  \ 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "    local max = 0\n    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if v > max then\n            max = v\n        end\n\
    \        sum = sum + v\n    end\n    return sum\nend", "    local max = 0\n  \
    \  local sum = 0\n    for i = 1, #lst do\n        local n = lst[i]\n        if\
    \ n > max then\n            max = n\n        end\n        sum = sum + math.floor(n)\n\
    \    end\n    return sum\nend", "  local largest = 0\n  local sum = 0\n  for i\
    \ = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largest then\n\
    \      largest = prime\n    end\n    sum = sum + prime % 10\n  end\n  return sum\n\
    end", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] >\
    \ max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local largest, largest2, largest3, largest4, largest5,\
    \ largest6, largest7, largest8, largest9, largest10, largest11, largest12, largest13,\
    \ largest14, largest15, largest16, largest17, largest18, largest19, largest20,\
    \ largest21, largest22, largest23, largest24, largest25, largest26, largest27,\
    \ largest28, largest29, largest30, largest31, largest32, largest33, largest34,\
    \ largest35, largest36, largest37, largest38, largest39, largest40, largest41,\
    \ largest42, largest43, largest44, largest45, largest46, largest47, largest48,\
    \ largest49, largest50, largest51, largest52, largest53, largest54, largest55,\
    \ largest56, largest57, largest58, largest59, largest60, largest61, largest62,\
    \ largest63, largest64, largest65, largest66, largest67, largest68, largest69,\
    \ largest70, largest71, largest72, largest73, largest74, largest75, largest76,\
    \ largest77, largest78, largest79, largest80, largest81, largest82, largest83,\
    \ largest84, largest85, largest86, largest87, largest88, largest89, largest90,\
    \ largest91, largest92, largest93, largest94, largest95, largest96, largest97,\
    \ largest98, largest99, largest100})\n  local largest, largest2, largest3, largest4,\
    \ largest5, largest6, largest7, largest8, largest9, largest10, largest11, largest12,\
    \ largest13, largest14, largest15, largest16, largest17, largest18, largest19,\
    \ largest20, largest21, largest22, largest23, largest24, largest25, largest26,\
    \ largest27, largest28, largest29, largest30, largest31, largest32, largest33,\
    \ largest34, largest35, largest36, largest37, largest38, largest39, largest40,\
    \ largest41, largest42, largest43, largest44, largest45, largest46, largest47,\
    \ largest48, largest49, largest50, largest51, largest52, largest53, largest54,\
    \ largest55, largest56, largest", "  local largest, largestIndex, largestSum =\
    \ 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n\
    \      sum = sum + lst[i][j]\n    end\n    if sum > largestSum then\n      largestSum\
    \ = sum\n      largestIndex = i\n      largest = sum\n    end\n  end\n  return\
    \ largestSum + largest\nend", "  local max = 0\n  local sum = 0\n  for _, v in\
    \ ipairs(lst) do\n    if v > max then\n      max = v\n    end\n    sum = sum +\
    \ v\n  end\n  return sum\nend", "  local largest = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return\
    \ largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local largest, largestIndex, largestSum = 0, 0,\
    \ 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n    \
    \  if lst[i][j] ~= largestIndex then\n        sum = sum + lst[i][j]\n      else\n\
    \        largestSum = sum\n        largestIndex = lst[i][j]\n      end\n    end\n\
    \  end\n  return largestSum\nend", "  local largest, largestPrime = 0, 0\n  for\
    \ i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largestPrime\
    \ then\n      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ * largest\nend", "  local largest = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n    sum = sum\
    \ + math.floor(math.log10(largest))\n  end\n  return sum\nend", "  local largest\
    \ = 0\n  local largestSum = 0\n  for i = 1, #lst do\n    local sum = 0\n    for\
    \ j = 1, #lst[i] do\n      if j > largestSum then\n        largestSum = j\n  \
    \      largest = i\n      end\n      sum = sum + lst[i][j]\n    end\n    if sum\
    \ > largestSum then\n      largestSum = sum\n      largest = i\n    end\n  end\n\
    \  return largestSum\nend", "  local largest, largestPrime, largestSum, largestSumDigits,\
    \ largestSumDigit\n  local sum = 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime ~= nil then\n      if prime > largestPrime then\n        largestPrime\
    \ = prime\n        largestSumDigits = sum\n        largestSum = lst[i]\n     \
    \ else\n        largestPrime = nil\n        largestSumDigits = nil\n        largestSum\
    \ = nil\n      end\n    end\n    sum = sum + lst[i]\n  end\n  if largestSumDigits\
    \ ~= nil then\n    return largestSumDigits + largestSum\n  else\n    return largestSum\n\
    \  end\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local\
    \ num = lst[i]\n    if num > 0 then\n      local prime = primes[num] or primes[math.floor(num\
    \ / 2)] or primes[math.floor(math.sqrt(num))] or primes[num]\n      if prime >\
    \ max then\n        max = prime\n        sum = 0\n      end\n      sum = sum +\
    \ num % prime\n    end\n  end\n  return sum + max\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max then\n      sum = sum\
    \ + math.floor(math.abs(lst[i] - max) / 10)\n    end\n  end\n  return sum\nend",
  "    local max = 0\n    local sum = 0\n    for _, v in ipairs(lst) do\n        if\
    \ v > max then\n            max = v\n        end\n        sum = sum + v\n    end\n\
    \    return sum\nend", "  local max = 0\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v > max then\n      max = v\n    end\n    sum = sum + v\n  end\n\
    \  return sum\nend", "  local largest, largestPrime = 0, nil\n  for i = 1, #lst\
    \ do\n    local prime = primeFactor(lst[i])\n    if prime > largestPrime then\n\
    \      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ + largest\nend", "  local largest, largestPrime = nil, nil\n  for i = 1, #lst\
    \ do\n    local prime = primeFactors(lst[i])\n    if prime > largestPrime then\n\
    \      largestPrime = prime\n      largest = lst[i]\n    end\n  end\n  return\
    \ largestPrime + largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum\
    \ + math.floor(math.log10(max))\n  end\n  return sum\nend", "  local largest =\
    \ lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  local sum = 0\n  for i = 2, #lst do\n    if lst[i]\
    \ == largest then\n      sum = sum + i\n    end\n  end\n  return sum\nend", " \
    \ local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n\
    \    if num > max then\n      max = num\n    end\n    if num % 2 == 0 then\n \
    \     sum = sum + num\n    end\n  end\n  return sum + max\nend", "  local max\
    \ = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n     \
    \ max = lst[i]\n    end\n    if lst[i] > 0 and lst[i] % max == 0 then\n      sum\
    \ = sum + math.floor(lst[i] / max) * max\n    end\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n  end\n\
    \  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    local prime = primes[lst[i]]\n    if prime > max then\n      max = prime\n\
    \      sum = sum + prime\n    end\n  end\n  return sum\nend", "  local largest,\
    \ largestPrime = nil, nil\n  for i = 2, #lst do\n    local prime = i\n    for\
    \ j = 2, #lst do\n      if prime % j == 0 then\n        prime = nil\n        break\n\
    \      end\n    end\n    if prime ~= nil then\n      if prime > largestPrime then\n\
    \        largestPrime = prime\n        largest = i\n      end\n    end\n  end\n\
    \  return largestPrime and largestPrime + largest\nend", "  local largest, largestNum,\
    \ largestNumDigits, largestNumDigitSum, largestNumDigitSumDigits, largestNumDigitSumDigitSumDigits\
    \ = 0, 0, 0, 0, 0\n  for i = 1, #lst do\n    local num = lst[i]\n    local numDigits\
    \ = math.floor(math.log(num, 10))\n    local numDigitSum = math.floor(math.pow(10,\
    \ numDigits) + 1)\n    local numDigitSumDigits = math.floor(math.pow(10, numDigits)\
    \ - 1)\n    local numDigitSumDigitSum = math.floor(math.pow(10, numDigits) + 1)\n\
    \    local numDigitSumDigitSumDigits = math.floor(math.pow(10, numDigits) - 1)\n\
    \    if numDigitSum > largestNum then\n      largestNum = numDigitSum\n      largestNumDigits\
    \ = numDigits\n      largestNumDigitSum = numDigitSum\n      largestNumDigitSumDigits\
    \ = numDigitSumDigits\n      largestNumDigitSumDigitSum = numDigitSumDigitSum\n\
    \    end\n    if numDigitSumDigits > largestNumDigits then\n      largestNumDigits\
    \ = numDigitSumDigits\n      largestNumDigitSumDigits = numDigitSumDigits\n  \
    \    largestNumDigitSumDigitSumDigits = numDigitSumDigitSumDigits\n    end\n \
    \   if numDigitSumDigitSum > largestNumDigitSum then\n      largestNumDigitSum\
    \ = numDigitSumDigitSum\n      largestNumDigitSumDigits = numDigitSumDigitSumDigits\n\
    \      largestNumDigitSumDigitSum = numDigitSumDigitSumDigits\n    end\n    if\
    \ numDigitSumDigitSumDigits > largestNumDigitSumDigits then\n      largestNumDigitSumDigits\
    \ = numDigitSumDigitSumDigits\n      largestNumDigitSumDigitSumDigits = numDigitSumDigitSumDigits\n\
    \    end\n  end\n  return largestNum + largestNumDigits + largestNumDigitSum +\
    \ largestNumDigitSumDigits + largestNumDigitSumDigitSum\nend", "    local max\
    \ = 0\n    local sum = 0\n    for _, v in ipairs(lst) do\n        if v > max then\n\
    \            max = v\n        end\n        sum = sum + v\n    end\n    return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local\
    \ n = lst[i]\n    if n > max then\n      max = n\n    end\n    if n > 1 then\n\
    \      local m = math.floor(math.log(n, 2))\n      if m == 0 then\n        sum\
    \ = sum + n\n      else\n        local p = 2\n        while p <= m do\n      \
    \    local q = p * p\n          if q > n then\n            q = n\n          end\n\
    \          if q == n then\n            sum = sum + n\n            break\n    \
    \      end\n          p = q\n        end\n      end\n    end\n  end\n  return\
    \ sum\nend", "  local largest, largestPrime = 0, 0\n  for i = 2, #lst do\n   \
    \ local prime, primePrime = 0, 0\n    for j = 2, #lst do\n      if i % j == 0\
    \ then\n        primePrime = primePrime + 1\n      end\n    end\n    if primePrime\
    \ > primePrime then\n      largestPrime = primePrime\n      largest = i\n    end\n\
    \  end\n  return largestPrime + largest\nend", "  local largest, largestIndex,\
    \ largestSum = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1,\
    \ #lst[i] do\n      sum = sum + lst[i][j]\n    end\n    if sum > largestSum then\n\
    \      largestSum = sum\n      largestIndex = i\n      largest = sum\n    end\n\
    \  end\n  return largestSum + largest\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    local prime = prime_check(lst[i])\n    if prime > 0\
    \ then\n      max = prime\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum + max\nend", "  local largest, largestPrime = 0, nil\n  for i = 1, #lst\
    \ do\n    local prime = primeFactor(lst[i])\n    if prime > largestPrime then\n\
    \      largest, largestPrime = i, prime\n    end\n  end\n  return largest * largestPrime\n\
    end", "    local largest, largestPrime = 0, nil\n    for i = 2, #lst do\n    \
    \    if lst[i] > largestPrime then\n            largest = largestPrime\n     \
    \       largestPrime = lst[i]\n        elseif lst[i] == largestPrime then\n  \
    \          largest = largestPrime + lst[i]\n        end\n    end\n    return largest\n\
    end", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime\
    \ = primes[lst[i]]\n    if prime > max then\n      max = prime\n      sum = sum\
    \ + prime\n    end\n  end\n  return sum\nend", "  local max = 0\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \    sum = sum + math.floor(math.log10(max))\n  end\n  return sum\nend", "  local\
    \ max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n \
    \     max = lst[i]\n    end\n    if lst[i] == max then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "  local largest, largestPrime = 1, 1\n \
    \ for i = 2, #lst do\n    if lst[i] > largestPrime then\n      largest, largestPrime\
    \ = i, lst[i]\n    end\n  end\n  return largestPrime + largest\nend", "  local\
    \ largest, largestPrime = 0, nil\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime > largestPrime then\n      largest, largestPrime = i, prime\n  \
    \  end\n  end\n  return largestPrime * largest\nend", "  local largest, largestIndex,\
    \ largestSum = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1,\
    \ #lst do\n      if i == j then\n        sum = sum + lst[j]\n      else\n    \
    \    sum = sum + lst[j] * i\n      end\n    end\n    if sum > largest then\n \
    \     largest = sum\n      largestIndex = i\n      largestSum = sum\n    end\n\
    \  end\n  return largestSum + largest\nend", "  local largest = 0\n  local sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    sum = sum + math.floor(math.log10(largest))\n  end\n  return sum\n\
    end", "  local largest, largestPrime = 1, 1\n  for i = 2, #lst do\n    local prime\
    \ = primes[i]\n    if prime > largestPrime then\n      largestPrime = prime\n\
    \      largest = i\n    end\n  end\n  return largestPrime * largest\nend", " \
    \ local largest, largestPrime = 0, nil\n  for i = 1, #lst do\n    local prime\
    \ = primeFactors(lst[i])\n    if prime > largestPrime then\n      largestPrime,\
    \ largest = prime, lst[i]\n    end\n  end\n  return largestPrime + largest\nend",
  "  local largest, largestPrime = 0, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n      largestPrime = i\n    end\n  end\n  return\
    \ largestPrime * largest\nend", "  local largest = nil\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    if largest == nil then\n      largest = lst[i]\n      sum\
    \ = lst[i]\n    else\n      if lst[i] > largest then\n        largest = lst[i]\n\
    \        sum = lst[i]\n      else\n        sum = sum + lst[i]\n      end\n   \
    \ end\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum =\
    \ sum + math.floor(math.log10(max))\n  end\n  return sum\nend", "  local max =\
    \ 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max\
    \ = lst[i]\n    end\n    if lst[i] == max then\n      sum = sum + math.floor(math.log10(max))\n\
    \    end\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    local prime = prime_of(lst[i])\n    if prime > max then\n\
    \      max = prime\n      sum = sum + prime\n    end\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime > max then\n      max = prime\n      sum = sum + prime\n    end\n\
    \  end\n  return sum\nend", "  local largest, largestIndex, largestSum = 0, 0,\
    \ 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n    \
    \  if lst[i][j] == largestIndex then\n        sum = sum + lst[i][j]\n      else\n\
    \        if sum > largestSum then\n          largestSum = sum\n          largestIndex\
    \ = largestIndex + 1\n        end\n        sum = sum + lst[i][j]\n      end\n\
    \    end\n  end\n  return largestSum\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \    if lst[i] > 0 then\n      sum = sum + math.floor(math.log10(lst[i]))\n  \
    \  end\n  end\n  return sum + max\nend", "  local largest = nil\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    if largest == nil then\n      largest = lst[i]\n\
    \      sum = lst[i]\n    elseif largest < lst[i] then\n      largest = lst[i]\n\
    \      sum = sum + largest\n    end\n  end\n  return sum\nend", "  local max =\
    \ 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max\
    \ = lst[i]\n    end\n    if lst[i] == max then\n      sum = sum + lst[i]\n   \
    \ end\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum =\
    \ sum + math.floor(math.log10(max))\n  end\n  return sum\nend", "    local max\
    \ = 0\n    local sum = 0\n    for i = 1, #lst do\n        local num = lst[i]\n\
    \        if num > max then\n            max = num\n        end\n        if num\
    \ == 0 then\n            sum = sum + 0\n        else\n            sum = sum +\
    \ math.floor(math.log10(num))\n        end\n    end\n    return sum + max\nend",
  "  local largest, largest2, largest3, largest4, largest5, largest6, largest7, largest8,\
    \ largest9, largest10, largest11, largest12, largest13, largest14, largest15,\
    \ largest16, largest17, largest18, largest19, largest20, largest21, largest22,\
    \ largest23, largest24, largest25, largest26, largest27, largest28, largest29,\
    \ largest30, largest31, largest32, largest33, largest34, largest35, largest36,\
    \ largest37, largest38, largest39, largest40, largest41, largest42, largest43,\
    \ largest44, largest45, largest46, largest47, largest48, largest49, largest50,\
    \ largest51, largest52, largest53, largest54, largest55, largest56, largest57,\
    \ largest58, largest59, largest60, largest61, largest62, largest63, largest64,\
    \ largest65, largest66, largest67, largest68, largest69, largest70, largest71,\
    \ largest72, largest73, largest74, largest75, largest76, largest77, largest78,\
    \ largest79, largest80, largest81, largest82, largest83, largest84, largest85,\
    \ largest86, largest87, largest88, largest89, largest90, largest91, largest92,\
    \ largest93, largest94, largest95, largest96, largest97, largest98, largest99,\
    \ largest100})\n  local largest, largest2, largest3, largest4, largest5, largest6,\
    \ largest7, largest8, largest9, largest10, largest11, largest12, largest13, largest14,\
    \ largest15, largest16, largest17, largest18, largest19, largest20, largest21,\
    \ largest22, largest23, largest24, largest25, largest26, largest27, largest28,\
    \ largest29, largest30, largest31, largest32, largest33, largest34, largest35,\
    \ largest36, largest37, largest38, largest39, largest40, largest41, largest42,\
    \ largest43, largest44, largest45, largest46, largest47, largest48, largest49,\
    \ largest50, largest51, largest52, largest53, largest54, largest55, largest56,\
    \ largest", "  local largest, largestPrime, largestPrimeDigit = 0, nil, nil\n\
    \  for i = 1, #lst do\n    local prime = primeFactor(lst[i])\n    if prime > largestPrime\
    \ then\n      largestPrime = prime\n      largestPrimeDigit = lst[i]\n    end\n\
    \  end\n  return largestPrimeDigit + largestPrime\nend", "  local largest = 0\n\
    \  local largestSum = 0\n  for _, v in ipairs(lst) do\n    if v > largest then\n\
    \      largest = v\n      largestSum = 0\n    end\n    largestSum = largestSum\
    \ + v\n  end\n  return largestSum\nend", "  local largest, largestPrime = 0, nil\n\
    \  for i = 2, #lst do\n    if lst[i] == largestPrime then\n      largestPrime\
    \ = largestPrime + 1\n    elseif lst[i] == largestPrime then\n      largestPrime\
    \ = largestPrime + 1\n    else\n      largestPrime = largest\n      largest =\
    \ lst[i]\n    end\n  end\n  return largest\nend", "  local largest, largestIndex\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local prime, primeIndex = findPrime(lst[i])\n\
    \    if prime then\n      if prime > largest then\n        largest = prime\n \
    \       largestIndex = primeIndex\n      end\n      sum = sum + prime % 10\n \
    \   end\n  end\n  return sum + largest\nend", "  local max = 0\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \  end\n  for i = 1, #lst do\n    if lst[i] == max then\n      sum = sum + math.floor(math.log10(max))\n\
    \    end\n  end\n  return sum\nend", "    local max = 0\n    local sum = 0\n \
    \   for _, v in ipairs(lst) do\n        if v > max then\n            max = v\n\
    \        end\n        sum = sum + v\n    end\n    return sum\nend", "  local largest,\
    \ largestPrime = nil, nil\n  for i = 1, #lst do\n    local prime, primePrime =\
    \ nil, nil\n    for j = 2, #lst do\n      if lst[j] % i == 0 then\n        prime\
    \ = i\n        primePrime = j\n      end\n    end\n    if prime ~= nil then\n\
    \      if prime > largestPrime then\n        largestPrime = primePrime\n     \
    \   largest = i\n      end\n    end\n  end\n  return largestPrime * largest\n\
    end", "  local largest = nil\n  local sum = 0\n  for _, v in ipairs(lst) do\n\
    \    if largest == nil then\n      largest = v\n      sum = v\n    elseif v >\
    \ largest then\n      largest = v\n      sum = sum + v\n    end\n  end\n  return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local\
    \ prime = prime_check(lst[i])\n    if prime > max then\n      max = prime\n  \
    \    sum = sum + prime\n    end\n  end\n  return sum\nend", "  local largest,\
    \ sum = 0, 0\n  for i = 1, #lst do\n    local prime, sum = 0, 0\n    for j = 2,\
    \ #lst do\n      if lst[j] % i == 0 then\n        prime = i\n        sum = sum\
    \ + lst[j]\n        break\n      end\n    end\n    if prime > largest then\n \
    \     largest = prime\n    end\n    if sum > largest * 10 then\n      largest\
    \ = sum\n    end\n  end\n  return largest\nend", "  local max = 0\n  local sum\
    \ = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if num > max then\n \
    \     max = num\n    end\n    if num > 0 then\n      sum = sum + num\n    end\n\
    \  end\n  return sum\nend", "    local max = 0\n    local sum = 0\n    for i =\
    \ 1, #lst do\n        local num = lst[i]\n        if num > 0 then\n          \
    \  local prime = prime_number(num)\n            if prime > max then\n        \
    \        max = prime\n                sum = sum + prime\n            end\n   \
    \     end\n    end\n    return sum\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > max then\n\
    \      max = prime\n      sum = sum + prime % 10\n    end\n  end\n  return sum\n\
    end", "  local largest, largestPrime = 0, nil\n  for i = 2, #lst do\n    if lst[i]\
    \ > largestPrime then\n      largest, largestPrime = i, lst[i]\n    end\n  end\n\
    \  return largestPrime + largest\nend", "    local max = 0\n    local sum = 0\n\
    \    for i = 1, #lst do\n        local num = lst[i]\n        if num > 0 then\n\
    \            local prime = prime_of(num)\n            if prime > max then\n  \
    \              max = prime\n                sum = sum + num\n            end\n\
    \        end\n    end\n    return sum\nend", "  local largest, largestPrime =\
    \ 0, 0\n  for _, v in ipairs(lst) do\n    if v > largestPrime then\n      largestPrime\
    \ = v\n      largest = v\n    end\n  end\n  return largestPrime * largest\nend",
  "  local largest, largest2, largest3, largest4, largest5, largest6, largest7, largest8,\
    \ largest9, largest10, largest11, largest12, largest13, largest14, largest15,\
    \ largest16, largest17, largest18, largest19, largest20, largest21, largest22,\
    \ largest23, largest24, largest25, largest26, largest27, largest28, largest29,\
    \ largest30, largest31, largest32, largest33, largest34, largest35, largest36,\
    \ largest37, largest38, largest39, largest40, largest41, largest42, largest43,\
    \ largest44, largest45, largest46, largest47, largest48, largest49, largest50,\
    \ largest51, largest52, largest53, largest54, largest55, largest56, largest57,\
    \ largest58, largest59, largest60, largest61, largest62, largest63, largest64,\
    \ largest65, largest66, largest67, largest68, largest69, largest70, largest71,\
    \ largest72, largest73, largest74, largest75, largest76, largest77, largest78,\
    \ largest79, largest80, largest81, largest82, largest83, largest84, largest85,\
    \ largest86, largest87, largest88, largest89, largest90, largest91, largest92,\
    \ largest93, largest94, largest95, largest96, largest97, largest98, largest99,\
    \ largest100})\n  local largest, largest2, largest3, largest4, largest5, largest6,\
    \ largest7, largest8, largest9, largest10, largest11, largest12, largest13, largest14,\
    \ largest15, largest16, largest17, largest18, largest19, largest20, largest21,\
    \ largest22, largest23, largest24, largest25, largest26, largest27, largest28,\
    \ largest29, largest30, largest31, largest32, largest33, largest34, largest35,\
    \ largest36, largest37, largest38, largest39, largest40, largest41, largest42,\
    \ largest43, largest44, largest45, largest46, largest47, largest48, largest49,\
    \ largest50, largest51, largest52, largest53, largest54, largest55, largest56,\
    \ largest", "  local largest, largest2, largest3, largest4, largest5, largest6,\
    \ largest7, largest8, largest9, largest10, largest11, largest12, largest13, largest14,\
    \ largest15, largest16, largest17, largest18, largest19, largest20, largest21,\
    \ largest22, largest23, largest24, largest25, largest26, largest27, largest28,\
    \ largest29, largest30, largest31, largest32, largest33, largest34, largest35,\
    \ largest36, largest37, largest38, largest39, largest40, largest41, largest42,\
    \ largest43, largest44, largest45, largest46, largest47, largest48, largest49,\
    \ largest50, largest51, largest52, largest53, largest54, largest55, largest56,\
    \ largest57, largest58, largest59, largest60, largest61, largest62, largest63,\
    \ largest64, largest65, largest66, largest67, largest68, largest69, largest70,\
    \ largest71, largest72, largest73, largest74, largest75, largest76, largest77,\
    \ largest78, largest79, largest80, largest81, largest82, largest83, largest84,\
    \ largest85, largest86, largest87, largest88, largest89, largest90, largest91,\
    \ largest92, largest93, largest94, largest95, largest96, largest97, largest98,\
    \ largest99, largest100})\n  local largest, largest2, largest3, largest4, largest5,\
    \ largest6, largest7, largest8, largest9, largest10, largest11, largest12, largest13,\
    \ largest14, largest15, largest16, largest17, largest18, largest19, largest20,\
    \ largest21, largest22, largest23, largest24, largest25, largest26, largest27,\
    \ largest28, largest29, largest30, largest31, largest32, largest33, largest34,\
    \ largest35, largest36, largest37, largest38, largest39, largest40, largest41,\
    \ largest42, largest43, largest44, largest45, largest46, largest47, largest48,\
    \ largest49, largest50, largest51, largest52, largest53, largest54, largest55,\
    \ largest56, largest", "    local max = 0\n    local sum = 0\n    for i = 1, #lst\
    \ do\n        local n = lst[i]\n        if n > max then\n            max = n\n\
    \        end\n        sum = sum + math.floor(n)\n    end\n    return sum\nend",
  "  local largest, largest2, largest3, largest4, largest5, largest6 = 0, 0, 0, 0,\
    \ 0, 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if largest6 == 0 then\n\
    \      if num > largest6 then\n        largest6 = num\n      end\n    elseif largest5\
    \ == 0 then\n      if num > largest5 then\n        largest5 = num\n      end\n\
    \    elseif largest4 == 0 then\n      if num > largest4 then\n        largest4\
    \ = num\n      end\n    elseif largest3 == 0 then\n      if num > largest3 then\n\
    \        largest3 = num\n      end\n    elseif largest2 == 0 then\n      if num\
    \ > largest2 then\n        largest2 = num\n      end\n    elseif largest1 == 0\
    \ then\n      if num > largest1 then\n        largest1 = num\n      end\n    elseif\
    \ num > largest6 then\n      largest6 = num\n    elseif num > largest5 then\n\
    \      largest5 = num\n    elseif num > largest4 then\n      largest4 = num\n\
    \    elseif num > largest3 then\n      largest3 = num\n    elseif num > largest2\
    \ then\n      largest2 = num\n    elseif num > largest1 then\n      largest1 =\
    \ num\n    end\n  end\n  if largest6 > largest5 then\n    return largest6 + largest5\n\
    \  elseif largest6 > largest4 then\n    return largest6 + largest4\n  elseif largest6\
    \ > largest3 then\n    return largest6 + largest3\n  elseif largest6 > largest2\
    \ then\n    return largest6 + largest2\n  elseif largest6 > largest1 then\n  \
    \  return largest6 + largest1\n  elseif largest5 > largest4 then\n    return largest5\
    \ + largest4\n  elseif largest5 > largest3 then\n    return largest5 + largest3\n\
    \  elseif largest5 > largest2 then\n    return largest5 + largest2\n  elseif largest5\
    \ > largest1 then\n    return largest5 + largest1\n  elseif largest4 > largest3\
    \ then\n    return largest4 + largest3\n  elseif largest4 > largest2 then\n  \
    \  return largest4 + largest2\n  else", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    if\
    \ lst[i] > 0 then\n      sum = sum + math.floor(math.log10(lst[i]))\n    end\n\
    \  end\n  return sum + max\nend", "  local largest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n \
    \ local sum = 0\n  for i = 2, #lst do\n    if lst[i] <= largest then\n      sum\
    \ = sum + math.floor(math.log10(largest))\n    end\n  end\n  return sum\nend",
  "  local largest, largestPrime = 0, nil\n  for i = 2, #lst do\n    local prime =\
    \ primes[lst[i]]\n    if prime ~= nil then\n      if prime > largestPrime then\n\
    \        largest, largestPrime = i, prime\n      end\n    end\n  end\n  return\
    \ largestPrime + largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1,\
    \ #lst do\n    local prime = prime_of(lst[i])\n    if prime > max then\n     \
    \ max = prime\n      sum = sum + prime % 10\n    end\n  end\n  return sum\nend",
  "  local largest, largestPrime = 0, nil\n  for i = 1, #lst do\n    local prime =\
    \ primeFactors(lst[i])\n    if prime > largestPrime then\n      largest, largestPrime\
    \ = i, prime\n    end\n  end\n  return largest\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if n > max then\n \
    \     max = n\n    end\n    if n > 0 then\n      sum = sum + math.floor(math.log10(n))\n\
    \    end\n  end\n  return sum + max\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \    if lst[i] == max then\n      sum = sum + lst[i]\n    end\n  end\n  return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if\
    \ lst[i] > max then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end", "  local largest, largestPrime = 0, nil\n  for i = 2, #lst do\n    local\
    \ prime = i\n    for j = 2, #lst do\n      if prime % j == 0 then\n        prime\
    \ = nil\n        break\n      end\n    end\n    if prime then\n      if prime\
    \ > largestPrime then\n        largest, largestPrime = i, prime\n      end\n \
    \   end\n  end\n  return largestPrime and largestPrime + largest\nend", "  local\
    \ max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n \
    \     max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n  end\n\
    \  return sum\nend", "  local largest, largestPrime = 0, nil\n  for i = 2, #lst\
    \ do\n    local prime = primes[i]\n    if prime > largestPrime then\n      largest,\
    \ largestPrime = i, prime\n    end\n  end\n  return largest * largestPrime\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n\
    \    if num > max then\n      max = num\n    end\n    if num > 1 then\n      local\
    \ prime = prime_number(num)\n      if prime > 0 then\n        sum = sum + prime\
    \ % 10\n      end\n    end\n  end\n  return sum\nend", "  local largest, sum =\
    \ 0, 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if num > largest\n \
    \     or num == largest\n      and num % 2 == 0 then\n      largest = num\n  \
    \  end\n    sum = sum + num\n  end\n  return sum + largest\nend", "  local largest,\
    \ largestPrime = 0, nil\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime ~= nil then\n      if prime > largestPrime then\n        largest,\
    \ largestPrime = i, prime\n      end\n    end\n  end\n  return largestPrime +\
    \ largest\nend", "  local largest, largestPrime = 0, nil\n  for i = 2, #lst do\n\
    \    local prime = primes[i]\n    if prime > largestPrime then\n      largest,\
    \ largestPrime = i, prime\n    end\n  end\n  return largestPrime * largest\nend",
  "  local largest, largestIndex\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n      largestIndex = i\n    end\n  end\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == largestIndex then\n      sum = sum\
    \ + largest\n    end\n  end\n  return sum\nend", "  local largest, largestIndex,\
    \ largestSum = 0, 0, 0\n  for i = 1, #lst do\n    if lst[i] > largestIndex then\n\
    \      largest, largestIndex, largestSum = lst[i], i, 0\n    elseif lst[i] ==\
    \ largestIndex then\n      largestSum = largestSum + lst[i]\n    end\n  end\n\
    \  return largestSum\nend", "  local largest, sum = 0, 0\n  for i = 1, #lst do\n\
    \    local prime, digits = prime_digits(lst[i])\n    if prime > largest then\n\
    \      largest, sum = prime, digits\n    end\n  end\n  return sum\nend", '  local
    largest, largestPrime, largestPrimeSum, largestPrimeSumDigits, largestPrimeSumDigitSum,
    largestPrimeSumDigitSumDigits, largestPrimeSumDigitSumDigitSum, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, largestPrimeSumDigitSumDigitSumDigits,
    largestPrimeSumDigitSumDigitSumDigits, lar', "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    local prime = prime_number(lst[i])\n    if prime >\
    \ max then\n      max = prime\n    end\n    sum = sum + lst[i]\n  end\n  return\
    \ sum + max\nend", "  local largest = 0\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v > largest then\n      largest = v\n    end\n    sum = sum + v\n\
    \  end\n  return sum + largest\nend", "  local largest, largestPrime = 0, 0\n\
    \  for i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largestPrime\
    \ then\n      largest, largestPrime = lst[i], prime\n    end\n  end\n  return\
    \ largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ local prime = primes[lst[i]]\n    if prime > max then\n      max = prime\n \
    \     sum = 0\n    end\n    sum = sum + prime % 10\n  end\n  return sum\nend",
  "  local largest = nil\n  local sum = 0\n  for i = 1, #lst do\n    local prime =\
    \ primes[lst[i]]\n    if prime ~= nil then\n      if largest == nil then\n   \
    \     largest = prime\n      else\n        if prime > largest then\n         \
    \ largest = prime\n        end\n      end\n      sum = sum + lst[i]\n    end\n\
    \  end\n  return sum + largest\nend", "  local largest, largest2, largest3, largest4,\
    \ largest5, largest6, largest7, largest8, largest9, largest10, largest11, largest12,\
    \ largest13, largest14, largest15, largest16, largest17, largest18, largest19,\
    \ largest20, largest21, largest22, largest23, largest24, largest25, largest26,\
    \ largest27, largest28, largest29, largest30, largest31, largest32, largest33,\
    \ largest34, largest35, largest36, largest37, largest38, largest39, largest40,\
    \ largest41, largest42, largest43, largest44, largest45, largest46, largest47,\
    \ largest48, largest49, largest50, largest51, largest52, largest53, largest54,\
    \ largest55, largest56, largest57, largest58, largest59, largest60, largest61,\
    \ largest62, largest63, largest64, largest65, largest66, largest67, largest68,\
    \ largest69, largest70, largest71, largest72, largest73, largest74, largest75,\
    \ largest76, largest77, largest78, largest79, largest80, largest81, largest82,\
    \ largest83, largest84, largest85, largest86, largest87, largest88, largest89,\
    \ largest90, largest91, largest92, largest93, largest94, largest95, largest96,\
    \ largest97, largest98, largest99, largest100})\n  local largest, largest2, largest3,\
    \ largest4, largest5, largest6, largest7, largest8, largest9, largest10, largest11,\
    \ largest12, largest13, largest14, largest15, largest16, largest17, largest18,\
    \ largest19, largest20, largest21, largest22, largest23, largest24, largest25,\
    \ largest26, largest27, largest28, largest29, largest30, largest31, largest32,\
    \ largest33, largest34, largest35, largest36, largest37, largest38, largest39,\
    \ largest40, largest41, largest42, largest43, largest44, largest45, largest46,\
    \ largest47, largest48, largest49, largest50, largest51, largest52, largest53,\
    \ largest54, largest55, largest56, largest", "  local largest = 0\n  local largestSum\
    \ = 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n  \
    \    if lst[i][j] == largest\n      then\n        sum = sum + lst[i][j]\n    \
    \  else\n        if sum > largestSum\n        then\n          largestSum = sum\n\
    \          largest = lst[i][j]\n        end\n      end\n    end\n  end\n  return\
    \ largestSum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    local num = lst[i]\n    if num > max then\n      max = num\n    end\n\
    \    if num > 0 then\n      sum = sum + num\n    end\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local n = lst[i]\n\
    \    if n > max then\n      max = n\n    end\n    sum = sum + math.floor(math.log10(n))\n\
    \  end\n  return sum + max\nend", "  local largest = nil\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    if largest == nil then\n      largest = lst[i]\n      sum\
    \ = lst[i]\n    elseif largest < lst[i] then\n      largest = lst[i]\n      sum\
    \ = sum + largest\n    end\n  end\n  return sum\nend", "  local max = 0\n  local\
    \ sum = 0\n  for _, v in ipairs(lst) do\n    if v > max then\n      max = v\n\
    \    end\n    sum = sum + v\n  end\n  return sum\nend", "  local largest, sum\
    \ = 0, 0\n  for i = 1, #lst do\n    local prime, sum = 0, 0\n    for j = 2, #lst\
    \ do\n      if lst[j] % i == 0 then\n        prime = i\n        sum = sum + lst[j]\n\
    \      end\n    end\n    if prime > largest then\n      largest, sum = prime,\
    \ sum\n    end\n  end\n  return sum\nend", "  local largest = 0\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largest\
    \ then\n      largest = prime\n      sum = sum + prime\n    end\n  end\n  return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n    if lst[i] > 0 then\n      sum =\
    \ sum + math.floor(math.log10(lst[i]))\n    end\n  end\n  return sum + max\nend",
  "    local largest = lst[1]\n    local sum = 0\n    for i = 2, #lst do\n       \
    \ if lst[i] > largest then\n            largest = lst[i]\n        end\n      \
    \  sum = sum + math.floor(largest/10)\n        largest = largest % 10\n    end\n\
    \    return sum\nend", "    local max = 0\n    local sum = 0\n    for i = 1, #lst\
    \ do\n        local num = lst[i]\n        if num > 0 then\n            if num\
    \ > max then\n                max = num\n            end\n            sum = sum\
    \ + num\n        end\n    end\n    return sum + max\nend", "  local largest, largestPrime\
    \ = 0, 0\n  for i = 2, #lst do\n    local prime = i\n    for j = 2, #lst do\n\
    \      if prime % j == 0 then\n        prime = nil\n        break\n      end\n\
    \    end\n    if prime then\n      if prime > largestPrime then\n        largest,\
    \ largestPrime = i, prime\n      end\n    end\n  end\n  return largestPrime *\
    \ largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ local prime = prime_check(lst[i])\n    if prime > 0 then\n      max = prime\n\
    \      sum = sum + lst[i]\n    end\n  end\n  return sum + max\nend", "  local\
    \ largest, sum = 0, 0\n  for i = 1, #lst do\n    local prime, sum = 0, 0\n   \
    \ for j = 2, #lst do\n      if lst[j] % i == 0 then\n        prime = i\n     \
    \   sum = sum + lst[j]\n      end\n    end\n    if prime > largest then\n    \
    \  largest, sum = prime, sum\n    end\n  end\n  return sum\nend", "    local largest,\
    \ largest2, largest3, largest4, largest5, largest6, largest7, largest8, largest9,\
    \ largest10, largest11, largest12, largest13, largest14, largest15, largest16,\
    \ largest17, largest18, largest19, largest20, largest21, largest22, largest23,\
    \ largest24, largest25, largest26, largest27, largest28, largest29, largest30,\
    \ largest31, largest32, largest33, largest34, largest35, largest36, largest37,\
    \ largest38, largest39, largest40, largest41, largest42, largest43, largest44,\
    \ largest45, largest46, largest47, largest48, largest49, largest50, largest51,\
    \ largest52, largest53, largest54, largest55, largest56, largest57, largest58,\
    \ largest59, largest60, largest61, largest62, largest63, largest64, largest65,\
    \ largest66, largest67, largest68, largest69, largest70, largest71, largest72,\
    \ largest73, largest74, largest75, largest76, largest77, largest78, largest79,\
    \ largest80, largest81, largest82, largest83, largest84, largest85, largest86,\
    \ largest87, largest88, largest89, largest90, largest91, largest92, largest93,\
    \ largest94, largest95, largest96, largest97, largest98, largest99, largest100})\n\
    \    local largest, largest2, largest3, largest4, largest5, largest6, largest7,\
    \ largest8, largest9, largest10, largest11, largest12, largest13, largest14, largest15,\
    \ largest16, largest17, largest18, largest19, largest20, largest21, largest22,\
    \ largest23, largest24, largest25, largest26, largest27, largest28, largest29,\
    \ largest30, largest31, largest32, largest33, largest34, largest35, largest36,\
    \ largest37, largest38, largest39, largest40, largest41, largest42, largest43,\
    \ largest44, largest45, largest46, largest47, largest48, largest49, largest50,\
    \ largest51, largest52, largest53, largest54, largest55, largest56, largest",
  "  local largest, largest2, largest3, largest4, largest5, largest6, largest7, largest8,\
    \ largest9, largest10, largest11, largest12, largest13, largest14, largest15,\
    \ largest16, largest17, largest18, largest19, largest20, largest21, largest22,\
    \ largest23, largest24, largest25, largest26, largest27, largest28, largest29,\
    \ largest30, largest31, largest32, largest33, largest34, largest35, largest36,\
    \ largest37, largest38, largest39, largest40, largest41, largest42, largest43,\
    \ largest44, largest45, largest46, largest47, largest48, largest49, largest50,\
    \ largest51, largest52, largest53, largest54, largest55, largest56, largest57,\
    \ largest58, largest59, largest60, largest61, largest62, largest63, largest64,\
    \ largest65, largest66, largest67, largest68, largest69, largest70, largest71,\
    \ largest72, largest73, largest74, largest75, largest76, largest77, largest78,\
    \ largest79, largest80, largest81, largest82, largest83, largest84, largest85,\
    \ largest86, largest87, largest88, largest89, largest90, largest91, largest92,\
    \ largest93, largest94, largest95, largest96, largest97, largest98, largest99,\
    \ largest100})\n  local largest, largest2, largest3, largest4, largest5, largest6,\
    \ largest7, largest8, largest9, largest10, largest11, largest12, largest13, largest14,\
    \ largest15, largest16, largest17, largest18, largest19, largest20, largest21,\
    \ largest22, largest23, largest24, largest25, largest26, largest27, largest28,\
    \ largest29, largest30, largest31, largest32, largest33, largest34, largest35,\
    \ largest36, largest37, largest38, largest39, largest40, largest41, largest42,\
    \ largest43, largest44, largest45, largest46, largest47, largest48, largest49,\
    \ largest50, largest51, largest52, largest53, largest54, largest55, largest56,\
    \ largest", "  local largest, sum = 0, 0\n  for i = 1, #lst do\n    local prime,\
    \ sum = 0, 0\n    for j = 2, #lst do\n      if lst[j] % i == 0 then\n        prime\
    \ = i\n        sum = sum + lst[j]\n      end\n    end\n    if prime > largest\
    \ then\n      largest = prime\n    end\n  end\n  return sum + largest\nend", " \
    \ local largest, largestPrime = 0, nil\n  for i = 1, #lst do\n    if lst[i] >\
    \ largest then\n      largest = lst[i]\n      largestPrime = i\n    end\n  end\n\
    \  return largest + largestPrime\nend", "  local largest = nil\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if largest == nil then\n\
    \      largest = num\n      sum = num\n    elseif largest == num then\n      sum\
    \ = sum + num\n    else\n      largest = largest * 10 + num\n      sum = sum +\
    \ largest\n    end\n  end\n  return sum\nend", "  local max = 0\n  local sum =\
    \ 0\n  for i = 1, #lst do\n    local prime = prime_number(lst[i])\n    if prime\
    \ > max then\n      max = prime\n    end\n    sum = sum + lst[i]\n  end\n  return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    local prime = primes[lst[i]]\n    if prime > max then\n      max = prime\n\
    \      sum = sum + prime % 10\n    end\n  end\n  return sum\nend", "  local largest\
    \ = nil\n  local sum = 0\n  for i = 1, #lst do\n    local num = lst[i]\n    if\
    \ largest==nil or num > largest then\n      largest = num\n    end\n    sum =\
    \ sum + num\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ _, v in ipairs(lst) do\n    if v > max then\n      max = v\n    end\n    sum\
    \ = sum + v\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    local prime = prime_number(lst[i])\n    if prime > max then\n\
    \      max = prime\n      sum = sum + prime\n    end\n  end\n  return sum\nend",
  "  local largest, largest2, largest3, largest4, largest5, largest6, largest7, largest8,\
    \ largest9, largest10, largest11, largest12, largest13, largest14, largest15,\
    \ largest16, largest17, largest18, largest19, largest20, largest21, largest22,\
    \ largest23, largest24, largest25, largest26, largest27, largest28, largest29,\
    \ largest30, largest31, largest32, largest33, largest34, largest35, largest36,\
    \ largest37, largest38, largest39, largest40, largest41, largest42, largest43,\
    \ largest44, largest45, largest46, largest47, largest48, largest49, largest50,\
    \ largest51, largest52, largest53, largest54, largest55, largest56, largest57,\
    \ largest58, largest59, largest60, largest61, largest62, largest63, largest64,\
    \ largest65, largest66, largest67, largest68, largest69, largest70, largest71,\
    \ largest72, largest73, largest74, largest75, largest76, largest77, largest78,\
    \ largest79, largest80, largest81, largest82, largest83, largest84, largest85,\
    \ largest86, largest87, largest88, largest89, largest90, largest91, largest92,\
    \ largest93, largest94, largest95, largest96, largest97, largest98, largest99,\
    \ largest100})\n  local largest, largest2, largest3, largest4, largest5, largest6,\
    \ largest7, largest8, largest9, largest10, largest11, largest12, largest13, largest14,\
    \ largest15, largest16, largest17, largest18, largest19, largest20, largest21,\
    \ largest22, largest23, largest24, largest25, largest26, largest27, largest28,\
    \ largest29, largest30, largest31, largest32, largest33, largest34, largest35,\
    \ largest36, largest37, largest38, largest39, largest40, largest41, largest42,\
    \ largest43, largest44, largest45, largest46, largest47, largest48, largest49,\
    \ largest50, largest51, largest52, largest53, largest54, largest55, largest56,\
    \ largest", "  local largest, largestPrime = 0, nil\n  for i = 1, #lst do\n  \
    \  local prime, primePrime = primeFactors(lst[i])\n    if prime > largestPrime\
    \ then\n      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ + largest\nend", "    local largest = nil\n    local sum = 0\n    for _, v in\
    \ ipairs(lst) do\n        if largest == nil then\n            largest = v\n  \
    \      elseif largest < v then\n            largest = v\n        end\n       \
    \ sum = sum + v\n    end\n    return sum\nend", "  local largest, largestNum,\
    \ largestNumNum = 0, 0, 0\n  for _, v in ipairs(lst) do\n    if v > largestNumNum\
    \ then\n      largestNumNum, largestNum = v, largestNumNum\n    elseif v > largestNum\
    \ then\n      largestNum, largestNumNum = v, largestNumNum\n    end\n  end\n \
    \ return largestNumNum\nend", "  local largest, largestIndex\n  for i = 1, #lst\
    \ do\n    if lst[i] == largestIndex then\n      largest = largest\n    elseif\
    \ lst[i] == largestIndex then\n      largest = largest\n    elseif lst[i] > largest\
    \ then\n      largest = lst[i]\n      largestIndex = i\n    end\n  end\n  return\
    \ largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ local prime = primes[lst[i]]\n    if prime > max then\n      max = prime\n \
    \     sum = sum + prime\n    end\n  end\n  return sum\nend", "  local largest\
    \ = nil\n  local sum = 0\n  for i = 1, #lst do\n    if largest == nil then\n \
    \     largest = lst[i]\n      sum = lst[i]\n    else\n      if largest < lst[i]\
    \ then\n        largest = lst[i]\n        sum = sum + largest\n      else\n  \
    \      largest = largest * 10 + lst[i]\n        sum = sum + largest\n      end\n\
    \    end\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > max then\n\
    \      max = prime\n      sum = sum + prime\n    end\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n    if lst[i] == max then\n      sum = sum + lst[i]\n\
    \    end\n  end\n  return sum\nend", "  local largest, largestIndex, largestSum\
    \ = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst do\n\
    \      if lst[j] == i then\n        sum = sum + j\n      end\n    end\n    if\
    \ sum > largestSum then\n      largestSum = sum\n      largestIndex = i\n    \
    \  largest = i\n    end\n  end\n  return largestSum + largest\nend", "  local\
    \ largest, largestPrime = 0, nil\n  for i = 2, #lst do\n    local prime, primePrime\
    \ = 2, i\n    while prime <= primePrime do\n      local isPrime = true\n     \
    \ for j = 2, primePrime do\n        if prime % j == 0 then\n          isPrime\
    \ = false\n          break\n        end\n      end\n      if isPrime then\n  \
    \      largestPrime = primePrime\n        largest = prime\n      end\n      prime\
    \ = prime + 1\n    end\n  end\n  return largest * largestPrime\nend", "  local\
    \ max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if\
    \ n > max then\n      max = n\n    end\n    if n % 2 == 0 then\n      sum = sum\
    \ + math.floor(n / 2)\n    end\n  end\n  return sum + max\nend", "  local largest\
    \ = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime = prime_number(lst[i])\n\
    \    if prime > largest then\n      largest = prime\n    end\n    sum = sum +\
    \ lst[i]\n  end\n  return sum + largest\nend", "  local largest = lst[1]\n  for\
    \ i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \  end\n  local sum = 0\n  for i = 2, #lst do\n    if lst[i] == largest then\n\
    \      sum = sum + i\n    end\n  end\n  return sum\nend", "  local max = 0\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    if v > max then\n      max\
    \ = v\n    end\n    sum = sum + v\n  end\n  return sum\nend", "  local largest\
    \ = nil\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if largest == nil\
    \ then\n      largest = v\n    else\n      if v > largest then\n        largest\
    \ = v\n      end\n    end\n  end\n  for _, v in ipairs(lst) do\n    if v == largest\
    \ then\n      sum = sum + v\n    end\n  end\n  return sum\nend", "  local largest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return largest\nend", "  local max = 0\n  local\
    \ sum = 0\n  for _, v in ipairs(lst) do\n    if v > max then\n      max = v\n\
    \    end\n    sum = sum + v\n  end\n  return sum\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n    sum = sum + math.floor(math.log10(max))\n  end\n  return sum\nend",
  "  local largest = nil\n  local sum = 0\n  for i = 1, #lst do\n    local prime =\
    \ prime_of(lst[i])\n    if prime > largest then\n      largest = prime\n     \
    \ sum = sum + prime\n    end\n  end\n  return sum\nend", "  local largest, largestIndex,\
    \ largestSum = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1,\
    \ 10 do\n      if lst[i] % j == 0 then\n        sum = sum + j\n      end\n   \
    \ end\n    if sum > largestSum then\n      largest, largestIndex, largestSum =\
    \ sum, i, sum\n    end\n  end\n  return largestSum\nend", "  local max = 0\n \
    \ local sum = 0\n  for _, v in ipairs(lst) do\n    if v > max then\n      max\
    \ = v\n    end\n    sum = sum + v\n  end\n  return sum\nend", "  local max = 0\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n   \
    \ if prime > max then\n      max = prime\n      sum = 0\n    end\n    sum = sum\
    \ + lst[i]\n  end\n  return sum + max\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \    if lst[i] > 0 and lst[i] % max == 0 then\n      sum = sum + lst[i] % max\n\
    \    end\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ _, v in ipairs(lst) do\n    if v > max then\n      max = v\n    end\n    sum\
    \ = sum + v\n  end\n  return sum\nend", "    local largest, largestPrime = 0,\
    \ nil\n    for i = 2, #lst do\n        local prime = primes[i]\n        if prime\
    \ == nil then\n            largestPrime = nil\n        elseif prime > largestPrime\
    \ then\n            largestPrime = prime\n            largest = i\n        end\n\
    \    end\n    if largestPrime == nil then\n        return nil\n    end\n    local\
    \ sum = 0\n    for i = 2, largestPrime do\n        if lst[i] > 0 then\n      \
    \      sum = sum + lst[i]\n        end\n    end\n    return sum\nend", "    local\
    \ largest, sum = 0, 0\n    for i = 1, #lst do\n        local prime, sum = 0, 0\n\
    \        for j = 2, #lst do\n            if lst[j] % i == 0 then\n           \
    \     prime = i\n                sum = sum + lst[j]\n                break\n \
    \           end\n        end\n        if prime > largest then\n            largest\
    \ = prime\n            sum = sum + prime\n        end\n    end\n    return sum\n\
    end", "  local largest, largestPrime = 0, 0\n  for i = 1, #lst do\n    local prime\
    \ = primeFactor(lst[i])\n    if prime > largestPrime then\n      largest, largestPrime\
    \ = i, prime\n    end\n  end\n  return largestPrime * largest\nend", "  local\
    \ largest, largestPrime = nil, false\n  for i = 1, #lst do\n    if largestPrime\
    \ then\n      if lst[i] > largestPrime then\n        largest = largestPrime\n\
    \      else\n        largestPrime = false\n      end\n    else\n      largestPrime\
    \ = true\n      largest = lst[i]\n    end\n  end\n  return largest\nend", "  local\
    \ max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n \
    \     max = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] == max\
    \ then\n      sum = sum + math.floor(math.abs(lst[i]/max))\n    end\n  end\n \
    \ return sum\nend", "    local max = 0\n    local sum = 0\n    for _, v in ipairs(lst)\
    \ do\n        if v > max then\n            max = v\n        end\n        sum =\
    \ sum + v\n    end\n    return sum\nend", "    local largest, largest2, largest3,\
    \ largest4, largest5, largest6 = 0, 0, 0, 0, 0, 0\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if lst[i] > largest6 then\n            largest6 = lst[i]\n\
    \        end\n        if lst[i] > largest5 then\n            largest5 = lst[i]\n\
    \        end\n        if lst[i] > largest4 then\n            largest4 = lst[i]\n\
    \        end\n        if lst[i] > largest3 then\n            largest3 = lst[i]\n\
    \        end\n        if lst[i] > largest2 then\n            largest2 = lst[i]\n\
    \        end\n        if lst[i] > largest then\n            largest = lst[i]\n\
    \        end\n        sum = sum + lst[i]\n    end\n    return largest, sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend", "    local\
    \ largest = 0\n    local largestIndex = 0\n    for i = 1, #lst do\n        if\
    \ lst[i] > largest then\n            largest = lst[i]\n            largestIndex\
    \ = i\n        end\n    end\n    local sum = 0\n    for i = 1, #lst do\n     \
    \   if lst[i] == largest then\n            sum = sum + largest\n        end\n\
    \    end\n    return sum\nend", "  local largest = 0\n  local sum = 0\n  for i\
    \ = 1, #lst do\n    local num = lst[i]\n    if num > largest then\n      largest\
    \ = num\n    end\n    if largest%num == 0 then\n      sum = sum + num\n    end\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    local num = lst[i]\n    if num > 0 then\n      local prime = primes[num]\
    \ or primes[num + 1]\n      if prime > 0 then\n        sum = sum + prime\n   \
    \     if sum > max then\n          max = sum\n        end\n      end\n    end\n\
    \  end\n  return max\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    if lst[i] > 0\
    \ and lst[i] % max == 0 then\n      sum = sum + math.floor(lst[i] / max)\n   \
    \ end\n  end\n  return sum\nend", "  local largest, largestPrime = 0, nil\n  for\
    \ i = 1, #lst do\n    local prime = primeFactor(lst[i])\n    if prime > largestPrime\
    \ then\n      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ * largest\nend", "  local largest, sum = 0, 0\n  for i = 1, #lst do\n    if\
    \ largest * 10 + lst[i] > largest * 10 then\n      largest = lst[i]\n    end\n\
    \  end\n  for i = 1, #lst do\n    sum = sum + math.floor(math.abs(lst[i]) / largest)\
    \ * largest\n  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    sum\
    \ = sum + math.floor(math.log10(max))\n  end\n  return sum\nend", "  local max\
    \ = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n     \
    \ max = lst[i]\n    end\n  end\n  for i = 1, #lst do\n    if lst[i] == max then\n\
    \      sum = sum + math.floor(math.abs(lst[i]/max))\n    end\n  end\n  return\
    \ sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    local prime, n = prime(lst[i])\n    if prime > max then\n      max =\
    \ prime\n      sum = sum + n\n    end\n  end\n  return sum\nend", "  local largest,\
    \ largestIndex, largestSum = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n\
    \    for j = 1, #lst[i] do\n      sum = sum + lst[i][j]\n    end\n    if sum >\
    \ largestSum then\n      largestSum = sum\n      largestIndex = i\n      largest\
    \ = sum\n    end\n  end\n  return largestSum + largest\nend", "    local max =\
    \ 0\n    local sum = 0\n    for i = 1, #lst do\n        local n = lst[i]\n   \
    \     if n > max then\n            max = n\n        end\n        sum = sum + math.floor(math.log10(n))\n\
    \    end\n    return sum + max\nend", "  local max = 0\n  local sum = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n    if\
    \ lst[i] == max then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\n\
    end", "  local largest, largestPrime = 0, nil\n  for i = 2, #lst do\n    local\
    \ prime, primePrime = 2, 1\n    while prime <= #lst and prime % primePrime ==\
    \ 0 do\n      primePrime = primePrime + 1\n      prime = prime + 1\n    end\n\
    \    if prime > largestPrime then\n      largestPrime, largest = prime, i - 1\n\
    \    end\n  end\n  return largestPrime + largest\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n    sum = sum + math.floor(math.log10(max))\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime, num =\
    \ prime_number(lst[i])\n    if prime > max then\n      max = prime\n      sum\
    \ = num\n    end\n  end\n  return sum\nend", "    local max = 0\n    local sum\
    \ = 0\n    for i = 1, #lst do\n        local num = lst[i]\n        if num > 0\
    \ then\n            local prime = prime_of(num)\n            if prime > max then\n\
    \                max = prime\n                sum = sum + num\n            end\n\
    \        end\n    end\n    return sum\nend", "  local max = 0\n  local sum = 0\n\
    \  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n    end\n\
    \    sum = sum + math.floor(math.log10(max))\n  end\n  return sum\nend", "  local\
    \ largest = nil\n  local sum = 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime == nil then\n      largest = lst[i]\n      sum = sum + lst[i]\n\
    \    else\n      if prime > largest then\n        largest = prime\n        sum\
    \ = sum + prime\n      end\n    end\n  end\n  return sum\nend", "  local max =\
    \ 0\n  local sum = 0\n  for _, v in ipairs(lst) do\n    if v > max then\n    \
    \  max = v\n    end\n    sum = sum + v\n  end\n  return sum\nend", "  local largest,\
    \ largestPrime, largestSum = 0, 0, 0\n  for i = 1, #lst do\n    local prime, sum\
    \ = 0, 0\n    for j = 2, #lst do\n      if lst[j] % i == 0 then\n        sum =\
    \ sum + lst[j] % i\n        prime = i\n      end\n    end\n    if prime > largestPrime\
    \ then\n      largestPrime, largestSum = prime, sum\n    end\n  end\n  return\
    \ largestSum\nend", "  local largest, largestIndex, largestSum = 0, 0, 0\n  for\
    \ i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n      if j > largestIndex\
    \ then\n        largestIndex = j\n        largestSum = sum\n      end\n      sum\
    \ = sum + lst[i][j]\n    end\n    if largestSum > largestIndex then\n      largest\
    \ = largestSum\n      largestIndex = largestIndex\n    end\n  end\n  return largest\n\
    end", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] >\
    \ max then\n      max = lst[i]\n    end\n    if lst[i] == max then\n      sum\
    \ = sum + lst[i]\n    end\n  end\n  return sum\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n    sum = sum + math.floor(math.log10(max))\n  end\n  return sum\nend",
  "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n\
    \      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n  end\n\
    \  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    local prime = primes[lst[i]]\n    if prime > max then\n      max = prime\n\
    \      sum = 0\n    end\n    sum = sum + prime % 10\n  end\n  return sum\nend",
  "  local largest = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime = prime_check(lst[i])\n\
    \    if prime > largest then\n      largest = prime\n      sum = sum + prime %\
    \ 10\n    end\n  end\n  return sum\nend", "  local largest, largestIndex, largestSum\
    \ = 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n\
    \      sum = sum + lst[i][j]\n    end\n    if sum > largestSum then\n      largest,\
    \ largestIndex, largestSum = sum, i, sum\n    end\n  end\n  return largestSum\n\
    end", "  local largest = 0\n  local sum = 0\n  for i = 1, #lst do\n    local prime\
    \ = prime_of(lst[i])\n    if prime > largest then\n      largest = prime\n   \
    \   sum = sum + prime\n    end\n  end\n  return sum\nend", "  local max = 0\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local prime, num = prime_number(lst[i])\n\
    \    if prime > max then\n      max = prime\n      sum = sum + num\n    end\n\
    \  end\n  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] > max then\n      max = lst[i]\n    end\n  end\n  for i =\
    \ 1, #lst do\n    if lst[i] > max then\n      sum = sum + lst[i]\n    end\n  end\n\
    \  return sum\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local largest = nil\n  local sum = 0\n  for i =\
    \ 1, #lst do\n    if largest == nil then\n      largest = lst[i]\n      sum =\
    \ lst[i]\n    elseif largest < lst[i] then\n      largest = lst[i]\n      sum\
    \ = sum + largest\n    end\n  end\n  return sum\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] == max then\n      sum =\
    \ sum + math.floor(math.abs(lst[i]/max))\n    end\n  end\n  return sum\nend",
  "  local largest = nil\n  local sum = 0\n  for i = 1, #lst do\n    local prime =\
    \ prime_number(lst[i])\n    if prime > largest then\n      largest = prime\n \
    \     sum = sum + prime\n    end\n  end\n  return sum\nend", "  local max = 0\n\
    \  local sum = 0\n  for i = 1, #lst do\n    local n = lst[i]\n    if n > max then\n\
    \      max = n\n    end\n    sum = sum + math.floor(math.log10(n))\n  end\n  return\
    \ sum + max\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n \
    \   if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
