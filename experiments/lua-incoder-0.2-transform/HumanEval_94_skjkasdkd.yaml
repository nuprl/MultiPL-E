name: HumanEval_94_skjkasdkd
language: lua
prompt: "-- You are given a list of integers.\n-- You need to find the largest prime\
  \ value and return the sum of its digits.\n-- Examples:\n-- >>> skjkasdkd({0, 3,\
  \ 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3})\n-- 10\n--\
  \ >>> skjkasdkd({1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1})\n--\
  \ 25\n-- >>> skjkasdkd({1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30,\
  \ 1, 9, 3})\n-- 13\n-- >>> skjkasdkd({0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0,\
  \ 5, 6})\n-- 11\n-- >>> skjkasdkd({0, 81, 12, 3, 1, 21})\n-- 3\n-- >>> skjkasdkd({0,\
  \ 8, 1, 2, 1, 7})\n-- 7\nlocal function skjkasdkd(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = skjkasdkd\n\
  \    lu.assertEquals(candidate({0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4,\
  \ 32, 3, 2, 32, 324, 4, 3}), 10)\n    lu.assertEquals(candidate({1, 0, 1, 8, 2,\
  \ 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1}), 25)\n    lu.assertEquals(candidate({1,\
  \ 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3}), 13)\n    lu.assertEquals(candidate({0,\
  \ 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6}), 11)\n    lu.assertEquals(candidate({0,\
  \ 81, 12, 3, 1, 21}), 3)\n    lu.assertEquals(candidate({0, 8, 1, 2, 1, 7}), 7)\n\
  \    lu.assertEquals(candidate({8191}), 19)\n    lu.assertEquals(candidate({8191,\
  \ 123456, 127, 7}), 19)\n    lu.assertEquals(candidate({127, 97, 8192}), 10)\nend\n\
  \nos.exit(lu.LuaUnit.run())"
completions: ["  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "    local max = 0\n    local sum = 0\n    for _,\
    \ v in ipairs(lst) do\n        if v > max then\n            max = v\n        end\n\
    \        sum = sum + v\n    end\n    return sum\nend", "    local max = 0\n  \
    \  local sum = 0\n    for i = 1, #lst do\n        local n = lst[i]\n        if\
    \ n > max then\n            max = n\n        end\n        sum = sum + math.floor(n)\n\
    \    end\n    return sum\nend", "  local largest = 0\n  local sum = 0\n  for i\
    \ = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largest then\n\
    \      largest = prime\n    end\n    sum = sum + prime % 10\n  end\n  return sum\n\
    end", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    if lst[i] >\
    \ max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local largest, largest2, largest3, largest4, largest5,\
    \ largest6, largest7, largest8, largest9, largest10, largest11, largest12, largest13,\
    \ largest14, largest15, largest16, largest17, largest18, largest19, largest20,\
    \ largest21, largest22, largest23, largest24, largest25, largest26, largest27,\
    \ largest28, largest29, largest30, largest31, largest32, largest33, largest34,\
    \ largest35, largest36, largest37, largest38, largest39, largest40, largest41,\
    \ largest42, largest43, largest44, largest45, largest46, largest47, largest48,\
    \ largest49, largest50, largest51, largest52, largest53, largest54, largest55,\
    \ largest56, largest57, largest58, largest59, largest60, largest61, largest62,\
    \ largest63, largest64, largest65, largest66, largest67, largest68, largest69,\
    \ largest70, largest71, largest72, largest73, largest74, largest75, largest76,\
    \ largest77, largest78, largest79, largest80, largest81, largest82, largest83,\
    \ largest84, largest85, largest86, largest87, largest88, largest89, largest90,\
    \ largest91, largest92, largest93, largest94, largest95, largest96, largest97,\
    \ largest98, largest99, largest100})\n  local largest, largest2, largest3, largest4,\
    \ largest5, largest6, largest7, largest8, largest9, largest10, largest11, largest12,\
    \ largest13, largest14, largest15, largest16, largest17, largest18, largest19,\
    \ largest20, largest21, largest22, largest23, largest24, largest25, largest26,\
    \ largest27, largest28, largest29, largest30, largest31, largest32, largest33,\
    \ largest34, largest35, largest36, largest37, largest38, largest39, largest40,\
    \ largest41, largest42, largest43, largest44, largest45, largest46, largest47,\
    \ largest48, largest49, largest50, largest51, largest52, largest53, largest54,\
    \ largest55, largest56, largest", "  local largest, largestIndex, largestSum =\
    \ 0, 0, 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n\
    \      sum = sum + lst[i][j]\n    end\n    if sum > largestSum then\n      largestSum\
    \ = sum\n      largestIndex = i\n      largest = sum\n    end\n  end\n  return\
    \ largestSum + largest\nend", "  local max = 0\n  local sum = 0\n  for _, v in\
    \ ipairs(lst) do\n    if v > max then\n      max = v\n    end\n    sum = sum +\
    \ v\n  end\n  return sum\nend", "  local largest = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return\
    \ largest\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] > max then\n      max = lst[i]\n    end\n    sum = sum + math.floor(math.log10(max))\n\
    \  end\n  return sum\nend", "  local largest, largestIndex, largestSum = 0, 0,\
    \ 0\n  for i = 1, #lst do\n    local sum = 0\n    for j = 1, #lst[i] do\n    \
    \  if lst[i][j] ~= largestIndex then\n        sum = sum + lst[i][j]\n      else\n\
    \        largestSum = sum\n        largestIndex = lst[i][j]\n      end\n    end\n\
    \  end\n  return largestSum\nend", "  local largest, largestPrime = 0, 0\n  for\
    \ i = 1, #lst do\n    local prime = primes[lst[i]]\n    if prime > largestPrime\
    \ then\n      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ * largest\nend", "  local largest = 0\n  local sum = 0\n  for i = 1, #lst do\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n    sum = sum\
    \ + math.floor(math.log10(largest))\n  end\n  return sum\nend", "  local largest\
    \ = 0\n  local largestSum = 0\n  for i = 1, #lst do\n    local sum = 0\n    for\
    \ j = 1, #lst[i] do\n      if j > largestSum then\n        largestSum = j\n  \
    \      largest = i\n      end\n      sum = sum + lst[i][j]\n    end\n    if sum\
    \ > largestSum then\n      largestSum = sum\n      largest = i\n    end\n  end\n\
    \  return largestSum\nend", "  local largest, largestPrime, largestSum, largestSumDigits,\
    \ largestSumDigit\n  local sum = 0\n  for i = 1, #lst do\n    local prime = primes[lst[i]]\n\
    \    if prime ~= nil then\n      if prime > largestPrime then\n        largestPrime\
    \ = prime\n        largestSumDigits = sum\n        largestSum = lst[i]\n     \
    \ else\n        largestPrime = nil\n        largestSumDigits = nil\n        largestSum\
    \ = nil\n      end\n    end\n    sum = sum + lst[i]\n  end\n  if largestSumDigits\
    \ ~= nil then\n    return largestSumDigits + largestSum\n  else\n    return largestSum\n\
    \  end\nend", "  local max = 0\n  local sum = 0\n  for i = 1, #lst do\n    local\
    \ num = lst[i]\n    if num > 0 then\n      local prime = primes[num] or primes[math.floor(num\
    \ / 2)] or primes[math.floor(math.sqrt(num))] or primes[num]\n      if prime >\
    \ max then\n        max = prime\n        sum = 0\n      end\n      sum = sum +\
    \ num % prime\n    end\n  end\n  return sum + max\nend", "  local max = 0\n  local\
    \ sum = 0\n  for i = 1, #lst do\n    if lst[i] > max then\n      max = lst[i]\n\
    \    end\n  end\n  for i = 1, #lst do\n    if lst[i] > max then\n      sum = sum\
    \ + math.floor(math.abs(lst[i] - max) / 10)\n    end\n  end\n  return sum\nend",
  "    local max = 0\n    local sum = 0\n    for _, v in ipairs(lst) do\n        if\
    \ v > max then\n            max = v\n        end\n        sum = sum + v\n    end\n\
    \    return sum\nend", "  local max = 0\n  local sum = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v > max then\n      max = v\n    end\n    sum = sum + v\n  end\n\
    \  return sum\nend", "  local largest, largestPrime = 0, nil\n  for i = 1, #lst\
    \ do\n    local prime = primeFactor(lst[i])\n    if prime > largestPrime then\n\
    \      largest, largestPrime = i, prime\n    end\n  end\n  return largestPrime\
    \ + largest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
