language: lua
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowel_found = false\n  local vowel_position = -1\n  local vowel_position2 =\
    \ -1\n  local vowel_position3 = -1\n  local vowel_position4 = -1\n  local vowel_position5\
    \ = -1\n  local vowel_position6 = -1\n  local vowel_position7 = -1\n  local vowel_position8\
    \ = -1\n  local vowel_position9 = -1\n  local vowel_position10 = -1\n  local vowel_position11\
    \ = -1\n  local vowel_position12 = -1\n  local vowel_position13 = -1\n  local\
    \ vowel_position14 = -1\n  local vowel_position15 = -1\n  local vowel_position16\
    \ = -1\n  local vowel_position17 = -1\n  local vowel_position18 = -1\n  local\
    \ vowel_position19 = -1\n  local vowel_position20 = -1\n  local vowel_position21\
    \ = -1\n  local vowel_position22 = -1\n  local vowel_position23 = -1\n  local\
    \ vowel_position24 = -1\n  local vowel_position25 = -1\n  local vowel_position26\
    \ = -1\n  local vowel_position27 = -1\n  local vowel_position28 = -1\n  local\
    \ vowel_position29 = -1\n  local vowel_position30 = -1\n  local vowel_position31\
    \ = -1\n  local vowel_position32 = -1\n  local vowel_position33 = -1\n  local\
    \ vowel_position34 = -1\n  local vowel_position35 = -1\n  local vowel_position36\
    \ = -1\n  local vowel_position37 = -1\n  local vowel_position38 = -1\n  local\
    \ vowel_position39 = -1\n  local vowel_position40 = -1\n  local vowel_position41\
    \ = -1\n  local vowel_position42 = -1\n  local vowel_position43 = -1\n  local\
    \ vowel_position44 = -1\n  local vowel_position45 = -1\n  local vowel_position46\
    \ = -1\n  local vowel_position47 = -1\n  local vowel_position48 = -1\n  local\
    \ vowel_position49 = -1\n  local vowel_position50 = -1\n  local vowel_position51\
    \ = -1\n  local vowel_position52 = -1\n  local vowel_position53 = -1\n  local\
    \ vowel_position54 = -1\n  local vowel_position55 = -1\n  local vowel_position56\
    \ = -1\n  local vowel_position57 = -1\n  local vowel_position58 = -1\n  local\
    \ vowel_position59 = -1\n  local vowel_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppz0zlta4.lua:97: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_index_count_max\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_et5_pyo.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance\
    \ = nil\n  for i = #word, 2, -1 do\n    if vowel_found then\n      break\n   \
    \ end\n    if word[i] == 'a' then\n      vowel_start = i\n      vowel_found =\
    \ true\n    end\n    if word[i] == 'e' then\n      vowel_end = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'i' then\n      vowel_start = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'o' then\n      vowel_end = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'u' then\n      vowel_start = i\n      vowel_found\
    \ = true\n    end\n  end\n  if vowel_found then\n    vowel_distance = vowel_end\
    \ - vowel_start + 1\n  end\n  if vowel_distance then\n    local vowel_found =\
    \ false\n    for i = #word, 2, -1 do\n      if word[i] == 'a' then\n        vowel_start\
    \ = i\n        vowel_found = true\n      end\n      if word[i] == 'e' then\n \
    \       vowel_end = i\n        vowel_found = true\n      end\n      if word[i]\
    \ == 'i' then\n        vowel_start = i\n        vowel_found = true\n      end\n\
    \      if word[i] == 'o' then\n        vowel_end = i\n        vowel_found = true\n\
    \      end\n      if word[i] == 'u' then\n        vowel_start = i\n        vowel_found\
    \ = true\n      end\n      if vowel_found then\n        break\n      end\n   \
    \ end\n  end\n  if vowel_found then\n    return word[vowel_start + vowel_distance]\n\
    \  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zcqpsxr.lua:86:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_zcqpsxr.lua:86:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnw2ivmy1.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = vowels_count +\
    \ 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6i7imqlp.lua:71: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count2 = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4\
    \ = 0\n\tlocal vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal\
    \ vowels_index_count7 = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9\
    \ = 0\n\tlocal vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\t\
    local vowels_index_count12 = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14\
    \ = 0\n\tlocal vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\t\
    local vowels_index_count17 = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19\
    \ = 0\n\tlocal vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\t\
    local vowels_index_count22 = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24\
    \ = 0\n\tlocal vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\t\
    local vowels_index_count27 = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29\
    \ = 0\n\tlocal vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\t\
    local vowels_index_count32 = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34\
    \ = 0\n\tlocal vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\t\
    local vowels_index_count37 = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39\
    \ = 0\n\tlocal vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\t\
    local vowels_index_count42 = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44\
    \ = 0\n\tlocal vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\t\
    local vowels_index_count47 = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49\
    \ = 0\n\tlocal vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\t\
    local vowels_index_count52 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mzjs4fb.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpchrh6ody.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_count_end = 0\n    local vowels_count_start = 0\n    local vowels_count_start_end\
    \ = 0\n    local vowels_count_start_end_count = 0\n    local vowels_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end = 0\n    local vowels_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_end = 0\n    local\
    \ vowels_count_start_end_count_start_end_count_start_end = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk4u0o21d.lua:63: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_2\
    \ = 1\n    local vowels_index_count_3 = 1\n    local vowels_index_count_4 = 1\n\
    \    local vowels_index_count_5 = 1\n    local vowels_index_count_6 = 1\n    local\
    \ vowels_index_count_7 = 1\n    local vowels_index_count_8 = 1\n    local vowels_index_count_9\
    \ = 1\n    local vowels_index_count_10 = 1\n    local vowels_index_count_11 =\
    \ 1\n    local vowels_index_count_12 = 1\n    local vowels_index_count_13 = 1\n\
    \    local vowels_index_count_14 = 1\n    local vowels_index_count_15 = 1\n  \
    \  local vowels_index_count_16 = 1\n    local vowels_index_count_17 = 1\n    local\
    \ vowels_index_count_18 = 1\n    local vowels_index_count_19 = 1\n    local vowels_index_count_20\
    \ = 1\n    local vowels_index_count_21 = 1\n    local vowels_index_count_22 =\
    \ 1\n    local vowels_index_count_23 = 1\n    local vowels_index_count_24 = 1\n\
    \    local vowels_index_count_25 = 1\n    local vowels_index_count_26 = 1\n  \
    \  local vowels_index_count_27 = 1\n    local vowels_index_count_28 = 1\n    local\
    \ vowels_index_count_29 = 1\n    local vowels_index_count_30 = 1\n    local vowels_index_count_31\
    \ = 1\n    local vowels_index_count_32 = 1\n    local vowels_index_count_33 =\
    \ 1\n    local vowels_index_count_34 = 1\n    local vowels_index_count_35 = 1\n\
    \    local vowels_index_count_36 = 1\n    local vowels_index_count_37 = 1\n  \
    \  local vowels_index_count_38 = 1\n    local vowels_index_count_39 = 1\n    local\
    \ vowels_index_count_40 = 1\n    local vowels_index_count_41 = 1\n    local vowels_index_count_42\
    \ = 1\n    local vowels_index_count_43 = 1\n    local vowels_index_count_44 =\
    \ 1\n    local vowels_index_count_45 = 1\n    local vowels_index_count_46 = 1\n\
    \    local vowels_index_count_47 = 1\n    local vowels_index_count_48 = 1\n  \
    \  local vowels_index_count_49 = 1\n    local vowels_index_count_50 = 1\n    local\
    \ vowels_index_count_51 = 1\n    local vowels_index_count_52 = 1\n    local vowels_index_count_53\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpwuz9ni.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_counter = 0\n\tlocal\
    \ vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\
    \tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqhm61nq2.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_vowel = 0\n  local vowels_index_min_vowel\
    \ = 0\n  local vowels_index_max_vowel_count = 0\n  local vowels_index_min_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\
    \  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5j_1maoi.lua:72: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  local vowels_index_count = 0\n  for\
    \ i = 1, #word do\n    local letter = word[i]\n    if letter:sub(1,1) == 'a' then\n\
    \      vowels_index[letter] = true\n      vowels_index_count = vowels_index_count\
    \ + 1\n    end\n  end\n  local vowels_index_length = #vowels_index\n  local vowels_index_index_length\
    \ = #vowels_index\n  local vowels_index_index_count = 0\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu_1b_63e.lua:79: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowel_found = false\n  local vowel_start = 0\n  local vowel_end = 0\n  local\
    \ vowel_length = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local\
    \ vowel_end = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local\
    \ vowel_start = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found\
    \ = false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzwi_rjz0.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = #word\n  local vowels_index2 = #word\n  local vowels_index3\
    \ = #word\n  local vowels_index4 = #word\n  local vowels_index5 = #word\n  local\
    \ vowels_index6 = #word\n  local vowels_index7 = #word\n  local vowels_index8\
    \ = #word\n  local vowels_index9 = #word\n  local vowels_index10 = #word\n  local\
    \ vowels_index11 = #word\n  local vowels_index12 = #word\n  local vowels_index13\
    \ = #word\n  local vowels_index14 = #word\n  local vowels_index15 = #word\n  local\
    \ vowels_index16 = #word\n  local vowels_index17 = #word\n  local vowels_index18\
    \ = #word\n  local vowels_index19 = #word\n  local vowels_index20 = #word\n  local\
    \ vowels_index21 = #word\n  local vowels_index22 = #word\n  local vowels_index23\
    \ = #word\n  local vowels_index24 = #word\n  local vowels_index25 = #word\n  local\
    \ vowels_index26 = #word\n  local vowels_index27 = #word\n  local vowels_index28\
    \ = #word\n  local vowels_index29 = #word\n  local vowels_index30 = #word\n  local\
    \ vowels_index31 = #word\n  local vowels_index32 = #word\n  local vowels_index33\
    \ = #word\n  local vowels_index34 = #word\n  local vowels_index35 = #word\n  local\
    \ vowels_index36 = #word\n  local vowels_index37 = #word\n  local vowels_index38\
    \ = #word\n  local vowels_index39 = #word\n  local vowels_index40 = #word\n  local\
    \ vowels_index41 = #word\n  local vowels_index42 = #word\n  local vowels_index43\
    \ = #word\n  local vowels_index44 = #word\n  local vowels_index45 = #word\n  local\
    \ vowels_index46 = #word\n  local vowels_index47 = #word\n  local vowels_index48\
    \ = #word\n  local vowels_index49 = #word\n  local vowels_index50 = #word\n  local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1cd_m36.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = #word\n  local vowels_index2 = #word\n  local\
    \ vowels_index3 = #word\n  local vowels_index4 = #word\n  local vowels_index5\
    \ = #word\n  local vowels_index6 = #word\n  local vowels_index7 = #word\n  local\
    \ vowels_index8 = #word\n  local vowels_index9 = #word\n  local vowels_index10\
    \ = #word\n  local vowels_index11 = #word\n  local vowels_index12 = #word\n  local\
    \ vowels_index13 = #word\n  local vowels_index14 = #word\n  local vowels_index15\
    \ = #word\n  local vowels_index16 = #word\n  local vowels_index17 = #word\n  local\
    \ vowels_index18 = #word\n  local vowels_index19 = #word\n  local vowels_index20\
    \ = #word\n  local vowels_index21 = #word\n  local vowels_index22 = #word\n  local\
    \ vowels_index23 = #word\n  local vowels_index24 = #word\n  local vowels_index25\
    \ = #word\n  local vowels_index26 = #word\n  local vowels_index27 = #word\n  local\
    \ vowels_index28 = #word\n  local vowels_index29 = #word\n  local vowels_index30\
    \ = #word\n  local vowels_index31 = #word\n  local vowels_index32 = #word\n  local\
    \ vowels_index33 = #word\n  local vowels_index34 = #word\n  local vowels_index35\
    \ = #word\n  local vowels_index36 = #word\n  local vowels_index37 = #word\n  local\
    \ vowels_index38 = #word\n  local vowels_index39 = #word\n  local vowels_index40\
    \ = #word\n  local vowels_index41 = #word\n  local vowels_index42 = #word\n  local\
    \ vowels_index43 = #word\n  local vowels_index44 = #word\n  local vowels_index45\
    \ = #word\n  local vowels_index46 = #word\n  local vowels_index47 = #word\n  local\
    \ vowels_index48 = #word\n  local vowels_index49 = #word\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6e4kfrzd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjqvjw_4x.lua:83: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 1\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max = 1\n  local vowels_index_count_max_index_count_min\
    \ = 0\n  local vowels_index_count_max_index_count_min_index = 1\n  local vowels_index_count_max_index_count_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_count = 0\n  local\
    \ vowels_index_count_max_index_count_max_index_count_max = 1\n  local vowels_index_count_max_index_count_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_min_index = 1\n  local\
    \ vowels_index_count_max_index_count_max_index_max_index = 1\n  local vowels_index_count_max_index_count_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_min = 0\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_min_index = 1\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_max_index = 1\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpylamf24p.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqdfahgw8.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnirdrkrh.lua:90: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7wsa357.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
