language: lua
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowel_found = false\n  local vowel_position = -1\n  local vowel_position2 =\
    \ -1\n  local vowel_position3 = -1\n  local vowel_position4 = -1\n  local vowel_position5\
    \ = -1\n  local vowel_position6 = -1\n  local vowel_position7 = -1\n  local vowel_position8\
    \ = -1\n  local vowel_position9 = -1\n  local vowel_position10 = -1\n  local vowel_position11\
    \ = -1\n  local vowel_position12 = -1\n  local vowel_position13 = -1\n  local\
    \ vowel_position14 = -1\n  local vowel_position15 = -1\n  local vowel_position16\
    \ = -1\n  local vowel_position17 = -1\n  local vowel_position18 = -1\n  local\
    \ vowel_position19 = -1\n  local vowel_position20 = -1\n  local vowel_position21\
    \ = -1\n  local vowel_position22 = -1\n  local vowel_position23 = -1\n  local\
    \ vowel_position24 = -1\n  local vowel_position25 = -1\n  local vowel_position26\
    \ = -1\n  local vowel_position27 = -1\n  local vowel_position28 = -1\n  local\
    \ vowel_position29 = -1\n  local vowel_position30 = -1\n  local vowel_position31\
    \ = -1\n  local vowel_position32 = -1\n  local vowel_position33 = -1\n  local\
    \ vowel_position34 = -1\n  local vowel_position35 = -1\n  local vowel_position36\
    \ = -1\n  local vowel_position37 = -1\n  local vowel_position38 = -1\n  local\
    \ vowel_position39 = -1\n  local vowel_position40 = -1\n  local vowel_position41\
    \ = -1\n  local vowel_position42 = -1\n  local vowel_position43 = -1\n  local\
    \ vowel_position44 = -1\n  local vowel_position45 = -1\n  local vowel_position46\
    \ = -1\n  local vowel_position47 = -1\n  local vowel_position48 = -1\n  local\
    \ vowel_position49 = -1\n  local vowel_position50 = -1\n  local vowel_position51\
    \ = -1\n  local vowel_position52 = -1\n  local vowel_position53 = -1\n  local\
    \ vowel_position54 = -1\n  local vowel_position55 = -1\n  local vowel_position56\
    \ = -1\n  local vowel_position57 = -1\n  local vowel_position58 = -1\n  local\
    \ vowel_position59 = -1\n  local vowel_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppz0zlta4.lua:97: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_max\
    \ = #word - vowels_count + 1\n  local vowels_index_count_min = vowels_index_count_max\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n\
    \  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_et5_pyo.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowel_found\
    \ = false\n  local vowel_start = nil\n  local vowel_end = nil\n  local vowel_distance\
    \ = nil\n  for i = #word, 2, -1 do\n    if vowel_found then\n      break\n   \
    \ end\n    if word[i] == 'a' then\n      vowel_start = i\n      vowel_found =\
    \ true\n    end\n    if word[i] == 'e' then\n      vowel_end = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'i' then\n      vowel_start = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'o' then\n      vowel_end = i\n      vowel_found\
    \ = true\n    end\n    if word[i] == 'u' then\n      vowel_start = i\n      vowel_found\
    \ = true\n    end\n  end\n  if vowel_found then\n    vowel_distance = vowel_end\
    \ - vowel_start + 1\n  end\n  if vowel_distance then\n    local vowel_found =\
    \ false\n    for i = #word, 2, -1 do\n      if word[i] == 'a' then\n        vowel_start\
    \ = i\n        vowel_found = true\n      end\n      if word[i] == 'e' then\n \
    \       vowel_end = i\n        vowel_found = true\n      end\n      if word[i]\
    \ == 'i' then\n        vowel_start = i\n        vowel_found = true\n      end\n\
    \      if word[i] == 'o' then\n        vowel_end = i\n        vowel_found = true\n\
    \      end\n      if word[i] == 'u' then\n        vowel_start = i\n        vowel_found\
    \ = true\n      end\n      if vowel_found then\n        break\n      end\n   \
    \ end\n  end\n  if vowel_found then\n    return word[vowel_start + vowel_distance]\n\
    \  end\n  return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zcqpsxr.lua:86:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp_zcqpsxr.lua:86:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnw2ivmy1.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = vowels_count +\
    \ 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6i7imqlp.lua:71: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count2 = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4\
    \ = 0\n\tlocal vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal\
    \ vowels_index_count7 = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9\
    \ = 0\n\tlocal vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\t\
    local vowels_index_count12 = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14\
    \ = 0\n\tlocal vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\t\
    local vowels_index_count17 = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19\
    \ = 0\n\tlocal vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\t\
    local vowels_index_count22 = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24\
    \ = 0\n\tlocal vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\t\
    local vowels_index_count27 = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29\
    \ = 0\n\tlocal vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\t\
    local vowels_index_count32 = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34\
    \ = 0\n\tlocal vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\t\
    local vowels_index_count37 = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39\
    \ = 0\n\tlocal vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\t\
    local vowels_index_count42 = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44\
    \ = 0\n\tlocal vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\t\
    local vowels_index_count47 = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49\
    \ = 0\n\tlocal vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\t\
    local vowels_index_count52 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mzjs4fb.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = 1\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpchrh6ody.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_count_end = 0\n    local vowels_count_start = 0\n    local vowels_count_start_end\
    \ = 0\n    local vowels_count_start_end_count = 0\n    local vowels_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end = 0\n    local vowels_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_end = 0\n    local\
    \ vowels_count_start_end_count_start_end_count_start_end = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    local vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    local vowels_count_start_end_count_start_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk4u0o21d.lua:63: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_2\
    \ = 1\n    local vowels_index_count_3 = 1\n    local vowels_index_count_4 = 1\n\
    \    local vowels_index_count_5 = 1\n    local vowels_index_count_6 = 1\n    local\
    \ vowels_index_count_7 = 1\n    local vowels_index_count_8 = 1\n    local vowels_index_count_9\
    \ = 1\n    local vowels_index_count_10 = 1\n    local vowels_index_count_11 =\
    \ 1\n    local vowels_index_count_12 = 1\n    local vowels_index_count_13 = 1\n\
    \    local vowels_index_count_14 = 1\n    local vowels_index_count_15 = 1\n  \
    \  local vowels_index_count_16 = 1\n    local vowels_index_count_17 = 1\n    local\
    \ vowels_index_count_18 = 1\n    local vowels_index_count_19 = 1\n    local vowels_index_count_20\
    \ = 1\n    local vowels_index_count_21 = 1\n    local vowels_index_count_22 =\
    \ 1\n    local vowels_index_count_23 = 1\n    local vowels_index_count_24 = 1\n\
    \    local vowels_index_count_25 = 1\n    local vowels_index_count_26 = 1\n  \
    \  local vowels_index_count_27 = 1\n    local vowels_index_count_28 = 1\n    local\
    \ vowels_index_count_29 = 1\n    local vowels_index_count_30 = 1\n    local vowels_index_count_31\
    \ = 1\n    local vowels_index_count_32 = 1\n    local vowels_index_count_33 =\
    \ 1\n    local vowels_index_count_34 = 1\n    local vowels_index_count_35 = 1\n\
    \    local vowels_index_count_36 = 1\n    local vowels_index_count_37 = 1\n  \
    \  local vowels_index_count_38 = 1\n    local vowels_index_count_39 = 1\n    local\
    \ vowels_index_count_40 = 1\n    local vowels_index_count_41 = 1\n    local vowels_index_count_42\
    \ = 1\n    local vowels_index_count_43 = 1\n    local vowels_index_count_44 =\
    \ 1\n    local vowels_index_count_45 = 1\n    local vowels_index_count_46 = 1\n\
    \    local vowels_index_count_47 = 1\n    local vowels_index_count_48 = 1\n  \
    \  local vowels_index_count_49 = 1\n    local vowels_index_count_50 = 1\n    local\
    \ vowels_index_count_51 = 1\n    local vowels_index_count_52 = 1\n    local vowels_index_count_53\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbpwuz9ni.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_counter = 0\n\tlocal\
    \ vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\
    \tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqhm61nq2.lua:108: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_vowel = 0\n  local vowels_index_min_vowel\
    \ = 0\n  local vowels_index_max_vowel_count = 0\n  local vowels_index_min_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_count\
    \ = 0\n  local vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\
    \  local vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel = 0\n  local\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n  local\
    \ vowels_index_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5j_1maoi.lua:72: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  local vowels_index_count = 0\n  for\
    \ i = 1, #word do\n    local letter = word[i]\n    if letter:sub(1,1) == 'a' then\n\
    \      vowels_index[letter] = true\n      vowels_index_count = vowels_index_count\
    \ + 1\n    end\n  end\n  local vowels_index_length = #vowels_index\n  local vowels_index_index_length\
    \ = #vowels_index\n  local vowels_index_index_count = 0\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_max = #vowels_index\n  local vowels_index_index_count_min\
    \ = #vowels_index\n  local vowels_index_index_count_max = #vowels_index\n  local\
    \ vowels_index_index_count_min = #vowels_index\n  local vowels_index_index_count_max\
    \ = #vowels_index\n  local vowels_index_index_count_min = #vowels_index\n  local\
    \ vowels_index_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu_1b_63e.lua:79: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowel_found = false\n  local vowel_start = 0\n  local vowel_end = 0\n  local\
    \ vowel_length = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local\
    \ vowel_end = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local\
    \ vowel_start = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found\
    \ = false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local vowel_end = 0\n  local vowel_length = 0\n  local vowel_found =\
    \ false\n  local vowel_start = 0\n  local vowel_end = 0\n  local vowel_length\
    \ = 0\n  local vowel_found = false\n  local vowel_start = 0\n  local vowel_end\
    \ = 0\n  local vowel_length = 0\n  local vowel_found = false\n  local vowel_start\
    \ = 0\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzwi_rjz0.lua:107: ''end'' expected (to close ''function''
    at line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = #word\n  local vowels_index2 = #word\n  local vowels_index3\
    \ = #word\n  local vowels_index4 = #word\n  local vowels_index5 = #word\n  local\
    \ vowels_index6 = #word\n  local vowels_index7 = #word\n  local vowels_index8\
    \ = #word\n  local vowels_index9 = #word\n  local vowels_index10 = #word\n  local\
    \ vowels_index11 = #word\n  local vowels_index12 = #word\n  local vowels_index13\
    \ = #word\n  local vowels_index14 = #word\n  local vowels_index15 = #word\n  local\
    \ vowels_index16 = #word\n  local vowels_index17 = #word\n  local vowels_index18\
    \ = #word\n  local vowels_index19 = #word\n  local vowels_index20 = #word\n  local\
    \ vowels_index21 = #word\n  local vowels_index22 = #word\n  local vowels_index23\
    \ = #word\n  local vowels_index24 = #word\n  local vowels_index25 = #word\n  local\
    \ vowels_index26 = #word\n  local vowels_index27 = #word\n  local vowels_index28\
    \ = #word\n  local vowels_index29 = #word\n  local vowels_index30 = #word\n  local\
    \ vowels_index31 = #word\n  local vowels_index32 = #word\n  local vowels_index33\
    \ = #word\n  local vowels_index34 = #word\n  local vowels_index35 = #word\n  local\
    \ vowels_index36 = #word\n  local vowels_index37 = #word\n  local vowels_index38\
    \ = #word\n  local vowels_index39 = #word\n  local vowels_index40 = #word\n  local\
    \ vowels_index41 = #word\n  local vowels_index42 = #word\n  local vowels_index43\
    \ = #word\n  local vowels_index44 = #word\n  local vowels_index45 = #word\n  local\
    \ vowels_index46 = #word\n  local vowels_index47 = #word\n  local vowels_index48\
    \ = #word\n  local vowels_index49 = #word\n  local vowels_index50 = #word\n  local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1cd_m36.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = #word\n  local vowels_index2 = #word\n  local\
    \ vowels_index3 = #word\n  local vowels_index4 = #word\n  local vowels_index5\
    \ = #word\n  local vowels_index6 = #word\n  local vowels_index7 = #word\n  local\
    \ vowels_index8 = #word\n  local vowels_index9 = #word\n  local vowels_index10\
    \ = #word\n  local vowels_index11 = #word\n  local vowels_index12 = #word\n  local\
    \ vowels_index13 = #word\n  local vowels_index14 = #word\n  local vowels_index15\
    \ = #word\n  local vowels_index16 = #word\n  local vowels_index17 = #word\n  local\
    \ vowels_index18 = #word\n  local vowels_index19 = #word\n  local vowels_index20\
    \ = #word\n  local vowels_index21 = #word\n  local vowels_index22 = #word\n  local\
    \ vowels_index23 = #word\n  local vowels_index24 = #word\n  local vowels_index25\
    \ = #word\n  local vowels_index26 = #word\n  local vowels_index27 = #word\n  local\
    \ vowels_index28 = #word\n  local vowels_index29 = #word\n  local vowels_index30\
    \ = #word\n  local vowels_index31 = #word\n  local vowels_index32 = #word\n  local\
    \ vowels_index33 = #word\n  local vowels_index34 = #word\n  local vowels_index35\
    \ = #word\n  local vowels_index36 = #word\n  local vowels_index37 = #word\n  local\
    \ vowels_index38 = #word\n  local vowels_index39 = #word\n  local vowels_index40\
    \ = #word\n  local vowels_index41 = #word\n  local vowels_index42 = #word\n  local\
    \ vowels_index43 = #word\n  local vowels_index44 = #word\n  local vowels_index45\
    \ = #word\n  local vowels_index46 = #word\n  local vowels_index47 = #word\n  local\
    \ vowels_index48 = #word\n  local vowels_index49 = #word\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6e4kfrzd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjqvjw_4x.lua:83: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 1\n  local vowels_index_count_min = 0\n  local vowels_index_count_min_index\
    \ = 1\n  local vowels_index_count_max_index = 1\n  local vowels_index_count_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max = 1\n  local vowels_index_count_max_index_count_min\
    \ = 0\n  local vowels_index_count_max_index_count_min_index = 1\n  local vowels_index_count_max_index_count_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_count = 0\n  local\
    \ vowels_index_count_max_index_count_max_index_count_max = 1\n  local vowels_index_count_max_index_count_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_min_index = 1\n  local\
    \ vowels_index_count_max_index_count_max_index_max_index = 1\n  local vowels_index_count_max_index_count_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_min = 0\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_min_index = 1\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_max_index = 1\n\
    \  local vowels_index_count_max_index_count_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count_max\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min\
    \ = 0\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index\
    \ = 1\n  local vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n  local vowels_index_count_max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpylamf24p.lua:70: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqdfahgw8.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnirdrkrh.lua:90: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7wsa357.lua:86: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpysm5tdjf.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index2\
    \ = 0\n\tlocal vowels_index_count_max_min_index3 = 0\n\tlocal vowels_index_count_max_min_index4\
    \ = 0\n\tlocal vowels_index_count_max_min_index5 = 0\n\tlocal vowels_index_count_max_min_index6\
    \ = 0\n\tlocal vowels_index_count_max_min_index7 = 0\n\tlocal vowels_index_count_max_min_index8\
    \ = 0\n\tlocal vowels_index_count_max_min_index9 = 0\n\tlocal vowels_index_count_max_min_index10\
    \ = 0\n\tlocal vowels_index_count_max_min_index11 = 0\n\tlocal vowels_index_count_max_min_index12\
    \ = 0\n\tlocal vowels_index_count_max_min_index13 = 0\n\tlocal vowels_index_count_max_min_index14\
    \ = 0\n\tlocal vowels_index_count_max_min_index15 = 0\n\tlocal vowels_index_count_max_min_index16\
    \ = 0\n\tlocal vowels_index_count_max_min_index17 = 0\n\tlocal vowels_index_count_max_min_index18\
    \ = 0\n\tlocal vowels_index_count_max_min_index19 = 0\n\tlocal vowels_index_count_max_min_index20\
    \ = 0\n\tlocal vowels_index_count_max_min_index21 = 0\n\tlocal vowels_index_count_max_min_index22\
    \ = 0\n\tlocal vowels_index_count_max_min_index23 = 0\n\tlocal vowels_index_count_max_min_index24\
    \ = 0\n\tlocal vowels_index_count_max_min_index25 = 0\n\tlocal vowels_index_count_max_min_index26\
    \ = 0\n\tlocal vowels_index_count_max_min_index27 = 0\n\tlocal vowels_index_count_max_min_index28\
    \ = 0\n\tlocal vowels_index_count_max_min_index29 = 0\n\tlocal vowels_index_count_max_min_index30\
    \ = 0\n\tlocal vowels_index_count_max_min_index31 = 0\n\tlocal vowels_index_count_max_min_index32\
    \ = 0\n\tlocal vowels_index_count_max_min_index33 = 0\n\tlocal vowels_index_count_max_min_index34\
    \ = 0\n\tlocal vowels_index_count_max_min_index35 = 0\n\tlocal vowels_index_count_max_min_index36\
    \ = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5w5nhsvw.lua:79: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppa1xvgg8.lua:85: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3\
    \ = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\
    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ikxix46.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_index_index = 0\n\tlocal vowels_index_count_min_index\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvvzc45fh.lua:82: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 1\n    local vowels_index_count_max_minus_one\
    \ = #word\n    local vowels_index_count_min_plus_one = #word\n    local vowels_index_count_max_minus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one = #word\n\
    \    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one = #word\n\
    \    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one\
    \ = #word\n    local vowels_index_count_max_minus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_plus_one_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp64j72p64.lua:58: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = {}\n    local vowels_index_count\
    \ = 0\n    local vowels_index_max = 0\n    for i = 1, #word do\n        local\
    \ letter = word:sub(i, i)\n        if vowels_index_count < vowels_count then\n\
    \            if letter:lower() == vowels[vowels_index_count] then\n          \
    \      table.insert(vowels_index, letter)\n                vowels_index_count\
    \ = vowels_index_count + 1\n            else\n                vowels_index_max\
    \ = vowels_index_max\n            end\n        else\n            if letter:lower()\
    \ == vowels[vowels_index_max] then\n                table.insert(vowels_index,\
    \ letter)\n                vowels_index_max = vowels_index_max + 1\n         \
    \   else\n                table.insert(vowels_index, letter)\n               \
    \ vowels_index_max = vowels_index_max + 1\n                table.insert(vowels_index,\
    \ letter)\n                vowels_index_count = vowels_index_count + 1\n     \
    \       end\n        end\n    end\n    local vowels_index_min = #vowels_index\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_min_max = 0\n  \
    \  for i = 1, #word do\n        local letter = word:sub(i, i)\n        if vowels_index_min_count\
    \ < vowels_count then\n            if letter:lower() == vowels[vowels_index_min_count]\
    \ then\n                table.insert(vowels_index, letter)\n                vowels_index_min_count\
    \ = vowels_index_min_count + 1\n            else\n                vowels_index_min_max\
    \ = vowels_index_min_max\n            end\n        else\n            if letter:lower()\
    \ == vowels[vowels_index_min_max] then\n                table.insert(vowels_index,\
    \ letter)\n                vowels_index_min_max = vowels_index_min_max + 1\n \
    \           else\n                table.insert(vowels_index, letter)\n       \
    \         vowels_index_min_max = vowels_index_min_max + 1\n                table.insert(vowels_index,\
    \ letter)\n                vowels_index_min_count = vowels_index_min_count + 1\n\
    \            end\n        end\n    end\n    if vowels_index_min == vowels_index_min\
    \ then\n        return vowels[vowels_index_min]\n    elseif vowels_index_min ==\
    \ vowels_index_min - 1 then\n        return vowels[vowels_index_min + 1]\n   \
    \ elseif vowels_index_min == vowels_index_min + 1 then\n        return vowels[vowels_index_min\
    \ - 1]\n    elseif vowels_index_min == vowels_index_min + 2 then\n        return\
    \ vowels[\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqm92q400.lua:74: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp88rk4iqx.lua:71: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count\
    \ = #vowels\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp8gceaml.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = {}\n\tlocal\
    \ vowels_index_count[1] = 0\n\tlocal vowels_index_count[2] = 0\n\tlocal vowels_index_count[3]\
    \ = 0\n\tlocal vowels_index_count[4] = 0\n\tlocal vowels_index_count[5] = 0\n\t\
    local vowels_index_count[6] = 0\n\tlocal vowels_index_count[7] = 0\n\tlocal vowels_index_count[8]\
    \ = 0\n\tlocal vowels_index_count[9] = 0\n\tlocal vowels_index_count[10] = 0\n\
    \tlocal vowels_index_count[11] = 0\n\tlocal vowels_index_count[12] = 0\n\tlocal\
    \ vowels_index_count[13] = 0\n\tlocal vowels_index_count[14] = 0\n\tlocal vowels_index_count[15]\
    \ = 0\n\tlocal vowels_index_count[16] = 0\n\tlocal vowels_index_count[17] = 0\n\
    \tlocal vowels_index_count[18] = 0\n\tlocal vowels_index_count[19] = 0\n\tlocal\
    \ vowels_index_count[20] = 0\n\tlocal vowels_index_count[21] = 0\n\tlocal vowels_index_count[22]\
    \ = 0\n\tlocal vowels_index_count[23] = 0\n\tlocal vowels_index_count[24] = 0\n\
    \tlocal vowels_index_count[25] = 0\n\tlocal vowels_index_count[26] = 0\n\tlocal\
    \ vowels_index_count[27] = 0\n\tlocal vowels_index_count[28] = 0\n\tlocal vowels_index_count[29]\
    \ = 0\n\tlocal vowels_index_count[30] = 0\n\tlocal vowels_index_count[31] = 0\n\
    \tlocal vowels_index_count[32] = 0\n\tlocal vowels_index_count[33] = 0\n\tlocal\
    \ vowels_index_count[34] = 0\n\tlocal vowels_index_count[35] = 0\n\tlocal vowels_index_count[36]\
    \ = 0\n\tlocal vowels_index_count[37] = 0\n\tlocal vowels_index_count[38] = 0\n\
    \tlocal vowels_index_count[39] = 0\n\tlocal vowels_index_count[40] = 0\n\tlocal\
    \ vowels_index_count[41] = 0\n\tlocal vowels_index_count[42] = 0\n\tlocal vowels_index_count[43]\
    \ = 0\n\tlocal vowels_index_count[44] = 0\n\tlocal vowels_index_count[45] = 0\n\
    \tlocal vowels_index_count[46] = 0\n\tlocal vowels_index_count[47] = 0\n\tlocal\
    \ vowels_index_count[48] = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi8i9wem6.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcy8ebv_7.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count2\
    \ = 1\n\tlocal vowels_index_count3 = 1\n\tlocal vowels_index_count4 = 1\n\tlocal\
    \ vowels_index_count5 = 1\n\tlocal vowels_index_count6 = 1\n\tlocal vowels_index_count7\
    \ = 1\n\tlocal vowels_index_count8 = 1\n\tlocal vowels_index_count9 = 1\n\tlocal\
    \ vowels_index_count10 = 1\n\tlocal vowels_index_count11 = 1\n\tlocal vowels_index_count12\
    \ = 1\n\tlocal vowels_index_count13 = 1\n\tlocal vowels_index_count14 = 1\n\t\
    local vowels_index_count15 = 1\n\tlocal vowels_index_count16 = 1\n\tlocal vowels_index_count17\
    \ = 1\n\tlocal vowels_index_count18 = 1\n\tlocal vowels_index_count19 = 1\n\t\
    local vowels_index_count20 = 1\n\tlocal vowels_index_count21 = 1\n\tlocal vowels_index_count22\
    \ = 1\n\tlocal vowels_index_count23 = 1\n\tlocal vowels_index_count24 = 1\n\t\
    local vowels_index_count25 = 1\n\tlocal vowels_index_count26 = 1\n\tlocal vowels_index_count27\
    \ = 1\n\tlocal vowels_index_count28 = 1\n\tlocal vowels_index_count29 = 1\n\t\
    local vowels_index_count30 = 1\n\tlocal vowels_index_count31 = 1\n\tlocal vowels_index_count32\
    \ = 1\n\tlocal vowels_index_count33 = 1\n\tlocal vowels_index_count34 = 1\n\t\
    local vowels_index_count35 = 1\n\tlocal vowels_index_count36 = 1\n\tlocal vowels_index_count37\
    \ = 1\n\tlocal vowels_index_count38 = 1\n\tlocal vowels_index_count39 = 1\n\t\
    local vowels_index_count40 = 1\n\tlocal vowels_index_count41 = 1\n\tlocal vowels_index_count42\
    \ = 1\n\tlocal vowels_index_count43 = 1\n\tlocal vowels_index_count44 = 1\n\t\
    local vowels_index_count45 = 1\n\tlocal vowels_index_count46 = 1\n\tlocal vowels_index_count47\
    \ = 1\n\tlocal vowels_index_count48 = 1\n\tlocal vowels_index_count49 = 1\n\t\
    local vowels_index_count50 = 1\n\tlocal vowels_index_count51 = 1\n\tlocal vowels_index_count52\
    \ = 1\n\tlocal vowels_index_count\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi3j1tqan.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_position = -1\n\tlocal vowel_found = false\n\tlocal vowel_position\
    \ = -1\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyoczulrb.lua:107: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_2\
    \ = 1\n  local vowels_index_count_3 = 1\n  local vowels_index_count_4 = 1\n  local\
    \ vowels_index_count_5 = 1\n  local vowels_index_count_6 = 1\n  local vowels_index_count_7\
    \ = 1\n  local vowels_index_count_8 = 1\n  local vowels_index_count_9 = 1\n  local\
    \ vowels_index_count_10 = 1\n  local vowels_index_count_11 = 1\n  local vowels_index_count_12\
    \ = 1\n  local vowels_index_count_13 = 1\n  local vowels_index_count_14 = 1\n\
    \  local vowels_index_count_15 = 1\n  local vowels_index_count_16 = 1\n  local\
    \ vowels_index_count_17 = 1\n  local vowels_index_count_18 = 1\n  local vowels_index_count_19\
    \ = 1\n  local vowels_index_count_20 = 1\n  local vowels_index_count_21 = 1\n\
    \  local vowels_index_count_22 = 1\n  local vowels_index_count_23 = 1\n  local\
    \ vowels_index_count_24 = 1\n  local vowels_index_count_25 = 1\n  local vowels_index_count_26\
    \ = 1\n  local vowels_index_count_27 = 1\n  local vowels_index_count_28 = 1\n\
    \  local vowels_index_count_29 = 1\n  local vowels_index_count_30 = 1\n  local\
    \ vowels_index_count_31 = 1\n  local vowels_index_count_32 = 1\n  local vowels_index_count_33\
    \ = 1\n  local vowels_index_count_34 = 1\n  local vowels_index_count_35 = 1\n\
    \  local vowels_index_count_36 = 1\n  local vowels_index_count_37 = 1\n  local\
    \ vowels_index_count_38 = 1\n  local vowels_index_count_39 = 1\n  local vowels_index_count_40\
    \ = 1\n  local vowels_index_count_41 = 1\n  local vowels_index_count_42 = 1\n\
    \  local vowels_index_count_43 = 1\n  local vowels_index_count_44 = 1\n  local\
    \ vowels_index_count_45 = 1\n  local vowels_index_count_46 = 1\n  local vowels_index_count_47\
    \ = 1\n  local vowels_index_count_48 = 1\n  local vowels_index_count_49 = 1\n\
    \  local vowels_index_count_50 = 1\n  local vowels_index_count_51 = 1\n  local\
    \ vowels_index_count_52 = 1\n  local vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp_0ki85j.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = {}\n    for i = 1, #word do\n        if word[i] == 'a'\
    \ or word[i] == 'e' or word[i] == 'i' or word[i] == 'o' or word[i] == 'u' then\n\
    \            vowels_count = vowels_count + 1\n            table.insert(vowels_index,\
    \ i)\n        end\n    end\n    if vowels_count > 1 then\n        local vowels_index_min\
    \ = math.min(vowels_index)\n        local vowels_index_max = math.max(vowels_index)\n\
    \        local vowels_index_middle = math.floor(#vowels_index / 2)\n        local\
    \ vowels_index_middle_prev = vowels_index_middle - 1\n        local vowels_index_middle_next\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_prev = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next = vowels_index_middle + 1\n\
    \        local vowels_index_middle_next_next_prev = vowels_index_middle + 1\n\
    \        local vowels_index_middle_next_next_next = vowels_index_middle + 1\n\
    \        local vowels_index_middle_next_next_next_prev = vowels_index_middle +\
    \ 1\n        local vowels_index_middle_next_next_next_next = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next_next_next_prev = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next_next_next_next = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next_next_next_next_prev = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next_next_next_next_next = vowels_index_middle\
    \ + 1\n        local vowels_index_middle_next_next_next_next_next_next_prev =\
    \ vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_prev\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_next\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_prev\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_next\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_next_prev\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_next_next_next\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_next_next_next_next_prev\
    \ = vowels_index_middle + 1\n        local vowels_index_middle_next_next_next_next_next_next_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaj36uqed.lua:70: ''end'' expected (to close ''if'' at line
    25) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_sum\
    \ = 0\n    local vowels_index_max = 0\n    local vowels_index_min = 0\n    local\
    \ vowels_index_sum = 0\n    local vowels_index_max = 0\n    local vowels_index_min\
    \ = 0\n    local vowels_index_sum = 0\n    local vowels_index_max = 0\n    local\
    \ vowels_index_min = 0\n    local vowels_index_sum = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_sum\
    \ = 0\n    local vowels_index_max = 0\n    local vowels_index_min = 0\n    local\
    \ vowels_index_sum = 0\n    local vowels_index_max = 0\n    local vowels_index_min\
    \ = 0\n    local vowels_index_sum = 0\n    local vowels_index_max = 0\n    local\
    \ vowels_index_min = 0\n    local vowels_index_sum = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_sum\
    \ = 0\n    local vowels_index_max = 0\n    local vowels_index_min = 0\n    local\
    \ vowels_index_sum = 0\n    local vowels_index_max = 0\n    local vowels_index_min\
    \ = 0\n    local vowels_index_sum = 0\n    local vowels_index_max = 0\n    local\
    \ vowels_index_min = 0\n    local vowels_index_sum = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_max = 0\n    local vowels_index_min = 0\n    local vowels_index_sum\
    \ = 0\n    local vowels_index_max = 0\n    local vowels_index_min = 0\n    local\
    \ vowels_index_sum = 0\n    local vowels_index_max = 0\n    local vowels_index_min\
    \ = 0\n    local vowels_index_sum = 0\n    local vowels_index_max = 0\n    local\
    \ vowels_index_min = 0\n    local vowels_index_sum = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_sum = 0\n    local\
    \ vowels_index_max = 0\n    local vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9udt8di.lua:99: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  local\
    \ vowel_found = false\n  local vowel_start = nil\n  local vowel_end = nil\n  for\
    \ i = #word, 2, -1 do\n    if vowels[word[i]] then\n      vowels_count = vowels_count\
    \ + 1\n      if vowel_start == nil then\n        vowel_start = i\n      elseif\
    \ vowel_end == nil then\n        vowel_end = i\n      elseif vowel_start ~= i\
    \ then\n        vowel_found = true\n        break\n      end\n    end\n  end\n\
    \  if vowels_count > 1 then\n    if vowel_start ~= nil and vowel_end ~= nil then\n\
    \      local vowel_middle = (vowel_start + vowel_end) / 2\n      local vowel_middle_index\
    \ = #vowels\n      for i = vowel_start, vowel_end do\n        if vowels[word[i]]\
    \ then\n          vowel_middle_index = vowel_middle_index - 1\n          break\n\
    \        end\n      end\n      if vowel_middle_index > 0 then\n        return\
    \ word[vowel_middle_index + 1]\n      end\n    end\n  end\n  return ''\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoqenvgd.lua:55:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmphoqenvgd.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzztcimia.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_count\
    \ = 0\n\tlocal vowels_index_count_max_count_max = 0\n\tlocal vowels_index_count_max_count_min\
    \ = 0\n\tlocal vowels_index_count_max_count_min_index = 0\n\tlocal vowels_index_count_max_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count = 0\n\tlocal vowels_index_count_max_count_max_count_max\
    \ = 0\n\tlocal vowels_index_count_max_count_max_min = 0\n\tlocal vowels_index_count_max_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max = 0\n\tlocal vowels_index_count_max_count_max_count_min\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_min_index = 0\n\tlocal vowels_index_count_max_count_max_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_min = 0\n\tlocal vowels_index_count_max_count_max_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max = 0\n\tlocal\
    \ vowels_index_count_max_count_max_count_max_count_min = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count = 0\n\
    \tlocal vowels_index_count_max_count_max_count_max_count_max_count_max = 0\n\t\
    local vowels_index_count_max_count_max_count_max_count_max_min = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_min\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_max_count\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_max_count_max\
    \ = 0\n\tlocal vowels_index_count_max_count_max_count_max_count_max_count_max_min\
    \ = 0\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8s39uaf6.lua:74: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = #word\n  local vowels_index_count_min = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_index_count_min = #word\n  local vowels_index_count_max = #word\n  local\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgdkd7wid.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxrzaet3g.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local vowel = word:sub(i, i)\n        if vowel:sub(1,\
    \ 1) == 'a' then\n            vowel_count[vowel] = vowel_count[vowel] + 1\n  \
    \      elseif vowel:sub(1, 1) == 'e' then\n            vowel_count[vowel] = vowel_count[vowel]\
    \ + 1\n        elseif vowel:sub(1, 1) == 'i' then\n            vowel_count[vowel]\
    \ = vowel_count[vowel] + 1\n        elseif vowel:sub(1, 1) == 'o' then\n     \
    \       vowel_count[vowel] = vowel_count[vowel] + 1\n        elseif vowel:sub(1,\
    \ 1) == 'u' then\n            vowel_count[vowel] = vowel_count[vowel] + 1\n  \
    \      end\n    end\n    local vowel_count_sorted = {}\n    for i = 1, #vowel_count\
    \ do\n        table.insert(vowel_count_sorted, vowel_count[i])\n    end\n    table.sort(vowel_count_sorted)\n\
    \    local vowel_count_sorted_index = #vowel_count_sorted\n    local vowel_count_sorted_value\
    \ = vowel_count_sorted[vowel_count_sorted_index]\n    local vowel_count_sorted_index\
    \ = vowel_count_sorted_index - 1\n    local vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n\
    \    local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local\
    \ vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n  \
    \  local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local vowel_count_sorted_value\
    \ = vowel_count_sorted[vowel_count_sorted_index]\n    local vowel_count_sorted_index\
    \ = vowel_count_sorted_index - 1\n    local vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n\
    \    local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local\
    \ vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n  \
    \  local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local vowel_count_sorted_value\
    \ = vowel_count_sorted[vowel_count_sorted_index]\n    local vowel_count_sorted_index\
    \ = vowel_count_sorted_index - 1\n    local vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n\
    \    local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local\
    \ vowel_count_sorted_value = vowel_count_sorted[vowel_count_sorted_index]\n  \
    \  local vowel_count_sorted_index = vowel_count_sorted_index - 1\n    local vowel_count_sorted_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0nueyjz.lua:76: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx117mlmz.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 1\n    local vowels_index_end\n    local vowels_index_start\n\
    \    local vowels_index_start_end\n    local vowels_index_start_end_end\n    local\
    \ vowels_index_start_end_end_end\n    local vowels_index_start_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\n  \
    \  local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_i_zix7.lua:66: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeml7nwxj.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_index_count_min_index = 1\n    local vowels_index_count_max_index\
    \ = 1\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ecpudl9.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count =\
    \ #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\t\
    table.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count =\
    \ #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\t\
    table.insert(vowels_index, vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74tysvu3.lua:85: '','' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index2\
    \ = 0\n\tlocal vowels_index_count_max_min_index3 = 0\n\tlocal vowels_index_count_max_min_index4\
    \ = 0\n\tlocal vowels_index_count_max_min_index5 = 0\n\tlocal vowels_index_count_max_min_index6\
    \ = 0\n\tlocal vowels_index_count_max_min_index7 = 0\n\tlocal vowels_index_count_max_min_index8\
    \ = 0\n\tlocal vowels_index_count_max_min_index9 = 0\n\tlocal vowels_index_count_max_min_index10\
    \ = 0\n\tlocal vowels_index_count_max_min_index11 = 0\n\tlocal vowels_index_count_max_min_index12\
    \ = 0\n\tlocal vowels_index_count_max_min_index13 = 0\n\tlocal vowels_index_count_max_min_index14\
    \ = 0\n\tlocal vowels_index_count_max_min_index15 = 0\n\tlocal vowels_index_count_max_min_index16\
    \ = 0\n\tlocal vowels_index_count_max_min_index17 = 0\n\tlocal vowels_index_count_max_min_index18\
    \ = 0\n\tlocal vowels_index_count_max_min_index19 = 0\n\tlocal vowels_index_count_max_min_index20\
    \ = 0\n\tlocal vowels_index_count_max_min_index21 = 0\n\tlocal vowels_index_count_max_min_index22\
    \ = 0\n\tlocal vowels_index_count_max_min_index23 = 0\n\tlocal vowels_index_count_max_min_index24\
    \ = 0\n\tlocal vowels_index_count_max_min_index25 = 0\n\tlocal vowels_index_count_max_min_index26\
    \ = 0\n\tlocal vowels_index_count_max_min_index27 = 0\n\tlocal vowels_index_count_max_min_index28\
    \ = 0\n\tlocal vowels_index_count_max_min_index29 = 0\n\tlocal vowels_index_count_max_min_index30\
    \ = 0\n\tlocal vowels_index_count_max_min_index31 = 0\n\tlocal vowels_index_count_max_min_index32\
    \ = 0\n\tlocal vowels_index_count_max_min_index33 = 0\n\tlocal vowels_index_count_max_min_index34\
    \ = 0\n\tlocal vowels_index_count_max_min_index35 = 0\n\tlocal vowels_index_count_max_min_index36\
    \ = 0\n\tlocal vowels_index_count_max_min_index37 = 0\n\tlocal vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0zf4ve8z.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_max2 = 0\n\tlocal vowels_index_min2\
    \ = 0\n\tlocal vowels_index_max3 = 0\n\tlocal vowels_index_min3 = 0\n\tlocal vowels_index_max4\
    \ = 0\n\tlocal vowels_index_min4 = 0\n\tlocal vowels_index_max5 = 0\n\tlocal vowels_index_min5\
    \ = 0\n\tlocal vowels_index_max6 = 0\n\tlocal vowels_index_min6 = 0\n\tlocal vowels_index_max7\
    \ = 0\n\tlocal vowels_index_min7 = 0\n\tlocal vowels_index_max8 = 0\n\tlocal vowels_index_min8\
    \ = 0\n\tlocal vowels_index_max9 = 0\n\tlocal vowels_index_min9 = 0\n\tlocal vowels_index_max10\
    \ = 0\n\tlocal vowels_index_min10 = 0\n\tlocal vowels_index_max11 = 0\n\tlocal\
    \ vowels_index_min11 = 0\n\tlocal vowels_index_max12 = 0\n\tlocal vowels_index_min12\
    \ = 0\n\tlocal vowels_index_max13 = 0\n\tlocal vowels_index_min13 = 0\n\tlocal\
    \ vowels_index_max14 = 0\n\tlocal vowels_index_min14 = 0\n\tlocal vowels_index_max15\
    \ = 0\n\tlocal vowels_index_min15 = 0\n\tlocal vowels_index_max16 = 0\n\tlocal\
    \ vowels_index_min16 = 0\n\tlocal vowels_index_max17 = 0\n\tlocal vowels_index_min17\
    \ = 0\n\tlocal vowels_index_max18 = 0\n\tlocal vowels_index_min18 = 0\n\tlocal\
    \ vowels_index_max19 = 0\n\tlocal vowels_index_min19 = 0\n\tlocal vowels_index_max20\
    \ = 0\n\tlocal vowels_index_min20 = 0\n\tlocal vowels_index_max21 = 0\n\tlocal\
    \ vowels_index_min21 = 0\n\tlocal vowels_index_max22 = 0\n\tlocal vowels_index_min22\
    \ = 0\n\tlocal vowels_index_max23 = 0\n\tlocal vowels_index_min23 = 0\n\tlocal\
    \ vowels_index_max24 = 0\n\tlocal vowels_index_min24 = 0\n\tlocal vowels_index_max25\
    \ = 0\n\tlocal vowels_index_min25 = 0\n\tlocal vowels_index_max26 = 0\n\tlocal\
    \ vowels_index_min26 = 0\n\tlocal vowels_index_max27 = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbjeamb33.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcy8ebv_7.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_prev\
    \ = 1\n  local vowels_index_count_next = 1\n  local vowels_index_count_next2 =\
    \ 0\n  local vowels_index_count_next3 = 0\n  local vowels_index_count_next4 =\
    \ 0\n  local vowels_index_count_next5 = 0\n  local vowels_index_count_next6 =\
    \ 0\n  local vowels_index_count_next7 = 0\n  local vowels_index_count_next8 =\
    \ 0\n  local vowels_index_count_next9 = 0\n  local vowels_index_count_next10 =\
    \ 0\n  local vowels_index_count_next11 = 0\n  local vowels_index_count_next12\
    \ = 0\n  local vowels_index_count_next13 = 0\n  local vowels_index_count_next14\
    \ = 0\n  local vowels_index_count_next15 = 0\n  local vowels_index_count_next16\
    \ = 0\n  local vowels_index_count_next17 = 0\n  local vowels_index_count_next18\
    \ = 0\n  local vowels_index_count_next19 = 0\n  local vowels_index_count_next20\
    \ = 0\n  local vowels_index_count_next21 = 0\n  local vowels_index_count_next22\
    \ = 0\n  local vowels_index_count_next23 = 0\n  local vowels_index_count_next24\
    \ = 0\n  local vowels_index_count_next25 = 0\n  local vowels_index_count_next26\
    \ = 0\n  local vowels_index_count_next27 = 0\n  local vowels_index_count_next28\
    \ = 0\n  local vowels_index_count_next29 = 0\n  local vowels_index_count_next30\
    \ = 0\n  local vowels_index_count_next31 = 0\n  local vowels_index_count_next32\
    \ = 0\n  local vowels_index_count_next33 = 0\n  local vowels_index_count_next34\
    \ = 0\n  local vowels_index_count_next35 = 0\n  local vowels_index_count_next36\
    \ = 0\n  local vowels_index_count_next37 = 0\n  local vowels_index_count_next38\
    \ = 0\n  local vowels_index_count_next39 = 0\n  local vowels_index_count_next40\
    \ = 0\n  local vowels_index_count_next41 = 0\n  local vowels_index_count_next42\
    \ = 0\n  local vowels_index_count_next43 = 0\n  local vowels_index_count_next44\
    \ = 0\n  local vowels_index_count_next45 = 0\n  local vowels_index_count_next46\
    \ = 0\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp85147qu3.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = 0\n  local vowel_index\
    \ = 1\n  local vowel_found = false\n  local vowel_found2 = false\n  local vowel_found3\
    \ = false\n  local vowel_found4 = false\n  local vowel_found5 = false\n  local\
    \ vowel_found6 = false\n  local vowel_found7 = false\n  local vowel_found8 = false\n\
    \  local vowel_found9 = false\n  local vowel_found10 = false\n  local vowel_found11\
    \ = false\n  local vowel_found12 = false\n  local vowel_found13 = false\n  local\
    \ vowel_found14 = false\n  local vowel_found15 = false\n  local vowel_found16\
    \ = false\n  local vowel_found17 = false\n  local vowel_found18 = false\n  local\
    \ vowel_found19 = false\n  local vowel_found20 = false\n  local vowel_found21\
    \ = false\n  local vowel_found22 = false\n  local vowel_found23 = false\n  local\
    \ vowel_found24 = false\n  local vowel_found25 = false\n  local vowel_found26\
    \ = false\n  local vowel_found27 = false\n  local vowel_found28 = false\n  local\
    \ vowel_found29 = false\n  local vowel_found30 = false\n  local vowel_found31\
    \ = false\n  local vowel_found32 = false\n  local vowel_found33 = false\n  local\
    \ vowel_found34 = false\n  local vowel_found35 = false\n  local vowel_found36\
    \ = false\n  local vowel_found37 = false\n  local vowel_found38 = false\n  local\
    \ vowel_found39 = false\n  local vowel_found40 = false\n  local vowel_found41\
    \ = false\n  local vowel_found42 = false\n  local vowel_found43 = false\n  local\
    \ vowel_found44 = false\n  local vowel_found45 = false\n  local vowel_found46\
    \ = false\n  local vowel_found47 = false\n  local vowel_found48 = false\n  local\
    \ vowel_found49 = false\n  local vowel_found50 = false\n  local vowel_found51\
    \ = false\n  local vowel_found52 = false\n  local vowel_found53 = false\n  local\
    \ vowel_found54 = false\n  local vowel_found55 = false\n  local vowel_found56\
    \ = false\n  local vowel_found57 = false\n  local vowel_found58 = false\n  local\
    \ vowel_found59 = false\n  local vowel_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkkbrrq16.lua:98: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_prev\
    \ = 1\n    local vowels_index_count_next = 1\n    local vowels_index_count_next2\
    \ = 0\n    local vowels_index_count_next3 = 0\n    local vowels_index_count_next4\
    \ = 0\n    local vowels_index_count_next5 = 0\n    local vowels_index_count_next6\
    \ = 0\n    local vowels_index_count_next7 = 0\n    local vowels_index_count_next8\
    \ = 0\n    local vowels_index_count_next9 = 0\n    local vowels_index_count_next10\
    \ = 0\n    local vowels_index_count_next11 = 0\n    local vowels_index_count_next12\
    \ = 0\n    local vowels_index_count_next13 = 0\n    local vowels_index_count_next14\
    \ = 0\n    local vowels_index_count_next15 = 0\n    local vowels_index_count_next16\
    \ = 0\n    local vowels_index_count_next17 = 0\n    local vowels_index_count_next18\
    \ = 0\n    local vowels_index_count_next19 = 0\n    local vowels_index_count_next20\
    \ = 0\n    local vowels_index_count_next21 = 0\n    local vowels_index_count_next22\
    \ = 0\n    local vowels_index_count_next23 = 0\n    local vowels_index_count_next24\
    \ = 0\n    local vowels_index_count_next25 = 0\n    local vowels_index_count_next26\
    \ = 0\n    local vowels_index_count_next27 = 0\n    local vowels_index_count_next28\
    \ = 0\n    local vowels_index_count_next29 = 0\n    local vowels_index_count_next30\
    \ = 0\n    local vowels_index_count_next31 = 0\n    local vowels_index_count_next32\
    \ = 0\n    local vowels_index_count_next33 = 0\n    local vowels_index_count_next34\
    \ = 0\n    local vowels_index_count_next35 = 0\n    local vowels_index_count_next36\
    \ = 0\n    local vowels_index_count_next37 = 0\n    local vowels_index_count_next38\
    \ = 0\n    local vowels_index_count_next39 = 0\n    local vowels_index_count_next40\
    \ = 0\n    local vowels_index_count_next41 = 0\n    local vowels_index_count_next42\
    \ = 0\n    local vowels_index_count_next43 = 0\n    local vowels_index_count_next44\
    \ = 0\n    local vowels_index_count_next45 = 0\n    local vowels_index_count_next46\
    \ = 0\n    local vowels_index_count_next\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaolfnlor.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_count_left = 0\n    local vowels_count_right = 0\n    local vowels_count_left_right\
    \ = 0\n    local vowels_count_left_left = 0\n    local vowels_count_right_left\
    \ = 0\n    local vowels_count_right_right = 0\n    local vowels_count_left_left_right\
    \ = 0\n    local vowels_count_left_right_left = 0\n    local vowels_count_right_left_left\
    \ = 0\n    local vowels_count_right_right_left = 0\n    local vowels_count_left_left_right_left\
    \ = 0\n    local vowels_count_left_right_left_left = 0\n    local vowels_count_right_left_left_left\
    \ = 0\n    local vowels_count_right_right_left_left = 0\n    local vowels_count_left_left_right_left_left\
    \ = 0\n    local vowels_count_left_right_left_left_left = 0\n    local vowels_count_right_left_left_left_left\
    \ = 0\n    local vowels_count_right_right_left_left_left = 0\n    local vowels_count_left_left_right_left_left_left\
    \ = 0\n    local vowels_count_left_right_left_left_left_left = 0\n    local vowels_count_right_left_left_left_left_left\
    \ = 0\n    local vowels_count_right_right_left_left_left_left = 0\n    local vowels_count_left_left_right_left_left_left_left\
    \ = 0\n    local vowels_count_left_right_left_left_left_left_left = 0\n    local\
    \ vowels_count_right_left_left_left_left_left_left = 0\n    local vowels_count_right_right_left_left_left_left_left\
    \ = 0\n    local vowels_count_left_left_right_left_left_left_left_left = 0\n \
    \   local vowels_count_left_right_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_right_left_left_left_left_left_left_left = 0\n    local vowels_count_right_right_left_left_left_left_left_left\
    \ = 0\n    local vowels_count_left_left_right_left_left_left_left_left_left =\
    \ 0\n    local vowels_count_left_right_left_left_left_left_left_left_left = 0\n\
    \    local vowels_count_right_left_left_left_left_left_left_left_left = 0\n  \
    \  local vowels_count_right_right_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_left_left_right_left_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_left_right_left_left_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_right_left_left_left_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_right_right_left_left_left_left_left_left_left_left = 0\n    local\
    \ vowels_count_left_left_right_left_left_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpklkvqszn.lua:76: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\
    \tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\
    \tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal\
    \ vowels_index_count_min = 0\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkvtxb_py.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max =\
    \ 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_index\
    \ = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp89b2_t77.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1wt4vb4.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels-1\n    local vowels_index_count_min = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_max = #vowels-1\n    local vowels_index_count_min\
    \ = #vowels-1\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoxvkjgmi.lua:79: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_index = 0\n\tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_index = 0\n\
    \tlocal vowels_index_max_count = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\
    \tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count\
    \ = 0\n\tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\
    \tlocal vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal\
    \ vowels_index_max_index = 0\n\tlocal vowels_index_min_count = 0\n\tlocal vowels_index_max_index\
    \ = 0\n\tlocal vowels_index_min_count = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp673vc0zl.lua:95: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3\
    \ = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\
    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ikxix46.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 1\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpinlpe2d3.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk4v1cfu_.lua:90: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels_index\n    local vowels_index_count_min = #vowels_index\n    local\
    \ vowels_index_count_min = #vowels_index\n    local vowels_index_count_max = #vowels_index\n\
    \    local vowels_index_count_min = #vowels_index\n    local vowels_index_count_max\
    \ = #vowels_index\n    local vowels_index_count_min = #vowels_index\n    local\
    \ vowels_index_count_max = #vowels_index\n    local vowels_index_count_min = #vowels_index\n\
    \    local vowels_index_count_max = #vowels_index\n    local vowels_index_count_min\
    \ = #vowels_index\n    local vowels_index_count_max = #vowels_index\n    local\
    \ vowels_index_count_min = #vowels_index\n    local vowels_index_count_max = #vowels_index\n\
    \    local vowels_index_count_min = #vowels_index\n    local vowels_index_count_max\
    \ = #vowels_index\n    local vowels_index_count_min = #vowels_index\n    local\
    \ vowels_index_count_max = #vowels_index\n    local vowels_index_count_min = #vowels_index\n\
    \    local vowels_index_count_max = #vowels_index\n    local vowels_index_count_min\
    \ = #vowels_index\n    local vowels_index_count_max = #vowels_index\n    local\
    \ vowels_index_count_min = #vowels_index\n    local vowels_index_count_max = #vowels_index\n\
    \    local vowels_index_count_min = #vowels_index\n    local vowels_index_count_max\
    \ = #vowels_index\n    local vowels_index_count_min = #vowels_index\n    local\
    \ vowels_index_count_max = #vowels_index\n    local vowels_index_count_min = #vowels_index\n\
    \    local vowels_index_count_max = #vowels_index\n    local vowels_index_count_min\
    \ = #vowels_index\n    local vowels_index_count_max = #vowels_index\n    local\
    \ vowels_index_count_min = #vowels_index\n    local vowels_index_count_max = #vowels_index\n\
    \    local vowels_index_count_min = #vowels_index\n    local vowels_index_count_max\
    \ = #vowels_index\n    local vowels_index_count_min = #vowels_index\n    local\
    \ vowels_index_count_max = #vowels_index\n    local vowels_index_count_min = #vowels_index\n\
    \    local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0iqp9cq0.lua:79: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcy8ebv_7.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_index = 0\n    local vowels_index_max_count = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local vowels_index_max_index = 0\n\
    \    local vowels_index_min_count = 0\n    local \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeibyj22v.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = { 'a', 'e', 'i', 'o', 'u' }\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal vowels_index_count_max_min_index_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_index = 0\n\tlocal \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxxfnjud4.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_gppoylf.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = 0\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min = 0\n\tlocal vowels_index_count_max_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index = 0\n\tlocal vowels_index_count_max_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min = 0\n\t\
    local vowels_index_count_max_index_count_min_index_count_min_index = 0\n\tlocal\
    \ vowels_index_count_max_index_count_min_index_count_min_index_count = 0\n\tlocal\
    \ vowels_index_count_max_index_count_min_index_count_min_index_count_min = 0\n\
    \tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphy5lfk55.lua:65: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfra9mju7.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_index\
    \ = 0\n  local vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n  local\
    \ vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n\
    \  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local\
    \ vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n  local vowels_index_min_count\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n\
    \  local vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n  local vowels_index_max_count\
    \ = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n\
    \  local vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_index\
    \ = 0\n  local vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n  local\
    \ vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n\
    \  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local\
    \ vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n  local vowels_index_min_count\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n\
    \  local vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n  local vowels_index_max_count\
    \ = 0\n  local vowels_index_min_count = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi0ovj9qf.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ vowels[i])\n    end\n    local vowels_count = #word\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, word[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf1wwpp0n.lua:103: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = 0\n    local vowels_index_count_max = 0\n    local vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7at_ty_5.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_min = 0\n\tlocal vowels_index_count_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index = 0\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max = #vowels\n\tlocal vowels_index_count_max_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_min_index = 0\n\tlocal vowels_index_count_max_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_count = 0\n\tlocal\
    \ vowels_index_count_max_index_count_max_index_count_max = #vowels\n\tlocal vowels_index_count_max_index_count_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_min_index = 0\n\t\
    local vowels_index_count_max_index_count_max_index_max_index = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_min = 0\n\
    \tlocal vowels_index_count_max_index_count_max_index_max_index_min_index = 0\n\
    \tlocal vowels_index_count_max_index_count_max_index_max_index_max_index = 0\n\
    \tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_min\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_min_index\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkge8izmv.lua:69: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min_index = 1\n\tlocal vowels_index_count_max_index = #word\n\
    \tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeaegn4zb.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count2\
    \ = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4 = 0\n\tlocal\
    \ vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal vowels_index_count7\
    \ = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9 = 0\n\tlocal\
    \ vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\tlocal vowels_index_count12\
    \ = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14 = 0\n\t\
    local vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\tlocal vowels_index_count17\
    \ = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19 = 0\n\t\
    local vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\tlocal vowels_index_count22\
    \ = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24 = 0\n\t\
    local vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\tlocal vowels_index_count27\
    \ = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29 = 0\n\t\
    local vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\tlocal vowels_index_count32\
    \ = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34 = 0\n\t\
    local vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\tlocal vowels_index_count37\
    \ = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39 = 0\n\t\
    local vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\tlocal vowels_index_count42\
    \ = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44 = 0\n\t\
    local vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\tlocal vowels_index_count47\
    \ = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49 = 0\n\t\
    local vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\tlocal vowels_index_count52\
    \ = 0\n\tlocal vowels_index_count53 = 0\n\tlocal vowels_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjg7man7p.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowels_index_count_max/2)\n\
    \  local vowels_index_count_min = math.min(#word, vowels_count)\n  local vowels_index_count_max\
    \ = math.max(#word, vowels_count)\n  local vowels_index_count_middle = math.floor(vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpowpqw6rj.lua:50: '')'' expected (to close ''('' at line 49)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_min_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpileodukc.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy22nocjo.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuy6qbcb_.lua:109: ''end'' expected (to close ''for'' at line
    89) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count2 = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4\
    \ = 0\n\tlocal vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal\
    \ vowels_index_count7 = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9\
    \ = 0\n\tlocal vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\t\
    local vowels_index_count12 = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14\
    \ = 0\n\tlocal vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\t\
    local vowels_index_count17 = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19\
    \ = 0\n\tlocal vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\t\
    local vowels_index_count22 = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24\
    \ = 0\n\tlocal vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\t\
    local vowels_index_count27 = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29\
    \ = 0\n\tlocal vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\t\
    local vowels_index_count32 = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34\
    \ = 0\n\tlocal vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\t\
    local vowels_index_count37 = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39\
    \ = 0\n\tlocal vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\t\
    local vowels_index_count42 = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44\
    \ = 0\n\tlocal vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\t\
    local vowels_index_count47 = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49\
    \ = 0\n\tlocal vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\t\
    local vowels_index_count52 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mzjs4fb.lua:91: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowel_found\
    \ = false\n\tlocal vowel_start = nil\n\tlocal vowel_end = nil\n\tlocal vowel_distance\
    \ = nil\n\tfor i = #word, 2, -1 do\n\t\tlocal char = word[i]\n\t\tif vowel_found\
    \ then\n\t\t\tlocal distance = vowel_end - vowel_start\n\t\t\tif distance < 0\
    \ then\n\t\t\t\tdistance = distance * -1\n\t\t\tend\n\t\t\tif distance < vowel_distance\
    \ then\n\t\t\t\tvowel_distance = distance\n\t\t\t\tvowel_start = vowel_end\n\t\
    \t\t\tvowel_end = char\n\t\t\telse\n\t\t\t\tvowel_distance = distance\n\t\t\t\t\
    vowel_start = char\n\t\t\t\tvowel_end = vowel_start\n\t\t\tend\n\t\telseif char\
    \ == 'a' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'e' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'i' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'o' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'u' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'A' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'E' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'I' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'O' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\telseif\
    \ char == 'U' then\n\t\t\tvowel_start = char\n\t\t\tvowel_found = true\n\t\tend\n\
    \tend\n\tif vowel_found then\n\t\treturn vowel_start\n\telse\n\t\treturn ''\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufs928b6.lua:79:\
    \ expected: \"u\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpufs928b6.lua:79:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_max_min\
    \ = #vowels\n\tlocal vowels_index_count_min_index = 0\n\tlocal vowels_index_count_max_index\
    \ = 0\n\tlocal vowels_index_count_min_index_count = 0\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count_max = #vowels\n\tlocal vowels_index_count_max_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_min_index_count_min_index = 0\n\tlocal\
    \ vowels_index_count_max_index_count_min_index = 0\n\tlocal vowels_index_count_min_index_count_max_index\
    \ = #vowels\n\tlocal vowels_index_count_max_index_count_max_index = #vowels\n\t\
    local vowels_index_count_min_index_count_min_index_count = 0\n\tlocal vowels_index_count_max_index_count_min_index_count\
    \ = 0\n\tlocal vowels_index_count_min_index_count_max_index_count = #vowels\n\t\
    local vowels_index_count_max_index_count_max_index_count = #vowels\n\tlocal vowels_index_count_min_index_count_min_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_index_count_min_index_count_max =\
    \ #vowels\n\tlocal vowels_index_count_min_index_count_max_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max_index_count_max_index_count_min = #vowels\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_count_max_index = #vowels\n\tlocal\
    \ vowels_index_count_max_index_count_min_index_count_max_index = #vowels\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_count_max_index_count = #vowels\n\
    \tlocal vowels_index_count_max_index_count_max_index_count_min = #vowels\n\tlocal\
    \ vowels_index_count_min_index_count_max_index_count_max_index = #vowels\n\tlocal\
    \ vowels_index_count_min_index_count_min_index_count_max_index_count_min = #vowels\n\
    \tlocal vowels_index_count_max_index_count_max_index_count_min_index_count = #vowels\n\
    \tlocal vowels_index_count_min_index_count_min_index_count_max_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_max_index_count_min_index_count_max_index_count_max\
    \ = #vowels\n\tlocal vowels_index_count_min_index_count_min_index_count_max_index_count_max_index\
    \ = #vowels\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpolnnaruw.lua:71: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count2 = 0\n  local vowels_index_count3 = 0\n  local vowels_index_count4\
    \ = 0\n  local vowels_index_count5 = 0\n  local vowels_index_count6 = 0\n  local\
    \ vowels_index_count7 = 0\n  local vowels_index_count8 = 0\n  local vowels_index_count9\
    \ = 0\n  local vowels_index_count10 = 0\n  local vowels_index_count11 = 0\n  local\
    \ vowels_index_count12 = 0\n  local vowels_index_count13 = 0\n  local vowels_index_count14\
    \ = 0\n  local vowels_index_count15 = 0\n  local vowels_index_count16 = 0\n  local\
    \ vowels_index_count17 = 0\n  local vowels_index_count18 = 0\n  local vowels_index_count19\
    \ = 0\n  local vowels_index_count20 = 0\n  local vowels_index_count21 = 0\n  local\
    \ vowels_index_count22 = 0\n  local vowels_index_count23 = 0\n  local vowels_index_count24\
    \ = 0\n  local vowels_index_count25 = 0\n  local vowels_index_count26 = 0\n  local\
    \ vowels_index_count27 = 0\n  local vowels_index_count28 = 0\n  local vowels_index_count29\
    \ = 0\n  local vowels_index_count30 = 0\n  local vowels_index_count31 = 0\n  local\
    \ vowels_index_count32 = 0\n  local vowels_index_count33 = 0\n  local vowels_index_count34\
    \ = 0\n  local vowels_index_count35 = 0\n  local vowels_index_count36 = 0\n  local\
    \ vowels_index_count37 = 0\n  local vowels_index_count38 = 0\n  local vowels_index_count39\
    \ = 0\n  local vowels_index_count40 = 0\n  local vowels_index_count41 = 0\n  local\
    \ vowels_index_count42 = 0\n  local vowels_index_count43 = 0\n  local vowels_index_count44\
    \ = 0\n  local vowels_index_count45 = 0\n  local vowels_index_count46 = 0\n  local\
    \ vowels_index_count47 = 0\n  local vowels_index_count48 = 0\n  local vowels_index_count49\
    \ = 0\n  local vowels_index_count50 = 0\n  local vowels_index_count51 = 0\n  local\
    \ vowels_index_count52 = 0\n  local vowels_index_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppcq2k4ix.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3\
    \ = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\
    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9ikxix46.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count2\
    \ = 0\n    local vowels_index_count3 = 0\n    local vowels_index_count4 = 0\n\
    \    local vowels_index_count5 = 0\n    local vowels_index_count6 = 0\n    local\
    \ vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n    local vowels_index_count9\
    \ = 0\n    local vowels_index_count10 = 0\n    local vowels_index_count11 = 0\n\
    \    local vowels_index_count12 = 0\n    local vowels_index_count13 = 0\n    local\
    \ vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n    local vowels_index_count16\
    \ = 0\n    local vowels_index_count17 = 0\n    local vowels_index_count18 = 0\n\
    \    local vowels_index_count19 = 0\n    local vowels_index_count20 = 0\n    local\
    \ vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n    local vowels_index_count23\
    \ = 0\n    local vowels_index_count24 = 0\n    local vowels_index_count25 = 0\n\
    \    local vowels_index_count26 = 0\n    local vowels_index_count27 = 0\n    local\
    \ vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n    local vowels_index_count30\
    \ = 0\n    local vowels_index_count31 = 0\n    local vowels_index_count32 = 0\n\
    \    local vowels_index_count33 = 0\n    local vowels_index_count34 = 0\n    local\
    \ vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n    local vowels_index_count37\
    \ = 0\n    local vowels_index_count38 = 0\n    local vowels_index_count39 = 0\n\
    \    local vowels_index_count40 = 0\n    local vowels_index_count41 = 0\n    local\
    \ vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n    local vowels_index_count44\
    \ = 0\n    local vowels_index_count45 = 0\n    local vowels_index_count46 = 0\n\
    \    local vowels_index_count47 = 0\n    local vowels_index_count48 = 0\n    local\
    \ vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n    local vowels_index_count51\
    \ = 0\n    local vowels_index_count52 = 0\n    local vowels_index_count53 = 0\n\
    \    local vowels_index_count\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7otd9bk7.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_i1uac25.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqk24iyuj.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count\
    \ = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\
    \ttable.insert(vowels_index, vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ vowels_index[i])\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index\
    \ = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\
    \tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor\
    \ i = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\t\
    end\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i\
    \ = 1, vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\
    \tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1,\
    \ vowels_count do\n\t\ttable.insert(vowels_index, vowels_index[i])\n\tend\n\t\
    local vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpijyk1052.lua:80: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local vowel = word:sub(i,i)\n        if vowel:sub(1,1)\
    \ ~= vowel then\n            vowel_count[vowel] = vowel_count[vowel] + 1\n   \
    \     end\n    end\n    local vowel_count_sorted = {}\n    for vowel, count in\
    \ pairs(vowel_count) do\n        vowel_count_sorted[count] = vowel\n    end\n\
    \    local vowel_count_sorted = table.sort(vowel_count_sorted)\n    local vowel_count_sorted\
    \ = vowel_count_sorted[1]\n    for i = 1, #word do\n        local vowel = word:sub(i,i)\n\
    \        if vowel:sub(1,1) ~= vowel then\n            if vowel_count_sorted ==\
    \ 1 then\n                return vowel\n            else\n                local\
    \ vowel_count_sorted = vowel_count_sorted\n            end\n        end\n    end\n\
    \    return ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3jj18yc.lua:29:\
    \ attempt to index a nil value (local 'vowel_count_sorted')\nstack traceback:\n\
    \t/tmp/tmpq3jj18yc.lua:29: in local 'candidate'\n\t/tmp/tmpq3jj18yc.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_min_value = vowels_count - 1\n    local vowels_index_count_max_value\
    \ = vowels_count - 1\n    local vowels_index_count_min_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_min_value = vowels_count - 1\n    local vowels_index_count_max_value\
    \ = vowels_count - 1\n    local vowels_index_count_min_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_min_value = vowels_count - 1\n    local vowels_index_count_max_value\
    \ = vowels_count - 1\n    local vowels_index_count_min_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_min_value = vowels_count - 1\n    local vowels_index_count_max_value\
    \ = vowels_count - 1\n    local vowels_index_count_min_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_value\
    \ = vowels_count - 1\n    local vowels_index_count_max_value = vowels_count -\
    \ 1\n    local vowels_index_count_min_value = vowels_count - 1\n    local vowels_index_count_max_value\
    \ = vowels_count - 1\n    local vowels_index_count_min_value = vowels_count -\
    \ 1\n    local vowels_index_count_max_value = vowels_count - 1\n    local vowels_index_count_min_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpge3mfhkv.lua:77: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_max_count = 0\n\tlocal\
    \ vowels_index_min_count = 0\n\tlocal vowels_index_max_vowel = 0\n\tlocal vowels_index_min_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_count = 0\n\tlocal vowels_index_min_vowel_count\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_count = 0\n\tlocal vowels_index_min_vowel_vowel_count\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_count = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_count\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_count = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel_count\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_vowel_count = 0\n\tlocal\
    \ vowels_index_min_vowel_vowel_vowel_vowel_vowel_count = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\tlocal\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n\
    \tlocal vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_count = 0\n\tlocal\
    \ vowels_index_max_vowel_vowel_vowel_vowel_vowel_vowel_vowel = 0\n\tlocal vowels_index_min_vowel_vowel_vowel_vowel_vowel_vowel_vowel\
    \ = 0\n\tlocal vowels_index_max_vowel_vowel_vowel_vowel_vowel_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnel0053s.lua:72: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = 0\n  local vowels_index_count_max_min\
    \ = #vowels\n  local vowels_index_count_max_min_index = 1\n  local vowels_index_count_max_min_index_count\
    \ = 0\n  local vowels_index_count_max_min_index_count_min = #vowels\n  local vowels_index_count_max_min_index_count_max\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_index = #vowels\n\
    \  local vowels_index_count_max_min_index_count_max_min = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_index\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min\
    \ = #vowels\n  local vowels_index_count_max_min_index_count_max_min_index_count_max_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjkw0awpj.lua:64: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 1\n  local\
    \ vowels_index_count_prev = 1\n  local vowels_index_count_next = 1\n  local vowels_index_count_next2\
    \ = 1\n  local vowels_index_count_next3 = 1\n  local vowels_index_count_next4\
    \ = 1\n  local vowels_index_count_next5 = 1\n  local vowels_index_count_next6\
    \ = 1\n  local vowels_index_count_next7 = 1\n  local vowels_index_count_next8\
    \ = 1\n  local vowels_index_count_next9 = 1\n  local vowels_index_count_next10\
    \ = 1\n  local vowels_index_count_next11 = 1\n  local vowels_index_count_next12\
    \ = 1\n  local vowels_index_count_next13 = 1\n  local vowels_index_count_next14\
    \ = 1\n  local vowels_index_count_next15 = 1\n  local vowels_index_count_next16\
    \ = 1\n  local vowels_index_count_next17 = 1\n  local vowels_index_count_next18\
    \ = 1\n  local vowels_index_count_next19 = 1\n  local vowels_index_count_next20\
    \ = 1\n  local vowels_index_count_next21 = 1\n  local vowels_index_count_next22\
    \ = 1\n  local vowels_index_count_next23 = 1\n  local vowels_index_count_next24\
    \ = 1\n  local vowels_index_count_next25 = 1\n  local vowels_index_count_next26\
    \ = 1\n  local vowels_index_count_next27 = 1\n  local vowels_index_count_next28\
    \ = 1\n  local vowels_index_count_next29 = 1\n  local vowels_index_count_next30\
    \ = 1\n  local vowels_index_count_next31 = 1\n  local vowels_index_count_next32\
    \ = 1\n  local vowels_index_count_next33 = 1\n  local vowels_index_count_next34\
    \ = 1\n  local vowels_index_count_next35 = 1\n  local vowels_index_count_next36\
    \ = 1\n  local vowels_index_count_next37 = 1\n  local vowels_index_count_next38\
    \ = 1\n  local vowels_index_count_next39 = 1\n  local vowels_index_count_next40\
    \ = 1\n  local vowels_index_count_next41 = 1\n  local vowels_index_count_next42\
    \ = 1\n  local vowels_index_count_next43 = 1\n  local vowels_index_count_next44\
    \ = 1\n  local vowels_index_count_next45 = 1\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpanlp9wtf.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index2 = 0\n    local\
    \ vowels_index3 = 0\n    local vowels_index4 = 0\n    local vowels_index5 = 0\n\
    \    local vowels_index6 = 0\n    local vowels_index7 = 0\n    local vowels_index8\
    \ = 0\n    local vowels_index9 = 0\n    local vowels_index10 = 0\n    local vowels_index11\
    \ = 0\n    local vowels_index12 = 0\n    local vowels_index13 = 0\n    local vowels_index14\
    \ = 0\n    local vowels_index15 = 0\n    local vowels_index16 = 0\n    local vowels_index17\
    \ = 0\n    local vowels_index18 = 0\n    local vowels_index19 = 0\n    local vowels_index20\
    \ = 0\n    local vowels_index21 = 0\n    local vowels_index22 = 0\n    local vowels_index23\
    \ = 0\n    local vowels_index24 = 0\n    local vowels_index25 = 0\n    local vowels_index26\
    \ = 0\n    local vowels_index27 = 0\n    local vowels_index28 = 0\n    local vowels_index29\
    \ = 0\n    local vowels_index30 = 0\n    local vowels_index31 = 0\n    local vowels_index32\
    \ = 0\n    local vowels_index33 = 0\n    local vowels_index34 = 0\n    local vowels_index35\
    \ = 0\n    local vowels_index36 = 0\n    local vowels_index37 = 0\n    local vowels_index38\
    \ = 0\n    local vowels_index39 = 0\n    local vowels_index40 = 0\n    local vowels_index41\
    \ = 0\n    local vowels_index42 = 0\n    local vowels_index43 = 0\n    local vowels_index44\
    \ = 0\n    local vowels_index45 = 0\n    local vowels_index46 = 0\n    local vowels_index47\
    \ = 0\n    local vowels_index48 = 0\n    local vowels_index49 = 0\n    local vowels_index50\
    \ = 0\n    local vowels_index51 = 0\n    local vowels_index52 = 0\n    local vowels_index53\
    \ = 0\n    local vowels_index54 = 0\n    local vowels_index55 = 0\n    local vowels_index56\
    \ = 0\n    local vowels_index57 = 0\n    local vowels_index58 = 0\n    local vowels_index59\
    \ = 0\n    local vowels_index60 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuoiwsfvh.lua:97: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = #word\n    local vowels_index2 = #word - 1\n    local\
    \ vowels_index3 = #word - 2\n    local vowels_index4 = #word - 3\n    local vowels_index5\
    \ = #word - 4\n    local vowels_index6 = #word - 5\n    local vowels_index7 =\
    \ #word - 6\n    local vowels_index8 = #word - 7\n    local vowels_index9 = #word\
    \ - 8\n    local vowels_index10 = #word - 9\n    local vowels_index11 = #word\
    \ - 10\n    local vowels_index12 = #word - 11\n    local vowels_index13 = #word\
    \ - 12\n    local vowels_index14 = #word - 13\n    local vowels_index15 = #word\
    \ - 14\n    local vowels_index16 = #word - 15\n    local vowels_index17 = #word\
    \ - 16\n    local vowels_index18 = #word - 17\n    local vowels_index19 = #word\
    \ - 18\n    local vowels_index20 = #word - 19\n    local vowels_index21 = #word\
    \ - 20\n    local vowels_index22 = #word - 21\n    local vowels_index23 = #word\
    \ - 22\n    local vowels_index24 = #word - 23\n    local vowels_index25 = #word\
    \ - 24\n    local vowels_index26 = #word - 25\n    local vowels_index27 = #word\
    \ - 26\n    local vowels_index28 = #word - 27\n    local vowels_index29 = #word\
    \ - 28\n    local vowels_index30 = #word - 29\n    local vowels_index31 = #word\
    \ - 30\n    local vowels_index32 = #word - 31\n    local vowels_index33 = #word\
    \ - 32\n    local vowels_index34 = #word - 33\n    local vowels_index35 = #word\
    \ - 34\n    local vowels_index36 = #word - 35\n    local vowels_index37 = #word\
    \ - 36\n    local vowels_index38 = #word - 37\n    local vowels_index39 = #word\
    \ - 38\n    local vowels_index40 = #word - 39\n    local vowels_index41 = #word\
    \ - 40\n    local vowels_index42 = #word - 41\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdl4ffsq1.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = 0\n  local\
    \ vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #vowels\n  local vowels_index_count_min = 0\n  local vowels_index_count_min\
    \ = #vowels\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpreg4075n.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local vowel = word:sub(i,i)\n        if vowel:sub(1,1)\
    \ ~= vowel:sub(#vowel,1) then\n            vowel_count[vowel] = vowel_count[vowel]\
    \ + 1\n        end\n    end\n    local vowel_count_sorted = {}\n    for vowel,\
    \ count in pairs(vowel_count) do\n        vowel_count_sorted[count] = vowel\n\
    \    end\n    local closest_vowel = nil\n    local min_count = nil\n    for count\
    \ = 1, #vowel_count_sorted do\n        if min_count == nil or count < min_count\
    \ then\n            min_count = count\n            closest_vowel = vowel_count_sorted[count]\n\
    \        end\n    end\n    return closest_vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphx9b23vx.lua:42:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmphx9b23vx.lua:42: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_max2 = 0\n    local\
    \ vowels_index_min2 = 0\n    local vowels_index_max3 = 0\n    local vowels_index_min3\
    \ = 0\n    local vowels_index_max4 = 0\n    local vowels_index_min4 = 0\n    local\
    \ vowels_index_max5 = 0\n    local vowels_index_min5 = 0\n    local vowels_index_max6\
    \ = 0\n    local vowels_index_min6 = 0\n    local vowels_index_max7 = 0\n    local\
    \ vowels_index_min7 = 0\n    local vowels_index_max8 = 0\n    local vowels_index_min8\
    \ = 0\n    local vowels_index_max9 = 0\n    local vowels_index_min9 = 0\n    local\
    \ vowels_index_max10 = 0\n    local vowels_index_min10 = 0\n    local vowels_index_max11\
    \ = 0\n    local vowels_index_min11 = 0\n    local vowels_index_max12 = 0\n  \
    \  local vowels_index_min12 = 0\n    local vowels_index_max13 = 0\n    local vowels_index_min13\
    \ = 0\n    local vowels_index_max14 = 0\n    local vowels_index_min14 = 0\n  \
    \  local vowels_index_max15 = 0\n    local vowels_index_min15 = 0\n    local vowels_index_max16\
    \ = 0\n    local vowels_index_min16 = 0\n    local vowels_index_max17 = 0\n  \
    \  local vowels_index_min17 = 0\n    local vowels_index_max18 = 0\n    local vowels_index_min18\
    \ = 0\n    local vowels_index_max19 = 0\n    local vowels_index_min19 = 0\n  \
    \  local vowels_index_max20 = 0\n    local vowels_index_min20 = 0\n    local vowels_index_max21\
    \ = 0\n    local vowels_index_min21 = 0\n    local vowels_index_max22 = 0\n  \
    \  local vowels_index_min22 = 0\n    local vowels_index_max23 = 0\n    local vowels_index_min23\
    \ = 0\n    local vowels_index_max24 = 0\n    local vowels_index_min24 = 0\n  \
    \  local vowels_index_max25 = 0\n    local vowels_index_min25 = 0\n    local vowels_index_max26\
    \ = 0\n    local vowels_index_min26 = 0\n    local vowels_index_max27 = 0\n  \
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphgn0nm_d.lua:93: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index2 = 1\n\tlocal vowels_index3\
    \ = 1\n\tlocal vowels_index4 = 1\n\tlocal vowels_index5 = 1\n\tlocal vowels_index6\
    \ = 1\n\tlocal vowels_index7 = 1\n\tlocal vowels_index8 = 1\n\tlocal vowels_index9\
    \ = 1\n\tlocal vowels_index10 = 1\n\tlocal vowels_index11 = 1\n\tlocal vowels_index12\
    \ = 1\n\tlocal vowels_index13 = 1\n\tlocal vowels_index14 = 1\n\tlocal vowels_index15\
    \ = 1\n\tlocal vowels_index16 = 1\n\tlocal vowels_index17 = 1\n\tlocal vowels_index18\
    \ = 1\n\tlocal vowels_index19 = 1\n\tlocal vowels_index20 = 1\n\tlocal vowels_index21\
    \ = 1\n\tlocal vowels_index22 = 1\n\tlocal vowels_index23 = 1\n\tlocal vowels_index24\
    \ = 1\n\tlocal vowels_index25 = 1\n\tlocal vowels_index26 = 1\n\tlocal vowels_index27\
    \ = 1\n\tlocal vowels_index28 = 1\n\tlocal vowels_index29 = 1\n\tlocal vowels_index30\
    \ = 1\n\tlocal vowels_index31 = 1\n\tlocal vowels_index32 = 1\n\tlocal vowels_index33\
    \ = 1\n\tlocal vowels_index34 = 1\n\tlocal vowels_index35 = 1\n\tlocal vowels_index36\
    \ = 1\n\tlocal vowels_index37 = 1\n\tlocal vowels_index38 = 1\n\tlocal vowels_index39\
    \ = 1\n\tlocal vowels_index40 = 1\n\tlocal vowels_index41 = 1\n\tlocal vowels_index42\
    \ = 1\n\tlocal vowels_index43 = 1\n\tlocal vowels_index44 = 1\n\tlocal vowels_index45\
    \ = 1\n\tlocal vowels_index46 = 1\n\tlocal vowels_index47 = 1\n\tlocal vowels_index48\
    \ = 1\n\tlocal vowels_index49 = 1\n\tlocal vowels_index50 = 1\n\tlocal vowels_index51\
    \ = 1\n\tlocal vowels_index52 = 1\n\tlocal vowels_index53 = 1\n\tlocal vowels_index54\
    \ = 1\n\tlocal vowels_index55 = 1\n\tlocal vowels_index56 = 1\n\tlocal vowels_index57\
    \ = 1\n\tlocal vowels_index58 = 1\n\tlocal vowels_index\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqv3bka1f.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplsl_aofo.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = {}\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count2 = 0\n    local vowels_index_count3 = 0\n\
    \    local vowels_index_count4 = 0\n    local vowels_index_count5 = 0\n    local\
    \ vowels_index_count6 = 0\n    local vowels_index_count7 = 0\n    local vowels_index_count8\
    \ = 0\n    local vowels_index_count9 = 0\n    local vowels_index_count10 = 0\n\
    \    local vowels_index_count11 = 0\n    local vowels_index_count12 = 0\n    local\
    \ vowels_index_count13 = 0\n    local vowels_index_count14 = 0\n    local vowels_index_count15\
    \ = 0\n    local vowels_index_count16 = 0\n    local vowels_index_count17 = 0\n\
    \    local vowels_index_count18 = 0\n    local vowels_index_count19 = 0\n    local\
    \ vowels_index_count20 = 0\n    local vowels_index_count21 = 0\n    local vowels_index_count22\
    \ = 0\n    local vowels_index_count23 = 0\n    local vowels_index_count24 = 0\n\
    \    local vowels_index_count25 = 0\n    local vowels_index_count26 = 0\n    local\
    \ vowels_index_count27 = 0\n    local vowels_index_count28 = 0\n    local vowels_index_count29\
    \ = 0\n    local vowels_index_count30 = 0\n    local vowels_index_count31 = 0\n\
    \    local vowels_index_count32 = 0\n    local vowels_index_count33 = 0\n    local\
    \ vowels_index_count34 = 0\n    local vowels_index_count35 = 0\n    local vowels_index_count36\
    \ = 0\n    local vowels_index_count37 = 0\n    local vowels_index_count38 = 0\n\
    \    local vowels_index_count39 = 0\n    local vowels_index_count40 = 0\n    local\
    \ vowels_index_count41 = 0\n    local vowels_index_count42 = 0\n    local vowels_index_count43\
    \ = 0\n    local vowels_index_count44 = 0\n    local vowels_index_count45 = 0\n\
    \    local vowels_index_count46 = 0\n    local vowels_index_count47 = 0\n    local\
    \ vowels_index_count48 = 0\n    local vowels_index_count49 = 0\n    local vowels_index_count50\
    \ = 0\n    local vowels_index_count51 = 0\n    local vowels_index_count52 = 0\n\
    \    local vowels_index_count53 = 0\n    \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplbztuf8l.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #word\n    local vowels_index = {}\n \
    \   for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq0b6owel.lua:107: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal\
    \ vowels_index3 = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5\
    \ = #word\n\tlocal vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal\
    \ vowels_index8 = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10\
    \ = #word\n\tlocal vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\t\
    local vowels_index13 = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15\
    \ = #word\n\tlocal vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\t\
    local vowels_index18 = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20\
    \ = #word\n\tlocal vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\t\
    local vowels_index23 = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25\
    \ = #word\n\tlocal vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\t\
    local vowels_index28 = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30\
    \ = #word\n\tlocal vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\t\
    local vowels_index33 = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35\
    \ = #word\n\tlocal vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\t\
    local vowels_index38 = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40\
    \ = #word\n\tlocal vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\t\
    local vowels_index43 = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45\
    \ = #word\n\tlocal vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\t\
    local vowels_index48 = #word\n\tlocal vowels_index49 = #word\n\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd94i4804.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1wt4vb4.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 1\n  \
    \  local vowels_index_count_2 = 1\n    local vowels_index_count_3 = 1\n    local\
    \ vowels_index_count_4 = 1\n    local vowels_index_count_5 = 1\n    local vowels_index_count_6\
    \ = 1\n    local vowels_index_count_7 = 1\n    local vowels_index_count_8 = 1\n\
    \    local vowels_index_count_9 = 1\n    local vowels_index_count_10 = 1\n   \
    \ local vowels_index_count_11 = 1\n    local vowels_index_count_12 = 1\n    local\
    \ vowels_index_count_13 = 1\n    local vowels_index_count_14 = 1\n    local vowels_index_count_15\
    \ = 1\n    local vowels_index_count_16 = 1\n    local vowels_index_count_17 =\
    \ 1\n    local vowels_index_count_18 = 1\n    local vowels_index_count_19 = 1\n\
    \    local vowels_index_count_20 = 1\n    local vowels_index_count_21 = 1\n  \
    \  local vowels_index_count_22 = 1\n    local vowels_index_count_23 = 1\n    local\
    \ vowels_index_count_24 = 1\n    local vowels_index_count_25 = 1\n    local vowels_index_count_26\
    \ = 1\n    local vowels_index_count_27 = 1\n    local vowels_index_count_28 =\
    \ 1\n    local vowels_index_count_29 = 1\n    local vowels_index_count_30 = 1\n\
    \    local vowels_index_count_31 = 1\n    local vowels_index_count_32 = 1\n  \
    \  local vowels_index_count_33 = 1\n    local vowels_index_count_34 = 1\n    local\
    \ vowels_index_count_35 = 1\n    local vowels_index_count_36 = 1\n    local vowels_index_count_37\
    \ = 1\n    local vowels_index_count_38 = 1\n    local vowels_index_count_39 =\
    \ 1\n    local vowels_index_count_40 = 1\n    local vowels_index_count_41 = 1\n\
    \    local vowels_index_count_42 = 1\n    local vowels_index_count_43 = 1\n  \
    \  local vowels_index_count_44 = 1\n    local vowels_index_count_45 = 1\n    local\
    \ vowels_index_count_46 = 1\n    local vowels_index_count_47 = 1\n    local vowels_index_count_48\
    \ = 1\n    local vowels_index_count_49 = 1\n    local vowels_index_count_50 =\
    \ 1\n    local vowels_index_count_51 = 1\n    local vowels_index_count_\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdbjjt_56.lua:90: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_53 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg83r6wzu.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_max = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_sum\
    \ = 0\n\tlocal vowels_index_sum2 = 0\n\tlocal vowels_index_sum3 = 0\n\tlocal vowels_index_sum4\
    \ = 0\n\tlocal vowels_index_sum5 = 0\n\tlocal vowels_index_sum6 = 0\n\tlocal vowels_index_sum7\
    \ = 0\n\tlocal vowels_index_sum8 = 0\n\tlocal vowels_index_sum9 = 0\n\tlocal vowels_index_sum10\
    \ = 0\n\tlocal vowels_index_sum11 = 0\n\tlocal vowels_index_sum12 = 0\n\tlocal\
    \ vowels_index_sum13 = 0\n\tlocal vowels_index_sum14 = 0\n\tlocal vowels_index_sum15\
    \ = 0\n\tlocal vowels_index_sum16 = 0\n\tlocal vowels_index_sum17 = 0\n\tlocal\
    \ vowels_index_sum18 = 0\n\tlocal vowels_index_sum19 = 0\n\tlocal vowels_index_sum20\
    \ = 0\n\tlocal vowels_index_sum21 = 0\n\tlocal vowels_index_sum22 = 0\n\tlocal\
    \ vowels_index_sum23 = 0\n\tlocal vowels_index_sum24 = 0\n\tlocal vowels_index_sum25\
    \ = 0\n\tlocal vowels_index_sum26 = 0\n\tlocal vowels_index_sum27 = 0\n\tlocal\
    \ vowels_index_sum28 = 0\n\tlocal vowels_index_sum29 = 0\n\tlocal vowels_index_sum30\
    \ = 0\n\tlocal vowels_index_sum31 = 0\n\tlocal vowels_index_sum32 = 0\n\tlocal\
    \ vowels_index_sum33 = 0\n\tlocal vowels_index_sum34 = 0\n\tlocal vowels_index_sum35\
    \ = 0\n\tlocal vowels_index_sum36 = 0\n\tlocal vowels_index_sum37 = 0\n\tlocal\
    \ vowels_index_sum38 = 0\n\tlocal vowels_index_sum39 = 0\n\tlocal vowels_index_sum40\
    \ = 0\n\tlocal vowels_index_sum41 = 0\n\tlocal vowels_index_sum42 = 0\n\tlocal\
    \ vowels_index_sum43 = 0\n\tlocal vowels_index_sum44 = 0\n\tlocal vowels_index_sum45\
    \ = 0\n\tlocal vowels_index_sum46 = 0\n\tlocal vowels_index_sum47 = 0\n\tlocal\
    \ vowels_index_sum48 = 0\n\tlocal vowels_index_sum49 = 0\n\tlocal vowels_index_sum50\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn2gue546.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowel_index = 1\n    local vowel_found = false\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n    local vowel_found_index = nil\n    local\
    \ vowel_found_index = nil\n    local vowel_found_index = nil\n    local vowel_found_index\
    \ = nil\n    local vowel_found_index = nil\n    local vowel_found_index = nil\n\
    \    local vowel_found_index = nil\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8qref21v.lua:100: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max = #word\n\tlocal vowels_index_count_max_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max_index_count_min_index = 1\n\tlocal vowels_index_count_max_index_count_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_count = 0\n\tlocal\
    \ vowels_index_count_max_index_count_max_index_count_max = #word\n\tlocal vowels_index_count_max_index_count_max_index_min\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_min_index = 1\n\
    \tlocal vowels_index_count_max_index_count_max_index_max_index = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_max_index_min\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_max_index_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min\
    \ = #word\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index\
    \ = 1\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_max_index_count\
    \ = 0\n\tlocal vowels_index_count_max_index_count_max_index_max_index_max_index_max_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphl7wkui6.lua:69: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowel_count = {}\n  \
    \  for i = 1, #word do\n        local letter = word:sub(i, i)\n        if vowels[letter]\
    \ then\n            vowel_count[letter] = vowel_count[letter] + 1\n        end\n\
    \    end\n    local vowel_count_sorted = {}\n    for key, value in pairs(vowel_count)\
    \ do\n        vowel_count_sorted[#vowel_count_sorted + 1] = key .. value\n   \
    \ end\n    table.sort(vowel_count_sorted, function(a, b) return a:tonumber() >\
    \ b:tonumber() end)\n    return vowel_count_sorted[#vowel_count_sorted]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4famyup0.lua:35:\
    \ expected: \"u\"\nactual: nil\nstack traceback:\n\t/tmp/tmp4famyup0.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_found = false\n\tlocal\
    \ vowel_position = -1\n\tlocal vowel_position2 = -1\n\tlocal vowel_position3 =\
    \ -1\n\tlocal vowel_position4 = -1\n\tlocal vowel_position5 = -1\n\tlocal vowel_position6\
    \ = -1\n\tlocal vowel_position7 = -1\n\tlocal vowel_position8 = -1\n\tlocal vowel_position9\
    \ = -1\n\tlocal vowel_position10 = -1\n\tlocal vowel_position11 = -1\n\tlocal\
    \ vowel_position12 = -1\n\tlocal vowel_position13 = -1\n\tlocal vowel_position14\
    \ = -1\n\tlocal vowel_position15 = -1\n\tlocal vowel_position16 = -1\n\tlocal\
    \ vowel_position17 = -1\n\tlocal vowel_position18 = -1\n\tlocal vowel_position19\
    \ = -1\n\tlocal vowel_position20 = -1\n\tlocal vowel_position21 = -1\n\tlocal\
    \ vowel_position22 = -1\n\tlocal vowel_position23 = -1\n\tlocal vowel_position24\
    \ = -1\n\tlocal vowel_position25 = -1\n\tlocal vowel_position26 = -1\n\tlocal\
    \ vowel_position27 = -1\n\tlocal vowel_position28 = -1\n\tlocal vowel_position29\
    \ = -1\n\tlocal vowel_position30 = -1\n\tlocal vowel_position31 = -1\n\tlocal\
    \ vowel_position32 = -1\n\tlocal vowel_position33 = -1\n\tlocal vowel_position34\
    \ = -1\n\tlocal vowel_position35 = -1\n\tlocal vowel_position36 = -1\n\tlocal\
    \ vowel_position37 = -1\n\tlocal vowel_position38 = -1\n\tlocal vowel_position39\
    \ = -1\n\tlocal vowel_position40 = -1\n\tlocal vowel_position41 = -1\n\tlocal\
    \ vowel_position42 = -1\n\tlocal vowel_position43 = -1\n\tlocal vowel_position44\
    \ = -1\n\tlocal vowel_position45 = -1\n\tlocal vowel_position46 = -1\n\tlocal\
    \ vowel_position47 = -1\n\tlocal vowel_position48 = -1\n\tlocal vowel_position49\
    \ = -1\n\tlocal vowel_position50 = -1\n\tlocal vowel_position51 = -1\n\tlocal\
    \ vowel_position52 = -1\n\tlocal vowel_position53 = -1\n\tlocal vowel_position54\
    \ = -1\n\tlocal vowel_position55 = -1\n\tlocal vowel_position56 = -1\n\tlocal\
    \ vowel_position57 = -1\n\tlocal vowel_position58 = -1\n\tlocal vowel_position59\
    \ = -1\n\tlocal vowel_position60 = -1\n\tlocal vowel\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplozuwwe3.lua:98: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_minus_one\
    \ = 0\n    local vowels_index_count_minus_two = 0\n    local vowels_index_count_minus_three\
    \ = 0\n    local vowels_index_count_minus_four = 0\n    local vowels_index_count_minus_five\
    \ = 0\n    local vowels_index_count_minus_six = 0\n    local vowels_index_count_minus_seven\
    \ = 0\n    local vowels_index_count_minus_eight = 0\n    local vowels_index_count_minus_nine\
    \ = 0\n    local vowels_index_count_minus_ten = 0\n    local vowels_index_count_minus_eleven\
    \ = 0\n    local vowels_index_count_minus_twelve = 0\n    local vowels_index_count_minus_thirteen\
    \ = 0\n    local vowels_index_count_minus_fourteen = 0\n    local vowels_index_count_minus_fifteen\
    \ = 0\n    local vowels_index_count_minus_sixteen = 0\n    local vowels_index_count_minus_seventeen\
    \ = 0\n    local vowels_index_count_minus_eighteen = 0\n    local vowels_index_count_minus_nineteen\
    \ = 0\n    local vowels_index_count_minus_twenty = 0\n    local vowels_index_count_minus_thirty\
    \ = 0\n    local vowels_index_count_minus_forty = 0\n    local vowels_index_count_minus_fifty\
    \ = 0\n    local vowels_index_count_minus_sixty = 0\n    local vowels_index_count_minus_seventy\
    \ = 0\n    local vowels_index_count_minus_eighty = 0\n    local vowels_index_count_minus_ninety\
    \ = 0\n    local vowels_index_count_minus_hundred = 0\n    local vowels_index_count_minus_thousand\
    \ = 0\n    local vowels_index_count_minus_million = 0\n    local vowels_index_count_minus_billion\
    \ = 0\n    local vowels_index_count_minus_trillion = 0\n    local vowels_index_count_minus_quadrillion\
    \ = 0\n    local vowels_index_count_minus_quintillion = 0\n    local vowels_index_count_minus_sextillion\
    \ = 0\n    local vowels_index_count_minus_septillion = 0\n    local vowels_index_count_minus_octillion\
    \ = 0\n    local vowels_index_count_minus_nonillion = 0\n    local vowels_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_vr617a.lua:78: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = #word\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpysm5tdjf.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = #word\n    local vowels_index2 = #word\n    local vowels_index3\
    \ = #word\n    local vowels_index4 = #word\n    local vowels_index5 = #word\n\
    \    local vowels_index6 = #word\n    local vowels_index7 = #word\n    local vowels_index8\
    \ = #word\n    local vowels_index9 = #word\n    local vowels_index10 = #word\n\
    \    local vowels_index11 = #word\n    local vowels_index12 = #word\n    local\
    \ vowels_index13 = #word\n    local vowels_index14 = #word\n    local vowels_index15\
    \ = #word\n    local vowels_index16 = #word\n    local vowels_index17 = #word\n\
    \    local vowels_index18 = #word\n    local vowels_index19 = #word\n    local\
    \ vowels_index20 = #word\n    local vowels_index21 = #word\n    local vowels_index22\
    \ = #word\n    local vowels_index23 = #word\n    local vowels_index24 = #word\n\
    \    local vowels_index25 = #word\n    local vowels_index26 = #word\n    local\
    \ vowels_index27 = #word\n    local vowels_index28 = #word\n    local vowels_index29\
    \ = #word\n    local vowels_index30 = #word\n    local vowels_index31 = #word\n\
    \    local vowels_index32 = #word\n    local vowels_index33 = #word\n    local\
    \ vowels_index34 = #word\n    local vowels_index35 = #word\n    local vowels_index36\
    \ = #word\n    local vowels_index37 = #word\n    local vowels_index38 = #word\n\
    \    local vowels_index39 = #word\n    local vowels_index40 = #word\n    local\
    \ vowels_index41 = #word\n    local vowels_index42 = #word\n    local vowels_index43\
    \ = #word\n    local vowels_index44 = #word\n    local vowels_index45 = #word\n\
    \    local vowels_index46 = #word\n    local vowels_index47 = #word\n    local\
    \ vowels_index48 = #word\n    local vowels_index49 = #word\n    local vowels_index50\
    \ = #word\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpco63kbgt.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_count = 0\n\t\
    local vowels_index_index_index_index_index_index_index_index_count = 0\n\tlocal\
    \ vowels_index_index_index_index_index_index_index_index_count = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_index_index_index_index_index_count\
    \ = 0\n\tlocal vowels_index_index_index_index_index_index_index_index_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4y9p99bk.lua:70: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqn8v3u1.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplsl_aofo.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4e7v8lg0.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal\
    \ vowels_index_count_prev = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_next2\
    \ = 1\n\tlocal vowels_index_count_next3 = 1\n\tlocal vowels_index_count_next4\
    \ = 1\n\tlocal vowels_index_count_next5 = 1\n\tlocal vowels_index_count_next6\
    \ = 1\n\tlocal vowels_index_count_next7 = 1\n\tlocal vowels_index_count_next8\
    \ = 1\n\tlocal vowels_index_count_next9 = 1\n\tlocal vowels_index_count_next10\
    \ = 1\n\tlocal vowels_index_count_next11 = 1\n\tlocal vowels_index_count_next12\
    \ = 1\n\tlocal vowels_index_count_next13 = 1\n\tlocal vowels_index_count_next14\
    \ = 1\n\tlocal vowels_index_count_next15 = 1\n\tlocal vowels_index_count_next16\
    \ = 1\n\tlocal vowels_index_count_next17 = 1\n\tlocal vowels_index_count_next18\
    \ = 1\n\tlocal vowels_index_count_next19 = 1\n\tlocal vowels_index_count_next20\
    \ = 1\n\tlocal vowels_index_count_next21 = 1\n\tlocal vowels_index_count_next22\
    \ = 1\n\tlocal vowels_index_count_next23 = 1\n\tlocal vowels_index_count_next24\
    \ = 1\n\tlocal vowels_index_count_next25 = 1\n\tlocal vowels_index_count_next26\
    \ = 1\n\tlocal vowels_index_count_next27 = 1\n\tlocal vowels_index_count_next28\
    \ = 1\n\tlocal vowels_index_count_next29 = 1\n\tlocal vowels_index_count_next30\
    \ = 1\n\tlocal vowels_index_count_next31 = 1\n\tlocal vowels_index_count_next32\
    \ = 1\n\tlocal vowels_index_count_next33 = 1\n\tlocal vowels_index_count_next34\
    \ = 1\n\tlocal vowels_index_count_next35 = 1\n\tlocal vowels_index_count_next36\
    \ = 1\n\tlocal vowels_index_count_next37 = 1\n\tlocal vowels_index_count_next38\
    \ = 1\n\tlocal vowels_index_count_next39 = 1\n\tlocal vowels_index_count_next40\
    \ = 1\n\tlocal vowels_index_count_next41 = 1\n\tlocal vowels_index_count_next42\
    \ = 1\n\tlocal vowels_index_count_next43 = 1\n\tlocal vowels_index_count_next44\
    \ = 1\n\tlocal vowels_index_count_next45 = 1\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcbtkhypb.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_max\
    \ = 0\n    local vowels_index_min = 0\n    local vowels_index_current = 0\n  \
    \  local vowels_index_current_max = 0\n    local vowels_index_current_min = 0\n\
    \    local vowels_index_current_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowels_index_current_min_count = 0\n    local vowels_index_current_max_count\
    \ = 0\n    local vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc9p_wa9l.lua:93: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ vowels[i])\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, vowels_index[i])\n\
    \    end\n    local vowels_count = #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4vcp_ipt.lua:83: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','y'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = #vowels-1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcbakqafl.lua:81: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 1\n    local vowels_index_end\n    local vowels_index_start\n\
    \    local vowels_index_start_end\n    local vowels_index_start_end_end\n    local\
    \ vowels_index_start_end_end_end\n    local vowels_index_start_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end\n    local vowels_index_start_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\n  \
    \  local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\n\
    \    local vowels_index_start_end_end_end_end_end_end_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy_i_zix7.lua:66: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count2\
    \ = 0\n    local vowels_index_count3 = 0\n    local vowels_index_count4 = 0\n\
    \    local vowels_index_count5 = 0\n    local vowels_index_count6 = 0\n    local\
    \ vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n    local vowels_index_count9\
    \ = 0\n    local vowels_index_count10 = 0\n    local vowels_index_count11 = 0\n\
    \    local vowels_index_count12 = 0\n    local vowels_index_count13 = 0\n    local\
    \ vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n    local vowels_index_count16\
    \ = 0\n    local vowels_index_count17 = 0\n    local vowels_index_count18 = 0\n\
    \    local vowels_index_count19 = 0\n    local vowels_index_count20 = 0\n    local\
    \ vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n    local vowels_index_count23\
    \ = 0\n    local vowels_index_count24 = 0\n    local vowels_index_count25 = 0\n\
    \    local vowels_index_count26 = 0\n    local vowels_index_count27 = 0\n    local\
    \ vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n    local vowels_index_count30\
    \ = 0\n    local vowels_index_count31 = 0\n    local vowels_index_count32 = 0\n\
    \    local vowels_index_count33 = 0\n    local vowels_index_count34 = 0\n    local\
    \ vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n    local vowels_index_count37\
    \ = 0\n    local vowels_index_count38 = 0\n    local vowels_index_count39 = 0\n\
    \    local vowels_index_count40 = 0\n    local vowels_index_count41 = 0\n    local\
    \ vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n    local vowels_index_count44\
    \ = 0\n    local vowels_index_count45 = 0\n    local vowels_index_count46 = 0\n\
    \    local vowels_index_count47 = 0\n    local vowels_index_count48 = 0\n    local\
    \ vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n    local vowels_index_count51\
    \ = 0\n    local vowels_index_count52 = 0\n    local vowels_index_count53 = 0\n\
    \    local vowels_index_count\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq1r5qpz8.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn1vppxnd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n  \
    \  local vowels_index_count_max = 0\n    local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxrzaet3g.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word - vowels_count + 1\n    local vowels_index_count_min = vowels_count\
    \ - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2avdstn_.lua:71: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal\
    \ vowels_index3 = #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5\
    \ = #word\n\tlocal vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal\
    \ vowels_index8 = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10\
    \ = #word\n\tlocal vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\t\
    local vowels_index13 = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15\
    \ = #word\n\tlocal vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\t\
    local vowels_index18 = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20\
    \ = #word\n\tlocal vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\t\
    local vowels_index23 = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25\
    \ = #word\n\tlocal vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\t\
    local vowels_index28 = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30\
    \ = #word\n\tlocal vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\t\
    local vowels_index33 = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35\
    \ = #word\n\tlocal vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\t\
    local vowels_index38 = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40\
    \ = #word\n\tlocal vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\t\
    local vowels_index43 = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45\
    \ = #word\n\tlocal vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\t\
    local vowels_index48 = #word\n\tlocal vowels_index49 = #word\n\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd94i4804.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = 1\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min\
    \ = 0\n  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n\
    \  local vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local\
    \ vowels_index_count_max = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max\
    \ = 0\n  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n\
    \  local vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local\
    \ vowels_index_count_min = 0\n  local vowels_index_count_max = 0\n  local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpphvqowxc.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = {}\n\tlocal vowels_index_count = {}\n\tlocal\
    \ vowels_index_count[1] = 1\n\tlocal vowels_index_count[2] = 2\n\tlocal vowels_index_count[3]\
    \ = 3\n\tlocal vowels_index_count[4] = 4\n\tlocal vowels_index_count[5] = 5\n\t\
    local vowels_index_count[6] = 6\n\tlocal vowels_index_count[7] = 7\n\tlocal vowels_index_count[8]\
    \ = 8\n\tlocal vowels_index_count[9] = 9\n\tlocal vowels_index_count[10] = 10\n\
    \tlocal vowels_index_count[11] = 11\n\tlocal vowels_index_count[12] = 12\n\tlocal\
    \ vowels_index_count[13] = 13\n\tlocal vowels_index_count[14] = 14\n\tlocal vowels_index_count[15]\
    \ = 15\n\tlocal vowels_index_count[16] = 16\n\tlocal vowels_index_count[17] =\
    \ 17\n\tlocal vowels_index_count[18] = 18\n\tlocal vowels_index_count[19] = 19\n\
    \tlocal vowels_index_count[20] = 20\n\tlocal vowels_index_count[21] = 21\n\tlocal\
    \ vowels_index_count[22] = 22\n\tlocal vowels_index_count[23] = 23\n\tlocal vowels_index_count[24]\
    \ = 24\n\tlocal vowels_index_count[25] = 25\n\tlocal vowels_index_count[26] =\
    \ 26\n\tlocal vowels_index_count[27] = 27\n\tlocal vowels_index_count[28] = 28\n\
    \tlocal vowels_index_count[29] = 29\n\tlocal vowels_index_count[30] = 30\n\tlocal\
    \ vowels_index_count[31] = 31\n\tlocal vowels_index_count[32] = 32\n\tlocal vowels_index_count[33]\
    \ = 33\n\tlocal vowels_index_count[34] = 34\n\tlocal vowels_index_count[35] =\
    \ 35\n\tlocal vowels_index_count[36] = 36\n\tlocal vowels_index_count[37] = 37\n\
    \tlocal vowels_index_count[38] = 38\n\tlocal vowels_index_count[39] = 39\n\tlocal\
    \ vowels_index_count[40] = 40\n\tlocal vowels_index_count[41] = 41\n\tlocal vowels_index_count[42]\
    \ = 42\n\tlocal vowels_index_count[43] = 43\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg7kbntjc.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    local vowels_index_count = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_count_min = 0\n \
    \   local vowels_index_count_max = 0\n    local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj8oa7ie7.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = 0\n\tlocal\
    \ vowel_found = false\n\tlocal vowel_position = -1\n\tlocal vowel_position_count\
    \ = 0\n\tlocal vowel_position_count2 = 0\n\tlocal vowel_position_count3 = 0\n\t\
    local vowel_position_count4 = 0\n\tlocal vowel_position_count5 = 0\n\tlocal vowel_position_count6\
    \ = 0\n\tlocal vowel_position_count7 = 0\n\tlocal vowel_position_count8 = 0\n\t\
    local vowel_position_count9 = 0\n\tlocal vowel_position_count10 = 0\n\tlocal vowel_position_count11\
    \ = 0\n\tlocal vowel_position_count12 = 0\n\tlocal vowel_position_count13 = 0\n\
    \tlocal vowel_position_count14 = 0\n\tlocal vowel_position_count15 = 0\n\tlocal\
    \ vowel_position_count16 = 0\n\tlocal vowel_position_count17 = 0\n\tlocal vowel_position_count18\
    \ = 0\n\tlocal vowel_position_count19 = 0\n\tlocal vowel_position_count20 = 0\n\
    \tlocal vowel_position_count21 = 0\n\tlocal vowel_position_count22 = 0\n\tlocal\
    \ vowel_position_count23 = 0\n\tlocal vowel_position_count24 = 0\n\tlocal vowel_position_count25\
    \ = 0\n\tlocal vowel_position_count26 = 0\n\tlocal vowel_position_count27 = 0\n\
    \tlocal vowel_position_count28 = 0\n\tlocal vowel_position_count29 = 0\n\tlocal\
    \ vowel_position_count30 = 0\n\tlocal vowel_position_count31 = 0\n\tlocal vowel_position_count32\
    \ = 0\n\tlocal vowel_position_count33 = 0\n\tlocal vowel_position_count34 = 0\n\
    \tlocal vowel_position_count35 = 0\n\tlocal vowel_position_count36 = 0\n\tlocal\
    \ vowel_position_count37 = 0\n\tlocal vowel_position_count38 = 0\n\tlocal vowel_position_count39\
    \ = 0\n\tlocal vowel_position_count40 = 0\n\tlocal vowel_position_count41 = 0\n\
    \tlocal vowel_position_count42 = 0\n\tlocal vowel_position_count43 = 0\n\tlocal\
    \ vowel_position_count44 = 0\n\tlocal vowel_position_count45 = 0\n\tlocal vowel_position_count46\
    \ = 0\n\tlocal vowel_position_count47 = 0\n\tlocal vowel_position_count48 = 0\n\
    \tlocal vowel_position_count49 = 0\n\tlocal vowel_position_count50 = 0\n\tlocal\
    \ vowel_position_count51 = 0\n\tlocal vowel_position_count52 = 0\n\tlocal vowel_position_count53\
    \ = 0\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5t2sfp01.lua:93: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = #word\n  local vowels_index2 = #word\n  local vowels_index3\
    \ = #word\n  local vowels_index4 = #word\n  local vowels_index5 = #word\n  local\
    \ vowels_index6 = #word\n  local vowels_index7 = #word\n  local vowels_index8\
    \ = #word\n  local vowels_index9 = #word\n  local vowels_index10 = #word\n  local\
    \ vowels_index11 = #word\n  local vowels_index12 = #word\n  local vowels_index13\
    \ = #word\n  local vowels_index14 = #word\n  local vowels_index15 = #word\n  local\
    \ vowels_index16 = #word\n  local vowels_index17 = #word\n  local vowels_index18\
    \ = #word\n  local vowels_index19 = #word\n  local vowels_index20 = #word\n  local\
    \ vowels_index21 = #word\n  local vowels_index22 = #word\n  local vowels_index23\
    \ = #word\n  local vowels_index24 = #word\n  local vowels_index25 = #word\n  local\
    \ vowels_index26 = #word\n  local vowels_index27 = #word\n  local vowels_index28\
    \ = #word\n  local vowels_index29 = #word\n  local vowels_index30 = #word\n  local\
    \ vowels_index31 = #word\n  local vowels_index32 = #word\n  local vowels_index33\
    \ = #word\n  local vowels_index34 = #word\n  local vowels_index35 = #word\n  local\
    \ vowels_index36 = #word\n  local vowels_index37 = #word\n  local vowels_index38\
    \ = #word\n  local vowels_index39 = #word\n  local vowels_index40 = #word\n  local\
    \ vowels_index41 = #word\n  local vowels_index42 = #word\n  local vowels_index43\
    \ = #word\n  local vowels_index44 = #word\n  local vowels_index45 = #word\n  local\
    \ vowels_index46 = #word\n  local vowels_index47 = #word\n  local vowels_index48\
    \ = #word\n  local vowels_index49 = #word\n  local vowels_index50 = #word\n  local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg1cd_m36.lua:88: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count = 0\n    local vowels_index_count = 0\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count = 0\n    local vowels_index_count = 0\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmqwju35q.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max_min\
    \ = #word\n\tlocal vowels_index_count_max_min_index = 1\n\tlocal vowels_index_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_max = #word\n\tlocal vowels_index_count_max_min_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min = #word\n\tlocal vowels_index_count_max_min_count_max_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count = 0\n\tlocal vowels_index_count_max_min_count_max_min_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_count_max_min_count_min = 1\n\t\
    local vowels_index_count_max_min_count_max_min_count_max_min_index = 1\n\tlocal\
    \ vowels_index_count_max_min_count_max_min_count_max_min_count = 0\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_min\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_index\
    \ = 1\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max_min_count_max\
    \ = #word\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8haerqhd.lua:66: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local\
    \ vowels_count = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count\
    \ do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count = #vowels\n\
    \  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n  for\
    \ i = 1, vowels_count do\n    table.insert(vowels_index, i)\n  end\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, vowels_count do\n    table.insert(vowels_index,\
    \ i)\n  end\n  local vowels_count = #vowels\n  local vowels_index = {}\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf5jxjpee.lua:109: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdrwunc9b.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_max_index = 1\n    local vowels_index_count_min_index\
    \ = 1\n    local vowels_index_count_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4ro1zm2u.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe799cbhs.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqdfahgw8.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750514
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(#word, vowels_count)\n\tlocal vowels_index_count_min\
    \ = math.min(#word, vowels_count)\n\tlocal vowels_index_count_max = math.max(#word,\
    \ vowels_count)\n\tlocal vowels_index_count_min = math.min(#word, vowels_count)\n\
    \tlocal vowels_index_count_max = math.max(\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf_lpctwz.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_prev\
    \ = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next = 1\n\tlocal vowels_index_count_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next = 1\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_next_prev = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3bwovevl.lua:69: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 0\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 0\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = #word\n  local vowels_index_count_min\
    \ = #word\n  local vowels_index_count_max = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppisa5kk0.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 1\n  local vowels_index_count_prev\
    \ = 1\n  local vowels_index_count_next = 1\n  local vowels_index_count_prev2 =\
    \ 1\n  local vowels_index_count_next2 = 1\n  local vowels_index_count_prev3 =\
    \ 1\n  local vowels_index_count_next3 = 1\n  local vowels_index_count_prev4 =\
    \ 1\n  local vowels_index_count_next4 = 1\n  local vowels_index_count_prev5 =\
    \ 1\n  local vowels_index_count_next5 = 1\n  local vowels_index_count_prev6 =\
    \ 1\n  local vowels_index_count_next6 = 1\n  local vowels_index_count_prev7 =\
    \ 1\n  local vowels_index_count_next7 = 1\n  local vowels_index_count_prev8 =\
    \ 1\n  local vowels_index_count_next8 = 1\n  local vowels_index_count_prev9 =\
    \ 1\n  local vowels_index_count_next9 = 1\n  local vowels_index_count_prev10 =\
    \ 1\n  local vowels_index_count_next10 = 1\n  local vowels_index_count_prev11\
    \ = 1\n  local vowels_index_count_next11 = 1\n  local vowels_index_count_prev12\
    \ = 1\n  local vowels_index_count_next12 = 1\n  local vowels_index_count_prev13\
    \ = 1\n  local vowels_index_count_next13 = 1\n  local vowels_index_count_prev14\
    \ = 1\n  local vowels_index_count_next14 = 1\n  local vowels_index_count_prev15\
    \ = 1\n  local vowels_index_count_next15 = 1\n  local vowels_index_count_prev16\
    \ = 1\n  local vowels_index_count_next16 = 1\n  local vowels_index_count_prev17\
    \ = 1\n  local vowels_index_count_next17 = 1\n  local vowels_index_count_prev18\
    \ = 1\n  local vowels_index_count_next18 = 1\n  local vowels_index_count_prev19\
    \ = 1\n  local vowels_index_count_next19 = 1\n  local vowels_index_count_prev20\
    \ = 1\n  local vowels_index_count_next20 = 1\n  local vowels_index_count_prev21\
    \ = 1\n  local vowels_index_count_next21 = 1\n  local vowels_index_count_prev22\
    \ = 1\n  local vowels_index_count_next22 = 1\n  local vowels_index_count_prev23\
    \ = 1\n  local vowels_index_count_next23 = 1\n  local vowels_index_count_prev24\
    \ = 1\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzk387yu9.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_max\
    \ = 0\n  local vowels_index_min = 0\n  local vowels_index_max_count = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_index\
    \ = 0\n  local vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_index = 0\n  local\
    \ vowels_index_max_count = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_index = 0\n  local vowels_index_max_count = 0\n\
    \  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n\
    \  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n\
    \  local vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local\
    \ vowels_index_min_count = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count\
    \ = 0\n  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n\
    \  local vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local\
    \ vowels_index_max_index = 0\n  local vowels_index_min_count = 0\n  local vowels_index_max_index\
    \ = 0\n  local vowels_index_min_count = 0\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbm78aami.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = 0\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_min\
    \ = 0\n    local vowels_index_count_max_min_index = 0\n    local vowels_index_count_max_min_index2\
    \ = 0\n    local vowels_index_count_max_min_index3 = 0\n    local vowels_index_count_max_min_index4\
    \ = 0\n    local vowels_index_count_max_min_index5 = 0\n    local vowels_index_count_max_min_index6\
    \ = 0\n    local vowels_index_count_max_min_index7 = 0\n    local vowels_index_count_max_min_index8\
    \ = 0\n    local vowels_index_count_max_min_index9 = 0\n    local vowels_index_count_max_min_index10\
    \ = 0\n    local vowels_index_count_max_min_index11 = 0\n    local vowels_index_count_max_min_index12\
    \ = 0\n    local vowels_index_count_max_min_index13 = 0\n    local vowels_index_count_max_min_index14\
    \ = 0\n    local vowels_index_count_max_min_index15 = 0\n    local vowels_index_count_max_min_index16\
    \ = 0\n    local vowels_index_count_max_min_index17 = 0\n    local vowels_index_count_max_min_index18\
    \ = 0\n    local vowels_index_count_max_min_index19 = 0\n    local vowels_index_count_max_min_index20\
    \ = 0\n    local vowels_index_count_max_min_index21 = 0\n    local vowels_index_count_max_min_index22\
    \ = 0\n    local vowels_index_count_max_min_index23 = 0\n    local vowels_index_count_max_min_index24\
    \ = 0\n    local vowels_index_count_max_min_index25 = 0\n    local vowels_index_count_max_min_index26\
    \ = 0\n    local vowels_index_count_max_min_index27 = 0\n    local vowels_index_count_max_min_index28\
    \ = 0\n    local vowels_index_count_max_min_index29 = 0\n    local vowels_index_count_max_min_index30\
    \ = 0\n    local vowels_index_count_max_min_index31 = 0\n    local vowels_index_count_max_min_index32\
    \ = 0\n    local vowels_index_count_max_min_index33 = 0\n    local vowels_index_count_max_min_index34\
    \ = 0\n    local vowels_index_count_max_min_index35 = 0\n    local vowels_index_count_max_min_index36\
    \ = 0\n    local vowels_index_count_max_min_index37 = 0\n    local vowels_index_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1bz8nal1.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy22nocjo.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxqpiydrd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\
    \tlocal vowels_index_count_max\n\tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\
    \tlocal vowels_index_count_min\n\tlocal vowels_index_count_max\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz4lsw8i5.lua:99: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ 1\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    local vowels_index_count_max\
    \ = 1\n    local vowels_index_count_min = 1\n    \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn6z3rzk7.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u'}\n  local vowels_count = #vowels\n  local\
    \ vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count2\
    \ = 0\n  local vowels_index_count3 = 0\n  local vowels_index_count4 = 0\n  local\
    \ vowels_index_count5 = 0\n  local vowels_index_count6 = 0\n  local vowels_index_count7\
    \ = 0\n  local vowels_index_count8 = 0\n  local vowels_index_count9 = 0\n  local\
    \ vowels_index_count10 = 0\n  local vowels_index_count11 = 0\n  local vowels_index_count12\
    \ = 0\n  local vowels_index_count13 = 0\n  local vowels_index_count14 = 0\n  local\
    \ vowels_index_count15 = 0\n  local vowels_index_count16 = 0\n  local vowels_index_count17\
    \ = 0\n  local vowels_index_count18 = 0\n  local vowels_index_count19 = 0\n  local\
    \ vowels_index_count20 = 0\n  local vowels_index_count21 = 0\n  local vowels_index_count22\
    \ = 0\n  local vowels_index_count23 = 0\n  local vowels_index_count24 = 0\n  local\
    \ vowels_index_count25 = 0\n  local vowels_index_count26 = 0\n  local vowels_index_count27\
    \ = 0\n  local vowels_index_count28 = 0\n  local vowels_index_count29 = 0\n  local\
    \ vowels_index_count30 = 0\n  local vowels_index_count31 = 0\n  local vowels_index_count32\
    \ = 0\n  local vowels_index_count33 = 0\n  local vowels_index_count34 = 0\n  local\
    \ vowels_index_count35 = 0\n  local vowels_index_count36 = 0\n  local vowels_index_count37\
    \ = 0\n  local vowels_index_count38 = 0\n  local vowels_index_count39 = 0\n  local\
    \ vowels_index_count40 = 0\n  local vowels_index_count41 = 0\n  local vowels_index_count42\
    \ = 0\n  local vowels_index_count43 = 0\n  local vowels_index_count44 = 0\n  local\
    \ vowels_index_count45 = 0\n  local vowels_index_count46 = 0\n  local vowels_index_count47\
    \ = 0\n  local vowels_index_count48 = 0\n  local vowels_index_count49 = 0\n  local\
    \ vowels_index_count50 = 0\n  local vowels_index_count51 = 0\n  local vowels_index_count52\
    \ = 0\n  local vowels_index_count53 = 0\n  local vowels_index_count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeqadf1qh.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowel_found = false\n\tlocal vowel_found2 = false\n\tlocal\
    \ vowel_found3 = false\n\tlocal vowel_found4 = false\n\tlocal vowel_found5 = false\n\
    \tlocal vowel_found6 = false\n\tlocal vowel_found7 = false\n\tlocal vowel_found8\
    \ = false\n\tlocal vowel_found9 = false\n\tlocal vowel_found10 = false\n\tlocal\
    \ vowel_found11 = false\n\tlocal vowel_found12 = false\n\tlocal vowel_found13\
    \ = false\n\tlocal vowel_found14 = false\n\tlocal vowel_found15 = false\n\tlocal\
    \ vowel_found16 = false\n\tlocal vowel_found17 = false\n\tlocal vowel_found18\
    \ = false\n\tlocal vowel_found19 = false\n\tlocal vowel_found20 = false\n\tlocal\
    \ vowel_found21 = false\n\tlocal vowel_found22 = false\n\tlocal vowel_found23\
    \ = false\n\tlocal vowel_found24 = false\n\tlocal vowel_found25 = false\n\tlocal\
    \ vowel_found26 = false\n\tlocal vowel_found27 = false\n\tlocal vowel_found28\
    \ = false\n\tlocal vowel_found29 = false\n\tlocal vowel_found30 = false\n\tlocal\
    \ vowel_found31 = false\n\tlocal vowel_found32 = false\n\tlocal vowel_found33\
    \ = false\n\tlocal vowel_found34 = false\n\tlocal vowel_found35 = false\n\tlocal\
    \ vowel_found36 = false\n\tlocal vowel_found37 = false\n\tlocal vowel_found38\
    \ = false\n\tlocal vowel_found39 = false\n\tlocal vowel_found40 = false\n\tlocal\
    \ vowel_found41 = false\n\tlocal vowel_found42 = false\n\tlocal vowel_found43\
    \ = false\n\tlocal vowel_found44 = false\n\tlocal vowel_found45 = false\n\tlocal\
    \ vowel_found46 = false\n\tlocal vowel_found47 = false\n\tlocal vowel_found48\
    \ = false\n\tlocal vowel_found49 = false\n\tlocal vowel_found50 = false\n\tlocal\
    \ vowel_found51 = false\n\tlocal vowel_found52 = false\n\tlocal vowel_found53\
    \ = false\n\tlocal vowel_found54 = false\n\tlocal vowel_found55 = false\n\tlocal\
    \ vowel_found56 = false\n\tlocal vowel_found57 = false\n\tlocal vowel_found58\
    \ = false\n\tlocal vowel_found\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0z1f4ih.lua:96: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\tlocal vowels_count = #vowels\n\
    \tlocal vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count2\
    \ = 0\n\tlocal vowels_index_count3 = 0\n\tlocal vowels_index_count4 = 0\n\tlocal\
    \ vowels_index_count5 = 0\n\tlocal vowels_index_count6 = 0\n\tlocal vowels_index_count7\
    \ = 0\n\tlocal vowels_index_count8 = 0\n\tlocal vowels_index_count9 = 0\n\tlocal\
    \ vowels_index_count10 = 0\n\tlocal vowels_index_count11 = 0\n\tlocal vowels_index_count12\
    \ = 0\n\tlocal vowels_index_count13 = 0\n\tlocal vowels_index_count14 = 0\n\t\
    local vowels_index_count15 = 0\n\tlocal vowels_index_count16 = 0\n\tlocal vowels_index_count17\
    \ = 0\n\tlocal vowels_index_count18 = 0\n\tlocal vowels_index_count19 = 0\n\t\
    local vowels_index_count20 = 0\n\tlocal vowels_index_count21 = 0\n\tlocal vowels_index_count22\
    \ = 0\n\tlocal vowels_index_count23 = 0\n\tlocal vowels_index_count24 = 0\n\t\
    local vowels_index_count25 = 0\n\tlocal vowels_index_count26 = 0\n\tlocal vowels_index_count27\
    \ = 0\n\tlocal vowels_index_count28 = 0\n\tlocal vowels_index_count29 = 0\n\t\
    local vowels_index_count30 = 0\n\tlocal vowels_index_count31 = 0\n\tlocal vowels_index_count32\
    \ = 0\n\tlocal vowels_index_count33 = 0\n\tlocal vowels_index_count34 = 0\n\t\
    local vowels_index_count35 = 0\n\tlocal vowels_index_count36 = 0\n\tlocal vowels_index_count37\
    \ = 0\n\tlocal vowels_index_count38 = 0\n\tlocal vowels_index_count39 = 0\n\t\
    local vowels_index_count40 = 0\n\tlocal vowels_index_count41 = 0\n\tlocal vowels_index_count42\
    \ = 0\n\tlocal vowels_index_count43 = 0\n\tlocal vowels_index_count44 = 0\n\t\
    local vowels_index_count45 = 0\n\tlocal vowels_index_count46 = 0\n\tlocal vowels_index_count47\
    \ = 0\n\tlocal vowels_index_count48 = 0\n\tlocal vowels_index_count49 = 0\n\t\
    local vowels_index_count50 = 0\n\tlocal vowels_index_count51 = 0\n\tlocal vowels_index_count52\
    \ = 0\n\tlocal vowels_index_count53 = 0\n\tlocal vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4vc2gnqh.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuy6qbcb_.lua:109: ''end'' expected (to close ''for'' at line
    89) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_index_count_min = #word\n\tlocal vowels_index_count_max = #word\n\tlocal\
    \ vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcy8ebv_7.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    local vowels_index_count = 0\n    local vowels_index_count2\
    \ = 0\n    local vowels_index_count3 = 0\n    local vowels_index_count4 = 0\n\
    \    local vowels_index_count5 = 0\n    local vowels_index_count6 = 0\n    local\
    \ vowels_index_count7 = 0\n    local vowels_index_count8 = 0\n    local vowels_index_count9\
    \ = 0\n    local vowels_index_count10 = 0\n    local vowels_index_count11 = 0\n\
    \    local vowels_index_count12 = 0\n    local vowels_index_count13 = 0\n    local\
    \ vowels_index_count14 = 0\n    local vowels_index_count15 = 0\n    local vowels_index_count16\
    \ = 0\n    local vowels_index_count17 = 0\n    local vowels_index_count18 = 0\n\
    \    local vowels_index_count19 = 0\n    local vowels_index_count20 = 0\n    local\
    \ vowels_index_count21 = 0\n    local vowels_index_count22 = 0\n    local vowels_index_count23\
    \ = 0\n    local vowels_index_count24 = 0\n    local vowels_index_count25 = 0\n\
    \    local vowels_index_count26 = 0\n    local vowels_index_count27 = 0\n    local\
    \ vowels_index_count28 = 0\n    local vowels_index_count29 = 0\n    local vowels_index_count30\
    \ = 0\n    local vowels_index_count31 = 0\n    local vowels_index_count32 = 0\n\
    \    local vowels_index_count33 = 0\n    local vowels_index_count34 = 0\n    local\
    \ vowels_index_count35 = 0\n    local vowels_index_count36 = 0\n    local vowels_index_count37\
    \ = 0\n    local vowels_index_count38 = 0\n    local vowels_index_count39 = 0\n\
    \    local vowels_index_count40 = 0\n    local vowels_index_count41 = 0\n    local\
    \ vowels_index_count42 = 0\n    local vowels_index_count43 = 0\n    local vowels_index_count44\
    \ = 0\n    local vowels_index_count45 = 0\n    local vowels_index_count46 = 0\n\
    \    local vowels_index_count47 = 0\n    local vowels_index_count48 = 0\n    local\
    \ vowels_index_count49 = 0\n    local vowels_index_count50 = 0\n    local vowels_index_count51\
    \ = 0\n    local vowels_index_count52 = 0\n    local vowels_index_count53 = 0\n\
    \    local vowels_index_count54 = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwy8a1kez.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = 0\n\tlocal vowels_count_start = 0\n\tlocal vowels_count_end = 0\n\tlocal vowels_count_middle\
    \ = 0\n\tlocal vowels_count_middle_index = 0\n\tlocal vowels_count_middle_index2\
    \ = 0\n\tlocal vowels_count_middle_index3 = 0\n\tlocal vowels_count_middle_index4\
    \ = 0\n\tlocal vowels_count_middle_index5 = 0\n\tlocal vowels_count_middle_index6\
    \ = 0\n\tlocal vowels_count_middle_index7 = 0\n\tlocal vowels_count_middle_index8\
    \ = 0\n\tlocal vowels_count_middle_index9 = 0\n\tlocal vowels_count_middle_index10\
    \ = 0\n\tlocal vowels_count_middle_index11 = 0\n\tlocal vowels_count_middle_index12\
    \ = 0\n\tlocal vowels_count_middle_index13 = 0\n\tlocal vowels_count_middle_index14\
    \ = 0\n\tlocal vowels_count_middle_index15 = 0\n\tlocal vowels_count_middle_index16\
    \ = 0\n\tlocal vowels_count_middle_index17 = 0\n\tlocal vowels_count_middle_index18\
    \ = 0\n\tlocal vowels_count_middle_index19 = 0\n\tlocal vowels_count_middle_index20\
    \ = 0\n\tlocal vowels_count_middle_index21 = 0\n\tlocal vowels_count_middle_index22\
    \ = 0\n\tlocal vowels_count_middle_index23 = 0\n\tlocal vowels_count_middle_index24\
    \ = 0\n\tlocal vowels_count_middle_index25 = 0\n\tlocal vowels_count_middle_index26\
    \ = 0\n\tlocal vowels_count_middle_index27 = 0\n\tlocal vowels_count_middle_index28\
    \ = 0\n\tlocal vowels_count_middle_index29 = 0\n\tlocal vowels_count_middle_index30\
    \ = 0\n\tlocal vowels_count_middle_index31 = 0\n\tlocal vowels_count_middle_index32\
    \ = 0\n\tlocal vowels_count_middle_index33 = 0\n\tlocal vowels_count_middle_index34\
    \ = 0\n\tlocal vowels_count_middle_index35 = 0\n\tlocal vowels_count_middle_index36\
    \ = 0\n\tlocal vowels_count_middle_index37 = 0\n\tlocal vowels_count_middle_index38\
    \ = 0\n\tlocal vowels_count_middle_index39 = 0\n\tlocal vowels_count_middle_index40\
    \ = 0\n\tlocal vowels_count_middle_index41 = 0\n\tlocal vowels_count_middle_index42\
    \ = 0\n\tlocal vowels_count_middle_index43 = 0\n\tlocal vowels_count_middle_index44\
    \ = 0\n\tlocal vowels_count_middle_index45 = 0\n\tlocal vowels_count_middle_index46\
    \ = 0\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpil0po2ho.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = 1\n    local vowels_index_count\
    \ = 0\n    local vowels_index_count_max = #word\n    local vowels_index_count_min\
    \ = 1\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkldazw8s.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #word\n    local vowels_index = {}\n \
    \   for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyq9emk18.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowel_met_count = 0\n\tlocal vowel_met_index = 0\n\tlocal\
    \ vowel_met_index2 = 0\n\tlocal vowel_met_index3 = 0\n\tlocal vowel_met_index4\
    \ = 0\n\tlocal vowel_met_index5 = 0\n\tlocal vowel_met_index6 = 0\n\tlocal vowel_met_index7\
    \ = 0\n\tlocal vowel_met_index8 = 0\n\tlocal vowel_met_index9 = 0\n\tlocal vowel_met_index10\
    \ = 0\n\tlocal vowel_met_index11 = 0\n\tlocal vowel_met_index12 = 0\n\tlocal vowel_met_index13\
    \ = 0\n\tlocal vowel_met_index14 = 0\n\tlocal vowel_met_index15 = 0\n\tlocal vowel_met_index16\
    \ = 0\n\tlocal vowel_met_index17 = 0\n\tlocal vowel_met_index18 = 0\n\tlocal vowel_met_index19\
    \ = 0\n\tlocal vowel_met_index20 = 0\n\tlocal vowel_met_index21 = 0\n\tlocal vowel_met_index22\
    \ = 0\n\tlocal vowel_met_index23 = 0\n\tlocal vowel_met_index24 = 0\n\tlocal vowel_met_index25\
    \ = 0\n\tlocal vowel_met_index26 = 0\n\tlocal vowel_met_index27 = 0\n\tlocal vowel_met_index28\
    \ = 0\n\tlocal vowel_met_index29 = 0\n\tlocal vowel_met_index30 = 0\n\tlocal vowel_met_index31\
    \ = 0\n\tlocal vowel_met_index32 = 0\n\tlocal vowel_met_index33 = 0\n\tlocal vowel_met_index34\
    \ = 0\n\tlocal vowel_met_index35 = 0\n\tlocal vowel_met_index36 = 0\n\tlocal vowel_met_index37\
    \ = 0\n\tlocal vowel_met_index38 = 0\n\tlocal vowel_met_index39 = 0\n\tlocal vowel_met_index40\
    \ = 0\n\tlocal vowel_met_index41 = 0\n\tlocal vowel_met_index42 = 0\n\tlocal vowel_met_index43\
    \ = 0\n\tlocal vowel_met_index44 = 0\n\tlocal vowel_met_index45 = 0\n\tlocal vowel_met_index46\
    \ = 0\n\tlocal vowel_met_index47 = 0\n\tlocal vowel_met_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy3grxm7b.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count_max\
    \ = #word\n  local vowels_index_count_min = 0\n  local vowels_index_count_max_minus_1\
    \ = #word\n  local vowels_index_count_max_minus_2 = #word\n  local vowels_index_count_max_minus_3\
    \ = #word\n  local vowels_index_count_max_minus_4 = #word\n  local vowels_index_count_max_minus_5\
    \ = #word\n  local vowels_index_count_max_minus_6 = #word\n  local vowels_index_count_max_minus_7\
    \ = #word\n  local vowels_index_count_max_minus_8 = #word\n  local vowels_index_count_max_minus_9\
    \ = #word\n  local vowels_index_count_max_minus_10 = #word\n  local vowels_index_count_max_minus_11\
    \ = #word\n  local vowels_index_count_max_minus_12 = #word\n  local vowels_index_count_max_minus_13\
    \ = #word\n  local vowels_index_count_max_minus_14 = #word\n  local vowels_index_count_max_minus_15\
    \ = #word\n  local vowels_index_count_max_minus_16 = #word\n  local vowels_index_count_max_minus_17\
    \ = #word\n  local vowels_index_count_max_minus_18 = #word\n  local vowels_index_count_max_minus_19\
    \ = #word\n  local vowels_index_count_max_minus_20 = #word\n  local vowels_index_count_max_minus_21\
    \ = #word\n  local vowels_index_count_max_minus_22 = #word\n  local vowels_index_count_max_minus_23\
    \ = #word\n  local vowels_index_count_max_minus_24 = #word\n  local vowels_index_count_max_minus_25\
    \ = #word\n  local vowels_index_count_max_minus_26 = #word\n  local vowels_index_count_max_minus_27\
    \ = #word\n  local vowels_index_count_max_minus_28 = #word\n  local vowels_index_count_max_minus_29\
    \ = #word\n  local vowels_index_count_max_minus_30 = #word\n  local vowels_index_count_max_minus_31\
    \ = #word\n  local vowels_index_count_max_minus_32 = #word\n  local vowels_index_count_max_minus_33\
    \ = #word\n  local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3gokl3o7.lua:75: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = {}\n\tlocal vowels_index_count[1]\
    \ = 1\n\tlocal vowels_index_count[2] = 2\n\tlocal vowels_index_count[3] = 3\n\t\
    local vowels_index_count[4] = 4\n\tlocal vowels_index_count[5] = 5\n\tlocal vowels_index_count[6]\
    \ = 6\n\tlocal vowels_index_count[7] = 7\n\tlocal vowels_index_count[8] = 8\n\t\
    local vowels_index_count[9] = 9\n\tlocal vowels_index_count[10] = 10\n\tlocal\
    \ vowels_index_count[11] = 11\n\tlocal vowels_index_count[12] = 12\n\tlocal vowels_index_count[13]\
    \ = 13\n\tlocal vowels_index_count[14] = 14\n\tlocal vowels_index_count[15] =\
    \ 15\n\tlocal vowels_index_count[16] = 16\n\tlocal vowels_index_count[17] = 17\n\
    \tlocal vowels_index_count[18] = 18\n\tlocal vowels_index_count[19] = 19\n\tlocal\
    \ vowels_index_count[20] = 20\n\tlocal vowels_index_count[21] = 21\n\tlocal vowels_index_count[22]\
    \ = 22\n\tlocal vowels_index_count[23] = 23\n\tlocal vowels_index_count[24] =\
    \ 24\n\tlocal vowels_index_count[25] = 25\n\tlocal vowels_index_count[26] = 26\n\
    \tlocal vowels_index_count[27] = 27\n\tlocal vowels_index_count[28] = 28\n\tlocal\
    \ vowels_index_count[29] = 29\n\tlocal vowels_index_count[30] = 30\n\tlocal vowels_index_count[31]\
    \ = 31\n\tlocal vowels_index_count[32] = 32\n\tlocal vowels_index_count[33] =\
    \ 33\n\tlocal vowels_index_count[34] = 34\n\tlocal vowels_index_count[35] = 35\n\
    \tlocal vowels_index_count[36] = 36\n\tlocal vowels_index_count[37] = 37\n\tlocal\
    \ vowels_index_count[38] = 38\n\tlocal vowels_index_count[39] = 39\n\tlocal vowels_index_count[40]\
    \ = 40\n\tlocal vowels_index_count[41] = 41\n\tlocal vowels_index_count[42] =\
    \ 42\n\tlocal vowels_index_count[43] = 43\n\tlocal vowels_index_count[44] = 44\n\
    \tlocal vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjj490uk2.lua:20: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max\
    \ = 1\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\
    \tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal\
    \ vowels_index_count_min = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min\
    \ = 1\n\tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\
    \tlocal vowels_index_count_max = 1\n\tlocal vowels_index_count_min = 1\n\tlocal\
    \ vowels_index_count_max = 1\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1a186eca.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = 0\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowels_index_count_max = #vowels\n\tlocal vowels_index_count_min\
    \ = #vowels\n\tlocal vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmput468j1a.lua:83: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal\
    \ vowels_index_count_max = #word\n\tlocal vowels_index_count_min = 0\n\tlocal\
    \ vowels_index_count_max_min = 0\n\tlocal vowels_index_count_max_min_index = 0\n\
    \tlocal vowels_index_count_max_min_index_count = 0\n\tlocal vowels_index_count_max_min_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_index_count_min = 0\n\tlocal vowels_index_count_max_min_index_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index = 0\n\tlocal\
    \ vowels_index_count_max_min_index_count_max_min_index_count = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count\
    \ = 0\n\tlocal vowels_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max_min_index_count_max\
    \ = #word\n\tlocal vowels_index_count_max_min_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpobnj1aa1.lua:67: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = 0\n    local vowels_index_count_max_min\
    \ = 0\n    local vowels_index_count_max_min_index = 0\n    local vowels_index_count_max_min_index2\
    \ = 0\n    local vowels_index_count_max_min_index3 = 0\n    local vowels_index_count_max_min_index4\
    \ = 0\n    local vowels_index_count_max_min_index5 = 0\n    local vowels_index_count_max_min_index6\
    \ = 0\n    local vowels_index_count_max_min_index7 = 0\n    local vowels_index_count_max_min_index8\
    \ = 0\n    local vowels_index_count_max_min_index9 = 0\n    local vowels_index_count_max_min_index10\
    \ = 0\n    local vowels_index_count_max_min_index11 = 0\n    local vowels_index_count_max_min_index12\
    \ = 0\n    local vowels_index_count_max_min_index13 = 0\n    local vowels_index_count_max_min_index14\
    \ = 0\n    local vowels_index_count_max_min_index15 = 0\n    local vowels_index_count_max_min_index16\
    \ = 0\n    local vowels_index_count_max_min_index17 = 0\n    local vowels_index_count_max_min_index18\
    \ = 0\n    local vowels_index_count_max_min_index19 = 0\n    local vowels_index_count_max_min_index20\
    \ = 0\n    local vowels_index_count_max_min_index21 = 0\n    local vowels_index_count_max_min_index22\
    \ = 0\n    local vowels_index_count_max_min_index23 = 0\n    local vowels_index_count_max_min_index24\
    \ = 0\n    local vowels_index_count_max_min_index25 = 0\n    local vowels_index_count_max_min_index26\
    \ = 0\n    local vowels_index_count_max_min_index27 = 0\n    local vowels_index_count_max_min_index28\
    \ = 0\n    local vowels_index_count_max_min_index29 = 0\n    local vowels_index_count_max_min_index30\
    \ = 0\n    local vowels_index_count_max_min_index31 = 0\n    local vowels_index_count_max_min_index32\
    \ = 0\n    local vowels_index_count_max_min_index33 = 0\n    local vowels_index_count_max_min_index34\
    \ = 0\n    local vowels_index_count_max_min_index35 = 0\n    local vowels_index_count_max_min_index36\
    \ = 0\n    local vowels_index_count_max_min_index37 = 0\n    local vowels_\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpef72x7nv.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppod3xw8w.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u'}\n    local vowels_count = 0\n    local\
    \ vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_min_index\
    \ = 0\n    local vowels_index_count_max_index = 0\n    local vowels_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count = 0\n    local vowels_index_count_min_index_count_max\
    \ = #vowels\n    local vowels_index_count_min_index_count_min_index = 0\n    local\
    \ vowels_index_count_min_index_count_max_index = 0\n    local vowels_index_count_min_index_count_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_count_max = #vowels\n\
    \    local vowels_index_count_min_index_count_min_index_min_index = 0\n    local\
    \ vowels_index_count_min_index_count_min_index_max_index = 0\n    local vowels_index_count_min_index_count_min_index_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_max =\
    \ #vowels\n    local vowels_index_count_min_index_count_min_index_min_index_min_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_max_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_max\
    \ = #vowels\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_max_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max\
    \ = #vowels\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_max_index_count\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_max\
    \ = #vowels\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_min_index\
    \ = 0\n    local vowels_index_count_min_index_count_min_index_min_index_min_index_min_index_min_index_max_index\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdjp_5w2y.lua:68: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = 1\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = #word\n\tlocal vowels_index_count_min\
    \ = #word\n\tlocal vowels_index_count_max = \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoh90hvq8.lua:68: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_prev\
    \ = 1\n\tlocal vowels_index_count_next = 1\n\tlocal vowels_index_count_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next = 1\n\tlocal vowels_index_count_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next = 1\n\tlocal\
    \ vowels_index_count_next_next_next_next_next_next_next_prev = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_next_next_next_next_next_next_next_next_next_next_prev\
    \ = 1\n\tlocal vowels_index_count_next_next_next_next_next_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps9pqebou.lua:69: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = 1\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_count = 0\n  local\
    \ vowels_index_count = 0\n  local vowels_index_count = 0\n  local vowels_index_count\
    \ = 0\n  local vowels_index_count = 0\n  local vowels_index_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphxn58t3m.lua:107: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #word\n    local vowels_index = {}\n \
    \   for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyq9emk18.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = 0\n  \
    \  local vowels_index = 0\n    local vowels_index_count = 0\n    local vowels_index_count_minus_1\
    \ = 1\n    local vowels_index_count_minus_2 = 1\n    local vowels_index_count_minus_3\
    \ = 1\n    local vowels_index_count_minus_4 = 1\n    local vowels_index_count_minus_5\
    \ = 1\n    local vowels_index_count_minus_6 = 1\n    local vowels_index_count_minus_7\
    \ = 1\n    local vowels_index_count_minus_8 = 1\n    local vowels_index_count_minus_9\
    \ = 1\n    local vowels_index_count_minus_10 = 1\n    local vowels_index_count_minus_11\
    \ = 1\n    local vowels_index_count_minus_12 = 1\n    local vowels_index_count_minus_13\
    \ = 1\n    local vowels_index_count_minus_14 = 1\n    local vowels_index_count_minus_15\
    \ = 1\n    local vowels_index_count_minus_16 = 1\n    local vowels_index_count_minus_17\
    \ = 1\n    local vowels_index_count_minus_18 = 1\n    local vowels_index_count_minus_19\
    \ = 1\n    local vowels_index_count_minus_20 = 1\n    local vowels_index_count_minus_21\
    \ = 1\n    local vowels_index_count_minus_22 = 1\n    local vowels_index_count_minus_23\
    \ = 1\n    local vowels_index_count_minus_24 = 1\n    local vowels_index_count_minus_25\
    \ = 1\n    local vowels_index_count_minus_26 = 1\n    local vowels_index_count_minus_27\
    \ = 1\n    local vowels_index_count_minus_28 = 1\n    local vowels_index_count_minus_29\
    \ = 1\n    local vowels_index_count_minus_30 = 1\n    local vowels_index_count_minus_31\
    \ = 1\n    local vowels_index_count_minus_32 = 1\n    local vowels_index_count_minus_33\
    \ = 1\n    local vowels_index_count_minus_34 = 1\n    local vowels_index_count_minus_35\
    \ = 1\n    local vowels_index_count_minus_36 = 1\n    local vowels_index_count_minus_37\
    \ = 1\n    local vowels_index_count_minus_38 = 1\n    local vowels_index_count_minus_39\
    \ = 1\n    local vowels_index_count_minus_40 = 1\n    local vowels_index_count_minus_41\
    \ = 1\n    local vowels_index_count_minus_42 = 1\n    local vowels_index_count_minus_43\
    \ = 1\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeylzernf.lua:83: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_max\
    \ = 0\n\tlocal vowels_index_min = 0\n\tlocal vowels_index_max2 = 0\n\tlocal vowels_index_min2\
    \ = 0\n\tlocal vowels_index_max3 = 0\n\tlocal vowels_index_min3 = 0\n\tlocal vowels_index_max4\
    \ = 0\n\tlocal vowels_index_min4 = 0\n\tlocal vowels_index_max5 = 0\n\tlocal vowels_index_min5\
    \ = 0\n\tlocal vowels_index_max6 = 0\n\tlocal vowels_index_min6 = 0\n\tlocal vowels_index_max7\
    \ = 0\n\tlocal vowels_index_min7 = 0\n\tlocal vowels_index_max8 = 0\n\tlocal vowels_index_min8\
    \ = 0\n\tlocal vowels_index_max9 = 0\n\tlocal vowels_index_min9 = 0\n\tlocal vowels_index_max10\
    \ = 0\n\tlocal vowels_index_min10 = 0\n\tlocal vowels_index_max11 = 0\n\tlocal\
    \ vowels_index_min11 = 0\n\tlocal vowels_index_max12 = 0\n\tlocal vowels_index_min12\
    \ = 0\n\tlocal vowels_index_max13 = 0\n\tlocal vowels_index_min13 = 0\n\tlocal\
    \ vowels_index_max14 = 0\n\tlocal vowels_index_min14 = 0\n\tlocal vowels_index_max15\
    \ = 0\n\tlocal vowels_index_min15 = 0\n\tlocal vowels_index_max16 = 0\n\tlocal\
    \ vowels_index_min16 = 0\n\tlocal vowels_index_max17 = 0\n\tlocal vowels_index_min17\
    \ = 0\n\tlocal vowels_index_max18 = 0\n\tlocal vowels_index_min18 = 0\n\tlocal\
    \ vowels_index_max19 = 0\n\tlocal vowels_index_min19 = 0\n\tlocal vowels_index_max20\
    \ = 0\n\tlocal vowels_index_min20 = 0\n\tlocal vowels_index_max21 = 0\n\tlocal\
    \ vowels_index_min21 = 0\n\tlocal vowels_index_max22 = 0\n\tlocal vowels_index_min22\
    \ = 0\n\tlocal vowels_index_max23 = 0\n\tlocal vowels_index_min23 = 0\n\tlocal\
    \ vowels_index_max24 = 0\n\tlocal vowels_index_min24 = 0\n\tlocal vowels_index_max25\
    \ = 0\n\tlocal vowels_index_min25 = 0\n\tlocal vowels_index_max26 = 0\n\tlocal\
    \ vowels_index_min26 = 0\n\tlocal vowels_index_max\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5vt2l7zy.lua:92: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppod3xw8w.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','A','E','I','O','U'}\n\tlocal vowels_count\
    \ = #vowels\n\tlocal vowel_met_count = 0\n\tlocal vowel_met_index = 0\n\tlocal\
    \ vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word =\
    \ \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index\
    \ = 0\n\tlocal vowel_met_word = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word\
    \ = \"\"\n\tlocal vowel_met_index = 0\n\tlocal vowel_met_word = \"\"\n\tlocal\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjs1ywuh.lua:91: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_max\
    \ = #word - vowels_count + 1\n    local vowels_index_count_min = vowels_count\
    \ - 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\n    local vowels_index_count_min\
    \ = #word - vowels_count + 1\n    local vowels_index_count_max = #word - vowels_count\
    \ + 1\n    local vowels_index_count_min = #word - vowels_count + 1\n    local\
    \ vowels_index_count_max = #word - vowels_count + 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2avdstn_.lua:71: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u'}\n\tlocal vowels_count = #vowels\n\tlocal\
    \ vowels_index = #word\n\tlocal vowels_index2 = #word\n\tlocal vowels_index3 =\
    \ #word\n\tlocal vowels_index4 = #word\n\tlocal vowels_index5 = #word\n\tlocal\
    \ vowels_index6 = #word\n\tlocal vowels_index7 = #word\n\tlocal vowels_index8\
    \ = #word\n\tlocal vowels_index9 = #word\n\tlocal vowels_index10 = #word\n\tlocal\
    \ vowels_index11 = #word\n\tlocal vowels_index12 = #word\n\tlocal vowels_index13\
    \ = #word\n\tlocal vowels_index14 = #word\n\tlocal vowels_index15 = #word\n\t\
    local vowels_index16 = #word\n\tlocal vowels_index17 = #word\n\tlocal vowels_index18\
    \ = #word\n\tlocal vowels_index19 = #word\n\tlocal vowels_index20 = #word\n\t\
    local vowels_index21 = #word\n\tlocal vowels_index22 = #word\n\tlocal vowels_index23\
    \ = #word\n\tlocal vowels_index24 = #word\n\tlocal vowels_index25 = #word\n\t\
    local vowels_index26 = #word\n\tlocal vowels_index27 = #word\n\tlocal vowels_index28\
    \ = #word\n\tlocal vowels_index29 = #word\n\tlocal vowels_index30 = #word\n\t\
    local vowels_index31 = #word\n\tlocal vowels_index32 = #word\n\tlocal vowels_index33\
    \ = #word\n\tlocal vowels_index34 = #word\n\tlocal vowels_index35 = #word\n\t\
    local vowels_index36 = #word\n\tlocal vowels_index37 = #word\n\tlocal vowels_index38\
    \ = #word\n\tlocal vowels_index39 = #word\n\tlocal vowels_index40 = #word\n\t\
    local vowels_index41 = #word\n\tlocal vowels_index42 = #word\n\tlocal vowels_index43\
    \ = #word\n\tlocal vowels_index44 = #word\n\tlocal vowels_index45 = #word\n\t\
    local vowels_index46 = #word\n\tlocal vowels_index47 = #word\n\tlocal vowels_index48\
    \ = #word\n\tlocal vowels_index49 = #word\n\tlocal vowels_index50 = #word\n\t\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppfcti505.lua:88: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowel\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwkj4y7n2.lua:107: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuy6qbcb_.lua:109: ''end'' expected (to close ''for'' at line
    89) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = {}\n  for i = 1, #word do\n    local vowel\
    \ = word:sub(i,i)\n    if vowel:sub(1,1) ~= vowel:sub(vowel,1) then\n      vowels_index[vowel]\
    \ = true\n    end\n  end\n  local vowels_index_count = #vowels_index\n  if vowels_index_count\
    \ > 0 then\n    local vowels_index_sorted = {}\n    for i = 1, vowels_index_count\
    \ do\n      table.insert(vowels_index_sorted, i)\n    end\n    table.sort(vowels_index_sorted)\n\
    \    local vowels_index_sorted_count = #vowels_index_sorted\n    if vowels_index_sorted_count\
    \ > 0 then\n      local vowels_index_sorted_index = vowels_index_sorted[1]\n \
    \     local vowels_index_sorted_value = vowels_index[vowels_index_sorted_index]\n\
    \      if vowels_index_sorted_value then\n        local vowels_index_sorted_value_count\
    \ = #vowels_index_sorted_value\n        if vowels_index_sorted_value_count > 0\
    \ then\n          local vowels_index_sorted_value_index = vowels_index_sorted_value[1]\n\
    \          local vowels_index_sorted_value_word = word:sub(vowels_index_sorted_value_index,vowels_index_sorted_value_index+1)\n\
    \          local vowels_index_sorted_value_word_count = #vowels_index_sorted_value_word\n\
    \          if vowels_index_sorted_value_word_count > 0 then\n            local\
    \ vowels_index_sorted_value_word_index = vowels_index_sorted_value_word[1]\n \
    \           local vowels_index_sorted_value_word_value = vowels_index[vowels_index_sorted_value_word_index]\n\
    \            if vowels_index_sorted_value_word_value then\n              local\
    \ vowels_index_sorted_value_word_value_index = vowels_index_sorted_value_word_value[1]\n\
    \              local vowels_index_sorted_value_word_value_value = vowels_index[vowels_index_sorted_value_word_value_index]\n\
    \              if vowels_index_sorted_value_word_value_value then\n          \
    \      local vowels_index_sorted_value_word_value_value_count = #vowels_index_sorted_value_word_value_value\n\
    \                if vowels_index_sorted_value_word_value_value_count > 0 then\n\
    \                  local vowels_index_sorted_value_word_value_value_index = vowels_index_sorted_value_word_value_value[1]\n\
    \                  local vowels_index_sorted_value_word_value_value_value = vowels_index[vowels_index_sorted_value_word_value_value_index]\n\
    \                  if vowels_index_sorted_value_word_value_value_value then\n\
    \                    local vowels_index_sorted_value_word_value_value_value_count\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjbr5iavt.lua:74: ''end'' expected (to close ''if'' at line
    53) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal\
    \ vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\tfor i = 1, vowels_count\
    \ do\n\t\ttable.insert(vowels_index, i)\n\tend\n\tlocal vowels_count = #vowels_index\n\
    \tlocal vowels_index = {}\n\tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index,\
    \ i)\n\tend\n\tlocal vowels_count = #vowels_index\n\tlocal vowels_index = {}\n\
    \tfor i = 1, vowels_count do\n\t\ttable.insert(vowels_index, i)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp267vn69j.lua:105: ''end'' expected (to close ''for'' at line
    84) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count - 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count - 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count - 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count - 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count - 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count - 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count - 1\n\tlocal vowels_index_count_max = #word - vowels_count\
    \ + 1\n\tlocal vowels_index_count_min = #word - vowels_count - 1\n\tlocal vowels_index_count_max\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_min = #word - vowels_count\
    \ - 1\n\tlocal vowels_index_count_max = #word - vowels_count + 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count - 1\n\tlocal vowels_index_count_max = #word - vowel\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpizllw0m8.lua:71: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels_index\n    local vowels_index\
    \ = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n\
    \    end\n    local vowels_count = #vowels_index\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels_index\n    local vowels_index = {}\n    for\
    \ i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n   \
    \ local vowels_count = #vowels_index\n    local vowels_index = {}\n    for i =\
    \ 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local\
    \ vowels_count = #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count\
    \ do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count =\
    \ #vowels_index\n    local vowels_index = {}\n    for i = 1, vowels_count do\n\
    \        table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels_index\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2hyeh48.lua:108: ''end'' expected (to close ''function''
    at line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowel_found = false\n\tlocal\
    \ vowel_found2 = false\n\tlocal vowel_found3 = false\n\tlocal vowel_found4 = false\n\
    \tlocal vowel_found5 = false\n\tlocal vowel_found6 = false\n\tlocal vowel_found7\
    \ = false\n\tlocal vowel_found8 = false\n\tlocal vowel_found9 = false\n\tlocal\
    \ vowel_found10 = false\n\tlocal vowel_found11 = false\n\tlocal vowel_found12\
    \ = false\n\tlocal vowel_found13 = false\n\tlocal vowel_found14 = false\n\tlocal\
    \ vowel_found15 = false\n\tlocal vowel_found16 = false\n\tlocal vowel_found17\
    \ = false\n\tlocal vowel_found18 = false\n\tlocal vowel_found19 = false\n\tlocal\
    \ vowel_found20 = false\n\tlocal vowel_found21 = false\n\tlocal vowel_found22\
    \ = false\n\tlocal vowel_found23 = false\n\tlocal vowel_found24 = false\n\tlocal\
    \ vowel_found25 = false\n\tlocal vowel_found26 = false\n\tlocal vowel_found27\
    \ = false\n\tlocal vowel_found28 = false\n\tlocal vowel_found29 = false\n\tlocal\
    \ vowel_found30 = false\n\tlocal vowel_found31 = false\n\tlocal vowel_found32\
    \ = false\n\tlocal vowel_found33 = false\n\tlocal vowel_found34 = false\n\tlocal\
    \ vowel_found35 = false\n\tlocal vowel_found36 = false\n\tlocal vowel_found37\
    \ = false\n\tlocal vowel_found38 = false\n\tlocal vowel_found39 = false\n\tlocal\
    \ vowel_found40 = false\n\tlocal vowel_found41 = false\n\tlocal vowel_found42\
    \ = false\n\tlocal vowel_found43 = false\n\tlocal vowel_found44 = false\n\tlocal\
    \ vowel_found45 = false\n\tlocal vowel_found46 = false\n\tlocal vowel_found47\
    \ = false\n\tlocal vowel_found48 = false\n\tlocal vowel_found49 = false\n\tlocal\
    \ vowel_found50 = false\n\tlocal vowel_found51 = false\n\tlocal vowel_found52\
    \ = false\n\tlocal vowel_found53 = false\n\tlocal vowel_found54 = false\n\tlocal\
    \ vowel_found55 = false\n\tlocal vowel_found56 = false\n\tlocal vowel_found57\
    \ = false\n\tlocal vowel_found58 = false\n\tlocal vowel_found59 = false\n\tlocal\
    \ vowel_found60 = false\n\tlocal vowel_found61 = false\n\t\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpec00gqg8.lua:98: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a','e','i','o','u','y'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word\n\tlocal vowels_index_count_min = #word\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal vowels_index_count_max_index = 1\n\tlocal vowels_index_count_min_index\
    \ = 1\n\tlocal \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnec4lhkb.lua:87: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {\n\t\t[\"a\"] = \"a\",\n\t\t[\"e\"] = \"e\",\n\t\t[\"i\"] =\
    \ \"i\",\n\t\t[\"o\"] = \"o\",\n\t\t[\"u\"] = \"u\",\n\t\t[\"A\"] = \"a\",\n\t\
    \t[\"E\"] = \"e\",\n\t\t[\"I\"] = \"i\",\n\t\t[\"O\"] = \"o\",\n\t\t[\"U\"] =\
    \ \"u\"\n\t}\n\tlocal vowels_count = #vowels\n\tlocal vowels_count_reverse = #vowels:reverse()\n\
    \tlocal vowels_count_reverse2 = #vowels:reverse()\n\tlocal vowels_count_reverse3\
    \ = #vowels:reverse()\n\tlocal vowels_count_reverse4 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse5 = #vowels:reverse()\n\tlocal vowels_count_reverse6 = #vowels:reverse()\n\
    \tlocal vowels_count_reverse7 = #vowels:reverse()\n\tlocal vowels_count_reverse8\
    \ = #vowels:reverse()\n\tlocal vowels_count_reverse9 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse10 = #vowels:reverse()\n\tlocal vowels_count_reverse11 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse12 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse13 = #vowels:reverse()\n\tlocal vowels_count_reverse14 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse15 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse16 = #vowels:reverse()\n\tlocal vowels_count_reverse17 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse18 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse19 = #vowels:reverse()\n\tlocal vowels_count_reverse20 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse21 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse22 = #vowels:reverse()\n\tlocal vowels_count_reverse23 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse24 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse25 = #vowels:reverse()\n\tlocal vowels_count_reverse26 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse27 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse28 = #vowels:reverse()\n\tlocal vowels_count_reverse29 =\
    \ #vowels:reverse()\n\tlocal vowels_count_reverse30 = #vowels:reverse()\n\tlocal\
    \ vowels_count_reverse31 = #vowels:reverse()\n\tlocal vowels_count_reverse32 =\
    \ #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp247q_s1s.lua:61: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\n        table.insert(vowels_index, i)\n    end\n    local vowels_count\
    \ = #vowels\n    local vowels_index = {}\n    for i = 1, vowels_count do\n   \
    \     table.insert(vowels_index, i)\n    end\n    local vowels_count = #vowels\n\
    \    local vowels_index = {}\n    for i = 1, vowels_count do\n        table.insert(vowels_index,\
    \ i)\n    end\n    local vowels_count = #vowels\n    local vowels_index = {}\n\
    \    for i = 1, vowels_count do\n        table.insert(vowels_index, i)\n    end\n\
    \    local vowels_count = #vowels\n    local vowels_index = {}\n    for i = 1,\
    \ vowels_count do\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuy6qbcb_.lua:109: ''end'' expected (to close ''for'' at line
    89) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n    local vowels_count\
    \ = #vowels\n    local vowels_index = 1\n    local vowels_index_count = 0\n  \
    \  local vowels_index_count_max = #word\n    local vowels_index_count_min = #word\n\
    \    local vowels_index_count_min = #word\n    local vowels_index_count_max =\
    \ #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_index_count_min = #word\n    local vowels_index_count_max\
    \ = #word\n    local vowels_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe799cbhs.lua:86: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 1\n\tlocal vowels_index_count = 1\n\tlocal vowels_index_count_2\
    \ = 1\n\tlocal vowels_index_count_3 = 1\n\tlocal vowels_index_count_4 = 1\n\t\
    local vowels_index_count_5 = 1\n\tlocal vowels_index_count_6 = 1\n\tlocal vowels_index_count_7\
    \ = 1\n\tlocal vowels_index_count_8 = 1\n\tlocal vowels_index_count_9 = 1\n\t\
    local vowels_index_count_10 = 1\n\tlocal vowels_index_count_11 = 1\n\tlocal vowels_index_count_12\
    \ = 1\n\tlocal vowels_index_count_13 = 1\n\tlocal vowels_index_count_14 = 1\n\t\
    local vowels_index_count_15 = 1\n\tlocal vowels_index_count_16 = 1\n\tlocal vowels_index_count_17\
    \ = 1\n\tlocal vowels_index_count_18 = 1\n\tlocal vowels_index_count_19 = 1\n\t\
    local vowels_index_count_20 = 1\n\tlocal vowels_index_count_21 = 1\n\tlocal vowels_index_count_22\
    \ = 1\n\tlocal vowels_index_count_23 = 1\n\tlocal vowels_index_count_24 = 1\n\t\
    local vowels_index_count_25 = 1\n\tlocal vowels_index_count_26 = 1\n\tlocal vowels_index_count_27\
    \ = 1\n\tlocal vowels_index_count_28 = 1\n\tlocal vowels_index_count_29 = 1\n\t\
    local vowels_index_count_30 = 1\n\tlocal vowels_index_count_31 = 1\n\tlocal vowels_index_count_32\
    \ = 1\n\tlocal vowels_index_count_33 = 1\n\tlocal vowels_index_count_34 = 1\n\t\
    local vowels_index_count_35 = 1\n\tlocal vowels_index_count_36 = 1\n\tlocal vowels_index_count_37\
    \ = 1\n\tlocal vowels_index_count_38 = 1\n\tlocal vowels_index_count_39 = 1\n\t\
    local vowels_index_count_40 = 1\n\tlocal vowels_index_count_41 = 1\n\tlocal vowels_index_count_42\
    \ = 1\n\tlocal vowels_index_count_43 = 1\n\tlocal vowels_index_count_44 = 1\n\t\
    local vowels_index_count_45 = 1\n\tlocal vowels_index_count_46 = 1\n\tlocal vowels_index_count_47\
    \ = 1\n\tlocal vowels_index_count_48 = 1\n\tlocal vowels_index_count_49 = 1\n\t\
    local vowels_index_count_50 = 1\n\tlocal vowels_index_count_51 = 1\n\tlocal vowels_index_count_52\
    \ = 1\n\tlocal vowels_index_count_53 = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg83r6wzu.lua:72: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal vowels_count = #vowels\n\t\
    local vowels_index = 0\n\tlocal vowels_index_count = 0\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min = #word -\
    \ vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal\
    \ vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min = #word -\
    \ vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal\
    \ vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min = #word -\
    \ vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal\
    \ vowels_index_count_min = #word - vowels_count + 1\n\tlocal vowels_index_count_max\
    \ = #word - 1\n\tlocal vowels_index_count_min = #word - vowels_count + 1\n\tlocal\
    \ vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min = #word -\
    \ vowels_count + 1\n\tlocal vowels_index_count_max = #word - 1\n\tlocal vowels_index_count_min\
    \ = #word - vowels_count + 1\n\tlocal vowels_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqy48ss48.lua:76: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_count = #vowels\n\
    \    local vowels_index = 1\n    local vowels_index_count = 0\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_max = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index = 0\n    local vowels_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_index = 0\n    local vowels_index_count_min_index_index_count\
    \ = 0\n    local vowels_index_count_min_index_index_count_min = 0\n    local vowels_index_count_min_index_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_index_count_max_index = 0\n    local\
    \ vowels_index_count_min_index_index_count_min_index = 0\n    local vowels_index_count_min_index_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_max\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_max_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_min_index\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_min_index_count\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min_index_count_min_index_count_min\
    \ = 0\n    local vowels_index_count_min_index_index_count_min_index_count_min_index_count_min\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n\
    \    lu.assertEquals(candidate('yogurt'), 'u')\n    lu.assertEquals(candidate('full'),\
    \ 'u')\n    lu.assertEquals(candidate('easy'), '')\n    lu.assertEquals(candidate('eAsy'),\
    \ '')\n    lu.assertEquals(candidate('ali'), '')\n    lu.assertEquals(candidate('bad'),\
    \ 'a')\n    lu.assertEquals(candidate('most'), 'o')\n    lu.assertEquals(candidate('ab'),\
    \ '')\n    lu.assertEquals(candidate('ba'), '')\n    lu.assertEquals(candidate('quick'),\
    \ '')\n    lu.assertEquals(candidate('anime'), 'i')\n    lu.assertEquals(candidate('Asia'),\
    \ '')\n    lu.assertEquals(candidate('Above'), 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps46hu8be.lua:68: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    local\
    \ vowels_count = 0\n    local vowels_index = 0\n    local vowels_index_count =\
    \ 0\n    local vowels_index_count_max = #vowels\n    local vowels_index_count_min\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\n    local vowels_index_count_max\
    \ = #vowels\n    local vowels_index_count_min = #vowels\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2b6b71m.lua:82: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local vowels_count = #vowels\n\
    \  local vowels_index = #word\n  local vowels_index2 = #word - 1\n  local vowels_index3\
    \ = #word - 2\n  local vowels_index4 = #word - 3\n  local vowels_index5 = #word\
    \ - 4\n  local vowels_index6 = #word - 5\n  local vowels_index7 = #word - 6\n\
    \  local vowels_index8 = #word - 7\n  local vowels_index9 = #word - 8\n  local\
    \ vowels_index10 = #word - 9\n  local vowels_index11 = #word - 10\n  local vowels_index12\
    \ = #word - 11\n  local vowels_index13 = #word - 12\n  local vowels_index14 =\
    \ #word - 13\n  local vowels_index15 = #word - 14\n  local vowels_index16 = #word\
    \ - 15\n  local vowels_index17 = #word - 16\n  local vowels_index18 = #word -\
    \ 17\n  local vowels_index19 = #word - 18\n  local vowels_index20 = #word - 19\n\
    \  local vowels_index21 = #word - 20\n  local vowels_index22 = #word - 21\n  local\
    \ vowels_index23 = #word - 22\n  local vowels_index24 = #word - 23\n  local vowels_index25\
    \ = #word - 24\n  local vowels_index26 = #word - 25\n  local vowels_index27 =\
    \ #word - 26\n  local vowels_index28 = #word - 27\n  local vowels_index29 = #word\
    \ - 28\n  local vowels_index30 = #word - 29\n  local vowels_index31 = #word -\
    \ 30\n  local vowels_index32 = #word - 31\n  local vowels_index33 = #word - 32\n\
    \  local vowels_index34 = #word - 33\n  local vowels_index35 = #word - 34\n  local\
    \ vowels_index36 = #word - 35\n  local vowels_index37 = #word - 36\n  local vowels_index38\
    \ = #word - 37\n  local vowels_index39 = #word - 38\n  local vowels_index40 =\
    \ #word - 39\n  local vowels_index41 = #word - 40\n  local vowels_index42 = #word\
    \ - 41\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'), 'u')\n\
    \    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprdzmg603.lua:80: ''end'' expected (to close ''function'' at
    line 15) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- You are given a word. Your task is to find the closest vowel that stands\
    \ between \n-- two consonants from the right side of the word (case sensitive).\n\
    -- Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n-- find any vowel met the above condition. \n-- You may assume that\
    \ the given string contains English letter only.\n-- Example:\n-- >>> get_closest_vowel('yogurt')\n\
    -- 'u'\n-- >>> get_closest_vowel('FULL')\n-- 'U'\n-- >>> get_closest_vowel('quick')\n\
    -- ''\n-- >>> get_closest_vowel('ab')\n-- ''\nlocal function get_closest_vowel(word)\n\
    \  local vowels = {'a','e','i','o','u','A','E','I','O','U'}\n  local vowels_count\
    \ = #vowels\n  local vowels_index = #word\n  local vowels_index2 = #word\n  local\
    \ vowels_index3 = #word\n  local vowels_index4 = #word\n  local vowels_index5\
    \ = #word\n  local vowels_index6 = #word\n  local vowels_index7 = #word\n  local\
    \ vowels_index8 = #word\n  local vowels_index9 = #word\n  local vowels_index10\
    \ = #word\n  local vowels_index11 = #word\n  local vowels_index12 = #word\n  local\
    \ vowels_index13 = #word\n  local vowels_index14 = #word\n  local vowels_index15\
    \ = #word\n  local vowels_index16 = #word\n  local vowels_index17 = #word\n  local\
    \ vowels_index18 = #word\n  local vowels_index19 = #word\n  local vowels_index20\
    \ = #word\n  local vowels_index21 = #word\n  local vowels_index22 = #word\n  local\
    \ vowels_index23 = #word\n  local vowels_index24 = #word\n  local vowels_index25\
    \ = #word\n  local vowels_index26 = #word\n  local vowels_index27 = #word\n  local\
    \ vowels_index28 = #word\n  local vowels_index29 = #word\n  local vowels_index30\
    \ = #word\n  local vowels_index31 = #word\n  local vowels_index32 = #word\n  local\
    \ vowels_index33 = #word\n  local vowels_index34 = #word\n  local vowels_index35\
    \ = #word\n  local vowels_index36 = #word\n  local vowels_index37 = #word\n  local\
    \ vowels_index38 = #word\n  local vowels_index39 = #word\n  local vowels_index40\
    \ = #word\n  local vowels_index41 = #word\n  local vowels_index42 = #word\n  local\
    \ vowels_index43 = #word\n  local vowels_index44 = #word\n  local vowels_index45\
    \ = #word\n  local vowels_index46 = #word\n  local vowels_index47 = #word\n  local\
    \ vowels_index48 = #word\n  local vowels_index49 = #word\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = get_closest_vowel\n    lu.assertEquals(candidate('yogurt'),\
    \ 'u')\n    lu.assertEquals(candidate('full'), 'u')\n    lu.assertEquals(candidate('easy'),\
    \ '')\n    lu.assertEquals(candidate('eAsy'), '')\n    lu.assertEquals(candidate('ali'),\
    \ '')\n    lu.assertEquals(candidate('bad'), 'a')\n    lu.assertEquals(candidate('most'),\
    \ 'o')\n    lu.assertEquals(candidate('ab'), '')\n    lu.assertEquals(candidate('ba'),\
    \ '')\n    lu.assertEquals(candidate('quick'), '')\n    lu.assertEquals(candidate('anime'),\
    \ 'i')\n    lu.assertEquals(candidate('Asia'), '')\n    lu.assertEquals(candidate('Above'),\
    \ 'o')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6e4kfrzd.lua:87: ''end'' expected (to close ''function'' at
    line 15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750445
