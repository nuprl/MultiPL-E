language: lua
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33icv3hq.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33icv3hq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6cij07sg.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp6cij07sg.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp6cij07sg.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33icv3hq.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33icv3hq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdokhfvn.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwdokhfvn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdokhfvn.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwdokhfvn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdokhfvn.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwdokhfvn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  else\n      if v < smallest then\n        smallest = v\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp67gzi7b1.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp67gzi7b1.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33icv3hq.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33icv3hq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest_idx\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1cdt0epc.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1cdt0epc.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  else\n    return\
    \ nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k0m36iq.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5k0m36iq.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then return\
    \ nil end\n  if lst[1] == lst[2] then return lst[2] end\n  return lst[1]\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprllpw2ag.lua:21:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprllpw2ag.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rbq_xbm.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4rbq_xbm.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 0\n  for i = 1, #lst do\n    if smallest == nil or lst[i] < smallest\
    \ then\n      smallest = lst[i]\n      smallest_idx = i\n    end\n  end\n  return\
    \ smallest_idx and lst[smallest_idx]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk46s8kp.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkk46s8kp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 0\n  for i, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest, smallest_idx = v, i\n    end\n  end\n  return smallest_idx\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp5s0a64n.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp5s0a64n.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  else\n    return\
    \ nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n\
    \    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k0m36iq.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5k0m36iq.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp606gv7x8.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp606gv7x8.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gssjctf.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9gssjctf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gssjctf.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9gssjctf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    elseif\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8s31zd92.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8s31zd92.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
- exit_code: 1
  program: "-- You are given a list of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwdokhfvn.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwdokhfvn.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750399
