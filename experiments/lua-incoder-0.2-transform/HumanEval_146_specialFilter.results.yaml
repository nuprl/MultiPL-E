language: lua
name: HumanEval_146_specialFilter
results:
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 0 then\n          if num % 2 == 1 then\n     \
    \       count = count + 1\n          end\n        end\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n\
    \    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcch2evt6.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpcch2evt6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          count = count + 1\n       \
    \ end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q06y3hw.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q06y3hw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 1 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xhxl2kn.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5xhxl2kn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          count = count + 1\n       \
    \ end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q06y3hw.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q06y3hw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 0 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsck9kd5k.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsck9kd5k.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      count = count\
    \ + 1\n      if num % 2 == 1 and num % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_jz1xdw.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpg_jz1xdw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          if num % 100 == 0 then\n  \
    \          count = count + 1\n          end\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsi58stsq.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsi58stsq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 and num % 100 != 11 then\n          count =\
    \ count + 1\n        end\n      end\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3rrunwc.lua:14: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 1 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xhxl2kn.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5xhxl2kn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          if num % 100 == 0 then\n  \
    \          count = count + 1\n          end\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsi58stsq.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpsi58stsq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 1 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xhxl2kn.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5xhxl2kn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 1 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xhxl2kn.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5xhxl2kn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 2 == 1 then\n          count = count + 1\n        end\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5xhxl2kn.lua:28:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmp5xhxl2kn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          count = count + 1\n       \
    \ end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q06y3hw.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q06y3hw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          count = count + 1\n       \
    \ end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q06y3hw.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q06y3hw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 and num % 100 != 11 then\n          count =\
    \ count + 1\n        end\n      end\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = specialFilter\n\
    \    lu.assertEquals(candidate({5, -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15,\
    \ -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}),\
    \ 2)\n    lu.assertEquals(candidate({43, -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71,\
    \ -2, -33, 75, 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3rrunwc.lua:14: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n         \
    \   if num % 2 == 1 then\n                if num % 10 == 1 then\n            \
    \        if num % 100 == 0 then\n                        count = count + 1\n \
    \                   end\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4yuhekz.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph4yuhekz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      count = count\
    \ + 1\n      if num % 2 == 1 and num % 2 == 1 then\n        count = count + 1\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_jz1xdw.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpg_jz1xdw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n  local count =\
    \ 0\n  for _, num in ipairs(nums) do\n    if num > 10 then\n      if num % 2 ==\
    \ 1 then\n        if num % 10 == 1 then\n          count = count + 1\n       \
    \ end\n      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = specialFilter\n    lu.assertEquals(candidate({5,\
    \ -2, 1, -5}), 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n   \
    \ lu.assertEquals(candidate({33, -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43,\
    \ -12, 93, 125, 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75,\
    \ 21, 19}), 3)\n    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4q06y3hw.lua:27:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp4q06y3hw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
- exit_code: 1
  program: "-- Write a function that takes an array of numbers as input and returns\
    \ \n-- the number of elements in the array that are greater than 10 and both \n\
    -- first and last digits of a number are odd (1, 3, 5, 7, 9).\n-- For example:\n\
    -- >>> specialFilter({15, -73, 14, -15})\n-- 1\n-- >>> specialFilter({33, -2,\
    \ -3, 45, 21, 109})\n-- 2\nlocal function specialFilter(nums)\n    local count\
    \ = 0\n    for _, num in ipairs(nums) do\n        if num > 10 then\n         \
    \   if num % 2 == 1 then\n                if num % 10 == 1 then\n            \
    \        if num % 100 == 0 then\n                        count = count + 1\n \
    \                   end\n                end\n            end\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = specialFilter\n    lu.assertEquals(candidate({5, -2, 1, -5}),\
    \ 0)\n    lu.assertEquals(candidate({15, -73, 14, -15}), 1)\n    lu.assertEquals(candidate({33,\
    \ -2, -3, 45, 21, 109}), 2)\n    lu.assertEquals(candidate({43, -12, 93, 125,\
    \ 121, 109}), 4)\n    lu.assertEquals(candidate({71, -2, -33, 75, 21, 19}), 3)\n\
    \    lu.assertEquals(candidate({1}), 0)\n    lu.assertEquals(candidate({}), 0)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph4yuhekz.lua:29:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmph4yuhekz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750526
