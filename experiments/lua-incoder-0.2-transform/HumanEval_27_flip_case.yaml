name: HumanEval_27_flip_case
language: lua
prompt: "-- For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n-- >>> flip_case('Hello')\n-- 'hELLO'\nlocal function flip_case(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = flip_case\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hello!'),\
  \ 'hELLO!')\n    lu.assertEquals(candidate('These violent delights have violent\
  \ ends'), 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = string\n  local i, j = 1, #string\n  while i < j do\n\
    \    local c = string.sub(i, j)\n    if c:lower() ~= c then\n      result = string.sub(i,\
    \ j):upper() .. string.sub(i, j):lower()\n      i = i + 1\n      j = j - 1\n \
    \   else\n      i = i + 1\n    end\n  end\n  return result\nend", "  local result\
    \ = string\n  local i, j = 1, #string\n  while i < j do\n    local char = string.sub(i,\
    \ j)\n    if char == string.upper(char) then\n      result = string.sub(i, j -\
    \ 1) .. string.lower(char)\n      i = i + 1\n    elseif char == string.lower(char)\
    \ then\n      result = string.sub(i, j - 1) .. string.upper(char)\n      i = i\
    \ + 1\n    else\n      i = i + 1\n    end\n    j = j - 1\n  end\n  return result\n\
    end", "  local result = string\n  local i, j = 1, #string\n  while i <= j do\n\
    \    if string.sub(i, 1, 1) == string.sub(i, 1, 1) then\n      result = string.sub(i,\
    \ 1, 1):upper() .. string.sub(i, 2):lower()\n    else\n      result = string.sub(i,\
    \ 1, 1):lower() .. string.sub(i, 2):upper()\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return result\nend", "  local result = string\n  local length\
    \ = #string\n  for i = 1, length do\n    local char = string.sub(i, i)\n    local\
    \ upper = string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char, string.byte(char, string.byte(char, string.byte(char,\
    \ string.byte(char, string.byte(char", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "  local result = string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = {}\n  for _, c in ipairs(string)\
    \ do\n    local upper = string.match(c, \"^%l+$\")\n    local lower = string.match(c,\
    \ \"^%l\")\n    if upper and lower then\n      result[#result + 1] = string.sub(upper,\
    \ 1, #upper-1) + string.sub(lower, 1, #lower-1)\n    elseif upper then\n     \
    \ result[#result + 1] = string.sub(upper, 1, #upper-1)\n    elseif lower then\n\
    \      result[#result + 1] = string.sub(lower, 1, #lower-1)\n    else\n      result[#result\
    \ + 1] = c\n    end\n  end\n  return table.concat(result)\nend", "  local result\
    \ = {}\n  for i = 1, #string do\n    local char = string.sub(i, i)\n    local\
    \ upper = char:upper()\n    local lower = char:lower()\n    result[#result + 1]\
    \ = upper .. lower\n  end\n  return table.concat(result, \"\")\nend", "  local\
    \ result = string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "  local result = string\n  local i, j = 1, #string\n  while i <= j do\n\
    \    local char = string.sub(i, j)\n    if char == string.upper(char) then\n \
    \     result = string.sub(i, j) .. string.lower(char)\n      i = i + 1\n    elseif\
    \ char == string.lower(char) then\n      result = string.sub(i, j) .. string.upper(char)\n\
    \      i = i + 1\n    else\n      result = result .. char\n      i = i + 1\n \
    \   end\n    j = j + 1\n  end\n  return result\nend", "  local result = string\n\
    \  local i, j = 1, #string\n  while i < j do\n    if string.sub(i, 1, 1) ~= '^'\
    \ then\n      result = string.sub(result, 1, i) + string.sub(result, i + 1, j)\
    \ + string.sub(result, 1, j - 1)\n      i = i + 1\n      j = j - 1\n    else\n\
    \      i = i + 1\n      j = j - 1\n    end\n  end\n  return result\nend", "  local\
    \ result = string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "  local result = string\n  local i, j = 1, #string\n  while i <= j do\n\
    \    if string.sub(i, 1, 1) ~= string.sub(j, 1, 1) then\n      result = string.sub(j,\
    \ 1, 1) .. string.sub(i, 1, 1) .. string.sub(j, 2, 2) .. string.sub(i, 2, 2)\n\
    \    end\n    i = i + 1\n    j = j + 1\n  end\n  return result\nend", "  local\
    \ result = string\n  result:gsub('%l', function(c)\n    return string.char(tonumber(c)\
    \ + 32)\n  end)\n  result:gsub('%U', function(c)\n    return string.char(tonumber(c)\
    \ - 32)\n  end)\n  return result\nend", "  local result = string\n  result:gsub('%l',\
    \ function(c)\n    return string.char(tonumber(c) + 32)\n  end)\n  result:gsub('%U',\
    \ function(c)\n    return string.char(tonumber(c) - 32)\n  end)\n  return result\n\
    end", "  local result = {}\n  for _, c in ipairs(string) do\n    result[#result\
    \ + 1] = c:upper()\n  end\n  return table.concat(result)\nend", "  local result\
    \ = string\n  local i, j = 1, #string\n  while i < j do\n    local c = string.sub(i,\
    \ j)\n    if c == \"a\" then\n      result = string.sub(i, j):upper()\n      i\
    \ = i + 1\n    elseif c == \"A\" then\n      result = string.sub(i, j):lower()\n\
    \      i = i + 1\n    else\n      result = result .. c\n      i = i + 1\n    end\n\
    \    j = j + 1\n  end\n  return result\nend", "    local result = string\n   \
    \ for i = 1, #string do\n        if string.sub(i, 1, 1) == 'a' then\n        \
    \    string.sub(i, 1, 2) = string.sub(i, 2, 1)\n        end\n        if string.sub(i,\
    \ #string, 1) == 'A' then\n            string.sub(i, #string, 2) = string.sub(i,\
    \ #string, 2)\n        end\n    end\n    return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
