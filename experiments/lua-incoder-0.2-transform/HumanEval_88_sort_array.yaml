name: HumanEval_88_sort_array
language: lua
prompt: "-- Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n-- you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given array.\n-- Examples:\n-- >>> sort_array({})\n-- {}\n-- >>> sort_array({5})\n\
  -- {5}\n-- >>> sort_array({2, 4, 3, 0, 1, 5})\n-- {0, 1, 2, 3, 4, 5}\n-- >>> sort_array({2,\
  \ 4, 3, 0, 1, 5, 6})\n-- {6, 5, 4, 3, 2, 1, 0}\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  local new_array = {}\n  for _, value in pairs(array)\
    \ do\n    sum = sum + value\n    if sum % 2 == 1 then\n      table.insert(new_array,\
    \ value)\n    else\n      table.insert(new_array, -value)\n    end\n  end\n  return\
    \ new_array\nend", "  local sum = 0\n  local sorted_array = {}\n  for _, value\
    \ in ipairs(array) do\n    sum = sum + value\n    sorted_array[#sorted_array +\
    \ 1] = value\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return sorted_array\nend", "  local sum = 0\n  for _, v in ipairs(array)\
    \ do\n    sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(v1, v2)\n      return v1 <= v2\n    end)\n\
    \  end\n  return array\nend", "  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend", "  local sum = 0\n  for i = 1, #array do\n    sum\
    \ = sum + array[i]\n  end\n  local odd = (sum % 2 == 1)\n  if odd then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return (a < b) or (a > b)\n\
    \    end)\n  end\n  return array\nend", "  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 ~= 0 then\n    table.sort(sorted_array)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return b - a\n    end)\n \
    \ end\n  return sorted_array\nend", "  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    table.sort(array)\n\
    \  else\n    table.sort(array, function(a, b)\n      return b - a\n    end)\n\
    \  end\n  return array\nend", "  local sum = 0\n  local temp = {}\n  for i = 1,\
    \ #array do\n    sum = sum + array[i]\n    temp[i] = array[i]\n  end\n  if sum\
    \ % 2 ~= 0 then\n    table.sort(temp)\n  else\n    table.sort(temp, function(a,\
    \ b) return b - a end)\n  end\n  return temp\nend", "  local sum = 0\n  for _,\
    \ v in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n  \
    \  table.sort(array)\n  else\n    table.sort(array, function(v1, v2)\n      return\
    \ v2 < v1\n    end)\n  end\n  return array\nend", "  local sum = 0\n  local result\
    \ = {}\n  for _, value in pairs(array) do\n    sum = sum + value\n    if sum %\
    \ 2 == 1 then\n      table.insert(result, value)\n    else\n      table.insert(result,\
    \ value)\n      table.insert(result, -value)\n    end\n  end\n  return result\n\
    end", "  local sum = 0\n  local result = {}\n  for _, v in ipairs(array) do\n\
    \    sum = sum + v\n    table.insert(result, v)\n  end\n  if sum % 2 == 1 then\n\
    \    table.sort(result)\n  else\n    table.sort(result, function(a, b) return\
    \ a > b end)\n  end\n  return result\nend", "  local sum = 0\n  local result =\
    \ {}\n  for _, v in ipairs(array) do\n    sum = sum + v\n    table.insert(result,\
    \ v)\n  end\n  if sum % 2 ~= 0 then\n    table.sort(result)\n  else\n    table.sort(result,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return result\nend",
  "  local sum = 0\n  for _, value in ipairs(array) do\n    sum = sum + value\n  end\n\
    \  if sum % 2 ~= 0 then\n    table.sort(array)\n  else\n    table.sort(array,\
    \ function(a, b)\n      return b - a\n    end)\n  end\n  return array\nend", " \
    \ local sum = 0\n  for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if\
    \ sum % 2 == 1 then\n    table.sort(array)\n  else\n    table.sort(array, function(v1,\
    \ v2)\n      return v2 < v1\n    end)\n  end\n  return array\nend", "  local sum\
    \ = 0\n  local results = {}\n  for _, value in ipairs(array) do\n    sum = sum\
    \ + value\n    table.insert(results, value)\n  end\n  if sum % 2 ~= 0 then\n \
    \   table.sort(results)\n  else\n    table.sort(results, function(a, b)\n    \
    \  return b - a\n    end)\n  end\n  return results\nend", "  local sum = 0\n \
    \ for _, v in ipairs(array) do\n    sum = sum + v\n  end\n  if sum % 2 ~= 0 then\n\
    \    return table.sort(array)\n  else\n    return table.sort(array, function(a,\
    \ b)\n      return b - a\n    end)\n  end\nend", "  local sum = 0\n  local sorted_array\
    \ = {}\n  for i = 1, #array do\n    sum = sum + array[i]\n    sorted_array[i]\
    \ = array[i]\n  end\n  if sum % 2 == 1 then\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a < b\n    end)\n  else\n    table.sort(sorted_array, function(a,\
    \ b)\n      return a > b\n    end)\n  end\n  return sorted_array\nend", "  local\
    \ sum = 0\n  local sorted_array = {}\n  for i = 1, #array do\n    sum = sum +\
    \ array[i]\n    sorted_array[i] = array[i]\n  end\n  if sum % 2 == 1 then\n  \
    \  table.sort(sorted_array, function(a, b)\n      return a < b\n    end)\n  else\n\
    \    table.sort(sorted_array, function(a, b)\n      return a > b\n    end)\n \
    \ end\n  return sorted_array\nend", "  local sum = 0\n  for _, value in ipairs(array)\
    \ do\n    sum = sum + value\n  end\n  if sum % 2 ~= 0 then\n    return table.sort(array)\n\
    \  else\n    return table.sort(array, function(v1, v2)\n      return v1 > v2\n\
    \    end)\n  end\nend", "  local sum = 0\n  for _, v in ipairs(array) do\n   \
    \ sum = sum + v\n  end\n  if sum % 2 == 1 then\n    table.sort(array)\n  else\n\
    \    table.sort(array, function(a, b)\n      return b - a\n    end)\n  end\n \
    \ return array\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
