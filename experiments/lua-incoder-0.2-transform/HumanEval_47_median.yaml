name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the list l.\n-- >>> median({3, 1, 2, 4, 5})\n\
  -- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif\
    \ n == 1 then\n    return l[1]\n  end\n  local mid = math.floor(n / 2)\n  local\
    \ lower = median(l, 1, mid)\n  local upper = median(l, mid+1, n)\n  return lower\
    \ + ((upper - lower) / 2)\nend", "  if #l == 0 then\n    return nil\n  end\n \
    \ local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n \
    \ else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half-1] + l[half])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half-1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor((#l) / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n \
    \ end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid-1] + l[mid]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l)\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  end\n  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return median(l[mid], l[mid-1])\n  else\n  \
    \  return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local middle\
    \ = math.floor(#l / 2)\n  local median = l[middle]\n  for i = middle + 1, #l do\n\
    \    median = median + l[i] / 2\n  end\n  return median\nend", "  if #l == 0 then\
    \ return nil end\n  local middle = math.floor(#l / 2)\n  if middle == 0 then return\
    \ l[middle] end\n  if middle == 1 then return l[1] end\n  if #l % 2 == 1 then\
    \ return median(l[middle], l[#l]) end\n  local lower = middle - 1\n  local upper\
    \ = middle + 1\n  local pivot = l[middle]\n  while lower <= upper do\n    while\
    \ lower <= #l and l[lower] < pivot do lower = lower + 1 end\n    while upper >=\
    \ 1 and l[upper] > pivot do upper = upper - 1 end\n    if lower <= upper then\n\
    \      local mid = lower + (upper - lower) / 2\n      return l[mid]\n    end\n\
    \    lower = upper + 1\n    upper = middle + 1\n  end\n  return pivot\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half =\
    \ n / 2\n  local median1 = l[half]\n  local median2 = l[half + 1]\n  return median1\
    \ + median2 / (2 * n)\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n\
    \  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return (l[middle] +\
    \ l[middle - 1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  if n == 1 then\n    return l[1]\n  end\n\
    \  local mid = math.floor((n - 1) / 2)\n  if l[mid] ~= nil then\n    return l[mid]\n\
    \  end\n  return median(l, mid + 1, n)\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  if n == 1 then return l[1] end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n\
    \  else\n    return median(l[mid], l[mid+1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])/2\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then return l[mid] end\n  local lower = median(l[mid-1:1])\n\
    \  local upper = median(l[mid+1:#l])\n  return lower + (upper - lower) / 2\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half] + l[half+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  local n =\
    \ #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n    return\
    \ l[((n - 1) / 2)] + median(l[((n - 1) / 2) + 1 .. n])\n  else\n    return l[((n\
    \ - 1) / 2)]\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor((n\
    \ + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor((n + 1) / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[mid-1])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l - 1])\n  end\nend", "  local n = #l\n  if n ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor((n + 1) / 2)\n  if n\
    \ % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid]) / 2\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local mid = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid-1],\
    \ l[mid])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n\
    \  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2 - 1)])/2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local half = math.floor(#l / 2)\n  if half == 0 then return l[half]\
    \ end\n  if #l % 2 == 0 then return median(l[half], l[half + 1]) end\n  local\
    \ median = l[half]\n  for i = half + 2, #l do\n    median = median + l[i] / 2\n\
    \  end\n  return median\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor((#l) / 2)\n\
    \  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor((n + 1) / 2)\n  if n % 2 == 0\
    \ then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 ==\
    \ 0 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local mid = math.floor((n\
    \ + 1) * ((1.0 / n) + 0.5))\n  return median(l, mid - 1, mid)\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n == 1 then\n    return l[1]\n  end\n  local mid\
    \ = math.floor((n - 1) / 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid],\
    \ l[mid+1])\n  else\n    return median(l[mid], l[mid+1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local middle = math.floor(#l / 2)\n  if middle\
    \ == 0 then return l[middle] end\n  if middle == 1 then return l[1] end\n  return\
    \ median(l[middle], l[#l])\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l\
    \ - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[middle]\n  else\n    return (l[middle] + l[middle\
    \ - 1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[((n - 1) / 2)] + median(l[((n - 1) / 2) + 1 .. n])\n  else\n   \
    \ return l[((n - 1) / 2)] + median(l[((n - 1) / 2) - 1 .. n])\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half+1])\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local middle = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n\
    \  else\n    return median(l[middle-1], l[middle])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 ==\
    \ 0 then\n    return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)]\
    \ + l[math.floor(n/2 - 1)])/2\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then return l[mid] end\n\
    \  local lower = l[mid]\n  local upper = l[#l - 1]\n  if lower > upper then return\
    \ lower end\n  return median(l, mid - 1, upper)\nend", "  if #l == 0 then\n  \
    \  return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor((#l) / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  local half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n\
    \  else\n    return median(l[half], l[half + 1])\n  end\nend", "  local n = #l\n\
    \  if n == 0 then\n    return nil\n  end\n  if n == 1 then\n    return l[1]\n\
    \  end\n  local mid = math.floor((n - 1) / 2)\n  if l[mid] <= l[mid+1] then\n\
    \    return median(l[mid], l[mid+1])\n  else\n    return median(l[mid], l[mid+1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  if n\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor((#l) / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2.0\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
