language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs80f9wh.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbs80f9wh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = n\n                end\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7z8iwba.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo7z8iwba.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26924_q8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp26924_q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- If n is divisible by i, then\
    \ n is divisible by max_divisor\n            max_divisor = i\n            max_divisor_remainder\
    \ = n % i\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6a8ut_2.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpj6a8ut_2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = math.floor(n/2) + 1\n  local max_div2 = math.floor(n/max_div)\n\
    \  while max_div2 > max_div do\n    max_div = max_div2\n    max_div2 = math.floor(n/max_div)\n\
    \  end\n  return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb16bwwao.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb16bwwao.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26924_q8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp26924_q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  local max_divisor_ppppp\
    \ = 1\n  local max_divisor_pppppp = 1\n  local max_divisor_ppppppp = 1\n  local\
    \ max_divisor_pppppppp = 1\n  local max_divisor_ppppppppp = 1\n  local max_divisor_ppppppppp\
    \ = 1\n  local max_divisor_pppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n\
    \  local max_divisor_ppppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppppp = 1\n  local max_divisor_ppppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp = 1\n\
    \  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppp\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpes9fxvfz.lua:54: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem4_bjef.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpem4_bjef.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqpll1vv_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor_value = i\n      if divisor_value\
    \ > max_divisor then\n        max_divisor = divisor_value\n      end\n      if\
    \ divisor_value == max_divisor_value then\n        max_divisor_value = i\n   \
    \   end\n    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp00qd1v.lua:26:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpvp00qd1v.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  while max_divisor_remainder\
    \ > 1 do\n    max_divisor = max_divisor + 1\n    max_divisor_remainder = max_divisor_remainder\
    \ / max_divisor\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoapii5z4.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoapii5z4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8_y8tze.lua:25:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpp8_y8tze.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    local divisor = i\n    local remainder = n % divisor\n\
    \    if remainder == 0 then\n      max_divisor = divisor\n      max_divisor_remainder\
    \ = remainder\n      max_divisor_remainder_pow = i\n    end\n  end\n  return max_divisor\
    \ * max_divisor_remainder * max_divisor_remainder_pow\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9b66o0k.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq9b66o0k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
