language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs80f9wh.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbs80f9wh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = n\n                end\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7z8iwba.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo7z8iwba.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26924_q8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp26924_q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- If n is divisible by i, then\
    \ n is divisible by max_divisor\n            max_divisor = i\n            max_divisor_remainder\
    \ = n % i\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6a8ut_2.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpj6a8ut_2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = math.floor(n/2) + 1\n  local max_div2 = math.floor(n/max_div)\n\
    \  while max_div2 > max_div do\n    max_div = max_div2\n    max_div2 = math.floor(n/max_div)\n\
    \  end\n  return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb16bwwao.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb16bwwao.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26924_q8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp26924_q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  local max_divisor_ppppp\
    \ = 1\n  local max_divisor_pppppp = 1\n  local max_divisor_ppppppp = 1\n  local\
    \ max_divisor_pppppppp = 1\n  local max_divisor_ppppppppp = 1\n  local max_divisor_ppppppppp\
    \ = 1\n  local max_divisor_pppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n\
    \  local max_divisor_ppppppppppp = 1\n  local max_divisor_ppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppp = 1\n  local max_divisor_ppppppppppppp = 1\n  local\
    \ max_divisor_pppppppppppppp = 1\n  local max_divisor_ppppppppppppppp = 1\n  local\
    \ max_divisor_ppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp = 1\n\
    \  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppppp = 1\n  local max_divisor_pppppppppppppppppppppppp\
    \ = 1\n  local max_divisor_ppppppppppppppppppppppp\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpes9fxvfz.lua:54: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem4_bjef.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpem4_bjef.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqpll1vv_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor_value = i\n      if divisor_value\
    \ > max_divisor then\n        max_divisor = divisor_value\n      end\n      if\
    \ divisor_value == max_divisor_value then\n        max_divisor_value = i\n   \
    \   end\n    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp00qd1v.lua:26:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpvp00qd1v.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  while max_divisor_remainder\
    \ > 1 do\n    max_divisor = max_divisor + 1\n    max_divisor_remainder = max_divisor_remainder\
    \ / max_divisor\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoapii5z4.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoapii5z4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8_y8tze.lua:25:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpp8_y8tze.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_pow\
    \ = 1\n  for i = 2, n do\n    local divisor = i\n    local remainder = n % divisor\n\
    \    if remainder == 0 then\n      max_divisor = divisor\n      max_divisor_remainder\
    \ = remainder\n      max_divisor_remainder_pow = i\n    end\n  end\n  return max_divisor\
    \ * max_divisor_remainder * max_divisor_remainder_pow\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9b66o0k.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpq9b66o0k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6ktepxc.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpc6ktepxc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local p = n / i\n      if p > max_divisor then\n    \
    \    max_divisor = p\n        max_divisor_p = i\n      end\n    end\n  end\n \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2ppsb65r.lua:24:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmp2ppsb65r.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even.\n  -- We start at n-1 because\
    \ n is even.\n  for i = n, 1, -1 do\n    if n % i == 0 then\n      return i\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8h6mx2ef.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8h6mx2ef.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = i\n            elseif max_div > i then\n  \
    \              max_div = i\n                max_div_n = i\n            end\n \
    \       end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfqmhzfpg.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfqmhzfpg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is one less than the square root of n\n  local max_divisor\
    \ = math.floor(math.sqrt(n))\n  -- The largest divisor less than or equal to n\
    \ is one less than the square root of n\n  local max_divisor_less_than = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_2 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_3 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_4 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_5 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_6 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_7 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_8 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_9 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_10 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_11 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is one less than the square\
    \ root of n\n  local max_divisor_less_than_or_equal_to_12 = math.floor(math.sqrt(n))\
    \ + 1\n  -- The largest divisor less than or equal to n is \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvq7itgg9.lua:45: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div < i then\n          max_div = i\n        end\n      end\n \
    \     max_div_n = max_div_n * i\n    end\n  end\n  return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_l_4erd4.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_l_4erd4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor_value = i\n      if divisor_value\
    \ > max_divisor then\n        max_divisor = divisor_value\n      end\n    end\n\
    \  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdbac_24.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmdbac_24.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 0\n  for i = 2, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bz5baay.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9bz5baay.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: -1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by checking if n is even\n  if n % 2 == 0 then\n    -- If n is\
    \ even, divide it by 2\n    return largest_divisor(n / 2)\n  else\n    -- If n\
    \ is odd, divide it by 3 and check if it's even\n    return largest_divisor(n\
    \ / 3) * 3 or largest_divisor(n / 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821701
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptwl0y89h.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            local div = i / n\n            if div > max_div\
    \ then\n                max_div = div\n                max_div_n = n\n       \
    \     end\n        end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb7kikat0.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpb7kikat0.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb7kikat0.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  local max_divisor_value_n3 = 1\n  local\
    \ max_divisor_value_n4 = 1\n  local max_divisor_value_n5 = 1\n  local max_divisor_value_n6\
    \ = 1\n  local max_divisor_value_n7 = 1\n  local max_divisor_value_n8 = 1\n  local\
    \ max_divisor_value_n9 = 1\n  local max_divisor_value_n10 = 1\n  local max_divisor_value_n11\
    \ = 1\n  local max_divisor_value_n12 = 1\n  local max_divisor_value_n13 = 1\n\
    \  local max_divisor_value_n14 = 1\n  local max_divisor_value_n15 = 1\n  local\
    \ max_divisor_value_n16 = 1\n  local max_divisor_value_n17 = 1\n  local max_divisor_value_n18\
    \ = 1\n  local max_divisor_value_n19 = 1\n  local max_divisor_value_n20 = 1\n\
    \  local max_divisor_value_n21 = 1\n  local max_divisor_value_n22 = 1\n  local\
    \ max_divisor_value_n23 = 1\n  local max_divisor_value_n24 = 1\n  local max_divisor_value_n25\
    \ = 1\n  local max_divisor_value_n26 = 1\n  local max_divisor_value_n27 = 1\n\
    \  local max_divisor_value_n28 = 1\n  local max_divisor_value_n29 = 1\n  local\
    \ max_divisor_value_n30 = 1\n  local max_divisor_value_n31 = 1\n  local max_divisor_value_n32\
    \ = 1\n  local max_divisor_value_n33 = 1\n  local max_divisor_value_n34 = 1\n\
    \  local max_divisor_value_n35 = 1\n  local max_divisor_value_n36 = 1\n  local\
    \ max_divisor_value_n37 = 1\n  local max_divisor_value_n38 = 1\n  local max_divisor_value_n39\
    \ = 1\n  local max_divisor_value_n40 = 1\n  local max_divisor_value_n41 = 1\n\
    \  local max_divisor_value_n42 = 1\n  local max_divisor_value_n43 = 1\n  local\
    \ max_divisor_value_n44 = 1\n  local max_divisor_value_n45 = 1\n  local max_divisor_value_n46\
    \ = 1\n  local max_divisor_value_n47 = 1\n  local max_divisor_value_n48 = 1\n\
    \  local max_divisor_value_n49 = 1\n  local max_divisor_value_n50 = 1\n  local\
    \ max_divisor_value_n51 = 1\n  local max_divisor_value_n52 = 1\n  local max_divisor_value_n53\
    \ = 1\n  local max_divisor_value_n54 = 1\n  local max_divisor_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi13i6b51.lua:73: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor_remainder = i\n                max_divisor = i\n\
    \            else\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n                max_divisor = max_divisor + i\n            end\n      \
    \  end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxu0_e0f.lua:24:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmptxu0_e0f.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqpll1vv_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    local divisor_p = math.floor(n/i)\n    local divisor_n\
    \ = (n - divisor_p*i)\n    if divisor_p*divisor_n == n then\n      if divisor_p*divisor_n\
    \ > max_divisor then\n        max_divisor = divisor_p*divisor_n\n        max_divisor_p\
    \ = divisor_p\n        max_divisor_n = divisor_n\n      end\n    end\n  end\n\
    \  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr50w6cc4.lua:27:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpr50w6cc4.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp26924_q8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp26924_q8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            while n % p\
    \ == 0 do\n                p = p * 2\n            end\n            if p > max_divisor\
    \ then\n                max_divisor = p\n                max_divisor_p = i\n \
    \           end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jo646gi.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8jo646gi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckuft0dt.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpckuft0dt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2)\n    for i = max_div, 1, -1 do\n        if\
    \ n % i == 0 then\n            return i\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n / 2\n  -- The smallest divisor is n / 2\n  -- The largest divisor\
    \ is n / 4\n  -- The smallest divisor is n / 4\n  -- The largest divisor is n\
    \ / 8\n  -- The smallest divisor is n / 8\n  -- The largest divisor is n / 16\n\
    \  -- The smallest divisor is n / 16\n  -- The largest divisor is n / 32\n  --\
    \ The smallest divisor is n / 32\n  -- The largest divisor is n / 64\n  -- The\
    \ smallest divisor is n / 64\n  -- The largest divisor is n / 128\n  -- The smallest\
    \ divisor is n / 128\n  -- The largest divisor is n / 256\n  -- The smallest divisor\
    \ is n / 256\n  -- The largest divisor is n / 512\n  -- The smallest divisor is\
    \ n / 512\n  -- The largest divisor is n / 1024\n  -- The smallest divisor is\
    \ n / 1024\n  -- The largest divisor is n / 2048\n  -- The smallest divisor is\
    \ n / 2048\n  -- The largest divisor is n / 4096\n  -- The smallest divisor is\
    \ n / 4096\n  -- The largest divisor is n / 8192\n  -- The smallest divisor is\
    \ n / 8192\n  -- The largest divisor is n / 16384\n  -- The smallest divisor is\
    \ n / 16384\n  -- The largest divisor is n / 32768\n  -- The smallest divisor\
    \ is n / 32768\n  -- The largest divisor is n / 65536\n  -- The smallest divisor\
    \ is n / 65536\n  -- The largest divisor is n / 131072\n  -- The smallest divisor\
    \ is n / 131072\n  -- The largest divisor is n / 262144\n  -- The smallest divisor\
    \ is n / 262144\n  -- The largest divisor is n / 524288\n  -- The smallest divisor\
    \ is n / 524288\n  -- The largest divisor is n / 1048576\n  -- The smallest divisor\
    \ is n / 1048576\n  -- The largest divisor is n / 2097152\n  -- The smallest divisor\
    \ is n / 2097152\n  -- The largest \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyjez6grx.lua:61: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by checking if n is evenly divisible by 2\n  if n % 2 == 0 then\n\
    \    -- If it is, check if it evenly divides n\n    if n % 4 == 0 then\n     \
    \ -- If it does, return n\n      return n\n    end\n    -- If it doesn't, check\
    \ if it evenly divides n\n    if n % 8 == 0 then\n      -- If it does, return\
    \ n\n      return n\n    end\n    -- If it doesn't, check if it evenly divides\
    \ n\n    if n % 16 == 0 then\n      -- If it does, return n\n      return n\n\
    \    end\n    -- If it doesn't, check if it evenly divides n\n    if n % 32 ==\
    \ 0 then\n      -- If it does, return n\n      return n\n    end\n    -- If it\
    \ doesn't, check if it evenly divides n\n    if n % 64 == 0 then\n      -- If\
    \ it does, return n\n      return n\n    end\n    -- If it doesn't, check if it\
    \ evenly divides n\n    if n % 128 == 0 then\n      -- If it does, return n\n\
    \      return n\n    end\n    -- If it doesn't, check if it evenly divides n\n\
    \    if n % 256 == 0 then\n      -- If it does, return n\n      return n\n   \
    \ end\n    -- If it doesn't, check if it evenly divides n\n    if n % 512 == 0\
    \ then\n      -- If it does, return n\n      return n\n    end\n    -- If it doesn't,\
    \ check if it evenly divides n\n    if n % 1024 == 0 then\n      -- If it does,\
    \ return n\n      return n\n    end\n    -- If it doesn't, check if it evenly\
    \ divides n\n    if n % 2048 == 0 then\n      -- If it does, return n\n      return\
    \ n\n    end\n    -- If it doesn't, check if it evenly divides n\n    if n % 4096\
    \ == 0 then\n      -- If it does, return n\n      return n\n    end\n    -- If\
    \ it doesn't, check if it evenly divides n\n    if n % 8192 == 0 then\n      --\
    \ If it does, return n\n      return n\n    end\n    -- If it doesn't, check if\
    \ it evenly divides n\n    if n % 16384 == 0 then\n      -- If it does, return\
    \ n\n      return n\n    end\n    -- If it doesn't, check if it evenly divides\
    \ n\n    if n % 32768 == 0 then\n      -- If it does, return n\n      return n\n\
    \    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj4o0nxo8.lua:88: ''end'' expected (to close ''if'' at line
    6) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2i_f6413.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp2i_f6413.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2i_f6413.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2b4fwsx.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx2b4fwsx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstnmj6_0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpstnmj6_0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder == 0\
    \ then\n                max_divisor = i\n                max_divisor_remainder\
    \ = n\n            else\n                if max_divisor_remainder > i then\n \
    \                   max_divisor = i\n                    max_divisor_remainder\
    \ = n\n                end\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpasu4ynr1.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpasu4ynr1.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n-1\n  if n % 2 == 1 then\n    return n-1\n  end\n \
    \ -- If n is prime, return n\n  if prime_table[n] then\n    return n\n  end\n\
    \  -- If n is divisible by 2, return n/2\n  if n % 2 == 0 then\n    return n/2\n\
    \  end\n  -- If n is divisible by 3, return n-1\n  if n % 3 == 0 then\n    return\
    \ n-1\n  end\n  -- If n is divisible by 5, return n/2\n  if n % 5 == 0 then\n\
    \    return n/2\n  end\n  -- If n is divisible by 7, return n-1\n  if n % 7 ==\
    \ 0 then\n    return n-1\n  end\n  -- If n is divisible by 11, return n/2\n  if\
    \ n % 11 == 0 then\n    return n/2\n  end\n  -- If n is divisible by 13, return\
    \ n-1\n  if n % 13 == 0 then\n    return n-1\n  end\n  -- If n is divisible by\
    \ 17, return n/2\n  if n % 17 == 0 then\n    return n/2\n  end\n  -- If n is divisible\
    \ by 19, return n-1\n  if n % 19 == 0 then\n    return n-1\n  end\n  -- If n is\
    \ divisible by 23, return n/2\n  if n % 23 == 0 then\n    return n/2\n  end\n\
    \  -- If n is divisible by 29, return n-1\n  if n % 29 == 0 then\n    return n-1\n\
    \  end\n  -- If n is divisible by 31, return n/2\n  if n % 31 == 0 then\n    return\
    \ n/2\n  end\n  -- If n is divisible by 37, return n-1\n  if n % 37 == 0 then\n\
    \    return n-1\n  end\n  -- If n is divisible by 41, return n/2\n  if n % 41\
    \ == 0 then\n    return n/2\n  end\n  -- If n is divisible by 43, return n-1\n\
    \  if n % 43 == 0 then\n    return n-1\n  end\n  -- If n is divisible by 47, return\
    \ n/2\n  if n % 47 == 0 then\n    return n/2\n  end\n  -- If n is divisible by\
    \ 53, return n-1\n  if n % 53 == 0 then\n    return n-1\n  end\n  -- If n is divisible\
    \ by 59, return n/2\n  if n % 59 == 0 then\n    return n/2\n  end\n  -- \nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatpsnnrt.lua:97: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_square = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            local\
    \ divisor_square = i * i\n            if divisor_square > max_divisor_square then\n\
    \                max_divisor = divisor\n                max_divisor_square = divisor_square\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2en1xg1.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpt2en1xg1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            divisor = i\n            max_divisor = i\n\
    \        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj7lz1os.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplj7lz1os.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpls6xehbc.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpls6xehbc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            divisor = i\n            max_divisor = i\n\
    \        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplj7lz1os.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplj7lz1os.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The largest divisor is n-1 if n is even\n\
    \  -- The largest divisor is n-1 if n is odd\n  -- The largest divisor is n-1\
    \ if n is divisible by 2\n  -- The largest divisor is n-1 if n is divisible by\
    \ 3\n  -- The largest divisor is n-1 if n is divisible by 5\n  -- The largest\
    \ divisor is n-1 if n is divisible by 7\n  -- The largest divisor is n-1 if n\
    \ is divisible by 11\n  -- The largest divisor is n-1 if n is divisible by 13\n\
    \  -- The largest divisor is n-1 if n is divisible by 17\n  -- The largest divisor\
    \ is n-1 if n is divisible by 19\n  -- The largest divisor is n-1 if n is divisible\
    \ by 23\n  -- The largest divisor is n-1 if n is divisible by 29\n  -- The largest\
    \ divisor is n-1 if n is divisible by 31\n  -- The largest divisor is n-1 if n\
    \ is divisible by 37\n  -- The largest divisor is n-1 if n is divisible by 41\n\
    \  -- The largest divisor is n-1 if n is divisible by 43\n  -- The largest divisor\
    \ is n-1 if n is divisible by 47\n  -- The largest divisor is n-1 if n is divisible\
    \ by 53\n  -- The largest divisor is n-1 if n is divisible by 59\n  -- The largest\
    \ divisor is n-1 if n is divisible by 61\n  -- The largest divisor is n-1 if n\
    \ is divisible by 67\n  -- The largest divisor is n-1 if n is divisible by 71\n\
    \  -- The largest divisor is n-1 if n is divisible by 73\n  -- The largest divisor\
    \ is n-1 if n is divisible by 79\n  -- The largest divisor is n-1 if n is divisible\
    \ by 83\n  -- The largest divisor is n-1 if n is divisible by 89\n  -- The largest\
    \ divisor is n-1 if n is divisible by 97\n  -- The largest divisor is n-1 if n\
    \ is divisible by 101\n  -- The largest divisor is n-1 if n is divisible by 103\n\
    \  -- The largest divisor is n-1 if n is divisible by \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_03anlg7.lua:47: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    if max_div2 > max_div then\n        max_div = max_div2\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2wmnx03.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpu2wmnx03.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ > i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u8d9imf.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_u8d9imf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckuft0dt.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpckuft0dt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 1, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ < i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8_mec_tw.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8_mec_tw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjoivb71.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpnjoivb71.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div_n\
    \ * i > n then\n                    max_div = i\n                    max_div_n\
    \ = n\n                end\n            end\n        end\n    end\n    return\
    \ max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7z8iwba.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo7z8iwba.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: -1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local p = i\n      local n =\
    \ n / i\n      while n > 1 do\n        local q = math.floor(n/p)\n        if q\
    \ > max_divisor then\n          max_divisor = q\n          max_divisor_p = p\n\
    \          max_divisor_n = n\n        end\n        p = p * p\n        n = n\n\
    \      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821701
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfqljddno.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n/2+1\n  return n/2 + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn8mspsu.lua:16:\
    \ expected: 1, actual: 2.5\nstack traceback:\n\t/tmp/tmpxn8mspsu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(math.sqrt(n))\n    local max_div2 = max_div *\
    \ max_div\n    local max_div3 = max_div2 * max_div\n    local max_div4 = max_div3\
    \ * max_div\n    local max_div5 = max_div4 * max_div\n    local max_div6 = max_div5\
    \ * max_div\n    local max_div7 = max_div6 * max_div\n    local max_div8 = max_div7\
    \ * max_div\n    local max_div9 = max_div8 * max_div\n    local max_div10 = max_div9\
    \ * max_div\n    local max_div11 = max_div10 * max_div\n    local max_div12 =\
    \ max_div11 * max_div\n    local max_div13 = max_div12 * max_div\n    local max_div14\
    \ = max_div13 * max_div\n    local max_div15 = max_div14 * max_div\n    local\
    \ max_div16 = max_div15 * max_div\n    local max_div17 = max_div16 * max_div\n\
    \    local max_div18 = max_div17 * max_div\n    local max_div19 = max_div18 *\
    \ max_div\n    local max_div20 = max_div19 * max_div\n    local max_div21 = max_div20\
    \ * max_div\n    local max_div22 = max_div21 * max_div\n    local max_div23 =\
    \ max_div22 * max_div\n    local max_div24 = max_div23 * max_div\n    local max_div25\
    \ = max_div24 * max_div\n    local max_div26 = max_div25 * max_div\n    local\
    \ max_div27 = max_div26 * max_div\n    local max_div28 = max_div27 * max_div\n\
    \    local max_div29 = max_div28 * max_div\n    local max_div30 = max_div29 *\
    \ max_div\n    local max_div31 = max_div30 * max_div\n    local max_div32 = max_div31\
    \ * max_div\n    local max_div33 = max_div32 * max_div\n    local max_div34 =\
    \ max_div33 * max_div\n    local max_div35 = max_div34 * max_div\n    local max_div36\
    \ = max_div35 * max_div\n    local max_div37 = max_div36 * max_div\n    local\
    \ max_div38 = max_div37 * max_div\n    local max_div39 = max_div38 * max_div\n\
    \    local max_div40 = max_div39 * max_div\n    local max_div41 = max_div40 *\
    \ max_div\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsfenb9k2.lua:58: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_div = math.floor(n/2)\n  while n %\
    \ max_div == 0 do\n    max_div = max_div * 2\n  end\n  return max_div\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7fihznd.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpb7fihznd.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2)\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_div36\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyhdugv5m.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use the fact that if n is a perfect square, its largest divisor is also\
    \ a perfect square.\n  -- This means we can use the fact that if n is a perfect\
    \ square, its largest divisor is also a perfect square\n  -- and we can use the\
    \ fact that if n is a perfect square, its largest divisor is also a perfect square\n\
    \  -- to find its largest divisor by checking if n is evenly divisible by its\
    \ largest divisor.\n  -- If n is not evenly divisible by its largest divisor,\
    \ then the largest divisor is n\n  -- If n is evenly divisible by its largest\
    \ divisor, then the largest divisor is its largest divisor\n  -- If n is not evenly\
    \ divisible by its largest divisor, then the largest divisor is n\n  -- If n is\
    \ evenly divisible by its largest divisor, then the largest divisor is its largest\
    \ divisor\n  -- If n is not evenly divisible by its largest divisor, then the\
    \ largest divisor is n\n  -- If n is evenly divisible by its largest divisor,\
    \ then the largest divisor is its largest divisor\n  -- If n is not evenly divisible\
    \ by its largest divisor, then the largest divisor is n\n  -- If n is evenly divisible\
    \ by its largest divisor, then the largest divisor is its largest divisor\n  --\
    \ If n is not evenly divisible by its largest divisor, then the largest divisor\
    \ is n\n  -- If n is evenly divisible by its largest divisor, then the largest\
    \ divisor is its largest divisor\n  -- If n is not evenly divisible by its largest\
    \ divisor, then the largest divisor is n\n  -- If n is evenly divisible by its\
    \ largest divisor, then the largest divisor is its largest divisor\n  -- If n\
    \ is not evenly divisible by its largest divisor, then the largest divisor is\
    \ n\n  -- If n is evenly divisible by its largest divisor, then the largest divisor\
    \ is its largest divisor\n  -- If n is not evenly divisible by its largest divisor,\
    \ then the largest divisor is n\n  -- If n is evenly divisible by its largest\
    \ divisor, then the largest divisor is its largest divisor\n  -- If n is not evenly\
    \ divisible by its largest divisor, then the largest divisor is n\n  -- If n is\
    \ evenly divisible by its largest divisor, then the largest divisor is its largest\
    \ divisor\n  -- If n is not evenly divisible by its largest divisor, then the\
    \ largest divisor is \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1e1x8a7m.lua:39: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div > i then\n          max_div = i\n        end\n      end\n \
    \     max_div_n = max_div_n * i\n    end\n  end\n  return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7484n5sy.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7484n5sy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl8dfqmls.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpl8dfqmls.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_is_even\
    \ = 1\n  for i = 2, n do\n    local divisor = i\n    while divisor > 1 do\n  \
    \    divisor = divisor / 2\n      if divisor > max_divisor then\n        max_divisor\
    \ = divisor\n      end\n    end\n    if max_divisor > 1 then\n      max_divisor_remainder\
    \ = max_divisor_remainder * max_divisor + max_divisor\n      if max_divisor_remainder\
    \ % 2 == 0 then\n        max_divisor_remainder_is_even = 0\n      end\n    end\n\
    \  end\n  if max_divisor_remainder_is_even then\n    return max_divisor\n  else\n\
    \    return max_divisor_remainder\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2s1dys8.lua:33:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmph2s1dys8.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor, max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphm994kqh.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphm994kqh.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor_value*i\n           \
    \ end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5r9qo85d.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5r9qo85d.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc6ktepxc.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpc6ktepxc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor of n that divides n evenly is n-1\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 1\n  -- >>> largest_divisor(21)\n\
    \  -- 2\n  -- >>> largest_divisor(22)\n  -- 3\n  -- >>> largest_divisor(23)\n\
    \  -- 4\n  -- >>> largest_divisor(24)\n  -- 5\n  -- >>> largest_divisor(25)\n\
    \  -- 6\n  -- >>> largest_divisor(26)\n  -- 7\n  -- >>> largest_divisor(27)\n\
    \  -- 8\n  -- >>> largest_divisor(28)\n  -- 9\n  -- >>> largest_divisor(29)\n\
    \  -- 10\n  -- >>> largest_divisor(30)\n  -- 11\n  -- >>> largest_divisor(31)\n\
    \  -- 12\n  -- >>> largest_divisor(32)\n  -- 13\n  -- >>> largest_divisor(33)\n\
    \  -- 14\n  -- >>> largest_divisor(34)\n  -- 15\n  -- >>> largest_divisor(35)\n\
    \  -- 16\n  -- >>> largest_divisor(36)\n  -- 17\n  -- >>> largest_divisor(37)\n\
    \  -- 18\n  -- >>> largest_divisor(38)\n  -- 19\n  -- >>> largest_divisor(39)\n\
    \  -- 20\n  -- >>> largest_divisor(40)\n  -- 21\n  -- >>> largest_divisor(41)\n\
    \  -- 22\n  -- >>> largest_divisor(42)\n  -- 23\n  -- >>> largest_divisor(43)\n\
    \  -- 24\n  -- >>> largest_divisor(44)\n  -- 25\n  -- >>> largest_divisor(45)\n\
    \  -- 26\n  -- >>> largest_divisor(46)\n  -- 27\n  -- >>> largest_divisor(47)\n\
    \  -- 28\n  -- >>> largest_divisor(48)\n  -- 29\n  -- >>> largest_divisor(49)\n\
    \  -- 30\n  -- >>> largest_divisor(50)\n  -- 31\n  -- >>> largest_divisor(\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvt8il9ji.lua:90: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            else\n                max_divisor\
    \ = i\n                max_divisor_p = n / i\n                max_divisor_n =\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzruznpn9.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzruznpn9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 1\n    local max_div_n = 1\n    for i = 2, n do\n       \
    \ if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn9_airf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvn9_airf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local p = i\n      local n =\
    \ n / i\n      while n > 1 do\n        local q = math.floor(n/2)\n        if q\
    \ * p > max_divisor then\n          max_divisor = q * p\n          max_divisor_p\
    \ = p\n          max_divisor_n = q\n        end\n        p = p * 2\n        n\
    \ = n / 2\n      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9z6ohym.lua:34:\
    \ expected: 7, actual: 21\nstack traceback:\n\t/tmp/tmpk9z6ohym.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2b4fwsx.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx2b4fwsx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local divisor_p = math.floor(n/i)\n      if divisor_p\
    \ > max_divisor then\n        max_divisor = divisor_p\n        max_divisor_p =\
    \ i\n      end\n    end\n  end\n  return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitljnr_p.lua:24:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpitljnr_p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div_n * i > max_div then\n          max_div = max_div_n\n     \
    \   end\n      end\n      max_div_n = i\n    end\n  end\n  return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcsfv1tmq.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcsfv1tmq.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            else\n                max_divisor\
    \ = i\n                max_divisor_p = n / i\n                max_divisor_n =\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzruznpn9.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzruznpn9.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor * i\n            end\n\
    \        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn91j296m.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpn91j296m.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor2 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor3 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor4 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor5 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor6 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor7 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor8 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor9 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor10 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor11 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor12 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor13 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor14 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor15 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor16 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor17 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor18 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor19 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor20 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor21 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor22 = math.floor(math.sqrt(n))\n\
    \  -- We only need to check divisors up to sqrt(n)\n  local max_divisor23 = \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3tzlqha_.lua:51: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ > i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_u8d9imf.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_u8d9imf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(math.sqrt(n))\n    local max_div2 = math.floor(math.sqrt(max_div))\n\
    \    local max_div3 = math.floor(math.sqrt(max_div2))\n    local max_div4 = math.floor(math.sqrt(max_div3))\n\
    \    local max_div5 = math.floor(math.sqrt(max_div4))\n    local max_div6 = math.floor(math.sqrt(max_div5))\n\
    \    local max_div7 = math.floor(math.sqrt(max_div6))\n    local max_div8 = math.floor(math.sqrt(max_div7))\n\
    \    local max_div9 = math.floor(math.sqrt(max_div8))\n    local max_div10 = math.floor(math.sqrt(max_div9))\n\
    \    local max_div11 = math.floor(math.sqrt(max_div10))\n    local max_div12 =\
    \ math.floor(math.sqrt(max_div11))\n    local max_div13 = math.floor(math.sqrt(max_div12))\n\
    \    local max_div14 = math.floor(math.sqrt(max_div13))\n    local max_div15 =\
    \ math.floor(math.sqrt(max_div14))\n    local max_div16 = math.floor(math.sqrt(max_div15))\n\
    \    local max_div17 = math.floor(math.sqrt(max_div16))\n    local max_div18 =\
    \ math.floor(math.sqrt(max_div17))\n    local max_div19 = math.floor(math.sqrt(max_div18))\n\
    \    local max_div20 = math.floor(math.sqrt(max_div19))\n    local max_div21 =\
    \ math.floor(math.sqrt(max_div20))\n    local max_div22 = math.floor(math.sqrt(max_div21))\n\
    \    local max_div23 = math.floor(math.sqrt(max_div22))\n    local max_div24 =\
    \ math.floor(math.sqrt(max_div23))\n    local max_div25 = math.floor(math.sqrt(max_div24))\n\
    \    local max_div26 = math.floor(math.sqrt(max_div25))\n    local max_div27 =\
    \ math.floor(math.sqrt(max_div26))\n    local max_div28 = math.floor(math.sqrt(max_div27))\n\
    \    local max_div29 = math.floor(math.sqrt(max_div28))\n    local max_div30 =\
    \ math.floor(math.sqrt(max_div29))\n    local max_div31 = math.floor(math.sqrt(max_div30))\n\
    \    local max_div32 = math.floor(math.sqrt(max_div31))\n    local max_div33 =\
    \ math.floor(math.sqrt(max_div32))\n    local max_div34 = math.floor(math.sqrt(max_div33))\n\
    \    local max_div35 = math.floor(math.sqrt(max_div34))\n    local max_div36 =\
    \ math.floor(math.sqrt(max_div35))\n    local max_div37 = math.floor(math.sqrt(max_div36))\n\
    \    local max_div38 = math.floor(math.sqrt(max_div37))\n    local max_div39 =\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiqwpcop5.lua:44: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps9tkzgpn.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmps9tkzgpn.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 1, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            elseif max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            end\n \
    \       end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5yx667tw.lua:26:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp5yx667tw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      if max_divisor_value < i then\n        max_divisor_value\
    \ = i\n      end\n      if max_divisor_value > n then\n        max_divisor = n\n\
    \      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzipvs4bj.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpzipvs4bj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj5s93eq.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoj5s93eq.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n\n  if n % 2 == 0 then\n    return n-1\n  else\n    -- The largest\
    \ divisor is n if n is evenly divisible by all numbers from 2 to n\n    return\
    \ n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10g58g7y.lua:18:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp10g58g7y.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i\n            while n % p\
    \ == 0 do\n                p = p + 1\n            end\n            if p > max_divisor\
    \ then\n                max_divisor = p\n                max_divisor_p = i\n \
    \           end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufvxi8u9.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpufvxi8u9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            divisor =\
    \ i\n            if max_divisor < divisor then\n                max_divisor =\
    \ divisor\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfensyrm.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpwfensyrm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is one less than the square root of n\n  -- >>> largest_divisor(15)\n\
    \  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>> largest_divisor(19)\n\
    \  -- 1\n  -- >>> largest_divisor(20)\n  -- 0\n  -- >>> largest_divisor(21)\n\
    \  -- 1\n  -- >>> largest_divisor(22)\n  -- 2\n  -- >>> largest_divisor(23)\n\
    \  -- 3\n  -- >>> largest_divisor(24)\n  -- 4\n  -- >>> largest_divisor(25)\n\
    \  -- 5\n  -- >>> largest_divisor(26)\n  -- 6\n  -- >>> largest_divisor(27)\n\
    \  -- 7\n  -- >>> largest_divisor(28)\n  -- 8\n  -- >>> largest_divisor(29)\n\
    \  -- 9\n  -- >>> largest_divisor(30)\n  -- 10\n  -- >>> largest_divisor(31)\n\
    \  -- 11\n  -- >>> largest_divisor(32)\n  -- 12\n  -- >>> largest_divisor(33)\n\
    \  -- 13\n  -- >>> largest_divisor(34)\n  -- 14\n  -- >>> largest_divisor(35)\n\
    \  -- 15\n  -- >>> largest_divisor(36)\n  -- 16\n  -- >>> largest_divisor(37)\n\
    \  -- 17\n  -- >>> largest_divisor(38)\n  -- 18\n  -- >>> largest_divisor(39)\n\
    \  -- 19\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>> largest_divisor(41)\n\
    \  -- 21\n  -- >>> largest_divisor(42)\n  -- 22\n  -- >>> largest_divisor(43)\n\
    \  -- 23\n  -- >>> largest_divisor(44)\n  -- 24\n  -- >>> largest_divisor(45)\n\
    \  -- 25\n  -- >>> largest_divisor(46)\n  -- 26\n  -- >>> largest_divisor(47)\n\
    \  -- 27\n  -- >>> largest_divisor(48)\n  -- 28\n  -- >>> largest_divisor(49)\n\
    \  -- 29\n  -- >>> largest_divisor(50)\n  -- 30\n  -- >>> largest_divisor(51)\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf2s55woe.lua:91: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = i / max_divisor_p\n\
    \      local divisor_n = i / max_divisor_n\n      if divisor_p * divisor_n > n\
    \ then\n        max_divisor_p = divisor_p\n        max_divisor_n = 1\n      else\n\
    \        max_divisor_p = divisor_p\n        max_divisor_n = divisor_n\n      end\n\
    \    end\n  end\n  return max_divisor_p * max_divisor_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprq3rk6_z.lua:27:\
    \ expected: 1, actual: 3.0\nstack traceback:\n\t/tmp/tmprq3rk6_z.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  while max_divisor_remainder\
    \ > 1 do\n    max_divisor = max_divisor + 1\n    max_divisor_remainder = max_divisor_remainder\
    \ / max_divisor\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoapii5z4.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoapii5z4.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor < n do\n\
    \        max_divisor = divisor\n        divisor = max_divisor + 1\n    end\n \
    \   return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvoswvmmf.lua:17:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpvoswvmmf.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because we start at n-1 and work our way down\n\
    \  -- >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(20)\n  -- 10\n\
    \  -- >>> largest_divisor(30)\n  -- 15\n  -- >>> largest_divisor(100)\n  -- 10\n\
    \  -- >>> largest_divisor(1000)\n  -- 15\n  -- >>> largest_divisor(10000)\n  --\
    \ 20\n  -- >>> largest_divisor(100000)\n  -- 30\n  -- >>> largest_divisor(1000000)\n\
    \  -- 50\n  -- >>> largest_divisor(10000000)\n  -- 100\n  -- >>> largest_divisor(100000000)\n\
    \  -- 150\n  -- >>> largest_divisor(1000000000)\n  -- 200\n  -- >>> largest_divisor(10000000000)\n\
    \  -- 300\n  -- >>> largest_divisor(100000000000)\n  -- 500\n  -- >>> largest_divisor(1000000000000)\n\
    \  -- 1000\n  -- >>> largest_divisor(10000000000000)\n  -- 2000\n  -- >>> largest_divisor(100000000000000)\n\
    \  -- 5000\n  -- >>> largest_divisor(1000000000000000)\n  -- 10000\n  -- >>> largest_divisor(10000000000000000)\n\
    \  -- 15000\n  -- >>> largest_divisor(100000000000000000)\n  -- 20000\n  -- >>>\
    \ largest_divisor(1000000000000000000)\n  -- 50000\n  -- >>> largest_divisor(10000000000000000000)\n\
    \  -- 10000000000\n  -- >>> largest_divisor(100000000000000000000)\n  -- 100000000000\n\
    \  -- >>> largest_divisor(1000000000000000000000)\n  -- 1000000000000\n  -- >>>\
    \ largest_divisor(10000000000000000000000)\n  -- 10000000000000\n  -- >>> largest_divisor(100000000000000000000000)\n\
    \  -- 100000000000000\n  -- >>> largest_divisor(1000000000000000000000000)\n \
    \ -- 1000000000000000\n  -- >>> largest_divisor(10000000000000000000000000)\n\
    \  -- 1000000000000000000\n  -- >>> largest_divisor(100000000000000000000000000)\n\
    \  -- 10000000000000000000\n  -- >>> largest_divisor(1000000000000000000000000000)\n\
    \  -- 100000000000000000000\n  -- >>> largest_divisor(10000000000000000000000000000)\n\
    \  -- 1000000000000000000000\n  -- >>> largest_divisor(100000000000000000000000000000)\n\
    \  -- 10000000000000000000000\n  -- >>> largest_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9h1py7x3.lua:80: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpckuft0dt.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmpckuft0dt.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n % 2\
    \ == 0 then\n    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3\
    \ * n + 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7l_9p9h.lua:18:\
    \ expected: 1, actual: 0.25\nstack traceback:\n\t/tmp/tmpu7l_9p9h.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n      end\n      if divisor > max_divisor_value\
    \ then\n        max_divisor_value = divisor\n      end\n    end\n  end\n  return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2u0lll89.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2u0lll89.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6dsp83so.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp6dsp83so.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstnmj6_0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpstnmj6_0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiufp6o3f.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpiufp6o3f.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_value = n\n      end\n\
    \    end\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9zdgsck.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf9zdgsck.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = i\n            end\n        end\n    end\n   \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc13ts9tc.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpc13ts9tc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case: n is even\n  if n % 2 == 0 then\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqrf3t6th.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is evenly divisible by 1\n  -- >>>\
    \ largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>>\
    \ largest_divisor(17)\n  -- 3\n  -- >>> largest_divisor(18)\n  -- 2\n  -- >>>\
    \ largest_divisor(19)\n  -- 1\n  -- >>> largest_divisor(20)\n  -- 0\n  -- >>>\
    \ largest_divisor(21)\n  -- 1\n  -- >>> largest_divisor(22)\n  -- 2\n  -- >>>\
    \ largest_divisor(23)\n  -- 3\n  -- >>> largest_divisor(24)\n  -- 4\n  -- >>>\
    \ largest_divisor(25)\n  -- 5\n  -- >>> largest_divisor(26)\n  -- 6\n  -- >>>\
    \ largest_divisor(27)\n  -- 7\n  -- >>> largest_divisor(28)\n  -- 8\n  -- >>>\
    \ largest_divisor(29)\n  -- 9\n  -- >>> largest_divisor(30)\n  -- 10\n  -- >>>\
    \ largest_divisor(31)\n  -- 11\n  -- >>> largest_divisor(32)\n  -- 12\n  -- >>>\
    \ largest_divisor(33)\n  -- 13\n  -- >>> largest_divisor(34)\n  -- 14\n  -- >>>\
    \ largest_divisor(35)\n  -- 15\n  -- >>> largest_divisor(36)\n  -- 16\n  -- >>>\
    \ largest_divisor(37)\n  -- 17\n  -- >>> largest_divisor(38)\n  -- 18\n  -- >>>\
    \ largest_divisor(39)\n  -- 19\n  -- >>> largest_divisor(40)\n  -- 20\n  -- >>>\
    \ largest_divisor(41)\n  -- 21\n  -- >>> largest_divisor(42)\n  -- 22\n  -- >>>\
    \ largest_divisor(43)\n  -- 23\n  -- >>> largest_divisor(44)\n  -- 24\n  -- >>>\
    \ largest_divisor(45)\n  -- 25\n  -- >>> largest_divisor(46)\n  -- 26\n  -- >>>\
    \ largest_divisor(47)\n  -- 27\n  -- >>> largest_divisor(48)\n  -- 28\n  -- >>>\
    \ largest_divisor(49)\n  -- 29\n  -- >>> largest_divisor(50)\n  -- 30\n  -- >>>\
    \ largest_divisor\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkne6a6_d.lua:90: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            elseif max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            end\n \
    \       end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0d9k1997.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0d9k1997.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor_value = i\n      \
    \      if divisor_value > max_divisor then\n                max_divisor = divisor_value\n\
    \                max_divisor_value = i\n            end\n        end\n    end\n\
    \    return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofjbgd2v.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpofjbgd2v.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            end\n \
    \       end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_afa7d1.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpz_afa7d1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            end\n        end\n    end\n    return max_divisor\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zo8rpa1.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8zo8rpa1.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa8qm4utn.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpa8qm4utn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            max_divisor = i\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpem4_bjef.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpem4_bjef.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmyrgkf2.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmphmyrgkf2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is one less than the square root of n\n  -- >>> largest_divisor(15)\n\
    \  -- 4\n  -- >>> largest_divisor(16)\n  -- 4\n  -- >>> largest_divisor(17)\n\
    \  -- 5\n  -- >>> largest_divisor(18)\n  -- 5\n  -- >>> largest_divisor(19)\n\
    \  -- 5\n  -- >>> largest_divisor(20)\n  -- 5\n  -- >>> largest_divisor(21)\n\
    \  -- 5\n  -- >>> largest_divisor(22)\n  -- 5\n  -- >>> largest_divisor(23)\n\
    \  -- 5\n  -- >>> largest_divisor(24)\n  -- 5\n  -- >>> largest_divisor(25)\n\
    \  -- 5\n  -- >>> largest_divisor(26)\n  -- 5\n  -- >>> largest_divisor(27)\n\
    \  -- 5\n  -- >>> largest_divisor(28)\n  -- 5\n  -- >>> largest_divisor(29)\n\
    \  -- 5\n  -- >>> largest_divisor(30)\n  -- 5\n  -- >>> largest_divisor(31)\n\
    \  -- 5\n  -- >>> largest_divisor(32)\n  -- 5\n  -- >>> largest_divisor(33)\n\
    \  -- 5\n  -- >>> largest_divisor(34)\n  -- 5\n  -- >>> largest_divisor(35)\n\
    \  -- 5\n  -- >>> largest_divisor(36)\n  -- 5\n  -- >>> largest_divisor(37)\n\
    \  -- 5\n  -- >>> largest_divisor(38)\n  -- 5\n  -- >>> largest_divisor(39)\n\
    \  -- 5\n  -- >>> largest_divisor(40)\n  -- 5\n  -- >>> largest_divisor(41)\n\
    \  -- 5\n  -- >>> largest_divisor(42)\n  -- 5\n  -- >>> largest_divisor(43)\n\
    \  -- 5\n  -- >>> largest_divisor(44)\n  -- 5\n  -- >>> largest_divisor(45)\n\
    \  -- 5\n  -- >>> largest_divisor(46)\n  -- 5\n  -- >>> largest_divisor(47)\n\
    \  -- 5\n  -- >>> largest_divisor(48)\n  -- 5\n  -- >>> largest_divisor(49)\n\
    \  -- 5\n  -- >>> largest_divisor(50)\n  -- 5\n  -- >>> largest_divisor(51)\n\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi10mgvt7.lua:91: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            else\n                max_divisor_remainder = i\n         \
    \   end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vqi4p5z.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp1vqi4p5z.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptwl0y89h.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 1\n    local max_div_n = 1\n    for i = 2, n do\n       \
    \ if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                max_div_n\
    \ = n / i\n            end\n        end\n    end\n    return max_div_n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztr5qqgn.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpztr5qqgn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  local max_divisor_remainder_count\
    \ = 0\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor = i\n  \
    \    local divisor_remainder = n / i\n      if divisor_remainder > max_divisor_remainder\
    \ then\n        max_divisor = divisor\n        max_divisor_remainder = divisor_remainder\n\
    \        max_divisor_remainder_count = i\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhj9ymy2.lua:27:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpkhj9ymy2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = i\n            end\n        end\n    end\n   \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc13ts9tc.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpc13ts9tc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local p = i / max_divisor\n      if p > max_divisor then\n\
    \        max_divisor = p\n        max_divisor_p = p\n      end\n    end\n  end\n\
    \  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnre594mo.lua:22:\
    \ expected: 1, actual: 3.0\nstack traceback:\n\t/tmp/tmpnre594mo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = 1\n    local max_div_n = 1\n    for i = 2, n do\n       \
    \ if n % i == 0 then\n            if max_div < i then\n                max_div\
    \ = i\n                max_div_n = n\n            end\n        end\n    end\n\
    \    return max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn9_airf.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvn9_airf.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpstnmj6_0.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpstnmj6_0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptwl0y89h.lua:20: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n % 2\
    \ == 0 then\n    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3\
    \ * n + 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7l_9p9h.lua:18:\
    \ expected: 1, actual: 0.25\nstack traceback:\n\t/tmp/tmpu7l_9p9h.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbs80f9wh.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbs80f9wh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by 2, else n+1\n  --\
    \ >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(16)\n  -- 6\n  --\
    \ >>> largest_divisor(17)\n  -- 7\n  -- >>> largest_divisor(18)\n  -- 8\n  --\
    \ >>> largest_divisor(19)\n  -- 9\n  -- >>> largest_divisor(20)\n  -- 10\n  --\
    \ >>> largest_divisor(21)\n  -- 11\n  -- >>> largest_divisor(22)\n  -- 12\n  --\
    \ >>> largest_divisor(23)\n  -- 13\n  -- >>> largest_divisor(24)\n  -- 14\n  --\
    \ >>> largest_divisor(25)\n  -- 15\n  -- >>> largest_divisor(26)\n  -- 16\n  --\
    \ >>> largest_divisor(27)\n  -- 17\n  -- >>> largest_divisor(28)\n  -- 18\n  --\
    \ >>> largest_divisor(29)\n  -- 19\n  -- >>> largest_divisor(30)\n  -- 20\n  --\
    \ >>> largest_divisor(31)\n  -- 21\n  -- >>> largest_divisor(32)\n  -- 22\n  --\
    \ >>> largest_divisor(33)\n  -- 23\n  -- >>> largest_divisor(34)\n  -- 24\n  --\
    \ >>> largest_divisor(35)\n  -- 25\n  -- >>> largest_divisor(36)\n  -- 26\n  --\
    \ >>> largest_divisor(37)\n  -- 27\n  -- >>> largest_divisor(38)\n  -- 28\n  --\
    \ >>> largest_divisor(39)\n  -- 29\n  -- >>> largest_divisor(40)\n  -- 30\n  --\
    \ >>> largest_divisor(41)\n  -- 31\n  -- >>> largest_divisor(42)\n  -- 32\n  --\
    \ >>> largest_divisor(43)\n  -- 33\n  -- >>> largest_divisor(44)\n  -- 34\n  --\
    \ >>> largest_divisor(45)\n  -- 35\n  -- >>> largest_divisor(46)\n  -- 36\n  --\
    \ >>> largest_divisor(47)\n  -- 37\n  -- >>> largest_divisor(48)\n  -- 38\n  --\
    \ >>> largest_divisor(49)\n  -- 39\n  -- >>> largest_divisor(50)\n  -- 40\n  --\
    \ >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqe92yqrm.lua:90: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = i\n            end\n        end\n\
    \    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97zdvplh.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp97zdvplh.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7q1k8nf8.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7q1k8nf8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx2b4fwsx.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpx2b4fwsx.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  while n % divisor == 0 do\n                divisor = divisor + 1\n        \
    \    end\n            if divisor > max_divisor then\n                max_divisor\
    \ = divisor\n                max_divisor_remainder = n % divisor\n           \
    \ end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8_y8tze.lua:25:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpp8_y8tze.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750202
- exit_code: 0
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor_p\
    \ = i\n            local divisor_n = n / i\n            if divisor_n > max_divisor\
    \ then\n                max_divisor = divisor_n\n                max_divisor_p\
    \ = divisor_p\n                max_divisor_n = divisor_n\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcp156b4.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmplcp156b4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: -1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by checking if n is even\n  if n % 2 == 0 then\n    -- If n is\
    \ even, divide it by 2\n    return largest_divisor(n / 2)\n  else\n    -- If n\
    \ is odd, divide it by 3 and check if it's still odd\n    return largest_divisor(n\
    \ / 3) + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821701
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    local max_divisor_index\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            divisor =\
    \ i\n            if max_divisor < i then\n                max_divisor = i\n  \
    \              max_divisor_index = i\n            end\n        end\n    end\n\
    \    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz6jopkl3.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpz6jopkl3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = i\n    while divisor > 1 do\n      divisor = divisor / 2\n\
    \    end\n    if n % divisor == 0 then\n      if divisor > max_divisor then\n\
    \        max_divisor = divisor\n      end\n      if n % divisor > 0 then\n   \
    \     max_divisor_remainder = n\n      end\n    end\n  end\n  return max_divisor_remainder\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxq6k3sf.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpcxq6k3sf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div_n > i then\n\
    \                max_div = i\n                max_div_n = n\n            end\n\
    \        end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoepf7wnh.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpoepf7wnh.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821696
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
