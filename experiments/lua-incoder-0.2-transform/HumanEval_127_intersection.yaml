name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1,\
  \ 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1 -\
    \ start1 + end2 - start2\n\tif length == 0 then\n\t\treturn 'NO'\n\tend\n\tif\
    \ length == 1 then\n\t\treturn 'YES'\n\tend\n\tlocal prime = true\n\tlocal prime_length\
    \ = 2\n\tlocal prime_start = start1\n\tlocal prime_end = start2\n\twhile prime\
    \ and prime_length <= length do\n\t\tlocal prime_prime_length = prime_end - prime_start\
    \ + prime_length\n\t\tif prime_prime_length == 1 then\n\t\t\tprime = false\n\t\
    \telse\n\t\t\tprime_length = prime_prime_length + 1\n\t\tend\n\t\tprime_start\
    \ = prime_start + prime_length\n\t\tprime_end = prime_start + prime_length\n\t\
    end\n\tif prime then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal intersection_length = interval1_end - interval2_start\n\
    \tif interval1_start <= interval2_start and interval1_end >= interval2_end then\n\
    \t\treturn interval1_length == interval2_length\n\telseif interval1_start <= interval2_end\
    \ and interval1_end >= interval2_start then\n\t\treturn interval1_length == interval2_length\n\
    \telseif interval1_start >= interval2_start and interval1_end <= interval2_end\
    \ then\n\t\treturn interval1_length == interval2_length\n\telse\n\t\treturn false\n\
    \tend\nend", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local interval1Length = interval1End - interval1Start\n\tlocal interval2Length\
    \ = interval2End - interval2Start\n\tlocal intersectionLength = interval1End +\
    \ interval2Start\n\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\tif interval1Length == interval2Length then\n\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\treturn \"YES\"\
    \n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1Start\
    \ <= interval2Start then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn \"\
    YES\"\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval1Start <= interval2Start then\n\
    \t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"YES\"\n\t\tend\n\tend\nend", "\t\
    local interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\t\
    local interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\
    local interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tlocal is_prime = true\n\tlocal prime_numbers = prime_numbers_generator(interval1_length,\
    \ interval2_length)\n\tlocal prime_numbers_length = prime_numbers:len()\n\tfor\
    \ _, prime_number in ipairs(prime_numbers) do\n\t\tif prime_number == 0 then\n\
    \t\t\tis_prime = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif is_prime == true then\n\
    \t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tif interval1Start > interval1End or interval2Start > interval2End then\n\t\t\
    return 'NO'\n\telseif intersectionLength == 0 then\n\t\treturn 'NO'\n\telseif\
    \ interval1Length == interval2Length then\n\t\treturn 'YES'\n\telseif interval1Length\
    \ > interval2Length then\n\t\tlocal interval1End = interval1Start + interval1Length\n\
    \t\tlocal interval2Start = interval2Start + interval2Length\n\t\tlocal intersectionLength\
    \ = interval1Start + interval2End - interval1End - interval2Start\n\t\tif intersectionLength\
    \ == 0 then\n\t\t\treturn 'NO'\n\t\telseif interval1Length == interval2Length\
    \ then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'YES'\n\t\tend\n\telse\n\t\t\
    local interval1Start = interval1Start + interval1Length\n\t\tlocal interval2End\
    \ = interval2Start + interval2Length\n\t\tlocal intersectionLength = interval1Start\
    \ + interval2End - interval1End - interval2Start\n\t\tif intersectionLength ==\
    \ 0 then\n\t\t\treturn 'NO'\n\t\telseif interval1Length == interval2Length then\n\
    \t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'YES'\n\t\tend\n\tend\nend", "\tlocal\
    \ interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\t\
    local interval1Intersection = interval1Start + interval1Length\n\tlocal interval2Intersection\
    \ = interval2Start + interval2Length\n\tlocal intersectionLength = interval1Intersection\
    \ + interval2Intersection\n\tlocal isPrime = true\n\tif interval1Length > 0 and\
    \ interval2Length > 0 then\n\t\tif interval1Length == interval2Length then\n\t\
    \t\tif interval1Start <= interval2Start and interval1End >= interval2End then\n\
    \t\t\t\tisPrime = true\n\t\t\telseif interval1Start <= interval2Start and interval1End\
    \ < interval2End then\n\t\t\t\tisPrime = false\n\t\t\telseif interval1Start >=\
    \ interval2Start and interval1End >= interval2End then\n\t\t\t\tisPrime = false\n\
    \t\t\telseif interval1Start < interval2Start and interval1End <= interval2End\
    \ then\n\t\t\t\tisPrime = false\n\t\t\tend\n\t\tend\n\tend\n\tif isPrime then\n\
    \t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd = interval1Start,\
    \ interval1End\n\tlocal interval1Length = interval1End - interval1Start + 1\n\t\
    local interval2Length = interval2End - interval2Start + 1\n\tlocal primeNumberFound\
    \ = false\n\tlocal primeNumberFound2 = false\n\tlocal primeNumberFound3 = false\n\
    \tlocal primeNumberFound4 = false\n\tlocal primeNumberFound5 = false\n\tlocal\
    \ primeNumberFound6 = false\n\tlocal primeNumberFound7 = false\n\tlocal primeNumberFound8\
    \ = false\n\tlocal primeNumberFound9 = false\n\tlocal primeNumberFound10 = false\n\
    \tlocal primeNumberFound11 = false\n\tlocal primeNumberFound12 = false\n\tlocal\
    \ primeNumberFound13 = false\n\tlocal primeNumberFound14 = false\n\tlocal primeNumberFound15\
    \ = false\n\tlocal primeNumberFound16 = false\n\tlocal primeNumberFound17 = false\n\
    \tlocal primeNumberFound18 = false\n\tlocal primeNumberFound19 = false\n\tlocal\
    \ primeNumberFound20 = false\n\tlocal primeNumberFound21 = false\n\tlocal primeNumberFound22\
    \ = false\n\tlocal primeNumberFound23 = false\n\tlocal primeNumberFound24 = false\n\
    \tlocal primeNumberFound25 = false\n\tlocal primeNumberFound26 = false\n\tlocal\
    \ primeNumberFound27 = false\n\tlocal primeNumberFound28 = false\n\tlocal primeNumberFound29\
    \ = false\n\tlocal primeNumberFound30 = false\n\tlocal primeNumberFound31 = false\n\
    \tlocal primeNumberFound32 = false\n\tlocal primeNumberFound33 = false\n\tlocal\
    \ primeNumberFound34 = false\n\tlocal primeNumberFound35 = false\n\tlocal primeNumberFound36\
    \ = false\n\tlocal primeNumberFound37 = false\n\tlocal primeNumberFound38 = false\n\
    \tlocal primeNumberFound39 = false\n\tlocal primeNumberFound40 = false\n\tlocal\
    \ primeNumberFound41 = false\n\tlocal primeNumberFound42 = false\n\tlocal primeNumberFound43\
    \ = false\n\tlocal primeNumberFound44 = false\n\tlocal primeNumberFound45 = false\n\
    \tlocal primeNumberFound46 = false\n\tlocal primeNumberFound47 = false\n\tlocal\
    \ primeNumberFound48 = false\n\tlocal primeNumberFound49 = false\n\tlocal primeNumberFound50\
    \ = false\n\tlocal primeNumberFound51 = false\n\tlocal primeNumberFound52 = false\n\
    \tlocal primeNumberFound53 = false\n\tlocal primeNumberFound54 = false\n\t", "\t\
    local interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\n\tif\
    \ interval1Start > interval1End or interval2Start > interval2End then\n\t\treturn\
    \ \"NO\"\n\tend\n\t\n\tlocal interval1Length = interval1End - interval1Start\n\
    \tlocal interval2Length = interval2End - interval2Start\n\t\n\tif interval1Length\
    \ == interval2Length then\n\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\
    \tend\n\telse\n\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tlocal isPrime = true\n\tlocal isPrime2 = true\n\tif interval1Length == 0 or\
    \ interval2Length == 0 then\n\t\treturn 'NO'\n\telseif interval1Length == 1 then\n\
    \t\tif interval1Start <= interval2Start then\n\t\t\tif interval1End >= interval2End\
    \ then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\t\
    else\n\t\t\treturn 'NO'\n\t\tend\n\telseif interval2Length == 1 then\n\t\tif interval1Start\
    \ <= interval2Start then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\t\
    return 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn\
    \ 'NO'\n\t\tend\n\telseif interval1Length == 2 then\n\t\tif interval1Start <=\
    \ interval2Start then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn\
    \ 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\
    \t\tend\n\telseif interval2Length == 2 then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'NO'\n\t\t\t\
    else\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    elseif interval1Length > interval2Length then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'YES'\n\t\t\
    \telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\
    \telseif interval2Length > interval1Length then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'NO'\n\t\t\t\
    else\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    else\n\t\tif interval1Start <= interval2Start then\n\t\t\tif interval1End >= interval2End\
    \ then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\t\
    else\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]", "\tlocal start = interval1[1]\n\tlocal\
    \ end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end - start\n\tlocal length2 = end2 - start2\n\tif length2 ==\
    \ 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\t\treturn \"YES\"\
    \n\tend\n\tif length2 == length + 1 then\n\t\tif start <= end2 then\n\t\t\treturn\
    \ \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\tif length2 == length\
    \ + 2 then\n\t\tif start <= end2 then\n\t\t\tif start <= end2 then\n\t\t\t\treturn\
    \ \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn\
    \ \"NO\"\n\t\tend\n\tend\n\tif length2 == length + 3 then\n\t\tif start <= end2\
    \ then\n\t\t\tif start <= end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\t\
    return \"YES\"\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\
    \t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\
    \tif length2 == length + 4 then\n\t\tif start <= end2 then\n\t\t\tif start <=\
    \ end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2 then\n\t\
    \t\t\t\t\treturn \"YES\"\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\t\
    end\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t\
    return \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\tif\
    \ length2 == length + 5 then\n\t\tif start <= end2 then\n\t\t\tif start <= end2\
    \ then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2 then\n\t\t\t\
    \t\t\tif start <= end2 then\n\t\t\t\t\t\t\treturn \"YES\"\n\t\t\t\t\t\telse\n\t\
    \t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\treturn\
    \ \"NO\"\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\
    \t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\t\
    end\n\tend\n\tif length2 == length + 6 then\n\t\tif start <= end2 then\n\t\t\t\
    if start <= end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2\
    \ then\n\t\t\t\t\t\tif start <= end2 then\n\t\t\t\t\t\t\tif start <= end2 then\n\
    \t\t\t\t\t\t\t\treturn \"YES\"\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\treturn \"\
    NO\"\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn \"NO\"\n\t\t\t\
    \t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\tend\n\t\t\t\t\
    else", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local intersectionStart = interval1Start <= interval2Start and interval1End >=\
    \ interval2End\n\tlocal intersectionEnd = interval1Start <= interval2End or interval1End\
    \ >= interval2Start\n\tlocal intersectionLength = interval1End - interval1Start\
    \ + interval2End - interval2Start\n\tlocal intersectionIsPrime = not (math.fmod(intersectionLength,\
    \ 2) == 0 and math.fmod(intersectionLength, 1) == 0)\n\treturn (intersectionStart\
    \ and intersectionIsPrime) or (intersectionEnd and intersectionIsPrime)\nend",
  "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd\
    \ = interval1Start <= interval2Start and interval1End >= interval2End or interval1Start\
    \ <= interval2End or interval1Start >= interval2Start, interval1Start <= interval2End\
    \ or interval1Start >= interval2End\n\tlocal intersectionLength = interval1Start\
    \ <= interval2Start and interval1End >= interval2End or interval1Start <= interval2End\
    \ or interval1Start >= interval2Start, interval1Start <= interval2End or interval1Start\
    \ >= interval2End\n\treturn intersectionStart and intersectionLength and \"YES\"\
    \ or \"NO\"\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length1 =\
    \ end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1 == 0 or length2\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif start1 < start2 then\n\t\tstart1, start2\
    \ = start2, start1\n\t\tend1, end2 = end2, end1\n\tend\n\tif end1 > end2 then\n\
    \t\tend1, end2 = end2, end1\n\t\tstart1, start2 = start2, start1\n\tend\n\tlocal\
    \ length = end1 - start1\n\tlocal prime = true\n\tfor i = 2, length + 1 do\n\t\
    \tif start1 + i >= end2 then\n\t\t\tprime = false\n\t\t\tbreak\n\t\tend\n\tend\n\
    \tif prime then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal intersection_start\
    \ = interval1_start <= interval2_start and interval1_end >= interval2_end\n\t\
    local intersection_end = interval1_start <= interval2_end and interval1_end >=\
    \ interval2_start\n\tlocal intersection_length = interval1_end - interval1_start\
    \ + interval2_end - interval2_start\n\tlocal intersection_is_prime = intersection_length\
    \ == 2 or math.floor(intersection_length / 2) == intersection_length\n\tif intersection_is_prime\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start\
    \ = math.min(interval1[1], interval2[1])\n\tlocal end = math.max(interval1[2],\
    \ interval2[2])\n\tlocal length = end - start\n\tif length == 0 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif length == 1 then\n\t\treturn 'YES'\n\tend\n\tif length ==\
    \ 2 then\n\t\tif interval1[1] < interval2[1] then\n\t\t\treturn 'YES'\n\t\telse\n\
    \t\t\treturn 'NO'\n\t\tend\n\tend\n\tlocal prime = true\n\tfor i = 2, math.floor(math.sqrt(length))\
    \ + 1 do\n\t\tif length % i == 0 then\n\t\t\tprime = false\n\t\t\tbreak\n\t\t\
    end\n\tend\n\tif prime then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\n\
    end", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\
    \tlocal interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\
    \tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal interval1_start_index = interval1_start\
    \ + interval1_length\n\tlocal interval2_start_index = interval2_start + interval2_length\n\
    \tlocal interval1_end_index = interval1_start + interval1_length\n\tlocal interval2_end_index\
    \ = interval2_start + interval2_length\n\tlocal interval1_end_index_2 = interval1_end_index\
    \ - 1\n\tlocal interval2_end_index_2 = interval2_end_index - 1\n\tlocal interval1_start_index_2\
    \ = interval1_start_index - 1\n\tlocal interval2_start_index_2 = interval2_start_index\
    \ - 1\n\tlocal interval1_end_index_3 = interval1_end_index - 2\n\tlocal interval2_end_index_3\
    \ = interval2_end_index - 2\n\tlocal interval1_start_index_3 = interval1_start_index\
    \ - 2\n\tlocal interval2_start_index_3 = interval2_start_index - 2\n\tlocal interval1_end_index_4\
    \ = interval1_end_index - 3\n\tlocal interval2_end_index_4 = interval2_end_index\
    \ - 3\n\tlocal interval1_start_index_4 = interval1_start_index - 3\n\tlocal interval2_start_index_4\
    \ = interval2_start_index - 3\n\tlocal interval1_end_index_5 = interval1_end_index\
    \ - 4\n\tlocal interval2_end_index_5 = interval2_end_index - 4\n\tlocal interval1_start_index_5\
    \ = interval1_start_index - 4\n\tlocal interval2_start_index_5 = interval2_start_index\
    \ - 4\n\tlocal interval1_end_index_6 = interval1_end_index - 5\n\tlocal interval2_end_index_6\
    \ = interval2_end_index - 5\n\tlocal interval1_start_index_6 = interval1_start_index\
    \ - 5\n\tlocal interval2_start_index_6 = interval2_start_index - 5\n\tlocal interval1_end_index_7\
    \ = interval1_end_index - 6\n\tlocal interval2_end_index_7 = interval2_end_index\
    \ - 6\n\tlocal interval1_start_index_7 = interval1_start_index - 6\n\tlocal interval2_start_index_7\
    \ = interval2_start_index - 6\n\tlocal interval1_end_index_8 = interval1_end_index\
    \ - 7\n\tlocal interval2_end_index_8 = interval2_end_index - 7\n\tlocal interval1_start_index_8\
    \ = interval1_start_index - 7\n\tlocal interval2_start_index_8 = interval2_start_index\
    \ - 7\n\tlocal interval1_end_index_9 = interval1_end_index - ", "  local start\
    \ = interval1[1]\n  local end = interval1[2]\n  local start2 = interval2[1]\n\
    \  local end2 = interval2[2]\n  if start > end or start2 > end2 then\n    return\
    \ \"NO\"\n  end\n  if start <= start2 then\n    if end <= end2 then\n      return\
    \ \"YES\"\n    else\n      return \"NO\"\n    end\n  else\n    if end <= end2\
    \ then\n      return \"NO\"\n    else\n      return \"YES\"\n    end\n  end\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectLength = 0\n\tlocal intersectStart = 0\n\tlocal intersectEnd\
    \ = 0\n\tlocal intersectInterval = nil\n\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\tintersectStart = interval1Start\n\
    \t\tintersectEnd = interval1End\n\t\tintersectLength = interval1Length\n\t\tintersectInterval\
    \ = interval1\n\telseif interval2Start <= interval1Start and interval2End >= interval1End\
    \ then\n\t\tintersectStart = interval2Start\n\t\tintersectEnd = interval2End\n\
    \t\tintersectLength = interval2Length\n\t\tintersectInterval = interval2\n\telse\n\
    \t\treturn nil\n\tend\n\tif intersectLength == 2 then\n\t\tif intersectStart <=\
    \ intersectEnd then\n\t\t\tif intersectStart % intersectLength == 0 then\n\t\t\
    \t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\
    \t\treturn \"NO\"\n\t\tend\n\telse\n\t\tif intersectStart <= intersectEnd then\n\
    \t\t\tif intersectStart % intersectLength == 0 then\n\t\t\t\treturn \"YES\"\n\t\
    \t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\t\
    end\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\treturn interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end\n\t\telse\n\t\t\treturn\
    \ interval1_start <= interval2_end and interval1_end >= interval2_start\n\t\t\
    end\n\telse\n\t\treturn interval1_length == interval2_length\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
