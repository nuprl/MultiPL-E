name: HumanEval_127_intersection
language: lua
prompt: "-- You are given two intervals,\n-- where each interval is a pair of integers.\
  \ For example, interval = (start, end) = (1, 2).\n-- The given intervals are closed\
  \ which means that the interval (start, end)\n-- includes both start and end.\n\
  -- For each given interval, it is assumed that its start is less or equal its end.\n\
  -- Your task is to determine whether the length of intersection of these two \n\
  -- intervals is a prime number.\n-- Example, the intersection of the intervals (1,\
  \ 3), (2, 4) is (2, 3)\n-- which its length is 1, which not a prime number.\n--\
  \ If the length of the intersection is a prime number, return \"YES\",\n-- otherwise,\
  \ return \"NO\".\n-- If the two intervals don't intersect, return \"NO\".\n-- [input/output]\
  \ samples:\n-- >>> intersection({1, 2}, {2, 3})\n-- 'NO'\n-- >>> intersection({-1,\
  \ 1}, {0, 4})\n-- 'NO'\n-- >>> intersection({-3, -1}, {-5, 5})\n-- 'YES'\nlocal\
  \ function intersection(interval1, interval2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = intersection\n\
  \    lu.assertEquals(candidate({1, 2}, {2, 3}), 'NO')\n    lu.assertEquals(candidate({-1,\
  \ 1}, {0, 4}), 'NO')\n    lu.assertEquals(candidate({-3, -1}, {-5, 5}), 'YES')\n\
  \    lu.assertEquals(candidate({-2, 2}, {-4, 0}), 'YES')\n    lu.assertEquals(candidate({-11,\
  \ 2}, {-1, -1}), 'NO')\n    lu.assertEquals(candidate({1, 2}, {3, 5}), 'NO')\n \
  \   lu.assertEquals(candidate({1, 2}, {1, 2}), 'NO')\n    lu.assertEquals(candidate({-2,\
  \ -2}, {-3, -2}), 'NO')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1 -\
    \ start1 + end2 - start2\n\tif length == 0 then\n\t\treturn 'NO'\n\tend\n\tif\
    \ length == 1 then\n\t\treturn 'YES'\n\tend\n\tlocal prime = true\n\tlocal prime_length\
    \ = 2\n\tlocal prime_start = start1\n\tlocal prime_end = start2\n\twhile prime\
    \ and prime_length <= length do\n\t\tlocal prime_prime_length = prime_end - prime_start\
    \ + prime_length\n\t\tif prime_prime_length == 1 then\n\t\t\tprime = false\n\t\
    \telse\n\t\t\tprime_length = prime_prime_length + 1\n\t\tend\n\t\tprime_start\
    \ = prime_start + prime_length\n\t\tprime_end = prime_start + prime_length\n\t\
    end\n\tif prime then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal intersection_length = interval1_end - interval2_start\n\
    \tif interval1_start <= interval2_start and interval1_end >= interval2_end then\n\
    \t\treturn interval1_length == interval2_length\n\telseif interval1_start <= interval2_end\
    \ and interval1_end >= interval2_start then\n\t\treturn interval1_length == interval2_length\n\
    \telseif interval1_start >= interval2_start and interval1_end <= interval2_end\
    \ then\n\t\treturn interval1_length == interval2_length\n\telse\n\t\treturn false\n\
    \tend\nend", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local interval1Length = interval1End - interval1Start\n\tlocal interval2Length\
    \ = interval2End - interval2Start\n\tlocal intersectionLength = interval1End +\
    \ interval2Start\n\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\tif interval1Length == interval2Length then\n\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\treturn \"YES\"\
    \n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1Start\
    \ <= interval2Start then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn \"\
    YES\"\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval1Start <= interval2Start then\n\
    \t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"YES\"\n\t\tend\n\tend\nend", "\t\
    local interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\t\
    local interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\
    local interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tlocal is_prime = true\n\tlocal prime_numbers = prime_numbers_generator(interval1_length,\
    \ interval2_length)\n\tlocal prime_numbers_length = prime_numbers:len()\n\tfor\
    \ _, prime_number in ipairs(prime_numbers) do\n\t\tif prime_number == 0 then\n\
    \t\t\tis_prime = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif is_prime == true then\n\
    \t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tif interval1Start > interval1End or interval2Start > interval2End then\n\t\t\
    return 'NO'\n\telseif intersectionLength == 0 then\n\t\treturn 'NO'\n\telseif\
    \ interval1Length == interval2Length then\n\t\treturn 'YES'\n\telseif interval1Length\
    \ > interval2Length then\n\t\tlocal interval1End = interval1Start + interval1Length\n\
    \t\tlocal interval2Start = interval2Start + interval2Length\n\t\tlocal intersectionLength\
    \ = interval1Start + interval2End - interval1End - interval2Start\n\t\tif intersectionLength\
    \ == 0 then\n\t\t\treturn 'NO'\n\t\telseif interval1Length == interval2Length\
    \ then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'YES'\n\t\tend\n\telse\n\t\t\
    local interval1Start = interval1Start + interval1Length\n\t\tlocal interval2End\
    \ = interval2Start + interval2Length\n\t\tlocal intersectionLength = interval1Start\
    \ + interval2End - interval1End - interval2Start\n\t\tif intersectionLength ==\
    \ 0 then\n\t\t\treturn 'NO'\n\t\telseif interval1Length == interval2Length then\n\
    \t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'YES'\n\t\tend\n\tend\nend", "\tlocal\
    \ interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\t\
    local interval1Intersection = interval1Start + interval1Length\n\tlocal interval2Intersection\
    \ = interval2Start + interval2Length\n\tlocal intersectionLength = interval1Intersection\
    \ + interval2Intersection\n\tlocal isPrime = true\n\tif interval1Length > 0 and\
    \ interval2Length > 0 then\n\t\tif interval1Length == interval2Length then\n\t\
    \t\tif interval1Start <= interval2Start and interval1End >= interval2End then\n\
    \t\t\t\tisPrime = true\n\t\t\telseif interval1Start <= interval2Start and interval1End\
    \ < interval2End then\n\t\t\t\tisPrime = false\n\t\t\telseif interval1Start >=\
    \ interval2Start and interval1End >= interval2End then\n\t\t\t\tisPrime = false\n\
    \t\t\telseif interval1Start < interval2Start and interval1End <= interval2End\
    \ then\n\t\t\t\tisPrime = false\n\t\t\tend\n\t\tend\n\tend\n\tif isPrime then\n\
    \t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd = interval1Start,\
    \ interval1End\n\tlocal interval1Length = interval1End - interval1Start + 1\n\t\
    local interval2Length = interval2End - interval2Start + 1\n\tlocal primeNumberFound\
    \ = false\n\tlocal primeNumberFound2 = false\n\tlocal primeNumberFound3 = false\n\
    \tlocal primeNumberFound4 = false\n\tlocal primeNumberFound5 = false\n\tlocal\
    \ primeNumberFound6 = false\n\tlocal primeNumberFound7 = false\n\tlocal primeNumberFound8\
    \ = false\n\tlocal primeNumberFound9 = false\n\tlocal primeNumberFound10 = false\n\
    \tlocal primeNumberFound11 = false\n\tlocal primeNumberFound12 = false\n\tlocal\
    \ primeNumberFound13 = false\n\tlocal primeNumberFound14 = false\n\tlocal primeNumberFound15\
    \ = false\n\tlocal primeNumberFound16 = false\n\tlocal primeNumberFound17 = false\n\
    \tlocal primeNumberFound18 = false\n\tlocal primeNumberFound19 = false\n\tlocal\
    \ primeNumberFound20 = false\n\tlocal primeNumberFound21 = false\n\tlocal primeNumberFound22\
    \ = false\n\tlocal primeNumberFound23 = false\n\tlocal primeNumberFound24 = false\n\
    \tlocal primeNumberFound25 = false\n\tlocal primeNumberFound26 = false\n\tlocal\
    \ primeNumberFound27 = false\n\tlocal primeNumberFound28 = false\n\tlocal primeNumberFound29\
    \ = false\n\tlocal primeNumberFound30 = false\n\tlocal primeNumberFound31 = false\n\
    \tlocal primeNumberFound32 = false\n\tlocal primeNumberFound33 = false\n\tlocal\
    \ primeNumberFound34 = false\n\tlocal primeNumberFound35 = false\n\tlocal primeNumberFound36\
    \ = false\n\tlocal primeNumberFound37 = false\n\tlocal primeNumberFound38 = false\n\
    \tlocal primeNumberFound39 = false\n\tlocal primeNumberFound40 = false\n\tlocal\
    \ primeNumberFound41 = false\n\tlocal primeNumberFound42 = false\n\tlocal primeNumberFound43\
    \ = false\n\tlocal primeNumberFound44 = false\n\tlocal primeNumberFound45 = false\n\
    \tlocal primeNumberFound46 = false\n\tlocal primeNumberFound47 = false\n\tlocal\
    \ primeNumberFound48 = false\n\tlocal primeNumberFound49 = false\n\tlocal primeNumberFound50\
    \ = false\n\tlocal primeNumberFound51 = false\n\tlocal primeNumberFound52 = false\n\
    \tlocal primeNumberFound53 = false\n\tlocal primeNumberFound54 = false\n\t", "\t\
    local interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\n\tif\
    \ interval1Start > interval1End or interval2Start > interval2End then\n\t\treturn\
    \ \"NO\"\n\tend\n\t\n\tlocal interval1Length = interval1End - interval1Start\n\
    \tlocal interval2Length = interval2End - interval2Start\n\t\n\tif interval1Length\
    \ == interval2Length then\n\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\
    \tend\n\telse\n\t\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tlocal isPrime = true\n\tlocal isPrime2 = true\n\tif interval1Length == 0 or\
    \ interval2Length == 0 then\n\t\treturn 'NO'\n\telseif interval1Length == 1 then\n\
    \t\tif interval1Start <= interval2Start then\n\t\t\tif interval1End >= interval2End\
    \ then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\t\
    else\n\t\t\treturn 'NO'\n\t\tend\n\telseif interval2Length == 1 then\n\t\tif interval1Start\
    \ <= interval2Start then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\t\
    return 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn\
    \ 'NO'\n\t\tend\n\telseif interval1Length == 2 then\n\t\tif interval1Start <=\
    \ interval2Start then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn\
    \ 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\
    \t\tend\n\telseif interval2Length == 2 then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'NO'\n\t\t\t\
    else\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    elseif interval1Length > interval2Length then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'YES'\n\t\t\
    \telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\
    \telseif interval2Length > interval1Length then\n\t\tif interval1Start <= interval2Start\
    \ then\n\t\t\tif interval1End >= interval2End then\n\t\t\t\treturn 'NO'\n\t\t\t\
    else\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    else\n\t\tif interval1Start <= interval2Start then\n\t\t\tif interval1End >= interval2End\
    \ then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\t\
    else\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]", "\tlocal start = interval1[1]\n\tlocal\
    \ end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end - start\n\tlocal length2 = end2 - start2\n\tif length2 ==\
    \ 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\t\treturn \"YES\"\
    \n\tend\n\tif length2 == length + 1 then\n\t\tif start <= end2 then\n\t\t\treturn\
    \ \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\tif length2 == length\
    \ + 2 then\n\t\tif start <= end2 then\n\t\t\tif start <= end2 then\n\t\t\t\treturn\
    \ \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn\
    \ \"NO\"\n\t\tend\n\tend\n\tif length2 == length + 3 then\n\t\tif start <= end2\
    \ then\n\t\t\tif start <= end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\t\
    return \"YES\"\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\
    \t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\
    \tif length2 == length + 4 then\n\t\tif start <= end2 then\n\t\t\tif start <=\
    \ end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2 then\n\t\
    \t\t\t\t\treturn \"YES\"\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\t\
    end\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t\
    return \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\tif\
    \ length2 == length + 5 then\n\t\tif start <= end2 then\n\t\t\tif start <= end2\
    \ then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2 then\n\t\t\t\
    \t\t\tif start <= end2 then\n\t\t\t\t\t\t\treturn \"YES\"\n\t\t\t\t\t\telse\n\t\
    \t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\treturn\
    \ \"NO\"\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\
    \t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\t\
    end\n\tend\n\tif length2 == length + 6 then\n\t\tif start <= end2 then\n\t\t\t\
    if start <= end2 then\n\t\t\t\tif start <= end2 then\n\t\t\t\t\tif start <= end2\
    \ then\n\t\t\t\t\t\tif start <= end2 then\n\t\t\t\t\t\t\tif start <= end2 then\n\
    \t\t\t\t\t\t\t\treturn \"YES\"\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\treturn \"\
    NO\"\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\treturn \"NO\"\n\t\t\t\
    \t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\tend\n\t\t\t\t\
    else", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local intersectionStart = interval1Start <= interval2Start and interval1End >=\
    \ interval2End\n\tlocal intersectionEnd = interval1Start <= interval2End or interval1End\
    \ >= interval2Start\n\tlocal intersectionLength = interval1End - interval1Start\
    \ + interval2End - interval2Start\n\tlocal intersectionIsPrime = not (math.fmod(intersectionLength,\
    \ 2) == 0 and math.fmod(intersectionLength, 1) == 0)\n\treturn (intersectionStart\
    \ and intersectionIsPrime) or (intersectionEnd and intersectionIsPrime)\nend",
  "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd\
    \ = interval1Start <= interval2Start and interval1End >= interval2End or interval1Start\
    \ <= interval2End or interval1Start >= interval2Start, interval1Start <= interval2End\
    \ or interval1Start >= interval2End\n\tlocal intersectionLength = interval1Start\
    \ <= interval2Start and interval1End >= interval2End or interval1Start <= interval2End\
    \ or interval1Start >= interval2Start, interval1Start <= interval2End or interval1Start\
    \ >= interval2End\n\treturn intersectionStart and intersectionLength and \"YES\"\
    \ or \"NO\"\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length1 =\
    \ end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1 == 0 or length2\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif start1 < start2 then\n\t\tstart1, start2\
    \ = start2, start1\n\t\tend1, end2 = end2, end1\n\tend\n\tif end1 > end2 then\n\
    \t\tend1, end2 = end2, end1\n\t\tstart1, start2 = start2, start1\n\tend\n\tlocal\
    \ length = end1 - start1\n\tlocal prime = true\n\tfor i = 2, length + 1 do\n\t\
    \tif start1 + i >= end2 then\n\t\t\tprime = false\n\t\t\tbreak\n\t\tend\n\tend\n\
    \tif prime then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal intersection_start\
    \ = interval1_start <= interval2_start and interval1_end >= interval2_end\n\t\
    local intersection_end = interval1_start <= interval2_end and interval1_end >=\
    \ interval2_start\n\tlocal intersection_length = interval1_end - interval1_start\
    \ + interval2_end - interval2_start\n\tlocal intersection_is_prime = intersection_length\
    \ == 2 or math.floor(intersection_length / 2) == intersection_length\n\tif intersection_is_prime\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start\
    \ = math.min(interval1[1], interval2[1])\n\tlocal end = math.max(interval1[2],\
    \ interval2[2])\n\tlocal length = end - start\n\tif length == 0 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif length == 1 then\n\t\treturn 'YES'\n\tend\n\tif length ==\
    \ 2 then\n\t\tif interval1[1] < interval2[1] then\n\t\t\treturn 'YES'\n\t\telse\n\
    \t\t\treturn 'NO'\n\t\tend\n\tend\n\tlocal prime = true\n\tfor i = 2, math.floor(math.sqrt(length))\
    \ + 1 do\n\t\tif length % i == 0 then\n\t\t\tprime = false\n\t\t\tbreak\n\t\t\
    end\n\tend\n\tif prime then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\n\
    end", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\
    \tlocal interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\
    \tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal interval1_start_index = interval1_start\
    \ + interval1_length\n\tlocal interval2_start_index = interval2_start + interval2_length\n\
    \tlocal interval1_end_index = interval1_start + interval1_length\n\tlocal interval2_end_index\
    \ = interval2_start + interval2_length\n\tlocal interval1_end_index_2 = interval1_end_index\
    \ - 1\n\tlocal interval2_end_index_2 = interval2_end_index - 1\n\tlocal interval1_start_index_2\
    \ = interval1_start_index - 1\n\tlocal interval2_start_index_2 = interval2_start_index\
    \ - 1\n\tlocal interval1_end_index_3 = interval1_end_index - 2\n\tlocal interval2_end_index_3\
    \ = interval2_end_index - 2\n\tlocal interval1_start_index_3 = interval1_start_index\
    \ - 2\n\tlocal interval2_start_index_3 = interval2_start_index - 2\n\tlocal interval1_end_index_4\
    \ = interval1_end_index - 3\n\tlocal interval2_end_index_4 = interval2_end_index\
    \ - 3\n\tlocal interval1_start_index_4 = interval1_start_index - 3\n\tlocal interval2_start_index_4\
    \ = interval2_start_index - 3\n\tlocal interval1_end_index_5 = interval1_end_index\
    \ - 4\n\tlocal interval2_end_index_5 = interval2_end_index - 4\n\tlocal interval1_start_index_5\
    \ = interval1_start_index - 4\n\tlocal interval2_start_index_5 = interval2_start_index\
    \ - 4\n\tlocal interval1_end_index_6 = interval1_end_index - 5\n\tlocal interval2_end_index_6\
    \ = interval2_end_index - 5\n\tlocal interval1_start_index_6 = interval1_start_index\
    \ - 5\n\tlocal interval2_start_index_6 = interval2_start_index - 5\n\tlocal interval1_end_index_7\
    \ = interval1_end_index - 6\n\tlocal interval2_end_index_7 = interval2_end_index\
    \ - 6\n\tlocal interval1_start_index_7 = interval1_start_index - 6\n\tlocal interval2_start_index_7\
    \ = interval2_start_index - 6\n\tlocal interval1_end_index_8 = interval1_end_index\
    \ - 7\n\tlocal interval2_end_index_8 = interval2_end_index - 7\n\tlocal interval1_start_index_8\
    \ = interval1_start_index - 7\n\tlocal interval2_start_index_8 = interval2_start_index\
    \ - 7\n\tlocal interval1_end_index_9 = interval1_end_index - ", "  local start\
    \ = interval1[1]\n  local end = interval1[2]\n  local start2 = interval2[1]\n\
    \  local end2 = interval2[2]\n  if start > end or start2 > end2 then\n    return\
    \ \"NO\"\n  end\n  if start <= start2 then\n    if end <= end2 then\n      return\
    \ \"YES\"\n    else\n      return \"NO\"\n    end\n  else\n    if end <= end2\
    \ then\n      return \"NO\"\n    else\n      return \"YES\"\n    end\n  end\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectLength = 0\n\tlocal intersectStart = 0\n\tlocal intersectEnd\
    \ = 0\n\tlocal intersectInterval = nil\n\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\tintersectStart = interval1Start\n\
    \t\tintersectEnd = interval1End\n\t\tintersectLength = interval1Length\n\t\tintersectInterval\
    \ = interval1\n\telseif interval2Start <= interval1Start and interval2End >= interval1End\
    \ then\n\t\tintersectStart = interval2Start\n\t\tintersectEnd = interval2End\n\
    \t\tintersectLength = interval2Length\n\t\tintersectInterval = interval2\n\telse\n\
    \t\treturn nil\n\tend\n\tif intersectLength == 2 then\n\t\tif intersectStart <=\
    \ intersectEnd then\n\t\t\tif intersectStart % intersectLength == 0 then\n\t\t\
    \t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\
    \t\treturn \"NO\"\n\t\tend\n\telse\n\t\tif intersectStart <= intersectEnd then\n\
    \t\t\tif intersectStart % intersectLength == 0 then\n\t\t\t\treturn \"YES\"\n\t\
    \t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\t\
    end\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\treturn interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end\n\t\telse\n\t\t\treturn\
    \ interval1_start <= interval2_end and interval1_end >= interval2_start\n\t\t\
    end\n\telse\n\t\treturn interval1_length == interval2_length\n\tend\nend", "\t\
    local interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ interval1Length = interval1End - interval1Start + 1\n\tlocal interval2Length\
    \ = interval2End - interval2Start + 1\n\tlocal interval1Intersection = interval1Start\
    \ + interval1Length - interval2Length\n\tlocal interval2Intersection = interval2Start\
    \ + interval2Length - interval1Length\n\tif interval1Intersection == 0 and interval2Intersection\
    \ == 0 then\n\t\treturn 'NO'\n\telseif interval1Intersection == 0 and interval2Intersection\
    \ > 0 then\n\t\treturn 'NO'\n\telseif interval1Intersection > 0 and interval2Intersection\
    \ == 0 then\n\t\treturn 'YES'\n\telseif interval1Intersection == 0 and interval2Intersection\
    \ < 0 then\n\t\treturn 'YES'\n\telseif interval1Intersection > 0 and interval2Intersection\
    \ > 0 then\n\t\treturn 'YES'\n\telseif interval1Intersection > 0 and interval2Intersection\
    \ < 0 then\n\t\treturn 'NO'\n\telseif interval1Intersection < 0 and interval2Intersection\
    \ > 0 then\n\t\treturn 'NO'\n\telseif interval1Intersection < 0 and interval2Intersection\
    \ < 0 then\n\t\treturn 'NO'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal intersectionStart\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionEnd = interval1Start <= interval2End and\n\t\tinterval1End >= interval2Start\
    \ and\n\t\tinterval1Start <= interval2End and\n\t\tinterval1Start <= interval2Start\
    \ and\n\t\tinterval1End >= interval2End\n\tlocal intersectionLength = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionIsPrime\
    \ = not (intersectionStart or intersectionEnd or intersectionLength)\n\treturn\
    \ intersectionIsPrime and \"YES\" or \"NO\"\nend", "\tlocal start = interval1[1]\n\
    \tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end - start\n\tlocal length2 = end2 - start2\n\tif length2 ==\
    \ 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\t\tif length == 1\
    \ then\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\tif length2 > length / 2 then\n\
    \t\tlength = length / 2\n\tend\n\tif length2 < length / 2 then\n\t\tlength = length2\
    \ / 2\n\tend\n\tif length == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length ==\
    \ 1 then\n\t\tif length == 1 then\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\tif\
    \ length2 > length / 2 then\n\t\tlength = length / 2\n\tend\n\tif length2 < length\
    \ / 2 then\n\t\tlength = length2 / 2\n\tend\n\tif length == 0 then\n\t\treturn\
    \ \"NO\"\n\tend\n\tif length == 1 then\n\t\tif length == 1 then\n\t\t\treturn\
    \ \"YES\"\n\t\tend\n\tend\n\tif length2 > length / 2 then\n\t\tlength = length\
    \ / 2\n\tend\n\tif length2 < length / 2 then\n\t\tlength = length2 / 2\n\tend\n\
    \tif length == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length == 1 then\n\t\tif\
    \ length == 1 then\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\tif length2 > length\
    \ / 2 then\n\t\tlength = length / 2\n\tend\n\tif length2 < length / 2 then\n\t\
    \tlength = length2 / 2\n\tend\n\tif length == 0 then\n\t\treturn \"NO\"\n\tend\n\
    \tif length == 1 then\n\t\tif length == 1 then\n\t\t\treturn \"YES\"\n\t\tend\n\
    \tend\n\tif length2 > length / 2 then\n\t\tlength = length / 2\n\tend\n\tif length2\
    \ < length / 2 then\n\t\tlength = length2 / 2\n\tend\n\tif length == 0 then\n\t\
    \treturn \"NO\"\n\tend\n\tif length == 1 then\n\t\tif length == 1 then\n\t\t\t\
    return \"YES\"\n\t\tend\n\tend\n\tif length2 > length / 2 then\n\t\tlength = length\
    \ / 2\n\tend\n\tif length2 < length / 2 then\n\t\tlength = length2 / 2\n\tend\n\
    \tif length == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length == 1 then\n\t\tif\
    \ length == 1 then\n\t\t\treturn \"YES\"\n\t\tend\n\tend\n\tif length2 > length\
    \ / 2 then\n\t\tlength = length / 2\n\tend\n", "\tlocal interval1Start, interval1End\
    \ = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End = interval2[1],\
    \ interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\tlocal\
    \ interval2Length = interval2End - interval2Start\n\tlocal intersectionLength\
    \ = interval1Start + interval1Length - interval2Start + interval2Length\n\tif\
    \ intersectionLength == 0 then\n\t\treturn 'NO'\n\telseif intersectionLength ==\
    \ 1 then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal start\
    \ = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\
    \tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length % length2 == 0 then\n\
    \t\treturn 'YES'\n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal\
    \ prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6\
    \ = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\
    \tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal\
    \ prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16\
    \ = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\
    \tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal\
    \ prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26\
    \ = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\
    \tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal\
    \ prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36\
    \ = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\
    \tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal\
    \ prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46\
    \ = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\
    \tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal\
    \ prime53 = true\n\tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal prime56\
    \ = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\
    \tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal\
    \ prime63 = true\n\tlocal prime64 = true\n\tlocal prime65 = true\n\tlocal prime66\
    \ = true\n\tlocal prime67 = true\n\tlocal prime", "\tlocal start1 = interval1[1]\n\
    \tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1\
    \ == 0 or length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length1 == length2\
    \ then\n\t\tif start1 <= start2 then\n\t\t\treturn start1 <= end2 and end2 <=\
    \ end1\n\t\telse\n\t\t\treturn start2 <= end1 and end1 <= end2\n\t\tend\n\tend\n\
    \tlocal length_intersection = length1 -- initialize length_intersection\n\tlocal\
    \ interval_length = 1 -- initialize interval_length\n\tlocal interval_start =\
    \ start1 -- initialize interval_start\n\tlocal interval_end = end1 -- initialize\
    \ interval_end\n\tlocal interval_start_temp = start2 -- initialize interval_start_temp\n\
    \tlocal interval_end_temp = end2 -- initialize interval_end_temp\n\tlocal prime_flag\
    \ = 1 -- initialize prime_flag\n\tlocal prime_flag2 = 1 -- initialize prime_flag2\n\
    \tlocal prime_flag3 = 1 -- initialize prime_flag3\n\tlocal prime_flag4 = 1 --\
    \ initialize prime_flag4\n\tlocal prime_flag5 = 1 -- initialize prime_flag5\n\t\
    local prime_flag6 = 1 -- initialize prime_flag6\n\tlocal prime_flag7 = 1 -- initialize\
    \ prime_flag7\n\tlocal prime_flag8 = 1 -- initialize prime_flag8\n\tlocal prime_flag9\
    \ = 1 -- initialize prime_flag9\n\tlocal prime_flag10 = 1 -- initialize prime_flag10\n\
    \tlocal prime_flag11 = 1 -- initialize prime_flag11\n\tlocal prime_flag12 = 1\
    \ -- initialize prime_flag12\n\tlocal prime_flag13 = 1 -- initialize prime_flag13\n\
    \tlocal prime_flag14 = 1 -- initialize prime_flag14\n\tlocal prime_flag15 = 1\
    \ -- initialize prime_flag15\n\tlocal prime_flag16 = 1 -- initialize prime_flag16\n\
    \tlocal prime_flag17 = 1 -- initialize prime_flag17\n\tlocal prime_flag18 = 1\
    \ -- initialize prime_flag18\n\tlocal prime_flag19 = 1 -- initialize prime_flag19\n\
    \tlocal prime_flag20 = 1 -- initialize prime_flag20\n\tlocal prime_flag21 = 1\
    \ -- initialize prime_flag21\n\tlocal prime_flag22 = 1 -- initialize prime_flag22\n\
    \tlocal prime_flag23 = 1 -- initialize prime_", "\tlocal interval1Start, interval1End\
    \ = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End = interval2[1],\
    \ interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\tlocal\
    \ interval2Length = interval2End - interval2Start\n\tlocal intersectionLength\
    \ = interval1End + interval2Start\n\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\tif interval1Length == interval2Length then\n\t\t\t\
    if interval1Start <= interval2Start and interval1End >= interval2End then\n\t\t\
    \t\tif interval1Start <= interval2Start and interval1End >= interval2End then\n\
    \t\t\t\t\treturn \"YES\"\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\
    \t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\treturn \"NO\"\
    \n\t\t\telse\n\t\t\t\treturn \"YES\"\n\t\t\tend\n\t\tend\n\telse\n\t\treturn \"\
    NO\"\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End\
    \ = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal interval2End\
    \ = interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\t\
    local interval2Length = interval2End - interval2Start\n\tlocal intersectionLength\
    \ = interval1Start + interval2End - interval1End - interval2Start\n\tif interval1Start\
    \ < interval2Start then\n\t\tif interval1End < interval2End then\n\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\tif interval1Start < interval2Start then\n\t\t\
    \t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\tif interval1Start <\
    \ interval2Start then\n\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\
    \t\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\tif\
    \ interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\
    \t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\
    \ interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\
    \ interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start\
    \ < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif interval1Start < interval2Start then\n\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1Start < interval2Start\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \tif interval1Start ", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\treturn interval1_start\
    \ <= intersection_length\n\t\telse\n\t\t\treturn interval2_start <= intersection_length\n\
    \t\tend\n\telse\n\t\treturn interval1_length == intersection_length\n\tend\nend",
  "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2\
    \ = end2 - start2\n\tif length1 == 0 or length2 == 0 then\n\t\treturn 'NO'\n\t\
    end\n\tif length1 == length2 then\n\t\tif start1 <= start2 then\n\t\t\treturn\
    \ 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif start1 < start2 then\n\
    \t\tlocal temp = start1\n\t\tstart1 = start2\n\t\tstart2 = temp\n\tend\n\tif end1\
    \ > end2 then\n\t\tlocal temp = end1\n\t\tend1 = end2\n\t\tend2 = temp\n\tend\n\
    \tlocal prime = true\n\tlocal count = 0\n\tlocal i = 1\n\twhile prime and i <=\
    \ length1 do\n\t\tif start1 <= end2 then\n\t\t\tprime = false\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tif prime then\n\t\tif count == length1\
    \ then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tcount\
    \ = 0\n\ti = 1\n\twhile prime and i <= length2 do\n\t\tif start2 <= end1 then\n\
    \t\t\tprime = false\n\t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    if prime then\n\t\tif count == length2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\
    \treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]\n\tlocal interval1_length = interval1_end\
    \ - interval1_start\n\tlocal interval2_length = interval2_end - interval2_start\n\
    \tlocal intersection_length = interval1_end - interval2_start\n\tlocal is_prime\
    \ = true\n\tif interval1_length == interval2_length then\n\t\tif interval1_start\
    \ <= interval2_start then\n\t\t\tis_prime = false\n\t\telse\n\t\t\tis_prime =\
    \ true\n\t\tend\n\telse\n\t\tif interval1_start <= interval2_start then\n\t\t\t\
    is_prime = false\n\t\telse\n\t\t\tis_prime = true\n\t\tend\n\tend\n\tif is_prime\
    \ then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal start\
    \ = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start <= end and start2 <= end2 then\n\t\tlocal\
    \ length = math.abs(end - start2)\n\t\tif length == 2 then\n\t\t\tif start <=\
    \ start2 then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn \"YES\"\n\t\t\
    \tend\n\t\telse\n\t\t\tif start <= start2 then\n\t\t\t\treturn \"NO\"\n\t\t\t\
    else\n\t\t\t\treturn \"YES\"\n\t\t\tend\n\t\tend\n\telse\n\t\treturn \"NO\"\n\t\
    end\nend", "\tlocal start1, end1 = interval1[1], interval1[2]\n\tlocal start2,\
    \ end2 = interval2[1], interval2[2]\n\tlocal length1, length2 = end1 - start1,\
    \ end2 - start2\n\tif length1 == 0 and length2 == 0 then\n\t\treturn 'NO'\n\t\
    end\n\tif length1 == 0 or length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length1\
    \ == length2 then\n\t\treturn 'YES'\n\tend\n\tif length1 > length2 then\n\t\t\
    start1, end1 = end1, start1\n\t\tstart2, end2 = end2, start2\n\tend\n\tlocal prime\
    \ = true\n\tlocal i = 1\n\twhile prime and i <= length1 do\n\t\tprime = start1\
    \ + i == end1 or start2 + i == end2\n\t\ti = i + 1\n\tend\n\treturn prime and\
    \ 'YES' or 'NO'\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1\
    \ - start1 + end2 - start2\n\tif length == 0 then\n\t\treturn \"NO\"\n\telseif\
    \ length == 1 then\n\t\treturn \"YES\"\n\telse\n\t\tlocal prime = true\n\t\tfor\
    \ i = 2, math.floor(math.sqrt(length)) + 1 do\n\t\t\tif length % i == 0 then\n\
    \t\t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif prime then\n\t\
    \t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\nend", "\tlocal\
    \ start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2\
    \ = end2 - start2\n\tlocal length = length1 + length2\n\tif length == 0 then\n\
    \t\treturn 'NO'\n\tend\n\tif length == 1 then\n\t\treturn 'YES'\n\tend\n\tif start1\
    \ <= start2 then\n\t\tif end1 <= end2 then\n\t\t\tif start1 <= start2 then\n\t\
    \t\t\tif end1 <= end2 then\n\t\t\t\t\tif start1 <= start2 then\n\t\t\t\t\t\treturn\
    \ 'YES'\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 'NO'\n\t\t\t\t\tend\n\t\t\t\telse\n\
    \t\t\t\t\treturn 'NO'\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\
    \t\telse\n\t\t\treturn 'NO'\n\t\tend\n\telse\n\t\tif end1 <= end2 then\n\t\t\t\
    if start1 <= start2 then\n\t\t\t\tif end1 <= end2 then\n\t\t\t\t\tif start1 <=\
    \ start2 then\n\t\t\t\t\t\treturn 'YES'\n\t\t\t\t\telse\n\t\t\t\t\t\treturn 'NO'\n\
    \t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\treturn 'NO'\n\t\t\t\tend\n\t\t\telse\n\t\
    \t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend",
  "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\t\
    local interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ intersectionStart = interval1Start and interval2Start and interval1Start <=\
    \ interval2Start and interval2Start <= interval1End\n\tlocal intersectionEnd =\
    \ interval1End and interval2End or interval1Start and interval2Start or interval1End\
    \ or interval2End\n\tlocal intersectionLength = interval1End - interval1Start\
    \ + interval2End - interval2Start\n\tlocal intersectionIsPrime = not (math.mod(intersectionLength,\
    \ 2) == 0 and math.mod(intersectionLength, 1) == 0)\n\treturn (intersectionIsPrime\
    \ and \"YES\" or \"NO\")\nend", "\tlocal interval1_start = interval1[1]\n\tlocal\
    \ interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal\
    \ interval2_end = interval2[2]\n\tlocal intersection_length = interval1_end -\
    \ interval1_start\n\tlocal interval1_length = interval2_end - interval2_start\n\
    \tlocal is_prime = not (interval1_length == interval2_length and interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end)\n\tlocal is_intersect\
    \ = interval1_start <= interval2_start and interval1_end >= interval2_end\n\t\
    if is_intersect then\n\t\tif is_prime then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\
    \treturn 'NO'\n\t\tend\n\telse\n\t\tif is_prime then\n\t\t\treturn 'NO'\n\t\t\
    else\n\t\t\treturn 'YES'\n\t\tend\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]", "\tlocal interval1Start = interval1[1]\n\t\
    local interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal\
    \ interval2End = interval2[2]\n\tlocal intersectionStart = math.min(interval1Start,\
    \ interval2Start)\n\tlocal intersectionEnd = math.max(interval1End, interval2End)\n\
    \tif intersectionStart > intersectionEnd then\n\t\treturn \"NO\"\n\telseif intersectionStart\
    \ < interval1Start or intersectionEnd > interval1End then\n\t\treturn \"NO\"\n\
    \telseif intersectionStart <= interval2Start and intersectionEnd >= interval2End\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd = interval1Start,\
    \ interval1End\n\tlocal intersectionLength = interval1End - interval1Start\n\t\
    local interval2Length = interval2End - interval2Start\n\tlocal isIntersecting\n\
    \tlocal isPrime", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length1 =\
    \ end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1 <= 0 or length2\
    \ <= 0 then\n\t\treturn 'NO'\n\tend\n\tif length1 == length2 then\n\t\tif start1\
    \ <= start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    end\n\tif start1 <= start2 then\n\t\tif end1 <= end2 then\n\t\t\tif start1 <=\
    \ start2 then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\
    \t\telse\n\t\t\treturn 'NO'\n\t\tend\n\telse\n\t\tif end1 <= end2 then\n\t\t\t\
    if start1 <= start2 then\n\t\t\t\treturn 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\
    \t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal start =\
    \ math.min(interval1[1], interval2[1])\n\tlocal end = math.max(interval1[2], interval2[2])\n\
    \tif start > end then\n\t\treturn \"NO\"\n\telseif start == end then\n\t\treturn\
    \ \"YES\"\n\telse\n\t\tlocal length = math.abs(end - start)\n\t\tlocal prime =\
    \ true\n\t\tfor i = 2, length + 1 do\n\t\t\tif start % i == 0 and end % i == 0\
    \ then\n\t\t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif prime\
    \ then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal interval1Intersection = interval1Start + interval1Length\n\tlocal interval2Intersection\
    \ = interval2Start + interval2Length\n\tif interval1Intersection > interval2Intersection\
    \ then\n\t\treturn \"NO\"\n\telseif interval1Intersection < interval2Intersection\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\tif interval1Start <= interval2Start and\
    \ interval1End >= interval2End then\n\t\t\treturn \"YES\"\n\t\telseif interval1Start\
    \ <= interval2Start and interval1End < interval2End then\n\t\t\treturn \"NO\"\n\
    \t\telseif interval1Start >= interval2Start and interval1End >= interval2End then\n\
    \t\t\treturn \"NO\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\nend", "\t\
    local start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif start == start2 and end == end2 then\n\t\treturn 'YES'\n\t\
    end\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\tif length2\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif length % length2 == 0 then\n\t\treturn\
    \ 'YES'\n\tend\n\tlocal prime = math.ceil(math.sqrt(length / length2))\n\tif prime\
    \ == length then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "  local start1\
    \ = interval1[1]\n  local end1 = interval1[2]\n  local start2 = interval2[1]\n\
    \  local end2 = interval2[2]\n  local length1 = end1 - start1\n  local length2\
    \ = end2 - start2\n  local length_intersection = length1 + length2\n  if length_intersection\
    \ == 0 then\n    return \"NO\"\n  end\n  if length_intersection == 1 then\n  \
    \  return \"YES\"\n  end\n  if start1 < start2 then\n    local temp = start1\n\
    \    start1 = start2\n    start2 = temp\n  end\n  if end1 > end2 then\n    local\
    \ temp = end1\n    end1 = end2\n    end2 = temp\n  end\n  if start1 < start2 then\n\
    \    local temp = start1\n    start1 = start2\n    start2 = temp\n  end\n  if\
    \ end1 > end2 then\n    local temp = end1\n    end1 = end2\n    end2 = temp\n\
    \  end\n  if start1 < start2 then\n    local temp = start1\n    start1 = start2\n\
    \    start2 = temp\n  end\n  if end1 > end2 then\n    local temp = end1\n    end1\
    \ = end2\n    end2 = temp\n  end\n  if start1 < start2 then\n    local temp =\
    \ start1\n    start1 = start2\n    start2 = temp\n  end\n  if end1 > end2 then\n\
    \    local temp = end1\n    end1 = end2\n    end2 = temp\n  end\n  if start1 <\
    \ start2 then\n    local temp = start1\n    start1 = start2\n    start2 = temp\n\
    \  end\n  if end1 > end2 then\n    local temp = end1\n    end1 = end2\n    end2\
    \ = temp\n  end\n  if start1 < start2 then\n    local temp = start1\n    start1\
    \ = start2\n    start2 = temp\n  end\n  if end1 > end2 then\n    local temp =\
    \ end1\n    end1 = end2\n    end2 = temp\n  end\n  if start1 < start2 then\n \
    \   local temp = start1\n    start1 = start2\n    start2 = temp\n  end\n  if end1\
    \ > end2 then\n    local temp = end1\n    end1 = end2\n    end2 = temp\n  end\n\
    \  if start1 < start2 then\n    local temp = start1\n    start1 = start2\n   \
    \ start2 = temp\n  end\n  if end1 > end2 then\n    local temp = end1\n    end1\
    \ = end2\n    end2 = temp\n  end\n  if start1 < start2 then\n    local temp =\
    \ start1\n    start1 = start2\n    start2 = temp\n  end\n  if end1 > end2 then\n\
    \    local temp = end1\n    end1 = end", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\tlocal intersectionStart = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionEnd\
    \ = interval1Start <= interval2End and interval1End >= interval2Start\n\tlocal\
    \ intersectionLength = interval1End - interval1Start + interval2End - interval2Start\n\
    \tlocal intersectionIsPrime = not (math.mod(intersectionLength, 2) == 0)\n\treturn\
    \ (intersectionStart and intersectionEnd and not intersectionIsPrime)\nend", "\t\
    local start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\telseif start <= start2 then\n\t\treturn \"NO\"\n\telseif start <=\
    \ end2 then\n\t\treturn \"YES\"\n\telseif start2 <= end then\n\t\treturn \"YES\"\
    \n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start1, end1 = interval1[1],\
    \ interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\tlocal length1\
    \ = end1 - start1\n\tlocal length2 = end2 - start2\n\tlocal length_intersection\
    \ = length1 + length2 - 2\n\tlocal is_prime = math.gcd(length_intersection, length_intersection)\
    \ == 1 and length_intersection > 1\n\tif is_prime then\n\t\treturn \"YES\"\n\t\
    else\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\t\n\tif interval1Start > interval2Start then\n\
    \t\tinterval1Start, interval1End = interval2Start, interval1End\n\tend\n\tif interval1End\
    \ < interval2End then\n\t\tinterval1End, interval1Start = interval2End, interval1Start\n\
    \tend\n\t\n\tif interval1Start <= interval1End then\n\t\tif interval1Start <=\
    \ interval2Start then\n\t\t\tif interval1End <= interval2End then\n\t\t\t\treturn\
    \ interval1Start <= interval2Start and interval1End <= interval2End\n\t\t\telse\n\
    \t\t\t\treturn false\n\t\t\tend\n\t\telse\n\t\t\treturn interval1Start <= interval2End\n\
    \t\tend\n\telse\n\t\tif interval1End <= interval2Start then\n\t\t\treturn interval1End\
    \ <= interval2End\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend", "\tlocal\
    \ start1, end1 = interval1[1], interval1[2]\n\tlocal start2, end2 = interval2[1],\
    \ interval2[2]\n\tif start1 <= end2 and start2 <= end1 then\n\t\treturn \"YES\"\
    \n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start = interval1[1]\n\tlocal\
    \ end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tif start > end or start2 > end2 then\n\t\treturn \"NO\"\n\tend\n\tlocal length\
    \ = end - start\n\tlocal length2 = end2 - start2\n\tif length2 == 0 then\n\t\t\
    return \"NO\"\n\tend\n\tif length2 == 1 then\n\t\treturn \"YES\"\n\tend\n\tif\
    \ length == length2 then\n\t\tif length == 2 then\n\t\t\tif start == start2 then\n\
    \t\t\t\treturn \"YES\"\n\t\t\tend\n\t\t\tif end == end2 then\n\t\t\t\treturn \"\
    YES\"\n\t\t\tend\n\t\tend\n\t\tif length == 3 then\n\t\t\tif start == start2 then\n\
    \t\t\t\treturn \"YES\"\n\t\t\tend\n\t\t\tif end == end2 then\n\t\t\t\treturn \"\
    YES\"\n\t\t\tend\n\t\tend\n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\
    \tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6\
    \ = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\
    \tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal\
    \ prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16\
    \ = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\
    \tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal\
    \ prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26\
    \ = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\
    \tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal\
    \ prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36\
    \ = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\
    \tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal\
    \ prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46\
    \ = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\
    \tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal\
    \ prime53 = true\n\tlocal prime54 = true\n\t", "\tlocal start = interval1[1]\n\
    \tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tif start > end or start2 > end2 then\n\t\treturn \"NO\"\n\tend\n\tlocal length\
    \ = end - start\n\tlocal length2 = end2 - start2\n\tif length2 == 0 then\n\t\t\
    return \"NO\"\n\tend\n\tif length2 == 1 then\n\t\tif length == 1 then\n\t\t\t\
    return \"YES\"\n\t\tend\n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\t\
    local prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6\
    \ = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\
    \tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal\
    \ prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16\
    \ = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\
    \tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal\
    \ prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26\
    \ = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\
    \tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal\
    \ prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36\
    \ = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\
    \tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal\
    \ prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46\
    \ = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\
    \tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal\
    \ prime53 = true\n\tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal prime56\
    \ = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\
    \tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal\
    \ prime63 = true\n\tlocal prime64 = true\n\tlocal prime65 = true\n\tlocal prime66\
    \ = true\n\tlocal prime67", "\tlocal start1, end1 = interval1[1], interval1[2]\n\
    \tlocal start2, end2 = interval2[1], interval2[2]\n\tif start1 <= end2 and start2\
    \ <= end1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  local\
    \ start = interval1[1]\n  local end = interval1[2]\n  local start2 = interval2[1]\n\
    \  local end2 = interval2[2]\n  if start > end or start2 > end2 then\n    return\
    \ \"NO\"\n  end\n  if start <= start2 then\n    return interval2[1] >= start and\
    \ interval2[2] <= end\n  else\n    return interval2[1] >= start and interval2[2]\
    \ >= end2\n  end\nend", "\tlocal start1, end1 = interval1[1], interval1[2]\n\t\
    local start2, end2 = interval2[1], interval2[2]\n\tlocal length1 = end1 - start1\n\
    \tlocal length2 = end2 - start2\n\tlocal length_intersection = length1 + length2\n\
    \tif length_intersection == 0 then\n\t\treturn 'NO'\n\telseif length_intersection\
    \ == 1 then\n\t\treturn 'YES'\n\telseif length_intersection == 2 then\n\t\tif\
    \ start1 <= start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\t\
    end\n\telse\n\t\tlocal prime_number_count = 0\n\t\tlocal prime_number_end = 0\n\
    \t\tlocal prime_number_start = 0\n\t\tlocal prime_number_end1 = 0\n\t\tlocal prime_number_end2\
    \ = 0\n\t\tlocal prime_number_start1 = 0\n\t\tlocal prime_number_start2 = 0\n\t\
    \tlocal prime_number_end3 = 0\n\t\tlocal prime_number_end4 = 0\n\t\tlocal prime_number_start3\
    \ = 0\n\t\tlocal prime_number_start4 = 0\n\t\tlocal prime_number_end5 = 0\n\t\t\
    local prime_number_end6 = 0\n\t\tlocal prime_number_start5 = 0\n\t\tlocal prime_number_start6\
    \ = 0\n\t\tlocal prime_number_end7 = 0\n\t\tlocal prime_number_end8 = 0\n\t\t\
    local prime_number_start7 = 0\n\t\tlocal prime_number_start8 = 0\n\t\tlocal prime_number_end9\
    \ = 0\n\t\tlocal prime_number_end10 = 0\n\t\tlocal prime_number_start9 = 0\n\t\
    \tlocal prime_number_start10 = 0\n\t\tlocal prime_number_end11 = 0\n\t\tlocal\
    \ prime_number_end12 = 0\n\t\tlocal prime_number_start11 = 0\n\t\tlocal prime_number_start12\
    \ = 0\n\t\tlocal prime_number_end13 = 0\n\t\tlocal prime_number_end14 = 0\n\t\t\
    local prime_number_start13 = 0\n\t\tlocal prime_number_start14 = 0\n\t\tlocal\
    \ prime_number_end15 = 0\n\t\tlocal prime_number_end16 = 0\n\t\tlocal prime_number_start15\
    \ = 0\n\t\tlocal prime_number_start16 = 0\n\t\tlocal prime_number_end17 = 0\n\t\
    \tlocal prime_number_end18 = 0\n\t\tlocal prime_number_start17 = 0\n\t\tlocal\
    \ prime_number_start18 = 0\n\t\tlocal prime_number_end19 = 0\n\t\tlocal prime_number_end20\
    \ = 0\n\t\tlocal prime_number_start19 = 0\n\t\tlocal prime_number_start20 = 0\n\
    \t\tlocal prime_number_end21 = 0\n\t\tlocal prime", "\tlocal start1 = interval1[1]\n\
    \tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1\
    \ == 0 or length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length1 < length2 then\n\
    \t\tlocal temp = start1\n\t\tstart1 = start2\n\t\tstart2 = temp\n\t\ttemp = end1\n\
    \t\tend1 = end2\n\t\tend2 = temp\n\tend\n\tlocal prime = primes[length1]\n\tif\
    \ prime ~= nil then\n\t\tif prime == length2 then\n\t\t\treturn 'YES'\n\t\tend\n\
    \tend\n\tlocal prime = primes[length2]\n\tif prime ~= nil then\n\t\tif prime ==\
    \ length1 then\n\t\t\treturn 'YES'\n\t\tend\n\tend\n\tlocal prime = primes[length1\
    \ + length2]\n\tif prime ~= nil then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\n\
    end", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n\t\n\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\treturn 'YES'\n\t\
    elseif interval1Start <= interval2Start and interval1End < interval2End then\n\
    \t\treturn 'NO'\n\telseif interval1Start > interval2Start and interval1End <=\
    \ interval2End then\n\t\treturn 'NO'\n\telseif interval1Start > interval2Start\
    \ and interval1End > interval2End then\n\t\treturn 'NO'\n\telse\n\t\treturn 'NO'\n\
    \tend\nend", "  local start = interval1[1]\n  local end = interval1[2]\n  local\
    \ start2 = interval2[1]\n  local end2 = interval2[2]\n  local length = end - start\n\
    \  local length2 = end2 - start2\n  if length2 == 0 then\n    return length\n\
    \  elseif length2 == 1 then\n    return length >= start and length <= end\n  else\n\
    \    return length >= start and length <= end2 and\n           length2 >= start2\
    \ and length2 <= end2\n  end\nend", "\tlocal interval1Start = interval1[1]\n\t\
    local interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal\
    \ interval2End = interval2[2]\n\tlocal intersectionStart = math.min(interval1Start,\
    \ interval2Start)\n\tlocal intersectionEnd = math.max(interval1End, interval2End)\n\
    \tif intersectionStart > intersectionEnd then\n\t\treturn \"NO\"\n\telseif intersectionStart\
    \ < interval1Start or intersectionEnd > interval1End then\n\t\treturn \"NO\"\n\
    \telseif intersectionStart <= interval1Start and intersectionEnd >= interval1End\
    \ then\n\t\treturn \"YES\"\n\telseif intersectionStart <= interval2Start and intersectionEnd\
    \ >= interval2End then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\n\
    end", "  local interval1Start, interval1End = interval1[1], interval1[2]\n  local\
    \ interval2Start, interval2End = interval2[1], interval2[2]\n  local interval1Length\
    \ = interval1End - interval1Start\n  local interval2Length = interval2End - interval2Start\n\
    \  if interval1Start > interval2Start then\n    interval1Start, interval1End =\
    \ interval2Start, interval2End\n  end\n  if interval1End < interval2End then\n\
    \    interval1End, interval1Start = interval2End, interval2Start\n  end\n  if\
    \ interval1Start <= interval1End then\n    if interval1Length == 0 then\n    \
    \  return 'NO'\n    else\n      if interval1Length == 1 then\n        return 'YES'\n\
    \      else\n        local interval1StartPrime = interval1Start + 1\n        local\
    \ interval1EndPrime = interval1End - 1\n        local interval2StartPrime = interval2Start\
    \ + 1\n        local interval2EndPrime = interval2End - 1\n        local primeNumberFound\
    \ = false\n        local primeNumberFoundPrime = false\n        local primeNumberFoundPrime2\
    \ = false\n        for i = interval1StartPrime, 1, -1 do\n          for j = interval2StartPrime,\
    \ 1, -1 do\n            if i % j == 0 then\n              primeNumberFound = true\n\
    \              primeNumberFoundPrime = true\n              primeNumberFoundPrime2\
    \ = true\n              break\n            end\n          end\n          if primeNumberFound\
    \ then\n            break\n          end\n        end\n        if primeNumberFound\
    \ then\n          if primeNumberFoundPrime then\n            if primeNumberFoundPrime2\
    \ then\n              return 'YES'\n            else\n              return 'NO'\n\
    \            end\n          else\n            return 'NO'\n          end\n   \
    \     else\n          return 'NO'\n        end\n      end\n    end\n  else\n \
    \   return 'NO'\n  end\nend", "\tlocal start1, end1 = interval1[1], interval1[2]\n\
    \tlocal start2, end2 = interval2[1], interval2[2]\n\tif start1 <= end2 and start2\
    \ <= end1 then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "\tlocal\
    \ interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ interval1Length = interval1End - interval1Start\n\tlocal interval2Length = interval2End\
    \ - interval2Start\n\tlocal intersectionLength = interval1Start + interval2End\
    \ - interval1End - interval2Start\n\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\tif interval1Length == interval2Length then\n\t\t\t\
    if interval1Start <= interval2Start and interval1End >= interval2End then\n\t\t\
    \t\tif interval1Start <= interval2Start and interval1End >= interval2End then\n\
    \t\t\t\t\treturn interval1Length\n\t\t\t\telse\n\t\t\t\t\treturn interval1Length\
    \ + 1\n\t\t\t\tend\n\t\t\telse\n\t\t\t\treturn interval1Length + 1\n\t\t\tend\n\
    \t\telse\n\t\t\treturn interval1Length + 1\n\t\tend\n\telse\n\t\treturn interval1Length\
    \ + 1\n\tend\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length1 =\
    \ end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1 == 0 or length2\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif length1 == length2 then\n\t\tif start1\
    \ <= start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\t\
    end\n\tif length1 > length2 then\n\t\tlocal temp = start1\n\t\tstart1 = start2\n\
    \t\tstart2 = temp\n\tend\n\tif start1 <= start2 then\n\t\tlocal temp = start1\n\
    \t\tstart1 = start2\n\t\tstart2 = temp\n\tend\n\tlocal prime = true\n\tlocal prime_start\
    \ = start2\n\tlocal prime_end = prime_start + length2\n\tlocal prime_length =\
    \ prime_end - prime_start\n\tlocal prime_prime = true\n\tlocal prime_prime_start\
    \ = prime_start + prime_length\n\tlocal prime_prime_end = prime_prime_start +\
    \ length1\n\tlocal prime_prime_length = prime_prime_end - prime_prime_start\n\t\
    local prime_prime_prime = true\n\tlocal prime_prime_prime_start = prime_prime_start\
    \ + prime_prime_length\n\tlocal prime_prime_prime_end = prime_prime_prime_start\
    \ + length2\n\tlocal prime_prime_prime_length = prime_prime_prime_end - prime_prime_prime_start\n\
    \tlocal prime_prime_prime_prime = true\n\tlocal prime_prime_prime_prime_start\
    \ = prime_prime_prime_start + prime_prime_prime_length\n\tlocal prime_prime_prime_prime_end\
    \ = prime_prime_prime_prime_start + length1\n\tlocal prime_prime_prime_prime_length\
    \ = prime_prime_prime_prime_end - prime_prime_prime_prime_start\n\tlocal prime_prime_prime_prime_prime_start\
    \ = prime_prime_prime_prime_start + prime_prime_prime_prime_length\n\tlocal prime_prime_prime_prime_prime_end\
    \ = prime_prime_prime_prime_prime_start + length2\n\tlocal prime_prime_prime_prime_prime_length\
    \ = prime_prime_prime_prime_prime_end - prime_prime_prime_prime_prime_start\n\t\
    local prime_prime_prime_prime_prime", "\tlocal interval1Start, interval1End =\
    \ interval1[1], interval1[2]\n\tlocal interval2Start, interval2End = interval2[1],\
    \ interval2[2]\n\tlocal intersectionStart, intersectionEnd = interval1Start <=\
    \ interval2Start and interval1End >= interval2End or interval1Start <= interval2End\
    \ or interval1Start >= interval2Start, interval1Start <= interval2End or interval1End\
    \ >= interval2End\n\tlocal intersectionLength = interval1Start <= interval2Start\
    \ and interval1End >= interval2End or interval1Start <= interval2End or interval1Start\
    \ >= interval2Start, interval1Start <= interval2End or interval1End >= interval2End\n\
    \tlocal intersectionIsPrime = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End or interval1Start <= interval2End or interval1Start >= interval2Start)\n\
    \treturn intersectionStart and intersectionLength and intersectionIsPrime and\
    \ \"YES\" or \"NO\"\nend", "\tlocal interval1Start, interval1End = interval1[1],\
    \ interval1[2]\n\tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\
    \tlocal interval1Length = interval1End - interval1Start + 1\n\tlocal interval2Length\
    \ = interval2End - interval2Start + 1\n\tlocal intersectionLength = interval1End\
    \ + interval2Start - interval1Start + 1\n\tif interval1Length > interval2Length\
    \ then\n\t\tinterval1Start, interval1End = interval2Start, interval2End\n\tend\n\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \treturn interval1Length == interval2Length and \"YES\" or \"NO\"\n\tend\n\treturn\
    \ \"NO\"\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\t\
    local start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length1 = end1\
    \ - start1\n\tlocal length2 = end2 - start2\n\tif length1 <= 0 or length2 <= 0\
    \ then\n\t\treturn 'NO'\n\tend\n\tif length1 == length2 then\n\t\tif start1 <=\
    \ start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\
    \tif start1 <= start2 then\n\t\tif end1 < end2 then\n\t\t\treturn 'YES'\n\t\t\
    else\n\t\t\treturn 'NO'\n\t\tend\n\telse\n\t\tif end1 < end2 then\n\t\t\treturn\
    \ 'NO'\n\t\telse\n\t\t\treturn 'YES'\n\t\tend\n\tend\nend", "\tlocal start1 =\
    \ interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2 =\
    \ end2 - start2\n\tlocal length = length1 + length2\n\tlocal prime = true\n\t\
    local prime_length = 2\n\tlocal prime_start = start1\n\tlocal prime_end = start2\n\
    \tlocal prime_prime = true\n\tlocal prime_prime_start = prime_start\n\tlocal prime_prime_end\
    \ = prime_end\n\tlocal prime_prime_length = prime_end - prime_start\n\tlocal prime_prime_prime_start\
    \ = prime_prime_start\n\tlocal prime_prime_prime_end = prime_prime_end\n\tlocal\
    \ prime_prime_prime_length = prime_prime_end - prime_prime_start\n\tlocal prime_prime_prime_prime_start\
    \ = prime_prime_prime_start\n\tlocal prime_prime_prime_prime_end = prime_prime_prime_end\n\
    \tlocal prime_prime_prime_prime_length = prime_prime_prime_end - prime_prime_prime_start\n\
    \tlocal prime_prime_prime_prime_prime_start = prime_prime_prime_prime_start\n\t\
    local prime_prime_prime_prime_prime_end = prime_prime_prime_prime_end\n\tlocal\
    \ prime_prime_prime_prime_prime_length = prime_prime_prime_prime_end - prime_prime_prime_prime_start\n\
    \tlocal prime_prime_prime_prime_prime_prime_start = prime_prime_prime_prime_prime_start\n\
    \tlocal prime_prime_prime_prime_prime_prime_end = prime_prime_prime_prime_prime_end\n\
    \tlocal prime_prime_prime_prime_prime_prime_length = prime_prime_prime_prime_prime_end\
    \ - prime_prime_prime_prime_prime_prime_start\n\tlocal prime_prime_prime_prime_prime_prime_prime_start\
    \ = prime_prime_prime_prime_prime_prime_prime_start\n\tlocal prime_prime_prime_prime_prime_prime_prime_end\
    \ = prime_prime_prime_prime_prime_prime_prime_prime_end\n\tlocal prime_prime_prime_prime_prime_prime_prime_length\
    \ = prime_prime_prime_prime_prime_prime_", "\tlocal start1, end1 = interval1[1],\
    \ interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\tif start1\
    \ <= end2 and start2 <= end1 then\n\t\treturn true\n\telseif start1 <= end2 and\
    \ start2 > end1 then\n\t\treturn false\n\telseif start1 > end2 and start2 <= end1\
    \ then\n\t\treturn false\n\telseif start1 > end2 and start2 > end1 then\n\t\t\
    return true\n\telse\n\t\treturn false\n\tend\nend", "\tlocal interval1_start =\
    \ interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal interval1_start_index = math.floor(interval1_start\
    \ / interval1_length)\n\tlocal interval2_start_index = math.floor(interval2_start\
    \ / interval2_length)\n\tlocal interval1_end_index = math.ceil(interval1_end /\
    \ interval1_length)\n\tlocal interval2_end_index = math.ceil(interval2_end / interval2_length)\n\
    \tlocal intersection_length = interval1_end_index - interval1_start_index\n\t\
    local intersection_start_index = interval1_start_index * interval1_length + interval2_start_index\
    \ * interval2_length\n\tlocal intersection_end_index = intersection_start_index\
    \ + intersection_length\n\tlocal intersection_start_index = math.floor(intersection_start_index)\n\
    \tlocal intersection_end_index = math.ceil(intersection_end_index)\n\tlocal intersection_start_index\
    \ = math.max(interval1_start_index, interval2_start_index)\n\tlocal intersection_end_index\
    \ = math.min(interval1_end_index, interval2_end_index)\n\tlocal intersection_length\
    \ = intersection_end_index - intersection_start_index\n\tlocal intersection_start_index\
    \ = math.floor(intersection_start_index)\n\tlocal intersection_end_index = math.ceil(intersection_end_index)\n\
    \tlocal intersection_length = intersection_end_index - intersection_start_index\n\
    \tlocal intersection_start_index = math.max(interval1_start_index, interval2_start_index)\n\
    \tlocal intersection_end_index = math.min(interval1_end_index, interval2_end_index)\n\
    \tlocal intersection_length = intersection_end_index - intersection_start_index\n\
    \tlocal intersection_start_index = math.floor(intersection_start_index)\n\tlocal\
    \ intersection_end_index = math.ceil(intersection_end_index)\n\tlocal intersection_length\
    \ = intersection_end_index - intersection_start_index\n\tlocal intersection_start_index\
    \ = math.max(interval1_start_index, interval2_start_index)\n\tlocal intersection_end_index\
    \ = math.min(interval1_end_index, interval2_end_index)\n\tlocal intersection_length\
    \ = intersection_end_index - intersection_start_index\n\tlocal intersection_start_index\
    \ = math.floor(intersection_start_index)\n\tlocal intersection_end_index = math.ceil(intersection_end_index)\n\
    \tlocal intersection_length = intersection_end_index - intersection_start_index\n\
    \tlocal intersection_start_index = math.max(interval1_start_index, interval2_start_index)\n\
    \tlocal intersection_end_index = math.min(interval1_end_index, interval2_end_index)\n\
    \tlocal intersection_length = ", "\tlocal start = math.min(interval1[1], interval2[1])\n\
    \tlocal end = math.max(interval1[2], interval2[2])\n\tlocal length = end - start\n\
    \tif length == 0 then\n\t\treturn 'NO'\n\tend\n\tif length == 1 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif length == 2 then\n\t\tif start <= end then\n\t\t\treturn\
    \ 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tlocal prime = nil\n\t\
    for i = 2, math.floor(math.sqrt(length)) + 1 do\n\t\tif length%i == 0 then\n\t\
    \t\tprime = i\n\t\t\tbreak\n\t\tend\n\tend\n\tif prime == nil then\n\t\treturn\
    \ 'NO'\n\tend\n\tif prime == 1 then\n\t\treturn 'YES'\n\tend\n\tif prime == 2\
    \ then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\
    \t\tend\n\tend\n\tif prime == 3 then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\
    \t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime == 4 then\n\t\tif start\
    \ <= end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\
    \tif prime == 5 then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\t\telse\n\
    \t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime == 6 then\n\t\tif start <= end then\n\
    \t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime ==\
    \ 7 then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn\
    \ 'NO'\n\t\tend\n\tend\n\tif prime == 8 then\n\t\tif start <= end then\n\t\t\t\
    return 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime == 9 then\n\
    \t\tif start <= end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\t\
    end\n\tend\n\tif prime == 10 then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\
    \t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime == 11 then\n\t\tif start\
    \ <= end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\
    \tif prime == 12 then\n\t\tif start <= end then\n\t\t\treturn 'YES'\n\t\telse\n\
    \t\t\treturn 'NO'\n\t\tend\n\tend\n\tif prime == 13 then\n\t\tif start <= end\
    \ then\n\t\t\treturn 'YES'\n", "\tlocal interval1_start = interval1[1]\n\tlocal\
    \ interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal\
    \ interval2_end = interval2[2]", "\tlocal start1 = interval1[1]\n\tlocal end1\
    \ = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length ==\
    \ 0 or length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif start1 <= start2 then\n\
    \t\tlocal temp = start1\n\t\tstart1 = start2\n\t\tstart2 = temp\n\tend\n\tif end1\
    \ <= end2 then\n\t\tlocal temp = end1\n\t\tend1 = end2\n\t\tend2 = temp\n\tend\n\
    \tif start1 > end1 then\n\t\tlocal temp = start1\n\t\tstart1 = end1\n\t\tend1\
    \ = temp\n\tend\n\tif start2 > end2 then\n\t\tlocal temp = start2\n\t\tstart2\
    \ = end2\n\t\tend2 = temp\n\tend\n\tif start1 < start2 then\n\t\tlocal temp =\
    \ start1\n\t\tstart1 = start2\n\t\tstart2 = temp\n\tend\n\tif end1 < end2 then\n\
    \t\tlocal temp = end1\n\t\tend1 = end2\n\t\tend2 = temp\n\tend\n\tlocal prime\
    \ = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\tlocal prime4 = true\n\
    \tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7 = true\n\tlocal prime8\
    \ = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\tlocal prime11 = true\n\
    \tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal prime14 = true\n\tlocal\
    \ prime15 = true\n\tlocal prime16 = true\n\tlocal prime17 = true\n\tlocal prime18\
    \ = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\tlocal prime21 = true\n\
    \tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal prime24 = true\n\tlocal\
    \ prime25 = true\n\tlocal prime26 = true\n\tlocal prime27 = true\n\tlocal prime28\
    \ = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\tlocal prime31 = true\n\
    \tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal prime34 = true\n\tlocal\
    \ prime35 = true\n\tlocal prime36 = true\n\tlocal prime37 = true\n\tlocal prime38\
    \ = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\tlocal prime41 = true\n\
    \tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal prime44 = true\n\tlocal\
    \ prime45 = true\n\tlocal prime46 = true\n\tlocal ", "\tlocal start1, end1 = interval1[1],\
    \ interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\tif start1\
    \ <= end2 and start2 <= end1 then\n\t\tif start1 <= start2 then\n\t\t\treturn\
    \ start1, end2\n\t\telse\n\t\t\treturn start2, end1\n\t\tend\n\telse\n\t\treturn\
    \ \"NO\"\n\tend\nend", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1\
    \ - start1\n\tlocal length2 = end2 - start2\n\tlocal isPrime = true\n\tif length\
    \ == 0 then\n\t\treturn 'NO'\n\telseif length2 == 0 then\n\t\treturn 'NO'\n\t\
    elseif length == length2 then\n\t\tlocal prime = true\n\t\tlocal prime2 = true\n\
    \t\tlocal prime3 = true\n\t\tlocal prime4 = true\n\t\tlocal prime5 = true\n\t\t\
    local prime6 = true\n\t\tlocal prime7 = true\n\t\tlocal prime8 = true\n\t\tlocal\
    \ prime9 = true\n\t\tlocal prime10 = true\n\t\tlocal prime11 = true\n\t\tlocal\
    \ prime12 = true\n\t\tlocal prime13 = true\n\t\tlocal prime14 = true\n\t\tlocal\
    \ prime15 = true\n\t\tlocal prime16 = true\n\t\tlocal prime17 = true\n\t\tlocal\
    \ prime18 = true\n\t\tlocal prime19 = true\n\t\tlocal prime20 = true\n\t\tlocal\
    \ prime21 = true\n\t\tlocal prime22 = true\n\t\tlocal prime23 = true\n\t\tlocal\
    \ prime24 = true\n\t\tlocal prime25 = true\n\t\tlocal prime26 = true\n\t\tlocal\
    \ prime27 = true\n\t\tlocal prime28 = true\n\t\tlocal prime29 = true\n\t\tlocal\
    \ prime30 = true\n\t\tlocal prime31 = true\n\t\tlocal prime32 = true\n\t\tlocal\
    \ prime33 = true\n\t\tlocal prime34 = true\n\t\tlocal prime35 = true\n\t\tlocal\
    \ prime36 = true\n\t\tlocal prime37 = true\n\t\tlocal prime38 = true\n\t\tlocal\
    \ prime39 = true\n\t\tlocal prime40 = true\n\t\tlocal prime41 = true\n\t\tlocal\
    \ prime42 = true\n\t\tlocal prime43 = true\n\t\tlocal prime44 = true\n\t\tlocal\
    \ prime45 = true\n\t\tlocal prime46 = true\n\t\tlocal prime47 = true\n\t\tlocal\
    \ prime48 = true\n\t\tlocal prime49 = true\n\t\tlocal prime50 = true\n\t\tlocal\
    \ prime51 = true\n\t\tlocal prime52 = true\n\t\tlocal prime53 = true\n\t\tlocal\
    \ prime54 = true\n\t\tlocal prime55 = true\n\t\tlocal prime56 = true\n\t\tlocal\
    \ prime57 = true\n\t\tlocal prime58 = true\n\t\tlocal prime59 = true\n\t\tlocal\
    \ prime60 = true\n\t\tlocal prime61 = true\n\t\tlocal prime62 = true\n\t\tlocal\
    \ prime63 = true\n\t\tlocal prime64 = true\n\t\tlocal prime65 = true\n\t\tlocal\
    \ prime66 = true\n\t\tlocal prime67 = true\n\t\tlocal prime68 = true\n\t\tlocal\
    \ prime", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local interval1Length = interval1End - interval1Start + 1\n\tlocal interval2Length\
    \ = interval2End - interval2Start + 1\n\tlocal interval1IntersectionStart = interval1Start\
    \ + interval1Length\n\tlocal interval2IntersectionStart = interval2Start + interval2Length\n\
    \tlocal interval1IntersectionEnd = interval1Start + interval1Length\n\tlocal interval2IntersectionEnd\
    \ = interval2Start + interval2Length\n\tlocal interval1IntersectionLength = interval1IntersectionEnd\
    \ - interval1IntersectionStart + 1\n\tlocal interval2IntersectionLength = interval2IntersectionEnd\
    \ - interval2IntersectionStart + 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength\
    \ == 1\n\tlocal interval2IntersectionIsPrime = interval2IntersectionLength ==\
    \ 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\
    \tlocal interval2IntersectionIsPrime = interval2IntersectionLength == 1\n\tlocal\
    \ interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\tlocal interval2IntersectionIsPrime\
    \ = interval2IntersectionLength == 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength\
    \ == 1\n\tlocal interval2IntersectionIsPrime = interval2IntersectionLength ==\
    \ 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\
    \tlocal interval2IntersectionIsPrime = interval2IntersectionLength == 1\n\tlocal\
    \ interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\tlocal interval2IntersectionIsPrime\
    \ = interval2IntersectionLength == 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength\
    \ == 1\n\tlocal interval2IntersectionIsPrime = interval2IntersectionLength ==\
    \ 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\
    \tlocal interval2IntersectionIsPrime = interval2IntersectionLength == 1\n\tlocal\
    \ interval1IntersectionIsPrime = interval1IntersectionLength == 1\n\tlocal interval2IntersectionIsPrime\
    \ = interval2IntersectionLength == 1\n\tlocal interval1IntersectionIsPrime = interval1IntersectionLength\
    \ == 1\n\tlocal interval2IntersectionIsPrime = interval2IntersectionLength ==\
    \ 1\n\tlocal interval1IntersectionIsPri", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\t\n\tif interval1Start > interval2Start then\n\
    \t\tinterval1Start, interval1End = interval2Start, interval1End\n\tend\n\tif interval1End\
    \ < interval2End then\n\t\tinterval1End, interval1Start = interval2End, interval1Start\n\
    \tend\n\t\n\tlocal intersectionStart = interval1Start\n\tlocal intersectionEnd\
    \ = interval1End\n\t\n\tlocal isIntersecting = true\n\t\n\twhile isIntersecting\
    \ do\n\t\tif interval1Start > interval2End then\n\t\t\tisIntersecting = false\n\
    \t\telseif interval1End < interval2Start then\n\t\t\tisIntersecting = false\n\t\
    \telse\n\t\t\tlocal interval1Middle = (interval1Start + interval1End) / 2\n\t\t\
    \tlocal interval2Middle = (interval2Start + interval2End) / 2\n\t\t\t\n\t\t\t\
    if interval1Middle > interval2Middle then\n\t\t\t\tinterval1Start, interval1End\
    \ = interval2Start, interval1End\n\t\t\telseif interval1Middle < interval2Middle\
    \ then\n\t\t\t\tinterval1End, interval1Start = interval2End, interval1Start\n\t\
    \t\telse\n\t\t\t\tlocal interval1MiddleLength = interval1End - interval1Start\n\
    \t\t\t\tlocal interval2MiddleLength = interval2End - interval2Start\n\t\t\t\t\n\
    \t\t\t\tif interval1MiddleLength > interval2MiddleLength then\n\t\t\t\t\tinterval1Start,\
    \ interval1End = interval2Start, interval1End\n\t\t\t\telseif interval1MiddleLength\
    \ < interval2MiddleLength then\n\t\t\t\t\tinterval1End, interval1Start = interval2End,\
    \ interval1Start\n\t\t\t\telse\n\t\t\t\t\tlocal interval1MiddleLength = interval1End\
    \ - interval1Start\n\t\t\t\t\tlocal interval2MiddleLength = interval2End - interval2Start\n\
    \t\t\t\t\t\n\t\t\t\t\tif interval1MiddleLength == interval2MiddleLength then\n\
    \t\t\t\t\t\tlocal interval1MiddleLength = interval1End - interval1Start\n\t\t\t\
    \t\t\tlocal interval2MiddleLength = interval2End - interval2Start\n\t\t\t\t\t\t\
    \n\t\t\t\t\t\tif interval1MiddleLength == interval2MiddleLength then\n\t\t\t\t\
    \t\t\tlocal interval1MiddleLength = interval1End - interval1Start\n\t\t\t\t\t\t\
    \tlocal interval2MiddleLength = interval2End - interval2Start\n\t\t\t\t\t\t\t\n\
    \t\t\t\t\t\t\tif interval1MiddleLength == interval2MiddleLength then\n\t\t\t\t\
    \t\t\t\tlocal interval1MiddleLength = interval1End - interval1Start\n\t\t\t\t\t\
    \t\t\tlocal interval2MiddleLength = interval2End - ", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\n\tif interval1_start\
    \ > interval1_end or interval2_start > interval2_end then\n\t\treturn 'NO'\n\t\
    end\n\t\n\tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\t\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start and interval1_end >= interval2_end\
    \ then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\t\n\t\
    if interval1_length < interval2_length then\n\t\tlocal interval1_start = interval1_start\
    \ + interval2_length - interval1_length\n\t\tlocal interval1_end = interval1_end\
    \ - interval2_length\n\t\t\n\t\tif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\t\
    end\n\tend\n\t\n\tif interval1_length > interval2_length then\n\t\tlocal interval2_start\
    \ = interval2_start + interval1_length - interval2_length\n\t\tlocal interval2_end\
    \ = interval2_end - interval1_length\n\t\t\n\t\tif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\t\
    return 'NO'\n\t\tend\n\tend\nend", "\tlocal start1, end1 = interval1[1], interval1[2]\n\
    \tlocal start2, end2 = interval2[1], interval2[2]\n\tif start1 <= end2 and start2\
    \ <= end1 then\n\t\treturn true\n\telseif start1 <= end2 then\n\t\treturn false\n\
    \telseif start2 <= end1 then\n\t\treturn false\n\tend\nend", "\tlocal start =\
    \ interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tlocal length = end - start\n\tlocal length2 = end2\
    \ - start2\n\tif length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 ==\
    \ 1 then\n\t\tif length == 1 then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn\
    \ \"NO\"\n\t\tend\n\tend\n\tif length2 > length + 1 then\n\t\treturn \"NO\"\n\t\
    end\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\tlocal\
    \ prime4 = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7\
    \ = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\
    \tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal\
    \ prime14 = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal prime17\
    \ = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\
    \tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal\
    \ prime24 = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal prime27\
    \ = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\
    \tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal\
    \ prime34 = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal prime37\
    \ = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\
    \tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal\
    \ prime44 = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal prime47\
    \ = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50 = true\n\
    \tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\tlocal\
    \ prime54 = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal prime57\
    \ = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60 = true\n\
    \tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = true\n\tlocal\
    \ prime64 = true\n\tlocal prime65 = true\n\tlocal prime66 = true\n", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\n\t\
    if interval1_start <= interval2_start and interval1_end >= interval2_end then\n\
    \t\treturn \"YES\"\n\telseif interval1_start <= interval2_end and interval1_end\
    \ >= interval2_start then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start\
    \ <= interval2_end and interval1_end >= interval2_start then\n\t\treturn \"NO\"\
    \n\telseif interval1_start <= interval2_start and interval1_end >= interval2_end\
    \ then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end then\n\t\treturn \"NO\"\
    \n\telseif interval1_start <= interval2_start and interval1_end >= interval2_end\
    \ then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end then\n\t\treturn \"NO\"\
    \n\telseif interval1_start <= interval2_start and interval1_end >= interval2_end\
    \ then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end then\n\t\treturn \"NO\"\
    \n\telseif interval1_start <= interval2_start and interval1_end >= interval2_end\
    \ then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start <= interval2_start\
    \ and interval1_end >= interval2_end then\n\t\treturn \"NO\"\n\telseif interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end then", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal intersection_length = interval1_end - interval2_start\n\
    \tlocal is_prime = true\n\tlocal is_intersect_prime = true\n\tif interval1_length\
    \ == interval2_length then\n\t\tif interval1_start <= interval2_start then\n\t\
    \t\tis_prime = false\n\t\telse\n\t\t\tis_intersect_prime = false\n\t\tend\n\t\
    else\n\t\tif interval1_start <= interval2_start then\n\t\t\tis_prime = false\n\
    \t\telse\n\t\t\tis_intersect_prime = false\n\t\tend\n\tend\n\tif is_intersect_prime\
    \ then\n\t\tif is_prime then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\
    \t\tend\n\telse\n\t\tif is_prime then\n\t\t\treturn 'NO'\n\t\telse\n\t\t\treturn\
    \ 'YES'\n\t\tend\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal\
    \ interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal\
    \ interval2_end = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tif interval1_length\
    \ == interval2_length then\n\t\treturn interval1_length\n\telseif interval1_length\
    \ > interval2_length then\n\t\tinterval1_start, interval1_end = interval2_start,\
    \ interval2_end\n\tend\n\tlocal intersection_start = interval1_start + interval2_length\n\
    \tlocal intersection_end = intersection_start + interval1_length - 1\n\tif interval1_start\
    \ <= intersection_end and intersection_end <= interval1_end then\n\t\treturn 'YES'\n\
    \telse\n\t\treturn 'NO'\n\tend\nend", "  local start = interval1[1]\n  local end\
    \ = interval1[2]\n  local start2 = interval2[1]\n  local end2 = interval2[2]\n\
    \  if start <= end2 then\n    if start <= end2 then\n      if start <= end2 then\n\
    \        return true\n      else\n        return false\n      end\n    else\n\
    \      if start <= end2 then\n        return true\n      else\n        return\
    \ false\n      end\n    end\n  else\n    if start <= end2 then\n      return true\n\
    \    else\n      return false\n    end\n  end\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal intersection_length = interval1_end - interval2_start\n\
    \tif interval1_start <= interval2_start and interval1_end >= interval2_end then\n\
    \t\treturn interval1_length == interval2_length\n\telseif interval1_start <= interval2_end\
    \ and interval1_end >= interval2_start then\n\t\treturn interval1_length == interval2_length\n\
    \telseif interval1_start <= interval2_start and interval1_end <= interval2_end\
    \ then\n\t\treturn interval1_length == interval2_length\n\telseif interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end then\n\t\treturn interval1_length\
    \ == interval2_length\n\telseif interval1_start >= interval2_start and interval1_end\
    \ <= interval2_end then\n\t\treturn interval1_length == interval2_length\n\telseif\
    \ interval1_start >= interval2_start and interval1_end >= interval2_end then\n\
    \t\treturn interval1_length == interval2_length\n\telse\n\t\treturn false\n\t\
    end\nend", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local intersectionStart = interval1Start <= interval2Start and interval1End >=\
    \ interval2End\n\tlocal intersectionEnd = interval1Start <= interval2End or interval1End\
    \ >= interval2Start\n\tlocal intersectionLength = interval1End - interval1Start\
    \ + interval2End - interval2Start\n\tlocal intersectionIsPrime = not (math.mod(intersectionLength,\
    \ 2) == 0)\n\tlocal intersectionIsPrimeString = tostring(intersectionIsPrime)\n\
    \tlocal intersectionIsPrimeNumber = tonumber(intersectionIsPrimeString)\n\treturn\
    \ intersectionIsPrimeNumber\nend", "\tlocal start = math.min(interval1[1], interval2[1])\n\
    \tlocal end = math.max(interval1[2], interval2[2])\n\tlocal length = end - start\n\
    \tlocal prime = true\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\t\
    local prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \tlocal prime_end = end\n\tlocal prime_length = 2\n\tlocal prime_start = start\n\
    \t", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]", "\t\
    local interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start + 1\n\tlocal interval2Length = interval2End - interval2Start\
    \ + 1\n\tlocal intersectionLength = interval1Start + interval2End - interval1End\
    \ + 1\n\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\tif interval1Length == interval2Length then\n\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\t\treturn \"\
    YES\"\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t\
    return \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\telse\n\t\t\
    return \"NO\"\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal interval1_start_index\
    \ = interval1_start + interval1_length\n\tlocal interval2_start_index = interval2_start\
    \ + interval2_length\n\tlocal intersection_length = interval1_start_index - interval2_start_index\n\
    \tif intersection_length == 0 then\n\t\treturn 'NO'\n\telseif intersection_length\
    \ == 1 then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal\
    \ start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start1 <= end2 and start2 <= end1 then\n\t\t\
    local length = end1 - start2\n\t\tif length == 2 then\n\t\t\tif start1 <= start2\
    \ then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\
    \t\telseif length == 1 then\n\t\t\tif start1 <= start2 then\n\t\t\t\treturn \"\
    NO\"\n\t\t\telse\n\t\t\t\treturn \"YES\"\n\t\t\tend\n\t\telse\n\t\t\tif start1\
    \ <= start2 then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn \"YES\"\n\t\
    \t\tend\n\t\tend\n\telse\n\t\tif start1 <= end2 then\n\t\t\treturn \"NO\"\n\t\t\
    else\n\t\t\treturn \"YES\"\n\t\tend\n\tend\nend", "\tlocal start1 = interval1[1]\n\
    \tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tlocal length_intersection\
    \ = length1 + length2\n\tif length_intersection == 0 then\n\t\treturn 'NO'\n\t\
    elseif length_intersection == 1 then\n\t\treturn 'YES'\n\telse\n\t\tlocal prime\
    \ = true\n\t\tlocal prime_number = 0\n\t\tlocal prime_number_count = 0\n\t\tlocal\
    \ prime_number_count_2 = 0\n\t\tlocal prime_number_count_3 = 0\n\t\tlocal prime_number_count_4\
    \ = 0\n\t\tlocal prime_number_count_5 = 0\n\t\tlocal prime_number_count_6 = 0\n\
    \t\tlocal prime_number_count_7 = 0\n\t\tlocal prime_number_count_8 = 0\n\t\tlocal\
    \ prime_number_count_9 = 0\n\t\tlocal prime_number_count_10 = 0\n\t\tlocal prime_number_count_11\
    \ = 0\n\t\tlocal prime_number_count_12 = 0\n\t\tlocal prime_number_count_13 =\
    \ 0\n\t\tlocal prime_number_count_14 = 0\n\t\tlocal prime_number_count_15 = 0\n\
    \t\tlocal prime_number_count_16 = 0\n\t\tlocal prime_number_count_17 = 0\n\t\t\
    local prime_number_count_18 = 0\n\t\tlocal prime_number_count_19 = 0\n\t\tlocal\
    \ prime_number_count_20 = 0\n\t\tlocal prime_number_count_21 = 0\n\t\tlocal prime_number_count_22\
    \ = 0\n\t\tlocal prime_number_count_23 = 0\n\t\tlocal prime_number_count_24 =\
    \ 0\n\t\tlocal prime_number_count_25 = 0\n\t\tlocal prime_number_count_26 = 0\n\
    \t\tlocal prime_number_count_27 = 0\n\t\tlocal prime_number_count_28 = 0\n\t\t\
    local prime_number_count_29 = 0\n\t\tlocal prime_number_count_30 = 0\n\t\tlocal\
    \ prime_number_count_31 = 0\n\t\tlocal prime_number_count_32 = 0\n\t\tlocal prime_number_count_33\
    \ = 0\n\t\tlocal prime_number_count_34 = 0\n\t\tlocal prime_number_count_35 =\
    \ 0\n\t\tlocal prime_number_count_36 = 0\n\t\tlocal prime_number_count_37 = 0\n\
    \t\tlocal prime_number_count_38 = 0\n\t\tlocal prime_number_count_39 = 0\n\t\t\
    local prime_number_count_40 = 0\n\t\tlocal prime_number_count_41 = 0\n\t\tlocal\
    \ prime_number_count_42 = 0\n\t\tlocal prime_number_count_43 = 0\n\t\tlocal prime_number_count_44\
    \ = 0\n\t\tlocal prime_number_count_45 = 0\n\t\tlocal prime_number_count_", "\t\
    local interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\t\
    if interval1Start <= interval2Start and interval1End >= interval2End then\n\t\t\
    if interval1Length == interval2Length then\n\t\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\
    \t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1Start <= interval2Start\
    \ and interval1End <= interval2End then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\
    \t\t\treturn \"NO\"\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\treturn \"NO\"\n\t\telse\n\t\t\t\
    return \"NO\"\n\t\tend\n\tend\nend", "\tlocal interval1Start, interval1End = interval1[1],\
    \ interval1[2]\n\tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\
    \tlocal intersectionStart, intersectionEnd = interval1Start, interval1End\n\t\
    local interval1Length, interval2Length = interval1End - interval1Start, interval2End\
    \ - interval2Start\n\tlocal primeNumberFound = false\n\tlocal primeNumberFound2\
    \ = false\n\tlocal primeNumberFound3 = false\n\tlocal primeNumberFound4 = false\n\
    \tlocal primeNumberFound5 = false\n\tlocal primeNumberFound6 = false\n\tlocal\
    \ primeNumberFound7 = false\n\tlocal primeNumberFound8 = false\n\tlocal primeNumberFound9\
    \ = false\n\tlocal primeNumberFound10 = false\n\tlocal primeNumberFound11 = false\n\
    \tlocal primeNumberFound12 = false\n\tlocal primeNumberFound13 = false\n\tlocal\
    \ primeNumberFound14 = false\n\tlocal primeNumberFound15 = false\n\tlocal primeNumberFound16\
    \ = false\n\tlocal primeNumberFound17 = false\n\tlocal primeNumberFound18 = false\n\
    \tlocal primeNumberFound19 = false\n\tlocal primeNumberFound20 = false\n\tlocal\
    \ primeNumberFound21 = false\n\tlocal primeNumberFound22 = false\n\tlocal primeNumberFound23\
    \ = false\n\tlocal primeNumberFound24 = false\n\tlocal primeNumberFound25 = false\n\
    \tlocal primeNumberFound26 = false\n\tlocal primeNumberFound27 = false\n\tlocal\
    \ primeNumberFound28 = false\n\tlocal primeNumberFound29 = false\n\tlocal primeNumberFound30\
    \ = false\n\tlocal primeNumberFound31 = false\n\tlocal primeNumberFound32 = false\n\
    \tlocal primeNumberFound33 = false\n\tlocal primeNumberFound34 = false\n\tlocal\
    \ primeNumberFound35 = false\n\tlocal primeNumberFound36 = false\n\tlocal primeNumberFound37\
    \ = false\n\tlocal primeNumberFound38 = false\n\tlocal primeNumberFound39 = false\n\
    \tlocal primeNumberFound40 = false\n\tlocal primeNumberFound41 = false\n\tlocal\
    \ primeNumberFound42 = false\n\tlocal primeNumberFound43 = false\n\tlocal primeNumberFound44\
    \ = false\n\tlocal primeNumberFound45 = false\n\tlocal primeNumberFound46 = false\n\
    \tlocal primeNumberFound47 = false\n\tlocal primeNumberFound48 = false\n\tlocal\
    \ primeNumberFound49 = false\n\tlocal primeNumberFound50 = false\n\tlocal primeNumberFound51\
    \ = false\n\tlocal primeNumberFound52 = false\n\tlocal primeNumberFound53 = false\n\
    \tlocal primeNumberFound54 = false\n\tlocal primeNumberFound", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End - interval2Start\n\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \tif interval1Length == interval2Length then\n\t\t\tif intersectionLength == 0\
    \ then\n\t\t\t\treturn 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\t\
    else\n\t\t\tif intersectionLength % interval1Length == 0 then\n\t\t\t\treturn\
    \ 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\tif intersectionLength\
    \ == 0 then\n\t\t\t\treturn 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\t\t\tend\n\
    \t\telse\n\t\t\tif intersectionLength % interval1Length == 0 then\n\t\t\t\treturn\
    \ 'NO'\n\t\t\telse\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\tend\n\tend\nend", "\t\
    local start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length = end - start\n\tlocal length2 = end2\
    \ - start2\n\tif length2 == 0 then\n\t\treturn \"NO\"\n\telseif length2 == 1 then\n\
    \t\tif start <= start2 then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\
    \n\t\tend\n\telse\n\t\tif start <= start2 then\n\t\t\tif length == length2 then\n\
    \t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\
    \t\t\tif length == length2 then\n\t\t\t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"YES\"\n\t\t\tend\n\t\tend\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\tlocal intersectionStart = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionEnd\
    \ = interval1Start <= interval2End and interval1End >= interval2Start\n\tlocal\
    \ intersectionLength = interval1End - interval1Start + interval2End - interval2Start\n\
    \tlocal intersectionIsPrime = not (math.mod(intersectionLength, 2) == 0)\n\tlocal\
    \ result\n\tif intersectionStart and intersectionEnd then\n\t\tresult = \"YES\"\
    \n\telseif intersectionStart then\n\t\tresult = \"NO\"\n\telseif intersectionEnd\
    \ then\n\t\tresult = \"NO\"\n\telse\n\t\tresult = \"NO\"\n\tend\n\treturn result\n\
    end", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local intersectionStart = interval1Start <= interval2Start and interval1End >=\
    \ interval2End\n\tlocal intersectionEnd = interval1Start <= interval2End and not\
    \ interval1End >= interval2Start\n\tlocal intersectionLength = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionIsPrime\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    return (intersectionStart and intersectionEnd or intersectionLength) and intersectionIsPrime\
    \ or \"NO\"\nend", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End\
    \ = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal interval2End\
    \ = interval2[2]\n\tlocal interval1Length = interval1End - interval1Start + 1\n\
    \tlocal interval2Length = interval2End - interval2Start + 1\n\tlocal intersectionStart\
    \ = interval1Start + interval2Start\n\tlocal intersectionEnd = interval1Start\
    \ + interval2Start + interval1Length\n\tlocal intersectionLength = interval1Length\
    \ + interval2Length\n\tlocal isPrime = true\n\tlocal primeNumber = 0\n\tlocal\
    \ primeNumberCount = 0\n\tlocal primeNumbersSet = {}\n\tlocal primeNumbersSetLength\
    \ = 0\n\tlocal primeNumbersSetLengthMax = 0\n\tlocal primeNumbersSetLengthMin\
    \ = 0\n\tlocal primeNumbersSetLengthSum = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n\tlocal primeNumbersSetLengthSumMin = 0\n\tlocal primeNumbersSetLengthSumMax\
    \ = 0\n", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2\
    \ = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end2 - start2\n\
    \tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\tlocal prime4\
    \ = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7 = true\n\
    \tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\tlocal\
    \ prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal prime14\
    \ = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal prime17 = true\n\
    \tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\tlocal\
    \ prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal prime24\
    \ = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal prime27 = true\n\
    \tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\tlocal\
    \ prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal prime34\
    \ = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal prime37 = true\n\
    \tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\tlocal\
    \ prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal prime44\
    \ = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal prime47 = true\n\
    \tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50 = true\n\tlocal\
    \ prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\tlocal prime54\
    \ = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal prime57 = true\n\
    \tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60 = true\n\tlocal\
    \ prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = true\n\tlocal prime64\
    \ = true\n\tlocal prime65 = true\n\tlocal prime66 = true\n\tlocal prime67 = true\n\
    \tlocal prime68 = true\n\tlocal prime69 = true\n\tlocal prime70 = true\n\tlocal\
    \ prime71 = true\n\tlocal prime72 = true\n\tlocal prime73 = true\n\tlocal prime74\
    \ = true\n\tlocal prime75 = true\n\tlocal prime76 = true\n\tlocal ", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal\
    \ interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tlocal is_prime = true\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\tis_prime = false\n\
    \t\telse\n\t\t\tis_prime = true\n\t\tend\n\telse\n\t\tif interval1_start <= interval2_start\
    \ then\n\t\t\tis_prime = false\n\t\telse\n\t\t\tis_prime = true\n\t\tend\n\tend\n\
    \tif is_prime then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\t\
    local start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2\
    \ = end2 - start2\n\tlocal length\n\tif length1 < length2 then\n\t\tlength = length1\n\
    \telse\n\t\tlength = length2\n\tend\n\tif length == 1 then\n\t\treturn \"NO\"\n\
    \tend\n\tif length == 2 then\n\t\treturn \"YES\"\n\tend\n\tif length < 2 then\n\
    \t\treturn \"NO\"\n\tend\n\tlocal prime = true\n\tlocal i\n\tfor i = 2, length\
    \ do\n\t\tif start1 + i == end1 or start2 + i == end2 then\n\t\t\tprime = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\tif prime then\n\t\treturn \"YES\"\n\tend\n\treturn\
    \ \"NO\"\nend", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End\n\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\tif interval1Length\
    \ == interval2Length then\n\t\t\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"\
    NO\"\n\t\t\tend\n\t\telse\n\t\t\tif interval1Start <= interval2Start then\n\t\t\
    \t\treturn \"NO\"\n\t\t\telse\n\t\t\t\treturn \"YES\"\n\t\t\tend\n\t\tend\n\t\
    else\n\t\tif interval1Start <= interval2Start then\n\t\t\treturn \"NO\"\n\t\t\
    else\n\t\t\treturn \"YES\"\n\t\tend\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]\n\tlocal intersection_start = interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end and interval1_start <=\
    \ interval2_end and interval1_end >= interval2_start\n\tlocal intersection_end\
    \ = interval1_start <= interval2_start and interval1_end >= interval2_end and\
    \ interval1_start <= interval2_start and interval1_end >= interval2_end\n\tlocal\
    \ intersection_length = interval1_end - interval1_start\n\tlocal intersection_is_prime\
    \ = not (interval1_start <= interval2_start and interval1_end >= interval2_end)\n\
    \treturn (intersection_start and intersection_end and intersection_length and\
    \ intersection_is_prime)\nend", "  local start1 = interval1[1]\n  local end1 =\
    \ interval1[2]\n  local start2 = interval2[1]\n  local end2 = interval2[2]\n \
    \ if start1 < end2 and start2 < end1 then\n    local length = end1 - start2\n\
    \    if length == 0 then\n      return 'NO'\n    end\n    if length == 1 then\n\
    \      return 'YES'\n    end\n    if length == 2 then\n      if start1 < start2\
    \ then\n        return 'YES'\n      else\n        return 'NO'\n      end\n   \
    \ end\n    if length == 3 then\n      if start1 < start2 then\n        return\
    \ 'NO'\n      else\n        return 'YES'\n      end\n    end\n    if length ==\
    \ 4 then\n      if start1 < start2 then\n        return 'NO'\n      else\n   \
    \     return 'YES'\n      end\n    end\n    if length == 5 then\n      if start1\
    \ < start2 then\n        return 'NO'\n      else\n        return 'YES'\n     \
    \ end\n    end\n    if length == 6 then\n      if start1 < start2 then\n     \
    \   return 'NO'\n      else\n        return 'YES'\n      end\n    end\n    if\
    \ length == 7 then\n      if start1 < start2 then\n        return 'NO'\n     \
    \ else\n        return 'YES'\n      end\n    end\n    if length == 8 then\n  \
    \    if start1 < start2 then\n        return 'NO'\n      else\n        return\
    \ 'YES'\n      end\n    end\n    if length == 9 then\n      if start1 < start2\
    \ then\n        return 'NO'\n      else\n        return 'YES'\n      end\n   \
    \ end\n    if length == 10 then\n      if start1 < start2 then\n        return\
    \ 'NO'\n      else\n        return 'YES'\n      end\n    end\n    if length ==\
    \ 11 then\n      if start1 < start2 then\n        return 'NO'\n      else\n  \
    \      return 'YES'\n      end\n    end\n    if length == 12 then\n      if start1\
    \ < start2 then\n        return 'NO'\n      else\n        return 'YES'\n     \
    \ end\n    end\n    if length == 13 then\n      if start1 < start2 then\n    \
    \    return 'NO'\n      else\n        return 'YES'\n      end\n    end\n    if\
    \ length == 14 then\n      if start1 < start2 then\n        return 'NO'\n    \
    \  else\n        return 'YES'\n      end\n    end\n    if length == 15 then\n\
    \      if start1 < start2 then\n        return 'NO'\n      else\n        return\
    \ 'YES'\n      end\n    end\n    if length == 16 then\n      if start1 < start2\
    \ then\n        return 'NO'\n      else\n        return 'YES'\n      end\n   \
    \ end\n    if length == 17 then\n      if start1 < start2 ", "\tlocal start =\
    \ interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn \"YES\"\
    \n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn \"YES\"\n\tend\n\
    \tif start <= start2 and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start\
    \ >= start2 and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2\
    \ and end >= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start <= end2 and end\
    \ >= start2 then\n\t\treturn \"YES\"\n\tend\n\tif start <= end2 and end <= end2\
    \ then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2 and end >= end2 then\n\
    \t\treturn \"YES\"\n\tend\n\tif start >= start2 and end <= end2 then\n\t\treturn\
    \ \"YES\"\n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn \"YES\"\
    \n\tend\n\tif start <= end2 and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\t\
    if start >= start2 and end >= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start\
    \ >= start2 and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start <= end2\
    \ and end >= start2 then\n\t\treturn \"YES\"\n\tend\n\tif start <= end2 and end\
    \ <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2 and end >= end2\
    \ then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2 and end <= end2 then\n\
    \t\treturn \"YES\"\n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn\
    \ \"YES\"\n\tend\n\tif start <= end2 and end <= end2 then\n\t\treturn \"YES\"\n\
    \tend\n\tif start >= start2 and end >= end2 then\n\t\treturn \"YES\"\n\tend\n\t\
    if start >= start2 and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start\
    \ <= end2 and end >= start2 then\n\t\treturn \"YES\"\n\tend\n\tif start <= end2\
    \ and end <= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2 and end\
    \ >= end2 then\n\t\treturn \"YES\"\n\tend\n\tif start >= start2 and end ", "\t\
    local start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\
    \tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length2 == 1 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif length == length2 then\n\t\tlocal prime = true\n\t\tlocal\
    \ prime2 = true\n\t\tfor i = 2, length2 do\n\t\t\tif length2 % i == 0 then\n\t\
    \t\t\tprime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tfor i = 2, length\
    \ do\n\t\t\tif length % i == 0 then\n\t\t\t\tprime2 = false\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\tif prime and prime2 then\n\t\t\treturn 'YES'\n\t\tend\n\t\
    end\n\treturn 'NO'\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end\
    \ - start\n\tlocal length2 = end2 - start2\n\tif length2 == 0 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif length2 > length then\n\t\tlength = length2\n\tend\n\tif length\
    \ < 2 then\n\t\treturn 'NO'\n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\
    \tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6\
    \ = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\
    \tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal\
    \ prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16\
    \ = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\
    \tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal\
    \ prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26\
    \ = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\
    \tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal\
    \ prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36\
    \ = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\
    \tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal\
    \ prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46\
    \ = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\
    \tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal\
    \ prime53 = true\n\tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal prime56\
    \ = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\
    \tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal\
    \ prime63 = true\n\tlocal prime64 = true\n\tlocal prime65 = true\n\tlocal prime66\
    \ = true\n\tlocal prime67 = true\n\tlocal prime68 = true\n\tlocal prime69", "\t\
    local interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start + 1\n\tlocal interval2Length = interval2End - interval2Start\
    \ + 1\n\tlocal intersectionLength = interval1Start + interval1Length - interval2Start\
    \ + interval2Length\n\tlocal isPrime = true\n\tlocal isPrime2 = true\n\tif interval1Start\
    \ > interval2Start then\n\t\tinterval1Start, interval1End = interval2Start, interval2End\n\
    \tend\n\tif interval1Start < interval2Start then\n\t\tisPrime = false\n\tend\n\
    \tif interval1Start < interval2Start then\n\t\tisPrime2 = false\n\tend\n\tif intersectionLength\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif isPrime and isPrime2 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif isPrime and not isPrime2 then\n\t\treturn 'NO'\n\tend\n\t\
    if isPrime2 and not isPrime then\n\t\treturn 'NO'\n\tend\n\tif isPrime2 then\n\
    \t\treturn 'YES'\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal\
    \ interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal\
    \ interval2_end = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal interval1_prime_length\
    \ = interval1_length / 2\n\tlocal interval2_prime_length = interval2_length /\
    \ 2\n\tlocal interval1_prime_start = interval1_start + interval1_prime_length\n\
    \tlocal interval2_prime_start = interval2_start + interval2_prime_length\n\tlocal\
    \ interval1_prime_end = interval1_start + interval1_prime_length\n\tlocal interval2_prime_end\
    \ = interval2_start + interval2_prime_length\n\tlocal interval1_prime_prime_length\
    \ = interval1_prime_length / 2\n\tlocal interval2_prime_prime_length = interval2_prime_length\
    \ / 2\n\tlocal interval1_prime_prime_start = interval1_prime_start + interval1_prime_prime_length\n\
    \tlocal interval2_prime_prime_start = interval2_prime_start + interval2_prime_prime_length\n\
    \tlocal interval1_prime_prime_end = interval1_prime_start + interval1_prime_prime_length\n\
    \tlocal interval2_prime_prime_end = interval2_prime_start + interval2_prime_prime_length\n\
    \tlocal interval1_prime_prime_prime_length = interval1_prime_prime_length / 2\n\
    \tlocal interval2_prime_prime_prime_length = interval2_prime_prime_length / 2\n\
    \tlocal interval1_prime_prime_prime_start = interval1_prime_prime_start + interval1_prime_prime_prime_length\n\
    \tlocal interval2_prime_prime_prime_start = interval2_prime_prime_start + interval2_prime_prime_prime_length\n\
    \tlocal interval1_prime_prime_prime_end = interval1_prime_prime_start + interval1_prime_prime_prime_length\n\
    \tlocal interval2_prime_prime_prime_end = interval2_prime_prime_start + interval2_prime_prime_prime_length\n\
    \tlocal interval1_prime_prime_prime_prime_length = interval1_prime_prime_prime_length\
    \ / 2\n\tlocal interval2_prime_prime_prime_prime_length = interval2_prime_prime_prime_length\
    \ / 2\n\tlocal interval1_prime_prime_prime_prime_start = interval1_prime_prime_prime_start\
    \ + interval1_prime_prime_prime_prime_length\n\tlocal ", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\
    \ + 1\n\tlocal interval2Length = interval2End - interval2Start + 1\n\tlocal intersectionLength\
    \ = interval1End + interval2Start - interval1Start + 1\n\tlocal primeNumberFound\
    \ = false\n\tlocal primeNumberFound2 = false\n\tlocal primeNumberFound3 = false\n\
    \tlocal primeNumberFound4 = false\n\tlocal primeNumberFound5 = false\n\tlocal\
    \ primeNumberFound6 = false\n\tlocal primeNumberFound7 = false\n\tlocal primeNumberFound8\
    \ = false\n\tlocal primeNumberFound9 = false\n\tlocal primeNumberFound10 = false\n\
    \tlocal primeNumberFound11 = false\n\tlocal primeNumberFound12 = false\n\tlocal\
    \ primeNumberFound13 = false\n\tlocal primeNumberFound14 = false\n\tlocal primeNumberFound15\
    \ = false\n\tlocal primeNumberFound16 = false\n\tlocal primeNumberFound17 = false\n\
    \tlocal primeNumberFound18 = false\n\tlocal primeNumberFound19 = false\n\tlocal\
    \ primeNumberFound20 = false\n\tlocal primeNumberFound21 = false\n\tlocal primeNumberFound22\
    \ = false\n\tlocal primeNumberFound23 = false\n\tlocal primeNumberFound24 = false\n\
    \tlocal primeNumberFound25 = false\n\tlocal primeNumberFound26 = false\n\tlocal\
    \ primeNumberFound27 = false\n\tlocal primeNumberFound28 = false\n\tlocal primeNumberFound29\
    \ = false\n\tlocal primeNumberFound30 = false\n\tlocal primeNumberFound31 = false\n\
    \tlocal primeNumberFound32 = false\n\tlocal primeNumberFound33 = false\n\tlocal\
    \ primeNumberFound34 = false\n\tlocal primeNumberFound35 = false\n\tlocal primeNumberFound36\
    \ = false\n\tlocal primeNumberFound37 = false\n\tlocal primeNumberFound38 = false\n\
    \tlocal primeNumberFound39 = false\n\tlocal primeNumberFound40 = false\n\tlocal\
    \ primeNumberFound41 = false\n\tlocal primeNumberFound42 = false\n\tlocal primeNumberFound43\
    \ = false\n\tlocal primeNumberFound44 = false\n\tlocal primeNumberFound45 = false\n\
    \tlocal primeNumberFound46 = false\n\tlocal primeNumberFound47 = false\n\tlocal\
    \ primeNumberFound48 = false\n\tlocal primeNumberFound49 = false\n\tlocal primeNumberFound50\
    \ = false\n\tlocal primeNumberFound51 = false\n\tlocal primeNumberFound52 = false\n\
    \tlocal primeNumberFound53 = false\n\tlocal primeNumberFound", "\tlocal start1\
    \ = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length = end1 - start1 + end2 - start2\n\t\
    if length == 0 then\n\t\treturn 'NO'\n\telseif length == 1 then\n\t\treturn 'YES'\n\
    \telseif length == 2 then\n\t\treturn 'YES'\n\telseif length == 3 then\n\t\treturn\
    \ 'YES'\n\telseif length == 4 then\n\t\treturn 'YES'\n\telseif length == 5 then\n\
    \t\treturn 'YES'\n\telseif length == 6 then\n\t\treturn 'YES'\n\telseif length\
    \ == 7 then\n\t\treturn 'YES'\n\telseif length == 8 then\n\t\treturn 'YES'\n\t\
    elseif length == 9 or length == 10 then\n\t\treturn 'YES'\n\telseif length ==\
    \ 11 or length == 12 or length == 13 or length == 14 or length == 15 or length\
    \ == 16 or length == 17 or length == 18 or length == 19 or length == 20 or length\
    \ == 21 or length == 22 or length == 23 or length == 24 or length == 25 or length\
    \ == 26 or length == 27 or length == 28 or length == 29 or length == 30 or length\
    \ == 31 or length == 32 or length == 33 or length == 34 or length == 35 or length\
    \ == 36 or length == 37 or length == 38 or length == 39 or length == 40 or length\
    \ == 41 or length == 42 or length == 43\n\tthen\n\t\treturn 'YES'\n\telseif length\
    \ == 44 or length == 45 or length == 46 or length == 47 or length == 48 or length\
    \ == 49 or length == 50 or length == 51 or length == 52 or length == 53 or length\
    \ == 54 or length == 55 or length == 56 or length == 57 or length == 58 or length\
    \ == 59 or length == 60 or length == 61 or length == 62 or length == 63 or length\
    \ == 64 or length == 65 or length == 66 or length == 67 or length == 68 or length\
    \ == 69 or length == 70 or length == 71 or length == 72 or length == 73 or length\
    \ == 74 or length == 75 or length == 76 or length == 77 or length == 78 or length\
    \ == 79 or length == 80 or length == 81 or length == 82 or length == 83 or length\
    \ == 84 or length == 85 or length == 86 or length == 87 or length == 88 or length\
    \ == 89 or length == 90 or length == 91 or length == 92 or length == 93 or length\
    \ == 94\n\tthen\n\t\treturn 'YES'\n\telseif length == 95 or length == 96 or length\
    \ == 97", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    local interval1Length = interval1End - interval1Start\n\tlocal interval2Length\
    \ = interval2End - interval2Start\n\tlocal interval1Intersection = interval1Start\
    \ + interval1Length\n\tlocal interval2Intersection = interval2Start + interval2Length\n\
    \tif interval1Start > interval1End or interval2Start > interval2End then\n\t\t\
    return 'NO'\n\telseif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\treturn 'YES'\n\telseif interval1Start <= interval2Start and interval1End\
    \ > interval2End then\n\t\treturn 'NO'\n\telseif interval1Start > interval1End\
    \ and interval2Start <= interval2End then\n\t\treturn 'NO'\n\telseif interval1Start\
    \ > interval1End and interval2Start > interval2End then\n\t\treturn 'YES'\n\t\
    elseif interval1Start <= interval2Start and interval1End <= interval2End then\n\
    \t\treturn 'NO'\n\telseif interval1Start <= interval2Start and interval1End >\
    \ interval2End then\n\t\treturn 'YES'\n\telseif interval1Start > interval1End\
    \ and interval2Start <= interval2End then\n\t\treturn 'YES'\n\telseif interval1Start\
    \ > interval1End and interval2Start > interval2End then\n\t\treturn 'NO'\n\telseif\
    \ interval1Start <= interval2Start and interval1End <= interval2End then\n\t\t\
    return 'YES'\n\telseif interval1Start <= interval2Start and interval1End > interval2End\
    \ then\n\t\treturn 'NO'\n\telseif interval1Start > interval1End and interval2Start\
    \ <= interval2End then\n\t\treturn 'NO'\n\telseif interval1Start > interval1End\
    \ and interval2Start > interval2End then\n\t\treturn 'YES'\n\telseif interval1Start\
    \ <= interval2Start and interval1End <= interval2End then\n\t\treturn 'YES'\n\t\
    elseif interval1Start <= interval2Start and interval1End > interval2End then\n\
    \t\treturn 'NO'\n\telseif interval1Start > interval1End and interval2Start <=\
    \ interval2End then\n\t\treturn 'NO'\n\telseif interval1Start > interval1End and\
    \ interval2Start > interval2End then\n\t\treturn '", "\tlocal interval1Start =\
    \ interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start =\
    \ interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal intersectionStart\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionEnd = interval1Start <= interval2Start and interval1End <= interval2End\n\
    \tlocal intersectionLength = interval1Start <= interval2Start and interval1End\
    \ >= interval2End\n\tlocal intersectionIsPrime = not (interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n\t\n\tif intersectionStart and intersectionEnd\
    \ then\n\t\tif intersectionLength == 1 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\
    \treturn 'NO'\n\t\tend\n\telse\n\t\tif intersectionIsPrime then\n\t\t\treturn\
    \ 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal interval1_prime = interval1_length == 1 and interval1_start\
    \ <= interval1_end\n\tlocal interval2_prime = interval2_length == 1 and interval2_start\
    \ <= interval2_end\n\tlocal interval1_prime_or_not = (interval1_prime or interval1_length\
    \ == 1) or (interval1_length == interval2_length)\n\tlocal interval2_prime_or_not\
    \ = (interval2_prime or interval2_length == 1) or (interval1_length == interval2_length)\n\
    \tlocal interval1_prime_or_not_or_equal = (interval1_prime or interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length)\n\tlocal interval2_prime_or_not_or_equal\
    \ = (interval2_prime or interval2_length == interval1_length) or (interval1_length\
    \ == interval2_length)\n\tlocal interval1_prime_or_not_or_equal_or_equal = (interval1_prime\
    \ or interval1_length == interval2_length) or (interval1_length == interval2_length)\
    \ or (interval1_length == interval2_length)\n\tlocal interval2_prime_or_not_or_equal_or_equal\
    \ = (interval2_prime or interval2_length == interval1_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length)\n\tlocal interval1_prime_or_not_or_equal_or_equal_or_equal\
    \ = (interval1_prime or interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length)\n\tlocal interval1_prime_or_not_or_equal_or_equal_or_equal_or_equal\
    \ = (interval1_prime or interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length)\n\tlocal interval1_prime_or_not_or_equal_or_equal_or_equal_or_equal_or_equal\
    \ = (interval1_prime or interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length) or (interval1_length\
    \ == interval2_length) or (interval1_length == interval2_length)\n\t", "\tlocal\
    \ interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ intersectionStart = interval1Start and interval2Start and interval1Start <=\
    \ interval2Start and interval1End >= interval2End\n\tlocal intersectionEnd = interval1End\
    \ and interval2Start and interval1End <= interval2Start and interval1Start >=\
    \ interval2End\n\tlocal intersectionLength = interval1Start and interval2Start\
    \ and interval1End >= interval2Start and interval1Start <= interval2End\n\tlocal\
    \ intersectionIsPrime = interval1Start and interval2Start and interval1End >=\
    \ interval2Start and interval1Start <= interval2End\n\treturn (intersectionStart\
    \ and intersectionEnd or intersectionLength) and intersectionIsPrime or \"NO\"\
    \nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2\
    \ = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or start2 > end2\
    \ then\n\t\treturn 'NO'\n\tend\n\tlocal length = end - start\n\tlocal length2\
    \ = end2 - start2\n\tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length2\
    \ == 1 then\n\t\treturn 'YES'\n\tend\n\tif length2 > length / 2 then\n\t\tlength\
    \ = length / 2\n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3\
    \ = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\
    \tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10\
    \ = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\
    \tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal\
    \ prime17 = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20\
    \ = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\
    \tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal\
    \ prime27 = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30\
    \ = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\
    \tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal\
    \ prime37 = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40\
    \ = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\
    \tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal\
    \ prime47 = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50\
    \ = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\
    \tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal\
    \ prime57 = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60\
    \ = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = true\n\
    \tlocal prime64 = true\n\tlocal prime65 = true", "\tlocal start1 = interval1[1]\n\
    \tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end1 - start1 + end2 - start2\n\tif length == 0 then\n\t\treturn\
    \ 'NO'\n\telseif length == 1 then\n\t\treturn 'YES'\n\telse\n\t\tlocal prime =\
    \ true\n\t\tlocal i = 1\n\t\twhile prime and i <= length do\n\t\t\tprime = start1\
    \ + i == end1 or start2 + i == end2\n\t\t\ti = i + 1\n\t\tend\n\t\tif prime then\n\
    \t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal\
    \ interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tlocal is_prime = true\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\tis_prime = false\n\
    \t\telse\n\t\t\tis_prime = true\n\t\tend\n\telse\n\t\tis_prime = false\n\tend\n\
    \tif intersection_length == 0 then\n\t\treturn 'NO'\n\telseif is_prime then\n\t\
    \treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal intersection_start\
    \ = interval1_start <= interval2_start and interval1_end >= interval2_end\n\t\
    local intersection_end = interval1_start <= interval2_end and interval1_end >=\
    \ interval2_start\n\tlocal intersection_length = interval1_end - interval1_start\
    \ + interval2_end - interval2_start\n\tif intersection_start and intersection_end\
    \ and intersection_length == interval1_end - interval1_start + interval2_end -\
    \ interval2_start then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\n\
    end", "\tlocal start1, end1 = interval1[1], interval1[2]\n\tlocal start2, end2\
    \ = interval2[1], interval2[2]\n\tlocal startInter, startIntr = start1, start2\n\
    \tlocal endInter, endIntr = end1, end2\n\tlocal lengthInter, lengthIntr = endInter,\
    \ endIntr\n\tlocal prime, primeIntr = true, true\n\tlocal primeLength, primeLengthIntr\
    \ = 1, 1\n\tlocal primeLength2, primeLength2Intr = 1, 1\n\tlocal primeLength3,\
    \ primeLength3Intr = 1, 1\n\tlocal primeLength4, primeLength4Intr = 1, 1\n\tlocal\
    \ primeLength5, primeLength5Intr = 1, 1\n\tlocal primeLength6, primeLength6Intr\
    \ = 1, 1\n\tlocal primeLength7, primeLength7Intr = 1, 1\n\tlocal primeLength8,\
    \ primeLength8Intr = 1, 1\n\tlocal primeLength9, primeLength9Intr = 1, 1\n\tlocal\
    \ primeLength10, primeLength10Intr = 1, 1\n\tlocal primeLength11, primeLength11Intr\
    \ = 1, 1\n\tlocal primeLength12, primeLength12Intr = 1, 1\n\tlocal primeLength13,\
    \ primeLength13Intr = 1, 1\n\tlocal primeLength14, primeLength14Intr = 1, 1\n\t\
    local primeLength15, primeLength15Intr = 1, 1\n\tlocal primeLength16, primeLength16Intr\
    \ = 1, 1\n\tlocal primeLength17, primeLength17Intr = 1, 1\n\tlocal primeLength18,\
    \ primeLength18Intr = 1, 1\n\tlocal primeLength19, primeLength19Intr = 1, 1\n\t\
    local primeLength20, primeLength20Intr = 1, 1\n\tlocal primeLength21, primeLength21Intr\
    \ = 1, 1\n\tlocal primeLength22, primeLength22Intr = 1, 1\n\tlocal primeLength23,\
    \ primeLength23Intr = 1, 1\n\tlocal primeLength24, primeLength24Intr = 1, 1\n\t\
    local primeLength25, primeLength25Intr = 1, 1\n\tlocal primeLength26, primeLength26Intr\
    \ = 1, 1\n\tlocal primeLength27, primeLength27Intr = 1, 1\n\tlocal primeLength28,\
    \ primeLength28Intr = 1, 1\n\tlocal primeLength29, primeLength29Intr = 1, 1\n\t\
    local primeLength30, primeLength30Intr = 1, 1\n\tlocal primeLength31, primeLength31Intr\
    \ = 1, 1\n", "  local start1 = interval1[1]\n  local end1 = interval1[2]\n  local\
    \ start2 = interval2[1]\n  local end2 = interval2[2]\n  local length = end1 -\
    \ start1 + end2 - start2\n  if length == 0 then\n    return \"NO\"\n  elseif length\
    \ == 1 then\n    return \"YES\"\n  else\n    local prime = true\n    for i = 2,\
    \ length do\n      if start1 + i == end1 or start2 + i == end2 then\n        prime\
    \ = false\n        break\n      end\n    end\n    if prime then\n      return\
    \ \"YES\"\n    else\n      return \"NO\"\n    end\n  end\nend", "\tlocal interval1_start\
    \ = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal interval2_start\
    \ = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal interval1_length\
    \ = interval1_end - interval1_start\n\tlocal interval2_length = interval2_end\
    \ - interval2_start\n\tlocal intersection_length = interval1_end - interval2_start\n\
    \tif interval1_length == interval2_length then\n\t\tif interval1_start <= interval2_start\
    \ then\n\t\t\treturn interval1_start <= intersection_length\n\t\telse\n\t\t\t\
    return interval2_start <= intersection_length\n\t\tend\n\telse\n\t\treturn interval1_length\
    \ == intersection_length\n\tend\nend", "  local start = interval1[1]\n  local\
    \ end = interval1[2]\n  local start2 = interval2[1]\n  local end2 = interval2[2]\n\
    \  local length = end - start\n  local length2 = end2 - start2\n  if length2 ==\
    \ 0 then\n    return length\n  end\n  if length2 == 1 then\n    return length\
    \ >= start and length <= end\n  end\n  if length2 > 1 then\n    return length\
    \ >= start and length <= end\n  end\n  return length >= start and length <= end2\n\
    end", "  local start1, end1 = interval1[1], interval1[2]\n  local start2, end2\
    \ = interval2[1], interval2[2]\n  local length1 = end1 - start1\n  local length2\
    \ = end2 - start2\n  local length\n  if length1 > length2 then\n    length = length1\n\
    \  else\n    length = length2\n  end\n  if length == 1 then\n    return \"NO\"\
    \n  end\n  if length == 2 then\n    return \"YES\"\n  end\n  if length == length1\
    \ then\n    if start1 <= start2 then\n      return \"YES\"\n    else\n      return\
    \ \"NO\"\n    end\n  end\n  if length == length2 then\n    if start2 <= start1\
    \ then\n      return \"YES\"\n    else\n      return \"NO\"\n    end\n  end\n\
    \  if start1 <= start2 then\n    if start2 <= start1 + length1 then\n      return\
    \ \"YES\"\n    else\n      return \"NO\"\n    end\n  else\n    if start2 <= start1\
    \ + length1 then\n      return \"YES\"\n    else\n      return \"NO\"\n    end\n\
    \  end\nend", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal interval1Intersection = interval1Start + interval1Length\n\tlocal interval2Intersection\
    \ = interval2Start + interval2Length\n\tif interval1Intersection < interval2Intersection\
    \ then\n\t\treturn \"NO\"\n\telseif interval1Intersection > interval2Intersection\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"YES\"\n\tend\nend", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\t\n\t\
    if interval1_start > interval2_start then\n\t\tinterval1_start, interval2_start\
    \ = interval2_start, interval1_start\n\tend\n\tif interval1_end < interval2_end\
    \ then\n\t\tinterval1_end, interval2_end = interval2_end, interval1_end\n\tend\n\
    \t\n\tif interval1_start <= interval2_end and interval1_end >= interval2_start\
    \ then\n\t\treturn interval1_end - interval2_start\n\telse\n\t\treturn 0\n\tend\n\
    end", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\
    \n\tif interval1Start <= interval2Start and interval1End >= interval2End then\n\
    \t\treturn \"YES\"\n\telseif interval1Start <= interval2Start and interval1End\
    \ < interval2End then\n\t\treturn \"NO\"\n\telseif interval1Start > interval2Start\
    \ and interval1End <= interval2End then\n\t\treturn \"NO\"\n\telseif interval1Start\
    \ > interval2Start and interval1End > interval2End then\n\t\treturn \"NO\"\n\t\
    else\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\
    \tlocal interval2Length = interval2End - interval2Start\n\tif interval1Start <=\
    \ interval2Start and interval1End >= interval2End then\n\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2End then\n\t\t\t\t\tlocal prime\
    \ = true\n\t\t\t\t\tfor i = interval1Start + 1 , interval1End do\n\t\t\t\t\t\t\
    if i ~= interval2Start and i ~= interval2End then\n\t\t\t\t\t\t\tprime = false\n\
    \t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif prime then\n\
    \t\t\t\t\t\treturn \"YES\"\n\t\t\t\t\telse\n\t\t\t\t\t\treturn \"NO\"\n\t\t\t\t\
    \tend\n\t\t\t\telse\n\t\t\t\t\treturn \"NO\"\n\t\t\t\tend\n\t\t\telse\n\t\t\t\t\
    return \"NO\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\telse\n\t\t\
    return \"NO\"\n\tend\nend", "  local start = interval1[1]\n  local end = interval1[2]\n\
    \  local start2 = interval2[1]\n  local end2 = interval2[2]\n  if start > end\
    \ or start2 > end2 then\n    return \"NO\"\n  end\n  if start <= start2 and end\
    \ >= end2 then\n    return \"YES\"\n  end\n  if start <= end2 and end >= start2\
    \ then\n    return \"NO\"\n  end\n  if start <= start2 and end <= end2 then\n\
    \    return \"NO\"\n  end\n  if start >= start2 and end <= end2 then\n    return\
    \ \"NO\"\n  end\n  if start >= start2 and end >= end2 then\n    return \"YES\"\
    \n  end\n  if start <= end2 and end >= start2 then\n    return \"YES\"\n  end\n\
    \  if start <= end2 and end <= end2 then\n    return \"YES\"\n  end\n  if start\
    \ >= start2 and end >= end2 then\n    return \"YES\"\n  end\n  if start >= start2\
    \ and end <= end2 then\n    return \"YES\"\n  end\n  if start <= end2 and end\
    \ >= start2 then\n    return \"YES\"\n  end\n  if start <= end2 and end <= end2\
    \ then\n    return \"YES\"\n  end\n  if start >= start2 and end >= end2 then\n\
    \    return \"YES\"\n  end\n  if start >= start2 and end <= end2 then\n    return\
    \ \"YES\"\n  end\n  if start <= end2 and end >= start2 then\n    return \"YES\"\
    \n  end\n  if start <= end2 and end <= end2 then\n    return \"YES\"\n  end\n\
    \  if start >= start2 and end >= end2 then\n    return \"YES\"\n  end\n  if start\
    \ >= start2 and end <= end2 then\n    return \"YES\"\n  end\n  if start <= end2\
    \ and end >= start2 then\n    return \"YES\"\n  end\n  if start <= end2 and end\
    \ <= end2 then\n    return \"YES\"\n  end\n  if start >= start2 and end >= end2\
    \ then\n    return \"YES\"\n  end\n  if start >= start2 and end <= end2 then\n\
    \    return \"YES\"\n  end\n  if start <= end2 and end >= start2 then\n    return\
    \ \"YES\"\n  end\n  if start <= end2 and end <= end2 then\n    return \"YES\"\n\
    \  end\n  if start >= start2 and end >= end2 then\n    return \"YES\"\n  end\n\
    \  if start >= start2 and end <= end2 then\n    return \"YES\"\n  end\n  if start\
    \ <= end2 and end >= start2 then\n    return \"YES\"\n  end\n  if start <= end2\
    \ and end <= end2 then\n    return \"YES\"\n  end\n  if start >= start2 and ",
  "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\t\
    local interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ intersectionStart = interval1Start <= interval2Start and interval2Start <= interval1End\n\
    \tlocal intersectionEnd = interval1Start <= interval2End and interval2End <= interval1End\n\
    \tlocal intersectionLength = interval1End - interval1Start + interval2End - interval2Start\n\
    \tlocal intersectionIsPrime = not (math.mod(intersectionLength, 2) == 0)\n\tif\
    \ intersectionStart and intersectionEnd then\n\t\treturn \"YES\"\n\telseif intersectionStart\
    \ then\n\t\treturn \"NO\"\n\telseif intersectionEnd then\n\t\treturn \"NO\"\n\t\
    elseif intersectionIsPrime then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\
    \n\tend\nend", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval1Length - interval2Start\
    \ + interval2Length\n\tif intersectionLength == 0 then\n\t\treturn 'NO'\n\telseif\
    \ interval1Start <= interval2Start and interval1End >= interval2End then\n\t\t\
    return 'YES'\n\telseif interval1Start <= interval2Start and interval1End < interval2End\
    \ then\n\t\treturn 'NO'\n\telseif interval1Start > interval2Start and interval1End\
    \ >= interval2End then\n\t\treturn 'NO'\n\telseif interval1Start > interval2Start\
    \ and interval1End < interval2End then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\
    \tend\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal\
    \ interval1Length = end - start\n\tlocal interval2Length = interval2[1] - interval2[0]\n\
    \tlocal intersectionLength = interval1Length + interval2Length\n\tif intersectionLength\
    \ == 0 then\n\t\treturn 'NO'\n\tend\n\tif interval1Length > 0 and interval2Length\
    \ > 0 and intersectionLength % interval1Length == 0 and intersectionLength % interval2Length\
    \ == 0 then\n\t\treturn 'YES'\n\tend\n\treturn 'NO'\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\t\n\tif interval1Start <= interval2Start and\
    \ interval1End >= interval2End then\n\t\treturn interval1Start <= interval2Start\
    \ and interval1End >= interval2End\n\telseif interval1Start <= interval2Start\
    \ and interval1End < interval2End then\n\t\treturn interval1Start <= interval2Start\
    \ and interval1End < interval2End\n\telseif interval1Start > interval2Start and\
    \ interval1End <= interval2End then\n\t\treturn interval1Start > interval2Start\
    \ and interval1End <= interval2End\n\telseif interval1Start > interval2Start and\
    \ interval1End > interval2End then\n\t\treturn interval1Start > interval2Start\
    \ and interval1End > interval2End\n\tend\nend", "\tlocal interval1Start, interval1End\
    \ = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End = interval2[1],\
    \ interval2[2]\n\tif interval1Start <= interval2Start and interval1End >= interval2End\
    \ then\n\t\treturn interval1Start <= interval2Start and interval1End >= interval2End\n\
    \telse\n\t\treturn false\n\tend\nend", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]\n\tlocal intersection_length = interval1_end\
    \ - interval1_start\n\tlocal interval1_length = interval2_end - interval2_start\n\
    \tif interval1_start <= interval1_end and interval2_start <= interval2_end then\n\
    \t\tif interval1_start <= interval2_start and interval1_end <= interval2_end then\n\
    \t\t\tif interval1_start <= interval2_end then\n\t\t\t\treturn interval1_start,\
    \ interval1_end\n\t\t\telse\n\t\t\t\treturn interval2_start, interval2_end\n\t\
    \t\tend\n\t\telse\n\t\t\tif interval1_start <= interval2_end then\n\t\t\t\treturn\
    \ interval1_start, interval1_end\n\t\t\telse\n\t\t\t\treturn interval2_start,\
    \ interval2_end\n\t\t\tend\n\t\tend\n\telse\n\t\tif interval1_start <= interval1_end\
    \ then\n\t\t\treturn interval1_start, interval1_end\n\t\telse\n\t\t\treturn interval2_start,\
    \ interval2_end\n\t\tend\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\tlocal intersectionStart = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionEnd\
    \ = interval1Start <= interval2End and interval1End >= interval2Start\n\tlocal\
    \ intersectionLength = interval1End - interval1Start + interval2End - interval2Start\n\
    \tlocal intersectionIsPrime = not (math.fmod(intersectionLength, 2) == 0)\n\t\
    if intersectionStart and intersectionEnd then\n\t\treturn \"YES\"\n\telseif intersectionStart\
    \ and not intersectionEnd then\n\t\treturn \"NO\"\n\telseif not intersectionStart\
    \ and intersectionEnd then\n\t\treturn \"NO\"\n\telseif not intersectionStart\
    \ and not intersectionEnd then\n\t\treturn \"NO\"\n\telseif intersectionIsPrime\
    \ then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start1,\
    \ end1 = interval1[1], interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\
    \tlocal length1, length2 = end1 - start1, end2 - start2\n\tlocal prime = true\n\
    \tlocal prime_length = 2\n\tlocal prime_start = 1\n\tlocal prime_end = prime_start\
    \ + prime_length\n\tlocal prime_prime = true\n\tlocal prime_prime_length = 2\n\
    \tlocal prime_prime_start = 1\n\tlocal prime_prime_end = prime_prime_start + prime_prime_length\n\
    \tlocal prime_prime_prime = true\n\tlocal prime_prime_prime_length = 2\n\tlocal\
    \ prime_prime_prime_start = 1\n\tlocal prime_prime_prime_end = prime_prime_prime_start\
    \ + prime_prime_prime_length\n\tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start\
    \ = 1\n\tlocal prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start = 1\n\t\
    local prime_prime_prime_end = prime_prime_prime_start + prime_prime_prime_length\n\
    \tlocal prime_prime_prime_length = 2\n\tlocal prime_prime_prime_start", "\tlocal\
    \ start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\tend\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\
    \tif length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\t\t\
    return \"YES\"\n\tend\n\tif length == length2 then\n\t\treturn \"YES\"\n\tend\n\
    \tif length < length2 then\n\t\tlocal temp = length\n\t\tlength = length2\n\t\t\
    length2 = temp\n\tend\n\tlocal count = 0\n\tlocal count2 = 0\n\tlocal i = 1\n\t\
    while i <= length2 do\n\t\tif length2 == 1 then\n\t\t\tcount = count + 1\n\t\t\
    else\n\t\t\tcount = count + 1\n\t\t\tcount2 = count2 + 1\n\t\tend\n\t\ti = i +\
    \ 1\n\tend\n\tif count == length2 then\n\t\treturn \"YES\"\n\tend\n\tif count\
    \ > length2 then\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start1 = interval1[1]\n\
    \tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1\
    \ == 0 or length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length1 == length2 then\n\
    \t\tif start1 <= start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\
    \t\tend\n\tend\n\tif start1 <= start2 then\n\t\tif end1 <= end2 then\n\t\t\tlocal\
    \ length = end1 - start1\n\t\t\tif length == 1 then\n\t\t\t\treturn 'YES'\n\t\t\
    \telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\
    \telse\n\t\tif end1 <= end2 then\n\t\t\tlocal length = end2 - start2\n\t\t\tif\
    \ length == 1 then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\
    \tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal start1, end1\
    \ = interval1[1], interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\
    \tlocal start1End = start1 + end1\n\tlocal start2End = start2 + end2\n\tlocal\
    \ start1End2 = start1End * start2End\n\tlocal start2End2 = start2End * start1End\n\
    \tlocal start1End2End = start1End2 * end2\n\tlocal start2End2End = start2End2\
    \ * end1\n\tlocal start1End2End2 = start1End2End * end2\n\tlocal start2End2End2\
    \ = start2End2End * end1\n\tlocal start1End2End2End = start1End2End2 * end2\n\t\
    local start2End2End2End = start2End2End2 * end1\n\tlocal start1End2End2End2 =\
    \ start1End2End2End * end2\n\tlocal start2End2End2End2 = start2End2End2End * end1\n\
    \tlocal start1End2End2End2End = start1End2End2End2 * end2\n\tlocal start2End2End2End2End\
    \ = start2End2End2End2 * end1\n\tlocal start1End2End2End2End2 = start1End2End2End2End2\
    \ * end2\n\tlocal start2End2End2End2End2 = start2End2End2End2End2 * end1\n\tlocal\
    \ start1End2End2End2End2End = start1End2End2End2End2 * end2\n\tlocal start2End2End2End2End2End\
    \ = start2End2End2End2End2 * end1\n\tlocal start1End2End2End2End2End2 = start1End2End2End2End2End2\
    \ * end2\n\tlocal start2End2End2End2End2End2 = start2End2End2End2End2End2 * end1\n\
    \tlocal start1End2End2End2End2End2End = start1End2End2End2End2End2End2 * end2\n\
    \tlocal start2End2End2End2End2End2End = start2End2End2End2End2End2End2 * end1\n\
    \tlocal start1End2End2End2End2End2End2 = start1End2End2End2End2End2End2", "\t\
    local interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End\
    \ - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\t\
    local intersectionLength = interval1Start + interval2End - interval1End\n\tlocal\
    \ isPrime = true\n\tlocal primeLength = 1\n\tlocal primeLengthCheck = primeLength\n\
    \tlocal primeLengthCheck2 = primeLength\n\tlocal primeLengthCheck3 = primeLength\n\
    \tlocal primeLengthCheck4 = primeLength\n\tlocal primeLengthCheck5 = primeLength\n\
    \tlocal primeLengthCheck6 = primeLength\n\tlocal primeLengthCheck7 = primeLength\n\
    \tlocal primeLengthCheck8 = primeLength\n\tlocal primeLengthCheck9 = primeLength\n\
    \tlocal primeLengthCheck10 = primeLength\n\tlocal primeLengthCheck11 = primeLength\n\
    \tlocal primeLengthCheck12 = primeLength\n\tlocal primeLengthCheck13 = primeLength\n\
    \tlocal primeLengthCheck14 = primeLength\n\tlocal primeLengthCheck15 = primeLength\n\
    \tlocal primeLengthCheck16 = primeLength\n\tlocal primeLengthCheck17 = primeLength\n\
    \tlocal primeLengthCheck18 = primeLength\n\tlocal primeLengthCheck19 = primeLength\n\
    \tlocal primeLengthCheck20 = primeLength\n\tlocal primeLengthCheck21 = primeLength\n\
    \tlocal primeLengthCheck22 = primeLength\n\tlocal primeLengthCheck23 = primeLength\n\
    \tlocal primeLengthCheck24 = primeLength\n\tlocal primeLengthCheck25 = primeLength\n\
    \tlocal primeLengthCheck26 = primeLength\n\tlocal primeLengthCheck27 = primeLength\n\
    \tlocal primeLengthCheck28 = primeLength\n\tlocal primeLengthCheck29 = primeLength\n\
    \tlocal primeLengthCheck30 = primeLength\n\tlocal primeLengthCheck31 = primeLength\n\
    \tlocal primeLengthCheck32 = primeLength\n\tlocal primeLengthCheck33 = primeLength\n\
    \tlocal primeLengthCheck34 = primeLength\n\tlocal primeLengthCheck35 = primeLength\n\
    \tlocal primeLengthCheck36 = primeLength\n\tlocal primeLengthCheck37 = primeLength\n\
    \tlocal primeLengthCheck38 = primeLength\n\tlocal primeLengthCheck39 = primeLength\n\
    \tlocal primeLengthCheck40 = primeLength\n\tlocal primeLengthCheck41 = primeLength\n\
    \tlocal primeLengthCheck42 = primeLength\n\tlocal primeLengthCheck43 = primeLength\n\
    \tlocal primeLengthCheck44 = primeLength", "\tlocal start = interval1[1]\n\tlocal\
    \ end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length = end - start\n\tlocal length2 = end2 - start2\n\tif length2 ==\
    \ 0 then\n\t\treturn \"NO\"\n\tend\n\tif length == 0 then\n\t\treturn \"NO\"\n\
    \tend\n\tif length2 == 1 then\n\t\treturn \"YES\"\n\tend\n\tif length2 > 1 then\n\
    \t\tlocal prime = true\n\t\tlocal prime2 = true\n\t\tlocal prime3 = true\n\t\t\
    local prime4 = true\n\t\tlocal prime5 = true\n\t\tlocal prime6 = true\n\t\tlocal\
    \ prime7 = true\n\t\tlocal prime8 = true\n\t\tlocal prime9 = true\n\t\tlocal prime10\
    \ = true\n\t\tlocal prime11 = true\n\t\tlocal prime12 = true\n\t\tlocal prime13\
    \ = true\n\t\tlocal prime14 = true\n\t\tlocal prime15 = true\n\t\tlocal prime16\
    \ = true\n\t\tlocal prime17 = true\n\t\tlocal prime18 = true\n\t\tlocal prime19\
    \ = true\n\t\tlocal prime20 = true\n\t\tlocal prime21 = true\n\t\tlocal prime22\
    \ = true\n\t\tlocal prime23 = true\n\t\tlocal prime24 = true\n\t\tlocal prime25\
    \ = true\n\t\tlocal prime26 = true\n\t\tlocal prime27 = true\n\t\tlocal prime28\
    \ = true\n\t\tlocal prime29 = true\n\t\tlocal prime30 = true\n\t\tlocal prime31\
    \ = true\n\t\tlocal prime32 = true\n\t\tlocal prime33 = true\n\t\tlocal prime34\
    \ = true\n\t\tlocal prime35 = true\n\t\tlocal prime36 = true\n\t\tlocal prime37\
    \ = true\n\t\tlocal prime38 = true\n\t\tlocal prime39 = true\n\t\tlocal prime40\
    \ = true\n\t\tlocal prime41 = true\n\t\tlocal prime42 = true\n\t\tlocal prime43\
    \ = true\n\t\tlocal prime44 = true\n\t\tlocal prime45 = true\n\t\tlocal prime46\
    \ = true\n\t\tlocal prime47 = true\n\t\tlocal prime48 = true\n\t\tlocal prime49\
    \ = true\n\t\tlocal prime50 = true\n\t\tlocal prime51 = true\n\t\tlocal prime52\
    \ = true\n\t\tlocal prime53 = true\n\t\tlocal prime54 = true\n\t\tlocal prime55\
    \ = true\n\t\tlocal prime56 = true\n\t\tlocal prime57 = true\n\t\tlocal prime58\
    \ = true\n\t\tlocal prime59 = true\n\t\tlocal prime60 = true\n\t\tlocal prime61\
    \ = true\n\t\tlocal prime62 = true\n\t\tlocal prime63 = true\n\t\tlocal prime64\
    \ = true\n\t\tlocal prime65 = true\n\t\tlocal prime66 = true\n\t\tlocal prime67\
    \ = true\n\t\tlocal prime68", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or\
    \ start2 > end2 then\n\t\treturn \"NO\"\n\tend\n\tlocal length = end - start\n\
    \tlocal length2 = end2 - start2\n\tif length2 == 0 then\n\t\treturn \"NO\"\n\t\
    end\n\tif length == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\
    \t\treturn \"YES\"\n\tend\n\tif length2 % length == 0 then\n\t\treturn \"YES\"\
    \n\tend\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\t\
    local prime4 = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7\
    \ = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\
    \tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal\
    \ prime14 = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal prime17\
    \ = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\
    \tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal\
    \ prime24 = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal prime27\
    \ = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\
    \tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal\
    \ prime34 = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal prime37\
    \ = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\
    \tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal\
    \ prime44 = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal prime47\
    \ = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50 = true\n\
    \tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\tlocal\
    \ prime54 = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal prime57\
    \ = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60 = true\n\
    \tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = ", "\tlocal\
    \ start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length1 = end - start\n\tlocal length2 =\
    \ end2 - start2\n\tif length1 == 0 or length2 == 0 then\n\t\treturn 'NO'\n\tend\n\
    \tif length1 == length2 then\n\t\tif start <= start2 then\n\t\t\treturn 'YES'\n\
    \t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tif length1 < length2 then\n\t\t\
    local temp = start\n\t\tstart = start2\n\t\tstart2 = temp\n\t\ttemp = end\n\t\t\
    end = end2\n\t\tend2 = temp\n\tend\n\tlocal prime = nil\n\tlocal prime2 = nil\n\
    \tlocal prime3 = nil\n\tlocal prime4 = nil\n\tlocal prime5 = nil\n\tlocal prime6\
    \ = nil\n\tlocal prime7 = nil\n\tlocal prime8 = nil\n\tlocal prime9 = nil\n\t\
    local prime10 = nil\n\tlocal prime11 = nil\n\tlocal prime12 = nil\n\tlocal prime13\
    \ = nil\n\tlocal prime14 = nil\n\tlocal prime15 = nil\n\tlocal prime16 = nil\n\
    \tlocal prime17 = nil\n\tlocal prime18 = nil\n\tlocal prime19 = nil\n\tlocal prime20\
    \ = nil\n\tlocal prime21 = nil\n\tlocal prime22 = nil\n\tlocal prime23 = nil\n\
    \tlocal prime24 = nil\n\tlocal prime25 = nil\n\tlocal prime26 = nil\n\tlocal prime27\
    \ = nil\n\tlocal prime28 = nil\n\tlocal prime29 = nil\n\tlocal prime30 = nil\n\
    \tlocal prime31 = nil\n\tlocal prime32 = nil\n\tlocal prime33 = nil\n\tlocal prime34\
    \ = nil\n\tlocal prime35 = nil\n\tlocal prime36 = nil\n\tlocal prime37 = nil\n\
    \tlocal prime38 = nil\n\tlocal prime39 = nil\n\tlocal prime40 = nil\n\tlocal prime41\
    \ = nil\n\tlocal prime42 = nil\n\tlocal prime43 = nil\n\tlocal prime44 = nil\n\
    \tlocal prime45 = nil\n\tlocal prime46 = nil\n\tlocal prime47 = nil\n\tlocal prime48\
    \ = nil\n\tlocal prime49 = nil\n\tlocal prime50 = nil\n\tlocal prime51 = nil\n\
    \tlocal prime52 = nil\n\tlocal prime53 = nil\n\tlocal prime54 = nil\n\tlocal prime55\
    \ = nil\n\tlocal prime5", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End\
    \ = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal interval2End\
    \ = interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\t\
    local interval2Length = interval2End - interval2Start\n\tlocal interval1IntersectionStart\
    \ = interval1Start + interval1Length\n\tlocal interval1IntersectionEnd = interval1Start\
    \ + interval1Length\n\tlocal interval2IntersectionStart = interval2Start + interval2Length\n\
    \tlocal interval2IntersectionEnd = interval2Start + interval2Length\n\tif interval1Start\
    \ <= interval2Start and interval1End >= interval2Start then\n\t\tif interval1Start\
    \ <= interval2IntersectionStart and interval1End >= interval2IntersectionStart\
    \ then\n\t\t\tif interval1IntersectionStart <= interval2Start and interval1IntersectionEnd\
    \ >= interval2Start then\n\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart\
    \ and interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\
    if interval1IntersectionStart <= interval2IntersectionStart and interval1IntersectionEnd\
    \ >= interval2IntersectionStart then\n\t\t\t\t\t\tif interval1IntersectionStart\
    \ <= interval2IntersectionStart and interval1IntersectionEnd >= interval2IntersectionStart\
    \ then\n\t\t\t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart\
    \ and interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\t\
    \t\tif interval1IntersectionStart <= interval2IntersectionStart and interval1IntersectionEnd\
    \ >= interval2IntersectionStart then\n\t\t\t\t\t\t\t\t\tif interval1IntersectionStart\
    \ <= interval2IntersectionStart and interval1IntersectionEnd >= interval2IntersectionStart\
    \ then\n\t\t\t\t\t\t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart\
    \ and interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\t\
    \t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart and interval1IntersectionEnd\
    \ >= interval2IntersectionStart then\n\t\t\t\t\t\t\t\t\t\t\t\tif interval1IntersectionStart\
    \ <= interval2IntersectionStart and interval1IntersectionEnd >= interval2IntersectionStart\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart\
    \ and interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart and\
    \ interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif interval1IntersectionStart <= interval2IntersectionStart and\
    \ interval1IntersectionEnd >= interval2IntersectionStart then\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\tif interval", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1\
    \ - start1 + end2 - start2\n\tif length == 0 then\n\t\treturn 'NO'\n\tend\n\t\
    if length == 1 then\n\t\treturn 'YES'\n\tend\n\tif start1 < start2 then\n\t\t\
    start1, start2 = start2, start1\n\t\tend1, end2 = end2, end1\n\tend\n\tlocal prime\
    \ = true\n\tlocal prime_start = start2\n\tlocal prime_end = end2\n\tlocal prime_length\
    \ = end1 - start1\n\tlocal prime_prime = true\n\tlocal prime_prime_start = start1\n\
    \tlocal prime_prime_end = end1\n\tlocal prime_prime_length = end2 - start2\n\t\
    local prime_prime_prime = true\n\tlocal prime_prime_prime_start = prime_prime_end\n\
    \tlocal prime_prime_prime_end = prime_prime_end\n\tlocal prime_prime_prime_length\
    \ = prime_prime_end - prime_prime_start\n\tlocal prime_prime_prime_prime_start\
    \ = prime_prime_prime_end\n\tlocal prime_prime_prime_prime_end = prime_prime_prime_end\n\
    \tlocal prime_prime_prime_prime_length = prime_prime_prime_end - prime_prime_prime_start\n\
    \tlocal prime_prime_prime_prime_start = prime_prime_prime_prime_end\n\tlocal prime_prime_prime_prime_end\
    \ = prime_prime_prime_prime_end\n\tlocal prime_prime_prime_prime_length = prime_prime_prime_end\
    \ - prime_prime_prime_prime_start\n\tlocal prime_prime_prime_prime_prime_start\
    \ = prime_prime_prime_prime_prime_end\n\tlocal prime_prime_prime_prime_prime_end\
    \ = prime_prime_prime_prime_prime_end\n\tlocal prime_prime_prime_prime_prime_length\
    \ = prime_prime_prime_prime_end - prime_prime_prime_prime_prime_start\n\tlocal\
    \ prime_prime_prime_prime_prime_prime_start = prime_prime_prime_prime_prime_prime_end\n\
    \tlocal prime_prime_prime_prime_prime_prime_end = prime_prime_prime_prime_prime_prime_prime_end\n\
    \tlocal prime_", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\t\
    local start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or\
    \ start2 > end2 then\n\t\treturn 'NO'\n\tend\n\tlocal length = end - start\n\t\
    local length2 = end2 - start2\n\tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\
    \tif length2 == 1 then\n\t\treturn 'YES'\n\tend\n\tif length == length2 then\n\
    \t\tlocal num = math.floor(length / length2)\n\t\tif num == length2 then\n\t\t\
    \treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\n\tlocal num = math.floor(length\
    \ / length2)\n\tif num > length2 then\n\t\treturn 'NO'\n\telse\n\t\treturn 'YES'\n\
    \tend\nend", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal interval1IntersectionStart = interval1Start + interval1Length\n\tlocal\
    \ interval2IntersectionStart = interval2Start + interval2Length\n\tlocal interval1IntersectionEnd\
    \ = interval1Start + interval1Length + interval2Length\n\tif interval1IntersectionStart\
    \ > interval1IntersectionEnd then\n\t\treturn \"NO\"\n\telseif interval2IntersectionStart\
    \ > interval2IntersectionEnd then\n\t\treturn \"NO\"\n\telseif interval1IntersectionStart\
    \ < interval1IntersectionEnd then\n\t\treturn \"YES\"\n\telseif interval2IntersectionStart\
    \ < interval2IntersectionEnd then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\
    \n\tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tif interval1_length == interval2_length\
    \ then\n\t\tif interval1_start <= interval2_start then\n\t\t\treturn interval1_start\
    \ <= intersection_length\n\t\telse\n\t\t\treturn interval2_start <= intersection_length\n\
    \t\tend\n\telse\n\t\treturn interval1_length == interval2_length\n\tend\nend",
  "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd\
    \ = interval1Start, interval1End\n\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\tintersectionStart = interval2Start\n\t\tintersectionEnd\
    \ = interval1End\n\telseif interval1Start <= interval2Start and interval1End <\
    \ interval2End then\n\t\tintersectionStart = interval1Start\n\t\tintersectionEnd\
    \ = interval2End\n\telseif interval1Start >= interval2Start and interval1End >=\
    \ interval2End then\n\t\tintersectionStart = interval1Start\n\t\tintersectionEnd\
    \ = interval2Start\n\tend\n\tlocal intersectionLength = math.abs(interval1End\
    \ - intersectionStart)\n\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\tlocal primeNumber = true\n\t\tfor i = 2, intersectionLength\
    \ do\n\t\t\tif math.mod(intersectionStart + i, interval1End) == 0 then\n\t\t\t\
    \tprimeNumber = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\treturn primeNumber\n\
    \telseif interval1Start <= interval2Start and interval1End < interval2End then\n\
    \t\tlocal primeNumber = true\n\t\tfor i = 2, intersectionLength do\n\t\t\tif math.mod(intersectionStart\
    \ + i, interval2End) == 0 then\n\t\t\t\tprimeNumber = false\n\t\t\t\tbreak\n\t\
    \t\tend\n\t\tend\n\t\treturn primeNumber\n\telseif interval1Start >= interval2Start\
    \ and interval1End >= interval2End then\n\t\tlocal primeNumber = true\n\t\tfor\
    \ i = 2, intersectionLength do\n\t\t\tif math.mod(intersectionStart + i, interval1End)\
    \ == 0 then\n\t\t\t\tprimeNumber = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\
    \treturn primeNumber\n\tend\nend", "\tlocal interval1Start, interval1End = interval1[1],\
    \ interval1[2]\n\tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\
    \tlocal intersectionStart, intersectionEnd = interval1Start <= interval2Start\
    \ and interval1End >= interval2End or interval1Start <= interval2End or interval1End\
    \ >= interval2Start, interval1Start <= interval2Start and interval1End >= interval2End\
    \ or interval1Start <= interval2End or interval1End >= interval2Start, interval1Start\
    \ <= interval2Start and interval1End >= interval2End or interval1Start <= interval2End\
    \ or interval1End >= interval2Start, interval1Start <= interval2Start and interval1End\
    \ >= interval2End or interval1Start <= interval2End or interval1End >= interval2Start\n\
    \tlocal intersectionLength = interval1Start <= interval2Start and interval1End\
    \ >= interval2End or interval1Start <= interval2End or interval1End >= interval2Start,\
    \ interval1Start <= interval2Start and interval1End >= interval2End or interval1Start\
    \ <= interval2End or interval1End >= interval2Start, interval1Start <= interval2Start\
    \ and interval1End >= interval2End or interval1Start <= interval2End or interval1End\
    \ >= interval2Start\n\treturn (intersectionStart and intersectionLength) or not\
    \ (intersectionStart and intersectionLength)\nend", "\tlocal start1, end1 = interval1[1],\
    \ interval1[2]\n\tlocal start2, end2 = interval2[1], interval2[2]\n\tlocal length1\
    \ = end1 - start1\n\tlocal length2 = end2 - start2\n\tlocal length\n\tif length1\
    \ < length2 then\n\t\tlength = length1\n\telse\n\t\tlength = length2\n\tend\n\t\
    local prime = true\n\tlocal prime_length = 2\n\twhile prime and prime_length <\
    \ length do\n\t\tlocal prime_start = start1 + prime_length\n\t\tlocal prime_end\
    \ = prime_start + prime_length\n\t\tif prime_start < prime_end then\n\t\t\tprime\
    \ = prime_start <= start2 and prime_end >= end1\n\t\telse\n\t\t\tprime = prime_start\
    \ <= start1 and prime_end >= end2\n\t\tend\n\t\tprime_length = prime_length +\
    \ 1\n\tend\n\tif prime then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\t\
    end\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or start2\
    \ > end2 then\n\t\treturn 'NO'\n\tend\n\tlocal length = end - start\n\tlocal length2\
    \ = end2 - start2\n\tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\tif length2\
    \ == 1 then\n\t\treturn 'YES'\n\tend\n\tif length2 == 2 then\n\t\tif length ==\
    \ 1 then\n\t\t\treturn 'YES'\n\t\tend\n\t\tif length == 2 then\n\t\t\tif start\
    \ <= start2 then\n\t\t\t\treturn 'YES'\n\t\t\tend\n\t\t\tif end >= end2 then\n\
    \t\t\t\treturn 'YES'\n\t\t\tend\n\t\tend\n\tend\n\tlocal prime = true\n\tlocal\
    \ prime2 = true\n\tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5\
    \ = true\n\tlocal prime6 = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\
    \tlocal prime9 = true\n\tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal\
    \ prime12 = true\n\tlocal prime13 = true\n\tlocal prime14 = true\n\tlocal prime15\
    \ = true\n\tlocal prime16 = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\
    \tlocal prime19 = true\n\tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal\
    \ prime22 = true\n\tlocal prime23 = true\n\tlocal prime24 = true\n\tlocal prime25\
    \ = true\n\tlocal prime26 = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\
    \tlocal prime29 = true\n\tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal\
    \ prime32 = true\n\tlocal prime33 = true\n\tlocal prime34 = true\n\tlocal prime35\
    \ = true\n\tlocal prime36 = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\
    \tlocal prime39 = true\n\tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal\
    \ prime42 = true\n\tlocal prime43 = true\n\tlocal prime44 = true\n\tlocal prime45\
    \ = true\n\tlocal prime46 = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\
    \tlocal prime49 = true\n\tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal\
    \ prime52 = true\n\tlocal prime53 = true\n\tlocal prime54 = true\n\tlocal prime55\
    \ = true\n\tlocal prime56 = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\
    \tlocal ", "\tlocal start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal\
    \ start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tlocal length = end1 -\
    \ start1 + end2 - start2\n\tif length == 0 then\n\t\treturn 'NO'\n\telseif length\
    \ == 1 then\n\t\treturn 'YES'\n\telse\n\t\tlocal prime = true\n\t\tfor i = 2,\
    \ math.floor(math.sqrt(length)) + 1 do\n\t\t\tif length % i == 0 then\n\t\t\t\t\
    prime = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif prime then\n\t\t\treturn\
    \ 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\tend\nend", "\tlocal start = interval1[1]\n\
    \tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \t\n\tif start <= end and start2 <= end2 then\n\t\tif start < start2 then\n\t\t\
    \tstart = start2\n\t\tend\n\t\tif end > end2 then\n\t\t\tend = end2\n\t\tend\n\
    \t\tif start <= end then\n\t\t\tif start < end then\n\t\t\t\treturn \"NO\"\n\t\
    \t\telse\n\t\t\t\treturn \"YES\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"NO\"\n\t\
    \tend\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal start = interval1[1]\n\
    \tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tif start > end or start2 > end2 then\n\t\treturn \"NO\"\n\tend\n\tlocal length\
    \ = end - start\n\tlocal length2 = end2 - start2\n\tif length2 == 0 then\n\t\t\
    return \"NO\"\n\tend\n\tif length2 == 1 then\n\t\treturn \"YES\"\n\tend\n\tif\
    \ length == length2 then\n\t\treturn \"YES\"\n\tend\n\tlocal prime = true\n\t\
    local prime2 = true\n\tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5\
    \ = true\n\tlocal prime6 = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\
    \tlocal prime9 = true\n\tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal\
    \ prime12 = true\n\tlocal prime13 = true\n\tlocal prime14 = true\n\tlocal prime15\
    \ = true\n\tlocal prime16 = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\
    \tlocal prime19 = true\n\tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal\
    \ prime22 = true\n\tlocal prime23 = true\n\tlocal prime24 = true\n\tlocal prime25\
    \ = true\n\tlocal prime26 = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\
    \tlocal prime29 = true\n\tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal\
    \ prime32 = true\n\tlocal prime33 = true\n\tlocal prime34 = true\n\tlocal prime35\
    \ = true\n\tlocal prime36 = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\
    \tlocal prime39 = true\n\tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal\
    \ prime42 = true\n\tlocal prime43 = true\n\tlocal prime44 = true\n\tlocal prime45\
    \ = true\n\tlocal prime46 = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\
    \tlocal prime49 = true\n\tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal\
    \ prime52 = true\n\tlocal prime53 = true\n\tlocal prime54 = true\n\tlocal prime55\
    \ = true\n\tlocal prime56 = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\
    \tlocal prime59 = true\n\tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal\
    \ prime62 = true\n\tlocal prime63 = true\n\tlocal prime64 = true\n\tlocal prime65\
    \ = true\n\tlocal ", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End\
    \ = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal interval2End\
    \ = interval2[2]\n\tlocal intersectionStart = interval1Start <= interval2Start\
    \ and interval1End >= interval2End\n\tlocal intersectionEnd = interval1Start <=\
    \ interval2Start and interval1End <= interval2End\n\tlocal intersectionLength\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionIsPrime = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n\tlocal intersectionIsNotPrime = not (interval1Start <= interval2Start\
    \ and interval1End <= interval2End)\n\tlocal intersectionIsNotPrimeAndNotIntersection\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrimeAndIntersection = not (interval1Start >= interval2Start\
    \ and interval1End <= interval2End)\n\tlocal intersectionIsNotPrimeAndIntersectionAndNotIntersection\
    \ = not (interval1Start >= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndNotIntersection = not (interval1Start\
    \ >= interval2Start and interval1End <= interval2End)\n\tlocal intersectionIsNotPrimeAndNotIntersectionAndIntersection\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndNotIntersectionAndNotIntersection\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndIntersectionAndNotIntersection\
    \ = not (interval1Start >= interval2Start and interval1End <= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndNotIntersectionAndIntersection\
    \ = not (interval1Start >= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndNotIntersectionAndNotIntersection\
    \ = not (interval1Start <= interval2Start and interval1End <= interval2End)\n\t\
    local intersectionIsNotPrimeAndNotIntersectionAndIntersectionAndNotIntersection\
    \ = not (interval1Start >= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrime", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or\
    \ start2 > end2 then\n\t\treturn 'NO'\n\tend\n\tlocal length = end - start\n\t\
    local length2 = end2 - start2\n\tif length2 == 0 then\n\t\treturn 'NO'\n\tend\n\
    \tif length2 == 1 then\n\t\tif length == 1 then\n\t\t\treturn 'YES'\n\t\telse\n\
    \t\t\treturn 'NO'\n\t\tend\n\tend\n\tif length <= length2 then\n\t\treturn 'NO'\n\
    \tend\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\t\
    local prime4 = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7\
    \ = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\
    \tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal\
    \ prime14 = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal prime17\
    \ = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\
    \tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal\
    \ prime24 = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal prime27\
    \ = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\
    \tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal\
    \ prime34 = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal prime37\
    \ = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\
    \tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal\
    \ prime44 = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal prime47\
    \ = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50 = true\n\
    \tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\tlocal\
    \ prime54 = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal prime57\
    \ = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60 = true\n\
    \tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = ", "\tlocal\
    \ interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ intersectionStart = interval1Start <= interval2Start and interval1End >= interval2End\n\
    \tlocal intersectionEnd = interval1Start <= interval2End and not interval1End\
    \ >= interval2Start\n\tlocal intersectionLength = interval1End - interval1Start\
    \ + interval2End - interval2Start\n\tlocal isPrime = not (math.fmod(intersectionLength,\
    \ 2) == 0)\n\tif intersectionStart and intersectionEnd then\n\t\treturn isPrime\
    \ and \"YES\" or \"NO\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "  local start\
    \ = interval1[1]\n  local end = interval1[2]\n  local start2 = interval2[1]\n\
    \  local end2 = interval2[2]", "\tlocal interval1Start, interval1End = interval1[1],\
    \ interval1[2]\n\tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\
    \tlocal interval1Length = interval1End - interval1Start + 1\n\tlocal interval2Length\
    \ = interval2End - interval2Start + 1\n\tlocal intersectionLength = interval1End\
    \ + interval2Start - 1\n\tlocal primeNumberFound = false\n\tlocal primeNumberFound2\
    \ = false\n\tlocal primeNumberFound3 = false\n\tlocal primeNumberFound4 = false\n\
    \tlocal primeNumberFound5 = false\n\tlocal primeNumberFound6 = false\n\tlocal\
    \ primeNumberFound7 = false\n\tlocal primeNumberFound8 = false\n\tlocal primeNumberFound9\
    \ = false\n\tlocal primeNumberFound10 = false\n\tlocal primeNumberFound11 = false\n\
    \tlocal primeNumberFound12 = false\n\tlocal primeNumberFound13 = false\n\tlocal\
    \ primeNumberFound14 = false\n\tlocal primeNumberFound15 = false\n\tlocal primeNumberFound16\
    \ = false\n\tlocal primeNumberFound17 = false\n\tlocal primeNumberFound18 = false\n\
    \tlocal primeNumberFound19 = false\n\tlocal primeNumberFound20 = false\n\tlocal\
    \ primeNumberFound21 = false\n\tlocal primeNumberFound22 = false\n\tlocal primeNumberFound23\
    \ = false\n\tlocal primeNumberFound24 = false\n\tlocal primeNumberFound25 = false\n\
    \tlocal primeNumberFound26 = false\n\tlocal primeNumberFound27 = false\n\tlocal\
    \ primeNumberFound28 = false\n\tlocal primeNumberFound29 = false\n\tlocal primeNumberFound30\
    \ = false\n\tlocal primeNumberFound31 = false\n\tlocal primeNumberFound32 = false\n\
    \tlocal primeNumberFound33 = false\n\tlocal primeNumberFound34 = false\n\tlocal\
    \ primeNumberFound35 = false\n\tlocal primeNumberFound36 = false\n\tlocal primeNumberFound37\
    \ = false\n\tlocal primeNumberFound38 = false\n\tlocal primeNumberFound39 = false\n\
    \tlocal primeNumberFound40 = false\n\tlocal primeNumberFound41 = false\n\tlocal\
    \ primeNumberFound42 = false\n\tlocal primeNumberFound43 = false\n\tlocal primeNumberFound44\
    \ = false\n\tlocal primeNumberFound45 = false\n\tlocal primeNumberFound46 = false\n\
    \tlocal primeNumberFound47 = false\n\tlocal primeNumberFound48 = false\n\tlocal\
    \ primeNumberFound49 = false\n\tlocal primeNumberFound50 = false\n\tlocal primeNumberFound51\
    \ = false\n\tlocal primeNumberFound52 = false\n\tlocal primeNumberFound53 = false\n\
    \tlocal primeNumberFound54 = false\n\t", "\tlocal start1 = interval1[1]\n\tlocal\
    \ end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1\
    \ <= length2 then\n\t\treturn \"NO\"\n\telse\n\t\tlocal length = length1\n\t\t\
    local index = 1\n\t\twhile length ~= 0 do\n\t\t\tif start1 + length ~= start2\
    \ + index then\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\t\tlength = length - 1\n\t\
    \t\tindex = index + 1\n\t\tend\n\t\treturn \"YES\"\n\tend\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd = interval1Start,\
    \ interval1End\n\tlocal interval1Length, interval2Length = interval1End - interval1Start,\
    \ interval2End - interval2Start\n\tlocal isIntersecting\n\tlocal isPrime\n\t\n\
    \tif interval1Start <= interval2Start and interval1End >= interval2End then\n\t\
    \tisIntersecting = true\n\telseif interval1Start <= interval2Start and interval1End\
    \ < interval2End then\n\t\tisIntersecting = false\n\telseif interval1Start >=\
    \ interval2Start and interval1End >= interval2End then\n\t\tisIntersecting = false\n\
    \telseif interval1Start < interval2Start and interval1End < interval2End then\n\
    \t\tisIntersecting = true\n\telse\n\t\tisIntersecting = false\n\tend\n\t\n\tif\
    \ isIntersecting then\n\t\tisPrime = true\n\telse\n\t\tisPrime = false\n\tend\n\
    \t\n\treturn isPrime\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end\
    \ = interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal intersection_length\
    \ = interval1_end - interval2_start\n\tif interval1_length > interval2_length\
    \ then\n\t\tinterval1_length = interval2_length\n\tend\n\tif intersection_length\
    \ == 0 then\n\t\treturn 'NO'\n\telseif interval1_length == 1 then\n\t\treturn\
    \ 'YES'\n\telseif interval1_length == 2 then\n\t\tif interval1_start <= interval2_start\
    \ then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\telse\n\t\t\
    local prime_numbers = prime_numbers(interval1_length - 1)\n\t\tlocal prime_numbers_length\
    \ = prime_numbers[#prime_numbers]\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 1\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_numbers_length\
    \ + 2\n\t\tlocal prime_numbers_length = prime_numbers_length + 2\n\t\tlocal prime_numbers_length\
    \ = prime_numbers_length + 2\n\t\tlocal prime_numbers_length = prime_", "\tlocal\
    \ start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal interval1Length =\
    \ end - start\n\tlocal interval2Length = interval2[1] - interval2[0]\n\tif interval1Length\
    \ == interval2Length then\n\t\treturn \"YES\"\n\tend\n\tif interval1Length > interval2Length\
    \ then\n\t\tinterval1Length = interval2Length\n\tend\n\tlocal intersectionLength\
    \ = interval1Length + interval2Length\n\tlocal primeNumbers = primeNumbers(intersectionLength)\n\
    \tlocal primeNumbersLength = #primeNumbers\n\tlocal primeNumbersIndex = 1\n\t\
    local primeNumbersIndex2 = 0\n\tlocal primeNumbersIndex3 = 0\n\tlocal primeNumbersIndex4\
    \ = 0\n\tlocal primeNumbersIndex5 = 0\n\tlocal primeNumbersIndex6 = 0\n\tlocal\
    \ primeNumbersIndex7 = 0\n\tlocal primeNumbersIndex8 = 0\n\tlocal primeNumbersIndex9\
    \ = 0\n\tlocal primeNumbersIndex10 = 0\n\tlocal primeNumbersIndex11 = 0\n\tlocal\
    \ primeNumbersIndex12 = 0\n\tlocal primeNumbersIndex13 = 0\n\tlocal primeNumbersIndex14\
    \ = 0\n\tlocal primeNumbersIndex15 = 0\n\tlocal primeNumbersIndex16 = 0\n\tlocal\
    \ primeNumbersIndex17 = 0\n\tlocal primeNumbersIndex18 = 0\n\tlocal primeNumbersIndex19\
    \ = 0\n\tlocal primeNumbersIndex20 = 0\n\tlocal primeNumbersIndex21 = 0\n\tlocal\
    \ primeNumbersIndex22 = 0\n\tlocal primeNumbersIndex23 = 0\n\tlocal primeNumbersIndex24\
    \ = 0\n\tlocal primeNumbersIndex25 = 0\n\tlocal primeNumbersIndex26 = 0\n\tlocal\
    \ primeNumbersIndex27 = 0\n\tlocal primeNumbersIndex28 = 0\n\tlocal primeNumbersIndex29\
    \ = 0\n\tlocal primeNumbersIndex30 = 0\n\tlocal primeNumbersIndex31 = 0\n\tlocal\
    \ primeNumbersIndex32 = 0\n\tlocal primeNumbersIndex33 = 0\n\tlocal primeNumbersIndex34\
    \ = 0\n\tlocal primeNumbersIndex35 = 0\n\tlocal primeNumbersIndex36 = 0\n\tlocal\
    \ primeNumbersIndex37 = 0\n\tlocal primeNumbersIndex38 = 0\n\tlocal primeNumbersIndex39\
    \ = 0\n\tlocal primeNumbersIndex40 = 0\n\tlocal primeNumbersIndex41 = 0\n\tlocal\
    \ primeNumbersIndex42 = 0\n\tlocal primeNumbersIndex43 = 0\n\tlocal primeNumbersIndex44\
    \ = 0\n\tlocal primeNumbersIndex45", "\tlocal start = interval1[1]\n\tlocal end\
    \ = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tif start > end or start2 > end2 then\n\t\treturn 'NO'\n\telseif start <= end2\
    \ then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval1Length - interval2Start\
    \ + interval2Length\n\tif intersectionLength == 0 then\n\t\treturn \"NO\"\n\t\
    elseif interval1Start < interval2Start then\n\t\tif interval1Start < interval2End\
    \ then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\telse\n\
    \t\tif interval1End < interval2End then\n\t\t\treturn \"YES\"\n\t\telse\n\t\t\t\
    return \"NO\"\n\t\tend\n\tend\nend", "\tlocal interval1Start = interval1[1]\n\t\
    local interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\tlocal\
    \ interval2End = interval2[2]\n\tlocal intersectionStart = interval1Start <= interval2Start\
    \ and interval1End >= interval2End\n\tlocal intersectionEnd = interval1Start <=\
    \ interval2End and\n\t\tinterval1End >= interval2Start and\n\t\tinterval1Start\
    \ <= interval2End and\n\t\tinterval1Start <= interval2Start\n\tlocal intersectionLength\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionIsPrime = not (intersectionStart or intersectionEnd)\n\tlocal intersectionIsPrimeLength\
    \ = not (intersectionLength)\n\tlocal intersectionIsPrimeIsPrime = not (intersectionIsPrime\
    \ and intersectionIsPrimeLength)\n\treturn (intersectionIsPrimeIsPrime)\nend",
  "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal intersectionStart, intersectionEnd\
    \ = interval1Start, interval1End\n\tif interval1Start <= interval2Start and interval1End\
    \ >= interval2End then\n\t\tintersectionStart = interval2Start\n\t\tintersectionEnd\
    \ = interval1End\n\tend\n\tif intersectionStart > intersectionEnd then\n\t\treturn\
    \ \"NO\"\n\telse\n\t\tlocal prime, primeCount = 1, 1\n\t\tlocal primeInterval\
    \ = interval1\n\t\twhile primeInterval[1] < intersectionStart and primeInterval[2]\
    \ > intersectionStart do\n\t\t\tprime = prime + 1\n\t\t\tprimeInterval = primeInterval[1]..primeInterval[2]\n\
    \t\tend\n\t\tif primeInterval[1] > intersectionStart and primeInterval[2] < intersectionStart\
    \ then\n\t\t\tprime = prime + 1\n\t\tend\n\t\tif primeInterval[1] > intersectionStart\
    \ and primeInterval[2] > intersectionStart then\n\t\t\tprime = prime + 1\n\t\t\
    end\n\t\tif primeInterval[1] < intersectionStart and primeInterval[2] < intersectionStart\
    \ then\n\t\t\tprime = prime + 1\n\t\tend\n\t\tif prime == primeCount then\n\t\t\
    \treturn \"YES\"\n\t\telse\n\t\t\treturn \"NO\"\n\t\tend\n\tend\nend", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal\
    \ interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tif interval1_length == interval2_length then\n\t\treturn\
    \ interval1_length\n\telse\n\t\tif interval1_start < interval2_start then\n\t\t\
    \tlocal interval1_length = interval1_end - interval1_start\n\t\t\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\t\t\tif interval1_length == interval2_length\
    \ then\n\t\t\t\treturn interval1_length\n\t\t\telse\n\t\t\t\treturn interval1_length\n\
    \t\t\tend\n\t\telse\n\t\t\tlocal interval1_length = interval1_end - interval1_start\n\
    \t\t\tlocal interval2_length = interval2_end - interval2_start\n\t\t\tif interval1_length\
    \ == interval2_length then\n\t\t\t\treturn interval1_length\n\t\t\telse\n\t\t\t\
    \treturn interval1_length\n\t\t\tend\n\t\tend\n\tend\nend", "\tlocal start1 =\
    \ interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2 =\
    \ end2 - start2\n\tlocal length = length1 + length2\n\tif length == 0 then\n\t\
    \treturn 'NO'\n\telseif length == 1 then\n\t\treturn 'YES'\n\telseif length ==\
    \ 2 then\n\t\tif start1 <= start2 then\n\t\t\treturn 'YES'\n\t\telse\n\t\t\treturn\
    \ 'NO'\n\t\tend\n\telse\n\t\tlocal prime, factors = prime_number(length)\n\t\t\
    if prime == 1 then\n\t\t\tif length == length1 then\n\t\t\t\treturn 'YES'\n\t\t\
    \telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\telse\n\t\t\tif length == length2 then\n\
    \t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn 'NO'\n\t\t\tend\n\t\tend\n\t\
    end\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\
    \tlocal interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\
    \tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal intersection_length = interval1_end\
    \ - interval2_start\n\tif interval1_start <= interval2_start and interval1_end\
    \ >= interval2_end then\n\t\tif interval1_length == interval2_length then\n\t\t\
    \tif interval1_length == 1 then\n\t\t\t\treturn 'YES'\n\t\t\telse\n\t\t\t\treturn\
    \ 'NO'\n\t\t\tend\n\t\telse\n\t\t\treturn 'NO'\n\t\tend\n\telse\n\t\treturn 'NO'\n\
    \tend\nend", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end =\
    \ interval1[2]\n\tlocal interval2_start = interval2[1]\n\tlocal interval2_end\
    \ = interval2[2]\n\tlocal interval1_length = interval1_end - interval1_start\n\
    \tlocal interval2_length = interval2_end - interval2_start\n\tlocal interval1_start_index\
    \ = interval1_start + interval1_length\n\tlocal interval2_start_index = interval2_start\
    \ + interval2_length\n\tlocal intersection_length = interval1_start_index - interval2_start_index\n\
    \tlocal is_prime = interval1_length == interval2_length and interval1_start_index\
    \ <= interval2_start_index\n\tif is_prime then\n\t\treturn \"YES\"\n\telse\n\t\
    \treturn \"NO\"\n\tend\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end then\n\
    \t\tstart, end = end, start\n\t\tstart2, end2 = end2, start2\n\tend\n\tif start\
    \ > start2 then\n\t\tstart2, start = start, start2\n\t\tend2, end = end, end2\n\
    \tend\n\tif start > end2 then\n\t\tstart2, end2 = end2, start2\n\tend\n\tif start2\
    \ < end2 then\n\t\tend2, start2 = start2, end2\n\tend\n\tif start < end2 then\n\
    \t\tend2, start = end2, start\n\tend\n\tif start < end2 then\n\t\tend2, start\
    \ = end2, start\n\tend\n\tif start2 < end2 then\n\t\tend2, start2 = start2, end2\n\
    \tend\n\tif start > end2 then\n\t\tstart2, end2 = end2, start2\n\tend\n\tif start\
    \ < end2 then\n\t\tend2, start = end2, start\n\tend\n\tif start2 < end2 then\n\
    \t\tend2, start2 = start2, end2\n\tend\n\tif start > end2 then\n\t\tstart2, end2\
    \ = end2, start2\n\tend\n\tif start < end2 then\n\t\tend2, start = end2, start\n\
    \tend\n\tif start2 < end2 then\n\t\tend2, start2 = start2, end2\n\tend\n\tif start\
    \ > end2 then\n\t\tstart2, end2 = end2, start2\n\tend\n\tif start < end2 then\n\
    \t\tend2, start = end2, start\n\tend\n\tif start2 < end2 then\n\t\tend2, start2\
    \ = start2, end2\n\tend\n\tif start > end2 then\n\t\tstart2, end2 = end2, start2\n\
    \tend\n\tif start < end2 then\n\t\tend2, start = end2, start\n\tend\n\tif start2\
    \ < end2 then\n\t\tend2, start2 = start2, end2\n\tend\n\tif start > end2 then\n\
    \t\tstart2, end2 = end2, start2\n\tend\n\tif start < end2 then\n\t\tend2, start\
    \ = end2, start\n\tend\n\tif start2 < end2 then\n\t\tend2, start2 = start2, end2\n\
    \tend\n\tif start > end2 then\n\t\tstart2, end2 = end2, start2\n\tend\n\tif start\
    \ < end2 then\n\t\tend2, start = end2, start\n\tend\n\tif start2 < end2 then\n",
  "\tlocal start1, end1 = interval1[1], interval1[2]\n\tlocal start2, end2 = interval2[1],\
    \ interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\
    \tif length1 == 0 or length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length1\
    \ > length2 then\n\t\tstart1, end1 = end1, start1\n\t\tstart2, end2 = end2, start2\n\
    \tend\n\tlocal prime = true\n\tfor i = start1, end1 + 1 do\n\t\tif i % length2\
    \ == 0 then\n\t\t\tprime = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif prime then\n\
    \t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End - interval1End + interval2Start\
    \ - interval1Start\n\tlocal isPrime = true\n\tlocal isPrimeStart = true\n\tlocal\
    \ isPrimeEnd = true\n\tlocal isPrimeLength = true\n\tlocal isPrimeIntersection\
    \ = true\n\tlocal isPrimeIntersectionStart = true\n\tlocal isPrimeIntersectionEnd\
    \ = true\n\tlocal isPrimeIntersectionLength = true\n\tlocal isPrimeIntersectionIntersection\
    \ = true\n\tlocal isPrimeIntersectionIntersectionStart = true\n\tlocal isPrimeIntersectionIntersectionEnd\
    \ = true\n\tlocal isPrimeIntersectionIntersectionLength = true\n\tlocal isPrimeIntersectionIntersectionIntersection\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionStart = true\n\t\
    local isPrimeIntersectionIntersectionIntersectionEnd = true\n\tlocal isPrimeIntersectionIntersectionIntersectionLength\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersection = true\n\
    \tlocal isPrimeIntersectionIntersectionIntersectionIntersectionStart = true\n\t\
    local isPrimeIntersectionIntersectionIntersectionIntersectionEnd = true\n\tlocal\
    \ isPrimeIntersectionIntersectionIntersectionIntersectionLength = true\n\tlocal\
    \ isPrimeIntersectionIntersectionIntersectionIntersectionIntersection = true\n\
    \tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionStart\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionEnd\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionLength\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersection\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionStart\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionEnd\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionLength\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionIntersection\
    \ = true\n\tlocal isPrimeIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionIntersectionStart\
    \ = ", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\
    \tlocal interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\
    \tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal interval1_start_index = interval1_start\
    \ + interval1_length\n\tlocal interval2_start_index = interval2_start + interval2_length\n\
    \tlocal interval1_end_index = interval1_start + interval1_length\n\tlocal interval2_end_index\
    \ = interval2_start + interval2_length\n\tlocal intersection_length = interval1_start_index\
    \ - interval2_start_index\n\tlocal intersection_start_index = interval1_start_index\n\
    \tlocal intersection_end_index = interval1_end_index\n\tif interval1_end_index\
    \ > interval2_end_index then\n\t\tinterval1_end_index = interval2_end_index\n\t\
    \tinterval1_start_index = interval2_start_index\n\tend\n\tif interval1_start_index\
    \ > interval2_start_index then\n\t\tinterval1_start_index = interval2_start_index\n\
    \t\tinterval1_end_index = interval2_end_index\n\tend\n\tif interval1_start_index\
    \ > interval1_end_index then\n\t\tinterval1_start_index = interval1_end_index\n\
    \t\tinterval1_end_index = interval1_start_index\n\tend\n\tif interval2_start_index\
    \ > interval2_end_index then\n\t\tinterval2_start_index = interval2_end_index\n\
    \t\tinterval2_end_index = interval2_start_index\n\tend\n\tif interval1_start_index\
    \ > interval2_start_index then\n\t\tinterval1_start_index = interval2_start_index\n\
    \t\tinterval1_end_index = interval2_end_index\n\tend\n\tif interval1_start_index\
    \ > interval1_end_index then\n\t\tinterval1_start_index = interval1_end_index\n\
    \t\tinterval1_end_index = interval1_start_index\n\tend\n\tif interval2_start_index\
    \ > interval2_end_index then\n\t\tinterval2_start_index = interval2_end_index\n\
    \t\tinterval2_end_index = interval2_start_index\n\tend\n\tif interval1_start_index\
    \ > interval2_start_index then\n\t\tinterval1_start_index = interval2_start_index\n\
    \t\tinterval1_end_index = interval2_end_index\n\tend\n\tif interval1_start_index\
    \ > interval1_end_index then\n\t\tinterval1_start_index = interval1_end_index\n\
    \t\tinterval1_end_index = interval1_start_index\n\tend\n\tif interval2_start_index\
    \ > interval2_end_index then\n\t\tinterval2_start_index = interval2_end_index\n\
    \t\tinterval2_end_index = interval2_start_index\n\tend\n\tif interval1_start_index\
    \ > interval2_start_index then\n\t\t", "\tlocal start1 = interval1[1]\n\tlocal\
    \ end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tlocal length\n\
    \tif length1 > length2 then\n\t\tlength = length1\n\telse\n\t\tlength = length2\n\
    \tend\n\tlocal prime = true\n\tlocal prime_number\n\tlocal prime_number_2\n\t\
    local prime_number_3\n\tlocal prime_number_4\n\tlocal prime_number_5\n\tlocal\
    \ prime_number_6\n\tlocal prime_number_7\n\tlocal prime_number_8\n\tlocal prime_number_9\n\
    \tlocal prime_number_10\n\tlocal prime_number_11\n\tlocal prime_number_12\n\t\
    local prime_number_13\n\tlocal prime_number_14\n\tlocal prime_number_15\n\tlocal\
    \ prime_number_16\n\tlocal prime_number_17\n\tlocal prime_number_18\n\tlocal prime_number_19\n\
    \tlocal prime_number_20\n\tlocal prime_number_21\n\tlocal prime_number_22\n\t\
    local prime_number_23\n\tlocal prime_number_24\n\tlocal prime_number_25\n\tlocal\
    \ prime_number_26\n\tlocal prime_number_27\n\tlocal prime_number_28\n\tlocal prime_number_29\n\
    \tlocal prime_number_30\n\tlocal prime_number_31\n\tlocal prime_number_32\n\t\
    local prime_number_33\n\tlocal prime_number_34\n\tlocal prime_number_35\n\tlocal\
    \ prime_number_36\n\tlocal prime_number_37\n\tlocal prime_number_38\n\tlocal prime_number_39\n\
    \tlocal prime_number_40\n\tlocal prime_number_41\n\tlocal prime_number_42\n\t\
    local prime_number_43\n\tlocal prime_number_44\n\tlocal prime_number_45\n\tlocal\
    \ prime_number_46\n\tlocal prime_number_47\n\tlocal prime_number_48\n\tlocal prime_number_49\n\
    \tlocal prime_number_50\n\tlocal prime_number_51\n\tlocal prime_number_52\n\t\
    local prime_number_53\n\tlocal prime_number_54\n\tlocal prime_number_55\n\tlocal\
    \ prime_number_56\n\tlocal prime_number_57\n\tlocal prime_number_58\n\tlocal prime_number_59\n\
    \tlocal prime_number_60\n\tlocal prime_number_61\n\tlocal prime_", "\tlocal start\
    \ = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ 'NO'\n\telseif start <= start2 and end <= end2 then\n\t\treturn 'YES'\n\telse\n\
    \t\treturn 'NO'\n\tend\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or\
    \ start2 > end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2 and end >=\
    \ end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\
    \t\treturn 'YES'\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\t\
    end\n\tif start <= start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif\
    \ start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <=\
    \ start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and\
    \ end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <= start2 and end >=\
    \ end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\
    \t\treturn 'YES'\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\t\
    end\n\tif start <= start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif\
    \ start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <=\
    \ start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and\
    \ end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <= start2 and end >=\
    \ end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\
    \t\treturn 'YES'\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\t\
    end\n\tif start <= start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif\
    \ start <= end2 and end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <=\
    \ start2 and end >= end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= end2 and\
    \ end >= start2 then\n\t\treturn 'YES'\n\tend\n\tif start <= start2 and end ",
  "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\t\
    local interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\t\n\
    \tlocal interval1Length = interval1End - interval1Start + 1\n\tlocal interval2Length\
    \ = interval2End - interval2Start + 1\n\t\n\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\t\t\treturn interval1Start <= interval2Start\
    \ and interval1End >= interval2End\n\t\t\telse\n\t\t\t\treturn interval1Start\
    \ <= interval2Start and interval1End < interval2End\n\t\t\tend\n\t\telse\n\t\t\
    \treturn interval1Start <= interval2Start and interval1End > interval2End\n\t\t\
    end\n\telse\n\t\treturn interval1Start <= interval2Start and interval1End < interval2End\n\
    \tend\nend", "\tlocal interval1Start, interval1End = interval1[1], interval1[2]\n\
    \tlocal interval2Start, interval2End = interval2[1], interval2[2]\n\tlocal interval1Length\
    \ = interval1End - interval1Start\n\tlocal interval2Length = interval2End - interval2Start\n\
    \tlocal intersectionLength = interval1Start + interval2End\n\tlocal primeNumberFound\
    \ = false\n\tlocal primeNumberFoundInBothIntervals = false\n\tlocal primeNumberFoundInBothIntervalsLength\
    \ = 0\n\tlocal primeNumberFoundInBothIntervalsStart = 0\n\tlocal primeNumberFoundInBothIntervalsEnd\
    \ = 0\n\tlocal primeNumberFoundInBothIntervalsStartInInterval1 = false\n\tlocal\
    \ primeNumberFoundInBothIntervalsEndInInterval1 = false\n\tlocal primeNumberFoundInBothIntervalsStartInInterval2\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsEndInInterval2 = false\n\tlocal\
    \ primeNumberFoundInBothIntervalsStartInBothIntervals = false\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervals\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsLength =\
    \ 0\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervalsLength = 0\n\tlocal\
    \ primeNumberFoundInBothIntervalsStartInBothIntervalsStart = 0\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervalsStart\
    \ = 0\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsEnd = 0\n\t\
    local primeNumberFoundInBothIntervalsEndInBothIntervalsEnd = 0\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsStartInInterval1\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervalsStartInInterval1\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsEndInInterval1\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsStartInInterval2\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervalsStartInInterval2\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsEndInInterval2\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsStartInBothIntervals\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsEndInBothIntervalsStartInBothIntervals\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothIntervalsEndInBothIntervals\
    \ = false\n\tlocal primeNumberFoundInBothIntervalsStartInBothInterval", "\tlocal\
    \ interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal\
    \ interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ intersectionStart = interval1Start <= interval2Start and interval1End >= interval2End\n\
    \tlocal intersectionEnd = interval1Start <= interval2Start and interval1End >=\
    \ interval2End\n\tlocal intersectionLength = interval1Start <= interval2Start\
    \ and interval1End >= interval2End\n\tlocal intersectionIsPrime = not (interval1Start\
    \ <= interval2Start and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrime2 = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n\tlocal intersectionIsNotPrime3 = not (interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime4 = not (interval1Start\
    \ <= interval2Start and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime5\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrime6 = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n\tlocal intersectionIsNotPrime7 = not (interval1Start <= interval2Start\
    \ and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime8 = not (interval1Start\
    \ <= interval2Start and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime9\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrime10 = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n\tlocal intersectionIsNotPrime11 = not (interval1Start <=\
    \ interval2Start and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime12\
    \ = not (interval1Start <= interval2Start and interval1End >= interval2End)\n\t\
    local intersectionIsNotPrime13 = not (interval1Start <= interval2Start and interval1End\
    \ >= interval2End)\n\tlocal intersectionIsNotPrime14 = not (interval1Start <=\
    \ interval2Start and interval1End >= interval2End)\n\tlocal intersectionIsNotPrime15\
    \ = not ", "\tlocal interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\
    \tlocal interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\
    \tlocal interval1_length = interval1_end - interval1_start\n\tlocal interval2_length\
    \ = interval2_end - interval2_start\n\tlocal interval1_prime = interval1_length\
    \ == 1 and interval1_start <= interval1_end\n\tlocal interval2_prime = interval2_length\
    \ == 1 and interval2_start <= interval2_end\n\tlocal interval_length = interval1_length\
    \ + interval2_length\n\tlocal interval_prime = interval_length == 1 and interval1_prime\
    \ and interval2_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_length = interval_length and interval_length\n\
    \tlocal interval_prime = interval_prime and interval_prime\n\tlocal interval_length\
    \ = interval_length and interval_length\n\tlocal interval_prime = interval_prime\
    \ and interval_prime\n\tlocal interval_", "\tlocal start1 = interval1[1]\n\tlocal\
    \ end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\
    \tlocal length1 = end1 - start1\n\tlocal length2 = end2 - start2\n\tif length1\
    \ == 0 and length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length1 == 0 or length2\
    \ == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length1 > length2 then\n\t\tlocal\
    \ temp = start1\n\t\tstart1 = start2\n\t\tstart2 = temp\n\t\tend1 = end2\n\t\t\
    end2 = end1\n\tend\n\tlocal prime = true\n\tlocal prime1 = true\n\tlocal prime2\
    \ = true\n\tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5 = true\n\
    \tlocal prime6 = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\tlocal prime9\
    \ = true\n\tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal prime12 = true\n\
    \tlocal prime13 = true\n\tlocal prime14 = true\n\tlocal prime15 = true\n\tlocal\
    \ prime16 = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\tlocal prime19\
    \ = true\n\tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal prime22 = true\n\
    \tlocal prime23 = true\n\tlocal prime24 = true\n\tlocal prime25 = true\n\tlocal\
    \ prime26 = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\tlocal prime29\
    \ = true\n\tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal prime32 = true\n\
    \tlocal prime33 = true\n\tlocal prime34 = true\n\tlocal prime35 = true\n\tlocal\
    \ prime36 = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\tlocal prime39\
    \ = true\n\tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal prime42 = true\n\
    \tlocal prime43 = true\n\tlocal prime44 = true\n\tlocal prime45 = true\n\tlocal\
    \ prime46 = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\tlocal prime49\
    \ = true\n\tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal prime52 = true\n\
    \tlocal prime53 = true\n\tlocal prime54 = true\n\tlocal prime55 = true\n\tlocal\
    \ prime56 = true\n\tlocal prime57 = true\n\tlocal prime58 = true\n\tlocal prime59\
    \ = true\n\tlocal prime60 = true\n\tlocal prime61 = true\n\tlocal prime62 = true\n",
  "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\t\
    local interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal\
    \ interval1Length = interval1End - interval1Start\n\tlocal interval2Length = interval2End\
    \ - interval2Start\n\tlocal interval1Intersection = interval1Start + interval1Length\n\
    \tlocal interval2Intersection = interval2Start + interval2Length\n\tif interval1Intersection\
    \ > interval2Intersection then\n\t\treturn \"NO\"\n\telseif interval1Intersection\
    \ < interval2Intersection then\n\t\treturn \"YES\"\n\telseif interval1Start <=\
    \ interval2Start and interval1End >= interval2End then\n\t\treturn \"YES\"\n\t\
    elseif interval1Start <= interval2Start and interval1End < interval2End then\n\
    \t\treturn \"NO\"\n\telseif interval1Start >= interval2Start and interval1End\
    \ >= interval2End then\n\t\treturn \"NO\"\n\telse\n\t\treturn \"NO\"\n\tend\n\
    end", "\tlocal interval1Start = interval1[1]\n\tlocal interval1End = interval1[2]\n\
    \tlocal interval2Start = interval2[1]\n\tlocal interval2End = interval2[2]", "\t\
    local start = interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\tend\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\
    \tif length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length2 == 1 then\n\t\t\
    if length == 1 then\n\t\t\treturn \"YES\"\n\t\tend\n\t\treturn \"NO\"\n\tend\n\
    \tif length == length2 then\n\t\tif length == 1 then\n\t\t\treturn \"YES\"\n\t\
    \tend\n\t\treturn \"NO\"\n\tend\n\tif length < length2 then\n\t\tlocal temp =\
    \ length\n\t\tlength = length2\n\t\tlength2 = temp\n\tend\n\tlocal prime = true\n\
    \tlocal prime2 = true\n\tlocal prime3 = true\n\tlocal prime4 = true\n\tlocal prime5\
    \ = true\n\tlocal prime6 = true\n\tlocal prime7 = true\n\tlocal prime8 = true\n\
    \tlocal prime9 = true\n\tlocal prime10 = true\n\tlocal prime11 = true\n\tlocal\
    \ prime12 = true\n\tlocal prime13 = true\n\tlocal prime14 = true\n\tlocal prime15\
    \ = true\n\tlocal prime16 = true\n\tlocal prime17 = true\n\tlocal prime18 = true\n\
    \tlocal prime19 = true\n\tlocal prime20 = true\n\tlocal prime21 = true\n\tlocal\
    \ prime22 = true\n\tlocal prime23 = true\n\tlocal prime24 = true\n\tlocal prime25\
    \ = true\n\tlocal prime26 = true\n\tlocal prime27 = true\n\tlocal prime28 = true\n\
    \tlocal prime29 = true\n\tlocal prime30 = true\n\tlocal prime31 = true\n\tlocal\
    \ prime32 = true\n\tlocal prime33 = true\n\tlocal prime34 = true\n\tlocal prime35\
    \ = true\n\tlocal prime36 = true\n\tlocal prime37 = true\n\tlocal prime38 = true\n\
    \tlocal prime39 = true\n\tlocal prime40 = true\n\tlocal prime41 = true\n\tlocal\
    \ prime42 = true\n\tlocal prime43 = true\n\tlocal prime44 = true\n\tlocal prime45\
    \ = true\n\tlocal prime46 = true\n\tlocal prime47 = true\n\tlocal prime48 = true\n\
    \tlocal prime49 = true\n\tlocal prime50 = true\n\tlocal prime51 = true\n\tlocal\
    \ prime52 = true\n\tlocal prime53 = true\n\tlocal prime54 = true\n\tlocal prime55\
    \ = true\n\tlocal prime56 = true\n\tlocal prime57 = true\n\tlocal prime58", "\t\
    local start1 = interval1[1]\n\tlocal end1 = interval1[2]\n\tlocal start2 = interval2[1]\n\
    \tlocal end2 = interval2[2]\n\tlocal length = end1 - start1 + end2 - start2\n\t\
    if length == 0 then\n\t\treturn 'NO'\n\tend\n\tif length == 1 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif start1 <= start2 then\n\t\tlocal temp = start1\n\t\tstart1\
    \ = start2\n\t\tstart2 = temp\n\tend\n\tif end1 <= end2 then\n\t\tlocal temp =\
    \ end1\n\t\tend1 = end2\n\t\tend2 = temp\n\tend\n\tlocal prime = true\n\tlocal\
    \ i = 1\n\twhile prime and i <= length do\n\t\tlocal temp = start1 + end1 - i\n\
    \t\tif temp % 2 == 0 then\n\t\t\tprime = false\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \tif prime then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal\
    \ interval1_start = interval1[1]\n\tlocal interval1_end = interval1[2]\n\tlocal\
    \ interval2_start = interval2[1]\n\tlocal interval2_end = interval2[2]\n\tlocal\
    \ intersection_start = interval1_start < interval2_start and interval1_end < interval2_end\
    \ and interval1_start < interval2_end and interval1_end < interval2_start or interval1_start\
    \ < interval2_start and interval1_end < interval2_end and interval1_start < interval2_start\
    \ and interval1_end < interval2_end or interval1_start < interval2_start and interval1_end\
    \ < interval2_end and interval1_start < interval2_end and interval1_end < interval2_start\n\
    \tlocal intersection_end = interval1_start < interval2_start and interval1_end\
    \ < interval2_end and interval1_start < interval2_end and interval1_end < interval2_end\
    \ or interval1_start < interval2_start and interval1_end < interval2_end and interval1_start\
    \ < interval2_end and interval1_end < interval2_start or interval1_start < interval2_start\
    \ and interval1_end < interval2_end and interval1_start < interval2_end and interval1_end\
    \ < interval2_start\n\tlocal intersection_length = intersection_start and intersection_end\
    \ and interval1_end - interval1_start + interval2_end - interval2_start or interval1_end\
    \ - interval1_start + interval2_end - interval2_start or interval1_end - interval1_start\
    \ + interval2_end - interval2_start\n\treturn intersection_length and (interval1_start\
    \ <= interval2_start and interval1_end >= interval2_end or interval1_start >=\
    \ interval2_start and interval1_end <= interval2_end) and \"YES\" or \"NO\"\n\
    end", "\tlocal start1, end1 = interval1[1], interval1[2]\n\tlocal start2, end2\
    \ = interval2[1], interval2[2]\n\tlocal length1 = end1 - start1\n\tlocal length2\
    \ = end2 - start2\n\tlocal length = length1 + length2\n\tif length == 0 then\n\
    \t\treturn \"NO\"\n\tend\n\tif length == 1 then\n\t\treturn \"YES\"\n\tend\n\t\
    if length == 2 then\n\t\tif start1 <= start2 then\n\t\t\tif end1 > end2 then\n\
    \t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn \"NO\"\n\t\t\tend\n\t\telse\n\
    \t\t\tif end1 < end2 then\n\t\t\t\treturn \"YES\"\n\t\t\telse\n\t\t\t\treturn\
    \ \"NO\"\n\t\t\tend\n\t\tend\n\tend\n\tlocal prime = true\n\tlocal prime_length\
    \ = 2\n\tlocal prime_start = 1\n\tlocal prime_end = length\n\twhile prime_start\
    \ <= prime_end do\n\t\tif prime_start % prime_length == 0 then\n\t\t\tprime =\
    \ false\n\t\tend\n\t\tif prime_start % prime_length == 1 then\n\t\t\tprime = false\n\
    \t\tend\n\t\tif prime_start % prime_length == 2 then\n\t\t\tprime = false\n\t\t\
    end\n\t\tif prime_start % prime_length == 3 then\n\t\t\tprime = false\n\t\tend\n\
    \t\tprime_length = prime_length + 1\n\t\tprime_start = prime_start + 1\n\tend\n\
    \tif prime then\n\t\treturn \"YES\"\n\telse\n\t\treturn \"NO\"\n\tend\nend", "\t\
    local interval1Start, interval1End = interval1[1], interval1[2]\n\tlocal interval2Start,\
    \ interval2End = interval2[1], interval2[2]\n\tlocal intersectionStart = interval1Start\
    \ <= interval2Start and interval1End >= interval2End\n\tlocal intersectionEnd\
    \ = interval1Start <= interval2End and interval1End >= interval2Start\n\tlocal\
    \ intersectionLength = interval1Start <= interval2End and interval1End >= interval2Start\n\
    \tlocal intersectionIsPrime = not (math.mod(intersectionStart, interval1End) or\
    \ math.mod(intersectionEnd, interval1Start))\n\treturn (intersectionLength and\
    \ intersectionIsPrime)\nend", "\tlocal start = interval1[1]\n\tlocal end = interval1[2]\n\
    \tlocal start2 = interval2[1]\n\tlocal end2 = interval2[2]\n\tif start > end or\
    \ start2 > end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2 and end >=\
    \ end2 then\n\t\treturn 'YES'\n\tend\n\tif start <= start2 and end <= end2 then\n\
    \t\treturn 'NO'\n\tend\n\tif start >= start2 and end >= end2 then\n\t\treturn\
    \ 'YES'\n\tend\n\tif start >= start2 and end <= end2 then\n\t\treturn 'NO'\n\t\
    end\n\tif start <= start2 and end >= end2 then\n\t\treturn 'NO'\n\tend\n\tif start\
    \ >= start2 and end <= end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2\
    \ and end >= end2 then\n\t\treturn 'NO'\n\tend\n\tif start >= start2 and end <=\
    \ end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2 and end >= end2 then\n\
    \t\treturn 'NO'\n\tend\n\tif start >= start2 and end <= end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn 'NO'\n\t\
    end\n\tif start >= start2 and end <= end2 then\n\t\treturn 'NO'\n\tend\n\tif start\
    \ <= start2 and end >= end2 then\n\t\treturn 'NO'\n\tend\n\tif start >= start2\
    \ and end <= end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2 and end >=\
    \ end2 then\n\t\treturn 'NO'\n\tend\n\tif start >= start2 and end <= end2 then\n\
    \t\treturn 'NO'\n\tend\n\tif start <= start2 and end >= end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif start >= start2 and end <= end2 then\n\t\treturn 'NO'\n\t\
    end\n\tif start <= start2 and end >= end2 then\n\t\treturn 'NO'\n\tend\n\tif start\
    \ >= start2 and end <= end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2\
    \ and end >= end2 then\n\t\treturn 'NO'\n\tend\n\tif start >= start2 and end <=\
    \ end2 then\n\t\treturn 'NO'\n\tend\n\tif start <= start2 and end >= end2 then\n\
    \t\treturn 'NO'\n\tend\n\tif start >= start2 and end <= end2 then\n\t\treturn\
    \ 'NO'\n\tend\n\tif start <= start2 and end ", "\tlocal interval1Start = interval1[1]\n\
    \tlocal interval1End = interval1[2]\n\tlocal interval2Start = interval2[1]\n\t\
    local interval2End = interval2[2]\n\t\n\tif interval1Start > interval1End or interval2Start\
    \ > interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start <= interval2Start\
    \ and interval1End >= interval2End then\n\t\treturn 'YES'\n\tend\n\t\n\tif interval1Start\
    \ <= interval2Start and interval1End < interval2End then\n\t\treturn 'NO'\n\t\
    end\n\t\n\tif interval1Start > interval1End and interval2Start <= interval2End\
    \ then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start < interval2Start and interval1End\
    \ >= interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start < interval2Start\
    \ and interval1End < interval2End then\n\t\treturn 'YES'\n\tend\n\t\n\tif interval1Start\
    \ <= interval2Start and interval1End > interval2End then\n\t\treturn 'YES'\n\t\
    end\n\t\n\tif interval1Start > interval1End and interval2Start > interval2End\
    \ then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start < interval2Start and interval1End\
    \ <= interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start > interval1End\
    \ and interval2Start <= interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start\
    \ <= interval2Start and interval1End > interval2End then\n\t\treturn 'NO'\n\t\
    end\n\t\n\tif interval1Start > interval1End and interval2Start > interval2End\
    \ then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start < interval2Start and interval1End\
    \ <= interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start > interval1End\
    \ and interval2Start > interval2End then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start\
    \ <= interval2Start and interval1End < interval2End then\n\t\treturn 'NO'\n\t\
    end\n\t\n\tif interval1Start > interval1End and interval2Start <= interval2End\
    \ then\n\t\treturn 'NO'\n\tend\n\t\n\tif interval1Start < interval2Start and interval1End\
    \ > interval2End then\n\t\treturn 'NO'\n\tend\n", "\tlocal interval1_start = interval1[1]\n\
    \tlocal interval1_end = interval1[2]\n\tlocal interval2_start = interval2[1]\n\
    \tlocal interval2_end = interval2[2]\n\tlocal interval1_length = interval1_end\
    \ - interval1_start\n\tlocal interval2_length = interval2_end - interval2_start\n\
    \tlocal interval1_start_index = interval1_start + interval1_length\n\tlocal interval2_start_index\
    \ = interval2_start + interval2_length\n\tlocal intersection_length = interval1_start_index\
    \ - interval2_start_index\n\tif interval1_start_index > interval2_start_index\
    \ then\n\t\tinterval1_start_index = interval2_start_index\n\tend\n\tif intersection_length\
    \ == 0 then\n\t\treturn 'NO'\n\telseif interval1_start_index == interval2_start_index\
    \ then\n\t\treturn 'YES'\n\telse\n\t\treturn 'NO'\n\tend\nend", "\tlocal interval1Start,\
    \ interval1End = interval1[1], interval1[2]\n\tlocal interval2Start, interval2End\
    \ = interval2[1], interval2[2]\n\tlocal interval1Length = interval1End - interval1Start\n\
    \tlocal interval2Length = interval2End - interval2Start\n\tlocal interval1Intersection\
    \ = interval1Start + interval1Length\n\tlocal interval2Intersection = interval2Start\
    \ + interval2Length\n\tif interval1Intersection > interval2Intersection then\n\
    \t\treturn 'NO'\n\telseif interval1Intersection < interval2Intersection then\n\
    \t\treturn 'YES'\n\telse\n\t\treturn 'YES'\n\tend\nend", "\tlocal interval1Start\
    \ = interval1[1]\n\tlocal interval1End = interval1[2]\n\tlocal interval2Start\
    \ = interval2[1]\n\tlocal interval2End = interval2[2]\n\tlocal intersectionStart\
    \ = interval1Start <= interval2Start and interval1End >= interval2End\n\tlocal\
    \ intersectionEnd = interval1Start <= interval2End and interval1End >= interval2Start\n\
    \tlocal intersectionLength = interval1Start <= interval2End and interval1End >=\
    \ interval2Start\n\tlocal intersectionIsPrime = not (math.fmod(interval1Start\
    \ + interval1End, 2) == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\
    \tlocal intersectionIsPrime = not (math.fmod(interval1Start + interval1End, 2)\
    \ == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\tlocal intersectionIsPrime\
    \ = not (math.fmod(interval1Start + interval1End, 2) == 0 and math.fmod(interval2Start\
    \ + interval2End, 2) == 0)\n\tlocal intersectionIsPrime = not (math.fmod(interval1Start\
    \ + interval1End, 2) == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\
    \tlocal intersectionIsPrime = not (math.fmod(interval1Start + interval1End, 2)\
    \ == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\tlocal intersectionIsPrime\
    \ = not (math.fmod(interval1Start + interval1End, 2) == 0 and math.fmod(interval2Start\
    \ + interval2End, 2) == 0)\n\tlocal intersectionIsPrime = not (math.fmod(interval1Start\
    \ + interval1End, 2) == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\
    \tlocal intersectionIsPrime = not (math.fmod(interval1Start + interval1End, 2)\
    \ == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\tlocal intersectionIsPrime\
    \ = not (math.fmod(interval1Start + interval1End, 2) == 0 and math.fmod(interval2Start\
    \ + interval2End, 2) == 0)\n\tlocal intersectionIsPrime = not (math.fmod(interval1Start\
    \ + interval1End, 2) == 0 and math.fmod(interval2Start + interval2End, 2) == 0)\n\
    \tlocal intersectionIsPrime = not (math.fmod(interval1Start + interval1End, 2)\
    \ == 0 and math.fmod(interval2Start + interval2End, 2) == ", "\tlocal start =\
    \ interval1[1]\n\tlocal end = interval1[2]\n\tlocal start2 = interval2[1]\n\t\
    local end2 = interval2[2]\n\tif start > end or start2 > end2 then\n\t\treturn\
    \ \"NO\"\n\tend\n\tlocal length = end - start\n\tlocal length2 = end2 - start2\n\
    \tif length2 == 0 then\n\t\treturn \"NO\"\n\tend\n\tif length == length2 then\n\
    \t\treturn \"YES\"\n\tend\n\tif length % length2 == 0 then\n\t\treturn \"NO\"\n\
    \tend\n\tlocal prime = true\n\tlocal prime2 = true\n\tlocal prime3 = true\n\t\
    local prime4 = true\n\tlocal prime5 = true\n\tlocal prime6 = true\n\tlocal prime7\
    \ = true\n\tlocal prime8 = true\n\tlocal prime9 = true\n\tlocal prime10 = true\n\
    \tlocal prime11 = true\n\tlocal prime12 = true\n\tlocal prime13 = true\n\tlocal\
    \ prime14 = true\n\tlocal prime15 = true\n\tlocal prime16 = true\n\tlocal prime17\
    \ = true\n\tlocal prime18 = true\n\tlocal prime19 = true\n\tlocal prime20 = true\n\
    \tlocal prime21 = true\n\tlocal prime22 = true\n\tlocal prime23 = true\n\tlocal\
    \ prime24 = true\n\tlocal prime25 = true\n\tlocal prime26 = true\n\tlocal prime27\
    \ = true\n\tlocal prime28 = true\n\tlocal prime29 = true\n\tlocal prime30 = true\n\
    \tlocal prime31 = true\n\tlocal prime32 = true\n\tlocal prime33 = true\n\tlocal\
    \ prime34 = true\n\tlocal prime35 = true\n\tlocal prime36 = true\n\tlocal prime37\
    \ = true\n\tlocal prime38 = true\n\tlocal prime39 = true\n\tlocal prime40 = true\n\
    \tlocal prime41 = true\n\tlocal prime42 = true\n\tlocal prime43 = true\n\tlocal\
    \ prime44 = true\n\tlocal prime45 = true\n\tlocal prime46 = true\n\tlocal prime47\
    \ = true\n\tlocal prime48 = true\n\tlocal prime49 = true\n\tlocal prime50 = true\n\
    \tlocal prime51 = true\n\tlocal prime52 = true\n\tlocal prime53 = true\n\tlocal\
    \ prime54 = true\n\tlocal prime55 = true\n\tlocal prime56 = true\n\tlocal prime57\
    \ = true\n\tlocal prime58 = true\n\tlocal prime59 = true\n\tlocal prime60 = true\n\
    \tlocal prime61 = true\n\tlocal prime62 = true\n\tlocal prime63 = true\n\tlocal\
    \ prime64 = true\n\tlocal prime65 = true\n"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
