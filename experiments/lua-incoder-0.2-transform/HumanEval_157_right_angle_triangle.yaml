name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ad = math.abs(a - d)\n\treturn ab > bc and (ab > ad or bc > ad)\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal\
    \ ac = math.abs(c-a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (ab > bc) and\
    \ (ab > ac)\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\t\
    local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = a -\
    \ b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_bc\
    \ = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\treturn ab_ac\
    \ + bc_ab == ab_sq + bc_sq and ab_bc + ac_sq == ab_sq + ac_sq\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\
    \tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    return ab_ac >= bc_sq + ab_sq and ab_ac <= ac_sq\nend", "  local ab = a - b\n\
    \  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local ab_bc\
    \ = ab * bc\n  local bc_ac = bc * ac\n  return ab_ac > 0 and ab_bc > 0 and bc_ac\
    \ > 0\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn\
    \ ab == bc and ab == cb\nend", "  local a1 = math.abs(a)\n  local b1 = math.abs(b)\n\
    \  local c1 = math.abs(c)\n  local s = (a1 + b1 + c1)\n  if s <= a1 + b1 + c1\
    \ then\n    return true\n  elseif s == a1 + b1 then\n    return b > 0 and c >\
    \ 0 and b > c\n  elseif s == b1 + c1 then\n    return a > 0 and c > 0 and a >\
    \ c\n  else\n    return false\n  end\nend", "  local ab = a - b\n  local bc =\
    \ b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n  local bc_sq = bc * bc\n\
    \  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq - bc_sq * cb_sq\n  return\
    \ det > 0\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n\
    \  local bc_sqr = bc * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr\
    \ - cb_sqr\n  return det > 0\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\t\
    local ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal bc_2 = bc * bc \n\tlocal ac_2\
    \ = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3 = bc_2 * bc\n\tlocal ac_3\
    \ = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4 = bc_3 * bc\n\tlocal ac_4\
    \ = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5 = bc_4 * bc\n\tlocal ac_5\
    \ = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6 = bc_5 * bc\n\tlocal ac_6\
    \ = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7 = bc_6 * bc\n\tlocal ac_7\
    \ = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8 = bc_7 * bc\n\tlocal ac_8\
    \ = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9 = bc_8 * bc\n\tlocal ac_9\
    \ = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10 = bc_9 * bc\n\tlocal ac_10\
    \ = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal bc_11 = bc_10 * bc\n\tlocal\
    \ ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\tlocal bc_12 = bc_11 * bc\n\
    \tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12 * ab\n\tlocal bc_13 = bc_12\
    \ * bc\n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14 = ab_13 * ab\n\tlocal bc_14\
    \ = bc_13 * bc\n\tlocal ac_14 = ac_13 * ac\n\tlocal ab_15 = ab_14 * ab\n\tlocal\
    \ bc_15 = bc_14 * bc\n\tlocal ac_15 = ac_14 * ac\n\tlocal ab_16 = ab_15 * ab\n\
    \tlocal bc_16 = bc_15 * bc\n\tlocal ac_16 = ac_15 * ac\n\tlocal ab_17 = ab_16\
    \ * ab\n\tlocal bc_17 = bc_16 * bc\n\tlocal ac_17 = ac_16 * ac\n\tlocal ab_18\
    \ = ab", "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  return\
    \ ab == bc and ab == ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ad = math.abs(a - d)\n\tlocal de = math.abs(d - e)\n\treturn ab\
    \ > bc and ab > ad and ab > de\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "  local ab = math.abs(a-b)\n  local bc = math.abs(b-c)\n  local cb = math.abs(c-b)\n\
    \  local abc = ab + bc\n  local ab_cb = ab + cb\n  local ab_c = ab + c\n  local\
    \ bc_cb = bc + cb\n  local bc_c = bc + c\n  local cb_ab_cb = cb + ab_cb\n  local\
    \ cb_ab_c = cb + ab_c\n  local cb_ab_bc = cb + ab_bc\n  local cb_ab_b = cb + ab_b\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_c", "\tlocal a, b, c = a or 0, b or 0, c or 0\n\tlocal ab, bc, cb\
    \ = a - b, c - b, a + b - c\n\treturn ab > bc and ab > cb\nend", "    local ab\
    \ = math.abs(a-b)\n    local bc = math.abs(b-c)\n    local ca = math.abs(c-a)\n\
    \    return ab > bc and ab > ca\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab == bc and ab\
    \ == ac\nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c - b)\n\
    \    local ac = math.abs(c - a)\n    return ab >= bc and ab >= ac\nend", "  local\
    \ a = math.abs(a)\n  local b = math.abs(b)\n  local c = math.abs(c)\n  local ab\
    \ = math.abs(a + b)\n  local bc = math.abs(b + c)\n  local ac = math.abs(a + c)\n\
    \  return ab > bc and\n         ab > ac and\n         bc > ac\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ (ab == bc or ac == math.pi/2)\nend", "  local ab = math.sqrt(math.pow(a, 2)\
    \ + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ((ab > bc)\
    \ and (ab > ac))\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or math.abs(b\
    \ - c) > math.abs(a - c))\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal\
    \ ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal bc_ab = bc * ab\n\treturn ab_ac\
    \ + bc_ab == 0 \nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", " \
    \   local ab = math.abs(a-b)\n    local bc = math.abs(b-c)\n    local ca = math.abs(c-a)\n\
    \    return ab == bc and ab == ca or ab == ca and bc <= ca\nend", "\tlocal ab\
    \ = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (math.abs(b - c) <= ab and math.abs(a - c) <= ab and math.abs(b - c)\
    \ <= ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ad = math.abs(a - d)\n\treturn ab > bc and ab > ad\nend", "\tlocal a, b,\
    \ c = math.abs(a), math.abs(b), math.abs(c)\n\tlocal is_right_angled = false\n\
    \tif a == b and a == c then\n\t\tis_right_angled = true\n\telseif b == c then\n\
    \t\tis_right_angled = true\n\telseif b == a then\n\t\tis_right_angled = true\n\
    \telseif c == a then\n\t\tis_right_angled = true\n\telseif b > c then\n\t\tis_right_angled\
    \ = true\n\telseif b < c then\n\t\tis_right_angled = false\n\telse\n\t\tis_right_angled\
    \ = false\n\tend\n\treturn is_right_angled\nend", "  local ab = a - b\n  local\
    \ bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n  local bc_sqr = bc\
    \ * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr - cb_sqr\n  return\
    \ det > 0 and det < ab_sqr\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b,\
    \ 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "  local ab = a -\
    \ b\n  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and ac\
    \ > 0 and (ab + bc + ac) == (a + b + c)\nend", "  -- Check that the sides are\
    \ all positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n  end", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal abc = ab * bc\n\
    \tlocal abc_2 = abc * abc\n\tlocal abc_3 = abc_2 * abc\n\treturn abc_3 > 0 and\
    \ abc_3 <= abc_2\nend", "  local ab = a - b\n  local bc = b - c\n  local ac =\
    \ c - a\n  return ab == bc and ab == ac\nend", "\tlocal ab = math.abs(a-b)\n\t\
    local bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab\
    \ > ca \nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n \
    \ local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\tlocal ab\
    \ = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b,\
    \ 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = a -\
    \ b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\
    \treturn det > 0\nend", "  local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\
    \  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n  return ab > bc and ab > ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "  local ab = math.abs(b-a)\n  local bc = math.abs(c-b)\n\
    \  local ac = math.abs(c-a)\n  \n  -- Check if all sides are equal\n  if ab ==\
    \ bc and ac == bc then\n    return true\n  end\n  \n  -- Check if all sides are\
    \ equal\n  if ab == bc then\n    return true\n  end\n  \n  -- Check if all sides\
    \ are equal\n  if ac == bc then\n    return true\n  end\n  \n  -- Check if all\
    \ sides are equal\n  if ab == ac then\n    return true\n  end\n  \n  return false\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq\
    \ = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac =\
    \ ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab =\
    \ bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_ab\
    \ = ab_ac * bc_ab\n\tlocal bc_bc_ac = bc_bc * ac\n\tlocal bc_bc_ab = bc_bc * ab\n\
    \tlocal bc_bc_ab_ac = bc_bc * bc_ab\n\tlocal bc_bc_ab_ac_bc = bc_bc * bc_ab *\
    \ ac\n\tlocal bc_bc_ab_ac_bc_ab = bc_bc * bc_ab * ac * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq\
    \ = bc_bc * bc_ab * ac * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq = bc_bc * bc_ab\
    \ * ac * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq = bc_bc * bc_ab * ac\
    \ * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq = bc_bc * bc_ab *\
    \ ac * ab * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq = bc_bc\
    \ * bc_ab * ac * ab * ab * ab * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq\
    \ = bc_bc * bc_ab * ac * ab * ab * ab * ab * ab * ab * ab * ab * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq_sq\
    \ = bc_bc * bc_ab * ac * ab * ab * ab * ab * ab * ab * ab * ab * ab * ab * ab\
    \ * ab\n\tlocal bc_bc_ab_ac_bc_ab_sq_sq_sq_sq_sq_sq_sq_sq_sq_sq = bc_bc * bc_",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab >= bc and ab >= ac\nend", "\t-- Check that the sides are non-zero\n\
    \tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a + b > c and a + c > b and b\
    \ + c > a then\n\t\treturn true\n\tend\n\treturn false\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ == bc and ac == bc\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  local ab_ac = ab * ac\n  local ab_bc = ab * bc\n  local ab_cb = ab\
    \ * cb\n  return ab_ac > 0 and ab_bc > 0 and ab_cb > 0 and ab_ac + ab_bc + ab_cb\
    \ == ab\nend", "\t-- Check that the sides are all positive\n\tif a < 0 or b <\
    \ 0 or c < 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab >= bc and\
    \ ab >= ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\t\n\tif ab == bc and ab == ac then\n\t\treturn\
    \ true\n\telse\n\t\treturn false\n\tend\nend", "  local a1 = math.abs(a - b)\n\
    \  local a2 = math.abs(a - c)\n  local b1 = math.abs(b - c)\n  return a1 == b1\
    \ and a2 == b1 or a1 == b1 or a2 == b1\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ad = math.abs(a - d)\n\treturn ab > bc and ab > ad\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n \
    \ local bc_sq = bc * bc\n  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq\
    \ - bc_sq * cb_sq\n  \n  return det > 0\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (ab + bc ==\
    \ ac)\nend", "\tlocal a, b, c = tonumber(a), tonumber(b), tonumber(c)\n\tif a\
    \ > b and a > c then\n\t\treturn true\n\telseif b > c and b > a then\n\t\treturn\
    \ true\n\telseif c > a and c > b then\n\t\treturn true\n\telse\n\t\treturn false\n\
    \tend\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal\
    \ ca = math.abs(c-a)\n\t\n\tif ab > bc then\n\t\tif ab > ca then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif bc > ca then\n\t\
    \t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend", "  local\
    \ ab = a - b\n  local bc = b - c\n  local ac = c - a\n  local abc = ab * bc\n\
    \  return abc > 0 and abc < ab\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc\
    \ = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab > ca \n\
    end", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (ab > bc) and (ab > ac)\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\t-- Check that the sides are all positive\n\tif a < 0 or b < 0\
    \ or c < 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal cb = math.sqrt(math.pow(c, 2) + math.pow(b, 2))\n\t\n\tif ab > bc then\n\
    \t\tif ab > cb then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \telse\n\t\tif bc > cb then\n\t\t\treturn false\n\t\telse\n\t\t\treturn true\n\
    \t\tend\n\tend\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c -\
    \ b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and (ab\
    \ == bc or ac == math.pi/2)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc =\
    \ math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac\
    \ or math.abs(b - c) > math.abs(a - c))\nend", "  local ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \  local ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n  return ((ab > bc)\
    \ and (ab > ac))\nend", "  local ab = a - b\n  local bc = b - c\n  local ac =\
    \ c - a\n  return ab * bc * ac >= 0\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn ab > bc and\
    \ (ab > ac or math.abs(a - c) > math.abs(b - c))\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\t\
    -- Check that the triangle is valid (non-degenerate)\n\tif a < b and b < c and\
    \ c < a then\n\t\t-- Check that the angles are valid\n\t\tif math.abs(math.atan2(b,a)\
    \ - math.atan2(c,a)) < math.pi then\n\t\t\treturn true\n\t\telse\n\t\t\treturn\
    \ false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend", "  local ab = a - b\n\
    \  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local bc_ab\
    \ = bc * ab\n  local ab_ab = ab * ab\n  return ab_ac > bc_ab and ab_ac > ab_ab\n\
    end", "  local ab = a - b\n  local bc = b - c\n  local cb = c - b\n  local det\
    \ = ab * cb - bc * ab\n  return det > 0\nend", "\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ (ab > ac or bc > ac)\nend", "  local ab = a - b\n  local bc = b - c\n  local\
    \ ac = c - a\n  return ab >= 0 and bc >= 0 and ac >= 0\nend", "\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn ab == bc and ab == cb\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ ab > ac\nend", "\t-- Check that the sides are all positive.\n\tif a < 0 or b\
    \ < 0 or c < 0 then\n\t\treturn false\n\tend", "  -- Check that the sides are\
    \ all positive.\n  if a < 0 or b < 0 or c < 0 then\n    return false\n  end\n\
    \  -- Check that the sides are equal.\n  if a == b and a == c then\n    return\
    \ true\n  end\n  -- Check that the sides are opposite.\n  if a > b and a > c then\n\
    \    return false\n  end\n  -- Check that the sides are opposite.\n  if b > c\
    \ and b > a then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if c > a and c > b then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if a > b and b > c then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if b > a and b > c then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if c > a and c > b then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if a > b and\
    \ c > b then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if b > a and c > a then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if c > a and b > a then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if a > b and b > c then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if b > a and c > a then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if c > a and\
    \ b > a then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if a > b and c > b then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if b > a and c > a then\n    return false\n  end\n  -- Check\
    \ that the sides are opposite.\n  if c > a and b > a then\n    return false\n\
    \  end\n  -- Check that the sides are opposite.\n  if a > b and b > c then\n \
    \   return false\n  end\n  -- Check that the sides are opposite.\n  if b > a and\
    \ c > a then\n    return false\n  end\n  -- Check that the sides are opposite.\n\
    \  if c > a and b > a then\n    return false\n  end\n  -- Check that the sides\
    \ are opposite.\n  if a > b and c > b then\n    return false\n  end\n  ", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab *\
    \ ac\n\tlocal bc_ac = bc * ac\n\treturn ab_ac + bc_ac == 0 \nend", "\tlocal ab\
    \ = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b,\
    \ 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\
    \treturn (math.abs(b - c) == ab and math.abs(a - c) == ac)\nend", "  local ab\
    \ = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ad = math.abs(d - a)\n\
    \  local cd = math.abs(d - c)\n  return ab >= bc and ab >= cd or ad >= bc and\
    \ ad >= cd\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab\
    \ = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac\
    \ = c - a\n\tlocal abc = ab * bc\n\tlocal abc_2 = abc * abc\n\tlocal abc_3 = abc_2\
    \ * abc\n\treturn abc_3 > 0 and abc_3 <= abc_2\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  return ab * bc * ac >= 0\nend", "\t-- Check that the sides are all\
    \ positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc\
    \ and\n         ab > ac and\n         bc > ac\nend", "  local ab = math.abs(b-a)\n\
    \  local bc = math.abs(c-b)\n  local ac = math.abs(c-a)\n  return ab > bc and\
    \ (ab > ac or bc > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", " \
    \ local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and\n         ab > ac and\n         bc > ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab + bc == ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab\
    \ > ac or bc > ac)\nend", "\t-- Check that the sides are non-negative\n\tif a\
    \ < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab >= bc and ab >= ac\nend", " \
    \ local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sqr = ab\
    \ * ab\n  local bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local ab_ac = ab\
    \ * ac\n  local ab_ac_squr = ab_ac * ab_ac\n  local bc_ab = bc * ab\n  local bc_ab_squr\
    \ = bc_ab * bc_ab\n  local det = ab_sqr + bc_sqr - ab_ac_squr\n  if det < 0 then\n\
    \    return false\n  elseif det > 0 then\n    return true\n  else\n    return\
    \ ab_ac_squr < bc_ab_squr\n  end\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab\
    \ > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or math.abs(b - c) <\
    \ math.abs(a - c))\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  local ab_sqr = ab * ab\n  local bc_sqr = bc * bc \n  local ac_sqr\
    \ = ac * ac\n  local ab_ac = ab * ac\n  local ab_bc = ab * bc\n  local bc_ac =\
    \ bc * ac\n  local ab_ac_bc = ab_ac * bc\n  local ab_bc_ac = ab_bc * ac\n  local\
    \ ab_ac_bc_sqr = ab_ac_bc * ab_ac_bc\n  local ab_bc_ac_bc_sqr = ab_bc_ac * ab_bc_ac\n\
    \  local ab_ac_bc_sqr_bc_ac = ab_ac_bc * ab_bc_ac\n  local ab_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr * ab_bc_ac_bc\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac\n  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc * ab_bc_ac\n\
    \  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc_sqr * ab_bc_ac_bc * ab_bc_ac\n\
    \  local ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr\
    \ * ab_bc_ac_bc_sqr * ab_b", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal\
    \ ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal bc_ac = bc * ac\n\tlocal ab_bc\
    \ = ab * bc\n\tlocal det = ab_ac * bc_ac - ab_bc * ab_ac\n\treturn det > 0\nend",
  "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_sq = ab\
    \ * ab\n  local bc_sq = bc * bc\n  local ac_sq = ac * ac\n  local ab_ac = ab *\
    \ ac\n  return ab_sq + bc_sq == ab_ac + bc_sq\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "  local ab = a - b\n  local bc = b - c\n  local cb\
    \ = c - b\n  local det = ab * cb - bc * ab\n  return det > 0\nend", "\tlocal ab\
    \ = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sqr = ab * ab\n\t\
    local bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    local ab_ac_squared = ab_ac * ab_ac\n\tlocal bc_ab = bc * ab\n\tlocal bc_ab_squared\
    \ = bc_ab * bc_ab\n\tlocal bc_ac = bc * ac\n\tlocal bc_ac_squared = bc_ac * bc_ac\n\
    \tlocal det = ab_sqr + bc_sqr - ab_ac_squared\n\tlocal s = ab_sqr - bc_sqr + ab_ac_squared\n\
    \tlocal t = bc_sqr - ab_ac_squared\n\tlocal u = (bc_ab - ab_ac) / det\n\tlocal\
    \ v = (ab_ac - bc_ab) / det\n\treturn u * u + v * v > 0 and u * v - v * u > 0\n\
    end", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac\
    \ = math.abs(c - a)\n  return ab == bc and ab == ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ == bc and ab == ac\nend", "\tlocal a1 = math.abs(a)\n\tlocal b1 = math.abs(b)\n\
    \tlocal c1 = math.abs(c)\n\tlocal a2 = a1 + b1\n\tlocal b2 = b1 + c1\n\tlocal\
    \ c2 = c1 + a1\n\treturn a2 >= b2 and a2 >= c2 and b2 >= c2\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab ==\
    \ ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal\
    \ ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal\
    \ ab_ac = ab * ac\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\treturn\
    \ ab_sqr + bc_sqr + ac_sqr - ab_ac - ab_bc - bc_ac > 0\nend", "    local ab =\
    \ math.abs(b - a)\n    local bc = math.abs(c - b)\n    local ac = math.abs(c -\
    \ a)\n    return ab > bc and\n        ab > ac and\n        bc > ac\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and (ab > ac or bc > ac)\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "  --\
    \ Check that the sides are non-zero\n  if a or b or c then return false end\n\
    \  -- Check that the sides are equal\n  if a == b and b == c then return true\
    \ end\n  -- Check that the sides are equal\n  if a == c and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == b then return\
    \ true end\n  -- Check that the sides are equal\n  if a == b and c == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and b == c then return\
    \ true end\n  -- Check that the sides are equal\n  if a == c and c == c then return\
    \ true end", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\tlocal\
    \ bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "\tlocal a = math.abs(a)\n\
    \tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal ab = math.abs(a + b)\n\
    \tlocal bc = math.abs(b + c)\n\tlocal cb = math.abs(c + b)\n\treturn (ab == bc\
    \ and ab == cb) or (ab == cb and bc >= ab)\nend", "\tlocal ab = a - b\n\tlocal\
    \ bc = b - c\n\tlocal ac = a - c\n\treturn ab == bc and ab == ac\nend", "\t--\
    \ Check that the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\
    \treturn false\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a\
    \ == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\t\
    if b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\t\
    if a == b or b == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n",
  "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab\
    \ * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab *\
    \ ac\n\treturn ab_ac >= bc_sq + ab_sq and ab_ac >= ac_sq + bc_sq\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(a\
    \ - d)\n\treturn ab > bc and ab > ad\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc and\
    \ ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local ac = c - a\n  local ab_2 = ab * ab\n  local\
    \ bc_2 = bc * bc \n  local ac_2 = ac * ac\n  local ab_2_ac = ab_2 * ac\n  local\
    \ ab_2_ab = ab_2 * ab\n  local bc_2_bc = bc_2 * bc\n  local bc_2_ab = bc_2 * ab\n\
    \  local bc_2_ac = bc_2 * ac\n  local ab_2_ab_ac = ab_2_ab * ac\n  local ab_2_ab_bc\
    \ = ab_2_ab * bc\n  local ab_2_ab_ac_bc = ab_2_ab_ac * bc\n  local ab_2_ab_ac_bc_2\
    \ = ab_2_ab_ac_bc * bc\n  local ab_2_ab_ac_bc_2_2 = ab_2_ab_ac_bc_2 * bc\n  local\
    \ ab_2_ab_ac_bc_2_2_2 = ab_2_ab_ac_bc_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2\
    \ * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2_2 * bc\n  local\
    \ ab_2_ab_ac_bc_2_2_2_2_2_2_2 = ab_2_ab_ac_bc_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2_2\
    \ = ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2 * bc\n  local ab_2_ab_ac_bc_2_2_2_2_2_2_2_2_2_",
  "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc *\
    \ ac >= 0\nend", "  -- Check that the sides are all positive\n  if a < 0 or b\
    \ < 0 or c < 0 then\n    return false\n  end\n  -- Check that the sides are equal\n\
    \  if a == b and a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if b == c then\n    return true\n  end\n  -- Check that the sides\
    \ are equal\n  if a == b or b == c or c == a then\n    return true\n  end\n  --\
    \ Check that the sides are equal\n  if a == b or a == c or b == c then\n    return\
    \ true\n  end\n  -- Check that the sides are equal\n  if a == b or a == c or c\
    \ == b then\n    return true\n  end\n  -- Check that the sides are equal\n  if\
    \ a == b or a == c or b == c then\n    return true\n  end\n  -- Check that the\
    \ sides are equal\n  if a == b or a == c or c == b then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n \
    \   return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or c == b then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or c == a then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or c == b then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or c == a ",
  "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab\
    \ * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab *\
    \ ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal bc_ab = bc *\
    \ ab\n\tlocal ac_ac = ac * ac\n\tlocal ac_ab = ac * ab\n\treturn (ab_sq + bc_sq\
    \ + ac_sq) == ab_ac + bc_ab + ac_ab\nend", "\tlocal ab = math.abs(a-b)\n\tlocal\
    \ bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\treturn ab > bc and (ab > ca\
    \ or bc > ca)\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\
    \tlocal ac = math.abs(c-a)\n\treturn ab > bc and ab > ac\nend", "  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab >= bc and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and (ab\
    \ > ac or bc > ac)\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  local ab_2 = ab * ab\n  local bc_2 = bc * bc \n  local ac_2 = ac\
    \ * ac\n  local ab_3 = ab_2 * ab\n  local bc_3 = bc_2 * bc\n  local ac_3 = ac_2\
    \ * ac\n  local ab_4 = ab_3 * ab\n  local bc_4 = bc_3 * bc\n  local ac_4 = ac_3\
    \ * ac\n  local ab_5 = ab_4 * ab\n  local bc_5 = bc_4 * bc\n  local ac_5 = ac_4\
    \ * ac\n  local ab_6 = ab_5 * ab\n  local bc_6 = bc_5 * bc\n  local ac_6 = ac_5\
    \ * ac\n  local ab_7 = ab_6 * ab\n  local bc_7 = bc_6 * bc\n  local ac_7 = ac_6\
    \ * ac\n  local ab_8 = ab_7 * ab\n  local bc_8 = bc_7 * bc\n  local ac_8 = ac_7\
    \ * ac\n  local ab_9 = ab_8 * ab\n  local bc_9 = bc_8 * bc\n  local ac_9 = ac_8\
    \ * ac\n  local ab_10 = ab_9 * ab\n  local bc_10 = bc_9 * bc\n  local ac_10 =\
    \ ac_9 * ac\n  local ab_11 = ab_10 * ab\n  local bc_11 = bc_10 * bc\n  local ac_11\
    \ = ac_10 * ac\n  local ab_12 = ab_11 * ab\n  local bc_12 = bc_11 * bc\n  local\
    \ ac_12 = ac_11 * ac\n  local ab_13 = ab_12 * ab\n  local bc_13 = bc_12 * bc\n\
    \  local ac_13 = ac_12 * ac\n  local ab_14 = ab_13 * ab\n  local bc_14 = bc_13\
    \ * bc\n  local ac_14 = ac_13 * ac\n  local ab_15 = ab_14 * ab\n  local bc_15\
    \ = bc_14 * bc\n  local ac_15 = ac_14 * ac\n  local ab_16 = ab_15 * ab\n  local\
    \ bc_16 = bc_15 * bc\n  local ac_16 = ac_15 * ac\n  local ab_17 = ab_16 * ab\n\
    \  local bc_17 = bc_16 * bc\n  local ac_17 = ac_16 * ac\n  local ab_18 = ab",
  "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sqr = ab\
    \ * ab\n\tlocal bc_sqr = bc * bc \n\tlocal cb_sqr = cb * cb\n\tlocal ab_cub =\
    \ (ab_sqr + bc_sqr + cb_sqr) ^ 3\n\tlocal bc_cub = (bc_sqr + ab_sqr + cb_sqr)\
    \ ^ 3\n\tlocal cb_cub = (cb_sqr + ab_sqr + ab_cub) ^ 3\n\treturn ab_cub + bc_cub\
    \ + cb_cub == 0 \nend", "    local ab = math.abs(b - a)\n    local bc = math.abs(c\
    \ - b)\n    local ad = math.abs(a - d)\n    local de = math.abs(d - a)\n    return\
    \ ab > bc and ab > ad and bc > de\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc) and (ab\
    \ > ac)\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\t\
    local ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal\
    \ ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal\
    \ bc_ab = bc * ab\n\tlocal ac_bc = ac * bc\n\tlocal ac_bc = ac * bc\n\tlocal ab_ac_bc\
    \ = ab_ac * bc\n\tlocal ab_ac_bc_sq = ab_ac_bc * ab_ac_bc\n\tlocal bc_ab_sq =\
    \ bc_ab * bc_ab\n\tlocal bc_ab_ac = bc_ab * ac_bc\n\tlocal bc_ab_ac_bc = bc_ab\
    \ * ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq\
    \ = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\
    \tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc\
    \ * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq\
    \ = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\
    \tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc\
    \ * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq\
    \ = bc_ab_ac_bc * bc_ab_ac_bc\n\tlocal bc_ab_ac_bc_sq = bc_ab_ac_bc * bc_ab_ac",
  "\t-- Check that the sides are non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\
    \treturn false\n\tend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc) and (ab > ac)\nend", "\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\
    \ ab > ac\nend", "\t-- Check that the sides are non-zero\n\tif a ~= 0 or b ~=\
    \ 0 or c ~= 0 then\n\t\treturn false\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b and a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == b or a == c or b == c then\n\t\treturn false\n\tend\n\t\
    -- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c\
    \ or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c ",
  "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab\
    \ * ac\n\tlocal bc_ab = bc * ab\n\tlocal ab_ab = ab * ab\n\treturn ab_ac + bc_ab\
    \ - ab_ab == 0\nend", "  local ab = math.abs(b-a)\n  local bc = math.abs(c-b)\n\
    \  local ac = math.abs(c-a)\n  return ab >= bc and ab >= ac\nend", "\t-- Check\
    \ that the sides are valid\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\t\
    return true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b == c\
    \ or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or a == c or c == b then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or c == b then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c or c == b then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a\
    \ == c or c == b then\n\t\treturn true\n", "    local ab = a - b\n    local bc\
    \ = b - c\n    local ac = c - a\n    local ab_ac = ab * ac\n    local bc_ab =\
    \ bc * ab\n    local ab_ab = ab * ab\n    return ab_ac + bc_ab - ab_ab == 0\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn (ab\
    \ > 0 and bc > 0 and ac > 0) or (ab > 0 and bc > 0 and ac < 0)\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\
    \tlocal bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq * bc_sq\
    \ - cb_sq * ab_sq\n\treturn det > 0\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ad = math.abs(a - d)\n  return ab > bc and (ab\
    \ > ad or bc > ad)\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  return ab > 0 and bc > 0 and ac > 0 and ab + bc + ac == 1\nend",
  "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and (ab > ac or math.abs(b - c) > math.abs(a - c))\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac\
    \ = c - a\n\tlocal ab_ac = ab * ac\n\tlocal bc_ab = bc * ab\n\treturn ab_ac >\
    \ bc_ab\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab >= bc and ab >= ac\nend", "\tlocal ab\
    \ = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn (ab > bc and ab > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "\tlocal ab = a - b\n\
    \tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal bc_2 =\
    \ bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3 = bc_2\
    \ * bc\n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4 = bc_3\
    \ * bc\n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5 = bc_4\
    \ * bc\n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6 = bc_5\
    \ * bc\n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7 = bc_6\
    \ * bc\n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8 = bc_7\
    \ * bc\n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9 = bc_8\
    \ * bc\n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10 = bc_9\
    \ * bc\n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal bc_11 =\
    \ bc_10 * bc\n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\tlocal\
    \ bc_12 = bc_11 * bc\n\tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12 * ab\n\
    \tlocal bc_13 = bc_12 * bc\n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14 = ab_13\
    \ * ab\n\tlocal bc_14 = bc_13 * bc\n\tlocal ac_14 = ac_13 * ac\n\tlocal ab_15\
    \ = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc\n\tlocal ac_15 = ac_14 * ac\n\tlocal\
    \ ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc\n\tlocal ac_16 = ac_15 * ac\n\
    \tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc\n\tlocal ac_17 = ac_16\
    \ * ac\n\tlocal ab_18 = ab", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab >= bc and ab >= ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal a,\
    \ b, c = math.abs(a), math.abs(b), math.abs(c)\n\treturn (a + b > c) and (a +\
    \ c > b) and (a + b > c)\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal\
    \ ac = c - a\n\tlocal ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc \n\tlocal ac_sqr\
    \ = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac =\
    \ bc * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc \n\tlocal ab_bc =\
    \ ab * bc\n\treturn ab_sqr + bc_sqr + ac_sqr == ab_ac + bc_ac + ab_bc\nend", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb\
    \ - bc * ab\n\treturn det > 0\nend", "\tlocal a, b, c = math.abs(a), math.abs(b),\
    \ math.abs(c)\n\tif a == b and a == c then return true end\n\tif a == c then return\
    \ b == c end\n\tif b == c then return b == a end\n\treturn false\nend", "\tlocal\
    \ a, b, c = tonumber(a), tonumber(b), tonumber(c)\n\tif a < b and a < c then return\
    \ false end\n\tif b < c and b < a then return false end\n\tif c < a and c < b\
    \ then return false end\n\treturn true\nend", "  -- Check that the sides are all\
    \ positive\n  if a < 0 or b < 0 or c < 0 then\n    return false\n  end\n  -- Check\
    \ that the sides are equal\n  if a == b and a == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if b == c then\n    return true\n  end\n\
    \  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n \
    \   return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check that the sides are equal\n  if a == b or a\
    \ == c or b == c then\n    return true\n  end\n  -- Check that the sides are equal\n\
    \  if a == b or a == c or b == c then\n    return true\n  end\n  -- Check that\
    \ the sides are equal\n  if a == b or a == c or b == c then\n    return true\n\
    \  end\n  -- Check that the sides are equal\n  if a == b or a == c or b == c then\n\
    \    return true\n  end\n  -- Check ", "  local ab = a - b\n  local bc = b - c\n\
    \  local ac = c - a\n  return ab >= 0 and bc >= 0 and ac >= 0 and ab + bc + ac\
    \ == 1\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\t\
    local ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\t\
    local ab_ac = ab * ac\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal\
    \ ab_bc_ac = ab_bc * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_sqr =\
    \ ab_ac_bc * ab_ac_bc\n\tlocal ab_ac_bc_sqrsqr = (ab_ac_bc * ab_ac_bc) * (ab_ac_bc\
    \ * ab_ac_bc)\n\tlocal ab_ac_bc_sqrsqrsqr = (ab_ac_bc_sqrsqr * ab_ac_bc_sqrsqr)\
    \ * (ab_ac_bc_sqrsqr * ab_ac_bc_sqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqr\
    \ * ab_ac_bc_sqrsqrsqr) * (ab_ac_bc_sqrsqrsqr * ab_ac_bc_sqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqr\
    \ = (ab_ac_bc_sqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqr *\
    \ ab_ac_bc_sqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqrsqrsqr\
    \ * ab_ac_bc_sqrsqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqr)\n\
    \tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr = (ab_ac_bc_sqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\
    \ * (ab_ac_bc_sqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr\
    \ = (ab_ac_bc_sqrsqrsqrsqrsqrsqrsqr * ab_ac_bc_sqrsqrsqrsqrsqrsqr) * (ab_ac_bc_sqrsqrsqrsqrsqrsqr\
    \ * ab_ac_bc_sqrsqrsqrsqrsqrsqr)\n\tlocal ab_ac_bc_sqrsqrsqrsqrsqrsqr = (ab_ac_bc_",
  "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\
    \treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab >\
    \ ac)\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = a - c\n\tlocal\
    \ ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc \n\tlocal ac_sqr = ac * ac\n\tlocal\
    \ ab_ac = ab * ac\n\tlocal ab_bc = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal ab_ac_bc\
    \ = ab_ac * bc\n\tlocal ab_bc_ac = ab_bc * ac\n\tlocal ab_ac_bc_sqr = ab_ac_bc\
    \ * ab_ac_bc\n\tlocal ab_bc_ac_bc_sqr = ab_bc_ac * ab_bc_ac\n\tlocal ab_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr * bc\n\tlocal ab_bc_ac_bc_sqr_bc_ac = ab_bc_ac_bc_sqr * bc\n\t\
    local ab_ac_bc_sqr_bc_ac_bc_sqr = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr\
    \ = ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac\n\tlocal ab_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac_bc_sqr\n\tlocal ab_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac_bc_sqr_bc_ac\
    \ = ab_bc_ac_bc_sqr_bc_ac * ab_bc_ac_bc_sqr_bc_ac_b", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac\
    \ = c - a\n\treturn (ab + bc == ac)\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal\
    \ ca = math.abs(c-a)\n\t\n\tif ab*bc*ca > ab*ca*ca then\n\t\treturn true\n\telse\n\
    \t\treturn false\n\tend\nend", "  local ab = a - b\n  local bc = b - c\n  local\
    \ ac = c - a\n  local ab_sqr = ab * ab\n  local bc_sqr = bc * bc \n  local ac_sqr\
    \ = ac * ac\n  local ab_ac = ab * ac\n  local ab_ac_squared = ab_ac * ab_ac\n\
    \  local bc_bc_sqr = bc * bc \n  local bc_bc_squared_squared = bc_bc_sqr * bc_bc_sqr\n\
    \  local det = ab_sqr + bc_sqr - ab_ac_squared\n  local s = ab_sqr - bc_sqr +\
    \ ab_ac_squared\n  local t = bc_sqr - ab_ac_squared\n  local u = (bc_bc_squared_squared\
    \ - ab_ac_squared) / det\n  local v = (ab_ac_squared) / det\n  local w = ab_ac_squared\n\
    \  return u > 0 and v > 0 and w > 0\nend", "\tlocal ab = a - b\n\tlocal bc = b\
    \ - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\treturn det > 0\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or math.abs(a - b) > math.abs(b - a))\nend", "\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\tif det < 0 then\n\t\treturn false\n\telseif det > 0 then\n\t\treturn true\n\
    \telse\n\t\treturn ((ab * cb) - (bc * ab)) > 0\n\tend\nend", "  local ab = a -\
    \ b\n  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local\
    \ bc_ab = bc * ab\n  return ab_ac > bc_ab\nend", "\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(a-c)\n\tif ab > bc then\n\t\t\
    if ab > ac then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\t\
    else\n\t\tif bc > ac then\n\t\t\treturn false\n\t\telse\n\t\t\treturn true\n\t\
    \tend\n\tend\nend", "    local ab = math.abs(a-b)\n    local bc = math.abs(b-c)\n\
    \    local cb = math.abs(c-b)\n    local abc = ab + bc + cb\n    return abc >\
    \ math.sqrt(ab*ab + bc*bc + cb*cb)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab\
    \ > ac or bc > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ad = math.abs(d - a)\n\tlocal cd = math.abs(d - c)\n\treturn ab\
    \ == bc and ab == cd or ad == bc and ad == cd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
