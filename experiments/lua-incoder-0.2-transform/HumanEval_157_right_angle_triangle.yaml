name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n-- sides form a right-angled triangle, False otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ad = math.abs(a - d)\n\treturn ab > bc and (ab > ad or bc > ad)\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal\
    \ ac = math.abs(c-a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = math.sqrt(math.pow(a,\
    \ 2) + math.pow(b, 2))\n\tlocal bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\
    \tlocal ac = math.sqrt(math.pow(a, 2) + math.pow(c, 2))\n\treturn (ab > bc) and\
    \ (ab > ac)\nend", "\tlocal ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n\t\
    local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n\tlocal ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = a -\
    \ b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal\
    \ bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal ab_bc\
    \ = ab * bc\n\tlocal bc_ac = bc * ac\n\tlocal bc_ab = bc * ab\n\treturn ab_ac\
    \ + bc_ab == ab_sq + bc_sq and ab_bc + ac_sq == ab_sq + ac_sq\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_sq = ab * ab\n\
    \tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal ab_ac = ab * ac\n\t\
    return ab_ac >= bc_sq + ab_sq and ab_ac <= ac_sq\nend", "  local ab = a - b\n\
    \  local bc = b - c\n  local ac = c - a\n  local ab_ac = ab * ac\n  local ab_bc\
    \ = ab * bc\n  local bc_ac = bc * ac\n  return ab_ac > 0 and ab_bc > 0 and bc_ac\
    \ > 0\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn\
    \ ab == bc and ab == cb\nend", "  local a1 = math.abs(a)\n  local b1 = math.abs(b)\n\
    \  local c1 = math.abs(c)\n  local s = (a1 + b1 + c1)\n  if s <= a1 + b1 + c1\
    \ then\n    return true\n  elseif s == a1 + b1 then\n    return b > 0 and c >\
    \ 0 and b > c\n  elseif s == b1 + c1 then\n    return a > 0 and c > 0 and a >\
    \ c\n  else\n    return false\n  end\nend", "  local ab = a - b\n  local bc =\
    \ b - c\n  local cb = c - b\n  local ab_sq = ab * ab\n  local bc_sq = bc * bc\n\
    \  local cb_sq = cb * cb\n  local det = ab_sq * bc_sq - bc_sq * cb_sq\n  return\
    \ det > 0\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sqr = ab * ab\n\
    \  local bc_sqr = bc * bc \n  local cb_sqr = cb * cb\n  local det = ab_sqr + bc_sqr\
    \ - cb_sqr\n  return det > 0\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\t\
    local ac = c - a\n\tlocal ab_2 = ab * ab\n\tlocal bc_2 = bc * bc \n\tlocal ac_2\
    \ = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\tlocal bc_3 = bc_2 * bc\n\tlocal ac_3\
    \ = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\tlocal bc_4 = bc_3 * bc\n\tlocal ac_4\
    \ = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\tlocal bc_5 = bc_4 * bc\n\tlocal ac_5\
    \ = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\tlocal bc_6 = bc_5 * bc\n\tlocal ac_6\
    \ = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\tlocal bc_7 = bc_6 * bc\n\tlocal ac_7\
    \ = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\tlocal bc_8 = bc_7 * bc\n\tlocal ac_8\
    \ = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\tlocal bc_9 = bc_8 * bc\n\tlocal ac_9\
    \ = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\tlocal bc_10 = bc_9 * bc\n\tlocal ac_10\
    \ = ac_9 * ac\n\tlocal ab_11 = ab_10 * ab\n\tlocal bc_11 = bc_10 * bc\n\tlocal\
    \ ac_11 = ac_10 * ac\n\tlocal ab_12 = ab_11 * ab\n\tlocal bc_12 = bc_11 * bc\n\
    \tlocal ac_12 = ac_11 * ac\n\tlocal ab_13 = ab_12 * ab\n\tlocal bc_13 = bc_12\
    \ * bc\n\tlocal ac_13 = ac_12 * ac\n\tlocal ab_14 = ab_13 * ab\n\tlocal bc_14\
    \ = bc_13 * bc\n\tlocal ac_14 = ac_13 * ac\n\tlocal ab_15 = ab_14 * ab\n\tlocal\
    \ bc_15 = bc_14 * bc\n\tlocal ac_15 = ac_14 * ac\n\tlocal ab_16 = ab_15 * ab\n\
    \tlocal bc_16 = bc_15 * bc\n\tlocal ac_16 = ac_15 * ac\n\tlocal ab_17 = ab_16\
    \ * ab\n\tlocal bc_17 = bc_16 * bc\n\tlocal ac_17 = ac_16 * ac\n\tlocal ab_18\
    \ = ab", "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  return\
    \ ab == bc and ab == ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ad = math.abs(a - d)\n\tlocal de = math.abs(d - e)\n\treturn ab\
    \ > bc and ab > ad and ab > de\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "  local ab = math.abs(a-b)\n  local bc = math.abs(b-c)\n  local cb = math.abs(c-b)\n\
    \  local abc = ab + bc\n  local ab_cb = ab + cb\n  local ab_c = ab + c\n  local\
    \ bc_cb = bc + cb\n  local bc_c = bc + c\n  local cb_ab_cb = cb + ab_cb\n  local\
    \ cb_ab_c = cb + ab_c\n  local cb_ab_bc = cb + ab_bc\n  local cb_ab_b = cb + ab_b\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_cb_ab_cb = ab_c + cb_ab_cb\n  local abc_cb_ab_c = ab_c + cb_ab_c\n\
    \  local abc_cb_ab_bc = ab_c + cb_ab_bc\n  local abc_cb_ab_b = ab_c + cb_ab_b\n\
    \  local abc_c"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
