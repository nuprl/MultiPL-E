language: scala
name: HumanEval_106_f
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l = l :+ factorial(i)\n\
    \            else l = l :+ sum(i)\n        }\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygi_fe79.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygi_fe79.scala:15:26\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7swo0n0o.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7swo0n0o.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n            else\
    \ l += (1 to i).sum\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1fk5ydxi.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        return List()\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpje1810ph.scala:15)\n\tat Problem.main(tmpje1810ph.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sz6445n.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7sz6445n.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ list = list :+ factorial(i)\n            } else {\n                list = list\
    \ :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokxqj7wd.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpokxqj7wd.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result += factorial(i)\n            } else {\n                result +=\
    \ sum(i)\n            }\n        }\n        result.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpi0x956ke.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpi0x956ke.scala:17:26 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjxumftai.scala:10:35\
    \ --------------------\e[0m\e[0m\n\e[31m10 |\e[0m    \e[33mdef\e[0m \e[36mf\e\
    [0m(\e[36mn\e[0m : \e[35mLong\e[0m) : \e[35mList\e[0m[\e[35mLong\e[0m] = {\n\e\
    [31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    Unit\n\e[31m   |\e[0m          \
    \                         Required: List[Long]\n\e[31m11 |\e[0m        \e[34m//\
    \ Write your code here\e[0m\n\e[31m12 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009924
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                list = list :+ fact\n        \
    \    } else {\n                var sum = 0\n                for (j <- 1 to i)\
    \ {\n                    sum += j\n                }\n                list = list\
    \ :+ sum\n            }\n        }\n        return list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ list = list :+ factorial(i)\n            } else {\n                list = list\
    \ :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpokxqj7wd.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpokxqj7wd.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpts97yi8v.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpts97yi8v.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var f = 1\n              \
    \  for (j <- 1 to i) {\n                    f *= j\n                }\n      \
    \          l = l :+ f\n            } else {\n                var s = 0\n     \
    \           for (j <- 1 to i) {\n                    s += j\n                }\n\
    \                l = l :+ s\n            }\n        }\n        return l\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmg9gzllx.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmg9gzllx.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sz6445n.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7sz6445n.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val l = new ListBuffer[Long]\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n            else\
    \ l += sum(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_59llc96.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_59llc96.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ factorial(i)\n  \
    \          } else {\n                l = l :+ sum(i)\n            }\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyri9oqd9.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyri9oqd9.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val l = new ListBuffer[Long]\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                l += factorial\n            } else {\n   \
    \             var sum = 0\n                for (j <- 1 to i) {\n             \
    \       sum += j\n                }\n                l += sum\n            }\n\
    \        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        // Return the list\
    \ of numbers\n        var l = ListBuffer[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l += fact\n            } else {\n                var sum = 0\n\
    \                for (j <- 1 to i) {\n                    sum += j\n         \
    \       }\n                l += sum\n            }\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                l += (1 to i).product\n\
    \            } else {\n                l += (1 to i).sum\n            }\n    \
    \    }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val l = new ListBuffer[Long]\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n            else\
    \ l += sum(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_59llc96.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_59llc96.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1L\n                for (j <- 1L to i) {\n                 \
    \   factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0L\n                for (j <-\
    \ 1L to i) {\n                    sum += j\n                }\n              \
    \  list = list :+ sum\n            }\n        }\n        return list\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009932
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        def sum(n\
    \ : Long) : Long = {\n            if (n == 0) 0\n            else n + sum(n -\
    \ 1)\n        }\n        def f(n : Long, i : Long) : List[Long] = {\n        \
    \    if (i == n) List()\n            else if (i % 2 == 0) factorial(i) :: f(n,\
    \ i + 1)\n            else sum(i) :: f(n, i + 1)\n        }\n        f(n, 1)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3p12ysyr.scala:27)\n\tat Problem.main(tmp3p12ysyr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009932
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpj5vwymoe.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpj5vwymoe.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var lst = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                lst = lst :+ fact\n          \
    \  } else {\n                var sum = 0\n                for (j <- 1 to i) {\n\
    \                    sum += j\n                }\n                lst = lst :+\
    \ sum\n            }\n        }\n        return lst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4r7hnp.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwa4r7hnp.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bnj3kox.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bnj3kox.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        def factorial(n :\
    \ Long) : Long = {\n            if (n == 0) 1\n            else n * factorial(n\
    \ - 1)\n        }\n        def sum(n : Long) : Long = {\n            if (n ==\
    \ 0) 0\n            else n + sum(n - 1)\n        }\n        (1 to n.toInt).map(x\
    \ => if (x % 2 == 0) factorial(x) else sum(x)).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        List()\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8a_qs918.scala:15)\n\tat Problem.main(tmp8a_qs918.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l += sum\n       \
    \     }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009935
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result += factorial(i)\n\
    \            } else {\n                result += sum(i)\n            }\n     \
    \   }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7sz6445n.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp7sz6445n.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n  \
    \              for (j <- 1 to i) {\n                    fact *= j\n          \
    \      }\n                l += fact\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                l += sum\n            }\n        }\n     \
    \   l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result += sum\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        def factorial(n : Long) : Long = {\n            if\
    \ (n == 0) 1\n            else n * factorial(n - 1)\n        }\n        var result\
    \ = ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i %\
    \ 2 == 0) result += factorial(i)\n            else result += (1 to i).sum\n  \
    \      }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4r7hnp.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwa4r7hnp.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                l = l :+ factorial\n            } else {\n        \
    \        var sum = 0\n                for (j <- 1 to i) {\n                  \
    \  sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                l = l :+ factorial\n            } else {\n        \
    \        var sum = 0\n                for (j <- 1 to i) {\n                  \
    \  sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxm5qs5zj.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxm5qs5zj.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n\
    \                for (j <- 1 to i) {\n                    fact *= j\n        \
    \        }\n                list += fact\n            } else {\n             \
    \   var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                list += sum\n            }\n      \
    \  }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = new ListBuffer[Long]\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result += sum\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009937
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ factorial(i)\n            } else {\n                l = l :+ sum(i)\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26kllhkt.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp26kllhkt.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009941
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n\
    \            else l += sum(i)\n        }\n        l.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxazkihiw.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxazkihiw.scala:15:22\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ factorial(i)\n  \
    \          } else {\n                l = l :+ sum(i)\n            }\n        }\n\
    \        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyri9oqd9.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpyri9oqd9.scala:16:25 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result += sum\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                list += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                list += sum\n    \
    \        }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqli_0cb3.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqli_0cb3.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnpxzg0sb.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpnpxzg0sb.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ (1 to i).product\n            } else {\n           \
    \     result = result :+ (1 to i).sum\n            }\n        }\n        result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009943
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxm5qs5zj.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpxm5qs5zj.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009933
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      result = result :+ factorial(i)\n            } else {\n               \
    \ result = result :+ sum(i)\n            }\n        }\n        result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:15:35 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpgritoxwv.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009928
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8bnj3kox.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp8bnj3kox.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwo9xoe_d.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4r7hnp.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwa4r7hnp.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = new\
    \ ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) result += factorial(i)\n            else result += sum(i)\n        }\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2w_mwtmm.scala:14:38 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += factorial(i)\n\e[31m\e[31m   |\e[0m                           \
    \           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \    Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp2w_mwtmm.scala:15:27 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m            \e[33melse\e[0m result += sum(i)\n\e[31m\e[31m   |\e[0m       \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpts97yi8v.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpts97yi8v.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1L to n)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ (1L to i).product\n\
    \            } else {\n                list = list :+ (1L to i).sum\n        \
    \    }\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009945
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz95cqu9c.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz95cqu9c.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1L to\
    \ n) {\n            if (i % 2 == 0) {\n                result = result :+ factorial(i)\n\
    \            } else {\n                result = result :+ sum(i)\n           \
    \ }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjk0dkf3_.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpjk0dkf3_.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l : List[Long] = List()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial : Long\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                l = l :+ factorial\n            } else {\n\
    \                var sum : Long = 0\n                for (j <- 1 to i) {\n   \
    \                 sum += j\n                }\n                l = l :+ sum\n\
    \            }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009944
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n  \
    \              for (j <- 1 to i) {\n                    fact *= j\n          \
    \      }\n                l += fact\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                l += sum\n            }\n        }\n     \
    \   l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgypgazui.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgypgazui.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpts97yi8v.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpts97yi8v.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n  \
    \              for (j <- 1 to i) fact *= j\n                l += fact\n      \
    \      } else {\n                var sum = 0\n                for (j <- 1 to i)\
    \ sum += j\n                l += sum\n            }\n        }\n        l.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n\
    \                for (j <- 1 to i) {\n                    fact *= j\n        \
    \        }\n                list += fact\n            } else {\n             \
    \   var sum = 0\n                for (j <- 1 to i) {\n                    sum\
    \ += j\n                }\n                list += sum\n            }\n      \
    \  }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l : List[Long] = List()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var fact : Long =\
    \ 1\n                for (j <- 1 to i) {\n                    fact *= j\n    \
    \            }\n                l = l :+ fact\n            } else {\n        \
    \        var sum : Long = 0\n                for (j <- 1 to i) {\n           \
    \         sum += j\n                }\n                l = l :+ sum\n        \
    \    }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result:List[Long]\
    \ = List()\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n\
    \                var factorial:Long = 1\n                for (j <- 1 to i) {\n\
    \                    factorial *= j\n                }\n                result\
    \ = result :+ factorial\n            } else {\n                var sum:Long =\
    \ 0\n                for (j <- 1 to i) {\n                    sum += j\n     \
    \           }\n                result = result :+ sum\n            }\n       \
    \ }\n        return result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpive2u_7z.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpive2u_7z.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009944
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ factorial(i)\n            } else {\n                l = l :+ sum(i)\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26kllhkt.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp26kllhkt.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1L to n) {\n\
    \            if (i % 2 == 0) {\n                var fact = 1L\n              \
    \  for (j <- 1L to i) {\n                    fact *= j\n                }\n  \
    \              l = l :+ fact\n            } else {\n                var sum =\
    \ 0L\n                for (j <- 1L to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009948
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ factorial(i)\n            } else {\n                result = result :+ sum(i)\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:14:35 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result = result :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                   Not found: factorial\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp0wgs1vel.scala:16:35 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                result = result :+ sum(i)\n\e[31m\e[31m\
    \   |\e[0m                                   ^^^\e[0m\n\e[31m   |\e[0m       \
    \                            Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009941
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = new\
    \ ListBuffer[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) {\n                var factorial = 1\n                for (j <- 1 to i)\
    \ {\n                    factorial *= j\n                }\n                result\
    \ += factorial\n            } else {\n                var sum = 0\n          \
    \      for (j <- 1 to i) {\n                    sum += j\n                }\n\
    \                result += sum\n            }\n        }\n        result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ var factorial = 1L\n                for (j <- 1L to i) {\n                 \
    \   factorial *= j\n                }\n                list += factorial\n   \
    \         } else {\n                var sum = 0L\n                for (j <- 1L\
    \ to i) {\n                    sum += j\n                }\n                list\
    \ += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009947
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnyfu0ne.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsnyfu0ne.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwa4r7hnp.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpwa4r7hnp.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list = list :+ factorial(i)\n            } else {\n                list\
    \ = list :+ sum(i)\n            }\n        }\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpbahu93xc.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmg9gzllx.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmg9gzllx.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                result = result :+\
    \ (1 to i).foldLeft(1L)(_ * _)\n            } else {\n                result =\
    \ result :+ (1 to i).sum\n            }\n        }\n        result\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1L to n) {\n\
    \            if (i % 2 == 0) l = l :+ factorial(i)\n            else l = l :+\
    \ sum(i)\n        }\n        l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrmjelt9.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l = l :+ factorial(i)\n\e[31m\e[31m   |\e[0m                            \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    \
    \ Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcrmjelt9.scala:14:26\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e\
    [0m l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                          ^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: sum\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009946
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                l = l :+ factorial\n            } else {\n        \
    \        var sum = 0\n                for (j <- 1 to i) {\n                  \
    \  sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val lst = new ListBuffer[Long]\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      lst += (1 to i).product\n            } else {\n                lst += (1\
    \ to i).sum\n            }\n        }\n        lst.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ (1 to i).product\n\
    \            } else {\n                l = l :+ (1 to i).sum\n            }\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                list += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                list += sum\n        \
    \    }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009948
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val l = new ListBuffer[Long]\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ l += (1L to i).product\n            } else {\n                l += (1L to i).sum\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n  \
    \              for (j <- 1 to i) {\n                    fact *= j\n          \
    \      }\n                l += fact\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                l += sum\n            }\n        }\n     \
    \   l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = ListBuffer[Long]()\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                list += (1 to\
    \ i).product\n            } else {\n                list += (1 to i).sum\n   \
    \         }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = new ListBuffer[Long]\n        for (i <- 1\
    \ to n.toInt) {\n            if (i % 2 == 0) {\n                var fact = 1\n\
    \                for (j <- 1 to i) {\n                    fact *= j\n        \
    \        }\n                l += fact\n            } else {\n                var\
    \ sum = 0\n                for (j <- 1 to i) {\n                    sum += j\n\
    \                }\n                l += sum\n            }\n        }\n     \
    \   l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgypgazui.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgypgazui.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009940
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var fact = 1\n           \
    \     for (j <- 1 to i) {\n                    fact *= j\n                }\n\
    \                l = l :+ fact\n            } else {\n                var sum\
    \ = 0\n                for (j <- 1 to i) {\n                    sum += j\n   \
    \             }\n                l = l :+ sum\n            }\n        }\n    \
    \    return l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = new ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list = list :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list = list :+ sum\n            }\n        }\n        return list\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l += fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l += sum\n       \
    \     }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009935
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                list = list :+ factorial(i)\n\
    \            } else {\n                list = list :+ sum(i)\n            }\n\
    \        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list = list :+ factorial(i)\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                             Not found: factorial\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmps65x0ygn.scala:16:31 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list = list :+ sum(i)\n\e[31m\e[31m \
    \  |\e[0m                               ^^^\e[0m\n\e[31m   |\e[0m            \
    \                   Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009929
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7swo0n0o.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7swo0n0o.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009922
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                l += factorial(i)\n\
    \            } else {\n                l += sum(i)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuo3rlha.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuo3rlha.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                list += factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ list += sum\n            }\n        }\n        list.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009926
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) l += factorial(i)\n            else\
    \ l += sum(i)\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3n1vjhk.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) l += factorial(i)\n\e[31m\e[31m   |\e[0m                                \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Not found: factorial\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpf3n1vjhk.scala:14:22\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33melse\e\
    [0m l += sum(i)\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m \
    \  |\e[0m                      Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                l += factorial\n            } else {\n      \
    \          var sum = 0\n                for (j <- 1 to i) {\n                \
    \    sum += j\n                }\n                l += sum\n            }\n  \
    \      }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                l = l :+ factorial\n            } else {\n        \
    \        var sum = 0\n                for (j <- 1 to i) {\n                  \
    \  sum += j\n                }\n                l = l :+ sum\n            }\n\
    \        }\n        return l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong, 24l.toLong,\
    \ 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n    assert(f((1l)).equals((List[Long](1l.toLong))));\n\
    \    assert(f((3l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var factorial = 1\n                for (j <- 1 to i) {\n              \
    \      factorial *= j\n                }\n                result = result :+ factorial\n\
    \            } else {\n                var sum = 0\n                for (j <-\
    \ 1 to i) {\n                    sum += j\n                }\n               \
    \ result = result :+ sum\n            }\n        }\n        return result\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                result +=\
    \ factorial(i)\n            } else {\n                result += sum(i)\n     \
    \       }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkhlavr4n.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                result += factorial(i)\n\e[31m\e[31m\
    \   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \                Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkhlavr4n.scala:16:26 ------------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m                result += sum(i)\n\e[31m\e[31m   |\e[0m  \
    \                        ^^^\e[0m\n\e[31m   |\e[0m                          Not\
    \ found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        val list = new ListBuffer[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                list += factorial(i)\n\
    \            } else {\n                list += sum(i)\n            }\n       \
    \ }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqli_0cb3.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpqli_0cb3.scala:16:24 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = List[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                var factorial = 1\n\
    \                for (j <- 1 to i) {\n                    factorial *= j\n   \
    \             }\n                result = result :+ factorial\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                result = result :+\
    \ sum\n            }\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong,\
    \ 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var result = ListBuffer[Long]()\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) {\n                var factorial\
    \ = 1\n                for (j <- 1 to i) {\n                    factorial *= j\n\
    \                }\n                result += factorial\n            } else {\n\
    \                var sum = 0\n                for (j <- 1 to i) {\n          \
    \          sum += j\n                }\n                result += sum\n      \
    \      }\n        }\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009951
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var list = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                var factorial = 1\n      \
    \          for (j <- 1 to i) {\n                    factorial *= j\n         \
    \       }\n                list = list :+ factorial\n            } else {\n  \
    \              var sum = 0\n                for (j <- 1 to i) {\n            \
    \        sum += j\n                }\n                list = list :+ sum\n   \
    \         }\n        }\n        return list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      var fact = 1\n                for (j <- 1 to i) {\n                   \
    \ fact *= j\n                }\n                l = l :+ fact\n            } else\
    \ {\n                var sum = 0\n                for (j <- 1 to i) {\n      \
    \              sum += j\n                }\n                l = l :+ sum\n   \
    \         }\n        }\n        return l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009925
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = ListBuffer[Long]()\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) {\n                l += factorial(i)\n\
    \            } else {\n                l += sum(i)\n            }\n        }\n\
    \        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuo3rlha.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptuo3rlha.scala:16:21\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009949
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l = l :+ factorial(i)\n            } else {\n                l = l :+ sum(i)\n\
    \            }\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp26kllhkt.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp26kllhkt.scala:17:25 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                l = l :+ sum(i)\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^\e[0m\n\e[31m   |\e[0m                         Not found: sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009936
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        var l = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n          \
    \      l += factorial(i)\n            } else {\n                l += sum(i)\n\
    \            }\n        }\n        l.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz95cqu9c.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l += factorial(i)\n\e[31m\e[31m   |\e\
    [0m                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not\
    \ found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpz95cqu9c.scala:17:21\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                l += sum(i)\n\
    \e[31m\e[31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0m          \
    \           Not found: sum\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009939
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        // Write your code here\n        val list = new ListBuffer[Long]\n\
    \        for (i <- 1L to n) {\n            if (i % 2 == 0) {\n               \
    \ list += factorial(i)\n            } else {\n                list += sum(i)\n\
    \            }\n        }\n        list.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(f((5l)).equals((List[Long](1l.toLong, 2l.toLong, 6l.toLong,\
    \ 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmjwld3h2.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                list += factorial(i)\n\e[31m\e[31m  \
    \ |\e[0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \          Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpmjwld3h2.scala:17:24 ------------------------\e[0m\e[0m\n\e[31m17 |\e\
    [0m                list += sum(i)\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^\e[0m\n\e[31m   |\e[0m                        Not found: sum\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009950
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Implement the function f that takes n as a parameter,\n    // and\
    \ returns a list of size n, such that the value of the element at index i is the\
    \ factorial of i if i is even\n    // or the sum of numbers from 1 to i otherwise.\n\
    \    // i starts from 1.\n    // the factorial of i is the multiplication of the\
    \ numbers from 1 to i (1 * 2 * ... * i).\n    // Example:\n    def f(n : Long)\
    \ : List[Long] = {\n        var l = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                l = l :+ factorial(i)\n  \
    \          } else {\n                l = l :+ (1 to i).sum\n            }\n  \
    \      }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(f((5l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong))));\n    assert(f((7l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong, 24l.toLong, 15l.toLong, 720l.toLong, 28l.toLong))));\n\
    \    assert(f((1l)).equals((List[Long](1l.toLong))));\n    assert(f((3l)).equals((List[Long](1l.toLong,\
    \ 2l.toLong, 6l.toLong))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptvond3t8.scala:14:25 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                l = l :+ factorial(i)\n\e[31m\e[31m \
    \  |\e[0m                         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \             Not found: factorial\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009950
