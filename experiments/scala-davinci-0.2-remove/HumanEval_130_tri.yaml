name: HumanEval_130_tri
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    // the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    // Tribonacci sequence is defined by the recurrence:\n    // tri(1)\
  \ = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n - 1) + tri(n\
  \ - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2) = 1 + (2 /\
  \ 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n    // =\
  \ 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n, you have\
  \ to a return a list of the \n    // first n + 1 numbers of the Tribonacci sequence.\n\
  \    // Examples:\n    def tri(n : Long) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(tri((3l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong))));\n    assert(tri((4l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong))));\n    assert(tri((5l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong))));\n    assert(tri((6l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong))));\n    assert(tri((7l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong))));\n\
  \    assert(tri((8l)).equals((List[Long](1l.toLong, 3l.toLong, 2l.toLong, 8l.toLong,\
  \ 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong, 5l.toLong))));\n    assert(tri((9l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong))));\n    assert(tri((20l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong, 2l.toLong, 8l.toLong, 3l.toLong, 15l.toLong, 4l.toLong, 24l.toLong,\
  \ 5l.toLong, 35l.toLong, 6l.toLong, 48l.toLong, 7l.toLong, 63l.toLong, 8l.toLong,\
  \ 80l.toLong, 9l.toLong, 99l.toLong, 10l.toLong, 120l.toLong, 11l.toLong))));\n\
  \    assert(tri((0l)).equals((List[Long](1l.toLong))));\n    assert(tri((1l)).equals((List[Long](1l.toLong,\
  \ 3l.toLong))));\n    }\n\n}\n"
completions: ["        val cache = new HashMap[Long, Long]\n        cache(1) = 3\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n  \
    \              result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (cache.contains(n)) cache(n)\n            else {\n       \
    \         val result = if (n == 1) 3\n                else if (n % 2 == 0) 1 +\
    \ n / 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n         \
    \       cache += (n -> result)\n                result\n            }\n      \
    \  }\n        (1 to n + 1).map(tri(_)).toList", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     if (n == 2) return List(0, 3, 2)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            result = result :+ d\n          \
    \  a = b\n            b = c\n            c = d\n        }\n        return result",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                d = a + b + c\n                a = b\n             \
    \   b = c\n                c = d\n                result = result :+ d\n     \
    \       }\n        }\n        return result", "        var a = 3L\n        var\
    \ b = 2L\n        var c = 8L\n        var d = 0L\n        var l = List(3L, 2L,\
    \ 8L)\n        for (i <- 4 to n.toInt) {\n            d = if (i % 2 == 0) 1 +\
    \ i / 2 else a + b + c\n            l = l :+ d\n            a = b\n          \
    \  b = c\n            c = d\n        }\n        return l", "        var result\
    \ = ListBuffer[Long]()\n        result += 3\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var result = List(0, 3)\n        var i = 2\n        while (i <= n) {\n \
    \           if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            i +=\
    \ 1\n        }\n        return result", "        val result = new ListBuffer[Long]\n\
    \        result += 3\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        result.toList", "        var result\
    \ = ListBuffer[Long]()\n        result += 3\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) result += (1 + i / 2)\n            else result +=\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        result = result :+ a\n        for\
    \ (i <- 1 to n.toInt) {\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2\n                result = result :+ d\n            }\n            else\
    \ {\n                d = a + b + c\n                result = result :+ d\n   \
    \             a = b\n                b = c\n                c = d\n          \
    \  }\n        }\n        return result", "        def triRec(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n == 1) triRec(n\
    \ - 1, 3 :: l)\n            else if (n % 2 == 0) triRec(n - 1, (1 + n / 2) ::\
    \ l)\n            else triRec(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n \
    \       triRec(n, List()).reverse", "        if (n == 0) return List(0)\n    \
    \    if (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n\
    \        var list = List(0, 3, 2)\n        var i = 3\n        while (i <= n) {\n\
    \            if (i % 2 == 0) list = list :+ (1 + i / 2)\n            else list\
    \ = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n            i += 1\n  \
    \      }\n        return list", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n     \
    \       else d = a + b + c\n            a = b\n            b = c\n           \
    \ c = d\n            result = result :+ d\n        }\n        return result",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (cache.contains(n)) cache(n)\n            else {\n       \
    \         val result = if (n == 1) 3\n                else if (n % 2 == 0) 1 +\
    \ n / 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n         \
    \       cache(n) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri(_)).toList", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List[Long]()\n \
    \       result :+= a\n        result :+= b\n        result :+= c\n        for\
    \ (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else a + b\
    \ + c\n            a = b\n            b = c\n            c = d\n            result\
    \ :+= d\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                if (i % 2 == 0) {\n                    d = 1 + i / 2\n\
    \                    result = result :+ d\n                }\n               \
    \ else {\n                    d = a + b + c\n                    result = result\
    \ :+ d\n                    a = b\n                    b = c\n               \
    \     c = d\n                }\n            }\n        }\n        result", " \
    \       if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n  \
    \      var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3,\
    \ 2)\n        var result = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        if (n == 0) return List(0)\n        if (n\
    \ == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n        var\
    \ c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n         \
    \   else d = a + b + c\n            a = b\n            b = c\n            c =\
    \ d\n            result = result :+ d\n        }\n        return result", "  \
    \      if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var result = List(0, 3)\n        var i = 2\n        while (i <= n) {\n \
    \           if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            i +=\
    \ 1\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var list = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n          \
    \  if (i % 2 == 0) list = list :+ (1 + i / 2)\n            else list = list :+\
    \ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        return list",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var result =\
    \ List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ {\n                a = b\n                b = c\n                c = 1 + i /\
    \ 2\n            } else {\n                a = b\n                b = c\n    \
    \            c = a + b + c\n            }\n            result = result :+ c\n\
    \        }\n        return result", "        def tri(n : Long, a : Long, b : Long,\
    \ c : Long) : List[Long] = {\n            if (n == 0) List(a)\n            else\
    \ if (n == 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n       \
    \     else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n            else\
    \ a :: tri(n - 1, b, c, 1 + n / 2)\n        }\n        tri(n, 3, 1, 2)", "   \
    \     if (n == 0) return List(0)\n        if (n == 1) return List(3)\n       \
    \ if (n == 2) return List(3, 2)\n        var list = List(3, 2, 8)\n        for\
    \ (i <- 4 to n.toInt) {\n            if (i % 2 == 0) list = list :+ (1 + i / 2)\n\
    \            else list = list :+ (list(i - 1) + list(i - 2) + list(i - 3))\n \
    \       }\n        return list", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri(_)).toList", "     \
    \   var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n \
    \       var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n       \
    \     if (i == 1) {\n                result = result :+ 3\n            } else\
    \ if (i == 2) {\n                result = result :+ 2\n            } else if (i\
    \ == 3) {\n                result = result :+ 1\n            } else {\n      \
    \          d = a + b + c\n                result = result :+ d\n             \
    \   a = b\n                b = c\n                c = d\n            }\n     \
    \   }\n        return result", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var list = List(0, 3, 2)\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) list = list :+ (1 + i / 2)\n\
    \            else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n \
    \       }\n        return list", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (0 to n.toInt).map(tri(_)).toList", "     \
    \   val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long = {\n\
    \            if (cache.contains(n)) cache(n)\n            else {\n           \
    \     val result = if (n == 1) 3\n                else if (n % 2 == 0) 1 + n /\
    \ 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n             \
    \   cache += (n -> result)\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri(_)).toList", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n == 1) 3 else\
    \ if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n      \
    \          cache(n) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri).toList", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var l = List(0, 3, 2)\n      \
    \  for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n     \
    \   return l", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n   \
    \     var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        if (n == 2) return List(0,\
    \ 3, 2)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            result = result :+ d\n            a = b\n            b = c\n    \
    \        c = d\n        }\n        return result", "        if (n == 0) List(0)\n\
    \        else if (n == 1) List(0, 3)\n        else if (n == 2) List(0, 3, 8)\n\
    \        else {\n            val l = tri(n - 1)\n            val last = l.last\n\
    \            val last2 = l(l.length - 2)\n            val last3 = l(l.length -\
    \ 3)\n            if (n % 2 == 0) l :+ (1 + n / 2)\n            else l :+ (last\
    \ + last2 + last3)\n        }", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var list = List(0, 3, 2)\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) list = list :+ (1 + i / 2)\n\
    \            else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n \
    \       }\n        return list", "        if (n == 0) return List(0)\n       \
    \ if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n    \
    \    var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n    \
    \    for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n  \
    \          else d = a + b + c\n            a = b\n            b = c\n        \
    \    c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        else if (n == 1) return List(0, 3)\n        else if (n == 2) return List(0,\
    \ 3, 2)\n        else {\n            var result = List(0, 3, 2)\n            for\
    \ (i <- 3 to n.toInt) {\n                if (i % 2 == 0) result = result :+ (1\
    \ + i / 2)\n                else result = result :+ (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n            }\n            return result\n        }",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      result = result :+ a\n            d = a\n            a = b + c + d\n  \
    \          b = c\n            c = d\n        }\n        return result", "    \
    \    def triHelper(n : Long, a : Long, b : Long, c : Long) : List[Long] = {\n\
    \            if (n == 0) return List(a)\n            if (n % 2 == 0) return a\
    \ :: triHelper(n - 1, b, c, 1 + n / 2)\n            else return a :: triHelper(n\
    \ - 1, b, c, b + c + tri(n + 1))\n        }\n        triHelper(n, 3, 0, 0)", " \
    \       if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n  \
    \      if (n == 2) return List(0, 3, 2)\n        var a = List(0, 3, 2)\n     \
    \   for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) a = a :+ (1 + i / 2)\n\
    \            else a = a :+ (a(i - 1) + a(i - 2) + a(i + 1))\n        }\n     \
    \   return a", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var result = List(0, 3)\n        var i = 2\n        while\
    \ (i <= n) {\n            if (i % 2 == 0) result = result :+ (1 + i / 2)\n   \
    \         else result = result :+ (result(i - 1) + result(i - 2) + result(i +\
    \ 1))\n            i += 1\n        }\n        return result", "        if (n ==\
    \ 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var list =\
    \ List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ list = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i\
    \ - 2) + list(i + 1))\n        }\n        return list", "        var result =\
    \ ListBuffer[Long]()\n        result += 3\n        for (i <- 1 to n.toInt) {\n\
    \            if (i % 2 == 0) result += 1 + i / 2\n            else result += result(i\
    \ - 1) + result(i - 2) + result(i + 1)\n        }\n        result.toList", " \
    \       if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n  \
    \      var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var list = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n       \
    \     if (i % 2 == 0) d = 1 + (i / 2)\n            else d = a + b + c\n      \
    \      a = b\n            b = c\n            c = d\n            list = list :+\
    \ d\n        }\n        return list", "        if (n == 0) return List(0)\n  \
    \      if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       d = if (i % 2 == 0) (i + 1) / 2 else a + b + c\n            a = b\n  \
    \          b = c\n            c = d\n            result = result :+ d\n      \
    \  }\n        return result", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n     \
    \   var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n \
    \       var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n      \
    \      if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n       \
    \     result = result :+ d\n            a = b\n            b = c\n           \
    \ c = d\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3,\
    \ 2)\n        var result = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        if (n == 0) return List(0)\n        if (n\
    \ == 1) return List(0, 3)\n        var result = List(0, 3)\n        var i = 2\n\
    \        while (i <= n) {\n            if (i % 2 == 0) result = result :+ (1 +\
    \ i / 2)\n            else result = result :+ (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n            i += 1\n        }\n        return result", "   \
    \     var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n           \
    \ if (i == 0) list = list :+ 0\n            else if (i == 1) list = list :+ 3\n\
    \            else if (i == 2) list = list :+ 8\n            else if (i % 2 ==\
    \ 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1)\
    \ + list(i - 2) + list(i + 1))\n        }\n        return list", "        var\
    \ a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n       \
    \ var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            d\
    \ = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result :+ d\n\
    \            a = b\n            b = c\n            c = d\n        }\n        result",
  "        val cache = new HashMap[Long, Long]\n        cache += (1L -> 3L)\n    \
    \    def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache += (n -> result)\n\
    \                result\n            }\n        }\n        (1L to n).map(tri(_)).toList",
  "        val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long\
    \ = {\n            if (n == 1) 3\n            else if (n == 2) 2\n           \
    \ else if (n == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        def tri(n : Long, l : List[Long])\
    \ : List[Long] = {\n            if (n == 0) l\n            else if (n == 1) tri(n\
    \ - 1, 3 :: l)\n            else if (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n\
    \            else tri(n - 1, (l(0) + l(1) + l(2)) :: l)\n        }\n        tri(n,\
    \ List())", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        val list = new ListBuffer[Long]\n        list += 0\n        list\
    \ += 3\n        var i = 2\n        while (i <= n) {\n            if (i % 2 ==\
    \ 0) list += (1 + i / 2)\n            else list += (list(i - 1) + list(i - 2)\
    \ + list(i + 1))\n            i += 1\n        }\n        list.toList", "     \
    \   if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n      \
    \  var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n  \
    \      var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n       \
    \     d = if (i % 2 == 0) i / 2 else b + c + d\n            result = result :+\
    \ d\n            a = b\n            b = c\n            c = d\n        }\n    \
    \    return result", "        if (n == 0) return List(0)\n        if (n == 1)\
    \ return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n        var a =\
    \ 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            d = if\
    \ (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result :+ d\n  \
    \          a = b\n            b = c\n            c = d\n        }\n        return\
    \ result", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        var result = List(0, 3)\n        for (i <- 2 to n.toInt) {\n   \
    \         if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n   \
    \     return result", "        if (n == 0) return List(0)\n        var result\
    \ = List[Long](3)\n        var i = 1\n        while (i < n) {\n            if\
    \ (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            i += 1\n   \
    \     }\n        return result", "        var list = List[Long]()\n        for\
    \ (i <- 0 to n.toInt) {\n            if (i == 0) list = list :+ 0\n          \
    \  else if (i == 1) list = list :+ 3\n            else if (i == 2) list = list\
    \ :+ 8\n            else if (i % 2 == 0) list = list :+ (1 + i / 2)\n        \
    \    else list = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n\
    \        return list", "        if (n == 0) return List(0)\n        if (n == 1)\
    \ return List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n\
    \        var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to\
    \ n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n     \
    \       result = result :+ d\n            a = b\n            b = c\n         \
    \   c = d\n        }\n        return result", "        val m = n + 1\n       \
    \ val a = new Array[Long](m.toInt)\n        a(0) = 3\n        a(1) = 2\n     \
    \   a(2) = 8\n        for (i <- 3 until m.toInt) {\n            if (i % 2 == 0)\
    \ a(i) = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n \
    \       }\n        a.toList", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n       \
    \ for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else a\
    \ + b + c\n            result = result :+ d\n            a = b\n            b\
    \ = c\n            c = d\n        }\n        return result", "        def tri(n\
    \ : Long, a : Long, b : Long, c : Long) : List[Long] = {\n            if (n ==\
    \ 0) List(a)\n            else if (n == 1) List(a, b)\n            else if (n\
    \ == 2) List(a, b, c)\n            else if (n % 2 == 0) a :: tri(n - 1, b, c,\
    \ 1 + n / 2)\n            else a :: tri(n - 1, b, c, b + c + a)\n        }\n \
    \       tri(n, 3, 1, 2)", "        if (n == 0) return List(0)\n        if (n ==\
    \ 1) return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n        var\
    \ result = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        var a = 3L\n        var b = 2L\n        var c\
    \ = 1L\n        var d = 0L\n        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i == 1) {\n                result = result\
    \ :+ a\n            } else if (i == 2) {\n                result = result :+ b\n\
    \            } else if (i == 3) {\n                result = result :+ c\n    \
    \        } else {\n                d = a + b + c\n                result = result\
    \ :+ d\n                a = b\n                b = c\n                c = d\n\
    \            }\n        }\n        return result", "        val cache = new HashMap[Long,\
    \ Long]\n        def triRec(n : Long) : Long = {\n            if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n == 1) 3\n \
    \               else if (n % 2 == 0) 1 + n / 2\n                else triRec(n\
    \ - 1) + triRec(n - 2) + triRec(n + 1)\n                cache(n) = result\n  \
    \              result\n            }\n        }\n        (0 to n.toInt).map(triRec(_)).toList",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (cache.contains(n)) cache(n)\n            else {\n       \
    \         val result = if (n == 1) 3\n                else if (n % 2 == 0) 1 +\
    \ n / 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n         \
    \       cache += (n -> result)\n                result\n            }\n      \
    \  }\n        (0 to n.toInt).map(tri(_)).toList", "        def triRec(n : Long,\
    \ l : List[Long]) : List[Long] = {\n            if (n == 0) l\n            else\
    \ if (n == 1) triRec(n - 1, 3 :: l)\n            else if (n % 2 == 0) triRec(n\
    \ - 1, (1 + n / 2) :: l)\n            else triRec(n - 1, l.head + l.tail.head\
    \ + l.tail.tail.head :: l)\n        }\n        triRec(n, List()).reverse", " \
    \       if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n  \
    \      var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        def tri(n : Long, a : Long, b : Long, c : Long)\
    \ : List[Long] = {\n            if (n == 0) List(a)\n            else if (n ==\
    \ 1) List(a, b)\n            else if (n == 2) List(a, b, c)\n            else\
    \ if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n            else a :: tri(n\
    \ - 1, b, c, a + b + c)\n        }\n        tri(n, 3, 1, 2)", "        if (n ==\
    \ 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var a = 0L\n\
    \        var b = 3L\n        var c = 2L\n        var d = 0L\n        var result\
    \ = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) d = 1 + i / 2\n            else d = a + b + c\n            a = b\n      \
    \      b = c\n            c = d\n            result = result :+ d\n        }\n\
    \        return result", "        val cache = new HashMap[Long, Long]\n      \
    \  def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n.toInt).map(tri).toList", "        if\
    \ (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        if (n\
    \ == 2) return List(0, 3, 2)\n        var result = List(0, 3, 2)\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (i / 2)\n\
    \            else result = result :+ (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n        }\n        return result", "        var a = 3L\n        var b\
    \ = 2L\n        var c = 1L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i == 1) {\n              \
    \  result = result :+ a\n            } else if (i == 2) {\n                result\
    \ = result :+ b\n            } else if (i == 3) {\n                result = result\
    \ :+ c\n            } else {\n                d = a + b + c\n                a\
    \ = b\n                b = c\n                c = d\n                result =\
    \ result :+ d\n            }\n        }\n        return result", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var l =\
    \ List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        if (n == 0) return List(0)\n   \
    \     if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2\
    \ else a + b + c\n            result = result :+ d\n            a = b\n      \
    \      b = c\n            c = d\n        }\n        return result", "        var\
    \ a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n       \
    \ var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if\
    \ (i == 1) result = result :+ a\n            else if (i == 2) result = result\
    \ :+ b\n            else if (i == 3) result = result :+ c\n            else {\n\
    \                d = a + b + c\n                result = result :+ d\n       \
    \         a = b\n                b = c\n                c = d\n            }\n\
    \        }\n        result", "        if (n == 0) return List(0)\n        if (n\
    \ == 1) return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n        var\
    \ a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n       \
    \ var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        if (n == 0) return List(0)\n       \
    \ if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n    \
    \    var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n    \
    \    for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            result = result :+ d\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return result", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var l =\
    \ List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i - 2) + l(i +\
    \ 1))\n        }\n        return l", "        if (n == 0) return List(0)\n   \
    \     if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2\
    \ else a + b + c\n            result = result :+ d\n            a = b\n      \
    \      b = c\n            c = d\n        }\n        return result", "        var\
    \ a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n       \
    \ var result = List(a, b, c)\n        for (i <- 4 to n.toInt) {\n            d\
    \ = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result :+= d\n     \
    \       a = b\n            b = c\n            c = d\n        }\n        return\
    \ result", "        if (n == 0) return List(1)\n        if (n == 1) return List(1,\
    \ 3)\n        var a = 1L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(1, 3, 2)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            a = b\n\
    \            b = c\n            c = d\n            result = result :+ d\n    \
    \    }\n        return result", "        var result = new ListBuffer[Long]\n \
    \       result += 3\n        for (i <- 1 to n.toInt) {\n            if (i % 2\
    \ == 0) result += (1 + i / 2)\n            else result += (result(i - 1) + result(i\
    \ - 2) + result(i + 1))\n        }\n        result.toList", "        var a = 3L\n\
    \        var b = 2L\n        var c = 1L\n        var d = 0L\n        var result\
    \ = List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i == 1) result\
    \ = result :+ a\n            else if (i == 2) result = result :+ b\n         \
    \   else if (i == 3) result = result :+ c\n            else {\n              \
    \  d = a + b + c\n                a = b\n                b = c\n             \
    \   c = d\n                result = result :+ d\n            }\n        }\n  \
    \      return result", "        if (n == 0) return List(0)\n        if (n == 1)\
    \ return List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n\
    \        var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to\
    \ n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d =\
    \ a + b + c\n            a = b\n            b = c\n            c = d\n       \
    \     result = result :+ d\n        }\n        return result", "        val a\
    \ = new Array[Long](n.toInt + 1)\n        a(0) = 0\n        a(1) = 3\n       \
    \ a(2) = 2\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) a(i)\
    \ = 1 + i / 2\n            else a(i) = a(i - 1) + a(i - 2) + a(i + 1)\n      \
    \  }\n        a.toList", "        if (n == 0) return List(0)\n        if (n ==\
    \ 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c\
    \ = 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n            else\
    \ d = a + b + c\n            a = b\n            b = c\n            c = d\n   \
    \         result = result :+ d\n        }\n        return result", "        val\
    \ result = new ListBuffer[Long]\n        result += 3\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        result.toList",
  "        var result = ListBuffer[Long]()\n        result += 3\n        for (i <-\
    \ 1 to n.toInt) {\n            if (i % 2 == 0) result += 1 + i / 2\n         \
    \   else result += result(i - 1) + result(i - 2) + result(i + 1)\n        }\n\
    \        result.toList", "        if (n == 0) return List(0)\n        if (n ==\
    \ 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c\
    \ = 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for (i\
    \ <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n            else\
    \ d = a + b + c\n            a = b\n            b = c\n            c = d\n   \
    \         result = result :+ d\n        }\n        return result", "        if\
    \ (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        if (n\
    \ == 2) return List(0, 3, 2)\n        var a = 0L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n     \
    \       else d = a + b + c\n            result = result :+ d\n            a =\
    \ b\n            b = c\n            c = d\n        }\n        return result",
  "        var result = List[Long]()\n        var a = 3L\n        var b = 2L\n   \
    \     var c = 1L\n        for (i <- 1 to n.toInt) {\n            result = result\
    \ :+ a\n            if (i % 2 == 0) {\n                a = 1 + i / 2\n       \
    \     } else {\n                a = b + c + a\n                b = c\n       \
    \         c = a\n            }\n        }\n        return result", "        val\
    \ result = new ArrayBuffer[Long]()\n        result += 3\n        for (i <- 1 to\
    \ n.toInt) {\n            if (i % 2 == 0) result += 1 + i / 2\n            else\
    \ result += result(i - 1) + result(i - 2) + result(i + 1)\n        }\n       \
    \ result.toList", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n   \
    \     var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        val cache = new HashMap[Long,\
    \ Long]\n        def tri(n : Long) : Long = {\n            if (cache.contains(n))\
    \ cache(n)\n            else {\n                val result = if (n == 1) 3\n \
    \               else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n             \
    \   result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     if (n == 2) return List(0, 3, 2)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            result = result :+ d\n          \
    \  a = b\n            b = c\n            c = d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var lst = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n           \
    \ if (i % 2 == 0) lst = lst :+ (1 + i / 2)\n            else lst = lst :+ (lst(i\
    \ - 1) + lst(i - 2) + lst(i + 1))\n        }\n        return lst", "        if\
    \ (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        if (n\
    \ == 2) return List(0, 3, 2)\n        var result = List(0, 3, 2)\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (1 + i\
    \ / 2)\n            else result = result :+ (result(i - 1) + result(i - 2) + result(i\
    \ + 1))\n        }\n        return result", "        val cache = new HashMap[Long,\
    \ Long]\n        cache(1) = 3\n        def tri(n : Long) : Long = {\n        \
    \    if (cache.contains(n)) cache(n)\n            else {\n                val\
    \ result = if (n % 2 == 0) 1 + n / 2 else tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \                cache(n) = result\n                result\n            }\n  \
    \      }\n        (1 to n + 1).map(tri(_)).toList", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var a = 0L\n       \
    \ var b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) (i\
    \ / 2) + 1 else a + b + c\n            a = b\n            b = c\n            c\
    \ = d\n            result = result :+ d\n        }\n        return result", " \
    \       if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n  \
    \      var l = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i\
    \ - 2) + l(i + 1))\n        }\n        return l", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var result = List(0,\
    \ 3)\n        var i = 2\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        def tri(n : Long, list : List[Long]) : List[Long]\
    \ = {\n            if (n == 0) list.reverse\n            else if (n % 2 == 0)\
    \ tri(n - 1, n / 2 + 1 :: list)\n            else tri(n - 1, list(0) + list(1)\
    \ + list(2) :: list)\n        }\n        tri(n, List(3, 2, 1))", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var a =\
    \ 0L\n        var b = 3L\n        var c = 2L\n        var result = List(a, b,\
    \ c)\n        for (i <- 3 to n.toInt) {\n            val d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var result = List(0, 3)\n        var i = 2\n        while (i <= n) {\n \
    \           if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result\
    \ = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n            i +=\
    \ 1\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var l = List(0, 3, 2)\n      \
    \  for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n     \
    \   return l", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n   \
    \     var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var a = 0L\n       \
    \ var b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1\
    \ + i / 2\n            else d = a + b + c\n            a = b\n            b =\
    \ c\n            c = d\n            result = result :+ d\n        }\n        return\
    \ result", "        val cache = new HashMap[Long, Long]\n        def tri(n : Long)\
    \ : Long = {\n            if (cache.contains(n)) cache(n)\n            else {\n\
    \                val result = if (n == 1) 3 else if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n  \
    \              result\n            }\n        }\n        (0 to n.toInt).map(tri(_)).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = (i / 2) + 1\n            else d = a + b + c\n    \
    \        a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3,\
    \ 2)\n        var result = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n\
    \            if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else\
    \ result = result :+ (result(i - 1) + result(i - 2) + result(i + 1))\n       \
    \ }\n        return result", "        var result = ListBuffer[Long]()\n      \
    \  for (i <- 1 to n.toInt) {\n            if (i == 1) result += 3\n          \
    \  else if (i == 2) result += 2\n            else if (i == 3) result += 8\n  \
    \          else if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 2) + result(i - 3) + result(i - 1))\n        }\n        result.toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var l = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i - 1) + l(i\
    \ - 2) + l(i + 1))\n        }\n        return l", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var a = 0L\n       \
    \ var b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      if (n == 0) return List(0)\n        if (n == 1) return List(3)\n      \
    \  if (n == 2) return List(3, 2)\n        var result = List(3, 2, 8)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result = result :+ (1\
    \ + i / 2)\n            else result = result :+ (result(i - 1) + result(i - 2)\
    \ + result(i + 1))\n        }\n        return result", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var a = 0L\n       \
    \ var b = 3L\n        var c = 2L\n        var d = 0L\n        var result = List(a,\
    \ b, c)\n        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1\
    \ + i / 2 else a + b + c\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      val cache = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long\
    \ = {\n            if (n == 1) 3\n            else if (n == 2) 2\n           \
    \ else if (n == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n\
    \            else {\n                val result = if (n % 2 == 0) 1 + n / 2 else\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n\
    \                result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                if (i % 2 == 0) {\n                    d = 1 + i / 2\n\
    \                    result = result :+ d\n                }\n               \
    \ else {\n                    d = a + b + c\n                    result = result\
    \ :+ d\n                    a = b\n                    b = c\n               \
    \     c = d\n                }\n            }\n        }\n        result", " \
    \       var map = Map[Long, Long]()\n        def tri(n : Long) : Long = {\n  \
    \          if (n == 1) return 3\n            if (n == 2) return 2\n          \
    \  if (n == 3) return 8\n            if (map.contains(n)) return map(n)\n    \
    \        var result = 0L\n            if (n % 2 == 0) result = 1 + n / 2\n   \
    \         else result = tri(n - 1) + tri(n - 2) + tri(n + 1)\n            map(n)\
    \ = result\n            return result\n        }\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) result = result :+ tri(i)\n        return result",
  "        var a = 3L\n        var b = 2L\n        var c = 8L\n        var d = 0L\n\
    \        var list = List(3L, 2L, 8L)\n        for (i <- 4 to n.toInt) {\n    \
    \        d = a + b + c\n            list = list :+ d\n            a = b\n    \
    \        b = c\n            c = d\n        }\n        return list", "        val\
    \ dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = 3\n        for (i <- 2 to\
    \ n.toInt) {\n            if (i % 2 == 0) dp(i) = 1 + i / 2\n            else\
    \ dp(i) = dp(i - 1) + dp(i - 2) + dp(i + 1)\n        }\n        dp.toList", " \
    \       def tri(n : Long, l : List[Long]) : List[Long] = {\n            if (n\
    \ == 0) l\n            else if (n == 1) tri(n - 1, 3 :: l)\n            else if\
    \ (n % 2 == 0) tri(n - 1, (1 + n / 2) :: l)\n            else tri(n - 1, (l(0)\
    \ + l(1) + l(2)) :: l)\n        }\n        tri(n, List()).reverse", "        val\
    \ a = ArrayBuffer[Long]()\n        a += 3\n        for (i <- 1 to n) {\n     \
    \       if (i % 2 == 0) a += (1 + i / 2)\n            else a += (a(i - 1) + a(i\
    \ - 2) + a(i + 1))\n        }\n        a.toList", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var result = List(0,\
    \ 3)\n        var i = 2\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        var result = new ListBuffer[Long]\n        result\
    \ += 3\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var result = List(0,\
    \ 3)\n        var i = 2\n        while (i <= n) {\n            if (i % 2 == 0)\
    \ result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        var result = new ListBuffer[Long]\n        result\
    \ += 3\n        for (i <- 1 to n.toInt) {\n            if (i % 2 == 0) result\
    \ += (1 + i / 2)\n            else result += (result(i - 1) + result(i - 2) +\
    \ result(i + 1))\n        }\n        result.toList", "        var a = 3L\n   \
    \     var b = 2L\n        var c = 1L\n        var d = 0L\n        var result =\
    \ List[Long]()\n        for (i <- 1 to n.toInt) {\n            if (i == 1) result\
    \ = result :+ a\n            else if (i == 2) result = result :+ b\n         \
    \   else if (i == 3) result = result :+ c\n            else {\n              \
    \  d = a + b + c\n                result = result :+ d\n                a = b\n\
    \                b = c\n                c = d\n            }\n        }\n    \
    \    result", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n   \
    \     var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        var result = ListBuffer[Long]()\n\
    \        result += 0\n        result += 3\n        var i = 2\n        while (i\
    \ <= n) {\n            if (i % 2 == 0) result += 1 + i / 2\n            else result\
    \ += result(i - 1) + result(i - 2) + result(i + 1)\n            i += 1\n     \
    \   }\n        result.toList", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n     \
    \       else d = a + b + c\n            a = b\n            b = c\n           \
    \ c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var list = List(0, 3, 8)\n        var i = 2\n        while (i < n) {\n \
    \           if (i % 2 == 0) list = list :+ (1 + i / 2)\n            else list\
    \ = list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n            i += 1\n  \
    \      }\n        return list", "        val cache = new HashMap[Long, Long]\n\
    \        def tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n\
    \            else {\n                val result = if (n == 1) 3\n            \
    \    else if (n % 2 == 0) 1 + n / 2\n                else tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n                cache(n) = result\n                result\n\
    \            }\n        }\n        (1 to n + 1).map(tri(_)).toList", "       \
    \ if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var\
    \ a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n       \
    \ var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n            a =\
    \ b\n            b = c\n            c = d\n            result = result :+ d\n\
    \        }\n        return result", "        if (n == 0) return List(0)\n    \
    \    if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n \
    \       var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n \
    \       for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            result = result :+ d\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return result", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var a =\
    \ 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            d = if\
    \ (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result :+ d\n  \
    \          a = b\n            b = c\n            c = d\n        }\n        return\
    \ result", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        var list = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) list = list :+ (1 + i / 2)\n            else list =\
    \ list :+ (list(i - 1) + list(i - 2) + list(i + 1))\n        }\n        return\
    \ list", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            d = if (i % 2 == 0) i / 2 else a + b + c\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        if (n == 0) return List(0)\n       \
    \ if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n    \
    \    var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n    \
    \    for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n  \
    \          else d = a + b + c\n            a = b\n            b = c\n        \
    \    c = d\n            result = result :+ d\n        }\n        return result",
  "        var a = 3L\n        var b = 2L\n        var c = 1L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                d = a + b + c\n                a = b\n             \
    \   b = c\n                c = d\n                result = result :+ d\n     \
    \       }\n        }\n        return result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        val cache = new HashMap[Long, Long]\n        cache(1) = 3\n        def\
    \ tri(n : Long) : Long = {\n            if (cache.contains(n)) cache(n)\n    \
    \        else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n        \
    \        result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     if (n == 2) return List(0, 3, 2)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            result = result :+ d\n          \
    \  a = b\n            b = c\n            c = d\n        }\n        return result",
  "        var a = 3L\n        var b = 2L\n        var c = 8L\n        var d = 0L\n\
    \        var result = List[Long]()\n        for (i <- 1 to n.toInt) {\n      \
    \      if (i == 1) result = result :+ a\n            else if (i == 2) result =\
    \ result :+ b\n            else if (i == 3) result = result :+ c\n           \
    \ else {\n                d = a + b + c\n                a = b\n             \
    \   b = c\n                c = d\n                result = result :+ d\n     \
    \       }\n        }\n        result", "        var list = ListBuffer[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            if (i == 1) list += 3\n      \
    \      else if (i == 2) list += 2\n            else if (i == 3) list += 8\n  \
    \          else {\n                val last = list(list.length - 1)\n        \
    \        val secondLast = list(list.length - 2)\n                val thirdLast\
    \ = list(list.length - 3)\n                if (i % 2 == 0) list += (1 + i / 2)\n\
    \                else list += (last + secondLast + thirdLast)\n            }\n\
    \        }\n        list.toList", "        if (n == 0) return List(0)\n      \
    \  if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n   \
    \     var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n   \
    \     for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            result = result :+ d\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return result", "        var list\
    \ = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0) list\
    \ = list :+ 0\n            else if (i == 1) list = list :+ 3\n            else\
    \ if (i == 2) list = list :+ 2\n            else if (i % 2 == 0) list = list :+\
    \ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i - 2) + list(i\
    \ + 1))\n        }\n        return list", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n\
    \            else d = a + b + c\n            a = b\n            b = c\n      \
    \      c = d\n            result = result :+ d\n        }\n        return result",
  "        val cache = new HashMap[Long, Long]\n        def tri(n : Long) : Long =\
    \ {\n            if (cache.contains(n)) cache(n)\n            else {\n       \
    \         val result = if (n == 1) 3\n                else if (n % 2 == 0) 1 +\
    \ n / 2\n                else tri(n - 1) + tri(n - 2) + tri(n + 1)\n         \
    \       cache(n) = result\n                result\n            }\n        }\n\
    \        (1 to n.toInt).map(tri).toList", "        def tri(n : Long, a : Long,\
    \ b : Long, c : Long) : List[Long] = {\n            if (n == 0) List(a)\n    \
    \        else if (n == 1) List(a, b)\n            else if (n == 2) List(a, b,\
    \ c)\n            else if (n % 2 == 0) a :: tri(n - 1, b, c, a + b + c)\n    \
    \        else a :: tri(n - 1, b, c, a + b + c)\n        }\n        tri(n, 3, 1,\
    \ 2)", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n        var\
    \ d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \     }\n        return result", "        if (n == 0) return List(0)\n       \
    \ if (n == 1) return List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n  \
    \      var l = List(0, 3, 2)\n        var i = 3\n        while (i <= n) {\n  \
    \          if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n            i += 1\n        }\n        return l",
  "        var list = List[Long]()\n        for (i <- 0 to n.toInt) {\n          \
    \  if (i == 0) list = list :+ 0\n            else if (i == 1) list = list :+ 3\n\
    \            else if (i == 2) list = list :+ 8\n            else if (i % 2 ==\
    \ 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1)\
    \ + list(i - 2) + list(i + 1))\n        }\n        return list", "        var\
    \ l = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i == 0)\
    \ l = l :+ 0\n            else if (i == 1) l = l :+ 3\n            else if (i\
    \ == 2) l = l :+ 8\n            else if (i % 2 == 0) l = l :+ (1 + i / 2)\n  \
    \          else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n       \
    \ return l", "        var list = List[Long]()\n        var a = 3L\n        var\
    \ b = 2L\n        var c = 1L\n        for (i <- 1 to n.toInt) {\n            list\
    \ = list :+ a\n            val temp = a\n            a = b\n            b = c\n\
    \            c = temp + b + c\n        }\n        return list", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var list\
    \ = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 ==\
    \ 0) list = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1)\
    \ + list(i - 2) + list(i + 1))\n        }\n        return list", "        var\
    \ result = new ListBuffer[Long]\n        result += 3\n        for (i <- 2 to n.toInt)\
    \ {\n            if (i % 2 == 0) result += (1 + i / 2)\n            else result\
    \ += (result(i - 2) + result(i - 1) + result(i + 1))\n        }\n        result.toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var i = 2L\n        var result = List(a, b, c)\n        while (i <= n)\
    \ {\n            if (i % 2 == 0) {\n                d = 1 + i / 2\n          \
    \  } else {\n                d = a + b + c\n            }\n            result\
    \ = result :+ d\n            a = b\n            b = c\n            c = d\n   \
    \         i += 1\n        }\n        return result", "        if (n == 0) return\
    \ List(0)\n        var a = 1L\n        var b = 2L\n        var c = 3L\n      \
    \  var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n           \
    \ val d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       result", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        var a = 0L\n        var b = 3L\n        var c = 2L\n   \
    \     var d = 0L\n        var result = List(a, b, c)\n        for (i <- 3 to n.toInt)\
    \ {\n            if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n\
    \            a = b\n            b = c\n            c = d\n            result =\
    \ result :+ d\n        }\n        return result", "        var result = ListBuffer[Long]()\n\
    \        result += 3\n        for (i <- 2 to n.toInt) {\n            if (i % 2\
    \ == 0) result += 1 + i / 2\n            else result += result(i - 2) + result(i\
    \ - 1) + result(i + 1)\n        }\n        result.toList", "        val cache\
    \ = new Array[Long](n.toInt + 1)\n        def tri(n : Long) : Long = {\n     \
    \       if (n == 1) 3\n            else if (n == 2) 2\n            else if (n\
    \ == 3) 8\n            else if (cache(n.toInt) != 0) cache(n.toInt)\n        \
    \    else {\n                val result = if (n % 2 == 0) 1 + n / 2 else tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n                cache(n.toInt) = result\n  \
    \              result\n            }\n        }\n        (1 to n.toInt).map(tri).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n      \
    \      a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        var a = 3L\n        var b\
    \ = 2L\n        var c = 1L\n        var d = 0L\n        var result = List(a, b,\
    \ c)\n        for (i <- 4 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i\
    \ / 2 else a + b + c\n            result = result :+ d\n            a = b\n  \
    \          b = c\n            c = d\n        }\n        result", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        if (n ==\
    \ 2) return List(0, 3, 2)\n        var a = 0L\n        var b = 3L\n        var\
    \ c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n        for\
    \ (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n         \
    \   else d = a + b + c\n            result = result :+ d\n            a = b\n\
    \            b = c\n            c = d\n        }\n        return result", "  \
    \      if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        val cache = new Array[Long](n.toInt + 1)\n  \
    \      cache(0) = 1\n        cache(1) = 3\n        for (i <- 2 to n.toInt) {\n\
    \            if (i % 2 == 0) cache(i) = 1 + i / 2\n            else cache(i) =\
    \ cache(i - 1) + cache(i - 2) + cache(i + 1)\n        }\n        cache.toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n\
    \        var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n     \
    \       d = if (i % 2 == 0) 1 + i / 2 else a + b + c\n            result = result\
    \ :+ d\n            a = b\n            b = c\n            c = d\n        }\n \
    \       return result", "        var a = 3L\n        var b = 2L\n        var c\
    \ = 1L\n        var d = 0L\n        var result = List[Long]()\n        for (i\
    \ <- 1 to n.toInt) {\n            if (i == 1) result = result :+ a\n         \
    \   else if (i == 2) result = result :+ b\n            else if (i == 3) result\
    \ = result :+ c\n            else {\n                d = a + b + c\n         \
    \       a = b\n                b = c\n                c = d\n                result\
    \ = result :+ d\n            }\n        }\n        return result", "        if\
    \ (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var\
    \ a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n       \
    \ var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if\
    \ (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n            a =\
    \ b\n            b = c\n            c = d\n            result = result :+ d\n\
    \        }\n        return result", "        if (n == 0) return List(0)\n    \
    \    if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n \
    \       var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n \
    \       for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            result = result :+ d\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return result", "        if (n\
    \ == 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var a =\
    \ 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n        var\
    \ result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n            if (i\
    \ % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n            a = b\n\
    \            b = c\n            c = d\n            result = result :+ d\n    \
    \    }\n        return result", "        if (n == 0) return List(0)\n        if\
    \ (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n       \
    \ var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n       \
    \ for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) d = 1 + i / 2\n     \
    \       else d = a + b + c\n            a = b\n            b = c\n           \
    \ c = d\n            result = result :+ d\n        }\n        return result",
  "        if (n == 0) return List(0)\n        var a = 3L\n        var b = 2L\n  \
    \      var c = 1L\n        var d = 0L\n        var result = List(a, b, c)\n  \
    \      for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2 else\
    \ a + b + c\n            result = result :+ d\n            a = b\n           \
    \ b = c\n            c = d\n        }\n        return result", "        val cache\
    \ = new HashMap[Long, Long]\n        def tri(n : Long) : Long = {\n          \
    \  if (cache.contains(n)) cache(n)\n            else {\n                val result\
    \ = if (n == 1) 3\n                else if (n % 2 == 0) 1 + n / 2\n          \
    \      else tri(n - 1) + tri(n - 2) + tri(n + 1)\n                cache(n) = result\n\
    \                result\n            }\n        }\n        (1 to n + 1).map(tri(_)).toList",
  "        if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n   \
    \     var result = List(0, 3)\n        for (i <- 2 to n.toInt) {\n           \
    \ if (i % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result\
    \ :+ (result(i - 1) + result(i - 2) + result(i + 1))\n        }\n        return\
    \ result", "        var a = 3L\n        var b = 2L\n        var c = 1L\n     \
    \   var d = 0L\n        var result = List[Long]()\n        for (i <- 1 to n.toInt)\
    \ {\n            if (i == 1) result = result :+ a\n            else if (i == 2)\
    \ result = result :+ b\n            else if (i == 3) result = result :+ c\n  \
    \          else {\n                d = a + b + c\n                result = result\
    \ :+ d\n                a = b\n                b = c\n                c = d\n\
    \            }\n        }\n        result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var d = 0L\n        var result = List(a, b, c)\n\
    \        for (i <- 3 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2\
    \ else a + b + c\n            result = result :+ d\n            a = b\n      \
    \      b = c\n            c = d\n        }\n        return result", "        var\
    \ list = List[Long]()\n        for (i <- 0 to n.toInt) {\n            if (i ==\
    \ 0) list = list :+ 0\n            else if (i == 1) list = list :+ 3\n       \
    \     else if (i == 2) list = list :+ 8\n            else if (i % 2 == 0) list\
    \ = list :+ (1 + i / 2)\n            else list = list :+ (list(i - 1) + list(i\
    \ - 2) + list(i + 1))\n        }\n        return list", "        if (n == 0) return\
    \ List(0)\n        if (n == 1) return List(0, 3)\n        if (n == 2) return List(0,\
    \ 3, 2)\n        var l = List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n  \
    \          if (i % 2 == 0) l = l :+ (1 + i / 2)\n            else l = l :+ (l(i\
    \ - 1) + l(i - 2) + l(i + 1))\n        }\n        return l", "        if (n ==\
    \ 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var result\
    \ = List(0, 3)\n        var i = 2\n        while (i <= n) {\n            if (i\
    \ % 2 == 0) result = result :+ (1 + i / 2)\n            else result = result :+\
    \ (result(i - 1) + result(i - 2) + result(i + 1))\n            i += 1\n      \
    \  }\n        return result", "        if (n == 0) return List()\n        if (n\
    \ == 1) return List(3)\n        if (n == 2) return List(3, 2)\n        var a =\
    \ 3L\n        var b = 2L\n        var c = 3L\n        var result = List(3, 2,\
    \ 3)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) {\n     \
    \           result = result :+ (1 + i / 2)\n            } else {\n           \
    \     result = result :+ (a + b + c)\n                a = b\n                b\
    \ = c\n                c = result.last\n            }\n        }\n        return\
    \ result", "        if (n == 0) return List(0)\n        if (n == 1) return List(0,\
    \ 3)\n        if (n == 2) return List(0, 3, 2)\n        val l = tri(n - 1)\n \
    \       if (n % 2 == 0) return l :+ (1 + n / 2)\n        else return l :+ (l(l.length\
    \ - 1) + l(l.length - 2) + l(l.length - 3))", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var l = List(0, 3, 2)\n      \
    \  for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) l = l :+ (1 + i / 2)\n\
    \            else l = l :+ (l(i - 1) + l(i - 2) + l(i + 1))\n        }\n     \
    \   return l", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n        var result = List(0,\
    \ 3, 2)\n        var i = 3\n        while (i <= n) {\n            if (i % 2 ==\
    \ 0) result = result :+ (1 + i / 2)\n            else result = result :+ (result(i\
    \ - 1) + result(i - 2) + result(i + 1))\n            i += 1\n        }\n     \
    \   return result", "        if (n == 0) return List(0)\n        if (n == 1) return\
    \ List(0, 3)\n        if (n == 2) return List(0, 3, 2)\n        var result = List(0,\
    \ 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0) result\
    \ = result :+ (1 + i / 2)\n            else result = result :+ (result(i - 1)\
    \ + result(i - 2) + result(i + 1))\n        }\n        return result", "     \
    \   if (n == 0) return List(0)\n        if (n == 1) return List(0, 3)\n      \
    \  var a = 0L\n        var b = 3L\n        var c = 2L\n        var d = 0L\n  \
    \      var result = List(a, b, c)\n        for (i <- 3 to n.toInt) {\n       \
    \     if (i % 2 == 0) d = 1 + i / 2\n            else d = a + b + c\n        \
    \    a = b\n            b = c\n            c = d\n            result = result\
    \ :+ d\n        }\n        return result", "        var a = 3L\n        var b\
    \ = 2L\n        var c = 3L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 1L to n) {\n            if (i == 1) result = result :+ a\n\
    \            else if (i == 2) result = result :+ b\n            else if (i ==\
    \ 3) result = result :+ c\n            else {\n                if (i % 2 == 0)\
    \ {\n                    d = 1 + i / 2\n                    result = result :+\
    \ d\n                }\n                else {\n                    d = a + b\
    \ + c\n                    result = result :+ d\n                    a = b\n \
    \                   b = c\n                    c = d\n                }\n    \
    \        }\n        }\n        result", "        if (n == 0) return List(0)\n\
    \        if (n == 1) return List(0, 3)\n        var a = 0L\n        var b = 3L\n\
    \        var c = 2L\n        var result = List(a, b, c)\n        for (i <- 3 to\
    \ n.toInt) {\n            var d = if (i % 2 == 0) (i / 2) + 1 else a + b + c\n\
    \            result = result :+ d\n            a = b\n            b = c\n    \
    \        c = d\n        }\n        return result", "        var a = 3L\n     \
    \   var b = 2L\n        var c = 1L\n        var d = 0L\n        var result = List[Long]()\n\
    \        for (i <- 1 to n.toInt) {\n            d = if (i % 2 == 0) 1 + i / 2\
    \ else a + b + c\n            result = result :+ d\n            a = b\n      \
    \      b = c\n            c = d\n        }\n        result", "        if (n ==\
    \ 0) return List(0)\n        if (n == 1) return List(0, 3)\n        if (n == 2)\
    \ return List(0, 3, 2)\n        if (n == 3) return List(0, 3, 2, 8)\n        var\
    \ lst = List(0, 3, 2, 8)\n        for (i <- 4 to n.toInt) {\n            if (i\
    \ % 2 == 0) lst = lst :+ (1 + i / 2)\n            else lst = lst :+ (lst(i - 1)\
    \ + lst(i - 2) + lst(i + 1))\n        }\n        return lst", "        if (n ==\
    \ 0) return List(0)\n        if (n == 1) return List(0, 3)\n        var lst =\
    \ List(0, 3, 2)\n        for (i <- 3 to n.toInt) {\n            if (i % 2 == 0)\
    \ lst = lst :+ (1 + i / 2)\n            else lst = lst :+ (lst(i - 1) + lst(i\
    \ - 2) + lst(i + 1))\n        }\n        return lst"]
stop_tokens:
- "\n    }\n"
