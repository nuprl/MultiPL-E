name: HumanEval_88_sort_array
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n    // you will sort the given array in ascending order if the\
  \ sum( first index value, last index value) is odd,\n    // or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n    // Note:\n\
  \    // * don't change the given array.\n    // Examples:\n    def sortArray(array\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sortArray((List[Long]())).equals((List[Long]())));\n\
  \    assert(sortArray((List[Long](5l.toLong))).equals((List[Long](5l.toLong))));\n\
  \    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong, 0l.toLong, 1l.toLong,\
  \ 5l.toLong))).equals((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong,\
  \ 5l.toLong))));\n    assert(sortArray((List[Long](2l.toLong, 4l.toLong, 3l.toLong,\
  \ 0l.toLong, 1l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](6l.toLong, 5l.toLong,\
  \ 4l.toLong, 3l.toLong, 2l.toLong, 1l.toLong, 0l.toLong))));\n    assert(sortArray((List[Long](2l.toLong,\
  \ 1l.toLong))).equals((List[Long](1l.toLong, 2l.toLong))));\n    assert(sortArray((List[Long](15l.toLong,\
  \ 42l.toLong, 87l.toLong, 32l.toLong, 11l.toLong, 0l.toLong))).equals((List[Long](0l.toLong,\
  \ 11l.toLong, 15l.toLong, 32l.toLong, 42l.toLong, 87l.toLong))));\n    assert(sortArray((List[Long](21l.toLong,\
  \ 14l.toLong, 23l.toLong, 11l.toLong))).equals((List[Long](23l.toLong, 21l.toLong,\
  \ 14l.toLong, 11l.toLong))));\n    }\n\n}\n"
completions: ["        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sortWith(_ > _) else array.sortWith(_ < _)", "        val (odd, even)\
    \ = array.zipWithIndex.partition(_._2 % 2 == 0)\n        val (oddSorted, evenSorted)\
    \ = (odd.map(_._1).sorted, even.map(_._1).sorted)\n        val (oddSortedReversed,\
    \ evenSortedReversed) = (oddSorted.reverse, evenSorted.reverse)\n        val (oddSortedReversedZipped,\
    \ evenSortedReversedZipped) = (oddSortedReversed.zip(odd.map(_._2)), evenSortedReversed.zip(even.map(_._2)))\n\
    \        val (oddSortedReversedZippedSorted, evenSortedReversedZippedSorted) =\
    \ (oddSortedReversedZipped.sortBy(_._2), evenSortedReversedZipped.sortBy(_._2))\n\
    \        val (oddSortedReversedZippedSortedMapped, evenSortedReversedZippedSortedMapped)\
    \ = (oddSortedReversedZippedSorted.map(_._1), evenSortedReversedZippedSorted.map(_._1))\n\
    \        val (oddSortedReversedZippedSortedMappedReversed, evenSortedReversedZippedSortedMappedReversed)\
    \ = (oddSortedReversedZippedSortedMapped.reverse, evenSortedReversedZippedSortedMapped.reverse)\n\
    \        val (oddSortedReversedZippedSortedMappedReversedZipped, evenSortedReversedZippedSortedMappedReversedZipped)\
    \ = (oddSortedReversedZippedSortedMappedReversed.zip(odd.map(_._2)), evenSortedReversedZippedSortedMappedReversed.zip(even.map(_._2)))\n\
    \        val (oddSortedReversedZippedSortedMappedReversedZippedSorted, evenSortedReversedZippedSortedMappedReversedZippedSorted)\
    \ = (oddSortedReversedZippedSortedMappedReversedZipped.sortBy(_._2), evenSortedReversedZippedSortedMappedRe",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val (odd, even) = array.zipWithIndex.partition(x => (x._2 + 1) % 2 == 1)\n\
    \        val sortedOdd = odd.map(_._1).sorted\n        val sortedEven = even.map(_._1).sorted.reverse\n\
    \        sortedOdd.zip(sortedEven).flatMap(x => List(x._1, x._2))", "        val\
    \ sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sorted = array.sortWith((a, b) => a\
    \ < b)\n        if ((sorted.head + sorted.last) % 2 == 0) sorted.reverse else\
    \ sorted", "        val sum = array.head + array.last\n        if (sum % 2 ==\
    \ 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted", "     \
    \   val (odd, even) = array.partition(x => x % 2 == 1)\n        val (oddSorted,\
    \ evenSorted) = (odd.sorted, even.sorted)\n        val (oddSortedDesc, evenSortedDesc)\
    \ = (oddSorted.reverse, evenSorted.reverse)\n        if ((oddSorted.head + evenSorted.last)\
    \ % 2 == 1) oddSorted ++ evenSortedDesc else oddSortedDesc ++ evenSorted", " \
    \       var result = array\n        if (array.length > 1) {\n            val first\
    \ = array.head\n            val last = array.last\n            val sum = first\
    \ + last\n            if (sum % 2 == 0) {\n                result = array.sortWith(_\
    \ > _)\n            } else {\n                result = array.sortWith(_ < _)\n\
    \            }\n        }\n        result", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       if (array.length == 0) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_\
    \ < _)", "        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sorted.reverse\n        else array.sorted", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_\
    \ < _)", "        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sortWith(_ > _) else array.sortWith(_ < _)", "        val sum = array.zipWithIndex.map(x\
    \ => x._1 * x._2).sum\n        if (sum % 2 == 0) array.sorted.reverse else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        if (array.length == 0) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val (first, last) = (array.head, array.last)\n        val (odd, even) =\
    \ array.tail.init.partition(x => (x + first + last) % 2 == 1)\n        (first\
    \ :: odd.sorted(Ordering[Long].reverse) ::: even.sorted ::: List(last)).toList",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val (odd, even) = array.partition(x => x\
    \ % 2 == 1)\n        val sortedOdd = odd.sorted\n        val sortedEven = even.sorted.reverse\n\
    \        val sum = sortedOdd.head + sortedEven.head\n        if (sum % 2 == 1)\
    \ sortedOdd ++ sortedEven else sortedEven ++ sortedOdd", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else\
    \ array.sorted", "        if (array.length == 0) return array\n        val sum\
    \ = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_ > _)\n\
    \        else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val (odd, even) = array.partition(x => x % 2 == 1)\n        val sortedOdd\
    \ = odd.sorted\n        val sortedEven = even.sorted.reverse\n        sortedOdd\
    \ ::: sortedEven", "        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       // sort the array in ascending order if the sum( first index value, last\
    \ index value) is odd,\n        // or sort it in descending order if the sum(\
    \ first index value, last index value) is even.\n        // if the sum is odd,\
    \ then the first index value is odd, and the last index value is even.\n     \
    \   // if the sum is even, then the first index value is even, and the last index\
    \ value is odd.\n        // so we can sort the array in ascending order if the\
    \ first index value is odd,\n        // or sort it in descending order if the\
    \ first index value is even.\n        // so we can sort the array in ascending\
    \ order if the first index value is odd,\n        // or sort it in descending\
    \ order if the first index value is even.\n        val first = array.head\n  \
    \      val last = array.last\n        val sum = first + last\n        if (sum\
    \ % 2 == 0) {\n            // sort it in descending order if the first index value\
    \ is even.\n            array.sortWith(_ > _)\n        } else {\n            //\
    \ sort it in ascending order if the first index value is odd.\n            array.sortWith(_\
    \ < _)\n        }", "        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "        val sum\
    \ = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val (first, last) = (array.head, array.last)\n        val sum = first +\
    \ last\n        if (sum % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_\
    \ < _)", "        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sorted.reverse\n        else array.sorted", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val (odd, even) = array.partition(_ % 2\
    \ == 1)\n        val sortedOdd = odd.sorted\n        val sortedEven = even.sorted.reverse\n\
    \        if ((array.head + array.last) % 2 == 1) sortedOdd ++ sortedEven else\
    \ sortedEven ++ sortedOdd", "        val sum = array.head + array.last\n     \
    \   if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "    \
    \    val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else\
    \ array.sorted", "        val sum = array.head + array.last\n        if (sum %\
    \ 2 == 0) array.sorted.reverse\n        else array.sorted", "        val sum =\
    \ array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n  \
    \      else array.sorted", "        val sum = array.head + array.last\n      \
    \  if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "     \
    \   val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     if (array.length == 0) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_\
    \ < _)", "        val (odd, even) = array.partition(_ % 2 == 1)\n        if (odd.length\
    \ % 2 == 1) odd.sorted ::: even.sorted.reverse\n        else odd.sorted.reverse\
    \ ::: even.sorted", "        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val (odd, even) = array.zipWithIndex.partition(_._2 % 2 == 0)\n       \
    \ val (oddSorted, evenSorted) = (odd.map(_._1).sorted, even.map(_._1).sorted)\n\
    \        if (array.head + array.last % 2 == 0) evenSorted.reverse ::: oddSorted\
    \ else oddSorted.reverse ::: evenSorted", "        var sum = 0L\n        for (i\
    \ <- 0 until array.length) {\n            sum += array(i)\n        }\n       \
    \ if (sum % 2 == 0) {\n            array.sorted.reverse\n        } else {\n  \
    \          array.sorted\n        }", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val n = array.length\n        val sum = array(0) + array(n - 1)\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _)\n        else array.sortWith(_ <\
    \ _)", "        if (array.length == 0) return array\n        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sortWith(_ > _)\n        else\
    \ array.sortWith(_ < _)", "        val sum = array.head + array.last\n       \
    \ if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "      \
    \  val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else\
    \ array.sorted", "        val (odd, even) = array.zipWithIndex.partition(_._2\
    \ % 2 == 0)\n        val (oddSorted, evenSorted) = (odd.map(_._1).sorted, even.map(_._1).sorted)\n\
    \        val (oddSortedReversed, evenSortedReversed) = (oddSorted.reverse, evenSorted.reverse)\n\
    \        val (oddSortedReversedZipped, evenSortedReversedZipped) = (oddSortedReversed.zip(odd.map(_._2)),\
    \ evenSortedReversed.zip(even.map(_._2)))\n        val (oddSortedReversedZippedSorted,\
    \ evenSortedReversedZippedSorted) = (oddSortedReversedZipped.sortBy(_._2), evenSortedReversedZipped.sortBy(_._2))\n\
    \        val (oddSortedReversedZippedSortedMapped, evenSortedReversedZippedSortedMapped)\
    \ = (oddSortedReversedZippedSorted.map(_._1), evenSortedReversedZippedSorted.map(_._1))\n\
    \        oddSortedReversedZippedSortedMapped ++ evenSortedReversedZippedSortedMapped",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val n = array.length\n        val sum =\
    \ array(0) + array(n - 1)\n        if (sum % 2 == 0) array.sortWith(_ > _)\n \
    \       else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)",
  "        if (array.length == 0) return array\n        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) {\n            array.sorted(Ordering[Long].reverse)\n \
    \       } else {\n            array.sorted\n        }", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted",
  "        val (odd, even) = array.partition(_ % 2 == 1)\n        val (oddSorted,\
    \ evenSorted) = (odd.sorted, even.sorted)\n        if (array.head + array.last\
    \ % 2 == 1) oddSorted ++ evenSorted.reverse\n        else evenSorted.reverse ++\
    \ oddSorted", "        val (first, last) = (array.head, array.last)\n        val\
    \ (sum, order) = (first + last, if ((first + last) % 2 == 0) -1 else 1)\n    \
    \    array.sortWith((a, b) => a * order < b * order)", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_\
    \ < _)", "        val sum = array.head + array.last\n        if (sum % 2 == 0)\
    \ array.sortWith(_ > _) else array.sortWith(_ < _)", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted",
  "        val (even, odd) = array.zipWithIndex.partition(_._2 % 2 == 0)\n       \
    \ val evenSorted = even.sortBy(_._1)\n        val oddSorted = odd.sortBy(-_._1)\n\
    \        evenSorted.zip(oddSorted).map(x => List(x._1._1, x._2._1)).flatten",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else\
    \ array.sorted", "        val sum = array.head + array.last\n        if (sum %\
    \ 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted", " \
    \       val (odd, even) = array.partition(x => (x % 2 == 1))\n        if ((array.head\
    \ + array.last) % 2 == 1) odd.sorted ++ even.sorted\n        else even.sorted\
    \ ++ odd.sorted", "        val sum = array.head + array.last\n        if (sum\
    \ % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        if (array.length == 0) return array\n  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _)\n        else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val (odd, even) = array.zipWithIndex.partition(x\
    \ => (x._2 + 1) % 2 == 1)\n        val sortedOdd = odd.map(_._1).sorted\n    \
    \    val sortedEven = even.map(_._1).sorted.reverse\n        sortedOdd.zip(sortedEven).flatMap(x\
    \ => List(x._1, x._2))", "        val sum = array.head + array.last\n        if\
    \ (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "        val\
    \ sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val (first, last) = (array.head, array.last)\n        val (odd, even) =\
    \ (first + last) % 2 == 1, (first + last) % 2 == 0\n        val sorted = array.sorted\n\
    \        if (odd) sorted.reverse else sorted", "        val (first, last) = (array.head,\
    \ array.last)\n        val sum = first + last\n        val sorted = array.sorted\n\
    \        if (sum % 2 == 0) sorted.reverse else sorted", "        val sum = array.head\
    \ + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val (odd, even) = array.partition(_\
    \ % 2 == 1)\n        val sortedOdd = odd.sorted\n        val sortedEven = even.sorted.reverse\n\
    \        if (array.head + array.last % 2 == 1) sortedOdd ++ sortedEven else sortedEven\
    \ ++ sortedOdd", "        val sum = array.head + array.last\n        if (sum %\
    \ 2 == 0) array.sorted.reverse\n        else array.sorted", "        val sum =\
    \ array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n  \
    \      else array.sorted", "        val sum = array.head + array.last\n      \
    \  if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "     \
    \   val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sortWith(_ > _) else array.sortWith(_ < _)", "  \
    \      val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", "   \
    \     val sum = array.head + array.last\n        if (sum % 2 == 0) array.sortWith(_\
    \ > _) else array.sortWith(_ < _)", "        val sum = array.head + array.last\n\
    \        if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted", " \
    \       val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted(Ordering[Long].reverse)\n        else array.sorted",
  "        val sum = array.head + array.last\n        if (sum % 2 == 0) array.sorted.reverse\n\
    \        else array.sorted", "        val sum = array.head + array.last\n    \
    \    if (sum % 2 == 0) array.sorted.reverse\n        else array.sorted"]
stop_tokens:
- "\n    }\n"
