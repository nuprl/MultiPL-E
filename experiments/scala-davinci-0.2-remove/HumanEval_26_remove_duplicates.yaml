name: HumanEval_26_remove_duplicates
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // From a list of integers, remove all elements that occur more than once.\n\
  \    // Keep order of elements left the same as in the input.\n    def removeDuplicates(numbers\
  \ : List[Long]) : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(removeDuplicates((List[Long]())).equals((List[Long]())));\n\
  \    assert(removeDuplicates((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong))).equals((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 4l.toLong))));\n    assert(removeDuplicates((List[Long](1l.toLong,\
  \ 2l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 3l.toLong, 5l.toLong))).equals((List[Long](1l.toLong,\
  \ 4l.toLong, 5l.toLong))));\n    }\n\n}\n"
completions: ["        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n\
    \            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n \
    \       }\n        numbers.filter(n => map(n) == 1)", "        val map = new HashMap[Long,\
    \ Int]()\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", '        numbers.distinct', "    \
    \    val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        var map = Map[Long, Int]()\n        for (n <- numbers) {\n            if\
    \ (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n    \
    \    var result = List[Long]()\n        for (n <- numbers) {\n            if (map(n)\
    \ == 1) result = n :: result\n        }\n        result.reverse", "        var\
    \ map = Map[Long, Int]()\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        var result = List[Long]()\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        var map = Map[Long, Int]()\n   \
    \     for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n   \
    \         else map(n) = 1\n        }\n        var result = List[Long]()\n    \
    \    for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        var map = Map[Long, Int]()\n   \
    \     for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result =\
    \ number :: result\n        }\n        result.reverse", "        val map = new\
    \ HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val result =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var map = Map[Long, Int]()\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result =\
    \ number :: result\n        }\n        result.reverse", "        val map = new\
    \ HashMap[Long, Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (number <- numbers) {\n            if (map.contains(number)) map(number) +=\
    \ 1\n            else map(number) = 1\n        }\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result +=\
    \ number\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                result += n\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "        val\
    \ map = new HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val result =\
    \ new ListBuffer[Long]\n        for (n <- numbers) {\n            if (!set.contains(n))\
    \ {\n                set += n\n                result += n\n            }\n  \
    \      }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                result += n\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "        val\
    \ set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n       \
    \ for (n <- numbers) {\n            if (!set.contains(n)) {\n                set\
    \ += n\n                result += n\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map += (n -> 1)\n  \
    \      }\n        numbers.filter(map(_) == 1)", "        val map = new HashMap[Long,\
    \ Int]()\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var set = Set[Long]()\n        var result =\
    \ List[Long]()\n        for (n <- numbers) {\n            if (!set.contains(n))\
    \ {\n                set += n\n                result = n :: result\n        \
    \    }\n        }\n        result.reverse", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val map = Map[Long, Int]()\n\
    \        for (i <- numbers) {\n            if (map.contains(i)) map(i) += 1\n\
    \            else map(i) = 1\n        }\n        numbers.filter(i => map(i) ==\
    \ 1)", "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n\
    \            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n \
    \       }\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = HashMap[Long, Int]()\n        for (number <- numbers) {\n   \
    \         if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   var map = Map[Long, Int]()\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        var result = List[Long]()\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        var map = Map[Long, Int]()\n   \
    \     for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) result =\
    \ number :: result\n        }\n        result.reverse", "        var map = Map[Long,\
    \ Int]()\n        for (i <- numbers) {\n            if (map.contains(i)) map(i)\
    \ += 1\n            else map(i) = 1\n        }\n        var result = List[Long]()\n\
    \        for (i <- numbers) {\n            if (map(i) == 1) result = i :: result\n\
    \        }\n        result.reverse", "        var map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        var result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result += n\n    \
    \    }\n        result.toList", "        val map = new HashMap[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) {\n\
    \                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        val result = new ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (map(number) == 1) {\n    \
    \            result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (i <- numbers) {\n      \
    \      if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n       \
    \ }\n        numbers.filter(i => map(i) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        numbers.foreach(n => map.put(n,\
    \ map.getOrElse(n, 0) + 1))\n        numbers.filter(n => map(n) == 1)", "    \
    \    var map = Map[Long, Int]()\n        for (i <- numbers) {\n            if\
    \ (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n    \
    \    var result = List[Long]()\n        for (i <- numbers) {\n            if (map(i)\
    \ == 1) result = i :: result\n        }\n        result.reverse", "        var\
    \ map = new HashMap[Long, Long]()\n        for (i <- numbers) {\n            if\
    \ (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n\
    \        var result = new ListBuffer[Long]()\n        for (i <- numbers) {\n \
    \           if (map(i) == 1) result += i\n        }\n        result.toList", " \
    \       val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "   \
    \     val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var result = List[Long]()\n        var set =\
    \ Set[Long]()\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                result = result :+ number\n                set = set + number\n\
    \            }\n        }\n        result", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (n <- numbers) {\n   \
    \         if (!set.contains(n)) {\n                set += n\n                result\
    \ += n\n            }\n        }\n        result.toList", "        val set = new\
    \ HashSet[Long]\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result += number\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        numbers.foreach(n => {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map += (n -> 1)\n        })\n        numbers.filter(n => map(n)\
    \ == 1)", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       result = n :: result\n                set += n\n            }\n      \
    \  }\n        result.reverse", "        var map = new HashMap[Long, Int]\n   \
    \     for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        var result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val result =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = new HashSet[Long]\n        val list = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                list += n\n            }\n        }\n      \
    \  list.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (n <- numbers)\
    \ {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n\
    \        }\n        numbers.filter(n => map(n) == 1)", "        val map = new\
    \ HashMap[Long, Int]\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val set = new HashSet[Long]\n        val list\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                list += number\n         \
    \   }\n        }\n        list.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        var set = Set[Long]()\n        var list = List[Long]()\n     \
    \   for (n <- numbers) {\n            if (!set.contains(n)) {\n              \
    \  set += n\n                list = n :: list\n            }\n        }\n    \
    \    list.reverse", "        var map = Map[Long, Int]()\n        for (n <- numbers)\
    \ {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n\
    \        }\n        var result = List[Long]()\n        for (n <- numbers) {\n\
    \            if (map(n) == 1) result = n :: result\n        }\n        result.reverse",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (i <- numbers) {\n            if (!set.contains(i)) {\n         \
    \       set += i\n                result += i\n            }\n        }\n    \
    \    result.toList", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", '        numbers.foldLeft(List[Long]())((acc,
    x) => if (acc.contains(x)) acc else x :: acc).reverse', "        val map = new\
    \ HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        var map = new HashMap[Long, Int]\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        var result = new ListBuffer[Long]\n        for\
    \ (n <- numbers) {\n            if (map(n) == 1) result += n\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        val result = new ListBuffer[Long]\n        for\
    \ (n <- numbers) {\n            if (map(n) == 1) result += n\n        }\n    \
    \    result.toList", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        val set = HashSet[Long]()\n        val result = ListBuffer[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        val result = new ListBuffer[Long]\n        for (n <- numbers) {\n\
    \            if (map(n) == 1) result += n\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result += n\n    \
    \    }\n        result.toList", "        var set = Set[Long]()\n        var list\
    \ = List[Long]()\n        for (i <- numbers) {\n            if (!set.contains(i))\
    \ {\n                set += i\n                list = i :: list\n            }\n\
    \        }\n        list.reverse", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        var map = Map[Long, Int]()\n        for (n <- numbers) {\n   \
    \         if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n    \
    \    }\n        var result = List[Long]()\n        for (n <- numbers) {\n    \
    \        if (map(n) == 1) result = n :: result\n        }\n        result.reverse",
  "        val map = HashMap[Long, Int]()\n        numbers.foreach(n => {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ })\n        numbers.filter(n => map(n) == 1)", "        var map = Map[Long,\
    \ Int]()\n        for (i <- numbers) {\n            if (map.contains(i)) map(i)\
    \ += 1\n            else map(i) = 1\n        }\n        var result = List[Long]()\n\
    \        for (i <- numbers) {\n            if (map(i) == 1) result = i :: result\n\
    \        }\n        result.reverse", "        var map = Map[Long, Int]()\n   \
    \     for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n   \
    \         else map(n) = 1\n        }\n        var result = List[Long]()\n    \
    \    for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        var map = Map[Long, Int]()\n   \
    \     for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n   \
    \         else map(n) = 1\n        }\n        var result = List[Long]()\n    \
    \    for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var set = Set[Long]()\n        var list = List[Long]()\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                list = n :: list\n            }\n        }\n\
    \        list.reverse", "        var map = Map[Long, Int]()\n        for (n <-\
    \ numbers) {\n            if (map.contains(n)) map(n) += 1\n            else map(n)\
    \ = 1\n        }\n        var result = List[Long]()\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) result = n :: result\n        }\n        result.reverse",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n\
    \            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n \
    \       }\n        numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        var map = Map[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) {\n          \
    \      map(n) += 1\n            } else {\n                map(n) = 1\n       \
    \     }\n        }\n        var result = List[Long]()\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) {\n                result = n :: result\n  \
    \          }\n        }\n        result.reverse", "        val map = new HashMap[Long,\
    \ Int]\n        numbers.foreach(n => map(n) = map.getOrElse(n, 0) + 1)\n     \
    \   numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        var map = Map[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        var result = List[Long]()\n \
    \       for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        val set = new HashSet[Long]\n  \
    \      val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        val map = new HashMap[Long, Int]()\n       \
    \ for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n       \
    \     else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", " \
    \       var set = Set[Long]()\n        var result = List[Long]()\n        for\
    \ (i <- numbers) {\n            if (!set.contains(i)) {\n                set +=\
    \ i\n                result = i :: result\n            }\n        }\n        result.reverse",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                result += n\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var map = Map[Long, Int]()\n        for (number <- numbers)\
    \ {\n            map(number) = map.getOrElse(number, 0) + 1\n        }\n     \
    \   var result = List[Long]()\n        for (number <- numbers) {\n           \
    \ if (map(number) == 1) result = result :+ number\n        }\n        result",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        var map = Map[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        var result = List[Long]()\n \
    \       for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        val set = new HashSet[Long]\n  \
    \      val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map += (n -> 1)\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val buffer =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                buffer += number\n       \
    \     }\n        }\n        buffer.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]()\n        for (number <- numbers) {\n\
    \            if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        val result = new ListBuffer[Long]()\n        for (number\
    \ <- numbers) {\n            if (map(number) == 1) result += number\n        }\n\
    \        result.toList", "        val map = new HashMap[Long, Int]\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "   \
    \     var map = Map[Long, Int]()\n        for (n <- numbers) {\n            if\
    \ (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n    \
    \    var result = List[Long]()\n        for (n <- numbers) {\n            if (map(n)\
    \ == 1) result ::= n\n        }\n        result.reverse", "        var set = new\
    \ HashSet[Long]\n        var result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result += number\n            }\n        }\n    \
    \    result.toList", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        var map = Map[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        return numbers.filter(n => map(n)\
    \ == 1)", "        val map = new HashMap[Long, Int]\n        for (i <- numbers)\
    \ {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n\
    \        }\n        numbers.filter(i => map(i) == 1)", "        val map = new\
    \ HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        numbers.filter(n\
    \ => map(n) == 1)", "        val set = new HashSet[Long]\n        val result =\
    \ new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val map = new HashMap[Long,\
    \ Int]()\n        for (number <- numbers) {\n            if (map.contains(number))\
    \ map(number) += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var set = Set[Long]()\n        var list = List[Long]()\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                list = n :: list\n            }\n        }\n\
    \        list.reverse", "        var map = Map[Long, Int]()\n        for (n <-\
    \ numbers) {\n            if (map.contains(n)) map(n) += 1\n            else map(n)\
    \ = 1\n        }\n        var result = List[Long]()\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) result = n :: result\n        }\n        result.reverse",
  "        val set = HashSet[Long]()\n        val result = ListBuffer[Long]()\n  \
    \      for (n <- numbers) {\n            if (!set.contains(n)) {\n           \
    \     set += n\n                result += n\n            }\n        }\n      \
    \  result.toList", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                result = result :+ number\n                set += number\n  \
    \          }\n        }\n        result", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (n <- numbers) {\n   \
    \         if (!set.contains(n)) {\n                set += n\n                result\
    \ += n\n            }\n        }\n        result.toList", "        val set = new\
    \ HashSet[Long]\n        val result = new ListBuffer[Long]\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result += number\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var map = new HashMap[Long, Int]\n        for (n <- numbers)\
    \ {\n            if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n\
    \        }\n        var result = new ListBuffer[Long]\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) result += n\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ }\n        numbers.filter(n => map(n) == 1)", "        var map = Map[Long, Int]()\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) {\n\
    \                map(number) += 1\n            } else {\n                map(number)\
    \ = 1\n            }\n        }\n        var result = List[Long]()\n        for\
    \ (number <- numbers) {\n            if (map(number) == 1) {\n               \
    \ result = number :: result\n            }\n        }\n        result.reverse",
  "        var result = List[Long]()\n        var set = Set[Long]()\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                result\
    \ = result :+ number\n                set = set + number\n            }\n    \
    \    }\n        result", "        val map = new HashMap[Long, Int]\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        numbers.filter(n => map(n) == 1)", "   \
    \     val numbersSet = numbers.toSet\n        numbersSet.toList", "        val\
    \ map = new HashMap[Long, Int]\n        for (n <- numbers) {\n            if (map.contains(n))\
    \ map(n) += 1\n            else map(n) = 1\n        }\n        var result = List[Long]()\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        var set = Set[Long]()\n        var\
    \ result = List[Long]()\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result = number :: result\n\
    \            }\n        }\n        result.reverse", "        var result = List[Long]()\n\
    \        var set = Set[Long]()\n        for (number <- numbers) {\n          \
    \  if (!set.contains(number)) {\n                result = result :+ number\n \
    \               set = set + number\n            }\n        }\n        result",
  "        var result = List[Long]()\n        var set = Set[Long]()\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                result\
    \ = result :+ number\n                set = set + number\n            }\n    \
    \    }\n        result", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        var map = Map[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        var result = List[Long]()\n \
    \       for (n <- numbers) {\n            if (map(n) == 1) result = n :: result\n\
    \        }\n        result.reverse", "        val set = new HashSet[Long]\n  \
    \      val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       set += n\n                result += n\n            }\n        }\n    \
    \    result.toList", "        val map = new HashMap[Long, Int]\n        for (number\
    \ <- numbers) {\n            if (map.contains(number)) map(number) += 1\n    \
    \        else map(number) = 1\n        }\n        numbers.filter(number => map(number)\
    \ == 1)", "        var set = Set[Long]()\n        var result = List[Long]()\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result = number :: result\n  \
    \          }\n        }\n        result.reverse", "        var set = Set[Long]()\n\
    \        var result = List[Long]()\n        for (number <- numbers) {\n      \
    \      if (!set.contains(number)) {\n                set += number\n         \
    \       result = number :: result\n            }\n        }\n        result.reverse",
  "        var map = Map[Long, Int]()\n        for (number <- numbers) {\n       \
    \     if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        var result = List[Long]()\n        for (number <- numbers)\
    \ {\n            if (map(number) == 1) result = number :: result\n        }\n\
    \        result.reverse", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList", "        val set = HashSet[Long]()\n\
    \        val result = ListBuffer[Long]()\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = HashMap[Long, Int]()\n        numbers.foreach(n => {\n      \
    \      if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n       \
    \ })\n        numbers.filter(n => map(n) == 1)", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        val result = new ListBuffer[Long]\n\
    \        for (n <- numbers) {\n            if (map(n) == 1) result += n\n    \
    \    }\n        result.toList", "        val map = new HashMap[Long, Int]\n  \
    \      for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        numbers.filter(number\
    \ => map(number) == 1)", "        var set = Set[Long]()\n        var result =\
    \ List[Long]()\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result = number :: result\n\
    \            }\n        }\n        result.reverse", "        val map = new HashMap[Long,\
    \ Int]\n        for (n <- numbers) {\n            if (map.contains(n)) map(n)\
    \ += 1\n            else map(n) = 1\n        }\n        numbers.filter(n => map(n)\
    \ == 1)", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (n <- numbers) {\n            if (!set.contains(n)) {\n         \
    \       result = n :: result\n                set += n\n            }\n      \
    \  }\n        result.reverse", "        var map = Map[Long, Int]()\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        var result = List[Long]()\n        for (n\
    \ <- numbers) {\n            if (map(n) == 1) result = n :: result\n        }\n\
    \        result.reverse", "        var map = Map[Long, Int]()\n        for (n\
    \ <- numbers) {\n            if (map.contains(n)) map(n) += 1\n            else\
    \ map(n) = 1\n        }\n        var result = List[Long]()\n        for (n <-\
    \ numbers) {\n            if (map(n) == 1) result = n :: result\n        }\n \
    \       result.reverse", "        var map = Map[Long, Int]()\n        for (n <-\
    \ numbers) {\n            if (map.contains(n)) map(n) += 1\n            else map(n)\
    \ = 1\n        }\n        var result = List[Long]()\n        for (n <- numbers)\
    \ {\n            if (map(n) == 1) result = n :: result\n        }\n        result.reverse",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (number <- numbers) {\n            if (map.contains(number)) map(number)\
    \ += 1\n            else map(number) = 1\n        }\n        val result = new\
    \ ListBuffer[Long]\n        for (number <- numbers) {\n            if (map(number)\
    \ == 1) result += number\n        }\n        result.toList", "        val map\
    \ = new HashMap[Long, Int]\n        for (number <- numbers) {\n            if\
    \ (map.contains(number)) map(number) += 1\n            else map(number) = 1\n\
    \        }\n        numbers.filter(number => map(number) == 1)", "        val\
    \ map = new HashMap[Long, Int]()\n        for (n <- numbers) {\n            if\
    \ (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n    \
    \    numbers.filter(n => map(n) == 1)", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val set = new HashSet[Long]\n        val result = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                result += number\n           \
    \ }\n        }\n        result.toList", "        val set = new HashSet[Long]\n\
    \        val result = new ListBuffer[Long]\n        for (number <- numbers) {\n\
    \            if (!set.contains(number)) {\n                set += number\n   \
    \             result += number\n            }\n        }\n        result.toList",
  "        val map = new HashMap[Long, Int]\n        for (number <- numbers) {\n \
    \           if (map.contains(number)) map(number) += 1\n            else map(number)\
    \ = 1\n        }\n        numbers.filter(number => map(number) == 1)", "     \
    \   val map = new HashMap[Long, Int]\n        for (n <- numbers) {\n         \
    \   if (map.contains(n)) map(n) += 1\n            else map(n) = 1\n        }\n\
    \        numbers.filter(n => map(n) == 1)", "        val map = HashMap[Long, Int]()\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        val set = new HashSet[Long]\n        val buffer = new ListBuffer[Long]\n\
    \        for (number <- numbers) {\n            if (!set.contains(number)) {\n\
    \                set += number\n                buffer += number\n           \
    \ }\n        }\n        buffer.toList", "        val map = new HashMap[Long, Int]\n\
    \        for (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n\
    \            else map(n) = 1\n        }\n        numbers.filter(n => map(n) ==\
    \ 1)", "        var set = Set[Long]()\n        var list = List[Long]()\n     \
    \   for (i <- numbers) {\n            if (!set.contains(i)) {\n              \
    \  set += i\n                list = i :: list\n            }\n        }\n    \
    \    list.reverse", "        var result = List[Long]()\n        var set = Set[Long]()\n\
    \        for (i <- numbers) {\n            if (!set.contains(i)) {\n         \
    \       result = i :: result\n                set += i\n            }\n      \
    \  }\n        result.reverse", "        val set = new HashSet[Long]\n        val\
    \ result = new ListBuffer[Long]\n        for (number <- numbers) {\n         \
    \   if (!set.contains(number)) {\n                set += number\n            \
    \    result += number\n            }\n        }\n        result.toList", "   \
    \     var set = Set[Long]()\n        var result = List[Long]()\n        for (number\
    \ <- numbers) {\n            if (!set.contains(number)) {\n                set\
    \ += number\n                result = number :: result\n            }\n      \
    \  }\n        result.reverse", "        var map = Map[Long, Int]()\n        for\
    \ (n <- numbers) {\n            if (map.contains(n)) map(n) += 1\n           \
    \ else map(n) = 1\n        }\n        var result = List[Long]()\n        for (n\
    \ <- numbers) {\n            if (map(n) == 1) result = n :: result\n        }\n\
    \        result.reverse", "        val set = new HashSet[Long]\n        val result\
    \ = new ListBuffer[Long]\n        for (number <- numbers) {\n            if (!set.contains(number))\
    \ {\n                set += number\n                result += number\n       \
    \     }\n        }\n        result.toList"]
stop_tokens:
- "\n    }\n"
