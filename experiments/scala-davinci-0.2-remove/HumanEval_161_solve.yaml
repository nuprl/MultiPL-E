name: HumanEval_161_solve
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a string s.\n    // if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n    // otherwise keep it as it is.\n    //\
  \ If the string contains no letters, reverse the string.\n    // The function should\
  \ return the resulted string.\n    // Examples\n    def solve(s : String) : String\
  \ = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(solve((\"AsDf\")).equals((\"\
  aSdF\")));\n    assert(solve((\"1234\")).equals((\"4321\")));\n    assert(solve((\"\
  ab\")).equals((\"AB\")));\n    assert(solve((\"#a@C\")).equals((\"#A@c\")));\n \
  \   assert(solve((\"#AsdfW^45\")).equals((\"#aSDFw^45\")));\n    assert(solve((\"\
  #6@2\")).equals((\"2@6#\")));\n    assert(solve((\"#$a^D\")).equals((\"#$A^d\")));\n\
  \    assert(solve((\"#ccc\")).equals((\"#CCC\")));\n    }\n\n}\n"
completions: ["        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        if (s.isEmpty) return\
    \ s\n        val sb = new StringBuilder\n        for (c <- s) {\n            if\
    \ (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n      \
    \          else sb.append(c.toUpper)\n            } else sb.append(c)\n      \
    \  }\n        if (sb.toString.forall(!_.isLetter)) sb.reverse.toString\n     \
    \   else sb.toString", "        val sb = new StringBuilder\n        var flag =\
    \ false\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                flag = true\n                sb.append(s(i).toLower)\n  \
    \          } else {\n                sb.append(s(i))\n            }\n        }\n\
    \        if (flag) sb.toString.reverse else s.reverse", "        if (s.length\
    \ == 0) return s\n        val sb = new StringBuilder\n        for (c <- s) {\n\
    \            if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        if (sb.toString.length == 0) s.reverse\n        else sb.toString",
  "        if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(c => !c.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c)", "        var result = \"\"\
    \n        for (i <- 0 until s.length) {\n            val c = s(i)\n          \
    \  if (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n   \
    \             else result += c.toUpper\n            } else result += c\n     \
    \   }\n        if (result.length == 0) s.reverse\n        else result", "    \
    \    val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        var result = \"\"\n        var hasLetter\
    \ = false\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                hasLetter = true\n                if (s(i).isUpper) result\
    \ += s(i).toLower\n                else result += s(i).toUpper\n            }\n\
    \            else result += s(i)\n        }\n        if (hasLetter) result\n \
    \       else result.reverse", "        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val numbers = \"0123456789\"\n        var result = \"\"\n        for\
    \ (i <- 0 until s.length) {\n            if (letters.contains(s(i))) {\n     \
    \           if (s(i).isUpper) result += s(i).toLower\n                else result\
    \ += s(i).toUpper\n            }\n            else if (numbers.contains(s(i)))\
    \ result += s(i)\n        }\n        if (result.length == 0) result = s.reverse\n\
    \        result", "        if (s.exists(c => c.isLetter)) {\n            s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c).reverse\n        } else {\n\
    \            s.reverse\n        }", "        if (s.length == 0) return s\n   \
    \     val sb = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter)\
    \ sb.append(c.toLower) else sb.append(c.toUpper)\n        }\n        if (sb.toString.exists(_.isLetter))\
    \ sb.toString else sb.reverse.toString", "        if (s.isEmpty) return s\n  \
    \      val sb = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) sb.append(c.toLower)\n                else\
    \ sb.append(c.toUpper)\n            } else sb.append(c)\n        }\n        if\
    \ (sb.forall(!_.isLetter)) sb.reverse.toString\n        else sb.toString", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.length == 0) return s\n        var result = \"\"\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i).isLetter) {\n                if (s(i).isUpper)\
    \ result += s(i).toLower\n                else result += s(i).toUpper\n      \
    \      }\n            else result += s(i)\n        }\n        return result",
  "        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.isEmpty) return s\n        val\
    \ sb = new StringBuilder\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n\
    \                else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n\
    \        }\n        return sb.toString", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(_.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower else c.toUpper)\n        } else {\n            s.reverse\n       \
    \ }", "        val sb = new StringBuilder\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).isLetter) {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n\
    \                else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n\
    \        }\n        if (sb.toString.exists(_.isLetter)) sb.toString\n        else\
    \ sb.reverse.toString", "        val sb = new StringBuilder\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        if (sb.length == 0) s.reverse\n        else sb.toString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c).mkString\n        } else {\n\
    \            s.reverse\n        }", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower else c.toUpper\
    \ else c)", "        if (s.exists(c => c.isLetter)) {\n            s.map(c =>\
    \ if (c.isLetter) c.toLower ^ c.toUpper else c).reverse\n        } else {\n  \
    \          s.reverse\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        if (s.exists(c =>\
    \ c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toLower ^ c.toUpper\
    \ else c).reverse\n        } else {\n            s.reverse\n        }", "    \
    \    if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower\
    \ else c.toUpper else c)", "        if (s.exists(c => c.isLetter)) {\n       \
    \     s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c).reverse\n     \
    \   } else {\n            s.reverse\n        }", "        var t = s.reverse\n\
    \        var u = \"\"\n        for (i <- 0 until t.length) {\n            if (t(i).isLetter)\
    \ {\n                if (t(i).isUpper) u += t(i).toLower\n                else\
    \ u += t(i).toUpper\n            }\n            else u += t(i)\n        }\n  \
    \      u", "        val sb = new StringBuilder\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).isLetter) {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n\
    \                else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n\
    \        }\n        if (sb.length == 0) s.reverse\n        else sb.toString",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val sb = new StringBuilder\n        var i = 0\n        var\
    \ isLetter = false\n        while (i < s.length) {\n            if (s(i).isLetter)\
    \ {\n                isLetter = true\n                sb.append(s(i).toLower)\n\
    \            } else {\n                sb.append(s(i))\n            }\n      \
    \      i += 1\n        }\n        if (isLetter) sb.toString.reverse else s.reverse",
  "        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower else c.toUpper\
    \ else c)", "        val sb = new StringBuilder\n        var hasLetter = false\n\
    \        for (c <- s) {\n            if (c.isLetter) {\n                hasLetter\
    \ = true\n                sb.append(c.toLower)\n            } else {\n       \
    \         sb.append(c)\n            }\n        }\n        if (hasLetter) sb.toString\n\
    \        else sb.reverse.toString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.forall(c => !c.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower else c.toUpper\
    \ else c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val sb = new StringBuilder\n        var isLetter = false\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             isLetter = true\n                sb.append(s(i).toLower)\n     \
    \       } else {\n                sb.append(s(i))\n            }\n        }\n\
    \        if (isLetter) sb.toString.reverse\n        else sb.toString", "     \
    \   if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toLower\
    \ ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n     \
    \   }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isLower) c.toUpper else c.toLower)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.isEmpty) return s\n        val sb\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n             \
    \   else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n       \
    \ }\n        sb.toString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(x => if (x.isLetter) x.toLower ^ x.toUpper else x)", "   \
    \     if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.forall(c => !c.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.length == 0) s.reverse\n        else letters.map(c => if\
    \ (c.isUpper) c.toLower else c.toUpper)", "        val letters = s.filter(c =>\
    \ c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else s.map(c =>\
    \ if (c.isLetter) c.toLower ^ c.toUpper else c)", "        val letters = s.filter(_.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val sb = new StringBuilder\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        if (sb.length == 0) s.reverse\n        else sb.toString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val sb = new StringBuilder\n        for (i <- 0 until s.length) {\n   \
    \         if (s(i).isLetter) {\n                sb.append(s(i).toLower)\n    \
    \        } else {\n                sb.append(s(i))\n            }\n        }\n\
    \        if (sb.toString == s) {\n            s.reverse\n        } else {\n  \
    \          sb.toString\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        var r = \"\"\n        var flag = false\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             flag = true\n                if (s(i).isUpper) r += s(i).toLower\n\
    \                else r += s(i).toUpper\n            }\n            else r +=\
    \ s(i)\n        }\n        if (flag) r\n        else r.reverse", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val letters = s.filter(c => c.isLetter)\n        if (letters.length == 0)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(x => x.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(x => if (x.isLetter) x.toLower ^ x.toUpper else\
    \ x)", "        val sb = new StringBuilder\n        var hasLetter = false\n  \
    \      for (c <- s) {\n            if (c.isLetter) {\n                hasLetter\
    \ = true\n                sb += c.toLower\n            } else {\n            \
    \    sb += c\n            }\n        }\n        if (hasLetter) sb.toString.reverse\n\
    \        else sb.toString", "        if (s.exists(c => c.isLetter)) {\n      \
    \      s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c).reverse\n    \
    \    } else {\n            s.reverse\n        }", "        if (s.forall(!_.isLetter))\
    \ s.reverse\n        else s.map(x => if (x.isLetter) x.toLower ^ x.toUpper else\
    \ x)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower else c.toUpper)\n        } else {\n            s.reverse\n       \
    \ }", "        var result = \"\"\n        for (i <- 0 until s.length) {\n    \
    \        if (s(i).isLetter) {\n                if (s(i).isUpper) result += s(i).toLower\n\
    \                else result += s(i).toUpper\n            }\n            else\
    \ result += s(i)\n        }\n        if (result.length == 0) return s.reverse\n\
    \        return result", "        val letters = s.filter(c => c.isLetter)\n  \
    \      if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) if (c.isUpper) c.toLower else c.toUpper\
    \ else c)", "        if (s.exists(c => c.isLetter)) {\n            s.map(c =>\
    \ if (c.isLetter) if (c.isUpper) c.toLower else c.toUpper else c).mkString\n \
    \       } else {\n            s.reverse\n        }", "        if (s.exists(c =>\
    \ c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toLower ^ c.toUpper\
    \ else c).reverse\n        } else {\n            s.reverse\n        }", "    \
    \    if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c).mkString\n        } else {\n\
    \            s.reverse\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else {\n            val nonLetters\
    \ = s.filter(c => !c.isLetter)\n            letters.map(c => if (c.isUpper) c.toLower\
    \ else c.toUpper) + nonLetters.reverse\n        }", "        val sb = new StringBuilder\n\
    \        var flag = true\n        for (i <- 0 until s.length) {\n            if\
    \ (s(i).isLetter) {\n                flag = false\n                if (s(i).isUpper)\
    \ sb.append(s(i).toLower)\n                else sb.append(s(i).toUpper)\n    \
    \        }\n            else sb.append(s(i))\n        }\n        if (flag) sb.reverse.toString\n\
    \        else sb.toString", "        val sb = new StringBuilder\n        var isLetter\
    \ = false\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                isLetter = true\n                sb.append(s(i).toLower)\n\
    \            } else {\n                sb.append(s(i))\n            }\n      \
    \  }\n        if (isLetter) sb.toString.reverse else s.reverse", "        if (s.exists(_.isLetter))\
    \ {\n            s.map(c => if (c.isLetter) c.toLower ^ 32 else c)\n        }\
    \ else {\n            s.reverse\n        }", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toUpper ^ c.toLower else\
    \ c)", "        val sb = new StringBuilder\n        var isLetter = false\n   \
    \     for (c <- s) {\n            if (c.isLetter) {\n                isLetter\
    \ = true\n                sb.append(c.toLower)\n            } else {\n       \
    \         sb.append(c)\n            }\n        }\n        if (isLetter) sb.toString.reverse\
    \ else s.reverse", "        var res = \"\"\n        var isLetter = false\n   \
    \     for (c <- s) {\n            if (c.isLetter) {\n                isLetter\
    \ = true\n                res += c.toLower\n            } else {\n           \
    \     res += c\n            }\n        }\n        if (isLetter) res.reverse else\
    \ res", "        if (s.forall(x => !x.isLetter)) s.reverse\n        else s.map(x\
    \ => if (x.isLetter) if (x.isUpper) x.toLower else x.toUpper else x)", "     \
    \   var str = s\n        var isLetter = false\n        for (i <- 0 until s.length)\
    \ {\n            if (s(i).isLetter) {\n                isLetter = true\n     \
    \           if (s(i).isUpper) str = str.updated(i, s(i).toLower)\n           \
    \     else str = str.updated(i, s(i).toUpper)\n            }\n        }\n    \
    \    if (isLetter) str\n        else str.reverse", "        var result = \"\"\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             if (s(i).isUpper) result += s(i).toLower\n                else result\
    \ += s(i).toUpper\n            }\n            else result += s(i)\n        }\n\
    \        if (result.length == 0) return s.reverse\n        return result", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val sb = new StringBuilder\n        var isLetter = false\n        for (i\
    \ <- 0 until s.length) {\n            if (s(i).isLetter) {\n                isLetter\
    \ = true\n                sb.append(s(i).toUpper)\n            } else {\n    \
    \            sb.append(s(i))\n            }\n        }\n        if (isLetter)\
    \ sb.toString\n        else sb.reverse.toString", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else {\n   \
    \         val map = s.map(c => if (c.isLetter) c.toLower ^ 32 else c)\n      \
    \      map.mkString\n        }", "        val sb = new StringBuilder\n       \
    \ var isLetter = false\n        for (c <- s) {\n            if (c.isLetter) {\n\
    \                isLetter = true\n                sb.append(c.toLower)\n     \
    \       } else {\n                sb.append(c)\n            }\n        }\n   \
    \     if (isLetter) sb.toString.reverse else s.reverse", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isLower) c.toUpper else c.toLower)", "        if\
    \ (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        val letters = s.filter(x => x.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(x => if (x.isUpper)\
    \ x.toLower else x.toUpper)", "        if (s.forall(c => !c.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.exists(_.isLetter)) {\n            s.map(c => if (c.isLetter) c.toLower\
    \ ^ 32 else c)\n        } else {\n            s.reverse\n        }", "       \
    \ var result = \"\"\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) result += s(i).toLower\n              \
    \  else result += s(i).toUpper\n            }\n            else result += s(i)\n\
    \        }\n        if (result.length == 0) return s.reverse\n        return result",
  "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        val sb = new StringBuilder\n        for (c <- s) {\n   \
    \         if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        if (sb.length == 0) s.reverse\n        else sb.toString",
  "        val sb = new StringBuilder\n        var flag = false\n        for (c <-\
    \ s) {\n            if (c.isLetter) {\n                sb.append(c.toLower)\n\
    \                flag = true\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (flag) sb.toString.reverse else s.reverse",
  "        val sb = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) sb.append(c.toLower)\n                else\
    \ sb.append(c.toUpper)\n            } else sb.append(c)\n        }\n        if\
    \ (sb.length == 0) s.reverse\n        else sb.toString", "        if (s.exists(c\
    \ => c.isLetter)) {\n            s.map(c => if (c.isLetter) c.toLower ^ c.toUpper\
    \ else c).reverse\n        } else {\n            s.reverse\n        }", "    \
    \    if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ if (c.isUpper) c.toLower else c.toUpper else c)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else {\n            val chars = s.toCharArray\n         \
    \   for (i <- 0 until s.length) {\n                if (s(i).isLetter) {\n    \
    \                chars(i) = if (s(i).isUpper) s(i).toLower else s(i).toUpper\n\
    \                }\n            }\n            chars.mkString\n        }", " \
    \       val letters = s.filter(c => c.isLetter)\n        if (letters.length ==\
    \ 0) s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper\
    \ else c)", "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty)\
    \ s.reverse\n        else {\n            val reversed = letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)\n            s.map(c => if (c.isLetter) reversed(letters.indexOf(c))\
    \ else c)\n        }", "        if (s.isEmpty) return s\n        var result =\
    \ \"\"\n        for (c <- s) {\n            if (c.isLetter) {\n              \
    \  if (c.isUpper) result += c.toLower\n                else result += c.toUpper\n\
    \            } else result += c\n        }\n        if (result.exists(_.isLetter))\
    \ result\n        else result.reverse", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c =>\
    \ if (c.isLetter) c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.length == 0) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toUpperCase else c.toLowerCase)", "        if (s.isEmpty)\
    \ return s\n        var b = false\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                b = true\n                break\n            }\n        }\n\
    \        if (!b) return s.reverse\n        var sb = new StringBuilder\n      \
    \  for (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper)\
    \ sb.append(c.toLower)\n                else sb.append(c.toUpper)\n          \
    \  } else sb.append(c)\n        }\n        sb.toString", "        val sb = new\
    \ StringBuilder\n        for (c <- s) {\n            if (c.isLetter) {\n     \
    \           if (c.isUpper) sb.append(c.toLower)\n                else sb.append(c.toUpper)\n\
    \            } else sb.append(c)\n        }\n        if (sb.length == 0) s.reverse\n\
    \        else sb.toString", "        val sb = new StringBuilder\n        var isLetter\
    \ = false\n        for (c <- s) {\n            if (c.isLetter) {\n           \
    \     isLetter = true\n                sb.append(c.toUpper)\n            } else\
    \ {\n                sb.append(c)\n            }\n        }\n        if (isLetter)\
    \ sb.toString else sb.reverse.toString", "        val sb = new StringBuilder\n\
    \        var isLetter = false\n        for (i <- 0 until s.length) {\n       \
    \     val c = s(i)\n            if (c.isLetter) {\n                isLetter =\
    \ true\n                sb.append(c.toLowerCase)\n            } else {\n     \
    \           sb.append(c)\n            }\n        }\n        if (isLetter) sb.toString.reverse\
    \ else s.reverse", "        val letters = s.filter(c => c.isLetter)\n        if\
    \ (letters.length == 0) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.forall(!_.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.forall(!_.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     val sb = new StringBuilder\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                if (c.isUpper) sb.append(c.toLower)\n                else\
    \ sb.append(c.toUpper)\n            } else sb.append(c)\n        }\n        if\
    \ (sb.length == 0) s.reverse\n        else sb.toString", "        if (s.forall(c\
    \ => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter) c.toLower\
    \ ^ c.toUpper else c)", "        val letters = s.filter(c => c.isLetter)\n   \
    \     if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.exists(c => c.isLetter)) {\n    \
    \        s.map(c => if (c.isLetter) c.toLower else c.toUpper)\n        } else\
    \ {\n            s.reverse\n        }", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             if (s(i).isUpper) sb.append(s(i).toLower)\n                else\
    \ sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n        }\n   \
    \     if (sb.length == 0) s.reverse\n        else sb.toString", "        val letters\
    \ = s.filter(_.isLetter)\n        if (letters.isEmpty) s.reverse\n        else\
    \ s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        val letters\
    \ = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.isEmpty) return s\n        val\
    \ sb = new StringBuilder\n        var isLetter = false\n        for (i <- 0 until\
    \ s.length) {\n            if (s(i).isLetter) {\n                isLetter = true\n\
    \                sb.append(s(i).toLower)\n            } else {\n             \
    \   sb.append(s(i))\n            }\n        }\n        if (isLetter) return sb.toString\n\
    \        else {\n            val sb2 = new StringBuilder\n            for (i <-\
    \ 0 until s.length) {\n                if (s(i).isLetter) {\n                \
    \    sb2.append(s(i).toUpper)\n                } else {\n                    sb2.append(s(i))\n\
    \                }\n            }\n            return sb2.toString\n        }",
  "        val letters = s.filter(c => c.isLetter)\n        val nonLetters = s.filter(c\
    \ => !c.isLetter)\n        if (letters.length == 0) nonLetters.reverse\n     \
    \   else letters.map(c => if (c.isUpper) c.toLower else c.toUpper) + nonLetters",
  "        val sb = new StringBuilder\n        var flag = true\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i).isLetter) {\n                flag\
    \ = false\n                sb.append(if (s(i).isUpper) s(i).toLower else s(i).toUpper)\n\
    \            } else sb.append(s(i))\n        }\n        if (flag) sb.reverse.toString\
    \ else sb.toString", "        if (s.exists(_.isLetter)) {\n            s.map(x\
    \ => if (x.isLetter) x.toLower else x.toUpper)\n        } else {\n           \
    \ s.reverse\n        }", "        val sb = new StringBuilder\n        var flag\
    \ = false\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                flag = true\n                sb.append(s(i).toUpper)\n  \
    \          } else {\n                sb.append(s(i))\n            }\n        }\n\
    \        if (flag) sb.toString\n        else sb.reverse.toString", "        val\
    \ letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      val sb = new StringBuilder\n        var allLetters = true\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                allLetters = false\n\
    \                sb.append(c.toLower)\n            } else {\n                sb.append(c)\n\
    \            }\n        }\n        if (allLetters) sb.reverse.toString\n     \
    \   else sb.toString", "        val letters = s.filter(c => c.isLetter)\n    \
    \    if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.exists(c => c.isLetter)) {\n    \
    \        s.map(c => if (c.isLetter) c.toLower ^ 32 else c).reverse\n        }\
    \ else {\n            s.reverse\n        }", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else s.map(c\
    \ => if (c.isLetter) c.toLower ^ c.toUpper else c)", "        val letters = s.filter(c\
    \ => c.isLetter)\n        if (letters.isEmpty) s.reverse\n        else letters.map(c\
    \ => if (c.isUpper) c.toLower else c.toUpper)", "        var result = \"\"\n \
    \       var hasLetter = false\n        for (i <- 0 until s.length) {\n       \
    \     if (s(i).isLetter) {\n                hasLetter = true\n               \
    \ if (s(i).isUpper) result += s(i).toLower\n                else result += s(i).toUpper\n\
    \            }\n            else result += s(i)\n        }\n        if (hasLetter)\
    \ result\n        else result.reverse", "        if (s.forall(c => !c.isLetter))\
    \ s.reverse\n        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else\
    \ c)", "        val sb = new StringBuilder\n        for (c <- s) {\n         \
    \   if (c.isLetter) {\n                sb.append(c.toLowerCase)\n            }\
    \ else {\n                sb.append(c)\n            }\n        }\n        if (sb.length\
    \ == 0) s.reverse else sb.toString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.forall(c => !c.isLetter)) s.reverse\n\
    \        else s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c)", "   \
    \     if (s.exists(c => c.isLetter)) {\n            s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c).reverse\n        } else {\n            s.reverse\n\
    \        }", "        var result = \"\"\n        var hasLetter = false\n     \
    \   for (c <- s) {\n            if (c.isLetter) {\n                hasLetter =\
    \ true\n                if (c.isUpper) result += c.toLower\n                else\
    \ result += c.toUpper\n            }\n            else result += c\n        }\n\
    \        if (hasLetter) result\n        else result.reverse", "        val letters\
    \ = s.filter(x => x.isLetter)\n        if (letters.isEmpty) s.reverse\n      \
    \  else letters.map(x => if (x.isUpper) x.toLower else x.toUpper)", "        if\
    \ (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toUpper ^ c.toLower else c)", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        if (s.isEmpty) return s\n        val sb\
    \ = new StringBuilder\n        for (i <- 0 until s.length) {\n            if (s(i).isLetter)\
    \ {\n                if (s(i).isUpper) sb.append(s(i).toLower)\n             \
    \   else sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n       \
    \ }\n        sb.toString", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val sb = new StringBuilder\n        var\
    \ flag = false\n        for (c <- s) {\n            if (c.isLetter) {\n      \
    \          flag = true\n                sb.append(c.toUpper)\n            } else\
    \ {\n                sb.append(c)\n            }\n        }\n        if (flag)\
    \ sb.toString.reverse else s.reverse", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.exists(c => c.isLetter)) {\n\
    \            s.map(c => if (c.isLetter) c.toLower ^ c.toUpper else c).reverse\n\
    \        } else {\n            s.reverse\n        }", "        val sb = new StringBuilder\n\
    \        for (i <- 0 until s.length) {\n            if (s(i).isLetter) {\n   \
    \             if (s(i).isUpper) sb.append(s(i).toLower)\n                else\
    \ sb.append(s(i).toUpper)\n            } else sb.append(s(i))\n        }\n   \
    \     if (sb.toString == s) s.reverse\n        else sb.toString", "        if\
    \ (s.forall(c => !c.isLetter)) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)", "        if (s.exists(c => c.isLetter)) {\n\
    \            s.map(c => if (c.isLetter) c.toLower else c.toUpper)\n        } else\
    \ {\n            s.reverse\n        }", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else letters.map(c => if (c.isUpper)\
    \ c.toLower else c.toUpper)", "        val sb = new StringBuilder\n        for\
    \ (c <- s) {\n            if (c.isLetter) {\n                if (c.isUpper) sb.append(c.toLower)\n\
    \                else sb.append(c.toUpper)\n            } else sb.append(c)\n\
    \        }\n        if (sb.toString.isEmpty) s.reverse\n        else sb.toString",
  "        val letters = s.filter(c => c.isLetter)\n        if (letters.isEmpty) s.reverse\n\
    \        else letters.map(c => if (c.isUpper) c.toLower else c.toUpper)", "  \
    \      if (s.isEmpty) return s\n        var result = \"\"\n        for (i <- 0\
    \ until s.length) {\n            if (s(i).isLetter) {\n                if (s(i).isUpper)\
    \ result += s(i).toLower\n                else result += s(i).toUpper\n      \
    \      } else result += s(i)\n        }\n        return result", "        if (s.isEmpty)\
    \ return s\n        var result = \"\"\n        for (c <- s) {\n            if\
    \ (c.isLetter) {\n                if (c.isUpper) result += c.toLower\n       \
    \         else result += c.toUpper\n            } else result += c\n        }\n\
    \        if (result.exists(_.isLetter)) result\n        else result.reverse",
  "        val sb = new StringBuilder\n        var flag = false\n        for (i <-\
    \ 0 until s.length) {\n            if (s(i).isLetter) {\n                flag\
    \ = true\n                sb.append(s(i).toLower)\n            } else {\n    \
    \            sb.append(s(i))\n            }\n        }\n        if (flag) sb.toString.reverse\
    \ else sb.toString", "        val sb = new StringBuilder\n        var isLetter\
    \ = false\n        for (c <- s) {\n            if (c.isLetter) {\n           \
    \     isLetter = true\n                sb.append(c.toLower)\n            } else\
    \ {\n                sb.append(c)\n            }\n        }\n        if (isLetter)\
    \ sb.toString.reverse else s.reverse", "        val letters = s.filter(c => c.isLetter)\n\
    \        if (letters.isEmpty) s.reverse\n        else s.map(c => if (c.isLetter)\
    \ c.toLower ^ c.toUpper else c)"]
stop_tokens:
- "\n    }\n"
