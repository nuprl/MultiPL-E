name: HumanEval_94_skjkasdkd
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // You are given a list of integers.\n    // You need to find the largest prime\
  \ value and return the sum of its digits.\n    // Examples:\n    def skjkasdkd(lst\
  \ : List[Long]) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 3l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 5l.toLong,\
  \ 5l.toLong, 5l.toLong, 2l.toLong, 181l.toLong, 32l.toLong, 4l.toLong, 32l.toLong,\
  \ 3l.toLong, 2l.toLong, 32l.toLong, 324l.toLong, 4l.toLong, 3l.toLong))) == (10l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 0l.toLong, 1l.toLong, 8l.toLong, 2l.toLong,\
  \ 4597l.toLong, 2l.toLong, 1l.toLong, 3l.toLong, 40l.toLong, 1l.toLong, 2l.toLong,\
  \ 1l.toLong, 2l.toLong, 4l.toLong, 2l.toLong, 5l.toLong, 1l.toLong))) == (25l));\n\
  \    assert(skjkasdkd((List[Long](1l.toLong, 3l.toLong, 1l.toLong, 32l.toLong, 5107l.toLong,\
  \ 34l.toLong, 83278l.toLong, 109l.toLong, 163l.toLong, 23l.toLong, 2323l.toLong,\
  \ 32l.toLong, 30l.toLong, 1l.toLong, 9l.toLong, 3l.toLong))) == (13l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 724l.toLong, 32l.toLong, 71l.toLong, 99l.toLong, 32l.toLong, 6l.toLong, 0l.toLong,\
  \ 5l.toLong, 91l.toLong, 83l.toLong, 0l.toLong, 5l.toLong, 6l.toLong))) == (11l));\n\
  \    assert(skjkasdkd((List[Long](0l.toLong, 81l.toLong, 12l.toLong, 3l.toLong,\
  \ 1l.toLong, 21l.toLong))) == (3l));\n    assert(skjkasdkd((List[Long](0l.toLong,\
  \ 8l.toLong, 1l.toLong, 2l.toLong, 1l.toLong, 7l.toLong))) == (7l));\n    assert(skjkasdkd((List[Long](8191l.toLong)))\
  \ == (19l));\n    assert(skjkasdkd((List[Long](8191l.toLong, 123456l.toLong, 127l.toLong,\
  \ 7l.toLong))) == (19l));\n    assert(skjkasdkd((List[Long](127l.toLong, 97l.toLong,\
  \ 8192l.toLong))) == (10l));\n    }\n\n}\n"
completions: ["        val primes = lst.filter(isPrime)\n        val maxPrime = primes.max\n\
    \        return maxPrime.toString.map(_.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        var max = 0L\n        for (i <- lst) {\n      \
    \      if (isPrime(i)) {\n                if (i > max) {\n                   \
    \ max = i\n                }\n            }\n        }\n        return max", " \
    \       var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                if (i > max) max = i\n            }\n        }\n        return\
    \ max", "        val primes = lst.filter(isPrime(_))\n        val max = primes.max\n\
    \        max.toString.map(_.asDigit).sum", "        val primes = lst.filter(isPrime(_))\n\
    \        val max = primes.max\n        max.toString.map(_.asDigit).sum", "   \
    \     val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        return sumDigits(maxPrime)", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val largestPrime = primes.max\n        sumOfDigits(largestPrime)", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largest = primes.max\n        return sumDigits(largest)",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", '        val primes = List(2,
    3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
    83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
    173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
    263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,
    359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
    457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
    569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
    659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
    769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
    881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
    997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,
    1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181,
    1187, 1193, 1201, 1213', "        val primes = lst.filter(x => isPrime(x))\n \
    \       val max = primes.max\n        max.toString.map(x => x.asDigit).sum", " \
    \       val primes = lst.filter(isPrime(_))\n        val max = primes.max\n  \
    \      sumDigits(max)", "        val primes = lst.filter(x => isPrime(x))\n  \
    \      val maxPrime = primes.max\n        sumDigits(maxPrime)", "        val primes\
    \ = new ArrayBuffer[Long]\n        def isPrime(n : Long) : Boolean = {\n     \
    \       for (i <- 2 to sqrt(n).toInt) {\n                if (n % i == 0) return\
    \ false\n            }\n            true\n        }\n        for (i <- lst) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        primes.max.toString.map(_.asDigit).sum",
  "        var primes = List[Long]()\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes = i :: primes\n        }\n        var largest = 0L\n        for (i <-\
    \ primes) {\n            if (i > largest) largest = i\n        }\n        var\
    \ sum = 0L\n        for (i <- largest.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        sumDigits(max)", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val max = primes.max\n        val digits\
    \ = max.toString.map(_.asDigit).toList\n        digits.sum", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val max = primes.max\n        var sum\
    \ = 0L\n        var n = max\n        while (n > 0) {\n            sum += n % 10\n\
    \            n /= 10\n        }\n        sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n < 2) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var primes = new ListBuffer[Long]\n        for (i <-\
    \ lst) {\n            if (isPrime(i)) primes += i\n        }\n        var max\
    \ = 0L\n        for (i <- primes) {\n            if (i > max) max = i\n      \
    \  }\n        var sum = 0L\n        var maxStr = max.toString\n        for (i\
    \ <- 0 until maxStr.length) {\n            sum += maxStr(i).asDigit\n        }\n\
    \        return sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        val digits = max.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        val digits = max.toString.toList.map(x => x.toString.toLong)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        maxPrime.toString.map(x => x.asDigit).sum",
  "        var primes = new HashSet[Long]\n        for (i <- 2L to lst.max) {\n  \
    \          var isPrime = true\n            for (j <- 2L to sqrt(i).toLong) {\n\
    \                if (i % j == 0) {\n                    isPrime = false\n    \
    \                break\n                }\n            }\n            if (isPrime)\
    \ primes.add(i)\n        }\n        var max = 0L\n        for (i <- lst) {\n \
    \           if (primes.contains(i) && i > max) max = i\n        }\n        var\
    \ sum = 0L\n        while (max > 0) {\n            sum += max % 10\n         \
    \   max /= 10\n        }\n        sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val max = primes.max\n        return digits(max).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        val digits = maxPrime.toString.toList.map(x => x.toString.toLong)\n \
    \       digits.sum", "        var primes = new ListBuffer[Long]\n        for (i\
    \ <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var max\
    \ = primes.max\n        var sum = 0L\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n  \
    \      val digits = max.toString.map(_.asDigit).toList\n        digits.sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val prime = lst.filter(x\
    \ => isPrime(x)).max\n        prime.toString.map(x => x.asDigit).sum", "     \
    \   val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n \
    \       val digits = max.toString.map(_.asDigit).toList\n        digits.sum",
  "        var primes = new ListBuffer[Long]\n        for (i <- 2 to lst.max.toInt)\
    \ {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        var max = 0L\n        for (i <- primes) {\n\
    \            if (lst.contains(i)) {\n                if (i > max) max = i\n  \
    \          }\n        }\n        var sum = 0L\n        var temp = max\n      \
    \  while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n\
    \        }\n        sum", "        var primes = new HashSet[Long]\n        for\
    \ (i <- lst) {\n            var x = i\n            var isPrime = true\n      \
    \      for (j <- 2 to sqrt(x).toInt) {\n                if (x % j == 0) {\n  \
    \                  isPrime = false\n                    break\n              \
    \  }\n            }\n            if (isPrime) primes += x\n        }\n       \
    \ var max = 0L\n        for (i <- primes) {\n            if (i > max) max = i\n\
    \        }\n        var sum = 0L\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        sum", "        var max =\
    \ 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n              \
    \  if (i > max) {\n                    max = i\n                }\n          \
    \  }\n        }\n        return max", "        val primes = lst.filter(x => x.isPrime)\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.toList.map(x => x.toString.toLong)\n      \
    \  digits.sum", "        val primes = lst.filter(x => isPrime(x))\n        val\
    \ maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]\n        for\
    \ (i <- 2 to lst.max.toInt) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        var max =\
    \ 0L\n        for (i <- lst) {\n            if (primes.contains(i)) {\n      \
    \          max = max max i\n            }\n        }\n        max.toString.map(_.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = new PrimeGenerator(lst.max).primes\n\
    \        val primeFactors = lst.map(x => primes.filter(x % _ == 0).max)\n    \
    \    val largestPrime = primeFactors.max\n        largestPrime.toString.map(_.asDigit).sum",
  "        var max = 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        return max", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- 2L to lst.max) {\n            var isPrime = true\n        \
    \    for (j <- 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n  \
    \                  isPrime = false\n                    break\n              \
    \  }\n            }\n            if (isPrime) primes += i\n        }\n       \
    \ var maxPrime = 0L\n        for (i <- primes) {\n            if (lst.contains(i))\
    \ maxPrime = i\n        }\n        var sum = 0L\n        while (maxPrime > 0)\
    \ {\n            sum += maxPrime % 10\n            maxPrime /= 10\n        }\n\
    \        sum", "        val primes = new PrimeGenerator(lst.max).primes.toList\n\
    \        val primeMap = primes.map(x => (x, x.toString.map(_.asDigit).sum)).toMap\n\
    \        lst.map(x => primeMap(primes.find(x % _ == 0).get)).sum", "        var\
    \ primes = new ListBuffer[Long]\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        if (primes.isEmpty) return 0\n        var max\
    \ = primes.max\n        var sum = 0\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  var primes = new ListBuffer[Long]\n        var max = 0L\n        for (i <-\
    \ lst) {\n            if (isPrime(i)) {\n                primes += i\n       \
    \         if (i > max) max = i\n            }\n        }\n        var sum = 0L\n\
    \        while (max > 0) {\n            sum += max % 10\n            max /= 10\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      var primes = new ListBuffer[Long]\n        for (i <- 2 to lst.max.toInt)\
    \ {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        var max = 0L\n        for (i <- lst) {\n   \
    \         if (primes.contains(i)) {\n                if (i > max) max = i\n  \
    \          }\n        }\n        var sum = 0L\n        while (max > 0) {\n   \
    \         sum += max % 10\n            max /= 10\n        }\n        sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(isPrime(_))\n\
    \        val max = primes.max\n        max.toString.map(_.asDigit).sum", "   \
    \     val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "     \
    \   var primes = new ListBuffer[Long]\n        for (i <- lst) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        var max = primes.max\n        var\
    \ sum = 0L\n        while (max > 0) {\n            sum += max % 10\n         \
    \   max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        val digits = maxPrime.toString.toList.map(x\
    \ => x.toString.toLong)\n        digits.sum", "        var primes = new ListBuffer[Long]\n\
    \        for (i <- 2 to lst.max.toInt) {\n            var isPrime = true\n   \
    \         for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n\
    \                    isPrime = false\n                    break\n            \
    \    }\n            }\n            if (isPrime) primes += i\n        }\n     \
    \   var max = 0L\n        for (i <- lst) {\n            if (primes.contains(i))\
    \ {\n                var sum = 0L\n                var x = i\n               \
    \ while (x > 0) {\n                    sum += x % 10\n                    x /=\
    \ 10\n                }\n                max = max max sum\n            }\n  \
    \      }\n        max", "        var max = 0L\n        for (i <- lst) {\n    \
    \        if (i > max && isPrime(i)) max = i\n        }\n        return sumDigits(max)",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", "    \
    \    val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        def isPrime(n : Long) : Boolean = {\n            if\
    \ (n < 2) return false\n            if (n == 2) return true\n            if (n\
    \ % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt by 2) {\n \
    \               if (n % i == 0) return false\n            }\n            return\
    \ true\n        }\n        var max = 0L\n        for (i <- lst) {\n          \
    \  if (isPrime(i) && i > max) max = i\n        }\n        var sum = 0L\n     \
    \   while (max > 0) {\n            sum += max % 10\n            max /= 10\n  \
    \      }\n        return sum", "        var max = 0L\n        for (i <- lst) {\n\
    \            if (isPrime(i)) {\n                if (i > max) max = i\n       \
    \     }\n        }\n        return sumDigits(max)", "        var max = 0L\n  \
    \      for (i <- lst) {\n            if (isPrime(i)) {\n                if (i\
    \ > max) max = i\n            }\n        }\n        var sum = 0L\n        while\
    \ (max > 0) {\n            sum += max % 10\n            max /= 10\n        }\n\
    \        return sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        val digits = max.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0L\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                if (i > max) max = i\n            }\n        }\n        if (max\
    \ == 0) return 0\n        var sum = 0L\n        while (max > 0) {\n          \
    \  sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        return sumDigits(max)", '        lst.filter(x => isPrime(x)).max.toString.map(x
    => x.asDigit).sum', "        val primes = lst.filter(x => isPrime(x))\n      \
    \  val max = primes.max\n        val digits = max.toString.map(_.asDigit).toList\n\
    \        return digits.sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        if (primes.isEmpty) 0\n        else primes.max.toString.map(_.asDigit).sum",
  "        var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                if (i > max) max = i\n            }\n        }\n        return\
    \ max", "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n\
    \            if (isPrime(i)) {\n                primes += i\n            }\n \
    \       }\n        var max = primes.max\n        var sum = 0L\n        while (max\
    \ > 0) {\n            sum += max % 10\n            max /= 10\n        }\n    \
    \    return sum", "        val primes = new PrimeGenerator(lst.max).primes\n \
    \       val primeSet = primes.toSet\n        val primeLst = primes.toList\n  \
    \      val primeMap = primeLst.zipWithIndex.toMap\n        val primeTree = new\
    \ PrimeTree(primeLst)\n        val primeTreeMap = primeTree.primeTreeMap\n   \
    \     val primeTreeSet = primeTree.primeTreeSet\n        val primeTreeLst = primeTree.primeTreeLst\n\
    \        val primeTreeLstMap = primeTreeLst.zipWithIndex.toMap\n        val primeTreeLstSet\
    \ = primeTreeLst.toSet\n        val primeTreeLstMapSet = primeTreeLstMap.keySet\n\
    \        val primeTreeLstMapSetMap = primeTreeLstMapSet.map(x => (x, primeTreeLstMap(x))).toMap\n\
    \        val primeTreeLstMapSetMapSet = primeTreeLstMapSetMap.keySet\n       \
    \ val primeTreeLstMapSetMapSetMap = primeTreeLstMapSetMapSet.map(x => (x, primeTreeLstMapSetMap(x))).toMap\n\
    \        val primeTreeLstMapSetMapSetMapSet = primeTreeLstMapSetMapSetMap.keySet\n\
    \        val primeTreeLstMapSetMapSetMapSetMap = primeTreeLstMapSetMapSetMapSet.map(x\
    \ => (x, primeTreeLstMapSetMapSetMap(x))).toMap\n        val primeTreeLstMapSetMapSetMapSetMapSet\
    \ = primeTreeLstMapSetMapSetMapSetMap.keySet\n        val primeTreeLstMapSetMapSetMapSetMapSetMap\
    \ = primeTreeLstMapSetMapSetMapSetMapSet.map(x => (x, primeTreeLstMapSetMapSetMapSetMap(x))).toMap\n\
    \        val primeTreeLstMapSetMapSetMapSetMapSetMapSet = primeTreeLstMapSetMapSetMapSetMapSetMap.keySet\n\
    \        val primeTreeLstMapSetMapSetMapSetMapSetMapSetMap = primeTreeLstMapSetMapSetMapSetMapSetMapSet.map(x\
    \ => (x, primeTreeLstMapSetMapSetMapSetMapSetMap", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val largestPrime = primes.max\n        val digits = largestPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ val primes = lst.filter(isPrime(_))\n        val max = primes.max\n        return\
    \ max.toString.map(_.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        sumDigits(max)", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n        maxPrime.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", '        lst.filter(x => isPrime(x)).max.toString.map(x
    => x.asDigit).sum', "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- 2L to lst.max) {\n            var isPrime = true\n            for (j <-\
    \ 2L to sqrt(i).toLong) {\n                if (i % j == 0) {\n               \
    \     isPrime = false\n                    break\n                }\n        \
    \    }\n            if (isPrime) primes += i\n        }\n        var maxPrime\
    \ = 0L\n        for (i <- primes) {\n            if (lst.contains(i)) maxPrime\
    \ = i\n        }\n        var sum = 0L\n        var x = maxPrime\n        while\
    \ (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n     \
    \   sum", "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime\
    \ = primes.max\n        val digits = maxPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        var sum = 0L\n        var x = max\n       \
    \ while (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n\
    \        sum", "        var primes = new ArrayBuffer[Long]\n        for (i <-\
    \ 2 to lst.max.toInt) {\n            var isPrime = true\n            for (j <-\
    \ 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n                 \
    \   isPrime = false\n                    break\n                }\n          \
    \  }\n            if (isPrime) primes += i\n        }\n        var max = 0L\n\
    \        for (i <- lst) {\n            if (primes.contains(i)) max = max max i\n\
    \        }\n        var sum = 0L\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        sum", "        var max =\
    \ 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n              \
    \  if (i > max) max = i\n            }\n        }\n        return sumDigits(max)",
  "        var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                if (i > max) max = i\n            }\n        }\n        var sum\
    \ = 0L\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val largestPrime = primes.max\n        val digits = largestPrime.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        val primes = new ArrayBuffer[Long]\n        def\
    \ isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n    \
    \        if (n == 2) return true\n            if (n % 2 == 0) return false\n \
    \           for (i <- 3L to sqrt(n).toLong by 2) {\n                if (n % i\
    \ == 0) return false\n            }\n            return true\n        }\n    \
    \    for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n  \
    \      val max = primes.max\n        var sum = 0L\n        for (i <- max.toString)\
    \ {\n            sum += i.toString.toLong\n        }\n        return sum", " \
    \       var primes = new ListBuffer[Long]\n        var max = 0L\n        for (i\
    \ <- lst) {\n            if (isPrime(i)) {\n                primes += i\n    \
    \            if (i > max) max = i\n            }\n        }\n        var sum =\
    \ 0L\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val largest = primes.max\n        largest.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      var max = 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        return sumDigits(max)", "        def isPrime(n :\
    \ Long) : Boolean = {\n            if (n == 1) return false\n            if (n\
    \ == 2) return true\n            if (n % 2 == 0) return false\n            for\
    \ (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n\
    \            }\n            return true\n        }\n        var max = 0L\n   \
    \     for (i <- lst) {\n            if (isPrime(i) && i > max) max = i\n     \
    \   }\n        var sum = 0L\n        while (max > 0) {\n            sum += max\
    \ % 10\n            max /= 10\n        }\n        return sum", "        val primes\
    \ = lst.filter(x => isPrime(x))\n        val max = primes.max\n        sumDigits(max)",
  "        var max = 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        return sumDigits(max)", "        var max = 0L\n\
    \        for (i <- lst) {\n            if (isPrime(i)) {\n                if (i\
    \ > max) max = i\n            }\n        }\n        var sum = 0L\n        while\
    \ (max > 0) {\n            sum += max % 10\n            max /= 10\n        }\n\
    \        return sum", "        var max = 0L\n        for (i <- lst) {\n      \
    \      if (i > max && isPrime(i)) max = i\n        }\n        return sumDigits(max)",
  "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) {\n                primes += i\n            }\n        }\n\
    \        var max = primes.max\n        var sum = 0L\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        return\
    \ sum", "        var primes = new ListBuffer[Long]\n        for (i <- lst) {\n\
    \            if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n\
    \        var sum = 0L\n        while (max > 0) {\n            sum += max % 10\n\
    \            max /= 10\n        }\n        return sum", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val max = primes.max\n        var sum =\
    \ 0L\n        var temp = max\n        while (temp > 0) {\n            sum += temp\
    \ % 10\n            temp /= 10\n        }\n        sum", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val largestPrime = primes.max\n       \
    \ largestPrime.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val largest = primes.max\n        largest.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(isPrime(_))\n        val max = primes.max\n   \
    \     max.toString.map(_.asDigit).sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        val digits = max.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]()\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = 0L\n        for (i <- primes) {\n            if (i > max) max = i\n  \
    \      }\n        var sum = 0L\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        var\
    \ max = 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i)) max\
    \ = i\n        }\n        return sumDigits(max)", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largestPrime = primes.max\n        sumDigits(largestPrime)",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        return sumDigits(max)", "        val primes = new ArrayBuffer[Long]\n\
    \        for (i <- 2 to lst.max.toInt) {\n            var isPrime = true\n   \
    \         for (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n\
    \                    isPrime = false\n                    break\n            \
    \    }\n            }\n            if (isPrime) primes += i\n        }\n     \
    \   var max = 0L\n        for (i <- primes) {\n            if (lst.contains(i))\
    \ {\n                max = i\n            }\n        }\n        max.toString.map(_.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "     \
    \   var primes = new ListBuffer[Long]\n        for (i <- lst) {\n            if\
    \ (isPrime(i)) primes += i\n        }\n        var max = primes.max\n        var\
    \ sum = 0L\n        while (max > 0) {\n            sum += max % 10\n         \
    \   max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val largest = primes.max\n        largest.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", '        lst.filter(x => isPrime(x)).max.toString.map(x
    => x.asDigit).sum', "        val primes = new ArrayBuffer[Long]\n        val primesSet\
    \ = new HashSet[Long]\n        val max = lst.max\n        for (i <- 2L to max)\
    \ {\n            if (!primesSet.contains(i)) {\n                primes += i\n\
    \                primesSet += i\n                var j = i * i\n             \
    \   while (j <= max) {\n                    primesSet += j\n                 \
    \   j += i\n                }\n            }\n        }\n        val prime = primes.max\n\
    \        var sum = 0L\n        var n = prime\n        while (n > 0) {\n      \
    \      sum += n % 10\n            n /= 10\n        }\n        sum", "        val\
    \ primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n       \
    \ return sumDigits(max)", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largestPrime = primes.max\n        largestPrime.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        return sumDigits(max)", "        var max =\
    \ 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n\
    \        }\n        return sumDigits(max)", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val largestPrime = primes.max\n        largestPrime.toString.map(x\
    \ => x.asDigit).sum", "        var max = 0L\n        for (i <- lst) {\n      \
    \      if (isPrime(i)) {\n                if (i > max) max = i\n            }\n\
    \        }\n        var sum = 0L\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        val\
    \ primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n       \
    \ max.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val largest = primes.max\n        largest.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val largestPrime = primes.max\n        val digits = largestPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        var max = 0L\n        for (i <- lst) {\n      \
    \      if (i > max && isPrime(i)) max = i\n        }\n        return max", " \
    \       val primes = new PrimeIterator\n        var max = 0L\n        for (i <-\
    \ lst) {\n            if (primes.isPrime(i)) {\n                max = max max\
    \ i\n            }\n        }\n        var sum = 0L\n        while (max > 0) {\n\
    \            sum += max % 10\n            max /= 10\n        }\n        sum",
  "        var max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n\
    \                if (i > max) max = i\n            }\n        }\n        var sum\
    \ = 0L\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        var max = 0L\n        for (i\
    \ <- lst) {\n            if (i > max && isPrime(i)) max = i\n        }\n     \
    \   var sum = 0L\n        for (i <- max.toString) {\n            sum += i.toString.toLong\n\
    \        }\n        return sum", "        val primes = lst.filter(x => isPrime(x))\n\
    \        val max = primes.max\n        max.toString.map(x => x.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit).toList\n        digits.sum",
  "        var primes = new ArrayBuffer[Long]\n        for (i <- 2 to lst.max.toInt)\
    \ {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        var max = 0L\n        for (i <- lst) {\n   \
    \         if (primes.contains(i)) {\n                if (i > max) max = i\n  \
    \          }\n        }\n        var sum = 0L\n        while (max > 0) {\n   \
    \         sum += max % 10\n            max /= 10\n        }\n        sum", " \
    \       var primes = new ArrayBuffer[Long]\n        for (i <- lst) {\n       \
    \     if (isPrime(i)) primes += i\n        }\n        var max = 0L\n        for\
    \ (i <- primes) {\n            if (i > max) max = i\n        }\n        var sum\
    \ = 0L\n        while (max > 0) {\n            sum += max % 10\n            max\
    \ /= 10\n        }\n        return sum", "        val primes = lst.filter(x =>\
    \ isPrime(x))\n        val maxPrime = primes.max\n        maxPrime.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", "        var primes = new\
    \ ListBuffer[Long]\n        for (i <- lst) {\n            if (isPrime(i)) primes\
    \ += i\n        }\n        var max = primes.max\n        var sum = 0L\n      \
    \  while (max > 0) {\n            sum += max % 10\n            max /= 10\n   \
    \     }\n        return sum", "        val primes = new ArrayBuffer[Long]\n  \
    \      def isPrime(n : Long) : Boolean = {\n            if (n == 2) return true\n\
    \            if (n % 2 == 0) return false\n            for (i <- 3 to sqrt(n).toInt\
    \ by 2) {\n                if (n % i == 0) return false\n            }\n     \
    \       return true\n        }\n        for (i <- lst) {\n            if (isPrime(i))\
    \ primes += i\n        }\n        val max = primes.max\n        var sum = 0L\n\
    \        for (i <- max.toString) {\n            sum += i.toString.toInt\n    \
    \    }\n        return sum", "        val primes = lst.filter(isPrime)\n     \
    \   val max = primes.max\n        sumDigits(max)", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n < 2) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            for (i <-\
    \ 3 to sqrt(n).toInt by 2) {\n                if (n % i == 0) return false\n \
    \           }\n            return true\n        }\n        val primes = lst.filter(isPrime(_))\n\
    \        val maxPrime = primes.max\n        return maxPrime.toString.map(_.asDigit).sum",
  "        var primes = new ArrayBuffer[Long]()\n        for (i <- 2 to lst.max.toInt)\
    \ {\n            var isPrime = true\n            for (j <- 2 to sqrt(i).toInt)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false\n\
    \                    break\n                }\n            }\n            if (isPrime)\
    \ primes += i\n        }\n        var maxPrime = 0L\n        for (i <- primes)\
    \ {\n            if (lst.contains(i)) maxPrime = i\n        }\n        var sum\
    \ = 0L\n        while (maxPrime > 0) {\n            sum += maxPrime % 10\n   \
    \         maxPrime /= 10\n        }\n        sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "     \
    \   val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        return sumDigits(maxPrime)",
  "        val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        sumDigits(max)", "        var primes = new HashSet[Long]\n        for\
    \ (i <- 2 to lst.max.toInt) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes.add(i)\n        }\n        var max\
    \ = 0L\n        for (i <- lst) {\n            if (primes.contains(i)) {\n    \
    \            if (i > max) max = i\n            }\n        }\n        var sum =\
    \ 0L\n        var temp = max\n        while (temp > 0) {\n            sum += temp\
    \ % 10\n            temp /= 10\n        }\n        sum", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val max = primes.max\n        max.toString.map(x\
    \ => x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      var primes = new ListBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n   \
    \     var sum = 0L\n        while (max > 0) {\n            sum += max % 10\n \
    \           max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        val digits = max.toString.map(_.asDigit)\n\
    \        digits.sum", "        var primes = new ListBuffer[Long]\n        for\
    \ (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var\
    \ max = primes.max\n        var sum = 0L\n        while (max > 0) {\n        \
    \    sum += max % 10\n            max /= 10\n        }\n        return sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n\
    \        val digits = max.toString.map(_.asDigit)\n        digits.sum", '        lst.filter(x
    => isPrime(x)).max.toString.map(x => x.asDigit).sum', "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val maxPrime = primes.max\n        return maxPrime.toString.map(_.asDigit).sum",
  "        val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val largest = primes.max\n        largest.toString.map(x => x.asDigit).sum",
  "        def isPrime(n : Long) : Boolean = {\n            if (n == 1) return false\n\
    \            if (n == 2) return true\n            if (n % 2 == 0) return false\n\
    \            for (i <- 3 to sqrt(n).toInt by 2) {\n                if (n % i ==\
    \ 0) return false\n            }\n            return true\n        }\n       \
    \ var max = 0L\n        for (i <- lst) {\n            if (isPrime(i) && i > max)\
    \ max = i\n        }\n        var sum = 0L\n        for (i <- max.toString) {\n\
    \            sum += i.toString.toInt\n        }\n        return sum", "      \
    \  val primes = lst.filter(x => isPrime(x))\n        val max = primes.max\n  \
    \      val digits = max.toString.map(_.asDigit).toList\n        digits.sum", '        lst.filter(x
    => isPrime(x)).max.toString.map(x => x.asDigit).sum', "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        val digits = max.toString.map(_.asDigit).toList\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val max = primes.max\n        max.toString.map(x => x.asDigit).sum", "  \
    \      var primes = new ListBuffer[Long]\n        for (i <- lst) {\n         \
    \   if (isPrime(i)) primes += i\n        }\n        var max = primes.max\n   \
    \     var sum = 0L\n        while (max > 0) {\n            sum += max % 10\n \
    \           max /= 10\n        }\n        return sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val largest = primes.max\n        sumDigits(largest)", "        val primes =\
    \ lst.filter(x => isPrime(x))\n        val largest = primes.max\n        sumDigits(largest)",
  "        val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        val primes = lst.filter(x => isPrime(x))\n       \
    \ val max = primes.max\n        val digits = max.toString.toList.map(x => x.toString.toLong)\n\
    \        digits.sum", "        val primes = lst.filter(x => isPrime(x))\n    \
    \    val maxPrime = primes.max\n        val digits = maxPrime.toString.map(_.asDigit)\n\
    \        digits.sum", "        def isPrime(n : Long) : Boolean = {\n         \
    \   if (n == 1) return false\n            if (n == 2) return true\n          \
    \  if (n % 2 == 0) return false\n            var i = 3\n            while (i <=\
    \ sqrt(n).toInt) {\n                if (n % i == 0) return false\n           \
    \     i += 2\n            }\n            return true\n        }\n        var max\
    \ = 0L\n        for (i <- lst) {\n            if (isPrime(i) && i > max) max =\
    \ i\n        }\n        var sum = 0L\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  val primes = lst.filter(isPrime(_))\n        val maxPrime = primes.max\n  \
    \      maxPrime.toString.map(_.asDigit).sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        max.toString.map(x =>\
    \ x.asDigit).sum", "        var max = 0L\n        for (i <- lst) {\n         \
    \   if (i > max && isPrime(i)) max = i\n        }\n        var sum = 0L\n    \
    \    for (i <- max.toString) {\n            sum += i.toString.toLong\n       \
    \ }\n        return sum", "        var primes = new ListBuffer[Long]\n       \
    \ for (i <- lst) {\n            if (isPrime(i)) primes += i\n        }\n     \
    \   var max = primes.max\n        var sum = 0L\n        while (max > 0) {\n  \
    \          sum += max % 10\n            max /= 10\n        }\n        return sum",
  "        var max = 0L\n        for (i <- lst) {\n            if (i > max && isPrime(i))\
    \ max = i\n        }\n        return max", "        var max = 0L\n        for\
    \ (i <- lst) {\n            if (i > max && isPrime(i)) max = i\n        }\n  \
    \      return max", "        var primes = new ListBuffer[Long]\n        for (i\
    \ <- lst) {\n            if (isPrime(i)) primes += i\n        }\n        var max\
    \ = primes.max\n        var sum = 0L\n        while (max > 0) {\n            sum\
    \ += max % 10\n            max /= 10\n        }\n        return sum", "      \
    \  val primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n\
    \        largest.toString.map(x => x.asDigit).sum", '        val primes = List(2,
    3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,
    83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167,
    173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257,
    263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353,
    359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449,
    457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
    569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653,
    659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761,
    769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877,
    881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991,
    997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087,
    1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181,
    1187, 1193, 1201, 1213', "        var primes = new ListBuffer[Long]\n        var\
    \ max = 0L\n        for (i <- lst) {\n            if (isPrime(i)) {\n        \
    \        primes += i\n                if (i > max) max = i\n            }\n  \
    \      }\n        var sum = 0L\n        while (max > 0) {\n            sum +=\
    \ max % 10\n            max /= 10\n        }\n        return sum", "        val\
    \ primes = lst.filter(x => isPrime(x))\n        val largest = primes.max\n   \
    \     largest.toString.map(x => x.asDigit).sum", "        def isPrime(n : Long)\
    \ : Boolean = {\n            if (n == 1) return false\n            if (n == 2)\
    \ return true\n            if (n % 2 == 0) return false\n            val sqrt\
    \ = sqrt(n).toLong\n            for (i <- 3 to sqrt by 2) {\n                if\
    \ (n % i == 0) return false\n            }\n            return true\n        }\n\
    \        def getDigits(n : Long) : List[Long] = {\n            var nn = n\n  \
    \          var digits = List[Long]()\n            while (nn > 0) {\n         \
    \       digits = (nn % 10) :: digits\n                nn /= 10\n            }\n\
    \            return digits\n        }\n        var max = 0L\n        for (i <-\
    \ lst) {\n            if (isPrime(i) && i > max) max = i\n        }\n        return\
    \ getDigits(max).sum", "        val primes = lst.filter(x => isPrime(x))\n   \
    \     val max = primes.max\n        max.toString.map(x => x.asDigit).sum", " \
    \       val primes = lst.filter(x => isPrime(x))\n        val maxPrime = primes.max\n\
    \        maxPrime.toString.map(x => x.asDigit).sum", "        val primes = new\
    \ PrimeIterator\n        var max = 0L\n        var maxPrime = 0L\n        while\
    \ (primes.hasNext) {\n            val prime = primes.next\n            if (lst.contains(prime))\
    \ {\n                if (prime > max) {\n                    max = prime\n   \
    \                 maxPrime = prime\n                }\n            }\n       \
    \ }\n        maxPrime", "        val primes = new ArrayBuffer[Long]\n        for\
    \ (i <- 2 to lst.max.toInt) {\n            var isPrime = true\n            for\
    \ (j <- 2 to sqrt(i).toInt) {\n                if (i % j == 0) {\n           \
    \         isPrime = false\n                    break\n                }\n    \
    \        }\n            if (isPrime) primes += i\n        }\n        var maxPrime\
    \ = 0L\n        for (i <- lst) {\n            if (primes.contains(i)) {\n    \
    \            maxPrime = max(maxPrime, i)\n            }\n        }\n        var\
    \ sum = 0L\n        while (maxPrime > 0) {\n            sum += maxPrime % 10\n\
    \            maxPrime /= 10\n        }\n        sum", "        val primes = lst.filter(x\
    \ => isPrime(x))\n        val max = primes.max\n        var sum = 0L\n       \
    \ var x = max\n        while (x > 0) {\n            sum += x % 10\n          \
    \  x /= 10\n        }\n        sum"]
stop_tokens:
- "\n    }\n"
