name: HumanEval_4_mean_absolute_deviation
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // For a given list of input numbers, calculate Mean Absolute Deviation\n \
  \   // around the mean of this dataset.\n    // Mean Absolute Deviation is the average\
  \ absolute difference between each\n    // element and a centerpoint (mean in this\
  \ case):\n    // MAD = average | x - x_mean |\n    def meanAbsoluteDeviation(numbers\
  \ : List[Float]) : Float = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat))) == (0.5f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat))) == (1.0f));\n    assert(meanAbsoluteDeviation((List[Float](1.0f.toFloat,\
  \ 2.0f.toFloat, 3.0f.toFloat, 4.0f.toFloat, 5.0f.toFloat))) == (1.2f));\n    }\n\
  \n}\n"
completions: ["        val mean = numbers.sum / numbers.length\n        val deviations\
    \ = numbers.map(x => abs(x - mean))\n        deviations.sum / deviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(abs(_\
    \ - mean))\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val absoluteDifferences = numbers.map(x => abs(x -\
    \ mean))\n        absoluteDifferences.sum / absoluteDifferences.length", "   \
    \     val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDifferences = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDifferences\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDifferences\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        numbers.map(x => abs(x - mean)).sum / numbers.length", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => abs(x\
    \ - mean))\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map(abs(_ - mean)).sum / numbers.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(n\
    \ => abs(n - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDifferences\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val diffs = numbers.map(x => abs(x\
    \ - mean))\n        diffs.sum / diffs.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val absoluteDifferences = numbers.map(x => abs(x -\
    \ mean))\n        absoluteDifferences.sum / absoluteDifferences.length", "   \
    \     val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        numbers.map(abs(_ - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(n => abs(n - mean))\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     numbers.map(abs(_ - mean)).sum / numbers.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val absDifferences = numbers.map(x => abs(x - mean))\n\
    \        absDifferences.sum / absDifferences.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val absoluteDeviations = numbers.map(x => abs(x -\
    \ mean))\n        absoluteDeviations.sum / absoluteDeviations.length", "     \
    \   val mean = numbers.sum / numbers.length\n        val absoluteDeviations =\
    \ numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        numbers.map(x => abs(x - mean)).sum / numbers.length", "        val mean\
    \ = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val diffs = numbers.map(x => abs(x - mean))\n        diffs.sum / diffs.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val diffs = numbers.map(x => abs(x\
    \ - mean))\n        diffs.sum / diffs.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        val deviations = numbers.map(x => abs(x - mean))\n\
    \        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map(x => abs(x - mean)).sum / numbers.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDifferences = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum\
    \ / absoluteDifferences.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(abs(_ - mean))\n        deviations.sum /\
    \ deviations.length", "        val mean = numbers.sum / numbers.length\n     \
    \   val absoluteDifferences = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum\
    \ / absoluteDifferences.length", "        val mean = numbers.sum / numbers.length\n\
    \        val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val absoluteDifferences = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum\
    \ / absoluteDifferences.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDifferences = numbers.map(x => abs(x - mean))\n        absoluteDifferences.sum\
    \ / absoluteDifferences.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     numbers.map(x => abs(x - mean)).sum / numbers.length", "        val mean\
    \ = numbers.sum / numbers.length\n        val deviations = numbers.map(x => abs(x\
    \ - mean))\n        deviations.sum / deviations.length", "        val mean = numbers.sum\
    \ / numbers.length\n        numbers.map(x => abs(x - mean)).sum / numbers.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        numbers.map(x => abs(x - mean)).sum\
    \ / numbers.length", "        val mean = numbers.sum / numbers.length\n      \
    \  val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val absoluteDeviations = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum\
    \ / absoluteDeviations.length", "        val mean = numbers.sum / numbers.length\n\
    \        val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val deviations = numbers.map(x => abs(x - mean))\n        deviations.sum\
    \ / deviations.length", "        val mean = numbers.sum / numbers.length\n   \
    \     val diffs = numbers.map(x => abs(x - mean))\n        diffs.sum / diffs.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDifferences = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(n\
    \ => abs(n - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDifferences = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(n\
    \ => abs(n - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        //\
    \ Calculate mean of dataset\n        val mean = numbers.sum / numbers.length\n\
    \        // Calculate absolute difference between each element and mean\n    \
    \    val absoluteDifferences = numbers.map(x => abs(x - mean))\n        // Calculate\
    \ average of absolute differences\n        absoluteDifferences.sum / absoluteDifferences.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        return absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length", "        val\
    \ mean = numbers.sum / numbers.length\n        val absoluteDeviations = numbers.map(x\
    \ => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val absoluteDeviations\
    \ = numbers.map(x => abs(x - mean))\n        absoluteDeviations.sum / absoluteDeviations.length",
  "        val mean = numbers.sum / numbers.length\n        val deviations = numbers.map(x\
    \ => abs(x - mean))\n        deviations.sum / deviations.length"]
stop_tokens:
- "\n    }\n"
