name: HumanEval_60_sum_to_n
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // sum_to_n is a function that sums numbers from 1 to n.\n    def sumToN(n\
  \ : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(sumToN((1l)) == (1l));\n\
  \    assert(sumToN((6l)) == (21l));\n    assert(sumToN((11l)) == (66l));\n    assert(sumToN((30l))\
  \ == (465l));\n    assert(sumToN((100l)) == (5050l));\n    }\n\n}\n"
completions: ['        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2',
  '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n
    + 1)) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1))
    / 2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n
    + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) /
    2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2', '        (n * (n + 1)) / 2', "        if (n == 1) 1\n        else n\
    \ + sumToN(n - 1)", "        // We use the formula for the sum of the first n\
    \ natural numbers.\n        return n * (n + 1) / 2", '        return (n * (n +
    1)) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        (n * (n + 1)) /
    2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n
    + 1)) / 2', '        return n * (n + 1) / 2', "        if (n == 1) 1\n       \
    \ else n + sumToN(n - 1)", '        return n * (n + 1) / 2', "        if (n ==\
    \ 1) 1\n        else n + sumToN(n - 1)", '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2', '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n
    + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n +
    1) / 2', "        var sum = 0L\n        for (i <- 1L to n) {\n            sum\
    \ += i\n        }\n        return sum", '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n
    + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2',
  '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) /
    2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return n * (n +
    1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', "        var sum = 0L\n        for (i <- 1L to n) {\n      \
    \      sum += i\n        }\n        return sum", '        return (n * (n + 1))
    / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        n * (n + 1) / 2',
  '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1)
    / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        (n * (n + 1)) / 2', '        return (n * (n + 1))
    / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n
    + 1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) /
    2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return (n * (n + 1)) / 2', '        return (n * (n + 1)) / 2',
  '        return (n * (n + 1)) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2', '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2',
  '        return n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return
    n * (n + 1) / 2', '        return (n * (n + 1)) / 2', '        return n * (n +
    1) / 2', '        return n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return
    n * (n + 1) / 2', '        return n * (n + 1) / 2', '        return (n * (n +
    1)) / 2']
stop_tokens:
- "\n    }\n"
